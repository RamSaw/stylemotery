>3	FunctionDef	CameraInfo 
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	CallExpression	matrix_product ( 3 , 3 , 3 , 4 , K , Ptmp , m_Pmatrix )
>9	ArgumentList	3
>10	Argument	m_Pmatrix
>11	Identifier	m_Pmatrix
>12	Argument	Ptmp
>13	Identifier	Ptmp
>14	Argument	K
>15	Identifier	K
>16	Argument	4
>17	PrimaryExpression	4
>18	Argument	3
>19	PrimaryExpression	3
>20	Argument	3
>21	PrimaryExpression	3
>22	Argument	3
>23	PrimaryExpression	3
>24	Callee	matrix_product
>25	Identifier	matrix_product
>26	ExpressionStatement	 
>27	CallExpression	GetIntrinsics ( K )
>28	ArgumentList	K
>29	Argument	K
>30	Identifier	K
>31	Callee	GetIntrinsics
>32	Identifier	GetIntrinsics
>33	IdentifierDeclStatement	 
>34	IdentifierDecl	Ptmp [ 12 ] = { m_R [ 0 ] , m_R [ 1 ] , m_R [ 2 ] , m_t [ 0 ] , m_R [ 3 ] , m_R [ 4 ] , m_R [ 5 ] , m_t [ 1 ] , \
>35	AssignmentExpr	Ptmp [ 12 ] = { m_R [ 0 ] , m_R [ 1 ] , m_R [ 2 ] , m_t [ 0 ] , m_R [ 3 ] , m_R [ 4 ] , m_R [ 5 ] , m_\
>36	InitializerList	m_R [ 0 ]
>37	ArrayIndexing	m_t [ 2 ]
>38	PrimaryExpression	2
>39	Identifier	m_t
>40	ArrayIndexing	m_R [ 8 ]
>41	PrimaryExpression	8
>42	Identifier	m_R
>43	ArrayIndexing	m_R [ 7 ]
>44	PrimaryExpression	7
>45	Identifier	m_R
>46	ArrayIndexing	m_R [ 6 ]
>47	PrimaryExpression	6
>48	Identifier	m_R
>49	ArrayIndexing	m_t [ 1 ]
>50	PrimaryExpression	1
>51	Identifier	m_t
>52	ArrayIndexing	m_R [ 5 ]
>53	PrimaryExpression	5
>54	Identifier	m_R
>55	ArrayIndexing	m_R [ 4 ]
>56	PrimaryExpression	4
>57	Identifier	m_R
>58	ArrayIndexing	m_R [ 3 ]
>59	PrimaryExpression	3
>60	Identifier	m_R
>61	ArrayIndexing	m_t [ 0 ]
>62	PrimaryExpression	0
>63	Identifier	m_t
>64	ArrayIndexing	m_R [ 2 ]
>65	PrimaryExpression	2
>66	Identifier	m_R
>67	ArrayIndexing	m_R [ 1 ]
>68	PrimaryExpression	1
>69	Identifier	m_R
>70	ArrayIndexing	m_R [ 0 ]
>71	PrimaryExpression	0
>72	Identifier	m_R
>73	Identifier	Ptmp
>74	PrimaryExpression	12
>75	Identifier	Ptmp
>76	IdentifierDeclType	double [ 12 ]
>77	IdentifierDeclStatement	 
>78	IdentifierDecl	K [ 9 ]
>79	PrimaryExpression	9
>80	Identifier	K
>81	IdentifierDeclType	double [ 9 ]
>92	FunctionDef	CameraInfo 
>93	ParameterList	double * T
>94	Parameter	 
>95	Identifier	T
>96	ParameterType	double *
>97	ReturnType	void
>98	CompoundStatement	 
>99	ExpressionStatement	 
>100	AssignmentExpr	T [ 11 ] = m_t [ 2 ]
>101	ArrayIndexing	m_t [ 2 ]
>102	PrimaryExpression	2
>103	Identifier	m_t
>104	ArrayIndexing	T [ 11 ]
>105	PrimaryExpression	11
>106	Identifier	T
>107	ExpressionStatement	 
>108	AssignmentExpr	T [ 10 ] = m_R [ 8 ]
>109	ArrayIndexing	m_R [ 8 ]
>110	PrimaryExpression	8
>111	Identifier	m_R
>112	ArrayIndexing	T [ 10 ]
>113	PrimaryExpression	10
>114	Identifier	T
>115	ExpressionStatement	 
>116	AssignmentExpr	T [ 9 ] = m_R [ 7 ]
>117	ArrayIndexing	m_R [ 7 ]
>118	PrimaryExpression	7
>119	Identifier	m_R
>120	ArrayIndexing	T [ 9 ]
>121	PrimaryExpression	9
>122	Identifier	T
>123	ExpressionStatement	 
>124	AssignmentExpr	T [ 8 ] = m_R [ 6 ]
>125	ArrayIndexing	m_R [ 6 ]
>126	PrimaryExpression	6
>127	Identifier	m_R
>128	ArrayIndexing	T [ 8 ]
>129	PrimaryExpression	8
>130	Identifier	T
>131	ExpressionStatement	 
>132	AssignmentExpr	T [ 7 ] = m_t [ 1 ]
>133	ArrayIndexing	m_t [ 1 ]
>134	PrimaryExpression	1
>135	Identifier	m_t
>136	ArrayIndexing	T [ 7 ]
>137	PrimaryExpression	7
>138	Identifier	T
>139	ExpressionStatement	 
>140	AssignmentExpr	T [ 6 ] = m_R [ 5 ]
>141	ArrayIndexing	m_R [ 5 ]
>142	PrimaryExpression	5
>143	Identifier	m_R
>144	ArrayIndexing	T [ 6 ]
>145	PrimaryExpression	6
>146	Identifier	T
>147	ExpressionStatement	 
>148	AssignmentExpr	T [ 5 ] = m_R [ 4 ]
>149	ArrayIndexing	m_R [ 4 ]
>150	PrimaryExpression	4
>151	Identifier	m_R
>152	ArrayIndexing	T [ 5 ]
>153	PrimaryExpression	5
>154	Identifier	T
>155	ExpressionStatement	 
>156	AssignmentExpr	T [ 4 ] = m_R [ 3 ]
>157	ArrayIndexing	m_R [ 3 ]
>158	PrimaryExpression	3
>159	Identifier	m_R
>160	ArrayIndexing	T [ 4 ]
>161	PrimaryExpression	4
>162	Identifier	T
>163	ExpressionStatement	 
>164	AssignmentExpr	T [ 3 ] = m_t [ 0 ]
>165	ArrayIndexing	m_t [ 0 ]
>166	PrimaryExpression	0
>167	Identifier	m_t
>168	ArrayIndexing	T [ 3 ]
>169	PrimaryExpression	3
>170	Identifier	T
>171	ExpressionStatement	 
>172	AssignmentExpr	T [ 2 ] = m_R [ 2 ]
>173	ArrayIndexing	m_R [ 2 ]
>174	PrimaryExpression	2
>175	Identifier	m_R
>176	ArrayIndexing	T [ 2 ]
>177	PrimaryExpression	2
>178	Identifier	T
>179	ExpressionStatement	 
>180	AssignmentExpr	T [ 1 ] = m_R [ 1 ]
>181	ArrayIndexing	m_R [ 1 ]
>182	PrimaryExpression	1
>183	Identifier	m_R
>184	ArrayIndexing	T [ 1 ]
>185	PrimaryExpression	1
>186	Identifier	T
>187	ExpressionStatement	 
>188	AssignmentExpr	T [ 0 ] = m_R [ 0 ]
>189	ArrayIndexing	m_R [ 0 ]
>190	PrimaryExpression	0
>191	Identifier	m_R
>192	ArrayIndexing	T [ 0 ]
>193	PrimaryExpression	0
>194	Identifier	T
>204	FunctionDef	CameraInfo 
>205	ParameterList	double * T
>206	Parameter	 
>207	Identifier	T
>208	ParameterType	double *
>209	ReturnType	void
>210	CompoundStatement	 
>211	ExpressionStatement	 
>212	AssignmentExpr	T [ 15 ] = 1.0
>213	PrimaryExpression	1.0
>214	ArrayIndexing	T [ 15 ]
>215	PrimaryExpression	15
>216	Identifier	T
>217	ExpressionStatement	 
>218	AssignmentExpr	T [ 12 ] = T [ 13 ] = T [ 14 ] = 0.0
>219	AssignmentExpr	T [ 13 ] = T [ 14 ] = 0.0
>220	AssignmentExpr	T [ 14 ] = 0.0
>221	PrimaryExpression	0.0
>222	ArrayIndexing	T [ 14 ]
>223	PrimaryExpression	14
>224	Identifier	T
>225	ArrayIndexing	T [ 13 ]
>226	PrimaryExpression	13
>227	Identifier	T
>228	ArrayIndexing	T [ 12 ]
>229	PrimaryExpression	12
>230	Identifier	T
>231	ExpressionStatement	 
>232	CallExpression	GetRigid ( T )
>233	ArgumentList	T
>234	Argument	T
>235	Identifier	T
>236	Callee	GetRigid
>237	Identifier	GetRigid
>243	FunctionDef	CameraInfo 
>244	ParameterList	double * pos
>245	Parameter	 
>246	Identifier	pos
>247	ParameterType	double *
>248	CompoundStatement	 
>249	ExpressionStatement	 
>250	AssignmentExpr	pos [ 2 ] = - pos [ 2 ]
>251	UnaryOp	- pos [ 2 ]
>252	ArrayIndexing	pos [ 2 ]
>253	PrimaryExpression	2
>254	Identifier	pos
>255	UnaryOperator	-
>256	ArrayIndexing	pos [ 2 ]
>257	PrimaryExpression	2
>258	Identifier	pos
>259	ExpressionStatement	 
>260	AssignmentExpr	pos [ 1 ] = - pos [ 1 ]
>261	UnaryOp	- pos [ 1 ]
>262	ArrayIndexing	pos [ 1 ]
>263	PrimaryExpression	1
>264	Identifier	pos
>265	UnaryOperator	-
>266	ArrayIndexing	pos [ 1 ]
>267	PrimaryExpression	1
>268	Identifier	pos
>269	ExpressionStatement	 
>270	AssignmentExpr	pos [ 0 ] = - pos [ 0 ]
>271	UnaryOp	- pos [ 0 ]
>272	ArrayIndexing	pos [ 0 ]
>273	PrimaryExpression	0
>274	Identifier	pos
>275	UnaryOperator	-
>276	ArrayIndexing	pos [ 0 ]
>277	PrimaryExpression	0
>278	Identifier	pos
>279	ExpressionStatement	 
>280	AssignmentExpr	pos [ 2 ] = m_R [ 2 ] * m_t [ 0 ] + m_R [ 5 ] * m_t [ 1 ] + m_R [ 8 ] * m_t [ 2 ]
>281	AdditiveExpression	m_R [ 2 ] * m_t [ 0 ] + m_R [ 5 ] * m_t [ 1 ] + m_R [ 8 ] * m_t [ 2 ]
>282	AdditiveExpression	m_R [ 5 ] * m_t [ 1 ] + m_R [ 8 ] * m_t [ 2 ]
>283	MultiplicativeExpression	m_R [ 8 ] * m_t [ 2 ]
>284	ArrayIndexing	m_t [ 2 ]
>285	PrimaryExpression	2
>286	Identifier	m_t
>287	ArrayIndexing	m_R [ 8 ]
>288	PrimaryExpression	8
>289	Identifier	m_R
>290	MultiplicativeExpression	m_R [ 5 ] * m_t [ 1 ]
>291	ArrayIndexing	m_t [ 1 ]
>292	PrimaryExpression	1
>293	Identifier	m_t
>294	ArrayIndexing	m_R [ 5 ]
>295	PrimaryExpression	5
>296	Identifier	m_R
>297	MultiplicativeExpression	m_R [ 2 ] * m_t [ 0 ]
>298	ArrayIndexing	m_t [ 0 ]
>299	PrimaryExpression	0
>300	Identifier	m_t
>301	ArrayIndexing	m_R [ 2 ]
>302	PrimaryExpression	2
>303	Identifier	m_R
>304	ArrayIndexing	pos [ 2 ]
>305	PrimaryExpression	2
>306	Identifier	pos
>307	ExpressionStatement	 
>308	AssignmentExpr	pos [ 1 ] = m_R [ 1 ] * m_t [ 0 ] + m_R [ 4 ] * m_t [ 1 ] + m_R [ 7 ] * m_t [ 2 ]
>309	AdditiveExpression	m_R [ 1 ] * m_t [ 0 ] + m_R [ 4 ] * m_t [ 1 ] + m_R [ 7 ] * m_t [ 2 ]
>310	AdditiveExpression	m_R [ 4 ] * m_t [ 1 ] + m_R [ 7 ] * m_t [ 2 ]
>311	MultiplicativeExpression	m_R [ 7 ] * m_t [ 2 ]
>312	ArrayIndexing	m_t [ 2 ]
>313	PrimaryExpression	2
>314	Identifier	m_t
>315	ArrayIndexing	m_R [ 7 ]
>316	PrimaryExpression	7
>317	Identifier	m_R
>318	MultiplicativeExpression	m_R [ 4 ] * m_t [ 1 ]
>319	ArrayIndexing	m_t [ 1 ]
>320	PrimaryExpression	1
>321	Identifier	m_t
>322	ArrayIndexing	m_R [ 4 ]
>323	PrimaryExpression	4
>324	Identifier	m_R
>325	MultiplicativeExpression	m_R [ 1 ] * m_t [ 0 ]
>326	ArrayIndexing	m_t [ 0 ]
>327	PrimaryExpression	0
>328	Identifier	m_t
>329	ArrayIndexing	m_R [ 1 ]
>330	PrimaryExpression	1
>331	Identifier	m_R
>332	ArrayIndexing	pos [ 1 ]
>333	PrimaryExpression	1
>334	Identifier	pos
>335	ExpressionStatement	 
>336	AssignmentExpr	pos [ 0 ] = m_R [ 0 ] * m_t [ 0 ] + m_R [ 3 ] * m_t [ 1 ] + m_R [ 6 ] * m_t [ 2 ]
>337	AdditiveExpression	m_R [ 0 ] * m_t [ 0 ] + m_R [ 3 ] * m_t [ 1 ] + m_R [ 6 ] * m_t [ 2 ]
>338	AdditiveExpression	m_R [ 3 ] * m_t [ 1 ] + m_R [ 6 ] * m_t [ 2 ]
>339	MultiplicativeExpression	m_R [ 6 ] * m_t [ 2 ]
>340	ArrayIndexing	m_t [ 2 ]
>341	PrimaryExpression	2
>342	Identifier	m_t
>343	ArrayIndexing	m_R [ 6 ]
>344	PrimaryExpression	6
>345	Identifier	m_R
>346	MultiplicativeExpression	m_R [ 3 ] * m_t [ 1 ]
>347	ArrayIndexing	m_t [ 1 ]
>348	PrimaryExpression	1
>349	Identifier	m_t
>350	ArrayIndexing	m_R [ 3 ]
>351	PrimaryExpression	3
>352	Identifier	m_R
>353	MultiplicativeExpression	m_R [ 0 ] * m_t [ 0 ]
>354	ArrayIndexing	m_t [ 0 ]
>355	PrimaryExpression	0
>356	Identifier	m_t
>357	ArrayIndexing	m_R [ 0 ]
>358	PrimaryExpression	0
>359	Identifier	m_R
>360	ArrayIndexing	pos [ 0 ]
>361	PrimaryExpression	0
>362	Identifier	pos
>372	FunctionDef	CameraInfo 
>373	ParameterList	const double * pos
>374	Parameter	 
>375	Identifier	pos
>376	ParameterType	const double *
>377	ReturnType	void
>378	CompoundStatement	 
>379	ExpressionStatement	 
>380	CallExpression	matrix_scale ( 3 , 1 , m_t , - 1.0 , m_t )
>381	ArgumentList	3
>382	Argument	m_t
>383	Identifier	m_t
>384	Argument	- 1.0
>385	UnaryOp	- 1.0
>386	PrimaryExpression	1.0
>387	UnaryOperator	-
>388	Argument	m_t
>389	Identifier	m_t
>390	Argument	1
>391	PrimaryExpression	1
>392	Argument	3
>393	PrimaryExpression	3
>394	Callee	matrix_scale
>395	Identifier	matrix_scale
>396	ExpressionStatement	 
>397	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , m_R , ( double * ) pos , m_t )
>398	ArgumentList	3
>399	Argument	m_t
>400	Identifier	m_t
>401	Argument	( double * ) pos
>402	CastExpression	( double * ) pos
>403	Identifier	pos
>404	CastTarget	double *
>405	Argument	m_R
>406	Identifier	m_R
>407	Argument	1
>408	PrimaryExpression	1
>409	Argument	3
>410	PrimaryExpression	3
>411	Argument	3
>412	PrimaryExpression	3
>413	Argument	3
>414	PrimaryExpression	3
>415	Callee	matrix_product
>416	Identifier	matrix_product
>423	FunctionDef	CameraInfo 
>424	ParameterList	double * R
>425	Parameter	 
>426	Identifier	R
>427	ParameterType	double *
>428	ReturnType	void
>429	CompoundStatement	 
>430	ExpressionStatement	 
>431	CallExpression	matrix_transpose ( 3 , 3 , ( double * ) m_R , R )
>432	ArgumentList	3
>433	Argument	R
>434	Identifier	R
>435	Argument	( double * ) m_R
>436	CastExpression	( double * ) m_R
>437	Identifier	m_R
>438	CastTarget	double *
>439	Argument	3
>440	PrimaryExpression	3
>441	Argument	3
>442	PrimaryExpression	3
>443	Callee	matrix_transpose
>444	Identifier	matrix_transpose
>450	FunctionDef	CameraInfo 
>451	ParameterList	double * q
>452	Parameter	 
>453	Identifier	q
>454	ParameterType	double *
>455	ReturnType	void
>456	CompoundStatement	 
>457	ExpressionStatement	 
>458	CallExpression	matrix_to_quaternion ( R , q )
>459	ArgumentList	R
>460	Argument	q
>461	Identifier	q
>462	Argument	R
>463	Identifier	R
>464	Callee	matrix_to_quaternion
>465	Identifier	matrix_to_quaternion
>466	ExpressionStatement	 
>467	CallExpression	matrix_transpose ( 3 , 3 , ( double * ) m_R , R )
>468	ArgumentList	3
>469	Argument	R
>470	Identifier	R
>471	Argument	( double * ) m_R
>472	CastExpression	( double * ) m_R
>473	Identifier	m_R
>474	CastTarget	double *
>475	Argument	3
>476	PrimaryExpression	3
>477	Argument	3
>478	PrimaryExpression	3
>479	Callee	matrix_transpose
>480	Identifier	matrix_transpose
>481	IdentifierDeclStatement	 
>482	IdentifierDecl	R [ 9 ]
>483	PrimaryExpression	9
>484	Identifier	R
>485	IdentifierDeclType	double [ 9 ]
>492	FunctionDef	CameraInfo 
>493	ParameterList	const double * R
>494	Parameter	 
>495	Identifier	R
>496	ParameterType	const double *
>497	ReturnType	void
>498	CompoundStatement	 
>499	ExpressionStatement	 
>500	CallExpression	matrix_transpose ( 3 , 3 , ( double * ) R , ( double * ) m_R )
>501	ArgumentList	3
>502	Argument	( double * ) m_R
>503	CastExpression	( double * ) m_R
>504	Identifier	m_R
>505	CastTarget	double *
>506	Argument	( double * ) R
>507	CastExpression	( double * ) R
>508	Identifier	R
>509	CastTarget	double *
>510	Argument	3
>511	PrimaryExpression	3
>512	Argument	3
>513	PrimaryExpression	3
>514	Callee	matrix_transpose
>515	Identifier	matrix_transpose
>521	FunctionDef	CameraInfo 
>522	ParameterList	int rotate , double * R
>523	Parameter	 
>524	Identifier	R
>525	ParameterType	double *
>526	Parameter	 
>527	Identifier	rotate
>528	ParameterType	int
>529	ReturnType	void
>530	CompoundStatement	 
>531	ExpressionStatement	 
>532	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , Rup , m_R , R )
>533	ArgumentList	3
>534	Argument	R
>535	Identifier	R
>536	Argument	m_R
>537	Identifier	m_R
>538	Argument	Rup
>539	Identifier	Rup
>540	Argument	3
>541	PrimaryExpression	3
>542	Argument	3
>543	PrimaryExpression	3
>544	Argument	3
>545	PrimaryExpression	3
>546	Argument	3
>547	PrimaryExpression	3
>548	Callee	matrix_product
>549	Identifier	matrix_product
>550	ExpressionStatement	 
>551	CallExpression	matrix_power ( 3 , R90 , rotate , Rup )
>552	ArgumentList	3
>553	Argument	Rup
>554	Identifier	Rup
>555	Argument	rotate
>556	Identifier	rotate
>557	Argument	R90
>558	Identifier	R90
>559	Argument	3
>560	PrimaryExpression	3
>561	Callee	matrix_power
>562	Identifier	matrix_power
>563	IdentifierDeclStatement	 
>564	IdentifierDecl	Rup [ 9 ]
>565	PrimaryExpression	9
>566	Identifier	Rup
>567	IdentifierDeclType	double [ 9 ]
>568	IdentifierDeclStatement	 
>569	IdentifierDecl	R90 [ 9 ] = { 0.0 , - 1.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 }
>570	AssignmentExpr	R90 [ 9 ] = { 0.0 , - 1.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 }
>571	InitializerList	0.0
>572	PrimaryExpression	1.0
>573	PrimaryExpression	0.0
>574	PrimaryExpression	0.0
>575	PrimaryExpression	0.0
>576	PrimaryExpression	0.0
>577	PrimaryExpression	1.0
>578	PrimaryExpression	0.0
>579	UnaryOp	- 1.0
>580	PrimaryExpression	1.0
>581	UnaryOperator	-
>582	PrimaryExpression	0.0
>583	Identifier	R90
>584	PrimaryExpression	9
>585	Identifier	R90
>586	IdentifierDeclType	double [ 9 ]
>595	FunctionDef	CameraInfo 
>596	ParameterList	double * K
>597	Parameter	 
>598	Identifier	K
>599	ParameterType	double *
>600	ReturnType	void
>601	CompoundStatement	 
>602	ExpressionStatement	 
>603	AssignmentExpr	K [ 8 ] = 1.0
>604	PrimaryExpression	1.0
>605	ArrayIndexing	K [ 8 ]
>606	PrimaryExpression	8
>607	Identifier	K
>608	ExpressionStatement	 
>609	AssignmentExpr	K [ 7 ] = 0.0
>610	PrimaryExpression	0.0
>611	ArrayIndexing	K [ 7 ]
>612	PrimaryExpression	7
>613	Identifier	K
>614	ExpressionStatement	 
>615	AssignmentExpr	K [ 6 ] = 0.0
>616	PrimaryExpression	0.0
>617	ArrayIndexing	K [ 6 ]
>618	PrimaryExpression	6
>619	Identifier	K
>620	ExpressionStatement	 
>621	AssignmentExpr	K [ 5 ] = 0.0
>622	PrimaryExpression	0.0
>623	ArrayIndexing	K [ 5 ]
>624	PrimaryExpression	5
>625	Identifier	K
>626	ExpressionStatement	 
>627	AssignmentExpr	K [ 4 ] = m_focal
>628	Identifier	m_focal
>629	ArrayIndexing	K [ 4 ]
>630	PrimaryExpression	4
>631	Identifier	K
>632	ExpressionStatement	 
>633	AssignmentExpr	K [ 3 ] = 0.0
>634	PrimaryExpression	0.0
>635	ArrayIndexing	K [ 3 ]
>636	PrimaryExpression	3
>637	Identifier	K
>638	ExpressionStatement	 
>639	AssignmentExpr	K [ 2 ] = 0.0
>640	PrimaryExpression	0.0
>641	ArrayIndexing	K [ 2 ]
>642	PrimaryExpression	2
>643	Identifier	K
>644	ExpressionStatement	 
>645	AssignmentExpr	K [ 1 ] = 0.0
>646	PrimaryExpression	0.0
>647	ArrayIndexing	K [ 1 ]
>648	PrimaryExpression	1
>649	Identifier	K
>650	ExpressionStatement	 
>651	AssignmentExpr	K [ 0 ] = m_focal
>652	Identifier	m_focal
>653	ArrayIndexing	K [ 0 ]
>654	PrimaryExpression	0
>655	Identifier	K
>662	FunctionDef	CameraInfo 
>663	ParameterList	 
>664	ReturnType	double
>665	CompoundStatement	 
>666	ReturnStatement	 
>667	MultiplicativeExpression	2.0 * atan ( m_width / ( 2.0 * m_focal ) )
>668	CallExpression	atan ( m_width / ( 2.0 * m_focal ) )
>669	ArgumentList	m_width / ( 2.0 * m_focal )
>670	Argument	m_width / ( 2.0 * m_focal )
>671	MultiplicativeExpression	m_width / ( 2.0 * m_focal )
>672	MultiplicativeExpression	2.0 * m_focal
>673	Identifier	m_focal
>674	PrimaryExpression	2.0
>675	Identifier	m_width
>676	Callee	atan
>677	Identifier	atan
>678	PrimaryExpression	2.0
>685	FunctionDef	CameraInfo 
>686	ParameterList	int rotate
>687	Parameter	 
>688	Identifier	rotate
>689	ParameterType	int
>690	ReturnType	double
>691	CompoundStatement	 
>692	IfStatement	if ( ( ( rotate % 2 ) == 0 && m_width >= m_height ) || ( ( rotate % 2 ) == 1 && m_width < m_height ) )
>693	ElseStatement	else
>694	CompoundStatement	 
>695	ReturnStatement	 
>696	Identifier	hfov
>697	ExpressionStatement	 
>698	CallExpression	printf ( \"vfov = %0.3f, hfov = %0.3f\n\" , vfov , hfov )
>699	ArgumentList	\"vfov = %0.3f, hfov = %0.3f\n\"
>700	Argument	hfov
>701	Identifier	hfov
>702	Argument	vfov
>703	Identifier	vfov
>704	Argument	\"vfov = %0.3f, hfov = %0.3f\n\"
>705	PrimaryExpression	\"vfov = %0.3f, hfov = %0.3f\n\"
>706	Callee	printf
>707	Identifier	printf
>708	IdentifierDeclStatement	 
>709	IdentifierDecl	hfov = 2.0 * atan ( tan ( 0.5 * vfov ) * m_width / ( double ) m_height )
>710	AssignmentExpr	hfov = 2.0 * atan ( tan ( 0.5 * vfov ) * m_width / ( double ) m_height )
>711	MultiplicativeExpression	2.0 * atan ( tan ( 0.5 * vfov ) * m_width / ( double ) m_height )
>712	CallExpression	atan ( tan ( 0.5 * vfov ) * m_width / ( double ) m_height )
>713	ArgumentList	tan ( 0.5 * vfov ) * m_width / ( double ) m_height
>714	Argument	tan ( 0.5 * vfov ) * m_width / ( double ) m_height
>715	MultiplicativeExpression	tan ( 0.5 * vfov ) * m_width / ( double ) m_height
>716	MultiplicativeExpression	m_width / ( double ) m_height
>717	CastExpression	( double ) m_height
>718	Identifier	m_height
>719	CastTarget	double
>720	Identifier	m_width
>721	CallExpression	tan ( 0.5 * vfov )
>722	ArgumentList	0.5 * vfov
>723	Argument	0.5 * vfov
>724	MultiplicativeExpression	0.5 * vfov
>725	Identifier	vfov
>726	PrimaryExpression	0.5
>727	Callee	tan
>728	Identifier	tan
>729	Callee	atan
>730	Identifier	atan
>731	PrimaryExpression	2.0
>732	Identifier	hfov
>733	Identifier	hfov
>734	IdentifierDeclType	double
>735	IdentifierDeclStatement	 
>736	IdentifierDecl	vfov = 2.0 * atan ( m_height / ( 2.0 * m_focal ) )
>737	AssignmentExpr	vfov = 2.0 * atan ( m_height / ( 2.0 * m_focal ) )
>738	MultiplicativeExpression	2.0 * atan ( m_height / ( 2.0 * m_focal ) )
>739	CallExpression	atan ( m_height / ( 2.0 * m_focal ) )
>740	ArgumentList	m_height / ( 2.0 * m_focal )
>741	Argument	m_height / ( 2.0 * m_focal )
>742	MultiplicativeExpression	m_height / ( 2.0 * m_focal )
>743	MultiplicativeExpression	2.0 * m_focal
>744	Identifier	m_focal
>745	PrimaryExpression	2.0
>746	Identifier	m_height
>747	Callee	atan
>748	Identifier	atan
>749	PrimaryExpression	2.0
>750	Identifier	vfov
>751	Identifier	vfov
>752	IdentifierDeclType	double
>753	CompoundStatement	 
>754	ReturnStatement	 
>755	MultiplicativeExpression	2.0 * atan ( m_width / ( 2.0 * m_focal ) )
>756	CallExpression	atan ( m_width / ( 2.0 * m_focal ) )
>757	ArgumentList	m_width / ( 2.0 * m_focal )
>758	Argument	m_width / ( 2.0 * m_focal )
>759	MultiplicativeExpression	m_width / ( 2.0 * m_focal )
>760	MultiplicativeExpression	2.0 * m_focal
>761	Identifier	m_focal
>762	PrimaryExpression	2.0
>763	Identifier	m_width
>764	Callee	atan
>765	Identifier	atan
>766	PrimaryExpression	2.0
>767	Condition	 
>768	OrExpression	( ( rotate % 2 ) == 0 && m_width >= m_height ) || ( ( rotate % 2 ) == 1 && m_width < m_height )
>769	AndExpression	( rotate % 2 ) == 1 && m_width < m_height
>770	RelationalExpression	m_width < m_height
>771	Identifier	m_height
>772	Identifier	m_width
>773	EqualityExpression	( rotate % 2 ) == 1
>774	PrimaryExpression	1
>775	MultiplicativeExpression	rotate % 2
>776	PrimaryExpression	2
>777	Identifier	rotate
>778	AndExpression	( rotate % 2 ) == 0 && m_width >= m_height
>779	RelationalExpression	m_width >= m_height
>780	Identifier	m_height
>781	Identifier	m_width
>782	EqualityExpression	( rotate % 2 ) == 0
>783	PrimaryExpression	0
>784	MultiplicativeExpression	rotate % 2
>785	PrimaryExpression	2
>786	Identifier	rotate
>798	FunctionDef	CameraInfo 
>799	ParameterList	double fov
>800	Parameter	 
>801	Identifier	fov
>802	ParameterType	double
>803	ReturnType	void
>804	CompoundStatement	 
>805	ExpressionStatement	 
>806	AssignmentExpr	m_focal = 0.5 * m_width / tan ( 0.5 * DEG2RAD ( fov ) )
>807	MultiplicativeExpression	0.5 * m_width / tan ( 0.5 * DEG2RAD ( fov ) )
>808	MultiplicativeExpression	m_width / tan ( 0.5 * DEG2RAD ( fov ) )
>809	CallExpression	tan ( 0.5 * DEG2RAD ( fov ) )
>810	ArgumentList	0.5 * DEG2RAD ( fov )
>811	Argument	0.5 * DEG2RAD ( fov )
>812	MultiplicativeExpression	0.5 * DEG2RAD ( fov )
>813	CallExpression	DEG2RAD ( fov )
>814	ArgumentList	fov
>815	Argument	fov
>816	Identifier	fov
>817	Callee	DEG2RAD
>818	Identifier	DEG2RAD
>819	PrimaryExpression	0.5
>820	Callee	tan
>821	Identifier	tan
>822	Identifier	m_width
>823	PrimaryExpression	0.5
>824	Identifier	m_focal
>833	FunctionDef	CameraInfo 
>834	ParameterList	const double * p , double * proj
>835	Parameter	 
>836	Identifier	proj
>837	ParameterType	double *
>838	Parameter	 
>839	Identifier	p
>840	ParameterType	const double *
>841	ReturnType	bool
>842	CompoundStatement	 
>843	ReturnStatement	 
>844	RelationalExpression	proj3 [ 2 ] < 0.0
>845	PrimaryExpression	0.0
>846	ArrayIndexing	proj3 [ 2 ]
>847	PrimaryExpression	2
>848	Identifier	proj3
>849	ExpressionStatement	 
>850	AssignmentExpr	proj [ 1 ] *= factor
>851	Identifier	factor
>852	ArrayIndexing	proj [ 1 ]
>853	PrimaryExpression	1
>854	Identifier	proj
>855	ExpressionStatement	 
>856	AssignmentExpr	proj [ 0 ] *= factor
>857	Identifier	factor
>858	ArrayIndexing	proj [ 0 ]
>859	PrimaryExpression	0
>860	Identifier	proj
>861	IfStatement	if ( rsq > 8.0 || factor < 0.0 )
>862	ReturnStatement	 
>863	RelationalExpression	proj [ 2 ] < 0.0
>864	PrimaryExpression	0.0
>865	ArrayIndexing	proj [ 2 ]
>866	PrimaryExpression	2
>867	Identifier	proj
>868	Condition	 
>869	OrExpression	rsq > 8.0 || factor < 0.0
>870	RelationalExpression	factor < 0.0
>871	PrimaryExpression	0.0
>872	Identifier	factor
>873	RelationalExpression	rsq > 8.0
>874	PrimaryExpression	8.0
>875	Identifier	rsq
>876	IdentifierDeclStatement	 
>877	IdentifierDecl	factor = 1.0 + m_k [ 0 ] * rsq + m_k [ 1 ] * rsq * rsq
>878	AssignmentExpr	factor = 1.0 + m_k [ 0 ] * rsq + m_k [ 1 ] * rsq * rsq
>879	AdditiveExpression	1.0 + m_k [ 0 ] * rsq + m_k [ 1 ] * rsq * rsq
>880	AdditiveExpression	m_k [ 0 ] * rsq + m_k [ 1 ] * rsq * rsq
>881	MultiplicativeExpression	m_k [ 1 ] * rsq * rsq
>882	MultiplicativeExpression	rsq * rsq
>883	Identifier	rsq
>884	Identifier	rsq
>885	ArrayIndexing	m_k [ 1 ]
>886	PrimaryExpression	1
>887	Identifier	m_k
>888	MultiplicativeExpression	m_k [ 0 ] * rsq
>889	Identifier	rsq
>890	ArrayIndexing	m_k [ 0 ]
>891	PrimaryExpression	0
>892	Identifier	m_k
>893	PrimaryExpression	1.0
>894	Identifier	factor
>895	Identifier	factor
>896	IdentifierDeclType	double
>897	IdentifierDeclStatement	 
>898	IdentifierDecl	rsq = ( proj [ 0 ] * proj [ 0 ] + proj [ 1 ] * proj [ 1 ] ) / ( m_focal * m_focal )
>899	AssignmentExpr	rsq = ( proj [ 0 ] * proj [ 0 ] + proj [ 1 ] * proj [ 1 ] ) / ( m_focal * m_focal )
>900	MultiplicativeExpression	( proj [ 0 ] * proj [ 0 ] + proj [ 1 ] * proj [ 1 ] ) / ( m_focal * m_focal )
>901	MultiplicativeExpression	m_focal * m_focal
>902	Identifier	m_focal
>903	Identifier	m_focal
>904	AdditiveExpression	proj [ 0 ] * proj [ 0 ] + proj [ 1 ] * proj [ 1 ]
>905	MultiplicativeExpression	proj [ 1 ] * proj [ 1 ]
>906	ArrayIndexing	proj [ 1 ]
>907	PrimaryExpression	1
>908	Identifier	proj
>909	ArrayIndexing	proj [ 1 ]
>910	PrimaryExpression	1
>911	Identifier	proj
>912	MultiplicativeExpression	proj [ 0 ] * proj [ 0 ]
>913	ArrayIndexing	proj [ 0 ]
>914	PrimaryExpression	0
>915	Identifier	proj
>916	ArrayIndexing	proj [ 0 ]
>917	PrimaryExpression	0
>918	Identifier	proj
>919	Identifier	rsq
>920	Identifier	rsq
>921	IdentifierDeclType	double
>922	IfStatement	if ( m_k [ 0 ] == 0.0 && m_k [ 1 ] == 0.0 )
>923	ReturnStatement	 
>924	RelationalExpression	proj3 [ 2 ] < 0.0
>925	PrimaryExpression	0.0
>926	ArrayIndexing	proj3 [ 2 ]
>927	PrimaryExpression	2
>928	Identifier	proj3
>929	Condition	 
>930	AndExpression	m_k [ 0 ] == 0.0 && m_k [ 1 ] == 0.0
>931	EqualityExpression	m_k [ 1 ] == 0.0
>932	PrimaryExpression	0.0
>933	ArrayIndexing	m_k [ 1 ]
>934	PrimaryExpression	1
>935	Identifier	m_k
>936	EqualityExpression	m_k [ 0 ] == 0.0
>937	PrimaryExpression	0.0
>938	ArrayIndexing	m_k [ 0 ]
>939	PrimaryExpression	0
>940	Identifier	m_k
>941	ExpressionStatement	 
>942	AssignmentExpr	proj [ 1 ] = proj3 [ 1 ] / - proj3 [ 2 ]
>943	MultiplicativeExpression	proj3 [ 1 ] / - proj3 [ 2 ]
>944	UnaryOp	- proj3 [ 2 ]
>945	ArrayIndexing	proj3 [ 2 ]
>946	PrimaryExpression	2
>947	Identifier	proj3
>948	UnaryOperator	-
>949	ArrayIndexing	proj3 [ 1 ]
>950	PrimaryExpression	1
>951	Identifier	proj3
>952	ArrayIndexing	proj [ 1 ]
>953	PrimaryExpression	1
>954	Identifier	proj
>955	ExpressionStatement	 
>956	AssignmentExpr	proj [ 0 ] = proj3 [ 0 ] / - proj3 [ 2 ]
>957	MultiplicativeExpression	proj3 [ 0 ] / - proj3 [ 2 ]
>958	UnaryOp	- proj3 [ 2 ]
>959	ArrayIndexing	proj3 [ 2 ]
>960	PrimaryExpression	2
>961	Identifier	proj3
>962	UnaryOperator	-
>963	ArrayIndexing	proj3 [ 0 ]
>964	PrimaryExpression	0
>965	Identifier	proj3
>966	ArrayIndexing	proj [ 0 ]
>967	PrimaryExpression	0
>968	Identifier	proj
>969	IfStatement	if ( proj3 [ 2 ] == 0.0 )
>970	ReturnStatement	 
>971	Identifier	false
>972	Condition	 
>973	EqualityExpression	proj3 [ 2 ] == 0.0
>974	PrimaryExpression	0.0
>975	ArrayIndexing	proj3 [ 2 ]
>976	PrimaryExpression	2
>977	Identifier	proj3
>978	ExpressionStatement	 
>979	CallExpression	matrix_product ( 3 , 4 , 4 , 1 , ( double * ) m_Pmatrix , p4 , proj3 )
>980	ArgumentList	3
>981	Argument	proj3
>982	Identifier	proj3
>983	Argument	p4
>984	Identifier	p4
>985	Argument	( double * ) m_Pmatrix
>986	CastExpression	( double * ) m_Pmatrix
>987	Identifier	m_Pmatrix
>988	CastTarget	double *
>989	Argument	1
>990	PrimaryExpression	1
>991	Argument	4
>992	PrimaryExpression	4
>993	Argument	4
>994	PrimaryExpression	4
>995	Argument	3
>996	PrimaryExpression	3
>997	Callee	matrix_product
>998	Identifier	matrix_product
>999	IdentifierDeclStatement	 
>1000	IdentifierDecl	proj3 [ 3 ]
>1001	PrimaryExpression	3
>1002	Identifier	proj3
>1003	IdentifierDeclType	double [ 3 ]
>1004	IdentifierDeclStatement	 
>1005	IdentifierDecl	p4 [ 4 ] = { p [ 0 ] , p [ 1 ] , p [ 2 ] , 1.0 }
>1006	AssignmentExpr	p4 [ 4 ] = { p [ 0 ] , p [ 1 ] , p [ 2 ] , 1.0 }
>1007	InitializerList	p [ 0 ]
>1008	PrimaryExpression	1.0
>1009	ArrayIndexing	p [ 2 ]
>1010	PrimaryExpression	2
>1011	Identifier	p
>1012	ArrayIndexing	p [ 1 ]
>1013	PrimaryExpression	1
>1014	Identifier	p
>1015	ArrayIndexing	p [ 0 ]
>1016	PrimaryExpression	0
>1017	Identifier	p
>1018	Identifier	p4
>1019	PrimaryExpression	4
>1020	Identifier	p4
>1021	IdentifierDeclType	double [ 4 ]
>1039	FunctionDef	CameraInfo 
>1040	ParameterList	const CameraInfo & cam , double * E , double * F
>1041	Parameter	 
>1042	Identifier	F
>1043	ParameterType	double *
>1044	Parameter	 
>1045	Identifier	E
>1046	ParameterType	double *
>1047	Parameter	 
>1048	Identifier	cam
>1049	ParameterType	const CameraInfo &
>1050	ReturnType	void
>1051	CompoundStatement	 
>1052	ExpressionStatement	 
>1053	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , tmp , K1inv , F )
>1054	ArgumentList	3
>1055	Argument	F
>1056	Identifier	F
>1057	Argument	K1inv
>1058	Identifier	K1inv
>1059	Argument	tmp
>1060	Identifier	tmp
>1061	Argument	3
>1062	PrimaryExpression	3
>1063	Argument	3
>1064	PrimaryExpression	3
>1065	Argument	3
>1066	PrimaryExpression	3
>1067	Argument	3
>1068	PrimaryExpression	3
>1069	Callee	matrix_product
>1070	Identifier	matrix_product
>1071	ExpressionStatement	 
>1072	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 3 , K2inv , E , tmp )
>1073	ArgumentList	3
>1074	Argument	tmp
>1075	Identifier	tmp
>1076	Argument	E
>1077	Identifier	E
>1078	Argument	K2inv
>1079	Identifier	K2inv
>1080	Argument	3
>1081	PrimaryExpression	3
>1082	Argument	3
>1083	PrimaryExpression	3
>1084	Argument	3
>1085	PrimaryExpression	3
>1086	Argument	3
>1087	PrimaryExpression	3
>1088	Callee	matrix_transpose_product
>1089	Identifier	matrix_transpose_product
>1090	IdentifierDeclStatement	 
>1091	IdentifierDecl	tmp [ 9 ]
>1092	PrimaryExpression	9
>1093	Identifier	tmp
>1094	IdentifierDeclType	double [ 9 ]
>1095	ExpressionStatement	 
>1096	CallExpression	matrix_invert ( 3 , K2 , K2inv )
>1097	ArgumentList	3
>1098	Argument	K2inv
>1099	Identifier	K2inv
>1100	Argument	K2
>1101	Identifier	K2
>1102	Argument	3
>1103	PrimaryExpression	3
>1104	Callee	matrix_invert
>1105	Identifier	matrix_invert
>1106	ExpressionStatement	 
>1107	CallExpression	matrix_invert ( 3 , K1 , K1inv )
>1108	ArgumentList	3
>1109	Argument	K1inv
>1110	Identifier	K1inv
>1111	Argument	K1
>1112	Identifier	K1
>1113	Argument	3
>1114	PrimaryExpression	3
>1115	Callee	matrix_invert
>1116	Identifier	matrix_invert
>1117	IdentifierDeclStatement	 
>1118	IdentifierDecl	K2inv [ 9 ]
>1119	PrimaryExpression	9
>1120	Identifier	K2inv
>1121	IdentifierDeclType	double [ 9 ]
>1122	IdentifierDecl	K1inv [ 9 ]
>1123	PrimaryExpression	9
>1124	Identifier	K1inv
>1125	IdentifierDeclType	double [ 9 ]
>1126	ExpressionStatement	 
>1127	CallExpression	cam . GetIntrinsics ( K2 )
>1128	ArgumentList	K2
>1129	Argument	K2
>1130	Identifier	K2
>1131	Callee	cam . GetIntrinsics
>1132	MemberAccess	cam . GetIntrinsics
>1133	Identifier	GetIntrinsics
>1134	Identifier	cam
>1135	ExpressionStatement	 
>1136	CallExpression	GetIntrinsics ( K1 )
>1137	ArgumentList	K1
>1138	Argument	K1
>1139	Identifier	K1
>1140	Callee	GetIntrinsics
>1141	Identifier	GetIntrinsics
>1142	IdentifierDeclStatement	 
>1143	IdentifierDecl	K2 [ 9 ]
>1144	PrimaryExpression	9
>1145	Identifier	K2
>1146	IdentifierDeclType	double [ 9 ]
>1147	IdentifierDecl	K1 [ 9 ]
>1148	PrimaryExpression	9
>1149	Identifier	K1
>1150	IdentifierDeclType	double [ 9 ]
>1151	ExpressionStatement	 
>1152	AssignmentExpr	E [ 8 ] = - E [ 8 ]
>1153	UnaryOp	- E [ 8 ]
>1154	ArrayIndexing	E [ 8 ]
>1155	PrimaryExpression	8
>1156	Identifier	E
>1157	UnaryOperator	-
>1158	ArrayIndexing	E [ 8 ]
>1159	PrimaryExpression	8
>1160	Identifier	E
>1161	ExpressionStatement	 
>1162	AssignmentExpr	E [ 4 ] = - E [ 4 ]
>1163	UnaryOp	- E [ 4 ]
>1164	ArrayIndexing	E [ 4 ]
>1165	PrimaryExpression	4
>1166	Identifier	E
>1167	UnaryOperator	-
>1168	ArrayIndexing	E [ 4 ]
>1169	PrimaryExpression	4
>1170	Identifier	E
>1171	ExpressionStatement	 
>1172	AssignmentExpr	E [ 3 ] = - E [ 3 ]
>1173	UnaryOp	- E [ 3 ]
>1174	ArrayIndexing	E [ 3 ]
>1175	PrimaryExpression	3
>1176	Identifier	E
>1177	UnaryOperator	-
>1178	ArrayIndexing	E [ 3 ]
>1179	PrimaryExpression	3
>1180	Identifier	E
>1181	ExpressionStatement	 
>1182	AssignmentExpr	E [ 1 ] = - E [ 1 ]
>1183	UnaryOp	- E [ 1 ]
>1184	ArrayIndexing	E [ 1 ]
>1185	PrimaryExpression	1
>1186	Identifier	E
>1187	UnaryOperator	-
>1188	ArrayIndexing	E [ 1 ]
>1189	PrimaryExpression	1
>1190	Identifier	E
>1191	ExpressionStatement	 
>1192	AssignmentExpr	E [ 0 ] = - E [ 0 ]
>1193	UnaryOp	- E [ 0 ]
>1194	ArrayIndexing	E [ 0 ]
>1195	PrimaryExpression	0
>1196	Identifier	E
>1197	UnaryOperator	-
>1198	ArrayIndexing	E [ 0 ]
>1199	PrimaryExpression	0
>1200	Identifier	E
>1201	ExpressionStatement	 
>1202	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , t2new_cross , R2new , E )
>1203	ArgumentList	3
>1204	Argument	E
>1205	Identifier	E
>1206	Argument	R2new
>1207	Identifier	R2new
>1208	Argument	t2new_cross
>1209	Identifier	t2new_cross
>1210	Argument	3
>1211	PrimaryExpression	3
>1212	Argument	3
>1213	PrimaryExpression	3
>1214	Argument	3
>1215	PrimaryExpression	3
>1216	Argument	3
>1217	PrimaryExpression	3
>1218	Callee	matrix_product
>1219	Identifier	matrix_product
>1220	IdentifierDeclStatement	 
>1221	IdentifierDecl	t2new_cross [ 9 ] = { 0.0 , - t2new [ 2 ] , t2new [ 1 ] , t2new [ 2 ] , 0.0 , - t2new [ 0 ] , - t2new [ 1 ] , t2new [ \
>1222	AssignmentExpr	t2new_cross [ 9 ] = { 0.0 , - t2new [ 2 ] , t2new [ 1 ] , t2new [ 2 ] , 0.0 , - t2new [ 0 ] , - t2new [ \
>1223	InitializerList	0.0
>1224	PrimaryExpression	0.0
>1225	ArrayIndexing	t2new [ 0 ]
>1226	PrimaryExpression	0
>1227	Identifier	t2new
>1228	UnaryOp	- t2new [ 1 ]
>1229	ArrayIndexing	t2new [ 1 ]
>1230	PrimaryExpression	1
>1231	Identifier	t2new
>1232	UnaryOperator	-
>1233	UnaryOp	- t2new [ 0 ]
>1234	ArrayIndexing	t2new [ 0 ]
>1235	PrimaryExpression	0
>1236	Identifier	t2new
>1237	UnaryOperator	-
>1238	PrimaryExpression	0.0
>1239	ArrayIndexing	t2new [ 2 ]
>1240	PrimaryExpression	2
>1241	Identifier	t2new
>1242	ArrayIndexing	t2new [ 1 ]
>1243	PrimaryExpression	1
>1244	Identifier	t2new
>1245	UnaryOp	- t2new [ 2 ]
>1246	ArrayIndexing	t2new [ 2 ]
>1247	PrimaryExpression	2
>1248	Identifier	t2new
>1249	UnaryOperator	-
>1250	PrimaryExpression	0.0
>1251	Identifier	t2new_cross
>1252	PrimaryExpression	9
>1253	Identifier	t2new_cross
>1254	IdentifierDeclType	double [ 9 ]
>1255	IdentifierDeclStatement	 
>1256	IdentifierDecl	t2new [ 3 ] = { P2new [ 3 ] , P2new [ 7 ] , P2new [ 11 ] }
>1257	AssignmentExpr	t2new [ 3 ] = { P2new [ 3 ] , P2new [ 7 ] , P2new [ 11 ] }
>1258	InitializerList	P2new [ 3 ]
>1259	ArrayIndexing	P2new [ 11 ]
>1260	PrimaryExpression	11
>1261	Identifier	P2new
>1262	ArrayIndexing	P2new [ 7 ]
>1263	PrimaryExpression	7
>1264	Identifier	P2new
>1265	ArrayIndexing	P2new [ 3 ]
>1266	PrimaryExpression	3
>1267	Identifier	P2new
>1268	Identifier	t2new
>1269	PrimaryExpression	3
>1270	Identifier	t2new
>1271	IdentifierDeclType	double [ 3 ]
>1272	IdentifierDeclStatement	 
>1273	IdentifierDecl	R2new [ 9 ] = { P2new [ 0 ] , P2new [ 1 ] , P2new [ 2 ] , P2new [ 4 ] , P2new [ 5 ] , P2new [ 6 ] , P2new [ 8 ] , \
>1274	AssignmentExpr	R2new [ 9 ] = { P2new [ 0 ] , P2new [ 1 ] , P2new [ 2 ] , P2new [ 4 ] , P2new [ 5 ] , P2new [ 6 ] , P2new [ \
>1275	InitializerList	P2new [ 0 ]
>1276	ArrayIndexing	P2new [ 10 ]
>1277	PrimaryExpression	10
>1278	Identifier	P2new
>1279	ArrayIndexing	P2new [ 9 ]
>1280	PrimaryExpression	9
>1281	Identifier	P2new
>1282	ArrayIndexing	P2new [ 8 ]
>1283	PrimaryExpression	8
>1284	Identifier	P2new
>1285	ArrayIndexing	P2new [ 6 ]
>1286	PrimaryExpression	6
>1287	Identifier	P2new
>1288	ArrayIndexing	P2new [ 5 ]
>1289	PrimaryExpression	5
>1290	Identifier	P2new
>1291	ArrayIndexing	P2new [ 4 ]
>1292	PrimaryExpression	4
>1293	Identifier	P2new
>1294	ArrayIndexing	P2new [ 2 ]
>1295	PrimaryExpression	2
>1296	Identifier	P2new
>1297	ArrayIndexing	P2new [ 1 ]
>1298	PrimaryExpression	1
>1299	Identifier	P2new
>1300	ArrayIndexing	P2new [ 0 ]
>1301	PrimaryExpression	0
>1302	Identifier	P2new
>1303	Identifier	R2new
>1304	PrimaryExpression	9
>1305	Identifier	R2new
>1306	IdentifierDeclType	double [ 9 ]
>1307	ExpressionStatement	 
>1308	CallExpression	matrix_product ( 4 , 4 , 4 , 4 , P2 , Pinv , P2new )
>1309	ArgumentList	4
>1310	Argument	P2new
>1311	Identifier	P2new
>1312	Argument	Pinv
>1313	Identifier	Pinv
>1314	Argument	P2
>1315	Identifier	P2
>1316	Argument	4
>1317	PrimaryExpression	4
>1318	Argument	4
>1319	PrimaryExpression	4
>1320	Argument	4
>1321	PrimaryExpression	4
>1322	Argument	4
>1323	PrimaryExpression	4
>1324	Callee	matrix_product
>1325	Identifier	matrix_product
>1326	IdentifierDeclStatement	 
>1327	IdentifierDecl	P2new [ 16 ]
>1328	PrimaryExpression	16
>1329	Identifier	P2new
>1330	IdentifierDeclType	double [ 16 ]
>1331	ExpressionStatement	 
>1332	AssignmentExpr	P2 [ 15 ] = 1.0
>1333	PrimaryExpression	1.0
>1334	ArrayIndexing	P2 [ 15 ]
>1335	PrimaryExpression	15
>1336	Identifier	P2
>1337	ExpressionStatement	 
>1338	AssignmentExpr	P2 [ 12 ] = P2 [ 13 ] = P2 [ 14 ] = 0.0
>1339	AssignmentExpr	P2 [ 13 ] = P2 [ 14 ] = 0.0
>1340	AssignmentExpr	P2 [ 14 ] = 0.0
>1341	PrimaryExpression	0.0
>1342	ArrayIndexing	P2 [ 14 ]
>1343	PrimaryExpression	14
>1344	Identifier	P2
>1345	ArrayIndexing	P2 [ 13 ]
>1346	PrimaryExpression	13
>1347	Identifier	P2
>1348	ArrayIndexing	P2 [ 12 ]
>1349	PrimaryExpression	12
>1350	Identifier	P2
>1351	ExpressionStatement	 
>1352	CallExpression	cam . GetRigid ( P2 )
>1353	ArgumentList	P2
>1354	Argument	P2
>1355	Identifier	P2
>1356	Callee	cam . GetRigid
>1357	MemberAccess	cam . GetRigid
>1358	Identifier	GetRigid
>1359	Identifier	cam
>1360	IdentifierDeclStatement	 
>1361	IdentifierDecl	P2 [ 16 ]
>1362	PrimaryExpression	16
>1363	Identifier	P2
>1364	IdentifierDeclType	double [ 16 ]
>1365	ExpressionStatement	 
>1366	CallExpression	matrix_invert ( 4 , P , Pinv )
>1367	ArgumentList	4
>1368	Argument	Pinv
>1369	Identifier	Pinv
>1370	Argument	P
>1371	Identifier	P
>1372	Argument	4
>1373	PrimaryExpression	4
>1374	Callee	matrix_invert
>1375	Identifier	matrix_invert
>1376	ExpressionStatement	 
>1377	AssignmentExpr	P [ 15 ] = 1.0
>1378	PrimaryExpression	1.0
>1379	ArrayIndexing	P [ 15 ]
>1380	PrimaryExpression	15
>1381	Identifier	P
>1382	ExpressionStatement	 
>1383	AssignmentExpr	P [ 12 ] = P [ 13 ] = P [ 14 ] = 0.0
>1384	AssignmentExpr	P [ 13 ] = P [ 14 ] = 0.0
>1385	AssignmentExpr	P [ 14 ] = 0.0
>1386	PrimaryExpression	0.0
>1387	ArrayIndexing	P [ 14 ]
>1388	PrimaryExpression	14
>1389	Identifier	P
>1390	ArrayIndexing	P [ 13 ]
>1391	PrimaryExpression	13
>1392	Identifier	P
>1393	ArrayIndexing	P [ 12 ]
>1394	PrimaryExpression	12
>1395	Identifier	P
>1396	ExpressionStatement	 
>1397	CallExpression	GetRigid ( P )
>1398	ArgumentList	P
>1399	Argument	P
>1400	Identifier	P
>1401	Callee	GetRigid
>1402	Identifier	GetRigid
>1403	IdentifierDeclStatement	 
>1404	IdentifierDecl	Pinv [ 16 ]
>1405	PrimaryExpression	16
>1406	Identifier	Pinv
>1407	IdentifierDeclType	double [ 16 ]
>1408	IdentifierDecl	P [ 16 ]
>1409	PrimaryExpression	16
>1410	Identifier	P
>1411	IdentifierDeclType	double [ 16 ]
>1435	FunctionDef	CameraInfo 
>1436	ParameterList	 
>1437	ReturnType	void
>1438	CompoundStatement	 
>1439	ExpressionStatement	 
>1440	CallExpression	Finalize ( )
>1441	ArgumentList	 
>1442	Callee	Finalize
>1443	Identifier	Finalize
>1444	ExpressionStatement	 
>1445	AssignmentExpr	m_t [ 2 ] = - m_t [ 2 ]
>1446	UnaryOp	- m_t [ 2 ]
>1447	ArrayIndexing	m_t [ 2 ]
>1448	PrimaryExpression	2
>1449	Identifier	m_t
>1450	UnaryOperator	-
>1451	ArrayIndexing	m_t [ 2 ]
>1452	PrimaryExpression	2
>1453	Identifier	m_t
>1454	ExpressionStatement	 
>1455	AssignmentExpr	m_R [ 7 ] = - m_R [ 7 ]
>1456	UnaryOp	- m_R [ 7 ]
>1457	ArrayIndexing	m_R [ 7 ]
>1458	PrimaryExpression	7
>1459	Identifier	m_R
>1460	UnaryOperator	-
>1461	ArrayIndexing	m_R [ 7 ]
>1462	PrimaryExpression	7
>1463	Identifier	m_R
>1464	ExpressionStatement	 
>1465	AssignmentExpr	m_R [ 6 ] = - m_R [ 6 ]
>1466	UnaryOp	- m_R [ 6 ]
>1467	ArrayIndexing	m_R [ 6 ]
>1468	PrimaryExpression	6
>1469	Identifier	m_R
>1470	UnaryOperator	-
>1471	ArrayIndexing	m_R [ 6 ]
>1472	PrimaryExpression	6
>1473	Identifier	m_R
>1474	ExpressionStatement	 
>1475	AssignmentExpr	m_R [ 5 ] = - m_R [ 5 ]
>1476	UnaryOp	- m_R [ 5 ]
>1477	ArrayIndexing	m_R [ 5 ]
>1478	PrimaryExpression	5
>1479	Identifier	m_R
>1480	UnaryOperator	-
>1481	ArrayIndexing	m_R [ 5 ]
>1482	PrimaryExpression	5
>1483	Identifier	m_R
>1484	ExpressionStatement	 
>1485	AssignmentExpr	m_R [ 2 ] = - m_R [ 2 ]
>1486	UnaryOp	- m_R [ 2 ]
>1487	ArrayIndexing	m_R [ 2 ]
>1488	PrimaryExpression	2
>1489	Identifier	m_R
>1490	UnaryOperator	-
>1491	ArrayIndexing	m_R [ 2 ]
>1492	PrimaryExpression	2
>1493	Identifier	m_R
>1501	FunctionDef	CameraInfo 
>1502	ParameterList	const CameraInfo & cam
>1503	Parameter	 
>1504	Identifier	cam
>1505	ParameterType	const CameraInfo &
>1506	ReturnType	double
>1507	CompoundStatement	 
>1508	ReturnStatement	 
>1509	CallExpression	matrix_norm ( 3 , 1 , diff )
>1510	ArgumentList	3
>1511	Argument	diff
>1512	Identifier	diff
>1513	Argument	1
>1514	PrimaryExpression	1
>1515	Argument	3
>1516	PrimaryExpression	3
>1517	Callee	matrix_norm
>1518	Identifier	matrix_norm
>1519	ExpressionStatement	 
>1520	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos1 , pos2 , diff )
>1521	ArgumentList	3
>1522	Argument	diff
>1523	Identifier	diff
>1524	Argument	pos2
>1525	Identifier	pos2
>1526	Argument	pos1
>1527	Identifier	pos1
>1528	Argument	1
>1529	PrimaryExpression	1
>1530	Argument	3
>1531	PrimaryExpression	3
>1532	Argument	1
>1533	PrimaryExpression	1
>1534	Argument	3
>1535	PrimaryExpression	3
>1536	Callee	matrix_diff
>1537	Identifier	matrix_diff
>1538	IdentifierDeclStatement	 
>1539	IdentifierDecl	diff [ 3 ]
>1540	PrimaryExpression	3
>1541	Identifier	diff
>1542	IdentifierDeclType	double [ 3 ]
>1543	ExpressionStatement	 
>1544	CallExpression	cam . GetPosition ( pos2 )
>1545	ArgumentList	pos2
>1546	Argument	pos2
>1547	Identifier	pos2
>1548	Callee	cam . GetPosition
>1549	MemberAccess	cam . GetPosition
>1550	Identifier	GetPosition
>1551	Identifier	cam
>1552	ExpressionStatement	 
>1553	CallExpression	GetPosition ( pos1 )
>1554	ArgumentList	pos1
>1555	Argument	pos1
>1556	Identifier	pos1
>1557	Callee	GetPosition
>1558	Identifier	GetPosition
>1559	IdentifierDeclStatement	 
>1560	IdentifierDecl	pos2 [ 3 ]
>1561	PrimaryExpression	3
>1562	Identifier	pos2
>1563	IdentifierDeclType	double [ 3 ]
>1564	IdentifierDecl	pos1 [ 3 ]
>1565	PrimaryExpression	3
>1566	Identifier	pos1
>1567	IdentifierDeclType	double [ 3 ]
>1576	FunctionDef	CameraInfo 
>1577	ParameterList	const PlaneData & plane , double * line
>1578	Parameter	 
>1579	Identifier	line
>1580	ParameterType	double *
>1581	Parameter	 
>1582	Identifier	plane
>1583	ParameterType	const PlaneData &
>1584	ReturnType	void
>1585	CompoundStatement	 
>1586	ExpressionStatement	 
>1587	CallExpression	matrix_cross ( pr1 , pr2 , line )
>1588	ArgumentList	pr1
>1589	Argument	line
>1590	Identifier	line
>1591	Argument	pr2
>1592	Identifier	pr2
>1593	Argument	pr1
>1594	Identifier	pr1
>1595	Callee	matrix_cross
>1596	Identifier	matrix_cross
>1597	IdentifierDeclStatement	 
>1598	IdentifierDecl	pr2 [ 3 ] = { m_focal * p2_rot [ 0 ] / p2_rot [ 2 ] , m_focal * p2_rot [ 1 ] / p2_rot [ 2 ] , - 1.0 }
>1599	AssignmentExpr	pr2 [ 3 ] = { m_focal * p2_rot [ 0 ] / p2_rot [ 2 ] , m_focal * p2_rot [ 1 ] / p2_rot [ 2 ] , - 1.0 }
>1600	InitializerList	m_focal * p2_rot [ 0 ] / p2_rot [ 2 ]
>1601	UnaryOp	- 1.0
>1602	PrimaryExpression	1.0
>1603	UnaryOperator	-
>1604	MultiplicativeExpression	m_focal * p2_rot [ 1 ] / p2_rot [ 2 ]
>1605	MultiplicativeExpression	p2_rot [ 1 ] / p2_rot [ 2 ]
>1606	ArrayIndexing	p2_rot [ 2 ]
>1607	PrimaryExpression	2
>1608	Identifier	p2_rot
>1609	ArrayIndexing	p2_rot [ 1 ]
>1610	PrimaryExpression	1
>1611	Identifier	p2_rot
>1612	Identifier	m_focal
>1613	MultiplicativeExpression	m_focal * p2_rot [ 0 ] / p2_rot [ 2 ]
>1614	MultiplicativeExpression	p2_rot [ 0 ] / p2_rot [ 2 ]
>1615	ArrayIndexing	p2_rot [ 2 ]
>1616	PrimaryExpression	2
>1617	Identifier	p2_rot
>1618	ArrayIndexing	p2_rot [ 0 ]
>1619	PrimaryExpression	0
>1620	Identifier	p2_rot
>1621	Identifier	m_focal
>1622	Identifier	pr2
>1623	PrimaryExpression	3
>1624	Identifier	pr2
>1625	IdentifierDeclType	double [ 3 ]
>1626	IdentifierDeclStatement	 
>1627	IdentifierDecl	pr1 [ 3 ] = { m_focal * p1_rot [ 0 ] / p1_rot [ 2 ] , m_focal * p1_rot [ 1 ] / p1_rot [ 2 ] , - 1.0 }
>1628	AssignmentExpr	pr1 [ 3 ] = { m_focal * p1_rot [ 0 ] / p1_rot [ 2 ] , m_focal * p1_rot [ 1 ] / p1_rot [ 2 ] , - 1.0 }
>1629	InitializerList	m_focal * p1_rot [ 0 ] / p1_rot [ 2 ]
>1630	UnaryOp	- 1.0
>1631	PrimaryExpression	1.0
>1632	UnaryOperator	-
>1633	MultiplicativeExpression	m_focal * p1_rot [ 1 ] / p1_rot [ 2 ]
>1634	MultiplicativeExpression	p1_rot [ 1 ] / p1_rot [ 2 ]
>1635	ArrayIndexing	p1_rot [ 2 ]
>1636	PrimaryExpression	2
>1637	Identifier	p1_rot
>1638	ArrayIndexing	p1_rot [ 1 ]
>1639	PrimaryExpression	1
>1640	Identifier	p1_rot
>1641	Identifier	m_focal
>1642	MultiplicativeExpression	m_focal * p1_rot [ 0 ] / p1_rot [ 2 ]
>1643	MultiplicativeExpression	p1_rot [ 0 ] / p1_rot [ 2 ]
>1644	ArrayIndexing	p1_rot [ 2 ]
>1645	PrimaryExpression	2
>1646	Identifier	p1_rot
>1647	ArrayIndexing	p1_rot [ 0 ]
>1648	PrimaryExpression	0
>1649	Identifier	p1_rot
>1650	Identifier	m_focal
>1651	Identifier	pr1
>1652	PrimaryExpression	3
>1653	Identifier	pr1
>1654	IdentifierDeclType	double [ 3 ]
>1655	ExpressionStatement	 
>1656	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , m_R , p2 , p2_rot )
>1657	ArgumentList	3
>1658	Argument	p2_rot
>1659	Identifier	p2_rot
>1660	Argument	p2
>1661	Identifier	p2
>1662	Argument	m_R
>1663	Identifier	m_R
>1664	Argument	1
>1665	PrimaryExpression	1
>1666	Argument	3
>1667	PrimaryExpression	3
>1668	Argument	3
>1669	PrimaryExpression	3
>1670	Argument	3
>1671	PrimaryExpression	3
>1672	Callee	matrix_product
>1673	Identifier	matrix_product
>1674	ExpressionStatement	 
>1675	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , m_R , p1 , p1_rot )
>1676	ArgumentList	3
>1677	Argument	p1_rot
>1678	Identifier	p1_rot
>1679	Argument	p1
>1680	Identifier	p1
>1681	Argument	m_R
>1682	Identifier	m_R
>1683	Argument	1
>1684	PrimaryExpression	1
>1685	Argument	3
>1686	PrimaryExpression	3
>1687	Argument	3
>1688	PrimaryExpression	3
>1689	Argument	3
>1690	PrimaryExpression	3
>1691	Callee	matrix_product
>1692	Identifier	matrix_product
>1693	IdentifierDeclStatement	 
>1694	IdentifierDecl	p2_rot [ 3 ]
>1695	PrimaryExpression	3
>1696	Identifier	p2_rot
>1697	IdentifierDeclType	double [ 3 ]
>1698	IdentifierDecl	p1_rot [ 3 ]
>1699	PrimaryExpression	3
>1700	Identifier	p1_rot
>1701	IdentifierDeclType	double [ 3 ]
>1702	IdentifierDeclStatement	 
>1703	IdentifierDecl	p2 [ 4 ] = { - 1.0 , 1.0 , z2 , 0.0 }
>1704	AssignmentExpr	p2 [ 4 ] = { - 1.0 , 1.0 , z2 , 0.0 }
>1705	InitializerList	- 1.0
>1706	PrimaryExpression	0.0
>1707	Identifier	z2
>1708	PrimaryExpression	1.0
>1709	UnaryOp	- 1.0
>1710	PrimaryExpression	1.0
>1711	UnaryOperator	-
>1712	Identifier	p2
>1713	PrimaryExpression	4
>1714	Identifier	p2
>1715	IdentifierDeclType	double [ 4 ]
>1716	IdentifierDeclStatement	 
>1717	IdentifierDecl	p1 [ 4 ] = { 1.0 , 1.0 , z1 , 0.0 }
>1718	AssignmentExpr	p1 [ 4 ] = { 1.0 , 1.0 , z1 , 0.0 }
>1719	InitializerList	1.0
>1720	PrimaryExpression	0.0
>1721	Identifier	z1
>1722	PrimaryExpression	1.0
>1723	PrimaryExpression	1.0
>1724	Identifier	p1
>1725	PrimaryExpression	4
>1726	Identifier	p1
>1727	IdentifierDeclType	double [ 4 ]
>1728	IdentifierDeclStatement	 
>1729	IdentifierDecl	z2 = ( normal [ 0 ] - normal [ 1 ] ) / normal [ 2 ]
>1730	AssignmentExpr	z2 = ( normal [ 0 ] - normal [ 1 ] ) / normal [ 2 ]
>1731	MultiplicativeExpression	( normal [ 0 ] - normal [ 1 ] ) / normal [ 2 ]
>1732	ArrayIndexing	normal [ 2 ]
>1733	PrimaryExpression	2
>1734	Identifier	normal
>1735	AdditiveExpression	normal [ 0 ] - normal [ 1 ]
>1736	ArrayIndexing	normal [ 1 ]
>1737	PrimaryExpression	1
>1738	Identifier	normal
>1739	ArrayIndexing	normal [ 0 ]
>1740	PrimaryExpression	0
>1741	Identifier	normal
>1742	Identifier	z2
>1743	Identifier	z2
>1744	IdentifierDeclType	double
>1745	IdentifierDeclStatement	 
>1746	IdentifierDecl	z1 = ( - normal [ 0 ] - normal [ 1 ] ) / normal [ 2 ]
>1747	AssignmentExpr	z1 = ( - normal [ 0 ] - normal [ 1 ] ) / normal [ 2 ]
>1748	MultiplicativeExpression	( - normal [ 0 ] - normal [ 1 ] ) / normal [ 2 ]
>1749	ArrayIndexing	normal [ 2 ]
>1750	PrimaryExpression	2
>1751	Identifier	normal
>1752	AdditiveExpression	- normal [ 0 ] - normal [ 1 ]
>1753	ArrayIndexing	normal [ 1 ]
>1754	PrimaryExpression	1
>1755	Identifier	normal
>1756	UnaryOp	- normal [ 0 ]
>1757	ArrayIndexing	normal [ 0 ]
>1758	PrimaryExpression	0
>1759	Identifier	normal
>1760	UnaryOperator	-
>1761	Identifier	z1
>1762	Identifier	z1
>1763	IdentifierDeclType	double
>1764	ExpressionStatement	 
>1765	CallExpression	matrix_scale ( 3 , 1 , normal , 1.0 / matrix_norm ( 3 , 1 , normal ) , normal )
>1766	ArgumentList	3
>1767	Argument	normal
>1768	Identifier	normal
>1769	Argument	1.0 / matrix_norm ( 3 , 1 , normal )
>1770	MultiplicativeExpression	1.0 / matrix_norm ( 3 , 1 , normal )
>1771	CallExpression	matrix_norm ( 3 , 1 , normal )
>1772	ArgumentList	3
>1773	Argument	normal
>1774	Identifier	normal
>1775	Argument	1
>1776	PrimaryExpression	1
>1777	Argument	3
>1778	PrimaryExpression	3
>1779	Callee	matrix_norm
>1780	Identifier	matrix_norm
>1781	PrimaryExpression	1.0
>1782	Argument	normal
>1783	Identifier	normal
>1784	Argument	1
>1785	PrimaryExpression	1
>1786	Argument	3
>1787	PrimaryExpression	3
>1788	Callee	matrix_scale
>1789	Identifier	matrix_scale
>1790	ExpressionStatement	 
>1791	CallExpression	memcpy ( normal , plane . m_normal , 3 * sizeof ( double ) )
>1792	ArgumentList	normal
>1793	Argument	3 * sizeof ( double )
>1794	MultiplicativeExpression	3 * sizeof ( double )
>1795	SizeofExpr	sizeof ( double )
>1796	SizeofOperand	double
>1797	Sizeof	sizeof
>1798	PrimaryExpression	3
>1799	Argument	plane . m_normal
>1800	MemberAccess	plane . m_normal
>1801	Identifier	m_normal
>1802	Identifier	plane
>1803	Argument	normal
>1804	Identifier	normal
>1805	Callee	memcpy
>1806	Identifier	memcpy
>1807	IdentifierDeclStatement	 
>1808	IdentifierDecl	normal [ 3 ]
>1809	PrimaryExpression	3
>1810	Identifier	normal
>1811	IdentifierDeclType	double [ 3 ]
>1833	FunctionDef	CameraInfo 
>1834	ParameterList	double * ground , double * up
>1835	Parameter	 
>1836	Identifier	up
>1837	ParameterType	double *
>1838	Parameter	 
>1839	Identifier	ground
>1840	ParameterType	double *
>1841	ReturnType	void
>1842	CompoundStatement	 
>1843	IfStatement	if ( cross [ 2 ] < 0.0 )
>1844	CompoundStatement	 
>1845	ExpressionStatement	 
>1846	CallExpression	matrix_scale ( 3 , 1 , m_horizon , - 1.0 , m_horizon )
>1847	ArgumentList	3
>1848	Argument	m_horizon
>1849	Identifier	m_horizon
>1850	Argument	- 1.0
>1851	UnaryOp	- 1.0
>1852	PrimaryExpression	1.0
>1853	UnaryOperator	-
>1854	Argument	m_horizon
>1855	Identifier	m_horizon
>1856	Argument	1
>1857	PrimaryExpression	1
>1858	Argument	3
>1859	PrimaryExpression	3
>1860	Callee	matrix_scale
>1861	Identifier	matrix_scale
>1862	Condition	 
>1863	RelationalExpression	cross [ 2 ] < 0.0
>1864	PrimaryExpression	0.0
>1865	ArrayIndexing	cross [ 2 ]
>1866	PrimaryExpression	2
>1867	Identifier	cross
>1868	ExpressionStatement	 
>1869	CallExpression	matrix_cross ( line_v , up_dir3 , cross )
>1870	ArgumentList	line_v
>1871	Argument	cross
>1872	Identifier	cross
>1873	Argument	up_dir3
>1874	Identifier	up_dir3
>1875	Argument	line_v
>1876	Identifier	line_v
>1877	Callee	matrix_cross
>1878	Identifier	matrix_cross
>1879	IdentifierDeclStatement	 
>1880	IdentifierDecl	cross [ 3 ]
>1881	PrimaryExpression	3
>1882	Identifier	cross
>1883	IdentifierDeclType	double [ 3 ]
>1884	ExpressionStatement	 
>1885	CallExpression	LineToUnitVector ( m_horizon , line_v )
>1886	ArgumentList	m_horizon
>1887	Argument	line_v
>1888	Identifier	line_v
>1889	Argument	m_horizon
>1890	Identifier	m_horizon
>1891	Callee	LineToUnitVector
>1892	Identifier	LineToUnitVector
>1893	IdentifierDeclStatement	 
>1894	IdentifierDecl	line_v [ 3 ]
>1895	PrimaryExpression	3
>1896	Identifier	line_v
>1897	IdentifierDeclType	double [ 3 ]
>1898	IdentifierDeclStatement	 
>1899	IdentifierDecl	up_dir3 [ 3 ] = { up_dir [ 0 ] , up_dir [ 1 ] , 0.0 }
>1900	AssignmentExpr	up_dir3 [ 3 ] = { up_dir [ 0 ] , up_dir [ 1 ] , 0.0 }
>1901	InitializerList	up_dir [ 0 ]
>1902	PrimaryExpression	0.0
>1903	ArrayIndexing	up_dir [ 1 ]
>1904	PrimaryExpression	1
>1905	Identifier	up_dir
>1906	ArrayIndexing	up_dir [ 0 ]
>1907	PrimaryExpression	0
>1908	Identifier	up_dir
>1909	Identifier	up_dir3
>1910	PrimaryExpression	3
>1911	Identifier	up_dir3
>1912	IdentifierDeclType	double [ 3 ]
>1913	ExpressionStatement	 
>1914	CallExpression	matrix_scale ( 2 , 1 , up_dir , 1.0 / norm , up_dir )
>1915	ArgumentList	2
>1916	Argument	up_dir
>1917	Identifier	up_dir
>1918	Argument	1.0 / norm
>1919	MultiplicativeExpression	1.0 / norm
>1920	Identifier	norm
>1921	PrimaryExpression	1.0
>1922	Argument	up_dir
>1923	Identifier	up_dir
>1924	Argument	1
>1925	PrimaryExpression	1
>1926	Argument	2
>1927	PrimaryExpression	2
>1928	Callee	matrix_scale
>1929	Identifier	matrix_scale
>1930	IdentifierDeclStatement	 
>1931	IdentifierDecl	norm = matrix_norm ( 2 , 1 , up_dir )
>1932	AssignmentExpr	norm = matrix_norm ( 2 , 1 , up_dir )
>1933	CallExpression	matrix_norm ( 2 , 1 , up_dir )
>1934	ArgumentList	2
>1935	Argument	up_dir
>1936	Identifier	up_dir
>1937	Argument	1
>1938	PrimaryExpression	1
>1939	Argument	2
>1940	PrimaryExpression	2
>1941	Callee	matrix_norm
>1942	Identifier	matrix_norm
>1943	Identifier	norm
>1944	Identifier	norm
>1945	IdentifierDeclType	double
>1946	IdentifierDeclStatement	 
>1947	IdentifierDecl	up_dir [ 2 ] = { y_axis_img [ 0 ] , y_axis_img [ 1 ] }
>1948	AssignmentExpr	up_dir [ 2 ] = { y_axis_img [ 0 ] , y_axis_img [ 1 ] }
>1949	InitializerList	y_axis_img [ 0 ]
>1950	ArrayIndexing	y_axis_img [ 1 ]
>1951	PrimaryExpression	1
>1952	Identifier	y_axis_img
>1953	ArrayIndexing	y_axis_img [ 0 ]
>1954	PrimaryExpression	0
>1955	Identifier	y_axis_img
>1956	Identifier	up_dir
>1957	PrimaryExpression	2
>1958	Identifier	up_dir
>1959	IdentifierDeclType	double [ 2 ]
>1960	ExpressionStatement	 
>1961	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , up , y_axis_img )
>1962	ArgumentList	3
>1963	Argument	y_axis_img
>1964	Identifier	y_axis_img
>1965	Argument	up
>1966	Identifier	up
>1967	Argument	R
>1968	Identifier	R
>1969	Argument	1
>1970	PrimaryExpression	1
>1971	Argument	3
>1972	PrimaryExpression	3
>1973	Argument	3
>1974	PrimaryExpression	3
>1975	Argument	3
>1976	PrimaryExpression	3
>1977	Callee	matrix_product
>1978	Identifier	matrix_product
>1979	IdentifierDeclStatement	 
>1980	IdentifierDecl	y_axis_img [ 3 ]
>1981	PrimaryExpression	3
>1982	Identifier	y_axis_img
>1983	IdentifierDeclType	double [ 3 ]
>1984	ExpressionStatement	 
>1985	CallExpression	matrix_cross ( proj_upper , proj_lower , m_horizon )
>1986	ArgumentList	proj_upper
>1987	Argument	m_horizon
>1988	Identifier	m_horizon
>1989	Argument	proj_lower
>1990	Identifier	proj_lower
>1991	Argument	proj_upper
>1992	Identifier	proj_upper
>1993	Callee	matrix_cross
>1994	Identifier	matrix_cross
>1995	ExpressionStatement	 
>1996	CallExpression	matrix_scale ( 3 , 1 , proj_lower , 1.0 / proj_lower [ 2 ] , proj_lower )
>1997	ArgumentList	3
>1998	Argument	proj_lower
>1999	Identifier	proj_lower
>2000	Argument	1.0 / proj_lower [ 2 ]
>2001	MultiplicativeExpression	1.0 / proj_lower [ 2 ]
>2002	ArrayIndexing	proj_lower [ 2 ]
>2003	PrimaryExpression	2
>2004	Identifier	proj_lower
>2005	PrimaryExpression	1.0
>2006	Argument	proj_lower
>2007	Identifier	proj_lower
>2008	Argument	1
>2009	PrimaryExpression	1
>2010	Argument	3
>2011	PrimaryExpression	3
>2012	Callee	matrix_scale
>2013	Identifier	matrix_scale
>2014	ExpressionStatement	 
>2015	CallExpression	matrix_scale ( 3 , 1 , proj_upper , 1.0 / proj_upper [ 2 ] , proj_upper )
>2016	ArgumentList	3
>2017	Argument	proj_upper
>2018	Identifier	proj_upper
>2019	Argument	1.0 / proj_upper [ 2 ]
>2020	MultiplicativeExpression	1.0 / proj_upper [ 2 ]
>2021	ArrayIndexing	proj_upper [ 2 ]
>2022	PrimaryExpression	2
>2023	Identifier	proj_upper
>2024	PrimaryExpression	1.0
>2025	Argument	proj_upper
>2026	Identifier	proj_upper
>2027	Argument	1
>2028	PrimaryExpression	1
>2029	Argument	3
>2030	PrimaryExpression	3
>2031	Callee	matrix_scale
>2032	Identifier	matrix_scale
>2033	ExpressionStatement	 
>2034	CallExpression	matrix_scale ( 3 , 1 , proj_right , 1.0 / proj_right [ 2 ] , proj_right )
>2035	ArgumentList	3
>2036	Argument	proj_right
>2037	Identifier	proj_right
>2038	Argument	1.0 / proj_right [ 2 ]
>2039	MultiplicativeExpression	1.0 / proj_right [ 2 ]
>2040	ArrayIndexing	proj_right [ 2 ]
>2041	PrimaryExpression	2
>2042	Identifier	proj_right
>2043	PrimaryExpression	1.0
>2044	Argument	proj_right
>2045	Identifier	proj_right
>2046	Argument	1
>2047	PrimaryExpression	1
>2048	Argument	3
>2049	PrimaryExpression	3
>2050	Callee	matrix_scale
>2051	Identifier	matrix_scale
>2052	ExpressionStatement	 
>2053	CallExpression	matrix_scale ( 3 , 1 , proj_left , 1.0 / proj_left [ 2 ] , proj_left )
>2054	ArgumentList	3
>2055	Argument	proj_left
>2056	Identifier	proj_left
>2057	Argument	1.0 / proj_left [ 2 ]
>2058	MultiplicativeExpression	1.0 / proj_left [ 2 ]
>2059	ArrayIndexing	proj_left [ 2 ]
>2060	PrimaryExpression	2
>2061	Identifier	proj_left
>2062	PrimaryExpression	1.0
>2063	Argument	proj_left
>2064	Identifier	proj_left
>2065	Argument	1
>2066	PrimaryExpression	1
>2067	Argument	3
>2068	PrimaryExpression	3
>2069	Callee	matrix_scale
>2070	Identifier	matrix_scale
>2071	ExpressionStatement	 
>2072	CallExpression	matrix_product ( 3 , 4 , 4 , 1 , m_Pmatrix , point_lower , proj_lower )
>2073	ArgumentList	3
>2074	Argument	proj_lower
>2075	Identifier	proj_lower
>2076	Argument	point_lower
>2077	Identifier	point_lower
>2078	Argument	m_Pmatrix
>2079	Identifier	m_Pmatrix
>2080	Argument	1
>2081	PrimaryExpression	1
>2082	Argument	4
>2083	PrimaryExpression	4
>2084	Argument	4
>2085	PrimaryExpression	4
>2086	Argument	3
>2087	PrimaryExpression	3
>2088	Callee	matrix_product
>2089	Identifier	matrix_product
>2090	ExpressionStatement	 
>2091	CallExpression	matrix_product ( 3 , 4 , 4 , 1 , m_Pmatrix , point_upper , proj_upper )
>2092	ArgumentList	3
>2093	Argument	proj_upper
>2094	Identifier	proj_upper
>2095	Argument	point_upper
>2096	Identifier	point_upper
>2097	Argument	m_Pmatrix
>2098	Identifier	m_Pmatrix
>2099	Argument	1
>2100	PrimaryExpression	1
>2101	Argument	4
>2102	PrimaryExpression	4
>2103	Argument	4
>2104	PrimaryExpression	4
>2105	Argument	3
>2106	PrimaryExpression	3
>2107	Callee	matrix_product
>2108	Identifier	matrix_product
>2109	ExpressionStatement	 
>2110	CallExpression	matrix_product ( 3 , 4 , 4 , 1 , m_Pmatrix , point_right , proj_right )
>2111	ArgumentList	3
>2112	Argument	proj_right
>2113	Identifier	proj_right
>2114	Argument	point_right
>2115	Identifier	point_right
>2116	Argument	m_Pmatrix
>2117	Identifier	m_Pmatrix
>2118	Argument	1
>2119	PrimaryExpression	1
>2120	Argument	4
>2121	PrimaryExpression	4
>2122	Argument	4
>2123	PrimaryExpression	4
>2124	Argument	3
>2125	PrimaryExpression	3
>2126	Callee	matrix_product
>2127	Identifier	matrix_product
>2128	ExpressionStatement	 
>2129	CallExpression	matrix_product ( 3 , 4 , 4 , 1 , m_Pmatrix , point_left , proj_left )
>2130	ArgumentList	3
>2131	Argument	proj_left
>2132	Identifier	proj_left
>2133	Argument	point_left
>2134	Identifier	point_left
>2135	Argument	m_Pmatrix
>2136	Identifier	m_Pmatrix
>2137	Argument	1
>2138	PrimaryExpression	1
>2139	Argument	4
>2140	PrimaryExpression	4
>2141	Argument	4
>2142	PrimaryExpression	4
>2143	Argument	3
>2144	PrimaryExpression	3
>2145	Callee	matrix_product
>2146	Identifier	matrix_product
>2147	IdentifierDeclStatement	 
>2148	IdentifierDecl	proj_lower [ 4 ]
>2149	PrimaryExpression	4
>2150	Identifier	proj_lower
>2151	IdentifierDeclType	double [ 4 ]
>2152	IdentifierDecl	proj_upper [ 4 ]
>2153	PrimaryExpression	4
>2154	Identifier	proj_upper
>2155	IdentifierDeclType	double [ 4 ]
>2156	IdentifierDecl	proj_right [ 4 ]
>2157	PrimaryExpression	4
>2158	Identifier	proj_right
>2159	IdentifierDeclType	double [ 4 ]
>2160	IdentifierDecl	proj_left [ 4 ]
>2161	PrimaryExpression	4
>2162	Identifier	proj_left
>2163	IdentifierDeclType	double [ 4 ]
>2164	ExpressionStatement	 
>2165	CallExpression	matrix_scale ( 4 , 1 , point_lower , 1.0 / point_lower [ 3 ] , point_lower )
>2166	ArgumentList	4
>2167	Argument	point_lower
>2168	Identifier	point_lower
>2169	Argument	1.0 / point_lower [ 3 ]
>2170	MultiplicativeExpression	1.0 / point_lower [ 3 ]
>2171	ArrayIndexing	point_lower [ 3 ]
>2172	PrimaryExpression	3
>2173	Identifier	point_lower
>2174	PrimaryExpression	1.0
>2175	Argument	point_lower
>2176	Identifier	point_lower
>2177	Argument	1
>2178	PrimaryExpression	1
>2179	Argument	4
>2180	PrimaryExpression	4
>2181	Callee	matrix_scale
>2182	Identifier	matrix_scale
>2183	ExpressionStatement	 
>2184	CallExpression	matrix_scale ( 4 , 1 , point_upper , 1.0 / point_upper [ 3 ] , point_upper )
>2185	ArgumentList	4
>2186	Argument	point_upper
>2187	Identifier	point_upper
>2188	Argument	1.0 / point_upper [ 3 ]
>2189	MultiplicativeExpression	1.0 / point_upper [ 3 ]
>2190	ArrayIndexing	point_upper [ 3 ]
>2191	PrimaryExpression	3
>2192	Identifier	point_upper
>2193	PrimaryExpression	1.0
>2194	Argument	point_upper
>2195	Identifier	point_upper
>2196	Argument	1
>2197	PrimaryExpression	1
>2198	Argument	4
>2199	PrimaryExpression	4
>2200	Callee	matrix_scale
>2201	Identifier	matrix_scale
>2202	ExpressionStatement	 
>2203	CallExpression	matrix_scale ( 4 , 1 , point_right , 1.0 / point_right [ 3 ] , point_right )
>2204	ArgumentList	4
>2205	Argument	point_right
>2206	Identifier	point_right
>2207	Argument	1.0 / point_right [ 3 ]
>2208	MultiplicativeExpression	1.0 / point_right [ 3 ]
>2209	ArrayIndexing	point_right [ 3 ]
>2210	PrimaryExpression	3
>2211	Identifier	point_right
>2212	PrimaryExpression	1.0
>2213	Argument	point_right
>2214	Identifier	point_right
>2215	Argument	1
>2216	PrimaryExpression	1
>2217	Argument	4
>2218	PrimaryExpression	4
>2219	Callee	matrix_scale
>2220	Identifier	matrix_scale
>2221	ExpressionStatement	 
>2222	CallExpression	matrix_scale ( 4 , 1 , point_left , 1.0 / point_left [ 3 ] , point_left )
>2223	ArgumentList	4
>2224	Argument	point_left
>2225	Identifier	point_left
>2226	Argument	1.0 / point_left [ 3 ]
>2227	MultiplicativeExpression	1.0 / point_left [ 3 ]
>2228	ArrayIndexing	point_left [ 3 ]
>2229	PrimaryExpression	3
>2230	Identifier	point_left
>2231	PrimaryExpression	1.0
>2232	Argument	point_left
>2233	Identifier	point_left
>2234	Argument	1
>2235	PrimaryExpression	1
>2236	Argument	4
>2237	PrimaryExpression	4
>2238	Callee	matrix_scale
>2239	Identifier	matrix_scale
>2240	ExpressionStatement	 
>2241	CallExpression	fit_3D_plane_orthogonal_regression ( 3 , lower_planes , point_lower )
>2242	ArgumentList	3
>2243	Argument	point_lower
>2244	Identifier	point_lower
>2245	Argument	lower_planes
>2246	Identifier	lower_planes
>2247	Argument	3
>2248	PrimaryExpression	3
>2249	Callee	fit_3D_plane_orthogonal_regression
>2250	Identifier	fit_3D_plane_orthogonal_regression
>2251	ExpressionStatement	 
>2252	CallExpression	fit_3D_plane_orthogonal_regression ( 3 , upper_planes , point_upper )
>2253	ArgumentList	3
>2254	Argument	point_upper
>2255	Identifier	point_upper
>2256	Argument	upper_planes
>2257	Identifier	upper_planes
>2258	Argument	3
>2259	PrimaryExpression	3
>2260	Callee	fit_3D_plane_orthogonal_regression
>2261	Identifier	fit_3D_plane_orthogonal_regression
>2262	ExpressionStatement	 
>2263	CallExpression	fit_3D_plane_orthogonal_regression ( 3 , right_planes , point_right )
>2264	ArgumentList	3
>2265	Argument	point_right
>2266	Identifier	point_right
>2267	Argument	right_planes
>2268	Identifier	right_planes
>2269	Argument	3
>2270	PrimaryExpression	3
>2271	Callee	fit_3D_plane_orthogonal_regression
>2272	Identifier	fit_3D_plane_orthogonal_regression
>2273	ExpressionStatement	 
>2274	CallExpression	fit_3D_plane_orthogonal_regression ( 3 , left_planes , point_left )
>2275	ArgumentList	3
>2276	Argument	point_left
>2277	Identifier	point_left
>2278	Argument	left_planes
>2279	Identifier	left_planes
>2280	Argument	3
>2281	PrimaryExpression	3
>2282	Callee	fit_3D_plane_orthogonal_regression
>2283	Identifier	fit_3D_plane_orthogonal_regression
>2284	IdentifierDeclStatement	 
>2285	IdentifierDecl	point_lower [ 4 ]
>2286	PrimaryExpression	4
>2287	Identifier	point_lower
>2288	IdentifierDeclType	double [ 4 ]
>2289	IdentifierDecl	point_upper [ 4 ]
>2290	PrimaryExpression	4
>2291	Identifier	point_upper
>2292	IdentifierDeclType	double [ 4 ]
>2293	IdentifierDecl	point_right [ 4 ]
>2294	PrimaryExpression	4
>2295	Identifier	point_right
>2296	IdentifierDeclType	double [ 4 ]
>2297	IdentifierDecl	point_left [ 4 ]
>2298	PrimaryExpression	4
>2299	Identifier	point_left
>2300	IdentifierDeclType	double [ 4 ]
>2301	IdentifierDeclStatement	 
>2302	IdentifierDecl	lower_planes [ 3 ] = { v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] ) , v3_new ( ground [ 0 ] , ground [ \
>2303	AssignmentExpr	lower_planes [ 3 ] = { v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] ) , v3_new ( ground [ \
>2304	InitializerList	v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] )
>2305	CallExpression	v3_new ( lower_plane [ 0 ] , lower_plane [ 1 ] , lower_plane [ 2 ] )
>2306	ArgumentList	lower_plane [ 0 ]
>2307	Argument	lower_plane [ 2 ]
>2308	ArrayIndexing	lower_plane [ 2 ]
>2309	PrimaryExpression	2
>2310	Identifier	lower_plane
>2311	Argument	lower_plane [ 1 ]
>2312	ArrayIndexing	lower_plane [ 1 ]
>2313	PrimaryExpression	1
>2314	Identifier	lower_plane
>2315	Argument	lower_plane [ 0 ]
>2316	ArrayIndexing	lower_plane [ 0 ]
>2317	PrimaryExpression	0
>2318	Identifier	lower_plane
>2319	Callee	v3_new
>2320	Identifier	v3_new
>2321	CallExpression	v3_new ( ground [ 0 ] , ground [ 1 ] , ground [ 2 ] )
>2322	ArgumentList	ground [ 0 ]
>2323	Argument	ground [ 2 ]
>2324	ArrayIndexing	ground [ 2 ]
>2325	PrimaryExpression	2
>2326	Identifier	ground
>2327	Argument	ground [ 1 ]
>2328	ArrayIndexing	ground [ 1 ]
>2329	PrimaryExpression	1
>2330	Identifier	ground
>2331	Argument	ground [ 0 ]
>2332	ArrayIndexing	ground [ 0 ]
>2333	PrimaryExpression	0
>2334	Identifier	ground
>2335	Callee	v3_new
>2336	Identifier	v3_new
>2337	CallExpression	v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] )
>2338	ArgumentList	infinity [ 0 ]
>2339	Argument	infinity [ 2 ]
>2340	ArrayIndexing	infinity [ 2 ]
>2341	PrimaryExpression	2
>2342	Identifier	infinity
>2343	Argument	infinity [ 1 ]
>2344	ArrayIndexing	infinity [ 1 ]
>2345	PrimaryExpression	1
>2346	Identifier	infinity
>2347	Argument	infinity [ 0 ]
>2348	ArrayIndexing	infinity [ 0 ]
>2349	PrimaryExpression	0
>2350	Identifier	infinity
>2351	Callee	v3_new
>2352	Identifier	v3_new
>2353	Identifier	lower_planes
>2354	PrimaryExpression	3
>2355	Identifier	lower_planes
>2356	IdentifierDeclType	v3_t [ 3 ]
>2357	IdentifierDeclStatement	 
>2358	IdentifierDecl	upper_planes [ 3 ] = { v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] ) , v3_new ( ground [ 0 ] , ground [ \
>2359	AssignmentExpr	upper_planes [ 3 ] = { v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] ) , v3_new ( ground [ \
>2360	InitializerList	v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] )
>2361	CallExpression	v3_new ( upper_plane [ 0 ] , upper_plane [ 1 ] , upper_plane [ 2 ] )
>2362	ArgumentList	upper_plane [ 0 ]
>2363	Argument	upper_plane [ 2 ]
>2364	ArrayIndexing	upper_plane [ 2 ]
>2365	PrimaryExpression	2
>2366	Identifier	upper_plane
>2367	Argument	upper_plane [ 1 ]
>2368	ArrayIndexing	upper_plane [ 1 ]
>2369	PrimaryExpression	1
>2370	Identifier	upper_plane
>2371	Argument	upper_plane [ 0 ]
>2372	ArrayIndexing	upper_plane [ 0 ]
>2373	PrimaryExpression	0
>2374	Identifier	upper_plane
>2375	Callee	v3_new
>2376	Identifier	v3_new
>2377	CallExpression	v3_new ( ground [ 0 ] , ground [ 1 ] , ground [ 2 ] )
>2378	ArgumentList	ground [ 0 ]
>2379	Argument	ground [ 2 ]
>2380	ArrayIndexing	ground [ 2 ]
>2381	PrimaryExpression	2
>2382	Identifier	ground
>2383	Argument	ground [ 1 ]
>2384	ArrayIndexing	ground [ 1 ]
>2385	PrimaryExpression	1
>2386	Identifier	ground
>2387	Argument	ground [ 0 ]
>2388	ArrayIndexing	ground [ 0 ]
>2389	PrimaryExpression	0
>2390	Identifier	ground
>2391	Callee	v3_new
>2392	Identifier	v3_new
>2393	CallExpression	v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] )
>2394	ArgumentList	infinity [ 0 ]
>2395	Argument	infinity [ 2 ]
>2396	ArrayIndexing	infinity [ 2 ]
>2397	PrimaryExpression	2
>2398	Identifier	infinity
>2399	Argument	infinity [ 1 ]
>2400	ArrayIndexing	infinity [ 1 ]
>2401	PrimaryExpression	1
>2402	Identifier	infinity
>2403	Argument	infinity [ 0 ]
>2404	ArrayIndexing	infinity [ 0 ]
>2405	PrimaryExpression	0
>2406	Identifier	infinity
>2407	Callee	v3_new
>2408	Identifier	v3_new
>2409	Identifier	upper_planes
>2410	PrimaryExpression	3
>2411	Identifier	upper_planes
>2412	IdentifierDeclType	v3_t [ 3 ]
>2413	IdentifierDeclStatement	 
>2414	IdentifierDecl	right_planes [ 3 ] = { v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] ) , v3_new ( ground [ 0 ] , ground [ \
>2415	AssignmentExpr	right_planes [ 3 ] = { v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] ) , v3_new ( ground [ \
>2416	InitializerList	v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] )
>2417	CallExpression	v3_new ( right_plane [ 0 ] , right_plane [ 1 ] , right_plane [ 2 ] )
>2418	ArgumentList	right_plane [ 0 ]
>2419	Argument	right_plane [ 2 ]
>2420	ArrayIndexing	right_plane [ 2 ]
>2421	PrimaryExpression	2
>2422	Identifier	right_plane
>2423	Argument	right_plane [ 1 ]
>2424	ArrayIndexing	right_plane [ 1 ]
>2425	PrimaryExpression	1
>2426	Identifier	right_plane
>2427	Argument	right_plane [ 0 ]
>2428	ArrayIndexing	right_plane [ 0 ]
>2429	PrimaryExpression	0
>2430	Identifier	right_plane
>2431	Callee	v3_new
>2432	Identifier	v3_new
>2433	CallExpression	v3_new ( ground [ 0 ] , ground [ 1 ] , ground [ 2 ] )
>2434	ArgumentList	ground [ 0 ]
>2435	Argument	ground [ 2 ]
>2436	ArrayIndexing	ground [ 2 ]
>2437	PrimaryExpression	2
>2438	Identifier	ground
>2439	Argument	ground [ 1 ]
>2440	ArrayIndexing	ground [ 1 ]
>2441	PrimaryExpression	1
>2442	Identifier	ground
>2443	Argument	ground [ 0 ]
>2444	ArrayIndexing	ground [ 0 ]
>2445	PrimaryExpression	0
>2446	Identifier	ground
>2447	Callee	v3_new
>2448	Identifier	v3_new
>2449	CallExpression	v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] )
>2450	ArgumentList	infinity [ 0 ]
>2451	Argument	infinity [ 2 ]
>2452	ArrayIndexing	infinity [ 2 ]
>2453	PrimaryExpression	2
>2454	Identifier	infinity
>2455	Argument	infinity [ 1 ]
>2456	ArrayIndexing	infinity [ 1 ]
>2457	PrimaryExpression	1
>2458	Identifier	infinity
>2459	Argument	infinity [ 0 ]
>2460	ArrayIndexing	infinity [ 0 ]
>2461	PrimaryExpression	0
>2462	Identifier	infinity
>2463	Callee	v3_new
>2464	Identifier	v3_new
>2465	Identifier	right_planes
>2466	PrimaryExpression	3
>2467	Identifier	right_planes
>2468	IdentifierDeclType	v3_t [ 3 ]
>2469	IdentifierDeclStatement	 
>2470	IdentifierDecl	left_planes [ 3 ] = { v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] ) , v3_new ( ground [ 0 ] , ground [ \
>2471	AssignmentExpr	left_planes [ 3 ] = { v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] ) , v3_new ( ground [ \
>2472	InitializerList	v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] )
>2473	CallExpression	v3_new ( left_plane [ 0 ] , left_plane [ 1 ] , left_plane [ 2 ] )
>2474	ArgumentList	left_plane [ 0 ]
>2475	Argument	left_plane [ 2 ]
>2476	ArrayIndexing	left_plane [ 2 ]
>2477	PrimaryExpression	2
>2478	Identifier	left_plane
>2479	Argument	left_plane [ 1 ]
>2480	ArrayIndexing	left_plane [ 1 ]
>2481	PrimaryExpression	1
>2482	Identifier	left_plane
>2483	Argument	left_plane [ 0 ]
>2484	ArrayIndexing	left_plane [ 0 ]
>2485	PrimaryExpression	0
>2486	Identifier	left_plane
>2487	Callee	v3_new
>2488	Identifier	v3_new
>2489	CallExpression	v3_new ( ground [ 0 ] , ground [ 1 ] , ground [ 2 ] )
>2490	ArgumentList	ground [ 0 ]
>2491	Argument	ground [ 2 ]
>2492	ArrayIndexing	ground [ 2 ]
>2493	PrimaryExpression	2
>2494	Identifier	ground
>2495	Argument	ground [ 1 ]
>2496	ArrayIndexing	ground [ 1 ]
>2497	PrimaryExpression	1
>2498	Identifier	ground
>2499	Argument	ground [ 0 ]
>2500	ArrayIndexing	ground [ 0 ]
>2501	PrimaryExpression	0
>2502	Identifier	ground
>2503	Callee	v3_new
>2504	Identifier	v3_new
>2505	CallExpression	v3_new ( infinity [ 0 ] , infinity [ 1 ] , infinity [ 2 ] )
>2506	ArgumentList	infinity [ 0 ]
>2507	Argument	infinity [ 2 ]
>2508	ArrayIndexing	infinity [ 2 ]
>2509	PrimaryExpression	2
>2510	Identifier	infinity
>2511	Argument	infinity [ 1 ]
>2512	ArrayIndexing	infinity [ 1 ]
>2513	PrimaryExpression	1
>2514	Identifier	infinity
>2515	Argument	infinity [ 0 ]
>2516	ArrayIndexing	infinity [ 0 ]
>2517	PrimaryExpression	0
>2518	Identifier	infinity
>2519	Callee	v3_new
>2520	Identifier	v3_new
>2521	Identifier	left_planes
>2522	PrimaryExpression	3
>2523	Identifier	left_planes
>2524	IdentifierDeclType	v3_t [ 3 ]
>2525	ExpressionStatement	 
>2526	CallExpression	matrix_scale ( 4 , 1 , lower_plane , 1.0 / lower_plane [ 3 ] , lower_plane )
>2527	ArgumentList	4
>2528	Argument	lower_plane
>2529	Identifier	lower_plane
>2530	Argument	1.0 / lower_plane [ 3 ]
>2531	MultiplicativeExpression	1.0 / lower_plane [ 3 ]
>2532	ArrayIndexing	lower_plane [ 3 ]
>2533	PrimaryExpression	3
>2534	Identifier	lower_plane
>2535	PrimaryExpression	1.0
>2536	Argument	lower_plane
>2537	Identifier	lower_plane
>2538	Argument	1
>2539	PrimaryExpression	1
>2540	Argument	4
>2541	PrimaryExpression	4
>2542	Callee	matrix_scale
>2543	Identifier	matrix_scale
>2544	ExpressionStatement	 
>2545	CallExpression	matrix_scale ( 4 , 1 , upper_plane , 1.0 / upper_plane [ 3 ] , upper_plane )
>2546	ArgumentList	4
>2547	Argument	upper_plane
>2548	Identifier	upper_plane
>2549	Argument	1.0 / upper_plane [ 3 ]
>2550	MultiplicativeExpression	1.0 / upper_plane [ 3 ]
>2551	ArrayIndexing	upper_plane [ 3 ]
>2552	PrimaryExpression	3
>2553	Identifier	upper_plane
>2554	PrimaryExpression	1.0
>2555	Argument	upper_plane
>2556	Identifier	upper_plane
>2557	Argument	1
>2558	PrimaryExpression	1
>2559	Argument	4
>2560	PrimaryExpression	4
>2561	Callee	matrix_scale
>2562	Identifier	matrix_scale
>2563	ExpressionStatement	 
>2564	CallExpression	matrix_scale ( 4 , 1 , right_plane , 1.0 / right_plane [ 3 ] , right_plane )
>2565	ArgumentList	4
>2566	Argument	right_plane
>2567	Identifier	right_plane
>2568	Argument	1.0 / right_plane [ 3 ]
>2569	MultiplicativeExpression	1.0 / right_plane [ 3 ]
>2570	ArrayIndexing	right_plane [ 3 ]
>2571	PrimaryExpression	3
>2572	Identifier	right_plane
>2573	PrimaryExpression	1.0
>2574	Argument	right_plane
>2575	Identifier	right_plane
>2576	Argument	1
>2577	PrimaryExpression	1
>2578	Argument	4
>2579	PrimaryExpression	4
>2580	Callee	matrix_scale
>2581	Identifier	matrix_scale
>2582	ExpressionStatement	 
>2583	CallExpression	matrix_scale ( 4 , 1 , left_plane , 1.0 / left_plane [ 3 ] , left_plane )
>2584	ArgumentList	4
>2585	Argument	left_plane
>2586	Identifier	left_plane
>2587	Argument	1.0 / left_plane [ 3 ]
>2588	MultiplicativeExpression	1.0 / left_plane [ 3 ]
>2589	ArrayIndexing	left_plane [ 3 ]
>2590	PrimaryExpression	3
>2591	Identifier	left_plane
>2592	PrimaryExpression	1.0
>2593	Argument	left_plane
>2594	Identifier	left_plane
>2595	Argument	1
>2596	PrimaryExpression	1
>2597	Argument	4
>2598	PrimaryExpression	4
>2599	Callee	matrix_scale
>2600	Identifier	matrix_scale
>2601	ExpressionStatement	 
>2602	CallExpression	matrix_scale ( 4 , 1 , ground , 1.0 / ground [ 3 ] , ground )
>2603	ArgumentList	4
>2604	Argument	ground
>2605	Identifier	ground
>2606	Argument	1.0 / ground [ 3 ]
>2607	MultiplicativeExpression	1.0 / ground [ 3 ]
>2608	ArrayIndexing	ground [ 3 ]
>2609	PrimaryExpression	3
>2610	Identifier	ground
>2611	PrimaryExpression	1.0
>2612	Argument	ground
>2613	Identifier	ground
>2614	Argument	1
>2615	PrimaryExpression	1
>2616	Argument	4
>2617	PrimaryExpression	4
>2618	Callee	matrix_scale
>2619	Identifier	matrix_scale
>2620	ExpressionStatement	 
>2621	CallExpression	matrix_scale ( 4 , 1 , infinity , 1.0 / infinity [ 3 ] , infinity )
>2622	ArgumentList	4
>2623	Argument	infinity
>2624	Identifier	infinity
>2625	Argument	1.0 / infinity [ 3 ]
>2626	MultiplicativeExpression	1.0 / infinity [ 3 ]
>2627	ArrayIndexing	infinity [ 3 ]
>2628	PrimaryExpression	3
>2629	Identifier	infinity
>2630	PrimaryExpression	1.0
>2631	Argument	infinity
>2632	Identifier	infinity
>2633	Argument	1
>2634	PrimaryExpression	1
>2635	Argument	4
>2636	PrimaryExpression	4
>2637	Callee	matrix_scale
>2638	Identifier	matrix_scale
>2639	ExpressionStatement	 
>2640	CallExpression	fit_3D_plane_orthogonal_regression ( 3 , upper_points , lower_plane )
>2641	ArgumentList	3
>2642	Argument	lower_plane
>2643	Identifier	lower_plane
>2644	Argument	upper_points
>2645	Identifier	upper_points
>2646	Argument	3
>2647	PrimaryExpression	3
>2648	Callee	fit_3D_plane_orthogonal_regression
>2649	Identifier	fit_3D_plane_orthogonal_regression
>2650	ExpressionStatement	 
>2651	CallExpression	fit_3D_plane_orthogonal_regression ( 3 , lower_points , upper_plane )
>2652	ArgumentList	3
>2653	Argument	upper_plane
>2654	Identifier	upper_plane
>2655	Argument	lower_points
>2656	Identifier	lower_points
>2657	Argument	3
>2658	PrimaryExpression	3
>2659	Callee	fit_3D_plane_orthogonal_regression
>2660	Identifier	fit_3D_plane_orthogonal_regression
>2661	ExpressionStatement	 
>2662	CallExpression	fit_3D_plane_orthogonal_regression ( 3 , right_points , right_plane )
>2663	ArgumentList	3
>2664	Argument	right_plane
>2665	Identifier	right_plane
>2666	Argument	right_points
>2667	Identifier	right_points
>2668	Argument	3
>2669	PrimaryExpression	3
>2670	Callee	fit_3D_plane_orthogonal_regression
>2671	Identifier	fit_3D_plane_orthogonal_regression
>2672	ExpressionStatement	 
>2673	CallExpression	fit_3D_plane_orthogonal_regression ( 3 , left_points , left_plane )
>2674	ArgumentList	3
>2675	Argument	left_plane
>2676	Identifier	left_plane
>2677	Argument	left_points
>2678	Identifier	left_points
>2679	Argument	3
>2680	PrimaryExpression	3
>2681	Callee	fit_3D_plane_orthogonal_regression
>2682	Identifier	fit_3D_plane_orthogonal_regression
>2683	IdentifierDeclStatement	 
>2684	IdentifierDecl	lower_points [ 3 ] = { v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] ) , v3_new ( lower_left_world [ 0 ] , lower_left_\
>2685	AssignmentExpr	lower_points [ 3 ] = { v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] ) , v3_new ( lower_left_world [ 0 ] , \
>2686	InitializerList	v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>2687	CallExpression	v3_new ( lower_right_world [ 0 ] , lower_right_world [ 1 ] , lower_right_world [ 2 ] )
>2688	ArgumentList	lower_right_world [ 0 ]
>2689	Argument	lower_right_world [ 2 ]
>2690	ArrayIndexing	lower_right_world [ 2 ]
>2691	PrimaryExpression	2
>2692	Identifier	lower_right_world
>2693	Argument	lower_right_world [ 1 ]
>2694	ArrayIndexing	lower_right_world [ 1 ]
>2695	PrimaryExpression	1
>2696	Identifier	lower_right_world
>2697	Argument	lower_right_world [ 0 ]
>2698	ArrayIndexing	lower_right_world [ 0 ]
>2699	PrimaryExpression	0
>2700	Identifier	lower_right_world
>2701	Callee	v3_new
>2702	Identifier	v3_new
>2703	CallExpression	v3_new ( lower_left_world [ 0 ] , lower_left_world [ 1 ] , lower_left_world [ 2 ] )
>2704	ArgumentList	lower_left_world [ 0 ]
>2705	Argument	lower_left_world [ 2 ]
>2706	ArrayIndexing	lower_left_world [ 2 ]
>2707	PrimaryExpression	2
>2708	Identifier	lower_left_world
>2709	Argument	lower_left_world [ 1 ]
>2710	ArrayIndexing	lower_left_world [ 1 ]
>2711	PrimaryExpression	1
>2712	Identifier	lower_left_world
>2713	Argument	lower_left_world [ 0 ]
>2714	ArrayIndexing	lower_left_world [ 0 ]
>2715	PrimaryExpression	0
>2716	Identifier	lower_left_world
>2717	Callee	v3_new
>2718	Identifier	v3_new
>2719	CallExpression	v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>2720	ArgumentList	pos [ 0 ]
>2721	Argument	pos [ 2 ]
>2722	ArrayIndexing	pos [ 2 ]
>2723	PrimaryExpression	2
>2724	Identifier	pos
>2725	Argument	pos [ 1 ]
>2726	ArrayIndexing	pos [ 1 ]
>2727	PrimaryExpression	1
>2728	Identifier	pos
>2729	Argument	pos [ 0 ]
>2730	ArrayIndexing	pos [ 0 ]
>2731	PrimaryExpression	0
>2732	Identifier	pos
>2733	Callee	v3_new
>2734	Identifier	v3_new
>2735	Identifier	lower_points
>2736	PrimaryExpression	3
>2737	Identifier	lower_points
>2738	IdentifierDeclType	v3_t [ 3 ]
>2739	IdentifierDeclStatement	 
>2740	IdentifierDecl	upper_points [ 3 ] = { v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] ) , v3_new ( upper_left_world [ 0 ] , upper_left_\
>2741	AssignmentExpr	upper_points [ 3 ] = { v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] ) , v3_new ( upper_left_world [ 0 ] , \
>2742	InitializerList	v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>2743	CallExpression	v3_new ( upper_right_world [ 0 ] , upper_right_world [ 1 ] , upper_right_world [ 2 ] )
>2744	ArgumentList	upper_right_world [ 0 ]
>2745	Argument	upper_right_world [ 2 ]
>2746	ArrayIndexing	upper_right_world [ 2 ]
>2747	PrimaryExpression	2
>2748	Identifier	upper_right_world
>2749	Argument	upper_right_world [ 1 ]
>2750	ArrayIndexing	upper_right_world [ 1 ]
>2751	PrimaryExpression	1
>2752	Identifier	upper_right_world
>2753	Argument	upper_right_world [ 0 ]
>2754	ArrayIndexing	upper_right_world [ 0 ]
>2755	PrimaryExpression	0
>2756	Identifier	upper_right_world
>2757	Callee	v3_new
>2758	Identifier	v3_new
>2759	CallExpression	v3_new ( upper_left_world [ 0 ] , upper_left_world [ 1 ] , upper_left_world [ 2 ] )
>2760	ArgumentList	upper_left_world [ 0 ]
>2761	Argument	upper_left_world [ 2 ]
>2762	ArrayIndexing	upper_left_world [ 2 ]
>2763	PrimaryExpression	2
>2764	Identifier	upper_left_world
>2765	Argument	upper_left_world [ 1 ]
>2766	ArrayIndexing	upper_left_world [ 1 ]
>2767	PrimaryExpression	1
>2768	Identifier	upper_left_world
>2769	Argument	upper_left_world [ 0 ]
>2770	ArrayIndexing	upper_left_world [ 0 ]
>2771	PrimaryExpression	0
>2772	Identifier	upper_left_world
>2773	Callee	v3_new
>2774	Identifier	v3_new
>2775	CallExpression	v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>2776	ArgumentList	pos [ 0 ]
>2777	Argument	pos [ 2 ]
>2778	ArrayIndexing	pos [ 2 ]
>2779	PrimaryExpression	2
>2780	Identifier	pos
>2781	Argument	pos [ 1 ]
>2782	ArrayIndexing	pos [ 1 ]
>2783	PrimaryExpression	1
>2784	Identifier	pos
>2785	Argument	pos [ 0 ]
>2786	ArrayIndexing	pos [ 0 ]
>2787	PrimaryExpression	0
>2788	Identifier	pos
>2789	Callee	v3_new
>2790	Identifier	v3_new
>2791	Identifier	upper_points
>2792	PrimaryExpression	3
>2793	Identifier	upper_points
>2794	IdentifierDeclType	v3_t [ 3 ]
>2795	IdentifierDeclStatement	 
>2796	IdentifierDecl	right_points [ 3 ] = { v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] ) , v3_new ( upper_right_world [ 0 ] , upper_right_\
>2797	AssignmentExpr	right_points [ 3 ] = { v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] ) , v3_new ( upper_right_world [ 0 ] , \
>2798	InitializerList	v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>2799	CallExpression	v3_new ( lower_right_world [ 0 ] , lower_right_world [ 1 ] , lower_right_world [ 2 ] )
>2800	ArgumentList	lower_right_world [ 0 ]
>2801	Argument	lower_right_world [ 2 ]
>2802	ArrayIndexing	lower_right_world [ 2 ]
>2803	PrimaryExpression	2
>2804	Identifier	lower_right_world
>2805	Argument	lower_right_world [ 1 ]
>2806	ArrayIndexing	lower_right_world [ 1 ]
>2807	PrimaryExpression	1
>2808	Identifier	lower_right_world
>2809	Argument	lower_right_world [ 0 ]
>2810	ArrayIndexing	lower_right_world [ 0 ]
>2811	PrimaryExpression	0
>2812	Identifier	lower_right_world
>2813	Callee	v3_new
>2814	Identifier	v3_new
>2815	CallExpression	v3_new ( upper_right_world [ 0 ] , upper_right_world [ 1 ] , upper_right_world [ 2 ] )
>2816	ArgumentList	upper_right_world [ 0 ]
>2817	Argument	upper_right_world [ 2 ]
>2818	ArrayIndexing	upper_right_world [ 2 ]
>2819	PrimaryExpression	2
>2820	Identifier	upper_right_world
>2821	Argument	upper_right_world [ 1 ]
>2822	ArrayIndexing	upper_right_world [ 1 ]
>2823	PrimaryExpression	1
>2824	Identifier	upper_right_world
>2825	Argument	upper_right_world [ 0 ]
>2826	ArrayIndexing	upper_right_world [ 0 ]
>2827	PrimaryExpression	0
>2828	Identifier	upper_right_world
>2829	Callee	v3_new
>2830	Identifier	v3_new
>2831	CallExpression	v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>2832	ArgumentList	pos [ 0 ]
>2833	Argument	pos [ 2 ]
>2834	ArrayIndexing	pos [ 2 ]
>2835	PrimaryExpression	2
>2836	Identifier	pos
>2837	Argument	pos [ 1 ]
>2838	ArrayIndexing	pos [ 1 ]
>2839	PrimaryExpression	1
>2840	Identifier	pos
>2841	Argument	pos [ 0 ]
>2842	ArrayIndexing	pos [ 0 ]
>2843	PrimaryExpression	0
>2844	Identifier	pos
>2845	Callee	v3_new
>2846	Identifier	v3_new
>2847	Identifier	right_points
>2848	PrimaryExpression	3
>2849	Identifier	right_points
>2850	IdentifierDeclType	v3_t [ 3 ]
>2851	IdentifierDeclStatement	 
>2852	IdentifierDecl	left_points [ 3 ] = { v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] ) , v3_new ( upper_left_world [ 0 ] , upper_left_\
>2853	AssignmentExpr	left_points [ 3 ] = { v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] ) , v3_new ( upper_left_world [ 0 ] , \
>2854	InitializerList	v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>2855	CallExpression	v3_new ( lower_left_world [ 0 ] , lower_left_world [ 1 ] , lower_left_world [ 2 ] )
>2856	ArgumentList	lower_left_world [ 0 ]
>2857	Argument	lower_left_world [ 2 ]
>2858	ArrayIndexing	lower_left_world [ 2 ]
>2859	PrimaryExpression	2
>2860	Identifier	lower_left_world
>2861	Argument	lower_left_world [ 1 ]
>2862	ArrayIndexing	lower_left_world [ 1 ]
>2863	PrimaryExpression	1
>2864	Identifier	lower_left_world
>2865	Argument	lower_left_world [ 0 ]
>2866	ArrayIndexing	lower_left_world [ 0 ]
>2867	PrimaryExpression	0
>2868	Identifier	lower_left_world
>2869	Callee	v3_new
>2870	Identifier	v3_new
>2871	CallExpression	v3_new ( upper_left_world [ 0 ] , upper_left_world [ 1 ] , upper_left_world [ 2 ] )
>2872	ArgumentList	upper_left_world [ 0 ]
>2873	Argument	upper_left_world [ 2 ]
>2874	ArrayIndexing	upper_left_world [ 2 ]
>2875	PrimaryExpression	2
>2876	Identifier	upper_left_world
>2877	Argument	upper_left_world [ 1 ]
>2878	ArrayIndexing	upper_left_world [ 1 ]
>2879	PrimaryExpression	1
>2880	Identifier	upper_left_world
>2881	Argument	upper_left_world [ 0 ]
>2882	ArrayIndexing	upper_left_world [ 0 ]
>2883	PrimaryExpression	0
>2884	Identifier	upper_left_world
>2885	Callee	v3_new
>2886	Identifier	v3_new
>2887	CallExpression	v3_new ( pos [ 0 ] , pos [ 1 ] , pos [ 2 ] )
>2888	ArgumentList	pos [ 0 ]
>2889	Argument	pos [ 2 ]
>2890	ArrayIndexing	pos [ 2 ]
>2891	PrimaryExpression	2
>2892	Identifier	pos
>2893	Argument	pos [ 1 ]
>2894	ArrayIndexing	pos [ 1 ]
>2895	PrimaryExpression	1
>2896	Identifier	pos
>2897	Argument	pos [ 0 ]
>2898	ArrayIndexing	pos [ 0 ]
>2899	PrimaryExpression	0
>2900	Identifier	pos
>2901	Callee	v3_new
>2902	Identifier	v3_new
>2903	Identifier	left_points
>2904	PrimaryExpression	3
>2905	Identifier	left_points
>2906	IdentifierDeclType	v3_t [ 3 ]
>2907	IdentifierDeclStatement	 
>2908	IdentifierDecl	lower_plane [ 4 ]
>2909	PrimaryExpression	4
>2910	Identifier	lower_plane
>2911	IdentifierDeclType	double [ 4 ]
>2912	IdentifierDecl	upper_plane [ 4 ]
>2913	PrimaryExpression	4
>2914	Identifier	upper_plane
>2915	IdentifierDeclType	double [ 4 ]
>2916	IdentifierDecl	right_plane [ 4 ]
>2917	PrimaryExpression	4
>2918	Identifier	right_plane
>2919	IdentifierDeclType	double [ 4 ]
>2920	IdentifierDecl	left_plane [ 4 ]
>2921	PrimaryExpression	4
>2922	Identifier	left_plane
>2923	IdentifierDeclType	double [ 4 ]
>2924	IdentifierDeclStatement	 
>2925	IdentifierDecl	infinity [ 4 ] = { dir [ 0 ] , dir [ 1 ] , dir [ 2 ] , 10000.0 }
>2926	AssignmentExpr	infinity [ 4 ] = { dir [ 0 ] , dir [ 1 ] , dir [ 2 ] , 10000.0 }
>2927	InitializerList	dir [ 0 ]
>2928	PrimaryExpression	10000.0
>2929	ArrayIndexing	dir [ 2 ]
>2930	PrimaryExpression	2
>2931	Identifier	dir
>2932	ArrayIndexing	dir [ 1 ]
>2933	PrimaryExpression	1
>2934	Identifier	dir
>2935	ArrayIndexing	dir [ 0 ]
>2936	PrimaryExpression	0
>2937	Identifier	dir
>2938	Identifier	infinity
>2939	PrimaryExpression	4
>2940	Identifier	infinity
>2941	IdentifierDeclType	double [ 4 ]
>2942	ExpressionStatement	 
>2943	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , minuz , dir )
>2944	ArgumentList	3
>2945	Argument	dir
>2946	Identifier	dir
>2947	Argument	minuz
>2948	Identifier	minuz
>2949	Argument	R
>2950	Identifier	R
>2951	Argument	1
>2952	PrimaryExpression	1
>2953	Argument	3
>2954	PrimaryExpression	3
>2955	Argument	3
>2956	PrimaryExpression	3
>2957	Argument	3
>2958	PrimaryExpression	3
>2959	Callee	matrix_product
>2960	Identifier	matrix_product
>2961	IdentifierDeclStatement	 
>2962	IdentifierDecl	dir [ 3 ]
>2963	PrimaryExpression	3
>2964	Identifier	dir
>2965	IdentifierDeclType	double [ 3 ]
>2966	IdentifierDecl	minuz [ 3 ] = { 0.0 , 0.0 , - 1.0 }
>2967	AssignmentExpr	minuz [ 3 ] = { 0.0 , 0.0 , - 1.0 }
>2968	InitializerList	0.0
>2969	UnaryOp	- 1.0
>2970	PrimaryExpression	1.0
>2971	UnaryOperator	-
>2972	PrimaryExpression	0.0
>2973	PrimaryExpression	0.0
>2974	Identifier	minuz
>2975	PrimaryExpression	3
>2976	Identifier	minuz
>2977	IdentifierDeclType	double [ 3 ]
>2978	ExpressionStatement	 
>2979	CallExpression	matrix_product ( 4 , 4 , 4 , 1 , rigid_inv , lower_right , lower_right_world )
>2980	ArgumentList	4
>2981	Argument	lower_right_world
>2982	Identifier	lower_right_world
>2983	Argument	lower_right
>2984	Identifier	lower_right
>2985	Argument	rigid_inv
>2986	Identifier	rigid_inv
>2987	Argument	1
>2988	PrimaryExpression	1
>2989	Argument	4
>2990	PrimaryExpression	4
>2991	Argument	4
>2992	PrimaryExpression	4
>2993	Argument	4
>2994	PrimaryExpression	4
>2995	Callee	matrix_product
>2996	Identifier	matrix_product
>2997	ExpressionStatement	 
>2998	CallExpression	matrix_product ( 4 , 4 , 4 , 1 , rigid_inv , upper_right , upper_right_world )
>2999	ArgumentList	4
>3000	Argument	upper_right_world
>3001	Identifier	upper_right_world
>3002	Argument	upper_right
>3003	Identifier	upper_right
>3004	Argument	rigid_inv
>3005	Identifier	rigid_inv
>3006	Argument	1
>3007	PrimaryExpression	1
>3008	Argument	4
>3009	PrimaryExpression	4
>3010	Argument	4
>3011	PrimaryExpression	4
>3012	Argument	4
>3013	PrimaryExpression	4
>3014	Callee	matrix_product
>3015	Identifier	matrix_product
>3016	ExpressionStatement	 
>3017	CallExpression	matrix_product ( 4 , 4 , 4 , 1 , rigid_inv , lower_left , lower_left_world )
>3018	ArgumentList	4
>3019	Argument	lower_left_world
>3020	Identifier	lower_left_world
>3021	Argument	lower_left
>3022	Identifier	lower_left
>3023	Argument	rigid_inv
>3024	Identifier	rigid_inv
>3025	Argument	1
>3026	PrimaryExpression	1
>3027	Argument	4
>3028	PrimaryExpression	4
>3029	Argument	4
>3030	PrimaryExpression	4
>3031	Argument	4
>3032	PrimaryExpression	4
>3033	Callee	matrix_product
>3034	Identifier	matrix_product
>3035	ExpressionStatement	 
>3036	CallExpression	matrix_product ( 4 , 4 , 4 , 1 , rigid_inv , upper_left , upper_left_world )
>3037	ArgumentList	4
>3038	Argument	upper_left_world
>3039	Identifier	upper_left_world
>3040	Argument	upper_left
>3041	Identifier	upper_left
>3042	Argument	rigid_inv
>3043	Identifier	rigid_inv
>3044	Argument	1
>3045	PrimaryExpression	1
>3046	Argument	4
>3047	PrimaryExpression	4
>3048	Argument	4
>3049	PrimaryExpression	4
>3050	Argument	4
>3051	PrimaryExpression	4
>3052	Callee	matrix_product
>3053	Identifier	matrix_product
>3054	IdentifierDeclStatement	 
>3055	IdentifierDecl	lower_right_world [ 4 ]
>3056	PrimaryExpression	4
>3057	Identifier	lower_right_world
>3058	IdentifierDeclType	double [ 4 ]
>3059	IdentifierDecl	upper_right_world [ 4 ]
>3060	PrimaryExpression	4
>3061	Identifier	upper_right_world
>3062	IdentifierDeclType	double [ 4 ]
>3063	IdentifierDeclStatement	 
>3064	IdentifierDecl	lower_left_world [ 4 ]
>3065	PrimaryExpression	4
>3066	Identifier	lower_left_world
>3067	IdentifierDeclType	double [ 4 ]
>3068	IdentifierDecl	upper_left_world [ 4 ]
>3069	PrimaryExpression	4
>3070	Identifier	upper_left_world
>3071	IdentifierDeclType	double [ 4 ]
>3072	ExpressionStatement	 
>3073	CallExpression	matrix_invert ( 4 , rigid , rigid_inv )
>3074	ArgumentList	4
>3075	Argument	rigid_inv
>3076	Identifier	rigid_inv
>3077	Argument	rigid
>3078	Identifier	rigid
>3079	Argument	4
>3080	PrimaryExpression	4
>3081	Callee	matrix_invert
>3082	Identifier	matrix_invert
>3083	IdentifierDeclStatement	 
>3084	IdentifierDecl	rigid_inv [ 16 ]
>3085	PrimaryExpression	16
>3086	Identifier	rigid_inv
>3087	IdentifierDeclType	double [ 16 ]
>3088	ExpressionStatement	 
>3089	CallExpression	GetRigid4x4 ( rigid )
>3090	ArgumentList	rigid
>3091	Argument	rigid
>3092	Identifier	rigid
>3093	Callee	GetRigid4x4
>3094	Identifier	GetRigid4x4
>3095	IdentifierDeclStatement	 
>3096	IdentifierDecl	rigid [ 16 ]
>3097	PrimaryExpression	16
>3098	Identifier	rigid
>3099	IdentifierDeclType	double [ 16 ]
>3100	ExpressionStatement	 
>3101	CallExpression	matrix_scale ( 3 , 1 , lower_right , 1.0 / m_focal , lower_right )
>3102	ArgumentList	3
>3103	Argument	lower_right
>3104	Identifier	lower_right
>3105	Argument	1.0 / m_focal
>3106	MultiplicativeExpression	1.0 / m_focal
>3107	Identifier	m_focal
>3108	PrimaryExpression	1.0
>3109	Argument	lower_right
>3110	Identifier	lower_right
>3111	Argument	1
>3112	PrimaryExpression	1
>3113	Argument	3
>3114	PrimaryExpression	3
>3115	Callee	matrix_scale
>3116	Identifier	matrix_scale
>3117	ExpressionStatement	 
>3118	CallExpression	matrix_scale ( 3 , 1 , upper_right , 1.0 / m_focal , upper_right )
>3119	ArgumentList	3
>3120	Argument	upper_right
>3121	Identifier	upper_right
>3122	Argument	1.0 / m_focal
>3123	MultiplicativeExpression	1.0 / m_focal
>3124	Identifier	m_focal
>3125	PrimaryExpression	1.0
>3126	Argument	upper_right
>3127	Identifier	upper_right
>3128	Argument	1
>3129	PrimaryExpression	1
>3130	Argument	3
>3131	PrimaryExpression	3
>3132	Callee	matrix_scale
>3133	Identifier	matrix_scale
>3134	ExpressionStatement	 
>3135	CallExpression	matrix_scale ( 3 , 1 , lower_left , 1.0 / m_focal , lower_left )
>3136	ArgumentList	3
>3137	Argument	lower_left
>3138	Identifier	lower_left
>3139	Argument	1.0 / m_focal
>3140	MultiplicativeExpression	1.0 / m_focal
>3141	Identifier	m_focal
>3142	PrimaryExpression	1.0
>3143	Argument	lower_left
>3144	Identifier	lower_left
>3145	Argument	1
>3146	PrimaryExpression	1
>3147	Argument	3
>3148	PrimaryExpression	3
>3149	Callee	matrix_scale
>3150	Identifier	matrix_scale
>3151	ExpressionStatement	 
>3152	CallExpression	matrix_scale ( 3 , 1 , upper_left , 1.0 / m_focal , upper_left )
>3153	ArgumentList	3
>3154	Argument	upper_left
>3155	Identifier	upper_left
>3156	Argument	1.0 / m_focal
>3157	MultiplicativeExpression	1.0 / m_focal
>3158	Identifier	m_focal
>3159	PrimaryExpression	1.0
>3160	Argument	upper_left
>3161	Identifier	upper_left
>3162	Argument	1
>3163	PrimaryExpression	1
>3164	Argument	3
>3165	PrimaryExpression	3
>3166	Callee	matrix_scale
>3167	Identifier	matrix_scale
>3168	IdentifierDeclStatement	 
>3169	IdentifierDecl	lower_right [ 4 ] = { 0.5 * m_width , - 0.5 * m_height , - m_focal , 1.0 }
>3170	AssignmentExpr	lower_right [ 4 ] = { 0.5 * m_width , - 0.5 * m_height , - m_focal , 1.0 }
>3171	InitializerList	0.5 * m_width
>3172	PrimaryExpression	1.0
>3173	UnaryOp	- m_focal
>3174	Identifier	m_focal
>3175	UnaryOperator	-
>3176	MultiplicativeExpression	- 0.5 * m_height
>3177	Identifier	m_height
>3178	UnaryOp	- 0.5
>3179	PrimaryExpression	0.5
>3180	UnaryOperator	-
>3181	MultiplicativeExpression	0.5 * m_width
>3182	Identifier	m_width
>3183	PrimaryExpression	0.5
>3184	Identifier	lower_right
>3185	PrimaryExpression	4
>3186	Identifier	lower_right
>3187	IdentifierDeclType	double [ 4 ]
>3188	IdentifierDeclStatement	 
>3189	IdentifierDecl	upper_right [ 4 ] = { 0.5 * m_width , 0.5 * m_height , - m_focal , 1.0 }
>3190	AssignmentExpr	upper_right [ 4 ] = { 0.5 * m_width , 0.5 * m_height , - m_focal , 1.0 }
>3191	InitializerList	0.5 * m_width
>3192	PrimaryExpression	1.0
>3193	UnaryOp	- m_focal
>3194	Identifier	m_focal
>3195	UnaryOperator	-
>3196	MultiplicativeExpression	0.5 * m_height
>3197	Identifier	m_height
>3198	PrimaryExpression	0.5
>3199	MultiplicativeExpression	0.5 * m_width
>3200	Identifier	m_width
>3201	PrimaryExpression	0.5
>3202	Identifier	upper_right
>3203	PrimaryExpression	4
>3204	Identifier	upper_right
>3205	IdentifierDeclType	double [ 4 ]
>3206	IdentifierDeclStatement	 
>3207	IdentifierDecl	lower_left [ 4 ] = { - 0.5 * m_width , - 0.5 * m_height , - m_focal , 1.0 }
>3208	AssignmentExpr	lower_left [ 4 ] = { - 0.5 * m_width , - 0.5 * m_height , - m_focal , 1.0 }
>3209	InitializerList	- 0.5 * m_width
>3210	PrimaryExpression	1.0
>3211	UnaryOp	- m_focal
>3212	Identifier	m_focal
>3213	UnaryOperator	-
>3214	MultiplicativeExpression	- 0.5 * m_height
>3215	Identifier	m_height
>3216	UnaryOp	- 0.5
>3217	PrimaryExpression	0.5
>3218	UnaryOperator	-
>3219	MultiplicativeExpression	- 0.5 * m_width
>3220	Identifier	m_width
>3221	UnaryOp	- 0.5
>3222	PrimaryExpression	0.5
>3223	UnaryOperator	-
>3224	Identifier	lower_left
>3225	PrimaryExpression	4
>3226	Identifier	lower_left
>3227	IdentifierDeclType	double [ 4 ]
>3228	IdentifierDeclStatement	 
>3229	IdentifierDecl	upper_left [ 4 ] = { - 0.5 * m_width , 0.5 * m_height , - m_focal , 1.0 }
>3230	AssignmentExpr	upper_left [ 4 ] = { - 0.5 * m_width , 0.5 * m_height , - m_focal , 1.0 }
>3231	InitializerList	- 0.5 * m_width
>3232	PrimaryExpression	1.0
>3233	UnaryOp	- m_focal
>3234	Identifier	m_focal
>3235	UnaryOperator	-
>3236	MultiplicativeExpression	0.5 * m_height
>3237	Identifier	m_height
>3238	PrimaryExpression	0.5
>3239	MultiplicativeExpression	- 0.5 * m_width
>3240	Identifier	m_width
>3241	UnaryOp	- 0.5
>3242	PrimaryExpression	0.5
>3243	UnaryOperator	-
>3244	Identifier	upper_left
>3245	PrimaryExpression	4
>3246	Identifier	upper_left
>3247	IdentifierDeclType	double [ 4 ]
>3248	ExpressionStatement	 
>3249	CallExpression	GetPose ( R )
>3250	ArgumentList	R
>3251	Argument	R
>3252	Identifier	R
>3253	Callee	GetPose
>3254	Identifier	GetPose
>3255	IdentifierDeclStatement	 
>3256	IdentifierDecl	R [ 9 ]
>3257	PrimaryExpression	9
>3258	Identifier	R
>3259	IdentifierDeclType	double [ 9 ]
>3260	ExpressionStatement	 
>3261	CallExpression	GetPosition ( pos )
>3262	ArgumentList	pos
>3263	Argument	pos
>3264	Identifier	pos
>3265	Callee	GetPosition
>3266	Identifier	GetPosition
>3267	IdentifierDeclStatement	 
>3268	IdentifierDecl	pos [ 3 ]
>3269	PrimaryExpression	3
>3270	Identifier	pos
>3271	IdentifierDeclType	double [ 3 ]
>3348	FunctionDef	CameraInfo 
>3349	ParameterList	double * p
>3350	Parameter	 
>3351	Identifier	p
>3352	ParameterType	double *
>3353	ReturnType	bool
>3354	CompoundStatement	 
>3355	ReturnStatement	 
>3356	RelationalExpression	dot > 0.0
>3357	PrimaryExpression	0.0
>3358	Identifier	dot
>3359	ExpressionStatement	 
>3360	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , m_horizon , p3 , & dot )
>3361	ArgumentList	1
>3362	Argument	& dot
>3363	UnaryOp	& dot
>3364	Identifier	dot
>3365	UnaryOperator	&
>3366	Argument	p3
>3367	Identifier	p3
>3368	Argument	m_horizon
>3369	Identifier	m_horizon
>3370	Argument	1
>3371	PrimaryExpression	1
>3372	Argument	3
>3373	PrimaryExpression	3
>3374	Argument	3
>3375	PrimaryExpression	3
>3376	Argument	1
>3377	PrimaryExpression	1
>3378	Callee	matrix_product
>3379	Identifier	matrix_product
>3380	IdentifierDeclStatement	 
>3381	IdentifierDecl	dot
>3382	Identifier	dot
>3383	IdentifierDeclType	double
>3384	IdentifierDeclStatement	 
>3385	IdentifierDecl	p3 [ 3 ] = { p [ 0 ] , p [ 1 ] , 1.0 }
>3386	AssignmentExpr	p3 [ 3 ] = { p [ 0 ] , p [ 1 ] , 1.0 }
>3387	InitializerList	p [ 0 ]
>3388	PrimaryExpression	1.0
>3389	ArrayIndexing	p [ 1 ]
>3390	PrimaryExpression	1
>3391	Identifier	p
>3392	ArrayIndexing	p [ 0 ]
>3393	PrimaryExpression	0
>3394	Identifier	p
>3395	Identifier	p3
>3396	PrimaryExpression	3
>3397	Identifier	p3
>3398	IdentifierDeclType	double [ 3 ]
>3408	FunctionDef	CameraInfo 
>3409	ParameterList	double * p
>3410	Parameter	 
>3411	Identifier	p
>3412	ParameterType	double *
>3413	ReturnType	bool
>3414	CompoundStatement	 
>3415	ReturnStatement	 
>3416	RelationalExpression	p_rot [ 2 ] < 0.0
>3417	PrimaryExpression	0.0
>3418	ArrayIndexing	p_rot [ 2 ]
>3419	PrimaryExpression	2
>3420	Identifier	p_rot
>3421	ExpressionStatement	 
>3422	CallExpression	matrix_sum ( 3 , 1 , 3 , 1 , p_rot , m_t , p_rot )
>3423	ArgumentList	3
>3424	Argument	p_rot
>3425	Identifier	p_rot
>3426	Argument	m_t
>3427	Identifier	m_t
>3428	Argument	p_rot
>3429	Identifier	p_rot
>3430	Argument	1
>3431	PrimaryExpression	1
>3432	Argument	3
>3433	PrimaryExpression	3
>3434	Argument	1
>3435	PrimaryExpression	1
>3436	Argument	3
>3437	PrimaryExpression	3
>3438	Callee	matrix_sum
>3439	Identifier	matrix_sum
>3440	ExpressionStatement	 
>3441	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , m_R , p , p_rot )
>3442	ArgumentList	3
>3443	Argument	p_rot
>3444	Identifier	p_rot
>3445	Argument	p
>3446	Identifier	p
>3447	Argument	m_R
>3448	Identifier	m_R
>3449	Argument	1
>3450	PrimaryExpression	1
>3451	Argument	3
>3452	PrimaryExpression	3
>3453	Argument	3
>3454	PrimaryExpression	3
>3455	Argument	3
>3456	PrimaryExpression	3
>3457	Callee	matrix_product
>3458	Identifier	matrix_product
>3459	IdentifierDeclStatement	 
>3460	IdentifierDecl	p_rot [ 3 ]
>3461	PrimaryExpression	3
>3462	Identifier	p_rot
>3463	IdentifierDeclType	double [ 3 ]
>3472	FunctionDef	InterpolateCameras (const CameraInfo & cam1 , const CameraInfo & cam2 , double t)
>3473	ParameterList	const CameraInfo & cam1 , const CameraInfo & cam2 , double t
>3474	Parameter	 
>3475	Identifier	t
>3476	ParameterType	double
>3477	Parameter	 
>3478	Identifier	cam2
>3479	ParameterType	const CameraInfo &
>3480	Parameter	 
>3481	Identifier	cam1
>3482	ParameterType	const CameraInfo &
>3483	ReturnType	CameraInfo
>3484	CompoundStatement	 
>3485	ReturnStatement	 
>3486	Identifier	cam_new
>3487	ExpressionStatement	 
>3488	AssignmentExpr	cam_new . m_focal = 1.0
>3489	PrimaryExpression	1.0
>3490	MemberAccess	cam_new . m_focal
>3491	Identifier	m_focal
>3492	Identifier	cam_new
>3493	ExpressionStatement	 
>3494	CallExpression	matrix_scale ( 3 , 1 , cam_new . m_t , - 1.0 , cam_new . m_t )
>3495	ArgumentList	3
>3496	Argument	cam_new . m_t
>3497	MemberAccess	cam_new . m_t
>3498	Identifier	m_t
>3499	Identifier	cam_new
>3500	Argument	- 1.0
>3501	UnaryOp	- 1.0
>3502	PrimaryExpression	1.0
>3503	UnaryOperator	-
>3504	Argument	cam_new . m_t
>3505	MemberAccess	cam_new . m_t
>3506	Identifier	m_t
>3507	Identifier	cam_new
>3508	Argument	1
>3509	PrimaryExpression	1
>3510	Argument	3
>3511	PrimaryExpression	3
>3512	Callee	matrix_scale
>3513	Identifier	matrix_scale
>3514	ExpressionStatement	 
>3515	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cam_new . m_R , pos_new , cam_new . m_t )
>3516	ArgumentList	3
>3517	Argument	cam_new . m_t
>3518	MemberAccess	cam_new . m_t
>3519	Identifier	m_t
>3520	Identifier	cam_new
>3521	Argument	pos_new
>3522	Identifier	pos_new
>3523	Argument	cam_new . m_R
>3524	MemberAccess	cam_new . m_R
>3525	Identifier	m_R
>3526	Identifier	cam_new
>3527	Argument	1
>3528	PrimaryExpression	1
>3529	Argument	3
>3530	PrimaryExpression	3
>3531	Argument	3
>3532	PrimaryExpression	3
>3533	Argument	3
>3534	PrimaryExpression	3
>3535	Callee	matrix_product
>3536	Identifier	matrix_product
>3537	ExpressionStatement	 
>3538	CallExpression	matrix_transpose ( 3 , 3 , Rnew , cam_new . m_R )
>3539	ArgumentList	3
>3540	Argument	cam_new . m_R
>3541	MemberAccess	cam_new . m_R
>3542	Identifier	m_R
>3543	Identifier	cam_new
>3544	Argument	Rnew
>3545	Identifier	Rnew
>3546	Argument	3
>3547	PrimaryExpression	3
>3548	Argument	3
>3549	PrimaryExpression	3
>3550	Callee	matrix_transpose
>3551	Identifier	matrix_transpose
>3552	IdentifierDeclStatement	 
>3553	IdentifierDecl	cam_new
>3554	Identifier	cam_new
>3555	IdentifierDeclType	CameraInfo
>3556	ExpressionStatement	 
>3557	CallExpression	quaternion_to_matrix ( q_new , Rnew )
>3558	ArgumentList	q_new
>3559	Argument	Rnew
>3560	Identifier	Rnew
>3561	Argument	q_new
>3562	Identifier	q_new
>3563	Callee	quaternion_to_matrix
>3564	Identifier	quaternion_to_matrix
>3565	IdentifierDeclStatement	 
>3566	IdentifierDecl	Rnew [ 9 ]
>3567	PrimaryExpression	9
>3568	Identifier	Rnew
>3569	IdentifierDeclType	double [ 9 ]
>3570	ExpressionStatement	 
>3571	CallExpression	matrix_scale ( 4 , 1 , q_new , 1.0 / mag , q_new )
>3572	ArgumentList	4
>3573	Argument	q_new
>3574	Identifier	q_new
>3575	Argument	1.0 / mag
>3576	MultiplicativeExpression	1.0 / mag
>3577	Identifier	mag
>3578	PrimaryExpression	1.0
>3579	Argument	q_new
>3580	Identifier	q_new
>3581	Argument	1
>3582	PrimaryExpression	1
>3583	Argument	4
>3584	PrimaryExpression	4
>3585	Callee	matrix_scale
>3586	Identifier	matrix_scale
>3587	IdentifierDeclStatement	 
>3588	IdentifierDecl	mag = matrix_norm ( 4 , 1 , q_new )
>3589	AssignmentExpr	mag = matrix_norm ( 4 , 1 , q_new )
>3590	CallExpression	matrix_norm ( 4 , 1 , q_new )
>3591	ArgumentList	4
>3592	Argument	q_new
>3593	Identifier	q_new
>3594	Argument	1
>3595	PrimaryExpression	1
>3596	Argument	4
>3597	PrimaryExpression	4
>3598	Callee	matrix_norm
>3599	Identifier	matrix_norm
>3600	Identifier	mag
>3601	Identifier	mag
>3602	IdentifierDeclType	double
>3603	ExpressionStatement	 
>3604	AssignmentExpr	q_new [ 3 ] = ( 1.0 - t ) * q1 [ 3 ] + t * q2 [ 3 ]
>3605	AdditiveExpression	( 1.0 - t ) * q1 [ 3 ] + t * q2 [ 3 ]
>3606	MultiplicativeExpression	t * q2 [ 3 ]
>3607	ArrayIndexing	q2 [ 3 ]
>3608	PrimaryExpression	3
>3609	Identifier	q2
>3610	Identifier	t
>3611	MultiplicativeExpression	( 1.0 - t ) * q1 [ 3 ]
>3612	ArrayIndexing	q1 [ 3 ]
>3613	PrimaryExpression	3
>3614	Identifier	q1
>3615	AdditiveExpression	1.0 - t
>3616	Identifier	t
>3617	PrimaryExpression	1.0
>3618	ArrayIndexing	q_new [ 3 ]
>3619	PrimaryExpression	3
>3620	Identifier	q_new
>3621	ExpressionStatement	 
>3622	AssignmentExpr	q_new [ 2 ] = ( 1.0 - t ) * q1 [ 2 ] + t * q2 [ 2 ]
>3623	AdditiveExpression	( 1.0 - t ) * q1 [ 2 ] + t * q2 [ 2 ]
>3624	MultiplicativeExpression	t * q2 [ 2 ]
>3625	ArrayIndexing	q2 [ 2 ]
>3626	PrimaryExpression	2
>3627	Identifier	q2
>3628	Identifier	t
>3629	MultiplicativeExpression	( 1.0 - t ) * q1 [ 2 ]
>3630	ArrayIndexing	q1 [ 2 ]
>3631	PrimaryExpression	2
>3632	Identifier	q1
>3633	AdditiveExpression	1.0 - t
>3634	Identifier	t
>3635	PrimaryExpression	1.0
>3636	ArrayIndexing	q_new [ 2 ]
>3637	PrimaryExpression	2
>3638	Identifier	q_new
>3639	ExpressionStatement	 
>3640	AssignmentExpr	q_new [ 1 ] = ( 1.0 - t ) * q1 [ 1 ] + t * q2 [ 1 ]
>3641	AdditiveExpression	( 1.0 - t ) * q1 [ 1 ] + t * q2 [ 1 ]
>3642	MultiplicativeExpression	t * q2 [ 1 ]
>3643	ArrayIndexing	q2 [ 1 ]
>3644	PrimaryExpression	1
>3645	Identifier	q2
>3646	Identifier	t
>3647	MultiplicativeExpression	( 1.0 - t ) * q1 [ 1 ]
>3648	ArrayIndexing	q1 [ 1 ]
>3649	PrimaryExpression	1
>3650	Identifier	q1
>3651	AdditiveExpression	1.0 - t
>3652	Identifier	t
>3653	PrimaryExpression	1.0
>3654	ArrayIndexing	q_new [ 1 ]
>3655	PrimaryExpression	1
>3656	Identifier	q_new
>3657	ExpressionStatement	 
>3658	AssignmentExpr	q_new [ 0 ] = ( 1.0 - t ) * q1 [ 0 ] + t * q2 [ 0 ]
>3659	AdditiveExpression	( 1.0 - t ) * q1 [ 0 ] + t * q2 [ 0 ]
>3660	MultiplicativeExpression	t * q2 [ 0 ]
>3661	ArrayIndexing	q2 [ 0 ]
>3662	PrimaryExpression	0
>3663	Identifier	q2
>3664	Identifier	t
>3665	MultiplicativeExpression	( 1.0 - t ) * q1 [ 0 ]
>3666	ArrayIndexing	q1 [ 0 ]
>3667	PrimaryExpression	0
>3668	Identifier	q1
>3669	AdditiveExpression	1.0 - t
>3670	Identifier	t
>3671	PrimaryExpression	1.0
>3672	ArrayIndexing	q_new [ 0 ]
>3673	PrimaryExpression	0
>3674	Identifier	q_new
>3675	IdentifierDeclStatement	 
>3676	IdentifierDecl	q_new [ 4 ]
>3677	PrimaryExpression	4
>3678	Identifier	q_new
>3679	IdentifierDeclType	double [ 4 ]
>3680	IfStatement	if ( dot < 0.0 )
>3681	CompoundStatement	 
>3682	ExpressionStatement	 
>3683	CallExpression	matrix_scale ( 4 , 1 , q2 , - 1.0 , q2 )
>3684	ArgumentList	4
>3685	Argument	q2
>3686	Identifier	q2
>3687	Argument	- 1.0
>3688	UnaryOp	- 1.0
>3689	PrimaryExpression	1.0
>3690	UnaryOperator	-
>3691	Argument	q2
>3692	Identifier	q2
>3693	Argument	1
>3694	PrimaryExpression	1
>3695	Argument	4
>3696	PrimaryExpression	4
>3697	Callee	matrix_scale
>3698	Identifier	matrix_scale
>3699	Condition	 
>3700	RelationalExpression	dot < 0.0
>3701	PrimaryExpression	0.0
>3702	Identifier	dot
>3703	ExpressionStatement	 
>3704	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , q1 , q2 , & dot )
>3705	ArgumentList	1
>3706	Argument	& dot
>3707	UnaryOp	& dot
>3708	Identifier	dot
>3709	UnaryOperator	&
>3710	Argument	q2
>3711	Identifier	q2
>3712	Argument	q1
>3713	Identifier	q1
>3714	Argument	1
>3715	PrimaryExpression	1
>3716	Argument	3
>3717	PrimaryExpression	3
>3718	Argument	3
>3719	PrimaryExpression	3
>3720	Argument	1
>3721	PrimaryExpression	1
>3722	Callee	matrix_product
>3723	Identifier	matrix_product
>3724	IdentifierDeclStatement	 
>3725	IdentifierDecl	dot
>3726	Identifier	dot
>3727	IdentifierDeclType	double
>3728	ExpressionStatement	 
>3729	CallExpression	matrix_to_quaternion ( R2 , q2 )
>3730	ArgumentList	R2
>3731	Argument	q2
>3732	Identifier	q2
>3733	Argument	R2
>3734	Identifier	R2
>3735	Callee	matrix_to_quaternion
>3736	Identifier	matrix_to_quaternion
>3737	ExpressionStatement	 
>3738	CallExpression	matrix_to_quaternion ( R1 , q1 )
>3739	ArgumentList	R1
>3740	Argument	q1
>3741	Identifier	q1
>3742	Argument	R1
>3743	Identifier	R1
>3744	Callee	matrix_to_quaternion
>3745	Identifier	matrix_to_quaternion
>3746	IdentifierDeclStatement	 
>3747	IdentifierDecl	q2 [ 4 ]
>3748	PrimaryExpression	4
>3749	Identifier	q2
>3750	IdentifierDeclType	double [ 4 ]
>3751	IdentifierDecl	q1 [ 4 ]
>3752	PrimaryExpression	4
>3753	Identifier	q1
>3754	IdentifierDeclType	double [ 4 ]
>3755	ExpressionStatement	 
>3756	CallExpression	cam2 . GetPose ( R2 )
>3757	ArgumentList	R2
>3758	Argument	R2
>3759	Identifier	R2
>3760	Callee	cam2 . GetPose
>3761	MemberAccess	cam2 . GetPose
>3762	Identifier	GetPose
>3763	Identifier	cam2
>3764	ExpressionStatement	 
>3765	CallExpression	cam1 . GetPose ( R1 )
>3766	ArgumentList	R1
>3767	Argument	R1
>3768	Identifier	R1
>3769	Callee	cam1 . GetPose
>3770	MemberAccess	cam1 . GetPose
>3771	Identifier	GetPose
>3772	Identifier	cam1
>3773	IdentifierDeclStatement	 
>3774	IdentifierDecl	R2 [ 9 ]
>3775	PrimaryExpression	9
>3776	Identifier	R2
>3777	IdentifierDeclType	double [ 9 ]
>3778	IdentifierDecl	R1 [ 9 ]
>3779	PrimaryExpression	9
>3780	Identifier	R1
>3781	IdentifierDeclType	double [ 9 ]
>3782	ExpressionStatement	 
>3783	AssignmentExpr	pos_new [ 2 ] = ( 1.0 - t ) * pos1 [ 2 ] + t * pos2 [ 2 ]
>3784	AdditiveExpression	( 1.0 - t ) * pos1 [ 2 ] + t * pos2 [ 2 ]
>3785	MultiplicativeExpression	t * pos2 [ 2 ]
>3786	ArrayIndexing	pos2 [ 2 ]
>3787	PrimaryExpression	2
>3788	Identifier	pos2
>3789	Identifier	t
>3790	MultiplicativeExpression	( 1.0 - t ) * pos1 [ 2 ]
>3791	ArrayIndexing	pos1 [ 2 ]
>3792	PrimaryExpression	2
>3793	Identifier	pos1
>3794	AdditiveExpression	1.0 - t
>3795	Identifier	t
>3796	PrimaryExpression	1.0
>3797	ArrayIndexing	pos_new [ 2 ]
>3798	PrimaryExpression	2
>3799	Identifier	pos_new
>3800	ExpressionStatement	 
>3801	AssignmentExpr	pos_new [ 1 ] = ( 1.0 - t ) * pos1 [ 1 ] + t * pos2 [ 1 ]
>3802	AdditiveExpression	( 1.0 - t ) * pos1 [ 1 ] + t * pos2 [ 1 ]
>3803	MultiplicativeExpression	t * pos2 [ 1 ]
>3804	ArrayIndexing	pos2 [ 1 ]
>3805	PrimaryExpression	1
>3806	Identifier	pos2
>3807	Identifier	t
>3808	MultiplicativeExpression	( 1.0 - t ) * pos1 [ 1 ]
>3809	ArrayIndexing	pos1 [ 1 ]
>3810	PrimaryExpression	1
>3811	Identifier	pos1
>3812	AdditiveExpression	1.0 - t
>3813	Identifier	t
>3814	PrimaryExpression	1.0
>3815	ArrayIndexing	pos_new [ 1 ]
>3816	PrimaryExpression	1
>3817	Identifier	pos_new
>3818	ExpressionStatement	 
>3819	AssignmentExpr	pos_new [ 0 ] = ( 1.0 - t ) * pos1 [ 0 ] + t * pos2 [ 0 ]
>3820	AdditiveExpression	( 1.0 - t ) * pos1 [ 0 ] + t * pos2 [ 0 ]
>3821	MultiplicativeExpression	t * pos2 [ 0 ]
>3822	ArrayIndexing	pos2 [ 0 ]
>3823	PrimaryExpression	0
>3824	Identifier	pos2
>3825	Identifier	t
>3826	MultiplicativeExpression	( 1.0 - t ) * pos1 [ 0 ]
>3827	ArrayIndexing	pos1 [ 0 ]
>3828	PrimaryExpression	0
>3829	Identifier	pos1
>3830	AdditiveExpression	1.0 - t
>3831	Identifier	t
>3832	PrimaryExpression	1.0
>3833	ArrayIndexing	pos_new [ 0 ]
>3834	PrimaryExpression	0
>3835	Identifier	pos_new
>3836	IdentifierDeclStatement	 
>3837	IdentifierDecl	pos_new [ 3 ]
>3838	PrimaryExpression	3
>3839	Identifier	pos_new
>3840	IdentifierDeclType	double [ 3 ]
>3841	ExpressionStatement	 
>3842	CallExpression	cam2 . GetPosition ( pos2 )
>3843	ArgumentList	pos2
>3844	Argument	pos2
>3845	Identifier	pos2
>3846	Callee	cam2 . GetPosition
>3847	MemberAccess	cam2 . GetPosition
>3848	Identifier	GetPosition
>3849	Identifier	cam2
>3850	ExpressionStatement	 
>3851	CallExpression	cam1 . GetPosition ( pos1 )
>3852	ArgumentList	pos1
>3853	Argument	pos1
>3854	Identifier	pos1
>3855	Callee	cam1 . GetPosition
>3856	MemberAccess	cam1 . GetPosition
>3857	Identifier	GetPosition
>3858	Identifier	cam1
>3859	IdentifierDeclStatement	 
>3860	IdentifierDecl	pos2 [ 3 ]
>3861	PrimaryExpression	3
>3862	Identifier	pos2
>3863	IdentifierDeclType	double [ 3 ]
>3864	IdentifierDecl	pos1 [ 3 ]
>3865	PrimaryExpression	3
>3866	Identifier	pos1
>3867	IdentifierDeclType	double [ 3 ]
>3897	FunctionDef	InterpolateCamerasThetaPhi (const CameraInfo & cam1 , const CameraInfo & cam2 , double t , bool interp_fov)
>3898	ParameterList	const CameraInfo & cam1 , const CameraInfo & cam2 , double t , bool interp_fov
>3899	Parameter	 
>3900	Identifier	interp_fov
>3901	ParameterType	bool
>3902	Parameter	 
>3903	Identifier	t
>3904	ParameterType	double
>3905	Parameter	 
>3906	Identifier	cam2
>3907	ParameterType	const CameraInfo &
>3908	Parameter	 
>3909	Identifier	cam1
>3910	ParameterType	const CameraInfo &
>3911	ReturnType	CameraInfo
>3912	CompoundStatement	 
>3913	ReturnStatement	 
>3914	Identifier	cam_new
>3915	IfStatement	if ( ! interp_fov )
>3916	ElseStatement	else
>3917	CompoundStatement	 
>3918	ExpressionStatement	 
>3919	CallExpression	cam_new . SetFOV ( RAD2DEG ( fov ) )
>3920	ArgumentList	RAD2DEG ( fov )
>3921	Argument	RAD2DEG ( fov )
>3922	CallExpression	RAD2DEG ( fov )
>3923	ArgumentList	fov
>3924	Argument	fov
>3925	Identifier	fov
>3926	Callee	RAD2DEG
>3927	Identifier	RAD2DEG
>3928	Callee	cam_new . SetFOV
>3929	MemberAccess	cam_new . SetFOV
>3930	Identifier	SetFOV
>3931	Identifier	cam_new
>3932	IdentifierDeclStatement	 
>3933	IdentifierDecl	fov = ( 1.0 - t ) * cam1 . GetFOV ( ) + t * cam2 . GetFOV ( )
>3934	AssignmentExpr	fov = ( 1.0 - t ) * cam1 . GetFOV ( ) + t * cam2 . GetFOV ( )
>3935	AdditiveExpression	( 1.0 - t ) * cam1 . GetFOV ( ) + t * cam2 . GetFOV ( )
>3936	MultiplicativeExpression	t * cam2 . GetFOV ( )
>3937	CallExpression	cam2 . GetFOV ( )
>3938	ArgumentList	 
>3939	Callee	cam2 . GetFOV
>3940	MemberAccess	cam2 . GetFOV
>3941	Identifier	GetFOV
>3942	Identifier	cam2
>3943	Identifier	t
>3944	MultiplicativeExpression	( 1.0 - t ) * cam1 . GetFOV ( )
>3945	CallExpression	cam1 . GetFOV ( )
>3946	ArgumentList	 
>3947	Callee	cam1 . GetFOV
>3948	MemberAccess	cam1 . GetFOV
>3949	Identifier	GetFOV
>3950	Identifier	cam1
>3951	AdditiveExpression	1.0 - t
>3952	Identifier	t
>3953	PrimaryExpression	1.0
>3954	Identifier	fov
>3955	Identifier	fov
>3956	IdentifierDeclType	double
>3957	ExpressionStatement	 
>3958	AssignmentExpr	cam_new . m_height = cam1 . m_height
>3959	MemberAccess	cam1 . m_height
>3960	Identifier	m_height
>3961	Identifier	cam1
>3962	MemberAccess	cam_new . m_height
>3963	Identifier	m_height
>3964	Identifier	cam_new
>3965	ExpressionStatement	 
>3966	AssignmentExpr	cam_new . m_width = cam1 . m_width
>3967	MemberAccess	cam1 . m_width
>3968	Identifier	m_width
>3969	Identifier	cam1
>3970	MemberAccess	cam_new . m_width
>3971	Identifier	m_width
>3972	Identifier	cam_new
>3973	CompoundStatement	 
>3974	ExpressionStatement	 
>3975	CallExpression	cam_new . SetFOV ( 70.0 )
>3976	ArgumentList	70.0
>3977	Argument	70.0
>3978	PrimaryExpression	70.0
>3979	Callee	cam_new . SetFOV
>3980	MemberAccess	cam_new . SetFOV
>3981	Identifier	SetFOV
>3982	Identifier	cam_new
>3983	ExpressionStatement	 
>3984	AssignmentExpr	cam_new . m_height = 768
>3985	PrimaryExpression	768
>3986	MemberAccess	cam_new . m_height
>3987	Identifier	m_height
>3988	Identifier	cam_new
>3989	ExpressionStatement	 
>3990	AssignmentExpr	cam_new . m_width = 1024
>3991	PrimaryExpression	1024
>3992	MemberAccess	cam_new . m_width
>3993	Identifier	m_width
>3994	Identifier	cam_new
>3995	Condition	 
>3996	UnaryOp	! interp_fov
>3997	Identifier	interp_fov
>3998	UnaryOperator	!
>3999	ExpressionStatement	 
>4000	CallExpression	matrix_scale ( 3 , 1 , cam_new . m_t , - 1.0 , cam_new . m_t )
>4001	ArgumentList	3
>4002	Argument	cam_new . m_t
>4003	MemberAccess	cam_new . m_t
>4004	Identifier	m_t
>4005	Identifier	cam_new
>4006	Argument	- 1.0
>4007	UnaryOp	- 1.0
>4008	PrimaryExpression	1.0
>4009	UnaryOperator	-
>4010	Argument	cam_new . m_t
>4011	MemberAccess	cam_new . m_t
>4012	Identifier	m_t
>4013	Identifier	cam_new
>4014	Argument	1
>4015	PrimaryExpression	1
>4016	Argument	3
>4017	PrimaryExpression	3
>4018	Callee	matrix_scale
>4019	Identifier	matrix_scale
>4020	ExpressionStatement	 
>4021	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cam_new . m_R , pos_new , cam_new . m_t )
>4022	ArgumentList	3
>4023	Argument	cam_new . m_t
>4024	MemberAccess	cam_new . m_t
>4025	Identifier	m_t
>4026	Identifier	cam_new
>4027	Argument	pos_new
>4028	Identifier	pos_new
>4029	Argument	cam_new . m_R
>4030	MemberAccess	cam_new . m_R
>4031	Identifier	m_R
>4032	Identifier	cam_new
>4033	Argument	1
>4034	PrimaryExpression	1
>4035	Argument	3
>4036	PrimaryExpression	3
>4037	Argument	3
>4038	PrimaryExpression	3
>4039	Argument	3
>4040	PrimaryExpression	3
>4041	Callee	matrix_product
>4042	Identifier	matrix_product
>4043	ExpressionStatement	 
>4044	CallExpression	memcpy ( cam_new . m_R , Rnew , 9 * sizeof ( double ) )
>4045	ArgumentList	cam_new . m_R
>4046	Argument	9 * sizeof ( double )
>4047	MultiplicativeExpression	9 * sizeof ( double )
>4048	SizeofExpr	sizeof ( double )
>4049	SizeofOperand	double
>4050	Sizeof	sizeof
>4051	PrimaryExpression	9
>4052	Argument	Rnew
>4053	Identifier	Rnew
>4054	Argument	cam_new . m_R
>4055	MemberAccess	cam_new . m_R
>4056	Identifier	m_R
>4057	Identifier	cam_new
>4058	Callee	memcpy
>4059	Identifier	memcpy
>4060	IdentifierDeclStatement	 
>4061	IdentifierDecl	cam_new
>4062	Identifier	cam_new
>4063	IdentifierDeclType	CameraInfo
>4064	ExpressionStatement	 
>4065	CallExpression	memcpy ( Rnew + 6 , vt , 3 * sizeof ( double ) )
>4066	ArgumentList	Rnew + 6
>4067	Argument	3 * sizeof ( double )
>4068	MultiplicativeExpression	3 * sizeof ( double )
>4069	SizeofExpr	sizeof ( double )
>4070	SizeofOperand	double
>4071	Sizeof	sizeof
>4072	PrimaryExpression	3
>4073	Argument	vt
>4074	Identifier	vt
>4075	Argument	Rnew + 6
>4076	AdditiveExpression	Rnew + 6
>4077	PrimaryExpression	6
>4078	Identifier	Rnew
>4079	Callee	memcpy
>4080	Identifier	memcpy
>4081	ExpressionStatement	 
>4082	CallExpression	memcpy ( Rnew + 3 , up , 3 * sizeof ( double ) )
>4083	ArgumentList	Rnew + 3
>4084	Argument	3 * sizeof ( double )
>4085	MultiplicativeExpression	3 * sizeof ( double )
>4086	SizeofExpr	sizeof ( double )
>4087	SizeofOperand	double
>4088	Sizeof	sizeof
>4089	PrimaryExpression	3
>4090	Argument	up
>4091	Identifier	up
>4092	Argument	Rnew + 3
>4093	AdditiveExpression	Rnew + 3
>4094	PrimaryExpression	3
>4095	Identifier	Rnew
>4096	Callee	memcpy
>4097	Identifier	memcpy
>4098	ExpressionStatement	 
>4099	CallExpression	memcpy ( Rnew + 0 , xaxis , 3 * sizeof ( double ) )
>4100	ArgumentList	Rnew + 0
>4101	Argument	3 * sizeof ( double )
>4102	MultiplicativeExpression	3 * sizeof ( double )
>4103	SizeofExpr	sizeof ( double )
>4104	SizeofOperand	double
>4105	Sizeof	sizeof
>4106	PrimaryExpression	3
>4107	Argument	xaxis
>4108	Identifier	xaxis
>4109	Argument	Rnew + 0
>4110	AdditiveExpression	Rnew + 0
>4111	PrimaryExpression	0
>4112	Identifier	Rnew
>4113	Callee	memcpy
>4114	Identifier	memcpy
>4115	IdentifierDeclStatement	 
>4116	IdentifierDecl	Rnew [ 9 ]
>4117	PrimaryExpression	9
>4118	Identifier	Rnew
>4119	IdentifierDeclType	double [ 9 ]
>4120	ExpressionStatement	 
>4121	CallExpression	matrix_cross ( up , vt , xaxis )
>4122	ArgumentList	up
>4123	Argument	xaxis
>4124	Identifier	xaxis
>4125	Argument	vt
>4126	Identifier	vt
>4127	Argument	up
>4128	Identifier	up
>4129	Callee	matrix_cross
>4130	Identifier	matrix_cross
>4131	IdentifierDeclStatement	 
>4132	IdentifierDecl	xaxis [ 3 ]
>4133	PrimaryExpression	3
>4134	Identifier	xaxis
>4135	IdentifierDeclType	double [ 3 ]
>4136	ExpressionStatement	 
>4137	CallExpression	matrix_scale ( 3 , 1 , up , 1.0 / norm , up )
>4138	ArgumentList	3
>4139	Argument	up
>4140	Identifier	up
>4141	Argument	1.0 / norm
>4142	MultiplicativeExpression	1.0 / norm
>4143	Identifier	norm
>4144	PrimaryExpression	1.0
>4145	Argument	up
>4146	Identifier	up
>4147	Argument	1
>4148	PrimaryExpression	1
>4149	Argument	3
>4150	PrimaryExpression	3
>4151	Callee	matrix_scale
>4152	Identifier	matrix_scale
>4153	IdentifierDeclStatement	 
>4154	IdentifierDecl	norm = matrix_norm ( 3 , 1 , up )
>4155	AssignmentExpr	norm = matrix_norm ( 3 , 1 , up )
>4156	CallExpression	matrix_norm ( 3 , 1 , up )
>4157	ArgumentList	3
>4158	Argument	up
>4159	Identifier	up
>4160	Argument	1
>4161	PrimaryExpression	1
>4162	Argument	3
>4163	PrimaryExpression	3
>4164	Callee	matrix_norm
>4165	Identifier	matrix_norm
>4166	Identifier	norm
>4167	Identifier	norm
>4168	IdentifierDeclType	double
>4169	IdentifierDeclStatement	 
>4170	IdentifierDecl	up [ 3 ] = { 0.0 - dot * vt [ 0 ] , 1.0 - dot * vt [ 1 ] , 0.0 - dot * vt [ 2 ] }
>4171	AssignmentExpr	up [ 3 ] = { 0.0 - dot * vt [ 0 ] , 1.0 - dot * vt [ 1 ] , 0.0 - dot * vt [ 2 ] }
>4172	InitializerList	0.0 - dot * vt [ 0 ]
>4173	AdditiveExpression	0.0 - dot * vt [ 2 ]
>4174	MultiplicativeExpression	dot * vt [ 2 ]
>4175	ArrayIndexing	vt [ 2 ]
>4176	PrimaryExpression	2
>4177	Identifier	vt
>4178	Identifier	dot
>4179	PrimaryExpression	0.0
>4180	AdditiveExpression	1.0 - dot * vt [ 1 ]
>4181	MultiplicativeExpression	dot * vt [ 1 ]
>4182	ArrayIndexing	vt [ 1 ]
>4183	PrimaryExpression	1
>4184	Identifier	vt
>4185	Identifier	dot
>4186	PrimaryExpression	1.0
>4187	AdditiveExpression	0.0 - dot * vt [ 0 ]
>4188	MultiplicativeExpression	dot * vt [ 0 ]
>4189	ArrayIndexing	vt [ 0 ]
>4190	PrimaryExpression	0
>4191	Identifier	vt
>4192	Identifier	dot
>4193	PrimaryExpression	0.0
>4194	Identifier	up
>4195	PrimaryExpression	3
>4196	Identifier	up
>4197	IdentifierDeclType	double [ 3 ]
>4198	IdentifierDeclStatement	 
>4199	IdentifierDecl	dot = vt [ 1 ]
>4200	AssignmentExpr	dot = vt [ 1 ]
>4201	ArrayIndexing	vt [ 1 ]
>4202	PrimaryExpression	1
>4203	Identifier	vt
>4204	Identifier	dot
>4205	Identifier	dot
>4206	IdentifierDeclType	double
>4207	ExpressionStatement	 
>4208	CallExpression	matrix_scale ( 3 , 1 , vt , - 1.0 , vt )
>4209	ArgumentList	3
>4210	Argument	vt
>4211	Identifier	vt
>4212	Argument	- 1.0
>4213	UnaryOp	- 1.0
>4214	PrimaryExpression	1.0
>4215	UnaryOperator	-
>4216	Argument	vt
>4217	Identifier	vt
>4218	Argument	1
>4219	PrimaryExpression	1
>4220	Argument	3
>4221	PrimaryExpression	3
>4222	Callee	matrix_scale
>4223	Identifier	matrix_scale
>4224	ExpressionStatement	 
>4225	CallExpression	slerp ( v1 , v2 , t , vt )
>4226	ArgumentList	v1
>4227	Argument	vt
>4228	Identifier	vt
>4229	Argument	t
>4230	Identifier	t
>4231	Argument	v2
>4232	Identifier	v2
>4233	Argument	v1
>4234	Identifier	v1
>4235	Callee	slerp
>4236	Identifier	slerp
>4237	IdentifierDeclStatement	 
>4238	IdentifierDecl	vt [ 3 ]
>4239	PrimaryExpression	3
>4240	Identifier	vt
>4241	IdentifierDeclType	double [ 3 ]
>4242	ExpressionStatement	 
>4243	CallExpression	cam2 . GetViewDirection ( v2 )
>4244	ArgumentList	v2
>4245	Argument	v2
>4246	Identifier	v2
>4247	Callee	cam2 . GetViewDirection
>4248	MemberAccess	cam2 . GetViewDirection
>4249	Identifier	GetViewDirection
>4250	Identifier	cam2
>4251	ExpressionStatement	 
>4252	CallExpression	cam1 . GetViewDirection ( v1 )
>4253	ArgumentList	v1
>4254	Argument	v1
>4255	Identifier	v1
>4256	Callee	cam1 . GetViewDirection
>4257	MemberAccess	cam1 . GetViewDirection
>4258	Identifier	GetViewDirection
>4259	Identifier	cam1
>4260	IdentifierDeclStatement	 
>4261	IdentifierDecl	v2 [ 3 ]
>4262	PrimaryExpression	3
>4263	Identifier	v2
>4264	IdentifierDeclType	double [ 3 ]
>4265	IdentifierDecl	v1 [ 3 ]
>4266	PrimaryExpression	3
>4267	Identifier	v1
>4268	IdentifierDeclType	double [ 3 ]
>4269	ExpressionStatement	 
>4270	AssignmentExpr	pos_new [ 2 ] = ( 1.0 - t ) * pos1 [ 2 ] + t * pos2 [ 2 ]
>4271	AdditiveExpression	( 1.0 - t ) * pos1 [ 2 ] + t * pos2 [ 2 ]
>4272	MultiplicativeExpression	t * pos2 [ 2 ]
>4273	ArrayIndexing	pos2 [ 2 ]
>4274	PrimaryExpression	2
>4275	Identifier	pos2
>4276	Identifier	t
>4277	MultiplicativeExpression	( 1.0 - t ) * pos1 [ 2 ]
>4278	ArrayIndexing	pos1 [ 2 ]
>4279	PrimaryExpression	2
>4280	Identifier	pos1
>4281	AdditiveExpression	1.0 - t
>4282	Identifier	t
>4283	PrimaryExpression	1.0
>4284	ArrayIndexing	pos_new [ 2 ]
>4285	PrimaryExpression	2
>4286	Identifier	pos_new
>4287	ExpressionStatement	 
>4288	AssignmentExpr	pos_new [ 1 ] = ( 1.0 - t ) * pos1 [ 1 ] + t * pos2 [ 1 ]
>4289	AdditiveExpression	( 1.0 - t ) * pos1 [ 1 ] + t * pos2 [ 1 ]
>4290	MultiplicativeExpression	t * pos2 [ 1 ]
>4291	ArrayIndexing	pos2 [ 1 ]
>4292	PrimaryExpression	1
>4293	Identifier	pos2
>4294	Identifier	t
>4295	MultiplicativeExpression	( 1.0 - t ) * pos1 [ 1 ]
>4296	ArrayIndexing	pos1 [ 1 ]
>4297	PrimaryExpression	1
>4298	Identifier	pos1
>4299	AdditiveExpression	1.0 - t
>4300	Identifier	t
>4301	PrimaryExpression	1.0
>4302	ArrayIndexing	pos_new [ 1 ]
>4303	PrimaryExpression	1
>4304	Identifier	pos_new
>4305	ExpressionStatement	 
>4306	AssignmentExpr	pos_new [ 0 ] = ( 1.0 - t ) * pos1 [ 0 ] + t * pos2 [ 0 ]
>4307	AdditiveExpression	( 1.0 - t ) * pos1 [ 0 ] + t * pos2 [ 0 ]
>4308	MultiplicativeExpression	t * pos2 [ 0 ]
>4309	ArrayIndexing	pos2 [ 0 ]
>4310	PrimaryExpression	0
>4311	Identifier	pos2
>4312	Identifier	t
>4313	MultiplicativeExpression	( 1.0 - t ) * pos1 [ 0 ]
>4314	ArrayIndexing	pos1 [ 0 ]
>4315	PrimaryExpression	0
>4316	Identifier	pos1
>4317	AdditiveExpression	1.0 - t
>4318	Identifier	t
>4319	PrimaryExpression	1.0
>4320	ArrayIndexing	pos_new [ 0 ]
>4321	PrimaryExpression	0
>4322	Identifier	pos_new
>4323	IdentifierDeclStatement	 
>4324	IdentifierDecl	pos_new [ 3 ]
>4325	PrimaryExpression	3
>4326	Identifier	pos_new
>4327	IdentifierDeclType	double [ 3 ]
>4328	ExpressionStatement	 
>4329	CallExpression	cam2 . GetPosition ( pos2 )
>4330	ArgumentList	pos2
>4331	Argument	pos2
>4332	Identifier	pos2
>4333	Callee	cam2 . GetPosition
>4334	MemberAccess	cam2 . GetPosition
>4335	Identifier	GetPosition
>4336	Identifier	cam2
>4337	ExpressionStatement	 
>4338	CallExpression	cam1 . GetPosition ( pos1 )
>4339	ArgumentList	pos1
>4340	Argument	pos1
>4341	Identifier	pos1
>4342	Callee	cam1 . GetPosition
>4343	MemberAccess	cam1 . GetPosition
>4344	Identifier	GetPosition
>4345	Identifier	cam1
>4346	IdentifierDeclStatement	 
>4347	IdentifierDecl	pos2 [ 3 ]
>4348	PrimaryExpression	3
>4349	Identifier	pos2
>4350	IdentifierDeclType	double [ 3 ]
>4351	IdentifierDecl	pos1 [ 3 ]
>4352	PrimaryExpression	3
>4353	Identifier	pos1
>4354	IdentifierDeclType	double [ 3 ]
>4389	FunctionDef	CameraInfo 
>4390	ParameterList	const CameraInfo & cam
>4391	Parameter	 
>4392	Identifier	cam
>4393	ParameterType	const CameraInfo &
>4394	ReturnType	Bezier
>4395	CompoundStatement	 
>4396	ReturnStatement	 
>4397	CallExpression	Bezier ( pos1 , mid1 , mid2 , pos2 )
>4398	ArgumentList	pos1
>4399	Argument	pos2
>4400	Identifier	pos2
>4401	Argument	mid2
>4402	Identifier	mid2
>4403	Argument	mid1
>4404	Identifier	mid1
>4405	Argument	pos1
>4406	Identifier	pos1
>4407	Callee	Bezier
>4408	Identifier	Bezier
>4409	ExpressionStatement	 
>4410	CallExpression	matrix_sum ( 3 , 1 , 3 , 1 , pos2 , disp2 , mid2 )
>4411	ArgumentList	3
>4412	Argument	mid2
>4413	Identifier	mid2
>4414	Argument	disp2
>4415	Identifier	disp2
>4416	Argument	pos2
>4417	Identifier	pos2
>4418	Argument	1
>4419	PrimaryExpression	1
>4420	Argument	3
>4421	PrimaryExpression	3
>4422	Argument	1
>4423	PrimaryExpression	1
>4424	Argument	3
>4425	PrimaryExpression	3
>4426	Callee	matrix_sum
>4427	Identifier	matrix_sum
>4428	ExpressionStatement	 
>4429	CallExpression	matrix_sum ( 3 , 1 , 3 , 1 , pos1 , disp1 , mid1 )
>4430	ArgumentList	3
>4431	Argument	mid1
>4432	Identifier	mid1
>4433	Argument	disp1
>4434	Identifier	disp1
>4435	Argument	pos1
>4436	Identifier	pos1
>4437	Argument	1
>4438	PrimaryExpression	1
>4439	Argument	3
>4440	PrimaryExpression	3
>4441	Argument	1
>4442	PrimaryExpression	1
>4443	Argument	3
>4444	PrimaryExpression	3
>4445	Callee	matrix_sum
>4446	Identifier	matrix_sum
>4447	ExpressionStatement	 
>4448	CallExpression	matrix_scale ( 3 , 1 , dir2 , 0.1 * dist , disp2 )
>4449	ArgumentList	3
>4450	Argument	disp2
>4451	Identifier	disp2
>4452	Argument	0.1 * dist
>4453	MultiplicativeExpression	0.1 * dist
>4454	Identifier	dist
>4455	PrimaryExpression	0.1
>4456	Argument	dir2
>4457	Identifier	dir2
>4458	Argument	1
>4459	PrimaryExpression	1
>4460	Argument	3
>4461	PrimaryExpression	3
>4462	Callee	matrix_scale
>4463	Identifier	matrix_scale
>4464	ExpressionStatement	 
>4465	CallExpression	matrix_scale ( 3 , 1 , dir1 , 0.1 * dist , disp1 )
>4466	ArgumentList	3
>4467	Argument	disp1
>4468	Identifier	disp1
>4469	Argument	0.1 * dist
>4470	MultiplicativeExpression	0.1 * dist
>4471	Identifier	dist
>4472	PrimaryExpression	0.1
>4473	Argument	dir1
>4474	Identifier	dir1
>4475	Argument	1
>4476	PrimaryExpression	1
>4477	Argument	3
>4478	PrimaryExpression	3
>4479	Callee	matrix_scale
>4480	Identifier	matrix_scale
>4481	IdentifierDeclStatement	 
>4482	IdentifierDecl	mid2 [ 3 ]
>4483	PrimaryExpression	3
>4484	Identifier	mid2
>4485	IdentifierDeclType	double [ 3 ]
>4486	IdentifierDecl	mid1 [ 3 ]
>4487	PrimaryExpression	3
>4488	Identifier	mid1
>4489	IdentifierDeclType	double [ 3 ]
>4490	IdentifierDeclStatement	 
>4491	IdentifierDecl	disp2 [ 3 ]
>4492	PrimaryExpression	3
>4493	Identifier	disp2
>4494	IdentifierDeclType	double [ 3 ]
>4495	IdentifierDecl	disp1 [ 3 ]
>4496	PrimaryExpression	3
>4497	Identifier	disp1
>4498	IdentifierDeclType	double [ 3 ]
>4499	IfStatement	if ( dot > 0 )
>4500	ExpressionStatement	 
>4501	CallExpression	matrix_scale ( 3 , 1 , x2 , - 1.0 , x2 )
>4502	ArgumentList	3
>4503	Argument	x2
>4504	Identifier	x2
>4505	Argument	- 1.0
>4506	UnaryOp	- 1.0
>4507	PrimaryExpression	1.0
>4508	UnaryOperator	-
>4509	Argument	x2
>4510	Identifier	x2
>4511	Argument	1
>4512	PrimaryExpression	1
>4513	Argument	3
>4514	PrimaryExpression	3
>4515	Callee	matrix_scale
>4516	Identifier	matrix_scale
>4517	Condition	 
>4518	RelationalExpression	dot > 0
>4519	PrimaryExpression	0
>4520	Identifier	dot
>4521	IfStatement	if ( fabs ( x_dot ) >= fabs ( y_dot ) && fabs ( x_dot ) >= fabs ( z_dot ) )
>4522	ElseStatement	else
>4523	IfStatement	if ( fabs ( y_dot ) >= fabs ( x_dot ) && fabs ( y_dot ) >= fabs ( z_dot ) )
>4524	ElseStatement	else
>4525	IfStatement	if ( fabs ( z_dot ) >= fabs ( x_dot ) && fabs ( z_dot ) >= fabs ( y_dot ) )
>4526	CompoundStatement	 
>4527	IfStatement	if ( z_dot > 0 )
>4528	ElseStatement	else
>4529	ExpressionStatement	 
>4530	CallExpression	matrix_scale ( 3 , 1 , z2 , 1.0 , dir2 )
>4531	ArgumentList	3
>4532	Argument	dir2
>4533	Identifier	dir2
>4534	Argument	1.0
>4535	PrimaryExpression	1.0
>4536	Argument	z2
>4537	Identifier	z2
>4538	Argument	1
>4539	PrimaryExpression	1
>4540	Argument	3
>4541	PrimaryExpression	3
>4542	Callee	matrix_scale
>4543	Identifier	matrix_scale
>4544	ExpressionStatement	 
>4545	CallExpression	matrix_scale ( 3 , 1 , z2 , - 1.0 , dir2 )
>4546	ArgumentList	3
>4547	Argument	dir2
>4548	Identifier	dir2
>4549	Argument	- 1.0
>4550	UnaryOp	- 1.0
>4551	PrimaryExpression	1.0
>4552	UnaryOperator	-
>4553	Argument	z2
>4554	Identifier	z2
>4555	Argument	1
>4556	PrimaryExpression	1
>4557	Argument	3
>4558	PrimaryExpression	3
>4559	Callee	matrix_scale
>4560	Identifier	matrix_scale
>4561	Condition	 
>4562	RelationalExpression	z_dot > 0
>4563	PrimaryExpression	0
>4564	Identifier	z_dot
>4565	Condition	 
>4566	AndExpression	fabs ( z_dot ) >= fabs ( x_dot ) && fabs ( z_dot ) >= fabs ( y_dot )
>4567	RelationalExpression	fabs ( z_dot ) >= fabs ( y_dot )
>4568	CallExpression	fabs ( y_dot )
>4569	ArgumentList	y_dot
>4570	Argument	y_dot
>4571	Identifier	y_dot
>4572	Callee	fabs
>4573	Identifier	fabs
>4574	CallExpression	fabs ( z_dot )
>4575	ArgumentList	z_dot
>4576	Argument	z_dot
>4577	Identifier	z_dot
>4578	Callee	fabs
>4579	Identifier	fabs
>4580	RelationalExpression	fabs ( z_dot ) >= fabs ( x_dot )
>4581	CallExpression	fabs ( x_dot )
>4582	ArgumentList	x_dot
>4583	Argument	x_dot
>4584	Identifier	x_dot
>4585	Callee	fabs
>4586	Identifier	fabs
>4587	CallExpression	fabs ( z_dot )
>4588	ArgumentList	z_dot
>4589	Argument	z_dot
>4590	Identifier	z_dot
>4591	Callee	fabs
>4592	Identifier	fabs
>4593	CompoundStatement	 
>4594	IfStatement	if ( y_dot > 0 )
>4595	ElseStatement	else
>4596	ExpressionStatement	 
>4597	CallExpression	matrix_scale ( 3 , 1 , y2 , 1.0 , dir2 )
>4598	ArgumentList	3
>4599	Argument	dir2
>4600	Identifier	dir2
>4601	Argument	1.0
>4602	PrimaryExpression	1.0
>4603	Argument	y2
>4604	Identifier	y2
>4605	Argument	1
>4606	PrimaryExpression	1
>4607	Argument	3
>4608	PrimaryExpression	3
>4609	Callee	matrix_scale
>4610	Identifier	matrix_scale
>4611	ExpressionStatement	 
>4612	CallExpression	matrix_scale ( 3 , 1 , y2 , - 1.0 , dir2 )
>4613	ArgumentList	3
>4614	Argument	dir2
>4615	Identifier	dir2
>4616	Argument	- 1.0
>4617	UnaryOp	- 1.0
>4618	PrimaryExpression	1.0
>4619	UnaryOperator	-
>4620	Argument	y2
>4621	Identifier	y2
>4622	Argument	1
>4623	PrimaryExpression	1
>4624	Argument	3
>4625	PrimaryExpression	3
>4626	Callee	matrix_scale
>4627	Identifier	matrix_scale
>4628	Condition	 
>4629	RelationalExpression	y_dot > 0
>4630	PrimaryExpression	0
>4631	Identifier	y_dot
>4632	Condition	 
>4633	AndExpression	fabs ( y_dot ) >= fabs ( x_dot ) && fabs ( y_dot ) >= fabs ( z_dot )
>4634	RelationalExpression	fabs ( y_dot ) >= fabs ( z_dot )
>4635	CallExpression	fabs ( z_dot )
>4636	ArgumentList	z_dot
>4637	Argument	z_dot
>4638	Identifier	z_dot
>4639	Callee	fabs
>4640	Identifier	fabs
>4641	CallExpression	fabs ( y_dot )
>4642	ArgumentList	y_dot
>4643	Argument	y_dot
>4644	Identifier	y_dot
>4645	Callee	fabs
>4646	Identifier	fabs
>4647	RelationalExpression	fabs ( y_dot ) >= fabs ( x_dot )
>4648	CallExpression	fabs ( x_dot )
>4649	ArgumentList	x_dot
>4650	Argument	x_dot
>4651	Identifier	x_dot
>4652	Callee	fabs
>4653	Identifier	fabs
>4654	CallExpression	fabs ( y_dot )
>4655	ArgumentList	y_dot
>4656	Argument	y_dot
>4657	Identifier	y_dot
>4658	Callee	fabs
>4659	Identifier	fabs
>4660	CompoundStatement	 
>4661	IfStatement	if ( x_dot > 0 )
>4662	ElseStatement	else
>4663	ExpressionStatement	 
>4664	CallExpression	matrix_scale ( 3 , 1 , x2 , 1.0 , dir2 )
>4665	ArgumentList	3
>4666	Argument	dir2
>4667	Identifier	dir2
>4668	Argument	1.0
>4669	PrimaryExpression	1.0
>4670	Argument	x2
>4671	Identifier	x2
>4672	Argument	1
>4673	PrimaryExpression	1
>4674	Argument	3
>4675	PrimaryExpression	3
>4676	Callee	matrix_scale
>4677	Identifier	matrix_scale
>4678	ExpressionStatement	 
>4679	CallExpression	matrix_scale ( 3 , 1 , x2 , - 1.0 , dir2 )
>4680	ArgumentList	3
>4681	Argument	dir2
>4682	Identifier	dir2
>4683	Argument	- 1.0
>4684	UnaryOp	- 1.0
>4685	PrimaryExpression	1.0
>4686	UnaryOperator	-
>4687	Argument	x2
>4688	Identifier	x2
>4689	Argument	1
>4690	PrimaryExpression	1
>4691	Argument	3
>4692	PrimaryExpression	3
>4693	Callee	matrix_scale
>4694	Identifier	matrix_scale
>4695	Condition	 
>4696	RelationalExpression	x_dot > 0
>4697	PrimaryExpression	0
>4698	Identifier	x_dot
>4699	Condition	 
>4700	AndExpression	fabs ( x_dot ) >= fabs ( y_dot ) && fabs ( x_dot ) >= fabs ( z_dot )
>4701	RelationalExpression	fabs ( x_dot ) >= fabs ( z_dot )
>4702	CallExpression	fabs ( z_dot )
>4703	ArgumentList	z_dot
>4704	Argument	z_dot
>4705	Identifier	z_dot
>4706	Callee	fabs
>4707	Identifier	fabs
>4708	CallExpression	fabs ( x_dot )
>4709	ArgumentList	x_dot
>4710	Argument	x_dot
>4711	Identifier	x_dot
>4712	Callee	fabs
>4713	Identifier	fabs
>4714	RelationalExpression	fabs ( x_dot ) >= fabs ( y_dot )
>4715	CallExpression	fabs ( y_dot )
>4716	ArgumentList	y_dot
>4717	Argument	y_dot
>4718	Identifier	y_dot
>4719	Callee	fabs
>4720	Identifier	fabs
>4721	CallExpression	fabs ( x_dot )
>4722	ArgumentList	x_dot
>4723	Argument	x_dot
>4724	Identifier	x_dot
>4725	Callee	fabs
>4726	Identifier	fabs
>4727	ExpressionStatement	 
>4728	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , disp , z2 , & z_dot )
>4729	ArgumentList	1
>4730	Argument	& z_dot
>4731	UnaryOp	& z_dot
>4732	Identifier	z_dot
>4733	UnaryOperator	&
>4734	Argument	z2
>4735	Identifier	z2
>4736	Argument	disp
>4737	Identifier	disp
>4738	Argument	1
>4739	PrimaryExpression	1
>4740	Argument	3
>4741	PrimaryExpression	3
>4742	Argument	3
>4743	PrimaryExpression	3
>4744	Argument	1
>4745	PrimaryExpression	1
>4746	Callee	matrix_product
>4747	Identifier	matrix_product
>4748	ExpressionStatement	 
>4749	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , disp , y2 , & y_dot )
>4750	ArgumentList	1
>4751	Argument	& y_dot
>4752	UnaryOp	& y_dot
>4753	Identifier	y_dot
>4754	UnaryOperator	&
>4755	Argument	y2
>4756	Identifier	y2
>4757	Argument	disp
>4758	Identifier	disp
>4759	Argument	1
>4760	PrimaryExpression	1
>4761	Argument	3
>4762	PrimaryExpression	3
>4763	Argument	3
>4764	PrimaryExpression	3
>4765	Argument	1
>4766	PrimaryExpression	1
>4767	Callee	matrix_product
>4768	Identifier	matrix_product
>4769	ExpressionStatement	 
>4770	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , disp , x2 , & x_dot )
>4771	ArgumentList	1
>4772	Argument	& x_dot
>4773	UnaryOp	& x_dot
>4774	Identifier	x_dot
>4775	UnaryOperator	&
>4776	Argument	x2
>4777	Identifier	x2
>4778	Argument	disp
>4779	Identifier	disp
>4780	Argument	1
>4781	PrimaryExpression	1
>4782	Argument	3
>4783	PrimaryExpression	3
>4784	Argument	3
>4785	PrimaryExpression	3
>4786	Argument	1
>4787	PrimaryExpression	1
>4788	Callee	matrix_product
>4789	Identifier	matrix_product
>4790	IfStatement	if ( dot < 0 )
>4791	ExpressionStatement	 
>4792	CallExpression	matrix_scale ( 3 , 1 , x1 , - 1.0 , x1 )
>4793	ArgumentList	3
>4794	Argument	x1
>4795	Identifier	x1
>4796	Argument	- 1.0
>4797	UnaryOp	- 1.0
>4798	PrimaryExpression	1.0
>4799	UnaryOperator	-
>4800	Argument	x1
>4801	Identifier	x1
>4802	Argument	1
>4803	PrimaryExpression	1
>4804	Argument	3
>4805	PrimaryExpression	3
>4806	Callee	matrix_scale
>4807	Identifier	matrix_scale
>4808	Condition	 
>4809	RelationalExpression	dot < 0
>4810	PrimaryExpression	0
>4811	Identifier	dot
>4812	IfStatement	if ( fabs ( x_dot ) >= fabs ( y_dot ) && fabs ( x_dot ) >= fabs ( z_dot ) )
>4813	ElseStatement	else
>4814	IfStatement	if ( fabs ( y_dot ) >= fabs ( x_dot ) && fabs ( y_dot ) >= fabs ( z_dot ) )
>4815	ElseStatement	else
>4816	IfStatement	if ( fabs ( z_dot ) >= fabs ( x_dot ) && fabs ( z_dot ) >= fabs ( y_dot ) )
>4817	CompoundStatement	 
>4818	IfStatement	if ( z_dot < 0 )
>4819	ElseStatement	else
>4820	ExpressionStatement	 
>4821	CallExpression	matrix_scale ( 3 , 1 , z1 , 1.0 , dir1 )
>4822	ArgumentList	3
>4823	Argument	dir1
>4824	Identifier	dir1
>4825	Argument	1.0
>4826	PrimaryExpression	1.0
>4827	Argument	z1
>4828	Identifier	z1
>4829	Argument	1
>4830	PrimaryExpression	1
>4831	Argument	3
>4832	PrimaryExpression	3
>4833	Callee	matrix_scale
>4834	Identifier	matrix_scale
>4835	ExpressionStatement	 
>4836	CallExpression	matrix_scale ( 3 , 1 , z1 , - 1.0 , dir1 )
>4837	ArgumentList	3
>4838	Argument	dir1
>4839	Identifier	dir1
>4840	Argument	- 1.0
>4841	UnaryOp	- 1.0
>4842	PrimaryExpression	1.0
>4843	UnaryOperator	-
>4844	Argument	z1
>4845	Identifier	z1
>4846	Argument	1
>4847	PrimaryExpression	1
>4848	Argument	3
>4849	PrimaryExpression	3
>4850	Callee	matrix_scale
>4851	Identifier	matrix_scale
>4852	Condition	 
>4853	RelationalExpression	z_dot < 0
>4854	PrimaryExpression	0
>4855	Identifier	z_dot
>4856	Condition	 
>4857	AndExpression	fabs ( z_dot ) >= fabs ( x_dot ) && fabs ( z_dot ) >= fabs ( y_dot )
>4858	RelationalExpression	fabs ( z_dot ) >= fabs ( y_dot )
>4859	CallExpression	fabs ( y_dot )
>4860	ArgumentList	y_dot
>4861	Argument	y_dot
>4862	Identifier	y_dot
>4863	Callee	fabs
>4864	Identifier	fabs
>4865	CallExpression	fabs ( z_dot )
>4866	ArgumentList	z_dot
>4867	Argument	z_dot
>4868	Identifier	z_dot
>4869	Callee	fabs
>4870	Identifier	fabs
>4871	RelationalExpression	fabs ( z_dot ) >= fabs ( x_dot )
>4872	CallExpression	fabs ( x_dot )
>4873	ArgumentList	x_dot
>4874	Argument	x_dot
>4875	Identifier	x_dot
>4876	Callee	fabs
>4877	Identifier	fabs
>4878	CallExpression	fabs ( z_dot )
>4879	ArgumentList	z_dot
>4880	Argument	z_dot
>4881	Identifier	z_dot
>4882	Callee	fabs
>4883	Identifier	fabs
>4884	CompoundStatement	 
>4885	IfStatement	if ( y_dot < 0 )
>4886	ElseStatement	else
>4887	ExpressionStatement	 
>4888	CallExpression	matrix_scale ( 3 , 1 , y1 , 1.0 , dir1 )
>4889	ArgumentList	3
>4890	Argument	dir1
>4891	Identifier	dir1
>4892	Argument	1.0
>4893	PrimaryExpression	1.0
>4894	Argument	y1
>4895	Identifier	y1
>4896	Argument	1
>4897	PrimaryExpression	1
>4898	Argument	3
>4899	PrimaryExpression	3
>4900	Callee	matrix_scale
>4901	Identifier	matrix_scale
>4902	ExpressionStatement	 
>4903	CallExpression	matrix_scale ( 3 , 1 , y1 , - 1.0 , dir1 )
>4904	ArgumentList	3
>4905	Argument	dir1
>4906	Identifier	dir1
>4907	Argument	- 1.0
>4908	UnaryOp	- 1.0
>4909	PrimaryExpression	1.0
>4910	UnaryOperator	-
>4911	Argument	y1
>4912	Identifier	y1
>4913	Argument	1
>4914	PrimaryExpression	1
>4915	Argument	3
>4916	PrimaryExpression	3
>4917	Callee	matrix_scale
>4918	Identifier	matrix_scale
>4919	Condition	 
>4920	RelationalExpression	y_dot < 0
>4921	PrimaryExpression	0
>4922	Identifier	y_dot
>4923	Condition	 
>4924	AndExpression	fabs ( y_dot ) >= fabs ( x_dot ) && fabs ( y_dot ) >= fabs ( z_dot )
>4925	RelationalExpression	fabs ( y_dot ) >= fabs ( z_dot )
>4926	CallExpression	fabs ( z_dot )
>4927	ArgumentList	z_dot
>4928	Argument	z_dot
>4929	Identifier	z_dot
>4930	Callee	fabs
>4931	Identifier	fabs
>4932	CallExpression	fabs ( y_dot )
>4933	ArgumentList	y_dot
>4934	Argument	y_dot
>4935	Identifier	y_dot
>4936	Callee	fabs
>4937	Identifier	fabs
>4938	RelationalExpression	fabs ( y_dot ) >= fabs ( x_dot )
>4939	CallExpression	fabs ( x_dot )
>4940	ArgumentList	x_dot
>4941	Argument	x_dot
>4942	Identifier	x_dot
>4943	Callee	fabs
>4944	Identifier	fabs
>4945	CallExpression	fabs ( y_dot )
>4946	ArgumentList	y_dot
>4947	Argument	y_dot
>4948	Identifier	y_dot
>4949	Callee	fabs
>4950	Identifier	fabs
>4951	CompoundStatement	 
>4952	IfStatement	if ( x_dot < 0 )
>4953	ElseStatement	else
>4954	ExpressionStatement	 
>4955	CallExpression	matrix_scale ( 3 , 1 , x1 , 1.0 , dir1 )
>4956	ArgumentList	3
>4957	Argument	dir1
>4958	Identifier	dir1
>4959	Argument	1.0
>4960	PrimaryExpression	1.0
>4961	Argument	x1
>4962	Identifier	x1
>4963	Argument	1
>4964	PrimaryExpression	1
>4965	Argument	3
>4966	PrimaryExpression	3
>4967	Callee	matrix_scale
>4968	Identifier	matrix_scale
>4969	ExpressionStatement	 
>4970	CallExpression	matrix_scale ( 3 , 1 , x1 , - 1.0 , dir1 )
>4971	ArgumentList	3
>4972	Argument	dir1
>4973	Identifier	dir1
>4974	Argument	- 1.0
>4975	UnaryOp	- 1.0
>4976	PrimaryExpression	1.0
>4977	UnaryOperator	-
>4978	Argument	x1
>4979	Identifier	x1
>4980	Argument	1
>4981	PrimaryExpression	1
>4982	Argument	3
>4983	PrimaryExpression	3
>4984	Callee	matrix_scale
>4985	Identifier	matrix_scale
>4986	Condition	 
>4987	RelationalExpression	x_dot < 0
>4988	PrimaryExpression	0
>4989	Identifier	x_dot
>4990	Condition	 
>4991	AndExpression	fabs ( x_dot ) >= fabs ( y_dot ) && fabs ( x_dot ) >= fabs ( z_dot )
>4992	RelationalExpression	fabs ( x_dot ) >= fabs ( z_dot )
>4993	CallExpression	fabs ( z_dot )
>4994	ArgumentList	z_dot
>4995	Argument	z_dot
>4996	Identifier	z_dot
>4997	Callee	fabs
>4998	Identifier	fabs
>4999	CallExpression	fabs ( x_dot )
>5000	ArgumentList	x_dot
>5001	Argument	x_dot
>5002	Identifier	x_dot
>5003	Callee	fabs
>5004	Identifier	fabs
>5005	RelationalExpression	fabs ( x_dot ) >= fabs ( y_dot )
>5006	CallExpression	fabs ( y_dot )
>5007	ArgumentList	y_dot
>5008	Argument	y_dot
>5009	Identifier	y_dot
>5010	Callee	fabs
>5011	Identifier	fabs
>5012	CallExpression	fabs ( x_dot )
>5013	ArgumentList	x_dot
>5014	Argument	x_dot
>5015	Identifier	x_dot
>5016	Callee	fabs
>5017	Identifier	fabs
>5018	IdentifierDeclStatement	 
>5019	IdentifierDecl	dir2 [ 3 ]
>5020	PrimaryExpression	3
>5021	Identifier	dir2
>5022	IdentifierDeclType	double [ 3 ]
>5023	IdentifierDecl	dir1 [ 3 ]
>5024	PrimaryExpression	3
>5025	Identifier	dir1
>5026	IdentifierDeclType	double [ 3 ]
>5027	ExpressionStatement	 
>5028	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , disp , z1 , & z_dot )
>5029	ArgumentList	1
>5030	Argument	& z_dot
>5031	UnaryOp	& z_dot
>5032	Identifier	z_dot
>5033	UnaryOperator	&
>5034	Argument	z1
>5035	Identifier	z1
>5036	Argument	disp
>5037	Identifier	disp
>5038	Argument	1
>5039	PrimaryExpression	1
>5040	Argument	3
>5041	PrimaryExpression	3
>5042	Argument	3
>5043	PrimaryExpression	3
>5044	Argument	1
>5045	PrimaryExpression	1
>5046	Callee	matrix_product
>5047	Identifier	matrix_product
>5048	ExpressionStatement	 
>5049	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , disp , y1 , & y_dot )
>5050	ArgumentList	1
>5051	Argument	& y_dot
>5052	UnaryOp	& y_dot
>5053	Identifier	y_dot
>5054	UnaryOperator	&
>5055	Argument	y1
>5056	Identifier	y1
>5057	Argument	disp
>5058	Identifier	disp
>5059	Argument	1
>5060	PrimaryExpression	1
>5061	Argument	3
>5062	PrimaryExpression	3
>5063	Argument	3
>5064	PrimaryExpression	3
>5065	Argument	1
>5066	PrimaryExpression	1
>5067	Callee	matrix_product
>5068	Identifier	matrix_product
>5069	ExpressionStatement	 
>5070	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , disp , x1 , & x_dot )
>5071	ArgumentList	1
>5072	Argument	& x_dot
>5073	UnaryOp	& x_dot
>5074	Identifier	x_dot
>5075	UnaryOperator	&
>5076	Argument	x1
>5077	Identifier	x1
>5078	Argument	disp
>5079	Identifier	disp
>5080	Argument	1
>5081	PrimaryExpression	1
>5082	Argument	3
>5083	PrimaryExpression	3
>5084	Argument	3
>5085	PrimaryExpression	3
>5086	Argument	1
>5087	PrimaryExpression	1
>5088	Callee	matrix_product
>5089	Identifier	matrix_product
>5090	IdentifierDeclStatement	 
>5091	IdentifierDecl	z_dot
>5092	Identifier	z_dot
>5093	IdentifierDeclType	double
>5094	IdentifierDecl	y_dot
>5095	Identifier	y_dot
>5096	IdentifierDeclType	double
>5097	IdentifierDecl	x_dot
>5098	Identifier	x_dot
>5099	IdentifierDeclType	double
>5100	ExpressionStatement	 
>5101	AssignmentExpr	dist = matrix_norm ( 3 , 1 , disp )
>5102	CallExpression	matrix_norm ( 3 , 1 , disp )
>5103	ArgumentList	3
>5104	Argument	disp
>5105	Identifier	disp
>5106	Argument	1
>5107	PrimaryExpression	1
>5108	Argument	3
>5109	PrimaryExpression	3
>5110	Callee	matrix_norm
>5111	Identifier	matrix_norm
>5112	Identifier	dist
>5113	ExpressionStatement	 
>5114	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos2 , pos1 , disp )
>5115	ArgumentList	3
>5116	Argument	disp
>5117	Identifier	disp
>5118	Argument	pos1
>5119	Identifier	pos1
>5120	Argument	pos2
>5121	Identifier	pos2
>5122	Argument	1
>5123	PrimaryExpression	1
>5124	Argument	3
>5125	PrimaryExpression	3
>5126	Argument	1
>5127	PrimaryExpression	1
>5128	Argument	3
>5129	PrimaryExpression	3
>5130	Callee	matrix_diff
>5131	Identifier	matrix_diff
>5132	IdentifierDeclStatement	 
>5133	IdentifierDecl	dist
>5134	Identifier	dist
>5135	IdentifierDeclType	double
>5136	IdentifierDecl	disp [ 3 ]
>5137	PrimaryExpression	3
>5138	Identifier	disp
>5139	IdentifierDeclType	double [ 3 ]
>5140	ExpressionStatement	 
>5141	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R2 , zaxis , z2 )
>5142	ArgumentList	3
>5143	Argument	z2
>5144	Identifier	z2
>5145	Argument	zaxis
>5146	Identifier	zaxis
>5147	Argument	R2
>5148	Identifier	R2
>5149	Argument	1
>5150	PrimaryExpression	1
>5151	Argument	3
>5152	PrimaryExpression	3
>5153	Argument	3
>5154	PrimaryExpression	3
>5155	Argument	3
>5156	PrimaryExpression	3
>5157	Callee	matrix_product
>5158	Identifier	matrix_product
>5159	ExpressionStatement	 
>5160	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R1 , zaxis , z1 )
>5161	ArgumentList	3
>5162	Argument	z1
>5163	Identifier	z1
>5164	Argument	zaxis
>5165	Identifier	zaxis
>5166	Argument	R1
>5167	Identifier	R1
>5168	Argument	1
>5169	PrimaryExpression	1
>5170	Argument	3
>5171	PrimaryExpression	3
>5172	Argument	3
>5173	PrimaryExpression	3
>5174	Argument	3
>5175	PrimaryExpression	3
>5176	Callee	matrix_product
>5177	Identifier	matrix_product
>5178	ExpressionStatement	 
>5179	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R2 , yaxis , y2 )
>5180	ArgumentList	3
>5181	Argument	y2
>5182	Identifier	y2
>5183	Argument	yaxis
>5184	Identifier	yaxis
>5185	Argument	R2
>5186	Identifier	R2
>5187	Argument	1
>5188	PrimaryExpression	1
>5189	Argument	3
>5190	PrimaryExpression	3
>5191	Argument	3
>5192	PrimaryExpression	3
>5193	Argument	3
>5194	PrimaryExpression	3
>5195	Callee	matrix_product
>5196	Identifier	matrix_product
>5197	ExpressionStatement	 
>5198	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R1 , yaxis , y1 )
>5199	ArgumentList	3
>5200	Argument	y1
>5201	Identifier	y1
>5202	Argument	yaxis
>5203	Identifier	yaxis
>5204	Argument	R1
>5205	Identifier	R1
>5206	Argument	1
>5207	PrimaryExpression	1
>5208	Argument	3
>5209	PrimaryExpression	3
>5210	Argument	3
>5211	PrimaryExpression	3
>5212	Argument	3
>5213	PrimaryExpression	3
>5214	Callee	matrix_product
>5215	Identifier	matrix_product
>5216	ExpressionStatement	 
>5217	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R2 , xaxis , x2 )
>5218	ArgumentList	3
>5219	Argument	x2
>5220	Identifier	x2
>5221	Argument	xaxis
>5222	Identifier	xaxis
>5223	Argument	R2
>5224	Identifier	R2
>5225	Argument	1
>5226	PrimaryExpression	1
>5227	Argument	3
>5228	PrimaryExpression	3
>5229	Argument	3
>5230	PrimaryExpression	3
>5231	Argument	3
>5232	PrimaryExpression	3
>5233	Callee	matrix_product
>5234	Identifier	matrix_product
>5235	ExpressionStatement	 
>5236	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R1 , xaxis , x1 )
>5237	ArgumentList	3
>5238	Argument	x1
>5239	Identifier	x1
>5240	Argument	xaxis
>5241	Identifier	xaxis
>5242	Argument	R1
>5243	Identifier	R1
>5244	Argument	1
>5245	PrimaryExpression	1
>5246	Argument	3
>5247	PrimaryExpression	3
>5248	Argument	3
>5249	PrimaryExpression	3
>5250	Argument	3
>5251	PrimaryExpression	3
>5252	Callee	matrix_product
>5253	Identifier	matrix_product
>5254	IdentifierDeclStatement	 
>5255	IdentifierDecl	z2 [ 3 ]
>5256	PrimaryExpression	3
>5257	Identifier	z2
>5258	IdentifierDeclType	double [ 3 ]
>5259	IdentifierDecl	z1 [ 3 ]
>5260	PrimaryExpression	3
>5261	Identifier	z1
>5262	IdentifierDeclType	double [ 3 ]
>5263	IdentifierDeclStatement	 
>5264	IdentifierDecl	y2 [ 3 ]
>5265	PrimaryExpression	3
>5266	Identifier	y2
>5267	IdentifierDeclType	double [ 3 ]
>5268	IdentifierDecl	y1 [ 3 ]
>5269	PrimaryExpression	3
>5270	Identifier	y1
>5271	IdentifierDeclType	double [ 3 ]
>5272	IdentifierDeclStatement	 
>5273	IdentifierDecl	x2 [ 3 ]
>5274	PrimaryExpression	3
>5275	Identifier	x2
>5276	IdentifierDeclType	double [ 3 ]
>5277	IdentifierDecl	x1 [ 3 ]
>5278	PrimaryExpression	3
>5279	Identifier	x1
>5280	IdentifierDeclType	double [ 3 ]
>5281	IdentifierDeclStatement	 
>5282	IdentifierDecl	zaxis [ 3 ] = { 0 , 0 , - 1 }
>5283	AssignmentExpr	zaxis [ 3 ] = { 0 , 0 , - 1 }
>5284	InitializerList	0
>5285	UnaryOp	- 1
>5286	PrimaryExpression	1
>5287	UnaryOperator	-
>5288	PrimaryExpression	0
>5289	PrimaryExpression	0
>5290	Identifier	zaxis
>5291	PrimaryExpression	3
>5292	Identifier	zaxis
>5293	IdentifierDeclType	double [ 3 ]
>5294	IdentifierDeclStatement	 
>5295	IdentifierDecl	yaxis [ 3 ] = { 0 , 1 , 0 }
>5296	AssignmentExpr	yaxis [ 3 ] = { 0 , 1 , 0 }
>5297	InitializerList	0
>5298	PrimaryExpression	0
>5299	PrimaryExpression	1
>5300	PrimaryExpression	0
>5301	Identifier	yaxis
>5302	PrimaryExpression	3
>5303	Identifier	yaxis
>5304	IdentifierDeclType	double [ 3 ]
>5305	IdentifierDeclStatement	 
>5306	IdentifierDecl	xaxis [ 3 ] = { 1 , 0 , 0 }
>5307	AssignmentExpr	xaxis [ 3 ] = { 1 , 0 , 0 }
>5308	InitializerList	1
>5309	PrimaryExpression	0
>5310	PrimaryExpression	0
>5311	PrimaryExpression	1
>5312	Identifier	xaxis
>5313	PrimaryExpression	3
>5314	Identifier	xaxis
>5315	IdentifierDeclType	double [ 3 ]
>5316	ExpressionStatement	 
>5317	CallExpression	cam . GetPose ( R2 )
>5318	ArgumentList	R2
>5319	Argument	R2
>5320	Identifier	R2
>5321	Callee	cam . GetPose
>5322	MemberAccess	cam . GetPose
>5323	Identifier	GetPose
>5324	Identifier	cam
>5325	ExpressionStatement	 
>5326	CallExpression	GetPose ( R1 )
>5327	ArgumentList	R1
>5328	Argument	R1
>5329	Identifier	R1
>5330	Callee	GetPose
>5331	Identifier	GetPose
>5332	ExpressionStatement	 
>5333	CallExpression	cam . GetPosition ( pos2 )
>5334	ArgumentList	pos2
>5335	Argument	pos2
>5336	Identifier	pos2
>5337	Callee	cam . GetPosition
>5338	MemberAccess	cam . GetPosition
>5339	Identifier	GetPosition
>5340	Identifier	cam
>5341	ExpressionStatement	 
>5342	CallExpression	GetPosition ( pos1 )
>5343	ArgumentList	pos1
>5344	Argument	pos1
>5345	Identifier	pos1
>5346	Callee	GetPosition
>5347	Identifier	GetPosition
>5348	IdentifierDeclStatement	 
>5349	IdentifierDecl	R2 [ 9 ]
>5350	PrimaryExpression	9
>5351	Identifier	R2
>5352	IdentifierDeclType	double [ 9 ]
>5353	IdentifierDecl	R1 [ 9 ]
>5354	PrimaryExpression	9
>5355	Identifier	R1
>5356	IdentifierDeclType	double [ 9 ]
>5357	IdentifierDeclStatement	 
>5358	IdentifierDecl	pos2 [ 3 ]
>5359	PrimaryExpression	3
>5360	Identifier	pos2
>5361	IdentifierDeclType	double [ 3 ]
>5362	IdentifierDecl	pos1 [ 3 ]
>5363	PrimaryExpression	3
>5364	Identifier	pos1
>5365	IdentifierDeclType	double [ 3 ]
>5401	FunctionDef	CameraInfo 
>5402	ParameterList	double x , double y , double * ray
>5403	Parameter	 
>5404	Identifier	ray
>5405	ParameterType	double *
>5406	Parameter	 
>5407	Identifier	y
>5408	ParameterType	double
>5409	Parameter	 
>5410	Identifier	x
>5411	ParameterType	double
>5412	ReturnType	void
>5413	CompoundStatement	 
>5414	ExpressionStatement	 
>5415	CallExpression	matrix_scale ( 3 , 1 , ray_cam , 1.0 / norm , ray )
>5416	ArgumentList	3
>5417	Argument	ray
>5418	Identifier	ray
>5419	Argument	1.0 / norm
>5420	MultiplicativeExpression	1.0 / norm
>5421	Identifier	norm
>5422	PrimaryExpression	1.0
>5423	Argument	ray_cam
>5424	Identifier	ray_cam
>5425	Argument	1
>5426	PrimaryExpression	1
>5427	Argument	3
>5428	PrimaryExpression	3
>5429	Callee	matrix_scale
>5430	Identifier	matrix_scale
>5431	IdentifierDeclStatement	 
>5432	IdentifierDecl	norm = matrix_norm ( 3 , 1 , ray_cam )
>5433	AssignmentExpr	norm = matrix_norm ( 3 , 1 , ray_cam )
>5434	CallExpression	matrix_norm ( 3 , 1 , ray_cam )
>5435	ArgumentList	3
>5436	Argument	ray_cam
>5437	Identifier	ray_cam
>5438	Argument	1
>5439	PrimaryExpression	1
>5440	Argument	3
>5441	PrimaryExpression	3
>5442	Callee	matrix_norm
>5443	Identifier	matrix_norm
>5444	Identifier	norm
>5445	Identifier	norm
>5446	IdentifierDeclType	double
>5447	ExpressionStatement	 
>5448	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , m_R , ray_cam , ray )
>5449	ArgumentList	3
>5450	Argument	ray
>5451	Identifier	ray
>5452	Argument	ray_cam
>5453	Identifier	ray_cam
>5454	Argument	m_R
>5455	Identifier	m_R
>5456	Argument	1
>5457	PrimaryExpression	1
>5458	Argument	3
>5459	PrimaryExpression	3
>5460	Argument	3
>5461	PrimaryExpression	3
>5462	Argument	3
>5463	PrimaryExpression	3
>5464	Callee	matrix_transpose_product
>5465	Identifier	matrix_transpose_product
>5466	IdentifierDeclStatement	 
>5467	IdentifierDecl	ray_cam [ 3 ] = { x , y , - m_focal }
>5468	AssignmentExpr	ray_cam [ 3 ] = { x , y , - m_focal }
>5469	InitializerList	x
>5470	UnaryOp	- m_focal
>5471	Identifier	m_focal
>5472	UnaryOperator	-
>5473	Identifier	y
>5474	Identifier	x
>5475	Identifier	ray_cam
>5476	PrimaryExpression	3
>5477	Identifier	ray_cam
>5478	IdentifierDeclType	double [ 3 ]
>5490	FunctionDef	CameraInfo 
>5491	ParameterList	double x , double y , double * ray
>5492	Parameter	 
>5493	Identifier	ray
>5494	ParameterType	double *
>5495	Parameter	 
>5496	Identifier	y
>5497	ParameterType	double
>5498	Parameter	 
>5499	Identifier	x
>5500	ParameterType	double
>5501	ReturnType	void
>5502	CompoundStatement	 
>5503	ExpressionStatement	 
>5504	CallExpression	matrix_scale ( 3 , 1 , ray , 1.0 / norm , ray )
>5505	ArgumentList	3
>5506	Argument	ray
>5507	Identifier	ray
>5508	Argument	1.0 / norm
>5509	MultiplicativeExpression	1.0 / norm
>5510	Identifier	norm
>5511	PrimaryExpression	1.0
>5512	Argument	ray
>5513	Identifier	ray
>5514	Argument	1
>5515	PrimaryExpression	1
>5516	Argument	3
>5517	PrimaryExpression	3
>5518	Callee	matrix_scale
>5519	Identifier	matrix_scale
>5520	IdentifierDeclStatement	 
>5521	IdentifierDecl	norm = matrix_norm ( 3 , 1 , ray )
>5522	AssignmentExpr	norm = matrix_norm ( 3 , 1 , ray )
>5523	CallExpression	matrix_norm ( 3 , 1 , ray )
>5524	ArgumentList	3
>5525	Argument	ray
>5526	Identifier	ray
>5527	Argument	1
>5528	PrimaryExpression	1
>5529	Argument	3
>5530	PrimaryExpression	3
>5531	Callee	matrix_norm
>5532	Identifier	matrix_norm
>5533	Identifier	norm
>5534	Identifier	norm
>5535	IdentifierDeclType	double
>5536	ExpressionStatement	 
>5537	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , m_R , ray_cam , ray )
>5538	ArgumentList	3
>5539	Argument	ray
>5540	Identifier	ray
>5541	Argument	ray_cam
>5542	Identifier	ray_cam
>5543	Argument	m_R
>5544	Identifier	m_R
>5545	Argument	1
>5546	PrimaryExpression	1
>5547	Argument	3
>5548	PrimaryExpression	3
>5549	Argument	3
>5550	PrimaryExpression	3
>5551	Argument	3
>5552	PrimaryExpression	3
>5553	Callee	matrix_transpose_product
>5554	Identifier	matrix_transpose_product
>5555	IdentifierDeclStatement	 
>5556	IdentifierDecl	ray_cam [ 3 ] = { x , y , - m_focal }
>5557	AssignmentExpr	ray_cam [ 3 ] = { x , y , - m_focal }
>5558	InitializerList	x
>5559	UnaryOp	- m_focal
>5560	Identifier	m_focal
>5561	UnaryOperator	-
>5562	Identifier	y
>5563	Identifier	x
>5564	Identifier	ray_cam
>5565	PrimaryExpression	3
>5566	Identifier	ray_cam
>5567	IdentifierDeclType	double [ 3 ]
>5579	FunctionDef	SphToRot (double theta , double phi , double * R)
>5580	ParameterList	double theta , double phi , double * R
>5581	Parameter	 
>5582	Identifier	R
>5583	ParameterType	double *
>5584	Parameter	 
>5585	Identifier	phi
>5586	ParameterType	double
>5587	Parameter	 
>5588	Identifier	theta
>5589	ParameterType	double
>5590	ReturnType	static void
>5591	CompoundStatement	 
>5592	ExpressionStatement	 
>5593	CallExpression	memcpy ( R + 6 , v , 3 * sizeof ( double ) )
>5594	ArgumentList	R + 6
>5595	Argument	3 * sizeof ( double )
>5596	MultiplicativeExpression	3 * sizeof ( double )
>5597	SizeofExpr	sizeof ( double )
>5598	SizeofOperand	double
>5599	Sizeof	sizeof
>5600	PrimaryExpression	3
>5601	Argument	v
>5602	Identifier	v
>5603	Argument	R + 6
>5604	AdditiveExpression	R + 6
>5605	PrimaryExpression	6
>5606	Identifier	R
>5607	Callee	memcpy
>5608	Identifier	memcpy
>5609	ExpressionStatement	 
>5610	CallExpression	memcpy ( R + 3 , up , 3 * sizeof ( double ) )
>5611	ArgumentList	R + 3
>5612	Argument	3 * sizeof ( double )
>5613	MultiplicativeExpression	3 * sizeof ( double )
>5614	SizeofExpr	sizeof ( double )
>5615	SizeofOperand	double
>5616	Sizeof	sizeof
>5617	PrimaryExpression	3
>5618	Argument	up
>5619	Identifier	up
>5620	Argument	R + 3
>5621	AdditiveExpression	R + 3
>5622	PrimaryExpression	3
>5623	Identifier	R
>5624	Callee	memcpy
>5625	Identifier	memcpy
>5626	ExpressionStatement	 
>5627	CallExpression	memcpy ( R + 0 , x_axis , 3 * sizeof ( double ) )
>5628	ArgumentList	R + 0
>5629	Argument	3 * sizeof ( double )
>5630	MultiplicativeExpression	3 * sizeof ( double )
>5631	SizeofExpr	sizeof ( double )
>5632	SizeofOperand	double
>5633	Sizeof	sizeof
>5634	PrimaryExpression	3
>5635	Argument	x_axis
>5636	Identifier	x_axis
>5637	Argument	R + 0
>5638	AdditiveExpression	R + 0
>5639	PrimaryExpression	0
>5640	Identifier	R
>5641	Callee	memcpy
>5642	Identifier	memcpy
>5643	ExpressionStatement	 
>5644	CallExpression	matrix_cross ( up , v , x_axis )
>5645	ArgumentList	up
>5646	Argument	x_axis
>5647	Identifier	x_axis
>5648	Argument	v
>5649	Identifier	v
>5650	Argument	up
>5651	Identifier	up
>5652	Callee	matrix_cross
>5653	Identifier	matrix_cross
>5654	IdentifierDeclStatement	 
>5655	IdentifierDecl	x_axis [ 3 ]
>5656	PrimaryExpression	3
>5657	Identifier	x_axis
>5658	IdentifierDeclType	double [ 3 ]
>5659	ExpressionStatement	 
>5660	AssignmentExpr	up [ 2 ] = sin ( theta_up ) * sin ( phi_up )
>5661	MultiplicativeExpression	sin ( theta_up ) * sin ( phi_up )
>5662	CallExpression	sin ( phi_up )
>5663	ArgumentList	phi_up
>5664	Argument	phi_up
>5665	Identifier	phi_up
>5666	Callee	sin
>5667	Identifier	sin
>5668	CallExpression	sin ( theta_up )
>5669	ArgumentList	theta_up
>5670	Argument	theta_up
>5671	Identifier	theta_up
>5672	Callee	sin
>5673	Identifier	sin
>5674	ArrayIndexing	up [ 2 ]
>5675	PrimaryExpression	2
>5676	Identifier	up
>5677	ExpressionStatement	 
>5678	AssignmentExpr	up [ 1 ] = cos ( phi_up )
>5679	CallExpression	cos ( phi_up )
>5680	ArgumentList	phi_up
>5681	Argument	phi_up
>5682	Identifier	phi_up
>5683	Callee	cos
>5684	Identifier	cos
>5685	ArrayIndexing	up [ 1 ]
>5686	PrimaryExpression	1
>5687	Identifier	up
>5688	ExpressionStatement	 
>5689	AssignmentExpr	up [ 0 ] = cos ( theta_up ) * sin ( phi_up )
>5690	MultiplicativeExpression	cos ( theta_up ) * sin ( phi_up )
>5691	CallExpression	sin ( phi_up )
>5692	ArgumentList	phi_up
>5693	Argument	phi_up
>5694	Identifier	phi_up
>5695	Callee	sin
>5696	Identifier	sin
>5697	CallExpression	cos ( theta_up )
>5698	ArgumentList	theta_up
>5699	Argument	theta_up
>5700	Identifier	theta_up
>5701	Callee	cos
>5702	Identifier	cos
>5703	ArrayIndexing	up [ 0 ]
>5704	PrimaryExpression	0
>5705	Identifier	up
>5706	IdentifierDeclStatement	 
>5707	IdentifierDecl	up [ 3 ]
>5708	PrimaryExpression	3
>5709	Identifier	up
>5710	IdentifierDeclType	double [ 3 ]
>5711	IdentifierDeclStatement	 
>5712	IdentifierDecl	theta_up = theta
>5713	AssignmentExpr	theta_up = theta
>5714	Identifier	theta
>5715	Identifier	theta
>5716	Identifier	theta_up
>5717	IdentifierDeclType	double
>5718	IdentifierDeclStatement	 
>5719	IdentifierDecl	phi_up = phi - 0.5 * M_PI
>5720	AssignmentExpr	phi_up = phi - 0.5 * M_PI
>5721	AdditiveExpression	phi - 0.5 * M_PI
>5722	MultiplicativeExpression	0.5 * M_PI
>5723	Identifier	M_PI
>5724	PrimaryExpression	0.5
>5725	Identifier	phi
>5726	Identifier	phi_up
>5727	Identifier	phi_up
>5728	IdentifierDeclType	double
>5729	ExpressionStatement	 
>5730	AssignmentExpr	v [ 2 ] = - sin ( theta ) * sin ( phi )
>5731	MultiplicativeExpression	- sin ( theta ) * sin ( phi )
>5732	CallExpression	sin ( phi )
>5733	ArgumentList	phi
>5734	Argument	phi
>5735	Identifier	phi
>5736	Callee	sin
>5737	Identifier	sin
>5738	UnaryOp	- sin ( theta )
>5739	CallExpression	sin ( theta )
>5740	ArgumentList	theta
>5741	Argument	theta
>5742	Identifier	theta
>5743	Callee	sin
>5744	Identifier	sin
>5745	UnaryOperator	-
>5746	ArrayIndexing	v [ 2 ]
>5747	PrimaryExpression	2
>5748	Identifier	v
>5749	ExpressionStatement	 
>5750	AssignmentExpr	v [ 1 ] = - cos ( phi )
>5751	UnaryOp	- cos ( phi )
>5752	CallExpression	cos ( phi )
>5753	ArgumentList	phi
>5754	Argument	phi
>5755	Identifier	phi
>5756	Callee	cos
>5757	Identifier	cos
>5758	UnaryOperator	-
>5759	ArrayIndexing	v [ 1 ]
>5760	PrimaryExpression	1
>5761	Identifier	v
>5762	ExpressionStatement	 
>5763	AssignmentExpr	v [ 0 ] = - cos ( theta ) * sin ( phi )
>5764	MultiplicativeExpression	- cos ( theta ) * sin ( phi )
>5765	CallExpression	sin ( phi )
>5766	ArgumentList	phi
>5767	Argument	phi
>5768	Identifier	phi
>5769	Callee	sin
>5770	Identifier	sin
>5771	UnaryOp	- cos ( theta )
>5772	CallExpression	cos ( theta )
>5773	ArgumentList	theta
>5774	Argument	theta
>5775	Identifier	theta
>5776	Callee	cos
>5777	Identifier	cos
>5778	UnaryOperator	-
>5779	ArrayIndexing	v [ 0 ]
>5780	PrimaryExpression	0
>5781	Identifier	v
>5782	IdentifierDeclStatement	 
>5783	IdentifierDecl	v [ 3 ]
>5784	PrimaryExpression	3
>5785	Identifier	v
>5786	IdentifierDeclType	double [ 3 ]
>5803	FunctionDef	CameraInfo 
>5804	ParameterList	double * ray
>5805	Parameter	 
>5806	Identifier	ray
>5807	ParameterType	double *
>5808	ReturnType	void
>5809	CompoundStatement	 
>5810	ExpressionStatement	 
>5811	CallExpression	Finalize ( )
>5812	ArgumentList	 
>5813	Callee	Finalize
>5814	Identifier	Finalize
>5815	ExpressionStatement	 
>5816	CallExpression	SetPosition ( pos )
>5817	ArgumentList	pos
>5818	Argument	pos
>5819	Identifier	pos
>5820	Callee	SetPosition
>5821	Identifier	SetPosition
>5822	ExpressionStatement	 
>5823	CallExpression	memcpy ( m_R , Rnew , 9 * sizeof ( double ) )
>5824	ArgumentList	m_R
>5825	Argument	9 * sizeof ( double )
>5826	MultiplicativeExpression	9 * sizeof ( double )
>5827	SizeofExpr	sizeof ( double )
>5828	SizeofOperand	double
>5829	Sizeof	sizeof
>5830	PrimaryExpression	9
>5831	Argument	Rnew
>5832	Identifier	Rnew
>5833	Argument	m_R
>5834	Identifier	m_R
>5835	Callee	memcpy
>5836	Identifier	memcpy
>5837	ExpressionStatement	 
>5838	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , R , m_R , Rnew )
>5839	ArgumentList	3
>5840	Argument	Rnew
>5841	Identifier	Rnew
>5842	Argument	m_R
>5843	Identifier	m_R
>5844	Argument	R
>5845	Identifier	R
>5846	Argument	3
>5847	PrimaryExpression	3
>5848	Argument	3
>5849	PrimaryExpression	3
>5850	Argument	3
>5851	PrimaryExpression	3
>5852	Argument	3
>5853	PrimaryExpression	3
>5854	Callee	matrix_product
>5855	Identifier	matrix_product
>5856	IdentifierDeclStatement	 
>5857	IdentifierDecl	Rnew [ 9 ]
>5858	PrimaryExpression	9
>5859	Identifier	Rnew
>5860	IdentifierDeclType	double [ 9 ]
>5861	ExpressionStatement	 
>5862	CallExpression	GetPosition ( pos )
>5863	ArgumentList	pos
>5864	Argument	pos
>5865	Identifier	pos
>5866	Callee	GetPosition
>5867	Identifier	GetPosition
>5868	IdentifierDeclStatement	 
>5869	IdentifierDecl	pos [ 3 ]
>5870	PrimaryExpression	3
>5871	Identifier	pos
>5872	IdentifierDeclType	double [ 3 ]
>5873	ExpressionStatement	 
>5874	CallExpression	SphToRot ( theta , phi , R )
>5875	ArgumentList	theta
>5876	Argument	R
>5877	Identifier	R
>5878	Argument	phi
>5879	Identifier	phi
>5880	Argument	theta
>5881	Identifier	theta
>5882	Callee	SphToRot
>5883	Identifier	SphToRot
>5884	IdentifierDeclStatement	 
>5885	IdentifierDecl	R [ 9 ]
>5886	PrimaryExpression	9
>5887	Identifier	R
>5888	IdentifierDeclType	double [ 9 ]
>5889	IdentifierDeclStatement	 
>5890	IdentifierDecl	phi = acos ( ray [ 1 ] / r )
>5891	AssignmentExpr	phi = acos ( ray [ 1 ] / r )
>5892	CallExpression	acos ( ray [ 1 ] / r )
>5893	ArgumentList	ray [ 1 ] / r
>5894	Argument	ray [ 1 ] / r
>5895	MultiplicativeExpression	ray [ 1 ] / r
>5896	Identifier	r
>5897	ArrayIndexing	ray [ 1 ]
>5898	PrimaryExpression	1
>5899	Identifier	ray
>5900	Callee	acos
>5901	Identifier	acos
>5902	Identifier	phi
>5903	Identifier	phi
>5904	IdentifierDeclType	double
>5905	IdentifierDeclStatement	 
>5906	IdentifierDecl	theta = atan2 ( ray [ 2 ] , ray [ 0 ] )
>5907	AssignmentExpr	theta = atan2 ( ray [ 2 ] , ray [ 0 ] )
>5908	CallExpression	atan2 ( ray [ 2 ] , ray [ 0 ] )
>5909	ArgumentList	ray [ 2 ]
>5910	Argument	ray [ 0 ]
>5911	ArrayIndexing	ray [ 0 ]
>5912	PrimaryExpression	0
>5913	Identifier	ray
>5914	Argument	ray [ 2 ]
>5915	ArrayIndexing	ray [ 2 ]
>5916	PrimaryExpression	2
>5917	Identifier	ray
>5918	Callee	atan2
>5919	Identifier	atan2
>5920	Identifier	theta
>5921	Identifier	theta
>5922	IdentifierDeclType	double
>5923	IdentifierDeclStatement	 
>5924	IdentifierDecl	r = matrix_norm ( 3 , 1 , ray )
>5925	AssignmentExpr	r = matrix_norm ( 3 , 1 , ray )
>5926	CallExpression	matrix_norm ( 3 , 1 , ray )
>5927	ArgumentList	3
>5928	Argument	ray
>5929	Identifier	ray
>5930	Argument	1
>5931	PrimaryExpression	1
>5932	Argument	3
>5933	PrimaryExpression	3
>5934	Callee	matrix_norm
>5935	Identifier	matrix_norm
>5936	Identifier	r
>5937	Identifier	r
>5938	IdentifierDeclType	double
>5954	FunctionDef	CameraInfo 
>5955	ParameterList	double * ray
>5956	Parameter	 
>5957	Identifier	ray
>5958	ParameterType	double *
>5959	ReturnType	void
>5960	CompoundStatement	 
>5961	ExpressionStatement	 
>5962	CallExpression	Finalize ( )
>5963	ArgumentList	 
>5964	Callee	Finalize
>5965	Identifier	Finalize
>5966	ExpressionStatement	 
>5967	CallExpression	SetPosition ( pos )
>5968	ArgumentList	pos
>5969	Argument	pos
>5970	Identifier	pos
>5971	Callee	SetPosition
>5972	Identifier	SetPosition
>5973	ExpressionStatement	 
>5974	CallExpression	memcpy ( m_R , R , 9 * sizeof ( double ) )
>5975	ArgumentList	m_R
>5976	Argument	9 * sizeof ( double )
>5977	MultiplicativeExpression	9 * sizeof ( double )
>5978	SizeofExpr	sizeof ( double )
>5979	SizeofOperand	double
>5980	Sizeof	sizeof
>5981	PrimaryExpression	9
>5982	Argument	R
>5983	Identifier	R
>5984	Argument	m_R
>5985	Identifier	m_R
>5986	Callee	memcpy
>5987	Identifier	memcpy
>5988	ExpressionStatement	 
>5989	CallExpression	GetPosition ( pos )
>5990	ArgumentList	pos
>5991	Argument	pos
>5992	Identifier	pos
>5993	Callee	GetPosition
>5994	Identifier	GetPosition
>5995	IdentifierDeclStatement	 
>5996	IdentifierDecl	pos [ 3 ]
>5997	PrimaryExpression	3
>5998	Identifier	pos
>5999	IdentifierDeclType	double [ 3 ]
>6000	ExpressionStatement	 
>6001	CallExpression	SphToRot ( theta , phi , R )
>6002	ArgumentList	theta
>6003	Argument	R
>6004	Identifier	R
>6005	Argument	phi
>6006	Identifier	phi
>6007	Argument	theta
>6008	Identifier	theta
>6009	Callee	SphToRot
>6010	Identifier	SphToRot
>6011	IdentifierDeclStatement	 
>6012	IdentifierDecl	R [ 9 ]
>6013	PrimaryExpression	9
>6014	Identifier	R
>6015	IdentifierDeclType	double [ 9 ]
>6016	IdentifierDeclStatement	 
>6017	IdentifierDecl	phi = acos ( ray [ 1 ] / r )
>6018	AssignmentExpr	phi = acos ( ray [ 1 ] / r )
>6019	CallExpression	acos ( ray [ 1 ] / r )
>6020	ArgumentList	ray [ 1 ] / r
>6021	Argument	ray [ 1 ] / r
>6022	MultiplicativeExpression	ray [ 1 ] / r
>6023	Identifier	r
>6024	ArrayIndexing	ray [ 1 ]
>6025	PrimaryExpression	1
>6026	Identifier	ray
>6027	Callee	acos
>6028	Identifier	acos
>6029	Identifier	phi
>6030	Identifier	phi
>6031	IdentifierDeclType	double
>6032	IdentifierDeclStatement	 
>6033	IdentifierDecl	theta = atan2 ( ray [ 2 ] , ray [ 0 ] )
>6034	AssignmentExpr	theta = atan2 ( ray [ 2 ] , ray [ 0 ] )
>6035	CallExpression	atan2 ( ray [ 2 ] , ray [ 0 ] )
>6036	ArgumentList	ray [ 2 ]
>6037	Argument	ray [ 0 ]
>6038	ArrayIndexing	ray [ 0 ]
>6039	PrimaryExpression	0
>6040	Identifier	ray
>6041	Argument	ray [ 2 ]
>6042	ArrayIndexing	ray [ 2 ]
>6043	PrimaryExpression	2
>6044	Identifier	ray
>6045	Callee	atan2
>6046	Identifier	atan2
>6047	Identifier	theta
>6048	Identifier	theta
>6049	IdentifierDeclType	double
>6050	IdentifierDeclStatement	 
>6051	IdentifierDecl	r = matrix_norm ( 3 , 1 , ray )
>6052	AssignmentExpr	r = matrix_norm ( 3 , 1 , ray )
>6053	CallExpression	matrix_norm ( 3 , 1 , ray )
>6054	ArgumentList	3
>6055	Argument	ray
>6056	Identifier	ray
>6057	Argument	1
>6058	PrimaryExpression	1
>6059	Argument	3
>6060	PrimaryExpression	3
>6061	Callee	matrix_norm
>6062	Identifier	matrix_norm
>6063	Identifier	r
>6064	Identifier	r
>6065	IdentifierDeclType	double
>6080	FunctionDef	CameraInfo 
>6081	ParameterList	 
>6082	ReturnType	BoundingBox
>6083	CompoundStatement	 
>6084	ReturnStatement	 
>6085	CallExpression	BoundingBox ( - 0.5 * w , - 0.5 * h , 0.5 * w , 0.5 * h )
>6086	ArgumentList	- 0.5 * w
>6087	Argument	0.5 * h
>6088	MultiplicativeExpression	0.5 * h
>6089	Identifier	h
>6090	PrimaryExpression	0.5
>6091	Argument	0.5 * w
>6092	MultiplicativeExpression	0.5 * w
>6093	Identifier	w
>6094	PrimaryExpression	0.5
>6095	Argument	- 0.5 * h
>6096	MultiplicativeExpression	- 0.5 * h
>6097	Identifier	h
>6098	UnaryOp	- 0.5
>6099	PrimaryExpression	0.5
>6100	UnaryOperator	-
>6101	Argument	- 0.5 * w
>6102	MultiplicativeExpression	- 0.5 * w
>6103	Identifier	w
>6104	UnaryOp	- 0.5
>6105	PrimaryExpression	0.5
>6106	UnaryOperator	-
>6107	Callee	BoundingBox
>6108	Identifier	BoundingBox
>6109	IdentifierDeclStatement	 
>6110	IdentifierDecl	h = m_height
>6111	AssignmentExpr	h = m_height
>6112	Identifier	m_height
>6113	Identifier	m_height
>6114	Identifier	h
>6115	IdentifierDeclType	int
>6116	IdentifierDecl	w = m_width
>6117	AssignmentExpr	w = m_width
>6118	Identifier	m_width
>6119	Identifier	m_width
>6120	Identifier	w
>6121	IdentifierDeclType	int
>6130	FunctionDef	CameraInfo 
>6131	ParameterList	double * view
>6132	Parameter	 
>6133	Identifier	view
>6134	ParameterType	double *
>6135	ReturnType	void
>6136	CompoundStatement	 
>6137	ExpressionStatement	 
>6138	AssignmentExpr	view [ 2 ] = - m_R [ 8 ]
>6139	UnaryOp	- m_R [ 8 ]
>6140	ArrayIndexing	m_R [ 8 ]
>6141	PrimaryExpression	8
>6142	Identifier	m_R
>6143	UnaryOperator	-
>6144	ArrayIndexing	view [ 2 ]
>6145	PrimaryExpression	2
>6146	Identifier	view
>6147	ExpressionStatement	 
>6148	AssignmentExpr	view [ 1 ] = - m_R [ 7 ]
>6149	UnaryOp	- m_R [ 7 ]
>6150	ArrayIndexing	m_R [ 7 ]
>6151	PrimaryExpression	7
>6152	Identifier	m_R
>6153	UnaryOperator	-
>6154	ArrayIndexing	view [ 1 ]
>6155	PrimaryExpression	1
>6156	Identifier	view
>6157	ExpressionStatement	 
>6158	AssignmentExpr	view [ 0 ] = - m_R [ 6 ]
>6159	UnaryOp	- m_R [ 6 ]
>6160	ArrayIndexing	m_R [ 6 ]
>6161	PrimaryExpression	6
>6162	Identifier	m_R
>6163	UnaryOperator	-
>6164	ArrayIndexing	view [ 0 ]
>6165	PrimaryExpression	0
>6166	Identifier	view
>6174	FunctionDef	CameraInfo 
>6175	ParameterList	 
>6176	ReturnType	double
>6177	CompoundStatement	 
>6178	IfStatement	if ( R [ 3 ] < 0.0 )
>6179	ElseStatement	else
>6180	ReturnStatement	 
>6181	Identifier	angle
>6182	ReturnStatement	 
>6183	UnaryOp	- angle
>6184	Identifier	angle
>6185	UnaryOperator	-
>6186	Condition	 
>6187	RelationalExpression	R [ 3 ] < 0.0
>6188	PrimaryExpression	0.0
>6189	ArrayIndexing	R [ 3 ]
>6190	PrimaryExpression	3
>6191	Identifier	R
>6192	IdentifierDeclStatement	 
>6193	IdentifierDecl	angle = acos ( c_twist )
>6194	AssignmentExpr	angle = acos ( c_twist )
>6195	CallExpression	acos ( c_twist )
>6196	ArgumentList	c_twist
>6197	Argument	c_twist
>6198	Identifier	c_twist
>6199	Callee	acos
>6200	Identifier	acos
>6201	Identifier	angle
>6202	Identifier	angle
>6203	IdentifierDeclType	double
>6204	ExpressionStatement	 
>6205	AssignmentExpr	c_twist = CLAMP ( c_twist , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>6206	CallExpression	CLAMP ( c_twist , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>6207	ArgumentList	c_twist
>6208	Argument	1.0 - 1.0e-8
>6209	AdditiveExpression	1.0 - 1.0e-8
>6210	PrimaryExpression	1.0e-8
>6211	PrimaryExpression	1.0
>6212	Argument	- 1.0 + 1.0e-8
>6213	AdditiveExpression	- 1.0 + 1.0e-8
>6214	PrimaryExpression	1.0e-8
>6215	UnaryOp	- 1.0
>6216	PrimaryExpression	1.0
>6217	UnaryOperator	-
>6218	Argument	c_twist
>6219	Identifier	c_twist
>6220	Callee	CLAMP
>6221	Identifier	CLAMP
>6222	Identifier	c_twist
>6223	IdentifierDeclStatement	 
>6224	IdentifierDecl	c_twist = ( R [ 0 ] * R [ 8 ] - R [ 6 ] * R [ 2 ] ) / sqrt ( 1 - R [ 5 ] * R [ 5 ] )
>6225	AssignmentExpr	c_twist = ( R [ 0 ] * R [ 8 ] - R [ 6 ] * R [ 2 ] ) / sqrt ( 1 - R [ 5 ] * R [ 5 ] )
>6226	MultiplicativeExpression	( R [ 0 ] * R [ 8 ] - R [ 6 ] * R [ 2 ] ) / sqrt ( 1 - R [ 5 ] * R [ 5 ] )
>6227	CallExpression	sqrt ( 1 - R [ 5 ] * R [ 5 ] )
>6228	ArgumentList	1 - R [ 5 ] * R [ 5 ]
>6229	Argument	1 - R [ 5 ] * R [ 5 ]
>6230	AdditiveExpression	1 - R [ 5 ] * R [ 5 ]
>6231	MultiplicativeExpression	R [ 5 ] * R [ 5 ]
>6232	ArrayIndexing	R [ 5 ]
>6233	PrimaryExpression	5
>6234	Identifier	R
>6235	ArrayIndexing	R [ 5 ]
>6236	PrimaryExpression	5
>6237	Identifier	R
>6238	PrimaryExpression	1
>6239	Callee	sqrt
>6240	Identifier	sqrt
>6241	AdditiveExpression	R [ 0 ] * R [ 8 ] - R [ 6 ] * R [ 2 ]
>6242	MultiplicativeExpression	R [ 6 ] * R [ 2 ]
>6243	ArrayIndexing	R [ 2 ]
>6244	PrimaryExpression	2
>6245	Identifier	R
>6246	ArrayIndexing	R [ 6 ]
>6247	PrimaryExpression	6
>6248	Identifier	R
>6249	MultiplicativeExpression	R [ 0 ] * R [ 8 ]
>6250	ArrayIndexing	R [ 8 ]
>6251	PrimaryExpression	8
>6252	Identifier	R
>6253	ArrayIndexing	R [ 0 ]
>6254	PrimaryExpression	0
>6255	Identifier	R
>6256	Identifier	c_twist
>6257	Identifier	c_twist
>6258	IdentifierDeclType	double
>6259	ExpressionStatement	 
>6260	CallExpression	GetPose ( R )
>6261	ArgumentList	R
>6262	Argument	R
>6263	Identifier	R
>6264	Callee	GetPose
>6265	Identifier	GetPose
>6266	IdentifierDeclStatement	 
>6267	IdentifierDecl	R [ 9 ]
>6268	PrimaryExpression	9
>6269	Identifier	R
>6270	IdentifierDeclType	double [ 9 ]
>6281	FunctionDef	CameraInfo 
>6282	ParameterList	double * plane
>6283	Parameter	 
>6284	Identifier	plane
>6285	ParameterType	double *
>6286	ReturnType	void
>6287	CompoundStatement	 
>6288	ExpressionStatement	 
>6289	AssignmentExpr	plane [ 3 ] = - dot
>6290	UnaryOp	- dot
>6291	Identifier	dot
>6292	UnaryOperator	-
>6293	ArrayIndexing	plane [ 3 ]
>6294	PrimaryExpression	3
>6295	Identifier	plane
>6296	ExpressionStatement	 
>6297	AssignmentExpr	plane [ 2 ] = v [ 2 ]
>6298	ArrayIndexing	v [ 2 ]
>6299	PrimaryExpression	2
>6300	Identifier	v
>6301	ArrayIndexing	plane [ 2 ]
>6302	PrimaryExpression	2
>6303	Identifier	plane
>6304	ExpressionStatement	 
>6305	AssignmentExpr	plane [ 1 ] = v [ 1 ]
>6306	ArrayIndexing	v [ 1 ]
>6307	PrimaryExpression	1
>6308	Identifier	v
>6309	ArrayIndexing	plane [ 1 ]
>6310	PrimaryExpression	1
>6311	Identifier	plane
>6312	ExpressionStatement	 
>6313	AssignmentExpr	plane [ 0 ] = v [ 0 ]
>6314	ArrayIndexing	v [ 0 ]
>6315	PrimaryExpression	0
>6316	Identifier	v
>6317	ArrayIndexing	plane [ 0 ]
>6318	PrimaryExpression	0
>6319	Identifier	plane
>6320	ExpressionStatement	 
>6321	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , v , pos , & dot )
>6322	ArgumentList	1
>6323	Argument	& dot
>6324	UnaryOp	& dot
>6325	Identifier	dot
>6326	UnaryOperator	&
>6327	Argument	pos
>6328	Identifier	pos
>6329	Argument	v
>6330	Identifier	v
>6331	Argument	1
>6332	PrimaryExpression	1
>6333	Argument	3
>6334	PrimaryExpression	3
>6335	Argument	3
>6336	PrimaryExpression	3
>6337	Argument	1
>6338	PrimaryExpression	1
>6339	Callee	matrix_product
>6340	Identifier	matrix_product
>6341	IdentifierDeclStatement	 
>6342	IdentifierDecl	dot
>6343	Identifier	dot
>6344	IdentifierDeclType	double
>6345	ExpressionStatement	 
>6346	AssignmentExpr	pos [ 2 ] += 1.0e-6 * v [ 2 ]
>6347	MultiplicativeExpression	1.0e-6 * v [ 2 ]
>6348	ArrayIndexing	v [ 2 ]
>6349	PrimaryExpression	2
>6350	Identifier	v
>6351	PrimaryExpression	1.0e-6
>6352	ArrayIndexing	pos [ 2 ]
>6353	PrimaryExpression	2
>6354	Identifier	pos
>6355	ExpressionStatement	 
>6356	AssignmentExpr	pos [ 1 ] += 1.0e-6 * v [ 1 ]
>6357	MultiplicativeExpression	1.0e-6 * v [ 1 ]
>6358	ArrayIndexing	v [ 1 ]
>6359	PrimaryExpression	1
>6360	Identifier	v
>6361	PrimaryExpression	1.0e-6
>6362	ArrayIndexing	pos [ 1 ]
>6363	PrimaryExpression	1
>6364	Identifier	pos
>6365	ExpressionStatement	 
>6366	AssignmentExpr	pos [ 0 ] += 1.0e-6 * v [ 0 ]
>6367	MultiplicativeExpression	1.0e-6 * v [ 0 ]
>6368	ArrayIndexing	v [ 0 ]
>6369	PrimaryExpression	0
>6370	Identifier	v
>6371	PrimaryExpression	1.0e-6
>6372	ArrayIndexing	pos [ 0 ]
>6373	PrimaryExpression	0
>6374	Identifier	pos
>6375	ExpressionStatement	 
>6376	CallExpression	GetPosition ( pos )
>6377	ArgumentList	pos
>6378	Argument	pos
>6379	Identifier	pos
>6380	Callee	GetPosition
>6381	Identifier	GetPosition
>6382	IdentifierDeclStatement	 
>6383	IdentifierDecl	pos [ 3 ]
>6384	PrimaryExpression	3
>6385	Identifier	pos
>6386	IdentifierDeclType	double [ 3 ]
>6387	ExpressionStatement	 
>6388	CallExpression	GetViewDirection ( v )
>6389	ArgumentList	v
>6390	Argument	v
>6391	Identifier	v
>6392	Callee	GetViewDirection
>6393	Identifier	GetViewDirection
>6394	IdentifierDeclStatement	 
>6395	IdentifierDecl	v [ 3 ]
>6396	PrimaryExpression	3
>6397	Identifier	v
>6398	IdentifierDeclType	double [ 3 ]
>6410	FunctionDef	CameraInfo 
>6411	ParameterList	const double * p
>6412	Parameter	 
>6413	Identifier	p
>6414	ParameterType	const double *
>6415	ReturnType	bool
>6416	CompoundStatement	 
>6417	ReturnStatement	 
>6418	AndExpression	proj [ 0 ] > - 0.5 * m_width && proj [ 0 ] < 0.5 * m_width && proj [ 1 ] < 0.5 * m_height && proj [ \
>6419	AndExpression	proj [ 0 ] < 0.5 * m_width && proj [ 1 ] < 0.5 * m_height && proj [ 1 ] > - 0.5 * m_height
>6420	AndExpression	proj [ 1 ] < 0.5 * m_height && proj [ 1 ] > - 0.5 * m_height
>6421	RelationalExpression	proj [ 1 ] > - 0.5 * m_height
>6422	MultiplicativeExpression	- 0.5 * m_height
>6423	Identifier	m_height
>6424	UnaryOp	- 0.5
>6425	PrimaryExpression	0.5
>6426	UnaryOperator	-
>6427	ArrayIndexing	proj [ 1 ]
>6428	PrimaryExpression	1
>6429	Identifier	proj
>6430	RelationalExpression	proj [ 1 ] < 0.5 * m_height
>6431	MultiplicativeExpression	0.5 * m_height
>6432	Identifier	m_height
>6433	PrimaryExpression	0.5
>6434	ArrayIndexing	proj [ 1 ]
>6435	PrimaryExpression	1
>6436	Identifier	proj
>6437	RelationalExpression	proj [ 0 ] < 0.5 * m_width
>6438	MultiplicativeExpression	0.5 * m_width
>6439	Identifier	m_width
>6440	PrimaryExpression	0.5
>6441	ArrayIndexing	proj [ 0 ]
>6442	PrimaryExpression	0
>6443	Identifier	proj
>6444	RelationalExpression	proj [ 0 ] > - 0.5 * m_width
>6445	MultiplicativeExpression	- 0.5 * m_width
>6446	Identifier	m_width
>6447	UnaryOp	- 0.5
>6448	PrimaryExpression	0.5
>6449	UnaryOperator	-
>6450	ArrayIndexing	proj [ 0 ]
>6451	PrimaryExpression	0
>6452	Identifier	proj
>6453	IfStatement	if ( ! in_front )
>6454	ReturnStatement	 
>6455	Identifier	false
>6456	Condition	 
>6457	UnaryOp	! in_front
>6458	Identifier	in_front
>6459	UnaryOperator	!
>6460	IdentifierDeclStatement	 
>6461	IdentifierDecl	in_front = Project ( p , proj )
>6462	AssignmentExpr	in_front = Project ( p , proj )
>6463	CallExpression	Project ( p , proj )
>6464	ArgumentList	p
>6465	Argument	proj
>6466	Identifier	proj
>6467	Argument	p
>6468	Identifier	p
>6469	Callee	Project
>6470	Identifier	Project
>6471	Identifier	in_front
>6472	Identifier	in_front
>6473	IdentifierDeclType	bool
>6474	IdentifierDeclStatement	 
>6475	IdentifierDecl	proj [ 2 ]
>6476	PrimaryExpression	2
>6477	Identifier	proj
>6478	IdentifierDeclType	double [ 2 ]
>6490	FunctionDef	CameraInfo 
>6491	ParameterList	double * up
>6492	Parameter	 
>6493	Identifier	up
>6494	ParameterType	double *
>6495	ReturnType	CameraInfo
>6496	CompoundStatement	 
>6497	ReturnStatement	 
>6498	Identifier	up_camera
>6499	IfStatement	if ( up_image_proj [ 0 ] > 1.0e-4 )
>6500	ExpressionStatement	 
>6501	CallExpression	printf ( \"Error in up camera computation\n\" )
>6502	ArgumentList	\"Error in up camera computation\n\"
>6503	Argument	\"Error in up camera computation\n\"
>6504	PrimaryExpression	\"Error in up camera computation\n\"
>6505	Callee	printf
>6506	Identifier	printf
>6507	Condition	 
>6508	RelationalExpression	up_image_proj [ 0 ] > 1.0e-4
>6509	PrimaryExpression	1.0e-4
>6510	ArrayIndexing	up_image_proj [ 0 ]
>6511	PrimaryExpression	0
>6512	Identifier	up_image_proj
>6513	ExpressionStatement	 
>6514	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Rnew , up , up_image_proj )
>6515	ArgumentList	3
>6516	Argument	up_image_proj
>6517	Identifier	up_image_proj
>6518	Argument	up
>6519	Identifier	up
>6520	Argument	Rnew
>6521	Identifier	Rnew
>6522	Argument	1
>6523	PrimaryExpression	1
>6524	Argument	3
>6525	PrimaryExpression	3
>6526	Argument	3
>6527	PrimaryExpression	3
>6528	Argument	3
>6529	PrimaryExpression	3
>6530	Callee	matrix_product
>6531	Identifier	matrix_product
>6532	ExpressionStatement	 
>6533	CallExpression	up_camera . Finalize ( )
>6534	ArgumentList	 
>6535	Callee	up_camera . Finalize
>6536	MemberAccess	up_camera . Finalize
>6537	Identifier	Finalize
>6538	Identifier	up_camera
>6539	ExpressionStatement	 
>6540	CallExpression	up_camera . SetPosition ( pos )
>6541	ArgumentList	pos
>6542	Argument	pos
>6543	Identifier	pos
>6544	Callee	up_camera . SetPosition
>6545	MemberAccess	up_camera . SetPosition
>6546	Identifier	SetPosition
>6547	Identifier	up_camera
>6548	ExpressionStatement	 
>6549	CallExpression	up_camera . SetPose ( RnewT )
>6550	ArgumentList	RnewT
>6551	Argument	RnewT
>6552	Identifier	RnewT
>6553	Callee	up_camera . SetPose
>6554	MemberAccess	up_camera . SetPose
>6555	Identifier	SetPose
>6556	Identifier	up_camera
>6557	IdentifierDeclStatement	 
>6558	IdentifierDecl	up_camera = * this
>6559	AssignmentExpr	up_camera = * this
>6560	UnaryOp	* this
>6561	Identifier	this
>6562	UnaryOperator	*
>6563	Identifier	up_camera
>6564	Identifier	up_camera
>6565	IdentifierDeclType	CameraInfo
>6566	ExpressionStatement	 
>6567	CallExpression	matrix_transpose ( 3 , 3 , Rnew , RnewT )
>6568	ArgumentList	3
>6569	Argument	RnewT
>6570	Identifier	RnewT
>6571	Argument	Rnew
>6572	Identifier	Rnew
>6573	Argument	3
>6574	PrimaryExpression	3
>6575	Argument	3
>6576	PrimaryExpression	3
>6577	Callee	matrix_transpose
>6578	Identifier	matrix_transpose
>6579	IdentifierDeclStatement	 
>6580	IdentifierDecl	RnewT [ 9 ]
>6581	PrimaryExpression	9
>6582	Identifier	RnewT
>6583	IdentifierDeclType	double [ 9 ]
>6584	ExpressionStatement	 
>6585	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 3 , Rroll , ( double * ) m_R , Rnew )
>6586	ArgumentList	3
>6587	Argument	Rnew
>6588	Identifier	Rnew
>6589	Argument	( double * ) m_R
>6590	CastExpression	( double * ) m_R
>6591	Identifier	m_R
>6592	CastTarget	double *
>6593	Argument	Rroll
>6594	Identifier	Rroll
>6595	Argument	3
>6596	PrimaryExpression	3
>6597	Argument	3
>6598	PrimaryExpression	3
>6599	Argument	3
>6600	PrimaryExpression	3
>6601	Argument	3
>6602	PrimaryExpression	3
>6603	Callee	matrix_transpose_product
>6604	Identifier	matrix_transpose_product
>6605	IdentifierDeclStatement	 
>6606	IdentifierDecl	Rnew [ 9 ]
>6607	PrimaryExpression	9
>6608	Identifier	Rnew
>6609	IdentifierDeclType	double [ 9 ]
>6610	ExpressionStatement	 
>6611	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , Rz , ( double * ) m_R , Rnew )
>6612	ArgumentList	3
>6613	Argument	Rnew
>6614	Identifier	Rnew
>6615	Argument	( double * ) m_R
>6616	CastExpression	( double * ) m_R
>6617	Identifier	m_R
>6618	CastTarget	double *
>6619	Argument	Rz
>6620	Identifier	Rz
>6621	Argument	3
>6622	PrimaryExpression	3
>6623	Argument	3
>6624	PrimaryExpression	3
>6625	Argument	3
>6626	PrimaryExpression	3
>6627	Argument	3
>6628	PrimaryExpression	3
>6629	Callee	matrix_product
>6630	Identifier	matrix_product
>6631	IdentifierDeclStatement	 
>6632	IdentifierDecl	Rnew [ 9 ]
>6633	PrimaryExpression	9
>6634	Identifier	Rnew
>6635	IdentifierDeclType	double [ 9 ]
>6636	IdentifierDeclStatement	 
>6637	IdentifierDecl	Rz [ 9 ] = { cos ( angle ) , - sin ( angle ) , 0.0 , sin ( angle ) , cos ( angle ) , 0.0 , 0.0 , 0.0 , 1.0 }
>6638	AssignmentExpr	Rz [ 9 ] = { cos ( angle ) , - sin ( angle ) , 0.0 , sin ( angle ) , cos ( angle ) , 0.0 , 0.0 , 0.0 , \
>6639	InitializerList	cos ( angle )
>6640	PrimaryExpression	1.0
>6641	PrimaryExpression	0.0
>6642	PrimaryExpression	0.0
>6643	PrimaryExpression	0.0
>6644	CallExpression	cos ( angle )
>6645	ArgumentList	angle
>6646	Argument	angle
>6647	Identifier	angle
>6648	Callee	cos
>6649	Identifier	cos
>6650	CallExpression	sin ( angle )
>6651	ArgumentList	angle
>6652	Argument	angle
>6653	Identifier	angle
>6654	Callee	sin
>6655	Identifier	sin
>6656	PrimaryExpression	0.0
>6657	UnaryOp	- sin ( angle )
>6658	CallExpression	sin ( angle )
>6659	ArgumentList	angle
>6660	Argument	angle
>6661	Identifier	angle
>6662	Callee	sin
>6663	Identifier	sin
>6664	UnaryOperator	-
>6665	CallExpression	cos ( angle )
>6666	ArgumentList	angle
>6667	Argument	angle
>6668	Identifier	angle
>6669	Callee	cos
>6670	Identifier	cos
>6671	Identifier	Rz
>6672	PrimaryExpression	9
>6673	Identifier	Rz
>6674	IdentifierDeclType	double [ 9 ]
>6675	ExpressionStatement	 
>6676	CallExpression	axis_angle_to_matrix ( cross , - angle , Rroll )
>6677	ArgumentList	cross
>6678	Argument	Rroll
>6679	Identifier	Rroll
>6680	Argument	- angle
>6681	UnaryOp	- angle
>6682	Identifier	angle
>6683	UnaryOperator	-
>6684	Argument	cross
>6685	Identifier	cross
>6686	Callee	axis_angle_to_matrix
>6687	Identifier	axis_angle_to_matrix
>6688	IdentifierDeclStatement	 
>6689	IdentifierDecl	Rroll [ 9 ]
>6690	PrimaryExpression	9
>6691	Identifier	Rroll
>6692	IdentifierDeclType	double [ 9 ]
>6693	ExpressionStatement	 
>6694	CallExpression	matrix_scale ( 3 , 1 , cross , 1.0 / mag , cross )
>6695	ArgumentList	3
>6696	Argument	cross
>6697	Identifier	cross
>6698	Argument	1.0 / mag
>6699	MultiplicativeExpression	1.0 / mag
>6700	Identifier	mag
>6701	PrimaryExpression	1.0
>6702	Argument	cross
>6703	Identifier	cross
>6704	Argument	1
>6705	PrimaryExpression	1
>6706	Argument	3
>6707	PrimaryExpression	3
>6708	Callee	matrix_scale
>6709	Identifier	matrix_scale
>6710	ExpressionStatement	 
>6711	AssignmentExpr	mag = matrix_norm ( 3 , 1 , cross )
>6712	CallExpression	matrix_norm ( 3 , 1 , cross )
>6713	ArgumentList	3
>6714	Argument	cross
>6715	Identifier	cross
>6716	Argument	1
>6717	PrimaryExpression	1
>6718	Argument	3
>6719	PrimaryExpression	3
>6720	Callee	matrix_norm
>6721	Identifier	matrix_norm
>6722	Identifier	mag
>6723	ExpressionStatement	 
>6724	CallExpression	matrix_cross ( up_image_proj , yaxis , cross )
>6725	ArgumentList	up_image_proj
>6726	Argument	cross
>6727	Identifier	cross
>6728	Argument	yaxis
>6729	Identifier	yaxis
>6730	Argument	up_image_proj
>6731	Identifier	up_image_proj
>6732	Callee	matrix_cross
>6733	Identifier	matrix_cross
>6734	IdentifierDeclStatement	 
>6735	IdentifierDecl	cross [ 3 ]
>6736	PrimaryExpression	3
>6737	Identifier	cross
>6738	IdentifierDeclType	double [ 3 ]
>6739	IdentifierDeclStatement	 
>6740	IdentifierDecl	angle = acos ( dot )
>6741	AssignmentExpr	angle = acos ( dot )
>6742	CallExpression	acos ( dot )
>6743	ArgumentList	dot
>6744	Argument	dot
>6745	Identifier	dot
>6746	Callee	acos
>6747	Identifier	acos
>6748	Identifier	angle
>6749	Identifier	angle
>6750	IdentifierDeclType	double
>6751	ExpressionStatement	 
>6752	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , up_image_proj , yaxis , & dot )
>6753	ArgumentList	1
>6754	Argument	& dot
>6755	UnaryOp	& dot
>6756	Identifier	dot
>6757	UnaryOperator	&
>6758	Argument	yaxis
>6759	Identifier	yaxis
>6760	Argument	up_image_proj
>6761	Identifier	up_image_proj
>6762	Argument	1
>6763	PrimaryExpression	1
>6764	Argument	3
>6765	PrimaryExpression	3
>6766	Argument	3
>6767	PrimaryExpression	3
>6768	Argument	1
>6769	PrimaryExpression	1
>6770	Callee	matrix_product
>6771	Identifier	matrix_product
>6772	IdentifierDeclStatement	 
>6773	IdentifierDecl	dot
>6774	Identifier	dot
>6775	IdentifierDeclType	double
>6776	IdentifierDeclStatement	 
>6777	IdentifierDecl	yaxis [ 3 ] = { 0.0 , 1.0 , 0.0 }
>6778	AssignmentExpr	yaxis [ 3 ] = { 0.0 , 1.0 , 0.0 }
>6779	InitializerList	0.0
>6780	PrimaryExpression	0.0
>6781	PrimaryExpression	1.0
>6782	PrimaryExpression	0.0
>6783	Identifier	yaxis
>6784	PrimaryExpression	3
>6785	Identifier	yaxis
>6786	IdentifierDeclType	double [ 3 ]
>6787	ExpressionStatement	 
>6788	CallExpression	matrix_scale ( 3 , 1 , up_image_proj , 1.0 / mag , up_image_proj )
>6789	ArgumentList	3
>6790	Argument	up_image_proj
>6791	Identifier	up_image_proj
>6792	Argument	1.0 / mag
>6793	MultiplicativeExpression	1.0 / mag
>6794	Identifier	mag
>6795	PrimaryExpression	1.0
>6796	Argument	up_image_proj
>6797	Identifier	up_image_proj
>6798	Argument	1
>6799	PrimaryExpression	1
>6800	Argument	3
>6801	PrimaryExpression	3
>6802	Callee	matrix_scale
>6803	Identifier	matrix_scale
>6804	IdentifierDeclStatement	 
>6805	IdentifierDecl	mag = matrix_norm ( 3 , 1 , up_image_proj )
>6806	AssignmentExpr	mag = matrix_norm ( 3 , 1 , up_image_proj )
>6807	CallExpression	matrix_norm ( 3 , 1 , up_image_proj )
>6808	ArgumentList	3
>6809	Argument	up_image_proj
>6810	Identifier	up_image_proj
>6811	Argument	1
>6812	PrimaryExpression	1
>6813	Argument	3
>6814	PrimaryExpression	3
>6815	Callee	matrix_norm
>6816	Identifier	matrix_norm
>6817	Identifier	mag
>6818	Identifier	mag
>6819	IdentifierDeclType	double
>6820	IdentifierDeclStatement	 
>6821	IdentifierDecl	up_image_proj [ 3 ] = { up_image [ 0 ] , up_image [ 1 ] , 0.0 }
>6822	AssignmentExpr	up_image_proj [ 3 ] = { up_image [ 0 ] , up_image [ 1 ] , 0.0 }
>6823	InitializerList	up_image [ 0 ]
>6824	PrimaryExpression	0.0
>6825	ArrayIndexing	up_image [ 1 ]
>6826	PrimaryExpression	1
>6827	Identifier	up_image
>6828	ArrayIndexing	up_image [ 0 ]
>6829	PrimaryExpression	0
>6830	Identifier	up_image
>6831	Identifier	up_image_proj
>6832	PrimaryExpression	3
>6833	Identifier	up_image_proj
>6834	IdentifierDeclType	double [ 3 ]
>6835	ExpressionStatement	 
>6836	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , ( double * ) m_R , up , up_image )
>6837	ArgumentList	3
>6838	Argument	up_image
>6839	Identifier	up_image
>6840	Argument	up
>6841	Identifier	up
>6842	Argument	( double * ) m_R
>6843	CastExpression	( double * ) m_R
>6844	Identifier	m_R
>6845	CastTarget	double *
>6846	Argument	1
>6847	PrimaryExpression	1
>6848	Argument	3
>6849	PrimaryExpression	3
>6850	Argument	3
>6851	PrimaryExpression	3
>6852	Argument	3
>6853	PrimaryExpression	3
>6854	Callee	matrix_product
>6855	Identifier	matrix_product
>6856	IdentifierDeclStatement	 
>6857	IdentifierDecl	up_image [ 3 ]
>6858	PrimaryExpression	3
>6859	Identifier	up_image
>6860	IdentifierDeclType	double [ 3 ]
>6861	ExpressionStatement	 
>6862	CallExpression	GetPosition ( pos )
>6863	ArgumentList	pos
>6864	Argument	pos
>6865	Identifier	pos
>6866	Callee	GetPosition
>6867	Identifier	GetPosition
>6868	IdentifierDeclStatement	 
>6869	IdentifierDecl	pos [ 3 ]
>6870	PrimaryExpression	3
>6871	Identifier	pos
>6872	IdentifierDeclType	double [ 3 ]
>6900	FunctionDef	CameraInfo 
>6901	ParameterList	FILE * f
>6902	Parameter	 
>6903	Identifier	f
>6904	ParameterType	FILE *
>6905	ReturnType	void
>6906	CompoundStatement	 
>6907	ExpressionStatement	 
>6908	CallExpression	fscanf ( f , \"%d %d %d %d %d %d %d %d\n\" , m_links + DIRECTION_LEFT , m_links + DIRECTION_RIGHT , m_links + DIRECTION_\
>6909	ArgumentList	f
>6910	Argument	m_links + DIRECTION_ZOOM_IN
>6911	AdditiveExpression	m_links + DIRECTION_ZOOM_IN
>6912	Identifier	DIRECTION_ZOOM_IN
>6913	Identifier	m_links
>6914	Argument	m_links + DIRECTION_ZOOM_OUT
>6915	AdditiveExpression	m_links + DIRECTION_ZOOM_OUT
>6916	Identifier	DIRECTION_ZOOM_OUT
>6917	Identifier	m_links
>6918	Argument	m_links + DIRECTION_DOWN
>6919	AdditiveExpression	m_links + DIRECTION_DOWN
>6920	Identifier	DIRECTION_DOWN
>6921	Identifier	m_links
>6922	Argument	m_links + DIRECTION_UP
>6923	AdditiveExpression	m_links + DIRECTION_UP
>6924	Identifier	DIRECTION_UP
>6925	Identifier	m_links
>6926	Argument	m_links + DIRECTION_BACKWARD
>6927	AdditiveExpression	m_links + DIRECTION_BACKWARD
>6928	Identifier	DIRECTION_BACKWARD
>6929	Identifier	m_links
>6930	Argument	m_links + DIRECTION_FORWARD
>6931	AdditiveExpression	m_links + DIRECTION_FORWARD
>6932	Identifier	DIRECTION_FORWARD
>6933	Identifier	m_links
>6934	Argument	m_links + DIRECTION_RIGHT
>6935	AdditiveExpression	m_links + DIRECTION_RIGHT
>6936	Identifier	DIRECTION_RIGHT
>6937	Identifier	m_links
>6938	Argument	m_links + DIRECTION_LEFT
>6939	AdditiveExpression	m_links + DIRECTION_LEFT
>6940	Identifier	DIRECTION_LEFT
>6941	Identifier	m_links
>6942	Argument	\"%d %d %d %d %d %d %d %d\n\"
>6943	PrimaryExpression	\"%d %d %d %d %d %d %d %d\n\"
>6944	Argument	f
>6945	Identifier	f
>6946	Callee	fscanf
>6947	Identifier	fscanf
>6961	FunctionDef	CameraInfo 
>6962	ParameterList	FILE * f
>6963	Parameter	 
>6964	Identifier	f
>6965	ParameterType	FILE *
>6966	ReturnType	void
>6967	CompoundStatement	 
>6968	ExpressionStatement	 
>6969	CallExpression	fprintf ( f , \"%d %d %d %d %d %d %d %d\n\" , m_links [ DIRECTION_LEFT ] , m_links [ DIRECTION_RIGHT ] , m_links [ \
>6970	ArgumentList	f
>6971	Argument	m_links [ DIRECTION_ZOOM_IN ]
>6972	ArrayIndexing	m_links [ DIRECTION_ZOOM_IN ]
>6973	Identifier	DIRECTION_ZOOM_IN
>6974	Identifier	m_links
>6975	Argument	m_links [ DIRECTION_ZOOM_OUT ]
>6976	ArrayIndexing	m_links [ DIRECTION_ZOOM_OUT ]
>6977	Identifier	DIRECTION_ZOOM_OUT
>6978	Identifier	m_links
>6979	Argument	m_links [ DIRECTION_DOWN ]
>6980	ArrayIndexing	m_links [ DIRECTION_DOWN ]
>6981	Identifier	DIRECTION_DOWN
>6982	Identifier	m_links
>6983	Argument	m_links [ DIRECTION_UP ]
>6984	ArrayIndexing	m_links [ DIRECTION_UP ]
>6985	Identifier	DIRECTION_UP
>6986	Identifier	m_links
>6987	Argument	m_links [ DIRECTION_BACKWARD ]
>6988	ArrayIndexing	m_links [ DIRECTION_BACKWARD ]
>6989	Identifier	DIRECTION_BACKWARD
>6990	Identifier	m_links
>6991	Argument	m_links [ DIRECTION_FORWARD ]
>6992	ArrayIndexing	m_links [ DIRECTION_FORWARD ]
>6993	Identifier	DIRECTION_FORWARD
>6994	Identifier	m_links
>6995	Argument	m_links [ DIRECTION_RIGHT ]
>6996	ArrayIndexing	m_links [ DIRECTION_RIGHT ]
>6997	Identifier	DIRECTION_RIGHT
>6998	Identifier	m_links
>6999	Argument	m_links [ DIRECTION_LEFT ]
>7000	ArrayIndexing	m_links [ DIRECTION_LEFT ]
>7001	Identifier	DIRECTION_LEFT
>7002	Identifier	m_links
>7003	Argument	\"%d %d %d %d %d %d %d %d\n\"
>7004	PrimaryExpression	\"%d %d %d %d %d %d %d %d\n\"
>7005	Argument	f
>7006	Identifier	f
>7007	Callee	fprintf
>7008	Identifier	fprintf
>7031	FunctionDef	CameraInfo 
>7032	ParameterList	FILE * f
>7033	Parameter	 
>7034	Identifier	f
>7035	ParameterType	FILE *
>7036	ReturnType	void
>7037	CompoundStatement	 
>7038	IfStatement	if ( m_adjusted )
>7039	ElseStatement	else
>7040	CompoundStatement	 
>7041	ExpressionStatement	 
>7042	CallExpression	fprintf ( f , \"0.0 0.0 0.0\n\" )
>7043	ArgumentList	f
>7044	Argument	\"0.0 0.0 0.0\n\"
>7045	PrimaryExpression	\"0.0 0.0 0.0\n\"
>7046	Argument	f
>7047	Identifier	f
>7048	Callee	fprintf
>7049	Identifier	fprintf
>7050	CompoundStatement	 
>7051	ExpressionStatement	 
>7052	CallExpression	fprintf ( f , \"%f %f %f\n\" , temp [ 0 ] , temp [ 1 ] , temp [ 2 ] )
>7053	ArgumentList	f
>7054	Argument	temp [ 2 ]
>7055	ArrayIndexing	temp [ 2 ]
>7056	PrimaryExpression	2
>7057	Identifier	temp
>7058	Argument	temp [ 1 ]
>7059	ArrayIndexing	temp [ 1 ]
>7060	PrimaryExpression	1
>7061	Identifier	temp
>7062	Argument	temp [ 0 ]
>7063	ArrayIndexing	temp [ 0 ]
>7064	PrimaryExpression	0
>7065	Identifier	temp
>7066	Argument	\"%f %f %f\n\"
>7067	PrimaryExpression	\"%f %f %f\n\"
>7068	Argument	f
>7069	Identifier	f
>7070	Callee	fprintf
>7071	Identifier	fprintf
>7072	ExpressionStatement	 
>7073	CallExpression	GetPosition ( temp )
>7074	ArgumentList	temp
>7075	Argument	temp
>7076	Identifier	temp
>7077	Callee	GetPosition
>7078	Identifier	GetPosition
>7079	IdentifierDeclStatement	 
>7080	IdentifierDecl	temp [ 3 ]
>7081	PrimaryExpression	3
>7082	Identifier	temp
>7083	IdentifierDeclType	double [ 3 ]
>7084	Condition	 
>7085	Identifier	m_adjusted
>7093	FunctionDef	CameraInfo 
>7094	ParameterList	FILE * f
>7095	Parameter	 
>7096	Identifier	f
>7097	ParameterType	FILE *
>7098	ReturnType	void
>7099	CompoundStatement	 
>7100	ExpressionStatement	 
>7101	CallExpression	fprintf ( f , \"%s<t> %0.8e %0.8e %0.8e </t>\n\" , spacer , m_t [ 0 ] , m_t [ 1 ] , m_t [ 2 ] )
>7102	ArgumentList	f
>7103	Argument	m_t [ 2 ]
>7104	ArrayIndexing	m_t [ 2 ]
>7105	PrimaryExpression	2
>7106	Identifier	m_t
>7107	Argument	m_t [ 1 ]
>7108	ArrayIndexing	m_t [ 1 ]
>7109	PrimaryExpression	1
>7110	Identifier	m_t
>7111	Argument	m_t [ 0 ]
>7112	ArrayIndexing	m_t [ 0 ]
>7113	PrimaryExpression	0
>7114	Identifier	m_t
>7115	Argument	spacer
>7116	Identifier	spacer
>7117	Argument	\"%s<t> %0.8e %0.8e %0.8e </t>\n\"
>7118	PrimaryExpression	\"%s<t> %0.8e %0.8e %0.8e </t>\n\"
>7119	Argument	f
>7120	Identifier	f
>7121	Callee	fprintf
>7122	Identifier	fprintf
>7123	ExpressionStatement	 
>7124	Statement	 
>7125	Statement	 
>7126	Statement	 
>7127	Statement	 
>7128	Statement	 
>7129	Statement	 
>7130	Statement	 
>7131	Statement	 
>7132	Statement	 
>7133	Statement	 
>7134	Statement	 
>7135	Statement	 
>7136	Statement	 
>7137	Statement	 
>7138	Statement	 
>7139	Statement	 
>7140	Statement	 
>7141	Statement	 
>7142	Statement	 
>7143	Statement	 
>7144	Statement	 
>7145	Statement	 
>7146	Statement	 
>7147	Statement	 
>7148	Statement	 
>7149	Statement	 
>7150	Statement	 
>7151	Statement	 
>7152	Statement	 
>7153	Statement	 
>7154	Statement	 
>7155	Statement	 
>7156	Statement	 
>7157	Statement	 
>7158	Statement	 
>7159	Statement	 
>7160	Statement	 
>7161	Statement	 
>7162	Statement	 
>7163	Statement	 
>7164	Statement	 
>7165	Statement	 
>7166	Statement	 
>7167	Statement	 
>7168	Statement	 
>7169	Statement	 
>7170	Statement	 
>7171	Statement	 
>7172	Statement	 
>7173	Statement	 
>7174	Statement	 
>7175	Statement	 
>7176	Statement	 
>7177	Statement	 
>7178	Statement	 
>7179	ExpressionStatement	 
>7180	CallExpression	fprintf ( f , \"%s<focal> %0.8e </focal>\n\" , spacer , m_focal )
>7181	ArgumentList	f
>7182	Argument	m_focal
>7183	Identifier	m_focal
>7184	Argument	spacer
>7185	Identifier	spacer
>7186	Argument	\"%s<focal> %0.8e </focal>\n\"
>7187	PrimaryExpression	\"%s<focal> %0.8e </focal>\n\"
>7188	Argument	f
>7189	Identifier	f
>7190	Callee	fprintf
>7191	Identifier	fprintf
>7192	IdentifierDeclStatement	 
>7193	IdentifierDecl	* spacer = \"    \"
>7194	AssignmentExpr	* spacer = \"    \"
>7195	PrimaryExpression	\"    \"
>7196	Identifier	spacer
>7197	Identifier	spacer
>7198	IdentifierDeclType	const char *
>7199	Statement	 
<3=6,5,4
<6=77,33,26,7
<7=8
<8=24,9
<9=22,20,18,16,14,12,10
<10=11
<12=13
<14=15
<16=17
<18=19
<20=21
<22=23
<24=25
<26=27
<27=31,28
<28=29
<29=30
<31=32
<33=34
<34=76,75,74,35
<35=73,36
<36=70,67,64,61,58,55,52,49,46,43,40,37
<37=39,38
<40=42,41
<43=45,44
<46=48,47
<49=51,50
<52=54,53
<55=57,56
<58=60,59
<61=63,62
<64=66,65
<67=69,68
<70=72,71
<77=78
<78=81,80,79
<92=98,97,93
<93=94
<94=96,95
<98=187,179,171,163,155,147,139,131,123,115,107,99
<99=100
<100=104,101
<101=103,102
<104=106,105
<107=108
<108=112,109
<109=111,110
<112=114,113
<115=116
<116=120,117
<117=119,118
<120=122,121
<123=124
<124=128,125
<125=127,126
<128=130,129
<131=132
<132=136,133
<133=135,134
<136=138,137
<139=140
<140=144,141
<141=143,142
<144=146,145
<147=148
<148=152,149
<149=151,150
<152=154,153
<155=156
<156=160,157
<157=159,158
<160=162,161
<163=164
<164=168,165
<165=167,166
<168=170,169
<171=172
<172=176,173
<173=175,174
<176=178,177
<179=180
<180=184,181
<181=183,182
<184=186,185
<187=188
<188=192,189
<189=191,190
<192=194,193
<204=210,209,205
<205=206
<206=208,207
<210=231,217,211
<211=212
<212=214,213
<214=216,215
<217=218
<218=228,219
<219=225,220
<220=222,221
<222=224,223
<225=227,226
<228=230,229
<231=232
<232=236,233
<233=234
<234=235
<236=237
<243=248,244
<244=245
<245=247,246
<248=335,307,279,269,259,249
<249=250
<250=256,251
<251=255,252
<252=254,253
<256=258,257
<259=260
<260=266,261
<261=265,262
<262=264,263
<266=268,267
<269=270
<270=276,271
<271=275,272
<272=274,273
<276=278,277
<279=280
<280=304,281
<281=297,282
<282=290,283
<283=287,284
<284=286,285
<287=289,288
<290=294,291
<291=293,292
<294=296,295
<297=301,298
<298=300,299
<301=303,302
<304=306,305
<307=308
<308=332,309
<309=325,310
<310=318,311
<311=315,312
<312=314,313
<315=317,316
<318=322,319
<319=321,320
<322=324,323
<325=329,326
<326=328,327
<329=331,330
<332=334,333
<335=336
<336=360,337
<337=353,338
<338=346,339
<339=343,340
<340=342,341
<343=345,344
<346=350,347
<347=349,348
<350=352,351
<353=357,354
<354=356,355
<357=359,358
<360=362,361
<372=378,377,373
<373=374
<374=376,375
<378=396,379
<379=380
<380=394,381
<381=392,390,388,384,382
<382=383
<384=385
<385=387,386
<388=389
<390=391
<392=393
<394=395
<396=397
<397=415,398
<398=413,411,409,407,405,401,399
<399=400
<401=402
<402=404,403
<405=406
<407=408
<409=410
<411=412
<413=414
<415=416
<423=429,428,424
<424=425
<425=427,426
<429=430
<430=431
<431=443,432
<432=441,439,435,433
<433=434
<435=436
<436=438,437
<439=440
<441=442
<443=444
<450=456,455,451
<451=452
<452=454,453
<456=481,466,457
<457=458
<458=464,459
<459=462,460
<460=461
<462=463
<464=465
<466=467
<467=479,468
<468=477,475,471,469
<469=470
<471=472
<472=474,473
<475=476
<477=478
<479=480
<481=482
<482=485,484,483
<492=498,497,493
<493=494
<494=496,495
<498=499
<499=500
<500=514,501
<501=512,510,506,502
<502=503
<503=505,504
<506=507
<507=509,508
<510=511
<512=513
<514=515
<521=530,529,522
<522=526,523
<523=525,524
<526=528,527
<530=568,563,550,531
<531=532
<532=548,533
<533=546,544,542,540,538,536,534
<534=535
<536=537
<538=539
<540=541
<542=543
<544=545
<546=547
<548=549
<550=551
<551=561,552
<552=559,557,555,553
<553=554
<555=556
<557=558
<559=560
<561=562
<563=564
<564=567,566,565
<568=569
<569=586,585,584,570
<570=583,571
<571=582,579,578,577,576,575,574,573,572
<579=581,580
<595=601,600,596
<596=597
<597=599,598
<601=650,644,638,632,626,620,614,608,602
<602=603
<603=605,604
<605=607,606
<608=609
<609=611,610
<611=613,612
<614=615
<615=617,616
<617=619,618
<620=621
<621=623,622
<623=625,624
<626=627
<627=629,628
<629=631,630
<632=633
<633=635,634
<635=637,636
<638=639
<639=641,640
<641=643,642
<644=645
<645=647,646
<647=649,648
<650=651
<651=653,652
<653=655,654
<662=665,664,663
<665=666
<666=667
<667=678,668
<668=676,669
<669=670
<670=671
<671=675,672
<672=674,673
<676=677
<685=691,690,686
<686=687
<687=689,688
<691=692
<692=767,753,693
<693=694
<694=735,708,697,695
<695=696
<697=698
<698=706,699
<699=704,702,700
<700=701
<702=703
<704=705
<706=707
<708=709
<709=734,733,710
<710=732,711
<711=731,712
<712=729,713
<713=714
<714=715
<715=721,716
<716=720,717
<717=719,718
<721=727,722
<722=723
<723=724
<724=726,725
<727=728
<729=730
<735=736
<736=752,751,737
<737=750,738
<738=749,739
<739=747,740
<740=741
<741=742
<742=746,743
<743=745,744
<747=748
<753=754
<754=755
<755=766,756
<756=764,757
<757=758
<758=759
<759=763,760
<760=762,761
<764=765
<767=768
<768=778,769
<769=773,770
<770=772,771
<773=775,774
<775=777,776
<778=782,779
<779=781,780
<782=784,783
<784=786,785
<798=804,803,799
<799=800
<800=802,801
<804=805
<805=806
<806=824,807
<807=823,808
<808=822,809
<809=820,810
<810=811
<811=812
<812=819,813
<813=817,814
<814=815
<815=816
<817=818
<820=821
<833=842,841,834
<834=838,835
<835=837,836
<838=840,839
<842=1004,999,978,969,955,941,922,897,876,861,855,849,843
<843=844
<844=846,845
<846=848,847
<849=850
<850=852,851
<852=854,853
<855=856
<856=858,857
<858=860,859
<861=868,862
<862=863
<863=865,864
<865=867,866
<868=869
<869=873,870
<870=872,871
<873=875,874
<876=877
<877=896,895,878
<878=894,879
<879=893,880
<880=888,881
<881=885,882
<882=884,883
<885=887,886
<888=890,889
<890=892,891
<897=898
<898=921,920,899
<899=919,900
<900=904,901
<901=903,902
<904=912,905
<905=909,906
<906=908,907
<909=911,910
<912=916,913
<913=915,914
<916=918,917
<922=929,923
<923=924
<924=926,925
<926=928,927
<929=930
<930=936,931
<931=933,932
<933=935,934
<936=938,937
<938=940,939
<941=942
<942=952,943
<943=949,944
<944=948,945
<945=947,946
<949=951,950
<952=954,953
<955=956
<956=966,957
<957=963,958
<958=962,959
<959=961,960
<963=965,964
<966=968,967
<969=972,970
<970=971
<972=973
<973=975,974
<975=977,976
<978=979
<979=997,980
<980=995,993,991,989,985,983,981
<981=982
<983=984
<985=986
<986=988,987
<989=990
<991=992
<993=994
<995=996
<997=998
<999=1000
<1000=1003,1002,1001
<1004=1005
<1005=1021,1020,1019,1006
<1006=1018,1007
<1007=1015,1012,1009,1008
<1009=1011,1010
<1012=1014,1013
<1015=1017,1016
<1039=1051,1050,1040
<1040=1047,1044,1041
<1041=1043,1042
<1044=1046,1045
<1047=1049,1048
<1051=1403,1396,1382,1376,1365,1360,1351,1337,1331,1326,1307,1272,1255,1220,1201,1191,1181,1171,1161,1151,1142,1135,1126,1117,1106,1095,1090,1071,1052
<1052=1053
<1053=1069,1054
<1054=1067,1065,1063,1061,1059,1057,1055
<1055=1056
<1057=1058
<1059=1060
<1061=1062
<1063=1064
<1065=1066
<1067=1068
<1069=1070
<1071=1072
<1072=1088,1073
<1073=1086,1084,1082,1080,1078,1076,1074
<1074=1075
<1076=1077
<1078=1079
<1080=1081
<1082=1083
<1084=1085
<1086=1087
<1088=1089
<1090=1091
<1091=1094,1093,1092
<1095=1096
<1096=1104,1097
<1097=1102,1100,1098
<1098=1099
<1100=1101
<1102=1103
<1104=1105
<1106=1107
<1107=1115,1108
<1108=1113,1111,1109
<1109=1110
<1111=1112
<1113=1114
<1115=1116
<1117=1122,1118
<1118=1121,1120,1119
<1122=1125,1124,1123
<1126=1127
<1127=1131,1128
<1128=1129
<1129=1130
<1131=1132
<1132=1134,1133
<1135=1136
<1136=1140,1137
<1137=1138
<1138=1139
<1140=1141
<1142=1147,1143
<1143=1146,1145,1144
<1147=1150,1149,1148
<1151=1152
<1152=1158,1153
<1153=1157,1154
<1154=1156,1155
<1158=1160,1159
<1161=1162
<1162=1168,1163
<1163=1167,1164
<1164=1166,1165
<1168=1170,1169
<1171=1172
<1172=1178,1173
<1173=1177,1174
<1174=1176,1175
<1178=1180,1179
<1181=1182
<1182=1188,1183
<1183=1187,1184
<1184=1186,1185
<1188=1190,1189
<1191=1192
<1192=1198,1193
<1193=1197,1194
<1194=1196,1195
<1198=1200,1199
<1201=1202
<1202=1218,1203
<1203=1216,1214,1212,1210,1208,1206,1204
<1204=1205
<1206=1207
<1208=1209
<1210=1211
<1212=1213
<1214=1215
<1216=1217
<1218=1219
<1220=1221
<1221=1254,1253,1252,1222
<1222=1251,1223
<1223=1250,1245,1242,1239,1238,1233,1228,1225,1224
<1225=1227,1226
<1228=1232,1229
<1229=1231,1230
<1233=1237,1234
<1234=1236,1235
<1239=1241,1240
<1242=1244,1243
<1245=1249,1246
<1246=1248,1247
<1255=1256
<1256=1271,1270,1269,1257
<1257=1268,1258
<1258=1265,1262,1259
<1259=1261,1260
<1262=1264,1263
<1265=1267,1266
<1272=1273
<1273=1306,1305,1304,1274
<1274=1303,1275
<1275=1300,1297,1294,1291,1288,1285,1282,1279,1276
<1276=1278,1277
<1279=1281,1280
<1282=1284,1283
<1285=1287,1286
<1288=1290,1289
<1291=1293,1292
<1294=1296,1295
<1297=1299,1298
<1300=1302,1301
<1307=1308
<1308=1324,1309
<1309=1322,1320,1318,1316,1314,1312,1310
<1310=1311
<1312=1313
<1314=1315
<1316=1317
<1318=1319
<1320=1321
<1322=1323
<1324=1325
<1326=1327
<1327=1330,1329,1328
<1331=1332
<1332=1334,1333
<1334=1336,1335
<1337=1338
<1338=1348,1339
<1339=1345,1340
<1340=1342,1341
<1342=1344,1343
<1345=1347,1346
<1348=1350,1349
<1351=1352
<1352=1356,1353
<1353=1354
<1354=1355
<1356=1357
<1357=1359,1358
<1360=1361
<1361=1364,1363,1362
<1365=1366
<1366=1374,1367
<1367=1372,1370,1368
<1368=1369
<1370=1371
<1372=1373
<1374=1375
<1376=1377
<1377=1379,1378
<1379=1381,1380
<1382=1383
<1383=1393,1384
<1384=1390,1385
<1385=1387,1386
<1387=1389,1388
<1390=1392,1391
<1393=1395,1394
<1396=1397
<1397=1401,1398
<1398=1399
<1399=1400
<1401=1402
<1403=1408,1404
<1404=1407,1406,1405
<1408=1411,1410,1409
<1435=1438,1437,1436
<1438=1484,1474,1464,1454,1444,1439
<1439=1440
<1440=1442,1441
<1442=1443
<1444=1445
<1445=1451,1446
<1446=1450,1447
<1447=1449,1448
<1451=1453,1452
<1454=1455
<1455=1461,1456
<1456=1460,1457
<1457=1459,1458
<1461=1463,1462
<1464=1465
<1465=1471,1466
<1466=1470,1467
<1467=1469,1468
<1471=1473,1472
<1474=1475
<1475=1481,1476
<1476=1480,1477
<1477=1479,1478
<1481=1483,1482
<1484=1485
<1485=1491,1486
<1486=1490,1487
<1487=1489,1488
<1491=1493,1492
<1501=1507,1506,1502
<1502=1503
<1503=1505,1504
<1507=1559,1552,1543,1538,1519,1508
<1508=1509
<1509=1517,1510
<1510=1515,1513,1511
<1511=1512
<1513=1514
<1515=1516
<1517=1518
<1519=1520
<1520=1536,1521
<1521=1534,1532,1530,1528,1526,1524,1522
<1522=1523
<1524=1525
<1526=1527
<1528=1529
<1530=1531
<1532=1533
<1534=1535
<1536=1537
<1538=1539
<1539=1542,1541,1540
<1543=1544
<1544=1548,1545
<1545=1546
<1546=1547
<1548=1549
<1549=1551,1550
<1552=1553
<1553=1557,1554
<1554=1555
<1555=1556
<1557=1558
<1559=1564,1560
<1560=1563,1562,1561
<1564=1567,1566,1565
<1576=1585,1584,1577
<1577=1581,1578
<1578=1580,1579
<1581=1583,1582
<1585=1807,1790,1764,1745,1728,1716,1702,1693,1674,1655,1626,1597,1586
<1586=1587
<1587=1595,1588
<1588=1593,1591,1589
<1589=1590
<1591=1592
<1593=1594
<1595=1596
<1597=1598
<1598=1625,1624,1623,1599
<1599=1622,1600
<1600=1613,1604,1601
<1601=1603,1602
<1604=1612,1605
<1605=1609,1606
<1606=1608,1607
<1609=1611,1610
<1613=1621,1614
<1614=1618,1615
<1615=1617,1616
<1618=1620,1619
<1626=1627
<1627=1654,1653,1652,1628
<1628=1651,1629
<1629=1642,1633,1630
<1630=1632,1631
<1633=1641,1634
<1634=1638,1635
<1635=1637,1636
<1638=1640,1639
<1642=1650,1643
<1643=1647,1644
<1644=1646,1645
<1647=1649,1648
<1655=1656
<1656=1672,1657
<1657=1670,1668,1666,1664,1662,1660,1658
<1658=1659
<1660=1661
<1662=1663
<1664=1665
<1666=1667
<1668=1669
<1670=1671
<1672=1673
<1674=1675
<1675=1691,1676
<1676=1689,1687,1685,1683,1681,1679,1677
<1677=1678
<1679=1680
<1681=1682
<1683=1684
<1685=1686
<1687=1688
<1689=1690
<1691=1692
<1693=1698,1694
<1694=1697,1696,1695
<1698=1701,1700,1699
<1702=1703
<1703=1715,1714,1713,1704
<1704=1712,1705
<1705=1709,1708,1707,1706
<1709=1711,1710
<1716=1717
<1717=1727,1726,1725,1718
<1718=1724,1719
<1719=1723,1722,1721,1720
<1728=1729
<1729=1744,1743,1730
<1730=1742,1731
<1731=1735,1732
<1732=1734,1733
<1735=1739,1736
<1736=1738,1737
<1739=1741,1740
<1745=1746
<1746=1763,1762,1747
<1747=1761,1748
<1748=1752,1749
<1749=1751,1750
<1752=1756,1753
<1753=1755,1754
<1756=1760,1757
<1757=1759,1758
<1764=1765
<1765=1788,1766
<1766=1786,1784,1782,1769,1767
<1767=1768
<1769=1770
<1770=1781,1771
<1771=1779,1772
<1772=1777,1775,1773
<1773=1774
<1775=1776
<1777=1778
<1779=1780
<1782=1783
<1784=1785
<1786=1787
<1788=1789
<1790=1791
<1791=1805,1792
<1792=1803,1799,1793
<1793=1794
<1794=1798,1795
<1795=1797,1796
<1799=1800
<1800=1802,1801
<1803=1804
<1805=1806
<1807=1808
<1808=1811,1810,1809
<1833=1842,1841,1834
<1834=1838,1835
<1835=1837,1836
<1838=1840,1839
<1842=3267,3260,3255,3248,3228,3206,3188,3168,3151,3134,3117,3100,3095,3088,3083,3072,3063,3054,3035,3016,2997,2978,2961,2942,1843,1868,1879,1884,1893,1898,1913,1930,1946,1960,1979,1984,1995,2014,2033,2052,2071,2090,2109,2128,2147,2164,2183,2202,2221,2240,2251,2262,2273,2284,2301,2357,2413,2469,2525,2544,2563,2582,2601,2620,2639,2650,2661,2672,2683,2739,2795,2851,2907,2924
<1843=1862,1844
<1844=1845
<1845=1846
<1846=1860,1847
<1847=1858,1856,1854,1850,1848
<1848=1849
<1850=1851
<1851=1853,1852
<1854=1855
<1856=1857
<1858=1859
<1860=1861
<1862=1863
<1863=1865,1864
<1865=1867,1866
<1868=1869
<1869=1877,1870
<1870=1875,1873,1871
<1871=1872
<1873=1874
<1875=1876
<1877=1878
<1879=1880
<1880=1883,1882,1881
<1884=1885
<1885=1891,1886
<1886=1889,1887
<1887=1888
<1889=1890
<1891=1892
<1893=1894
<1894=1897,1896,1895
<1898=1899
<1899=1912,1911,1910,1900
<1900=1909,1901
<1901=1906,1903,1902
<1903=1905,1904
<1906=1908,1907
<1913=1914
<1914=1928,1915
<1915=1926,1924,1922,1918,1916
<1916=1917
<1918=1919
<1919=1921,1920
<1922=1923
<1924=1925
<1926=1927
<1928=1929
<1930=1931
<1931=1945,1944,1932
<1932=1943,1933
<1933=1941,1934
<1934=1939,1937,1935
<1935=1936
<1937=1938
<1939=1940
<1941=1942
<1946=1947
<1947=1959,1958,1957,1948
<1948=1956,1949
<1949=1953,1950
<1950=1952,1951
<1953=1955,1954
<1960=1961
<1961=1977,1962
<1962=1975,1973,1971,1969,1967,1965,1963
<1963=1964
<1965=1966
<1967=1968
<1969=1970
<1971=1972
<1973=1974
<1975=1976
<1977=1978
<1979=1980
<1980=1983,1982,1981
<1984=1985
<1985=1993,1986
<1986=1991,1989,1987
<1987=1988
<1989=1990
<1991=1992
<1993=1994
<1995=1996
<1996=2012,1997
<1997=2010,2008,2006,2000,1998
<1998=1999
<2000=2001
<2001=2005,2002
<2002=2004,2003
<2006=2007
<2008=2009
<2010=2011
<2012=2013
<2014=2015
<2015=2031,2016
<2016=2029,2027,2025,2019,2017
<2017=2018
<2019=2020
<2020=2024,2021
<2021=2023,2022
<2025=2026
<2027=2028
<2029=2030
<2031=2032
<2033=2034
<2034=2050,2035
<2035=2048,2046,2044,2038,2036
<2036=2037
<2038=2039
<2039=2043,2040
<2040=2042,2041
<2044=2045
<2046=2047
<2048=2049
<2050=2051
<2052=2053
<2053=2069,2054
<2054=2067,2065,2063,2057,2055
<2055=2056
<2057=2058
<2058=2062,2059
<2059=2061,2060
<2063=2064
<2065=2066
<2067=2068
<2069=2070
<2071=2072
<2072=2088,2073
<2073=2086,2084,2082,2080,2078,2076,2074
<2074=2075
<2076=2077
<2078=2079
<2080=2081
<2082=2083
<2084=2085
<2086=2087
<2088=2089
<2090=2091
<2091=2107,2092
<2092=2105,2103,2101,2099,2097,2095,2093
<2093=2094
<2095=2096
<2097=2098
<2099=2100
<2101=2102
<2103=2104
<2105=2106
<2107=2108
<2109=2110
<2110=2126,2111
<2111=2124,2122,2120,2118,2116,2114,2112
<2112=2113
<2114=2115
<2116=2117
<2118=2119
<2120=2121
<2122=2123
<2124=2125
<2126=2127
<2128=2129
<2129=2145,2130
<2130=2143,2141,2139,2137,2135,2133,2131
<2131=2132
<2133=2134
<2135=2136
<2137=2138
<2139=2140
<2141=2142
<2143=2144
<2145=2146
<2147=2160,2156,2152,2148
<2148=2151,2150,2149
<2152=2155,2154,2153
<2156=2159,2158,2157
<2160=2163,2162,2161
<2164=2165
<2165=2181,2166
<2166=2179,2177,2175,2169,2167
<2167=2168
<2169=2170
<2170=2174,2171
<2171=2173,2172
<2175=2176
<2177=2178
<2179=2180
<2181=2182
<2183=2184
<2184=2200,2185
<2185=2198,2196,2194,2188,2186
<2186=2187
<2188=2189
<2189=2193,2190
<2190=2192,2191
<2194=2195
<2196=2197
<2198=2199
<2200=2201
<2202=2203
<2203=2219,2204
<2204=2217,2215,2213,2207,2205
<2205=2206
<2207=2208
<2208=2212,2209
<2209=2211,2210
<2213=2214
<2215=2216
<2217=2218
<2219=2220
<2221=2222
<2222=2238,2223
<2223=2236,2234,2232,2226,2224
<2224=2225
<2226=2227
<2227=2231,2228
<2228=2230,2229
<2232=2233
<2234=2235
<2236=2237
<2238=2239
<2240=2241
<2241=2249,2242
<2242=2247,2245,2243
<2243=2244
<2245=2246
<2247=2248
<2249=2250
<2251=2252
<2252=2260,2253
<2253=2258,2256,2254
<2254=2255
<2256=2257
<2258=2259
<2260=2261
<2262=2263
<2263=2271,2264
<2264=2269,2267,2265
<2265=2266
<2267=2268
<2269=2270
<2271=2272
<2273=2274
<2274=2282,2275
<2275=2280,2278,2276
<2276=2277
<2278=2279
<2280=2281
<2282=2283
<2284=2297,2293,2289,2285
<2285=2288,2287,2286
<2289=2292,2291,2290
<2293=2296,2295,2294
<2297=2300,2299,2298
<2301=2302
<2302=2356,2355,2354,2303
<2303=2353,2304
<2304=2337,2321,2305
<2305=2319,2306
<2306=2315,2311,2307
<2307=2308
<2308=2310,2309
<2311=2312
<2312=2314,2313
<2315=2316
<2316=2318,2317
<2319=2320
<2321=2335,2322
<2322=2331,2327,2323
<2323=2324
<2324=2326,2325
<2327=2328
<2328=2330,2329
<2331=2332
<2332=2334,2333
<2335=2336
<2337=2351,2338
<2338=2347,2343,2339
<2339=2340
<2340=2342,2341
<2343=2344
<2344=2346,2345
<2347=2348
<2348=2350,2349
<2351=2352
<2357=2358
<2358=2412,2411,2410,2359
<2359=2409,2360
<2360=2393,2377,2361
<2361=2375,2362
<2362=2371,2367,2363
<2363=2364
<2364=2366,2365
<2367=2368
<2368=2370,2369
<2371=2372
<2372=2374,2373
<2375=2376
<2377=2391,2378
<2378=2387,2383,2379
<2379=2380
<2380=2382,2381
<2383=2384
<2384=2386,2385
<2387=2388
<2388=2390,2389
<2391=2392
<2393=2407,2394
<2394=2403,2399,2395
<2395=2396
<2396=2398,2397
<2399=2400
<2400=2402,2401
<2403=2404
<2404=2406,2405
<2407=2408
<2413=2414
<2414=2468,2467,2466,2415
<2415=2465,2416
<2416=2449,2433,2417
<2417=2431,2418
<2418=2427,2423,2419
<2419=2420
<2420=2422,2421
<2423=2424
<2424=2426,2425
<2427=2428
<2428=2430,2429
<2431=2432
<2433=2447,2434
<2434=2443,2439,2435
<2435=2436
<2436=2438,2437
<2439=2440
<2440=2442,2441
<2443=2444
<2444=2446,2445
<2447=2448
<2449=2463,2450
<2450=2459,2455,2451
<2451=2452
<2452=2454,2453
<2455=2456
<2456=2458,2457
<2459=2460
<2460=2462,2461
<2463=2464
<2469=2470
<2470=2524,2523,2522,2471
<2471=2521,2472
<2472=2505,2489,2473
<2473=2487,2474
<2474=2483,2479,2475
<2475=2476
<2476=2478,2477
<2479=2480
<2480=2482,2481
<2483=2484
<2484=2486,2485
<2487=2488
<2489=2503,2490
<2490=2499,2495,2491
<2491=2492
<2492=2494,2493
<2495=2496
<2496=2498,2497
<2499=2500
<2500=2502,2501
<2503=2504
<2505=2519,2506
<2506=2515,2511,2507
<2507=2508
<2508=2510,2509
<2511=2512
<2512=2514,2513
<2515=2516
<2516=2518,2517
<2519=2520
<2525=2526
<2526=2542,2527
<2527=2540,2538,2536,2530,2528
<2528=2529
<2530=2531
<2531=2535,2532
<2532=2534,2533
<2536=2537
<2538=2539
<2540=2541
<2542=2543
<2544=2545
<2545=2561,2546
<2546=2559,2557,2555,2549,2547
<2547=2548
<2549=2550
<2550=2554,2551
<2551=2553,2552
<2555=2556
<2557=2558
<2559=2560
<2561=2562
<2563=2564
<2564=2580,2565
<2565=2578,2576,2574,2568,2566
<2566=2567
<2568=2569
<2569=2573,2570
<2570=2572,2571
<2574=2575
<2576=2577
<2578=2579
<2580=2581
<2582=2583
<2583=2599,2584
<2584=2597,2595,2593,2587,2585
<2585=2586
<2587=2588
<2588=2592,2589
<2589=2591,2590
<2593=2594
<2595=2596
<2597=2598
<2599=2600
<2601=2602
<2602=2618,2603
<2603=2616,2614,2612,2606,2604
<2604=2605
<2606=2607
<2607=2611,2608
<2608=2610,2609
<2612=2613
<2614=2615
<2616=2617
<2618=2619
<2620=2621
<2621=2637,2622
<2622=2635,2633,2631,2625,2623
<2623=2624
<2625=2626
<2626=2630,2627
<2627=2629,2628
<2631=2632
<2633=2634
<2635=2636
<2637=2638
<2639=2640
<2640=2648,2641
<2641=2646,2644,2642
<2642=2643
<2644=2645
<2646=2647
<2648=2649
<2650=2651
<2651=2659,2652
<2652=2657,2655,2653
<2653=2654
<2655=2656
<2657=2658
<2659=2660
<2661=2662
<2662=2670,2663
<2663=2668,2666,2664
<2664=2665
<2666=2667
<2668=2669
<2670=2671
<2672=2673
<2673=2681,2674
<2674=2679,2677,2675
<2675=2676
<2677=2678
<2679=2680
<2681=2682
<2683=2684
<2684=2738,2737,2736,2685
<2685=2735,2686
<2686=2719,2703,2687
<2687=2701,2688
<2688=2697,2693,2689
<2689=2690
<2690=2692,2691
<2693=2694
<2694=2696,2695
<2697=2698
<2698=2700,2699
<2701=2702
<2703=2717,2704
<2704=2713,2709,2705
<2705=2706
<2706=2708,2707
<2709=2710
<2710=2712,2711
<2713=2714
<2714=2716,2715
<2717=2718
<2719=2733,2720
<2720=2729,2725,2721
<2721=2722
<2722=2724,2723
<2725=2726
<2726=2728,2727
<2729=2730
<2730=2732,2731
<2733=2734
<2739=2740
<2740=2794,2793,2792,2741
<2741=2791,2742
<2742=2775,2759,2743
<2743=2757,2744
<2744=2753,2749,2745
<2745=2746
<2746=2748,2747
<2749=2750
<2750=2752,2751
<2753=2754
<2754=2756,2755
<2757=2758
<2759=2773,2760
<2760=2769,2765,2761
<2761=2762
<2762=2764,2763
<2765=2766
<2766=2768,2767
<2769=2770
<2770=2772,2771
<2773=2774
<2775=2789,2776
<2776=2785,2781,2777
<2777=2778
<2778=2780,2779
<2781=2782
<2782=2784,2783
<2785=2786
<2786=2788,2787
<2789=2790
<2795=2796
<2796=2850,2849,2848,2797
<2797=2847,2798
<2798=2831,2815,2799
<2799=2813,2800
<2800=2809,2805,2801
<2801=2802
<2802=2804,2803
<2805=2806
<2806=2808,2807
<2809=2810
<2810=2812,2811
<2813=2814
<2815=2829,2816
<2816=2825,2821,2817
<2817=2818
<2818=2820,2819
<2821=2822
<2822=2824,2823
<2825=2826
<2826=2828,2827
<2829=2830
<2831=2845,2832
<2832=2841,2837,2833
<2833=2834
<2834=2836,2835
<2837=2838
<2838=2840,2839
<2841=2842
<2842=2844,2843
<2845=2846
<2851=2852
<2852=2906,2905,2904,2853
<2853=2903,2854
<2854=2887,2871,2855
<2855=2869,2856
<2856=2865,2861,2857
<2857=2858
<2858=2860,2859
<2861=2862
<2862=2864,2863
<2865=2866
<2866=2868,2867
<2869=2870
<2871=2885,2872
<2872=2881,2877,2873
<2873=2874
<2874=2876,2875
<2877=2878
<2878=2880,2879
<2881=2882
<2882=2884,2883
<2885=2886
<2887=2901,2888
<2888=2897,2893,2889
<2889=2890
<2890=2892,2891
<2893=2894
<2894=2896,2895
<2897=2898
<2898=2900,2899
<2901=2902
<2907=2920,2916,2912,2908
<2908=2911,2910,2909
<2912=2915,2914,2913
<2916=2919,2918,2917
<2920=2923,2922,2921
<2924=2925
<2925=2941,2940,2939,2926
<2926=2938,2927
<2927=2935,2932,2929,2928
<2929=2931,2930
<2932=2934,2933
<2935=2937,2936
<2942=2943
<2943=2959,2944
<2944=2957,2955,2953,2951,2949,2947,2945
<2945=2946
<2947=2948
<2949=2950
<2951=2952
<2953=2954
<2955=2956
<2957=2958
<2959=2960
<2961=2966,2962
<2962=2965,2964,2963
<2966=2977,2976,2975,2967
<2967=2974,2968
<2968=2973,2972,2969
<2969=2971,2970
<2978=2979
<2979=2995,2980
<2980=2993,2991,2989,2987,2985,2983,2981
<2981=2982
<2983=2984
<2985=2986
<2987=2988
<2989=2990
<2991=2992
<2993=2994
<2995=2996
<2997=2998
<2998=3014,2999
<2999=3012,3010,3008,3006,3004,3002,3000
<3000=3001
<3002=3003
<3004=3005
<3006=3007
<3008=3009
<3010=3011
<3012=3013
<3014=3015
<3016=3017
<3017=3033,3018
<3018=3031,3029,3027,3025,3023,3021,3019
<3019=3020
<3021=3022
<3023=3024
<3025=3026
<3027=3028
<3029=3030
<3031=3032
<3033=3034
<3035=3036
<3036=3052,3037
<3037=3050,3048,3046,3044,3042,3040,3038
<3038=3039
<3040=3041
<3042=3043
<3044=3045
<3046=3047
<3048=3049
<3050=3051
<3052=3053
<3054=3059,3055
<3055=3058,3057,3056
<3059=3062,3061,3060
<3063=3068,3064
<3064=3067,3066,3065
<3068=3071,3070,3069
<3072=3073
<3073=3081,3074
<3074=3079,3077,3075
<3075=3076
<3077=3078
<3079=3080
<3081=3082
<3083=3084
<3084=3087,3086,3085
<3088=3089
<3089=3093,3090
<3090=3091
<3091=3092
<3093=3094
<3095=3096
<3096=3099,3098,3097
<3100=3101
<3101=3115,3102
<3102=3113,3111,3109,3105,3103
<3103=3104
<3105=3106
<3106=3108,3107
<3109=3110
<3111=3112
<3113=3114
<3115=3116
<3117=3118
<3118=3132,3119
<3119=3130,3128,3126,3122,3120
<3120=3121
<3122=3123
<3123=3125,3124
<3126=3127
<3128=3129
<3130=3131
<3132=3133
<3134=3135
<3135=3149,3136
<3136=3147,3145,3143,3139,3137
<3137=3138
<3139=3140
<3140=3142,3141
<3143=3144
<3145=3146
<3147=3148
<3149=3150
<3151=3152
<3152=3166,3153
<3153=3164,3162,3160,3156,3154
<3154=3155
<3156=3157
<3157=3159,3158
<3160=3161
<3162=3163
<3164=3165
<3166=3167
<3168=3169
<3169=3187,3186,3185,3170
<3170=3184,3171
<3171=3181,3176,3173,3172
<3173=3175,3174
<3176=3178,3177
<3178=3180,3179
<3181=3183,3182
<3188=3189
<3189=3205,3204,3203,3190
<3190=3202,3191
<3191=3199,3196,3193,3192
<3193=3195,3194
<3196=3198,3197
<3199=3201,3200
<3206=3207
<3207=3227,3226,3225,3208
<3208=3224,3209
<3209=3219,3214,3211,3210
<3211=3213,3212
<3214=3216,3215
<3216=3218,3217
<3219=3221,3220
<3221=3223,3222
<3228=3229
<3229=3247,3246,3245,3230
<3230=3244,3231
<3231=3239,3236,3233,3232
<3233=3235,3234
<3236=3238,3237
<3239=3241,3240
<3241=3243,3242
<3248=3249
<3249=3253,3250
<3250=3251
<3251=3252
<3253=3254
<3255=3256
<3256=3259,3258,3257
<3260=3261
<3261=3265,3262
<3262=3263
<3263=3264
<3265=3266
<3267=3268
<3268=3271,3270,3269
<3348=3354,3353,3349
<3349=3350
<3350=3352,3351
<3354=3384,3380,3359,3355
<3355=3356
<3356=3358,3357
<3359=3360
<3360=3378,3361
<3361=3376,3374,3372,3370,3368,3366,3362
<3362=3363
<3363=3365,3364
<3366=3367
<3368=3369
<3370=3371
<3372=3373
<3374=3375
<3376=3377
<3378=3379
<3380=3381
<3381=3383,3382
<3384=3385
<3385=3398,3397,3396,3386
<3386=3395,3387
<3387=3392,3389,3388
<3389=3391,3390
<3392=3394,3393
<3408=3414,3413,3409
<3409=3410
<3410=3412,3411
<3414=3459,3440,3421,3415
<3415=3416
<3416=3418,3417
<3418=3420,3419
<3421=3422
<3422=3438,3423
<3423=3436,3434,3432,3430,3428,3426,3424
<3424=3425
<3426=3427
<3428=3429
<3430=3431
<3432=3433
<3434=3435
<3436=3437
<3438=3439
<3440=3441
<3441=3457,3442
<3442=3455,3453,3451,3449,3447,3445,3443
<3443=3444
<3445=3446
<3447=3448
<3449=3450
<3451=3452
<3453=3454
<3455=3456
<3457=3458
<3459=3460
<3460=3463,3462,3461
<3472=3484,3483,3473
<3473=3480,3477,3474
<3474=3476,3475
<3477=3479,3478
<3480=3482,3481
<3484=3859,3850,3841,3836,3818,3800,3782,3773,3764,3755,3746,3737,3728,3724,3703,3680,3675,3657,3639,3621,3603,3587,3570,3565,3556,3552,3537,3514,3493,3487,3485
<3485=3486
<3487=3488
<3488=3490,3489
<3490=3492,3491
<3493=3494
<3494=3512,3495
<3495=3510,3508,3504,3500,3496
<3496=3497
<3497=3499,3498
<3500=3501
<3501=3503,3502
<3504=3505
<3505=3507,3506
<3508=3509
<3510=3511
<3512=3513
<3514=3515
<3515=3535,3516
<3516=3533,3531,3529,3527,3523,3521,3517
<3517=3518
<3518=3520,3519
<3521=3522
<3523=3524
<3524=3526,3525
<3527=3528
<3529=3530
<3531=3532
<3533=3534
<3535=3536
<3537=3538
<3538=3550,3539
<3539=3548,3546,3544,3540
<3540=3541
<3541=3543,3542
<3544=3545
<3546=3547
<3548=3549
<3550=3551
<3552=3553
<3553=3555,3554
<3556=3557
<3557=3563,3558
<3558=3561,3559
<3559=3560
<3561=3562
<3563=3564
<3565=3566
<3566=3569,3568,3567
<3570=3571
<3571=3585,3572
<3572=3583,3581,3579,3575,3573
<3573=3574
<3575=3576
<3576=3578,3577
<3579=3580
<3581=3582
<3583=3584
<3585=3586
<3587=3588
<3588=3602,3601,3589
<3589=3600,3590
<3590=3598,3591
<3591=3596,3594,3592
<3592=3593
<3594=3595
<3596=3597
<3598=3599
<3603=3604
<3604=3618,3605
<3605=3611,3606
<3606=3610,3607
<3607=3609,3608
<3611=3615,3612
<3612=3614,3613
<3615=3617,3616
<3618=3620,3619
<3621=3622
<3622=3636,3623
<3623=3629,3624
<3624=3628,3625
<3625=3627,3626
<3629=3633,3630
<3630=3632,3631
<3633=3635,3634
<3636=3638,3637
<3639=3640
<3640=3654,3641
<3641=3647,3642
<3642=3646,3643
<3643=3645,3644
<3647=3651,3648
<3648=3650,3649
<3651=3653,3652
<3654=3656,3655
<3657=3658
<3658=3672,3659
<3659=3665,3660
<3660=3664,3661
<3661=3663,3662
<3665=3669,3666
<3666=3668,3667
<3669=3671,3670
<3672=3674,3673
<3675=3676
<3676=3679,3678,3677
<3680=3699,3681
<3681=3682
<3682=3683
<3683=3697,3684
<3684=3695,3693,3691,3687,3685
<3685=3686
<3687=3688
<3688=3690,3689
<3691=3692
<3693=3694
<3695=3696
<3697=3698
<3699=3700
<3700=3702,3701
<3703=3704
<3704=3722,3705
<3705=3720,3718,3716,3714,3712,3710,3706
<3706=3707
<3707=3709,3708
<3710=3711
<3712=3713
<3714=3715
<3716=3717
<3718=3719
<3720=3721
<3722=3723
<3724=3725
<3725=3727,3726
<3728=3729
<3729=3735,3730
<3730=3733,3731
<3731=3732
<3733=3734
<3735=3736
<3737=3738
<3738=3744,3739
<3739=3742,3740
<3740=3741
<3742=3743
<3744=3745
<3746=3751,3747
<3747=3750,3749,3748
<3751=3754,3753,3752
<3755=3756
<3756=3760,3757
<3757=3758
<3758=3759
<3760=3761
<3761=3763,3762
<3764=3765
<3765=3769,3766
<3766=3767
<3767=3768
<3769=3770
<3770=3772,3771
<3773=3778,3774
<3774=3777,3776,3775
<3778=3781,3780,3779
<3782=3783
<3783=3797,3784
<3784=3790,3785
<3785=3789,3786
<3786=3788,3787
<3790=3794,3791
<3791=3793,3792
<3794=3796,3795
<3797=3799,3798
<3800=3801
<3801=3815,3802
<3802=3808,3803
<3803=3807,3804
<3804=3806,3805
<3808=3812,3809
<3809=3811,3810
<3812=3814,3813
<3815=3817,3816
<3818=3819
<3819=3833,3820
<3820=3826,3821
<3821=3825,3822
<3822=3824,3823
<3826=3830,3827
<3827=3829,3828
<3830=3832,3831
<3833=3835,3834
<3836=3837
<3837=3840,3839,3838
<3841=3842
<3842=3846,3843
<3843=3844
<3844=3845
<3846=3847
<3847=3849,3848
<3850=3851
<3851=3855,3852
<3852=3853
<3853=3854
<3855=3856
<3856=3858,3857
<3859=3864,3860
<3860=3863,3862,3861
<3864=3867,3866,3865
<3897=3912,3911,3898
<3898=3908,3905,3902,3899
<3899=3901,3900
<3902=3904,3903
<3905=3907,3906
<3908=3910,3909
<3912=4346,4337,4328,4323,4305,4287,4269,4260,4251,4242,4237,4224,4207,4198,4169,4153,4136,4131,4120,4115,4098,4081,4064,4060,4043,4020,3999,3915,3913
<3913=3914
<3915=3995,3973,3916
<3916=3917
<3917=3965,3957,3932,3918
<3918=3919
<3919=3928,3920
<3920=3921
<3921=3922
<3922=3926,3923
<3923=3924
<3924=3925
<3926=3927
<3928=3929
<3929=3931,3930
<3932=3933
<3933=3956,3955,3934
<3934=3954,3935
<3935=3944,3936
<3936=3943,3937
<3937=3939,3938
<3939=3940
<3940=3942,3941
<3944=3951,3945
<3945=3947,3946
<3947=3948
<3948=3950,3949
<3951=3953,3952
<3957=3958
<3958=3962,3959
<3959=3961,3960
<3962=3964,3963
<3965=3966
<3966=3970,3967
<3967=3969,3968
<3970=3972,3971
<3973=3989,3983,3974
<3974=3975
<3975=3979,3976
<3976=3977
<3977=3978
<3979=3980
<3980=3982,3981
<3983=3984
<3984=3986,3985
<3986=3988,3987
<3989=3990
<3990=3992,3991
<3992=3994,3993
<3995=3996
<3996=3998,3997
<3999=4000
<4000=4018,4001
<4001=4016,4014,4010,4006,4002
<4002=4003
<4003=4005,4004
<4006=4007
<4007=4009,4008
<4010=4011
<4011=4013,4012
<4014=4015
<4016=4017
<4018=4019
<4020=4021
<4021=4041,4022
<4022=4039,4037,4035,4033,4029,4027,4023
<4023=4024
<4024=4026,4025
<4027=4028
<4029=4030
<4030=4032,4031
<4033=4034
<4035=4036
<4037=4038
<4039=4040
<4041=4042
<4043=4044
<4044=4058,4045
<4045=4054,4052,4046
<4046=4047
<4047=4051,4048
<4048=4050,4049
<4052=4053
<4054=4055
<4055=4057,4056
<4058=4059
<4060=4061
<4061=4063,4062
<4064=4065
<4065=4079,4066
<4066=4075,4073,4067
<4067=4068
<4068=4072,4069
<4069=4071,4070
<4073=4074
<4075=4076
<4076=4078,4077
<4079=4080
<4081=4082
<4082=4096,4083
<4083=4092,4090,4084
<4084=4085
<4085=4089,4086
<4086=4088,4087
<4090=4091
<4092=4093
<4093=4095,4094
<4096=4097
<4098=4099
<4099=4113,4100
<4100=4109,4107,4101
<4101=4102
<4102=4106,4103
<4103=4105,4104
<4107=4108
<4109=4110
<4110=4112,4111
<4113=4114
<4115=4116
<4116=4119,4118,4117
<4120=4121
<4121=4129,4122
<4122=4127,4125,4123
<4123=4124
<4125=4126
<4127=4128
<4129=4130
<4131=4132
<4132=4135,4134,4133
<4136=4137
<4137=4151,4138
<4138=4149,4147,4145,4141,4139
<4139=4140
<4141=4142
<4142=4144,4143
<4145=4146
<4147=4148
<4149=4150
<4151=4152
<4153=4154
<4154=4168,4167,4155
<4155=4166,4156
<4156=4164,4157
<4157=4162,4160,4158
<4158=4159
<4160=4161
<4162=4163
<4164=4165
<4169=4170
<4170=4197,4196,4195,4171
<4171=4194,4172
<4172=4187,4180,4173
<4173=4179,4174
<4174=4178,4175
<4175=4177,4176
<4180=4186,4181
<4181=4185,4182
<4182=4184,4183
<4187=4193,4188
<4188=4192,4189
<4189=4191,4190
<4198=4199
<4199=4206,4205,4200
<4200=4204,4201
<4201=4203,4202
<4207=4208
<4208=4222,4209
<4209=4220,4218,4216,4212,4210
<4210=4211
<4212=4213
<4213=4215,4214
<4216=4217
<4218=4219
<4220=4221
<4222=4223
<4224=4225
<4225=4235,4226
<4226=4233,4231,4229,4227
<4227=4228
<4229=4230
<4231=4232
<4233=4234
<4235=4236
<4237=4238
<4238=4241,4240,4239
<4242=4243
<4243=4247,4244
<4244=4245
<4245=4246
<4247=4248
<4248=4250,4249
<4251=4252
<4252=4256,4253
<4253=4254
<4254=4255
<4256=4257
<4257=4259,4258
<4260=4265,4261
<4261=4264,4263,4262
<4265=4268,4267,4266
<4269=4270
<4270=4284,4271
<4271=4277,4272
<4272=4276,4273
<4273=4275,4274
<4277=4281,4278
<4278=4280,4279
<4281=4283,4282
<4284=4286,4285
<4287=4288
<4288=4302,4289
<4289=4295,4290
<4290=4294,4291
<4291=4293,4292
<4295=4299,4296
<4296=4298,4297
<4299=4301,4300
<4302=4304,4303
<4305=4306
<4306=4320,4307
<4307=4313,4308
<4308=4312,4309
<4309=4311,4310
<4313=4317,4314
<4314=4316,4315
<4317=4319,4318
<4320=4322,4321
<4323=4324
<4324=4327,4326,4325
<4328=4329
<4329=4333,4330
<4330=4331
<4331=4332
<4333=4334
<4334=4336,4335
<4337=4338
<4338=4342,4339
<4339=4340
<4340=4341
<4342=4343
<4343=4345,4344
<4346=4351,4347
<4347=4350,4349,4348
<4351=4354,4353,4352
<4389=4395,4394,4390
<4390=4391
<4391=4393,4392
<4395=5357,5348,5341,5332,5325,5316,5305,5294,5281,5272,5263,5254,5235,5216,5197,5178,5159,5140,5132,5113,5100,5090,5069,5048,5027,5018,4812,4790,4769,4748,4727,4521,4499,4490,4481,4464,4447,4428,4409,4396
<4396=4397
<4397=4407,4398
<4398=4405,4403,4401,4399
<4399=4400
<4401=4402
<4403=4404
<4405=4406
<4407=4408
<4409=4410
<4410=4426,4411
<4411=4424,4422,4420,4418,4416,4414,4412
<4412=4413
<4414=4415
<4416=4417
<4418=4419
<4420=4421
<4422=4423
<4424=4425
<4426=4427
<4428=4429
<4429=4445,4430
<4430=4443,4441,4439,4437,4435,4433,4431
<4431=4432
<4433=4434
<4435=4436
<4437=4438
<4439=4440
<4441=4442
<4443=4444
<4445=4446
<4447=4448
<4448=4462,4449
<4449=4460,4458,4456,4452,4450
<4450=4451
<4452=4453
<4453=4455,4454
<4456=4457
<4458=4459
<4460=4461
<4462=4463
<4464=4465
<4465=4479,4466
<4466=4477,4475,4473,4469,4467
<4467=4468
<4469=4470
<4470=4472,4471
<4473=4474
<4475=4476
<4477=4478
<4479=4480
<4481=4486,4482
<4482=4485,4484,4483
<4486=4489,4488,4487
<4490=4495,4491
<4491=4494,4493,4492
<4495=4498,4497,4496
<4499=4517,4500
<4500=4501
<4501=4515,4502
<4502=4513,4511,4509,4505,4503
<4503=4504
<4505=4506
<4506=4508,4507
<4509=4510
<4511=4512
<4513=4514
<4515=4516
<4517=4518
<4518=4520,4519
<4521=4699,4660,4522
<4522=4523
<4523=4632,4593,4524
<4524=4525
<4525=4565,4526
<4526=4527
<4527=4561,4544,4528
<4528=4529
<4529=4530
<4530=4542,4531
<4531=4540,4538,4536,4534,4532
<4532=4533
<4534=4535
<4536=4537
<4538=4539
<4540=4541
<4542=4543
<4544=4545
<4545=4559,4546
<4546=4557,4555,4553,4549,4547
<4547=4548
<4549=4550
<4550=4552,4551
<4553=4554
<4555=4556
<4557=4558
<4559=4560
<4561=4562
<4562=4564,4563
<4565=4566
<4566=4580,4567
<4567=4574,4568
<4568=4572,4569
<4569=4570
<4570=4571
<4572=4573
<4574=4578,4575
<4575=4576
<4576=4577
<4578=4579
<4580=4587,4581
<4581=4585,4582
<4582=4583
<4583=4584
<4585=4586
<4587=4591,4588
<4588=4589
<4589=4590
<4591=4592
<4593=4594
<4594=4628,4611,4595
<4595=4596
<4596=4597
<4597=4609,4598
<4598=4607,4605,4603,4601,4599
<4599=4600
<4601=4602
<4603=4604
<4605=4606
<4607=4608
<4609=4610
<4611=4612
<4612=4626,4613
<4613=4624,4622,4620,4616,4614
<4614=4615
<4616=4617
<4617=4619,4618
<4620=4621
<4622=4623
<4624=4625
<4626=4627
<4628=4629
<4629=4631,4630
<4632=4633
<4633=4647,4634
<4634=4641,4635
<4635=4639,4636
<4636=4637
<4637=4638
<4639=4640
<4641=4645,4642
<4642=4643
<4643=4644
<4645=4646
<4647=4654,4648
<4648=4652,4649
<4649=4650
<4650=4651
<4652=4653
<4654=4658,4655
<4655=4656
<4656=4657
<4658=4659
<4660=4661
<4661=4695,4678,4662
<4662=4663
<4663=4664
<4664=4676,4665
<4665=4674,4672,4670,4668,4666
<4666=4667
<4668=4669
<4670=4671
<4672=4673
<4674=4675
<4676=4677
<4678=4679
<4679=4693,4680
<4680=4691,4689,4687,4683,4681
<4681=4682
<4683=4684
<4684=4686,4685
<4687=4688
<4689=4690
<4691=4692
<4693=4694
<4695=4696
<4696=4698,4697
<4699=4700
<4700=4714,4701
<4701=4708,4702
<4702=4706,4703
<4703=4704
<4704=4705
<4706=4707
<4708=4712,4709
<4709=4710
<4710=4711
<4712=4713
<4714=4721,4715
<4715=4719,4716
<4716=4717
<4717=4718
<4719=4720
<4721=4725,4722
<4722=4723
<4723=4724
<4725=4726
<4727=4728
<4728=4746,4729
<4729=4744,4742,4740,4738,4736,4734,4730
<4730=4731
<4731=4733,4732
<4734=4735
<4736=4737
<4738=4739
<4740=4741
<4742=4743
<4744=4745
<4746=4747
<4748=4749
<4749=4767,4750
<4750=4765,4763,4761,4759,4757,4755,4751
<4751=4752
<4752=4754,4753
<4755=4756
<4757=4758
<4759=4760
<4761=4762
<4763=4764
<4765=4766
<4767=4768
<4769=4770
<4770=4788,4771
<4771=4786,4784,4782,4780,4778,4776,4772
<4772=4773
<4773=4775,4774
<4776=4777
<4778=4779
<4780=4781
<4782=4783
<4784=4785
<4786=4787
<4788=4789
<4790=4808,4791
<4791=4792
<4792=4806,4793
<4793=4804,4802,4800,4796,4794
<4794=4795
<4796=4797
<4797=4799,4798
<4800=4801
<4802=4803
<4804=4805
<4806=4807
<4808=4809
<4809=4811,4810
<4812=4990,4951,4813
<4813=4814
<4814=4923,4884,4815
<4815=4816
<4816=4856,4817
<4817=4818
<4818=4852,4835,4819
<4819=4820
<4820=4821
<4821=4833,4822
<4822=4831,4829,4827,4825,4823
<4823=4824
<4825=4826
<4827=4828
<4829=4830
<4831=4832
<4833=4834
<4835=4836
<4836=4850,4837
<4837=4848,4846,4844,4840,4838
<4838=4839
<4840=4841
<4841=4843,4842
<4844=4845
<4846=4847
<4848=4849
<4850=4851
<4852=4853
<4853=4855,4854
<4856=4857
<4857=4871,4858
<4858=4865,4859
<4859=4863,4860
<4860=4861
<4861=4862
<4863=4864
<4865=4869,4866
<4866=4867
<4867=4868
<4869=4870
<4871=4878,4872
<4872=4876,4873
<4873=4874
<4874=4875
<4876=4877
<4878=4882,4879
<4879=4880
<4880=4881
<4882=4883
<4884=4885
<4885=4919,4902,4886
<4886=4887
<4887=4888
<4888=4900,4889
<4889=4898,4896,4894,4892,4890
<4890=4891
<4892=4893
<4894=4895
<4896=4897
<4898=4899
<4900=4901
<4902=4903
<4903=4917,4904
<4904=4915,4913,4911,4907,4905
<4905=4906
<4907=4908
<4908=4910,4909
<4911=4912
<4913=4914
<4915=4916
<4917=4918
<4919=4920
<4920=4922,4921
<4923=4924
<4924=4938,4925
<4925=4932,4926
<4926=4930,4927
<4927=4928
<4928=4929
<4930=4931
<4932=4936,4933
<4933=4934
<4934=4935
<4936=4937
<4938=4945,4939
<4939=4943,4940
<4940=4941
<4941=4942
<4943=4944
<4945=4949,4946
<4946=4947
<4947=4948
<4949=4950
<4951=4952
<4952=4986,4969,4953
<4953=4954
<4954=4955
<4955=4967,4956
<4956=4965,4963,4961,4959,4957
<4957=4958
<4959=4960
<4961=4962
<4963=4964
<4965=4966
<4967=4968
<4969=4970
<4970=4984,4971
<4971=4982,4980,4978,4974,4972
<4972=4973
<4974=4975
<4975=4977,4976
<4978=4979
<4980=4981
<4982=4983
<4984=4985
<4986=4987
<4987=4989,4988
<4990=4991
<4991=5005,4992
<4992=4999,4993
<4993=4997,4994
<4994=4995
<4995=4996
<4997=4998
<4999=5003,5000
<5000=5001
<5001=5002
<5003=5004
<5005=5012,5006
<5006=5010,5007
<5007=5008
<5008=5009
<5010=5011
<5012=5016,5013
<5013=5014
<5014=5015
<5016=5017
<5018=5023,5019
<5019=5022,5021,5020
<5023=5026,5025,5024
<5027=5028
<5028=5046,5029
<5029=5044,5042,5040,5038,5036,5034,5030
<5030=5031
<5031=5033,5032
<5034=5035
<5036=5037
<5038=5039
<5040=5041
<5042=5043
<5044=5045
<5046=5047
<5048=5049
<5049=5067,5050
<5050=5065,5063,5061,5059,5057,5055,5051
<5051=5052
<5052=5054,5053
<5055=5056
<5057=5058
<5059=5060
<5061=5062
<5063=5064
<5065=5066
<5067=5068
<5069=5070
<5070=5088,5071
<5071=5086,5084,5082,5080,5078,5076,5072
<5072=5073
<5073=5075,5074
<5076=5077
<5078=5079
<5080=5081
<5082=5083
<5084=5085
<5086=5087
<5088=5089
<5090=5097,5094,5091
<5091=5093,5092
<5094=5096,5095
<5097=5099,5098
<5100=5101
<5101=5112,5102
<5102=5110,5103
<5103=5108,5106,5104
<5104=5105
<5106=5107
<5108=5109
<5110=5111
<5113=5114
<5114=5130,5115
<5115=5128,5126,5124,5122,5120,5118,5116
<5116=5117
<5118=5119
<5120=5121
<5122=5123
<5124=5125
<5126=5127
<5128=5129
<5130=5131
<5132=5136,5133
<5133=5135,5134
<5136=5139,5138,5137
<5140=5141
<5141=5157,5142
<5142=5155,5153,5151,5149,5147,5145,5143
<5143=5144
<5145=5146
<5147=5148
<5149=5150
<5151=5152
<5153=5154
<5155=5156
<5157=5158
<5159=5160
<5160=5176,5161
<5161=5174,5172,5170,5168,5166,5164,5162
<5162=5163
<5164=5165
<5166=5167
<5168=5169
<5170=5171
<5172=5173
<5174=5175
<5176=5177
<5178=5179
<5179=5195,5180
<5180=5193,5191,5189,5187,5185,5183,5181
<5181=5182
<5183=5184
<5185=5186
<5187=5188
<5189=5190
<5191=5192
<5193=5194
<5195=5196
<5197=5198
<5198=5214,5199
<5199=5212,5210,5208,5206,5204,5202,5200
<5200=5201
<5202=5203
<5204=5205
<5206=5207
<5208=5209
<5210=5211
<5212=5213
<5214=5215
<5216=5217
<5217=5233,5218
<5218=5231,5229,5227,5225,5223,5221,5219
<5219=5220
<5221=5222
<5223=5224
<5225=5226
<5227=5228
<5229=5230
<5231=5232
<5233=5234
<5235=5236
<5236=5252,5237
<5237=5250,5248,5246,5244,5242,5240,5238
<5238=5239
<5240=5241
<5242=5243
<5244=5245
<5246=5247
<5248=5249
<5250=5251
<5252=5253
<5254=5259,5255
<5255=5258,5257,5256
<5259=5262,5261,5260
<5263=5268,5264
<5264=5267,5266,5265
<5268=5271,5270,5269
<5272=5277,5273
<5273=5276,5275,5274
<5277=5280,5279,5278
<5281=5282
<5282=5293,5292,5291,5283
<5283=5290,5284
<5284=5289,5288,5285
<5285=5287,5286
<5294=5295
<5295=5304,5303,5302,5296
<5296=5301,5297
<5297=5300,5299,5298
<5305=5306
<5306=5315,5314,5313,5307
<5307=5312,5308
<5308=5311,5310,5309
<5316=5317
<5317=5321,5318
<5318=5319
<5319=5320
<5321=5322
<5322=5324,5323
<5325=5326
<5326=5330,5327
<5327=5328
<5328=5329
<5330=5331
<5332=5333
<5333=5337,5334
<5334=5335
<5335=5336
<5337=5338
<5338=5340,5339
<5341=5342
<5342=5346,5343
<5343=5344
<5344=5345
<5346=5347
<5348=5353,5349
<5349=5352,5351,5350
<5353=5356,5355,5354
<5357=5362,5358
<5358=5361,5360,5359
<5362=5365,5364,5363
<5401=5413,5412,5402
<5402=5409,5406,5403
<5403=5405,5404
<5406=5408,5407
<5409=5411,5410
<5413=5466,5447,5431,5414
<5414=5415
<5415=5429,5416
<5416=5427,5425,5423,5419,5417
<5417=5418
<5419=5420
<5420=5422,5421
<5423=5424
<5425=5426
<5427=5428
<5429=5430
<5431=5432
<5432=5446,5445,5433
<5433=5444,5434
<5434=5442,5435
<5435=5440,5438,5436
<5436=5437
<5438=5439
<5440=5441
<5442=5443
<5447=5448
<5448=5464,5449
<5449=5462,5460,5458,5456,5454,5452,5450
<5450=5451
<5452=5453
<5454=5455
<5456=5457
<5458=5459
<5460=5461
<5462=5463
<5464=5465
<5466=5467
<5467=5478,5477,5476,5468
<5468=5475,5469
<5469=5474,5473,5470
<5470=5472,5471
<5490=5502,5501,5491
<5491=5498,5495,5492
<5492=5494,5493
<5495=5497,5496
<5498=5500,5499
<5502=5555,5536,5520,5503
<5503=5504
<5504=5518,5505
<5505=5516,5514,5512,5508,5506
<5506=5507
<5508=5509
<5509=5511,5510
<5512=5513
<5514=5515
<5516=5517
<5518=5519
<5520=5521
<5521=5535,5534,5522
<5522=5533,5523
<5523=5531,5524
<5524=5529,5527,5525
<5525=5526
<5527=5528
<5529=5530
<5531=5532
<5536=5537
<5537=5553,5538
<5538=5551,5549,5547,5545,5543,5541,5539
<5539=5540
<5541=5542
<5543=5544
<5545=5546
<5547=5548
<5549=5550
<5551=5552
<5553=5554
<5555=5556
<5556=5567,5566,5565,5557
<5557=5564,5558
<5558=5563,5562,5559
<5559=5561,5560
<5579=5591,5590,5580
<5580=5587,5584,5581
<5581=5583,5582
<5584=5586,5585
<5587=5589,5588
<5591=5782,5762,5749,5729,5718,5711,5706,5688,5677,5659,5654,5643,5626,5609,5592
<5592=5593
<5593=5607,5594
<5594=5603,5601,5595
<5595=5596
<5596=5600,5597
<5597=5599,5598
<5601=5602
<5603=5604
<5604=5606,5605
<5607=5608
<5609=5610
<5610=5624,5611
<5611=5620,5618,5612
<5612=5613
<5613=5617,5614
<5614=5616,5615
<5618=5619
<5620=5621
<5621=5623,5622
<5624=5625
<5626=5627
<5627=5641,5628
<5628=5637,5635,5629
<5629=5630
<5630=5634,5631
<5631=5633,5632
<5635=5636
<5637=5638
<5638=5640,5639
<5641=5642
<5643=5644
<5644=5652,5645
<5645=5650,5648,5646
<5646=5647
<5648=5649
<5650=5651
<5652=5653
<5654=5655
<5655=5658,5657,5656
<5659=5660
<5660=5674,5661
<5661=5668,5662
<5662=5666,5663
<5663=5664
<5664=5665
<5666=5667
<5668=5672,5669
<5669=5670
<5670=5671
<5672=5673
<5674=5676,5675
<5677=5678
<5678=5685,5679
<5679=5683,5680
<5680=5681
<5681=5682
<5683=5684
<5685=5687,5686
<5688=5689
<5689=5703,5690
<5690=5697,5691
<5691=5695,5692
<5692=5693
<5693=5694
<5695=5696
<5697=5701,5698
<5698=5699
<5699=5700
<5701=5702
<5703=5705,5704
<5706=5707
<5707=5710,5709,5708
<5711=5712
<5712=5717,5716,5713
<5713=5715,5714
<5718=5719
<5719=5728,5727,5720
<5720=5726,5721
<5721=5725,5722
<5722=5724,5723
<5729=5730
<5730=5746,5731
<5731=5738,5732
<5732=5736,5733
<5733=5734
<5734=5735
<5736=5737
<5738=5745,5739
<5739=5743,5740
<5740=5741
<5741=5742
<5743=5744
<5746=5748,5747
<5749=5750
<5750=5759,5751
<5751=5758,5752
<5752=5756,5753
<5753=5754
<5754=5755
<5756=5757
<5759=5761,5760
<5762=5763
<5763=5779,5764
<5764=5771,5765
<5765=5769,5766
<5766=5767
<5767=5768
<5769=5770
<5771=5778,5772
<5772=5776,5773
<5773=5774
<5774=5775
<5776=5777
<5779=5781,5780
<5782=5783
<5783=5786,5785,5784
<5803=5809,5808,5804
<5804=5805
<5805=5807,5806
<5809=5923,5905,5889,5884,5873,5868,5861,5856,5837,5822,5815,5810
<5810=5811
<5811=5813,5812
<5813=5814
<5815=5816
<5816=5820,5817
<5817=5818
<5818=5819
<5820=5821
<5822=5823
<5823=5835,5824
<5824=5833,5831,5825
<5825=5826
<5826=5830,5827
<5827=5829,5828
<5831=5832
<5833=5834
<5835=5836
<5837=5838
<5838=5854,5839
<5839=5852,5850,5848,5846,5844,5842,5840
<5840=5841
<5842=5843
<5844=5845
<5846=5847
<5848=5849
<5850=5851
<5852=5853
<5854=5855
<5856=5857
<5857=5860,5859,5858
<5861=5862
<5862=5866,5863
<5863=5864
<5864=5865
<5866=5867
<5868=5869
<5869=5872,5871,5870
<5873=5874
<5874=5882,5875
<5875=5880,5878,5876
<5876=5877
<5878=5879
<5880=5881
<5882=5883
<5884=5885
<5885=5888,5887,5886
<5889=5890
<5890=5904,5903,5891
<5891=5902,5892
<5892=5900,5893
<5893=5894
<5894=5895
<5895=5897,5896
<5897=5899,5898
<5900=5901
<5905=5906
<5906=5922,5921,5907
<5907=5920,5908
<5908=5918,5909
<5909=5914,5910
<5910=5911
<5911=5913,5912
<5914=5915
<5915=5917,5916
<5918=5919
<5923=5924
<5924=5938,5937,5925
<5925=5936,5926
<5926=5934,5927
<5927=5932,5930,5928
<5928=5929
<5930=5931
<5932=5933
<5934=5935
<5954=5960,5959,5955
<5955=5956
<5956=5958,5957
<5960=6050,6032,6016,6011,6000,5995,5988,5973,5966,5961
<5961=5962
<5962=5964,5963
<5964=5965
<5966=5967
<5967=5971,5968
<5968=5969
<5969=5970
<5971=5972
<5973=5974
<5974=5986,5975
<5975=5984,5982,5976
<5976=5977
<5977=5981,5978
<5978=5980,5979
<5982=5983
<5984=5985
<5986=5987
<5988=5989
<5989=5993,5990
<5990=5991
<5991=5992
<5993=5994
<5995=5996
<5996=5999,5998,5997
<6000=6001
<6001=6009,6002
<6002=6007,6005,6003
<6003=6004
<6005=6006
<6007=6008
<6009=6010
<6011=6012
<6012=6015,6014,6013
<6016=6017
<6017=6031,6030,6018
<6018=6029,6019
<6019=6027,6020
<6020=6021
<6021=6022
<6022=6024,6023
<6024=6026,6025
<6027=6028
<6032=6033
<6033=6049,6048,6034
<6034=6047,6035
<6035=6045,6036
<6036=6041,6037
<6037=6038
<6038=6040,6039
<6041=6042
<6042=6044,6043
<6045=6046
<6050=6051
<6051=6065,6064,6052
<6052=6063,6053
<6053=6061,6054
<6054=6059,6057,6055
<6055=6056
<6057=6058
<6059=6060
<6061=6062
<6080=6083,6082,6081
<6083=6109,6084
<6084=6085
<6085=6107,6086
<6086=6101,6095,6091,6087
<6087=6088
<6088=6090,6089
<6091=6092
<6092=6094,6093
<6095=6096
<6096=6098,6097
<6098=6100,6099
<6101=6102
<6102=6104,6103
<6104=6106,6105
<6107=6108
<6109=6116,6110
<6110=6115,6114,6111
<6111=6113,6112
<6116=6121,6120,6117
<6117=6119,6118
<6130=6136,6135,6131
<6131=6132
<6132=6134,6133
<6136=6157,6147,6137
<6137=6138
<6138=6144,6139
<6139=6143,6140
<6140=6142,6141
<6144=6146,6145
<6147=6148
<6148=6154,6149
<6149=6153,6150
<6150=6152,6151
<6154=6156,6155
<6157=6158
<6158=6164,6159
<6159=6163,6160
<6160=6162,6161
<6164=6166,6165
<6174=6177,6176,6175
<6177=6266,6259,6223,6204,6192,6178
<6178=6186,6182,6179
<6179=6180
<6180=6181
<6182=6183
<6183=6185,6184
<6186=6187
<6187=6189,6188
<6189=6191,6190
<6192=6193
<6193=6203,6202,6194
<6194=6201,6195
<6195=6199,6196
<6196=6197
<6197=6198
<6199=6200
<6204=6205
<6205=6222,6206
<6206=6220,6207
<6207=6218,6212,6208
<6208=6209
<6209=6211,6210
<6212=6213
<6213=6215,6214
<6215=6217,6216
<6218=6219
<6220=6221
<6223=6224
<6224=6258,6257,6225
<6225=6256,6226
<6226=6241,6227
<6227=6239,6228
<6228=6229
<6229=6230
<6230=6238,6231
<6231=6235,6232
<6232=6234,6233
<6235=6237,6236
<6239=6240
<6241=6249,6242
<6242=6246,6243
<6243=6245,6244
<6246=6248,6247
<6249=6253,6250
<6250=6252,6251
<6253=6255,6254
<6259=6260
<6260=6264,6261
<6261=6262
<6262=6263
<6264=6265
<6266=6267
<6267=6270,6269,6268
<6281=6287,6286,6282
<6282=6283
<6283=6285,6284
<6287=6394,6387,6382,6375,6365,6355,6345,6341,6320,6312,6304,6296,6288
<6288=6289
<6289=6293,6290
<6290=6292,6291
<6293=6295,6294
<6296=6297
<6297=6301,6298
<6298=6300,6299
<6301=6303,6302
<6304=6305
<6305=6309,6306
<6306=6308,6307
<6309=6311,6310
<6312=6313
<6313=6317,6314
<6314=6316,6315
<6317=6319,6318
<6320=6321
<6321=6339,6322
<6322=6337,6335,6333,6331,6329,6327,6323
<6323=6324
<6324=6326,6325
<6327=6328
<6329=6330
<6331=6332
<6333=6334
<6335=6336
<6337=6338
<6339=6340
<6341=6342
<6342=6344,6343
<6345=6346
<6346=6352,6347
<6347=6351,6348
<6348=6350,6349
<6352=6354,6353
<6355=6356
<6356=6362,6357
<6357=6361,6358
<6358=6360,6359
<6362=6364,6363
<6365=6366
<6366=6372,6367
<6367=6371,6368
<6368=6370,6369
<6372=6374,6373
<6375=6376
<6376=6380,6377
<6377=6378
<6378=6379
<6380=6381
<6382=6383
<6383=6386,6385,6384
<6387=6388
<6388=6392,6389
<6389=6390
<6390=6391
<6392=6393
<6394=6395
<6395=6398,6397,6396
<6410=6416,6415,6411
<6411=6412
<6412=6414,6413
<6416=6474,6460,6453,6417
<6417=6418
<6418=6444,6419
<6419=6437,6420
<6420=6430,6421
<6421=6427,6422
<6422=6424,6423
<6424=6426,6425
<6427=6429,6428
<6430=6434,6431
<6431=6433,6432
<6434=6436,6435
<6437=6441,6438
<6438=6440,6439
<6441=6443,6442
<6444=6450,6445
<6445=6447,6446
<6447=6449,6448
<6450=6452,6451
<6453=6456,6454
<6454=6455
<6456=6457
<6457=6459,6458
<6460=6461
<6461=6473,6472,6462
<6462=6471,6463
<6463=6469,6464
<6464=6467,6465
<6465=6466
<6467=6468
<6469=6470
<6474=6475
<6475=6478,6477,6476
<6490=6496,6495,6491
<6491=6492
<6492=6494,6493
<6496=6868,6861,6856,6835,6820,6804,6787,6776,6772,6751,6739,6734,6723,6710,6693,6688,6675,6636,6631,6610,6605,6584,6579,6566,6557,6548,6539,6532,6513,6499,6497
<6497=6498
<6499=6507,6500
<6500=6501
<6501=6505,6502
<6502=6503
<6503=6504
<6505=6506
<6507=6508
<6508=6510,6509
<6510=6512,6511
<6513=6514
<6514=6530,6515
<6515=6528,6526,6524,6522,6520,6518,6516
<6516=6517
<6518=6519
<6520=6521
<6522=6523
<6524=6525
<6526=6527
<6528=6529
<6530=6531
<6532=6533
<6533=6535,6534
<6535=6536
<6536=6538,6537
<6539=6540
<6540=6544,6541
<6541=6542
<6542=6543
<6544=6545
<6545=6547,6546
<6548=6549
<6549=6553,6550
<6550=6551
<6551=6552
<6553=6554
<6554=6556,6555
<6557=6558
<6558=6565,6564,6559
<6559=6563,6560
<6560=6562,6561
<6566=6567
<6567=6577,6568
<6568=6575,6573,6571,6569
<6569=6570
<6571=6572
<6573=6574
<6575=6576
<6577=6578
<6579=6580
<6580=6583,6582,6581
<6584=6585
<6585=6603,6586
<6586=6601,6599,6597,6595,6593,6589,6587
<6587=6588
<6589=6590
<6590=6592,6591
<6593=6594
<6595=6596
<6597=6598
<6599=6600
<6601=6602
<6603=6604
<6605=6606
<6606=6609,6608,6607
<6610=6611
<6611=6629,6612
<6612=6627,6625,6623,6621,6619,6615,6613
<6613=6614
<6615=6616
<6616=6618,6617
<6619=6620
<6621=6622
<6623=6624
<6625=6626
<6627=6628
<6629=6630
<6631=6632
<6632=6635,6634,6633
<6636=6637
<6637=6674,6673,6672,6638
<6638=6671,6639
<6639=6665,6657,6656,6650,6644,6643,6642,6641,6640
<6644=6648,6645
<6645=6646
<6646=6647
<6648=6649
<6650=6654,6651
<6651=6652
<6652=6653
<6654=6655
<6657=6664,6658
<6658=6662,6659
<6659=6660
<6660=6661
<6662=6663
<6665=6669,6666
<6666=6667
<6667=6668
<6669=6670
<6675=6676
<6676=6686,6677
<6677=6684,6680,6678
<6678=6679
<6680=6681
<6681=6683,6682
<6684=6685
<6686=6687
<6688=6689
<6689=6692,6691,6690
<6693=6694
<6694=6708,6695
<6695=6706,6704,6702,6698,6696
<6696=6697
<6698=6699
<6699=6701,6700
<6702=6703
<6704=6705
<6706=6707
<6708=6709
<6710=6711
<6711=6722,6712
<6712=6720,6713
<6713=6718,6716,6714
<6714=6715
<6716=6717
<6718=6719
<6720=6721
<6723=6724
<6724=6732,6725
<6725=6730,6728,6726
<6726=6727
<6728=6729
<6730=6731
<6732=6733
<6734=6735
<6735=6738,6737,6736
<6739=6740
<6740=6750,6749,6741
<6741=6748,6742
<6742=6746,6743
<6743=6744
<6744=6745
<6746=6747
<6751=6752
<6752=6770,6753
<6753=6768,6766,6764,6762,6760,6758,6754
<6754=6755
<6755=6757,6756
<6758=6759
<6760=6761
<6762=6763
<6764=6765
<6766=6767
<6768=6769
<6770=6771
<6772=6773
<6773=6775,6774
<6776=6777
<6777=6786,6785,6784,6778
<6778=6783,6779
<6779=6782,6781,6780
<6787=6788
<6788=6802,6789
<6789=6800,6798,6796,6792,6790
<6790=6791
<6792=6793
<6793=6795,6794
<6796=6797
<6798=6799
<6800=6801
<6802=6803
<6804=6805
<6805=6819,6818,6806
<6806=6817,6807
<6807=6815,6808
<6808=6813,6811,6809
<6809=6810
<6811=6812
<6813=6814
<6815=6816
<6820=6821
<6821=6834,6833,6832,6822
<6822=6831,6823
<6823=6828,6825,6824
<6825=6827,6826
<6828=6830,6829
<6835=6836
<6836=6854,6837
<6837=6852,6850,6848,6846,6842,6840,6838
<6838=6839
<6840=6841
<6842=6843
<6843=6845,6844
<6846=6847
<6848=6849
<6850=6851
<6852=6853
<6854=6855
<6856=6857
<6857=6860,6859,6858
<6861=6862
<6862=6866,6863
<6863=6864
<6864=6865
<6866=6867
<6868=6869
<6869=6872,6871,6870
<6900=6906,6905,6901
<6901=6902
<6902=6904,6903
<6906=6907
<6907=6908
<6908=6946,6909
<6909=6944,6942,6938,6934,6930,6926,6922,6918,6914,6910
<6910=6911
<6911=6913,6912
<6914=6915
<6915=6917,6916
<6918=6919
<6919=6921,6920
<6922=6923
<6923=6925,6924
<6926=6927
<6927=6929,6928
<6930=6931
<6931=6933,6932
<6934=6935
<6935=6937,6936
<6938=6939
<6939=6941,6940
<6942=6943
<6944=6945
<6946=6947
<6961=6967,6966,6962
<6962=6963
<6963=6965,6964
<6967=6968
<6968=6969
<6969=7007,6970
<6970=7005,7003,6999,6995,6991,6987,6983,6979,6975,6971
<6971=6972
<6972=6974,6973
<6975=6976
<6976=6978,6977
<6979=6980
<6980=6982,6981
<6983=6984
<6984=6986,6985
<6987=6988
<6988=6990,6989
<6991=6992
<6992=6994,6993
<6995=6996
<6996=6998,6997
<6999=7000
<7000=7002,7001
<7003=7004
<7005=7006
<7007=7008
<7031=7037,7036,7032
<7032=7033
<7033=7035,7034
<7037=7038
<7038=7084,7050,7039
<7039=7040
<7040=7041
<7041=7042
<7042=7048,7043
<7043=7046,7044
<7044=7045
<7046=7047
<7048=7049
<7050=7079,7072,7051
<7051=7052
<7052=7070,7053
<7053=7068,7066,7062,7058,7054
<7054=7055
<7055=7057,7056
<7058=7059
<7059=7061,7060
<7062=7063
<7063=7065,7064
<7066=7067
<7068=7069
<7070=7071
<7072=7073
<7073=7077,7074
<7074=7075
<7075=7076
<7077=7078
<7079=7080
<7080=7083,7082,7081
<7084=7085
<7093=7099,7098,7094
<7094=7095
<7095=7097,7096
<7099=7199,7192,7179,7178,7177,7176,7175,7174,7173,7172,7100,7123,7124,7125,7126,7127,7128,7129,7130,7131,7132,7133,7134,7135,7136,7137,7138,7139,7140,7141,7142,7143,7144,7145,7146,7147,7148,7149,7150,7151,7152,7153,7154,7155,7156,7157,7158,7159,7160,7161,7162,7163,7164,7165,7166,7167,7168,7169,7170,7171
<7100=7101
<7101=7121,7102
<7102=7119,7117,7115,7111,7107,7103
<7103=7104
<7104=7106,7105
<7107=7108
<7108=7110,7109
<7111=7112
<7112=7114,7113
<7115=7116
<7117=7118
<7119=7120
<7121=7122
<7179=7180
<7180=7190,7181
<7181=7188,7186,7184,7182
<7182=7183
<7184=7185
<7186=7187
<7188=7189
<7190=7191
<7192=7193
<7193=7198,7197,7194
<7194=7196,7195
