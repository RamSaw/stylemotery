>6	FunctionDef	RPolygon (int nValue)
>7	ParameterList	int nValue
>8	Parameter	 
>9	Identifier	nValue
>10	ParameterType	int
>11	CompoundStatement	 
>12	ExpressionStatement	 
>13	AssignmentExpr	nLastLineUpdated = - 1
>14	UnaryOp	- 1
>15	PrimaryExpression	1
>16	UnaryOperator	-
>17	Identifier	nLastLineUpdated
>18	ExpressionStatement	 
>19	AssignmentExpr	nPolyValue = nValue
>20	Identifier	nValue
>21	Identifier	nPolyValue
>42	FunctionDef	RPolygon 
>43	ParameterList	 
>44	ReturnType	void
>45	CompoundStatement	 
>46	ForStatement	for ( iString = 0 ; iString < aanXY . size ( ) ; iString ++ )
>47	CompoundStatement	 
>48	ForStatement	for ( iVert = 0 ; iVert < anString . size ( ) ; iVert += 2 )
>49	CompoundStatement	 
>50	ExpressionStatement	 
>51	CallExpression	printf ( \"    (%d,%d)\n\" , anString [ iVert ] , anString [ iVert + 1 ] )
>52	ArgumentList	\"    (%d,%d)\n\"
>53	Argument	anString [ iVert + 1 ]
>54	ArrayIndexing	anString [ iVert + 1 ]
>55	AdditiveExpression	iVert + 1
>56	PrimaryExpression	1
>57	Identifier	iVert
>58	Identifier	anString
>59	Argument	anString [ iVert ]
>60	ArrayIndexing	anString [ iVert ]
>61	Identifier	iVert
>62	Identifier	anString
>63	Argument	\"    (%d,%d)\n\"
>64	PrimaryExpression	\"    (%d,%d)\n\"
>65	Callee	printf
>66	Identifier	printf
>67	AssignmentExpr	 
>68	PrimaryExpression	2
>69	Identifier	iVert
>70	Condition	 
>71	RelationalExpression	iVert < anString . size ( )
>72	CallExpression	anString . size ( )
>73	ArgumentList	 
>74	Callee	anString . size
>75	MemberAccess	anString . size
>76	Identifier	size
>77	Identifier	anString
>78	Identifier	iVert
>79	ForInit	 
>80	AssignmentExpr	iVert = 0
>81	PrimaryExpression	0
>82	Identifier	iVert
>83	ExpressionStatement	 
>84	CallExpression	printf ( \"  String %d
>85	ArgumentList	\"  String %d
>86	Argument	( int ) iString
>87	CastExpression	( int ) iString
>88	Identifier	iString
>89	CastTarget	int
>90	Argument	\"  String %d
>91	PrimaryExpression	\"  String %d
>92	Callee	printf
>93	Identifier	printf
>94	IdentifierDeclStatement	 
>95	IdentifierDecl	iVert
>96	Identifier	iVert
>97	IdentifierDeclType	size_t
>98	IdentifierDeclStatement	 
>99	IdentifierDecl	& anString = aanXY [ iString ]
>100	AssignmentExpr	& anString = aanXY [ iString ]
>101	ArrayIndexing	aanXY [ iString ]
>102	Identifier	iString
>103	Identifier	aanXY
>104	Identifier	anString
>105	Identifier	anString
>106	IdentifierDeclType	std 
>107	IncDecOp	 
>108	IncDec	++
>109	Identifier	iString
>110	Condition	 
>111	RelationalExpression	iString < aanXY . size ( )
>112	CallExpression	aanXY . size ( )
>113	ArgumentList	 
>114	Callee	aanXY . size
>115	MemberAccess	aanXY . size
>116	Identifier	size
>117	Identifier	aanXY
>118	Identifier	iString
>119	ForInit	 
>120	AssignmentExpr	iString = 0
>121	PrimaryExpression	0
>122	Identifier	iString
>123	ExpressionStatement	 
>124	CallExpression	printf ( \"RPolygon
>125	ArgumentList	\"RPolygon
>126	Argument	nLastLineUpdated
>127	Identifier	nLastLineUpdated
>128	Argument	nPolyValue
>129	Identifier	nPolyValue
>130	Argument	\"RPolygon
>131	PrimaryExpression	\"RPolygon
>132	Callee	printf
>133	Identifier	printf
>134	IdentifierDeclStatement	 
>135	IdentifierDecl	iString
>136	Identifier	iString
>137	IdentifierDeclType	size_t
>153	FunctionDef	RPolygon 
>154	ParameterList	 
>155	ReturnType	void
>156	CompoundStatement	 
>157	ForStatement	for ( iBaseString = 0 ; iBaseString < aanXY . size ( ) ; iBaseString ++ )
>158	CompoundStatement	 
>159	ExpressionStatement	 
>160	CallExpression	CPLAssert ( anBase [ 0 ] == anBase [ anBase . size ( ) - 2 ] && anBase [ 1 ] == anBase [ anBase . size ( ) - 1 ] )
>161	ArgumentList	anBase [ 0 ] == anBase [ anBase . size ( ) - 2 ] && anBase [ 1 ] == anBase [ anBase . size ( ) - 1 ]
>162	Argument	anBase [ 0 ] == anBase [ anBase . size ( ) - 2 ] && anBase [ 1 ] == anBase [ anBase . size ( ) - 1 ]
>163	AndExpression	anBase [ 0 ] == anBase [ anBase . size ( ) - 2 ] && anBase [ 1 ] == anBase [ anBase . size ( ) - 1 ]
>164	EqualityExpression	anBase [ 1 ] == anBase [ anBase . size ( ) - 1 ]
>165	ArrayIndexing	anBase [ anBase . size ( ) - 1 ]
>166	AdditiveExpression	anBase . size ( ) - 1
>167	PrimaryExpression	1
>168	CallExpression	anBase . size ( )
>169	ArgumentList	 
>170	Callee	anBase . size
>171	MemberAccess	anBase . size
>172	Identifier	size
>173	Identifier	anBase
>174	Identifier	anBase
>175	ArrayIndexing	anBase [ 1 ]
>176	PrimaryExpression	1
>177	Identifier	anBase
>178	EqualityExpression	anBase [ 0 ] == anBase [ anBase . size ( ) - 2 ]
>179	ArrayIndexing	anBase [ anBase . size ( ) - 2 ]
>180	AdditiveExpression	anBase . size ( ) - 2
>181	PrimaryExpression	2
>182	CallExpression	anBase . size ( )
>183	ArgumentList	 
>184	Callee	anBase . size
>185	MemberAccess	anBase . size
>186	Identifier	size
>187	Identifier	anBase
>188	Identifier	anBase
>189	ArrayIndexing	anBase [ 0 ]
>190	PrimaryExpression	0
>191	Identifier	anBase
>192	Callee	CPLAssert
>193	Identifier	CPLAssert
>194	WhileStatement	while ( bMergeHappened )
>195	CompoundStatement	 
>196	ForStatement	for ( iString = iBaseString + 1 ; iString < aanXY . size ( ) ; iString ++ )
>197	CompoundStatement	 
>198	IfStatement	if ( anBase [ anBase . size ( ) - 2 ] == anString [ 0 ] && anBase [ anBase . size ( ) - 1 ] == anString [ 1 ] )
>199	ElseStatement	else
>200	IfStatement	if ( anBase [ anBase . size ( ) - 2 ] == anString [ anString . size ( ) - 2 ] && anBase [ anBase . size ( ) - 1 ] == \
>201	CompoundStatement	 
>202	ExpressionStatement	 
>203	AssignmentExpr	bMergeHappened = TRUE
>204	Identifier	TRUE
>205	Identifier	bMergeHappened
>206	ExpressionStatement	 
>207	CallExpression	Merge ( iBaseString , iString , - 1 )
>208	ArgumentList	iBaseString
>209	Argument	- 1
>210	UnaryOp	- 1
>211	PrimaryExpression	1
>212	UnaryOperator	-
>213	Argument	iString
>214	Identifier	iString
>215	Argument	iBaseString
>216	Identifier	iBaseString
>217	Callee	Merge
>218	Identifier	Merge
>219	Condition	 
>220	AndExpression	anBase [ anBase . size ( ) - 2 ] == anString [ anString . size ( ) - 2 ] && anBase [ anBase . size ( ) \
>221	EqualityExpression	anBase [ anBase . size ( ) - 1 ] == anString [ anString . size ( ) - 1 ]
>222	ArrayIndexing	anString [ anString . size ( ) - 1 ]
>223	AdditiveExpression	anString . size ( ) - 1
>224	PrimaryExpression	1
>225	CallExpression	anString . size ( )
>226	ArgumentList	 
>227	Callee	anString . size
>228	MemberAccess	anString . size
>229	Identifier	size
>230	Identifier	anString
>231	Identifier	anString
>232	ArrayIndexing	anBase [ anBase . size ( ) - 1 ]
>233	AdditiveExpression	anBase . size ( ) - 1
>234	PrimaryExpression	1
>235	CallExpression	anBase . size ( )
>236	ArgumentList	 
>237	Callee	anBase . size
>238	MemberAccess	anBase . size
>239	Identifier	size
>240	Identifier	anBase
>241	Identifier	anBase
>242	EqualityExpression	anBase [ anBase . size ( ) - 2 ] == anString [ anString . size ( ) - 2 ]
>243	ArrayIndexing	anString [ anString . size ( ) - 2 ]
>244	AdditiveExpression	anString . size ( ) - 2
>245	PrimaryExpression	2
>246	CallExpression	anString . size ( )
>247	ArgumentList	 
>248	Callee	anString . size
>249	MemberAccess	anString . size
>250	Identifier	size
>251	Identifier	anString
>252	Identifier	anString
>253	ArrayIndexing	anBase [ anBase . size ( ) - 2 ]
>254	AdditiveExpression	anBase . size ( ) - 2
>255	PrimaryExpression	2
>256	CallExpression	anBase . size ( )
>257	ArgumentList	 
>258	Callee	anBase . size
>259	MemberAccess	anBase . size
>260	Identifier	size
>261	Identifier	anBase
>262	Identifier	anBase
>263	CompoundStatement	 
>264	ExpressionStatement	 
>265	AssignmentExpr	bMergeHappened = TRUE
>266	Identifier	TRUE
>267	Identifier	bMergeHappened
>268	ExpressionStatement	 
>269	CallExpression	Merge ( iBaseString , iString , 1 )
>270	ArgumentList	iBaseString
>271	Argument	1
>272	PrimaryExpression	1
>273	Argument	iString
>274	Identifier	iString
>275	Argument	iBaseString
>276	Identifier	iBaseString
>277	Callee	Merge
>278	Identifier	Merge
>279	Condition	 
>280	AndExpression	anBase [ anBase . size ( ) - 2 ] == anString [ 0 ] && anBase [ anBase . size ( ) - 1 ] == anString [ \
>281	EqualityExpression	anBase [ anBase . size ( ) - 1 ] == anString [ 1 ]
>282	ArrayIndexing	anString [ 1 ]
>283	PrimaryExpression	1
>284	Identifier	anString
>285	ArrayIndexing	anBase [ anBase . size ( ) - 1 ]
>286	AdditiveExpression	anBase . size ( ) - 1
>287	PrimaryExpression	1
>288	CallExpression	anBase . size ( )
>289	ArgumentList	 
>290	Callee	anBase . size
>291	MemberAccess	anBase . size
>292	Identifier	size
>293	Identifier	anBase
>294	Identifier	anBase
>295	EqualityExpression	anBase [ anBase . size ( ) - 2 ] == anString [ 0 ]
>296	ArrayIndexing	anString [ 0 ]
>297	PrimaryExpression	0
>298	Identifier	anString
>299	ArrayIndexing	anBase [ anBase . size ( ) - 2 ]
>300	AdditiveExpression	anBase . size ( ) - 2
>301	PrimaryExpression	2
>302	CallExpression	anBase . size ( )
>303	ArgumentList	 
>304	Callee	anBase . size
>305	MemberAccess	anBase . size
>306	Identifier	size
>307	Identifier	anBase
>308	Identifier	anBase
>309	IdentifierDeclStatement	 
>310	IdentifierDecl	& anString = aanXY [ iString ]
>311	AssignmentExpr	& anString = aanXY [ iString ]
>312	ArrayIndexing	aanXY [ iString ]
>313	Identifier	iString
>314	Identifier	aanXY
>315	Identifier	anString
>316	Identifier	anString
>317	IdentifierDeclType	std 
>318	IncDecOp	 
>319	IncDec	++
>320	Identifier	iString
>321	Condition	 
>322	RelationalExpression	iString < aanXY . size ( )
>323	CallExpression	aanXY . size ( )
>324	ArgumentList	 
>325	Callee	aanXY . size
>326	MemberAccess	aanXY . size
>327	Identifier	size
>328	Identifier	aanXY
>329	Identifier	iString
>330	ForInit	 
>331	AssignmentExpr	iString = iBaseString + 1
>332	AdditiveExpression	iBaseString + 1
>333	PrimaryExpression	1
>334	Identifier	iBaseString
>335	Identifier	iString
>336	ExpressionStatement	 
>337	AssignmentExpr	bMergeHappened = FALSE
>338	Identifier	FALSE
>339	Identifier	bMergeHappened
>340	IdentifierDeclStatement	 
>341	IdentifierDecl	iString
>342	Identifier	iString
>343	IdentifierDeclType	size_t
>344	Condition	 
>345	Identifier	bMergeHappened
>346	IdentifierDeclStatement	 
>347	IdentifierDecl	bMergeHappened = TRUE
>348	AssignmentExpr	bMergeHappened = TRUE
>349	Identifier	TRUE
>350	Identifier	TRUE
>351	Identifier	bMergeHappened
>352	IdentifierDeclType	int
>353	IdentifierDeclStatement	 
>354	IdentifierDecl	& anBase = aanXY [ iBaseString ]
>355	AssignmentExpr	& anBase = aanXY [ iBaseString ]
>356	ArrayIndexing	aanXY [ iBaseString ]
>357	Identifier	iBaseString
>358	Identifier	aanXY
>359	Identifier	anBase
>360	Identifier	anBase
>361	IdentifierDeclType	std 
>362	IncDecOp	 
>363	IncDec	++
>364	Identifier	iBaseString
>365	Condition	 
>366	RelationalExpression	iBaseString < aanXY . size ( )
>367	CallExpression	aanXY . size ( )
>368	ArgumentList	 
>369	Callee	aanXY . size
>370	MemberAccess	aanXY . size
>371	Identifier	size
>372	Identifier	aanXY
>373	Identifier	iBaseString
>374	ForInit	 
>375	AssignmentExpr	iBaseString = 0
>376	PrimaryExpression	0
>377	Identifier	iBaseString
>378	IdentifierDeclStatement	 
>379	IdentifierDecl	iBaseString
>380	Identifier	iBaseString
>381	IdentifierDeclType	size_t
>403	FunctionDef	RPolygon 
>404	ParameterList	int iBaseString , int iSrcString , int iDirection
>405	Parameter	 
>406	Identifier	iDirection
>407	ParameterType	int
>408	Parameter	 
>409	Identifier	iSrcString
>410	ParameterType	int
>411	Parameter	 
>412	Identifier	iBaseString
>413	ParameterType	int
>414	ReturnType	void
>415	CompoundStatement	 
>416	ExpressionStatement	 
>417	CallExpression	aanXY . resize ( nSize - 1 )
>418	ArgumentList	nSize - 1
>419	Argument	nSize - 1
>420	AdditiveExpression	nSize - 1
>421	PrimaryExpression	1
>422	Identifier	nSize
>423	Callee	aanXY . resize
>424	MemberAccess	aanXY . resize
>425	Identifier	resize
>426	Identifier	aanXY
>427	IdentifierDeclStatement	 
>428	IdentifierDecl	nSize = aanXY . size ( )
>429	AssignmentExpr	nSize = aanXY . size ( )
>430	CallExpression	aanXY . size ( )
>431	ArgumentList	 
>432	Callee	aanXY . size
>433	MemberAccess	aanXY . size
>434	Identifier	size
>435	Identifier	aanXY
>436	Identifier	nSize
>437	Identifier	nSize
>438	IdentifierDeclType	size_t
>439	IfStatement	if ( iSrcString < ( ( int ) aanXY . size ( ) ) - 1 )
>440	ExpressionStatement	 
>441	AssignmentExpr	aanXY [ iSrcString ] = aanXY [ aanXY . size ( ) - 1 ]
>442	ArrayIndexing	aanXY [ aanXY . size ( ) - 1 ]
>443	AdditiveExpression	aanXY . size ( ) - 1
>444	PrimaryExpression	1
>445	CallExpression	aanXY . size ( )
>446	ArgumentList	 
>447	Callee	aanXY . size
>448	MemberAccess	aanXY . size
>449	Identifier	size
>450	Identifier	aanXY
>451	Identifier	aanXY
>452	ArrayIndexing	aanXY [ iSrcString ]
>453	Identifier	iSrcString
>454	Identifier	aanXY
>455	Condition	 
>456	RelationalExpression	iSrcString < ( ( int ) aanXY . size ( ) ) - 1
>457	AdditiveExpression	( ( int ) aanXY . size ( ) ) - 1
>458	PrimaryExpression	1
>459	CastExpression	( int ) aanXY . size ( )
>460	CallExpression	aanXY . size ( )
>461	ArgumentList	 
>462	Callee	aanXY . size
>463	MemberAccess	aanXY . size
>464	Identifier	size
>465	Identifier	aanXY
>466	CastTarget	int
>467	Identifier	iSrcString
>468	ForStatement	for ( i = iStart ; i != iEnd ; i += iDirection )
>469	CompoundStatement	 
>470	ExpressionStatement	 
>471	CallExpression	anBase . push_back ( anString [ i * 2 + 1 ] )
>472	ArgumentList	anString [ i * 2 + 1 ]
>473	Argument	anString [ i * 2 + 1 ]
>474	ArrayIndexing	anString [ i * 2 + 1 ]
>475	AdditiveExpression	i * 2 + 1
>476	PrimaryExpression	1
>477	MultiplicativeExpression	i * 2
>478	PrimaryExpression	2
>479	Identifier	i
>480	Identifier	anString
>481	Callee	anBase . push_back
>482	MemberAccess	anBase . push_back
>483	Identifier	push_back
>484	Identifier	anBase
>485	ExpressionStatement	 
>486	CallExpression	anBase . push_back ( anString [ i * 2 + 0 ] )
>487	ArgumentList	anString [ i * 2 + 0 ]
>488	Argument	anString [ i * 2 + 0 ]
>489	ArrayIndexing	anString [ i * 2 + 0 ]
>490	AdditiveExpression	i * 2 + 0
>491	PrimaryExpression	0
>492	MultiplicativeExpression	i * 2
>493	PrimaryExpression	2
>494	Identifier	i
>495	Identifier	anString
>496	Callee	anBase . push_back
>497	MemberAccess	anBase . push_back
>498	Identifier	push_back
>499	Identifier	anBase
>500	AssignmentExpr	 
>501	Identifier	iDirection
>502	Identifier	i
>503	Condition	 
>504	EqualityExpression	i != iEnd
>505	Identifier	iEnd
>506	Identifier	i
>507	ForInit	 
>508	AssignmentExpr	i = iStart
>509	Identifier	iStart
>510	Identifier	i
>511	IfStatement	if ( iDirection == 1 )
>512	ElseStatement	else
>513	CompoundStatement	 
>514	ExpressionStatement	 
>515	AssignmentExpr	iEnd = - 1
>516	UnaryOp	- 1
>517	PrimaryExpression	1
>518	UnaryOperator	-
>519	Identifier	iEnd
>520	ExpressionStatement	 
>521	AssignmentExpr	iStart = anString . size ( ) / 2 - 2
>522	AdditiveExpression	anString . size ( ) / 2 - 2
>523	PrimaryExpression	2
>524	MultiplicativeExpression	anString . size ( ) / 2
>525	PrimaryExpression	2
>526	CallExpression	anString . size ( )
>527	ArgumentList	 
>528	Callee	anString . size
>529	MemberAccess	anString . size
>530	Identifier	size
>531	Identifier	anString
>532	Identifier	iStart
>533	CompoundStatement	 
>534	ExpressionStatement	 
>535	AssignmentExpr	iEnd = anString . size ( ) / 2
>536	MultiplicativeExpression	anString . size ( ) / 2
>537	PrimaryExpression	2
>538	CallExpression	anString . size ( )
>539	ArgumentList	 
>540	Callee	anString . size
>541	MemberAccess	anString . size
>542	Identifier	size
>543	Identifier	anString
>544	Identifier	iEnd
>545	ExpressionStatement	 
>546	AssignmentExpr	iStart = 1
>547	PrimaryExpression	1
>548	Identifier	iStart
>549	Condition	 
>550	EqualityExpression	iDirection == 1
>551	PrimaryExpression	1
>552	Identifier	iDirection
>553	IdentifierDeclStatement	 
>554	IdentifierDecl	i
>555	Identifier	i
>556	IdentifierDeclType	int
>557	IdentifierDecl	iEnd
>558	Identifier	iEnd
>559	IdentifierDeclType	int
>560	IdentifierDecl	iStart
>561	Identifier	iStart
>562	IdentifierDeclType	int
>563	IdentifierDeclStatement	 
>564	IdentifierDecl	& anString = aanXY [ iSrcString ]
>565	AssignmentExpr	& anString = aanXY [ iSrcString ]
>566	ArrayIndexing	aanXY [ iSrcString ]
>567	Identifier	iSrcString
>568	Identifier	aanXY
>569	Identifier	anString
>570	Identifier	anString
>571	IdentifierDeclType	std 
>572	IdentifierDeclStatement	 
>573	IdentifierDecl	& anBase = aanXY [ iBaseString ]
>574	AssignmentExpr	& anBase = aanXY [ iBaseString ]
>575	ArrayIndexing	aanXY [ iBaseString ]
>576	Identifier	iBaseString
>577	Identifier	aanXY
>578	Identifier	anBase
>579	Identifier	anBase
>580	IdentifierDeclType	std 
>602	FunctionDef	RPolygon 
>603	ParameterList	int x1 , int y1 , int x2 , int y2
>604	Parameter	 
>605	Identifier	y2
>606	ParameterType	int
>607	Parameter	 
>608	Identifier	x2
>609	ParameterType	int
>610	Parameter	 
>611	Identifier	y1
>612	ParameterType	int
>613	Parameter	 
>614	Identifier	x1
>615	ParameterType	int
>616	ReturnType	void
>617	CompoundStatement	 
>618	ReturnStatement	 
>619	ExpressionStatement	 
>620	CallExpression	anString . push_back ( y2 )
>621	ArgumentList	y2
>622	Argument	y2
>623	Identifier	y2
>624	Callee	anString . push_back
>625	MemberAccess	anString . push_back
>626	Identifier	push_back
>627	Identifier	anString
>628	ExpressionStatement	 
>629	CallExpression	anString . push_back ( x2 )
>630	ArgumentList	x2
>631	Argument	x2
>632	Identifier	x2
>633	Callee	anString . push_back
>634	MemberAccess	anString . push_back
>635	Identifier	push_back
>636	Identifier	anString
>637	ExpressionStatement	 
>638	CallExpression	anString . push_back ( y1 )
>639	ArgumentList	y1
>640	Argument	y1
>641	Identifier	y1
>642	Callee	anString . push_back
>643	MemberAccess	anString . push_back
>644	Identifier	push_back
>645	Identifier	anString
>646	ExpressionStatement	 
>647	CallExpression	anString . push_back ( x1 )
>648	ArgumentList	x1
>649	Argument	x1
>650	Identifier	x1
>651	Callee	anString . push_back
>652	MemberAccess	anString . push_back
>653	Identifier	push_back
>654	Identifier	anString
>655	IdentifierDeclStatement	 
>656	IdentifierDecl	& anString = aanXY [ nSize ]
>657	AssignmentExpr	& anString = aanXY [ nSize ]
>658	ArrayIndexing	aanXY [ nSize ]
>659	Identifier	nSize
>660	Identifier	aanXY
>661	Identifier	anString
>662	Identifier	anString
>663	IdentifierDeclType	std 
>664	ExpressionStatement	 
>665	CallExpression	aanXY . resize ( nSize + 1 )
>666	ArgumentList	nSize + 1
>667	Argument	nSize + 1
>668	AdditiveExpression	nSize + 1
>669	PrimaryExpression	1
>670	Identifier	nSize
>671	Callee	aanXY . resize
>672	MemberAccess	aanXY . resize
>673	Identifier	resize
>674	Identifier	aanXY
>675	IdentifierDeclStatement	 
>676	IdentifierDecl	nSize = aanXY . size ( )
>677	AssignmentExpr	nSize = aanXY . size ( )
>678	CallExpression	aanXY . size ( )
>679	ArgumentList	 
>680	Callee	aanXY . size
>681	MemberAccess	aanXY . size
>682	Identifier	size
>683	Identifier	aanXY
>684	Identifier	nSize
>685	Identifier	nSize
>686	IdentifierDeclType	size_t
>687	ForStatement	for ( iString = 0 ; iString < aanXY . size ( ) ; iString ++ )
>688	CompoundStatement	 
>689	IfStatement	if ( anString [ nSSize - 2 ] == x2 && anString [ nSSize - 1 ] == y2 )
>690	CompoundStatement	 
>691	ReturnStatement	 
>692	ExpressionStatement	 
>693	CallExpression	anString . push_back ( y1 )
>694	ArgumentList	y1
>695	Argument	y1
>696	Identifier	y1
>697	Callee	anString . push_back
>698	MemberAccess	anString . push_back
>699	Identifier	push_back
>700	Identifier	anString
>701	ExpressionStatement	 
>702	CallExpression	anString . push_back ( x1 )
>703	ArgumentList	x1
>704	Argument	x1
>705	Identifier	x1
>706	Callee	anString . push_back
>707	MemberAccess	anString . push_back
>708	Identifier	push_back
>709	Identifier	anString
>710	IfStatement	if ( nSSize >= 4 && ( anString [ nSSize - 4 ] - anString [ nSSize - 2 ] == ( anString [ nSSize - 2 ] - x1 ) * nLastLen ) && ( \
>711	CompoundStatement	 
>712	ExpressionStatement	 
>713	CallExpression	anString . pop_back ( )
>714	ArgumentList	 
>715	Callee	anString . pop_back
>716	MemberAccess	anString . pop_back
>717	Identifier	pop_back
>718	Identifier	anString
>719	ExpressionStatement	 
>720	CallExpression	anString . pop_back ( )
>721	ArgumentList	 
>722	Callee	anString . pop_back
>723	MemberAccess	anString . pop_back
>724	Identifier	pop_back
>725	Identifier	anString
>726	Condition	 
>727	AndExpression	nSSize >= 4 && ( anString [ nSSize - 4 ] - anString [ nSSize - 2 ] == ( anString [ nSSize - 2 ] - x1 ) * \
>728	AndExpression	( anString [ nSSize - 4 ] - anString [ nSSize - 2 ] == ( anString [ nSSize - 2 ] - x1 ) * nLastLen ) && ( \
>729	EqualityExpression	anString [ nSSize - 3 ] - anString [ nSSize - 1 ] == ( anString [ nSSize - 1 ] - y1 ) * nLastLen
>730	MultiplicativeExpression	( anString [ nSSize - 1 ] - y1 ) * nLastLen
>731	Identifier	nLastLen
>732	AdditiveExpression	anString [ nSSize - 1 ] - y1
>733	Identifier	y1
>734	ArrayIndexing	anString [ nSSize - 1 ]
>735	AdditiveExpression	nSSize - 1
>736	PrimaryExpression	1
>737	Identifier	nSSize
>738	Identifier	anString
>739	AdditiveExpression	anString [ nSSize - 3 ] - anString [ nSSize - 1 ]
>740	ArrayIndexing	anString [ nSSize - 1 ]
>741	AdditiveExpression	nSSize - 1
>742	PrimaryExpression	1
>743	Identifier	nSSize
>744	Identifier	anString
>745	ArrayIndexing	anString [ nSSize - 3 ]
>746	AdditiveExpression	nSSize - 3
>747	PrimaryExpression	3
>748	Identifier	nSSize
>749	Identifier	anString
>750	EqualityExpression	anString [ nSSize - 4 ] - anString [ nSSize - 2 ] == ( anString [ nSSize - 2 ] - x1 ) * nLastLen
>751	MultiplicativeExpression	( anString [ nSSize - 2 ] - x1 ) * nLastLen
>752	Identifier	nLastLen
>753	AdditiveExpression	anString [ nSSize - 2 ] - x1
>754	Identifier	x1
>755	ArrayIndexing	anString [ nSSize - 2 ]
>756	AdditiveExpression	nSSize - 2
>757	PrimaryExpression	2
>758	Identifier	nSSize
>759	Identifier	anString
>760	AdditiveExpression	anString [ nSSize - 4 ] - anString [ nSSize - 2 ]
>761	ArrayIndexing	anString [ nSSize - 2 ]
>762	AdditiveExpression	nSSize - 2
>763	PrimaryExpression	2
>764	Identifier	nSSize
>765	Identifier	anString
>766	ArrayIndexing	anString [ nSSize - 4 ]
>767	AdditiveExpression	nSSize - 4
>768	PrimaryExpression	4
>769	Identifier	nSSize
>770	Identifier	anString
>771	RelationalExpression	nSSize >= 4
>772	PrimaryExpression	4
>773	Identifier	nSSize
>774	IdentifierDeclStatement	 
>775	IdentifierDecl	nLastLen = MAX ( ABS ( anString [ nSSize - 4 ] - anString [ nSSize - 2 ] ) , ABS ( anString [ nSSize - 3 ] - anString [ \
>776	AssignmentExpr	nLastLen = MAX ( ABS ( anString [ nSSize - 4 ] - anString [ nSSize - 2 ] ) , ABS ( anString [ nSSize \
>777	CallExpression	MAX ( ABS ( anString [ nSSize - 4 ] - anString [ nSSize - 2 ] ) , ABS ( anString [ nSSize - 3 ] - anString [ nSSize \
>778	ArgumentList	ABS ( anString [ nSSize - 4 ] - anString [ nSSize - 2 ] )
>779	Argument	ABS ( anString [ nSSize - 3 ] - anString [ nSSize - 1 ] )
>780	CallExpression	ABS ( anString [ nSSize - 3 ] - anString [ nSSize - 1 ] )
>781	ArgumentList	anString [ nSSize - 3 ] - anString [ nSSize - 1 ]
>782	Argument	anString [ nSSize - 3 ] - anString [ nSSize - 1 ]
>783	AdditiveExpression	anString [ nSSize - 3 ] - anString [ nSSize - 1 ]
>784	ArrayIndexing	anString [ nSSize - 1 ]
>785	AdditiveExpression	nSSize - 1
>786	PrimaryExpression	1
>787	Identifier	nSSize
>788	Identifier	anString
>789	ArrayIndexing	anString [ nSSize - 3 ]
>790	AdditiveExpression	nSSize - 3
>791	PrimaryExpression	3
>792	Identifier	nSSize
>793	Identifier	anString
>794	Callee	ABS
>795	Identifier	ABS
>796	Argument	ABS ( anString [ nSSize - 4 ] - anString [ nSSize - 2 ] )
>797	CallExpression	ABS ( anString [ nSSize - 4 ] - anString [ nSSize - 2 ] )
>798	ArgumentList	anString [ nSSize - 4 ] - anString [ nSSize - 2 ]
>799	Argument	anString [ nSSize - 4 ] - anString [ nSSize - 2 ]
>800	AdditiveExpression	anString [ nSSize - 4 ] - anString [ nSSize - 2 ]
>801	ArrayIndexing	anString [ nSSize - 2 ]
>802	AdditiveExpression	nSSize - 2
>803	PrimaryExpression	2
>804	Identifier	nSSize
>805	Identifier	anString
>806	ArrayIndexing	anString [ nSSize - 4 ]
>807	AdditiveExpression	nSSize - 4
>808	PrimaryExpression	4
>809	Identifier	nSSize
>810	Identifier	anString
>811	Callee	ABS
>812	Identifier	ABS
>813	Callee	MAX
>814	Identifier	MAX
>815	Identifier	nLastLen
>816	Identifier	nLastLen
>817	IdentifierDeclType	int
>818	Condition	 
>819	AndExpression	anString [ nSSize - 2 ] == x2 && anString [ nSSize - 1 ] == y2
>820	EqualityExpression	anString [ nSSize - 1 ] == y2
>821	Identifier	y2
>822	ArrayIndexing	anString [ nSSize - 1 ]
>823	AdditiveExpression	nSSize - 1
>824	PrimaryExpression	1
>825	Identifier	nSSize
>826	Identifier	anString
>827	EqualityExpression	anString [ nSSize - 2 ] == x2
>828	Identifier	x2
>829	ArrayIndexing	anString [ nSSize - 2 ]
>830	AdditiveExpression	nSSize - 2
>831	PrimaryExpression	2
>832	Identifier	nSSize
>833	Identifier	anString
>834	IfStatement	if ( anString [ nSSize - 2 ] == x1 && anString [ nSSize - 1 ] == y1 )
>835	CompoundStatement	 
>836	ExpressionStatement	 
>837	AssignmentExpr	y1 = nTemp
>838	Identifier	nTemp
>839	Identifier	y1
>840	ExpressionStatement	 
>841	AssignmentExpr	y2 = y1
>842	Identifier	y1
>843	Identifier	y2
>844	ExpressionStatement	 
>845	AssignmentExpr	nTemp = y2
>846	Identifier	y2
>847	Identifier	nTemp
>848	ExpressionStatement	 
>849	AssignmentExpr	x1 = nTemp
>850	Identifier	nTemp
>851	Identifier	x1
>852	ExpressionStatement	 
>853	AssignmentExpr	x2 = x1
>854	Identifier	x1
>855	Identifier	x2
>856	ExpressionStatement	 
>857	AssignmentExpr	nTemp = x2
>858	Identifier	x2
>859	Identifier	nTemp
>860	IdentifierDeclStatement	 
>861	IdentifierDecl	nTemp
>862	Identifier	nTemp
>863	IdentifierDeclType	int
>864	Condition	 
>865	AndExpression	anString [ nSSize - 2 ] == x1 && anString [ nSSize - 1 ] == y1
>866	EqualityExpression	anString [ nSSize - 1 ] == y1
>867	Identifier	y1
>868	ArrayIndexing	anString [ nSSize - 1 ]
>869	AdditiveExpression	nSSize - 1
>870	PrimaryExpression	1
>871	Identifier	nSSize
>872	Identifier	anString
>873	EqualityExpression	anString [ nSSize - 2 ] == x1
>874	Identifier	x1
>875	ArrayIndexing	anString [ nSSize - 2 ]
>876	AdditiveExpression	nSSize - 2
>877	PrimaryExpression	2
>878	Identifier	nSSize
>879	Identifier	anString
>880	IdentifierDeclStatement	 
>881	IdentifierDecl	nSSize = anString . size ( )
>882	AssignmentExpr	nSSize = anString . size ( )
>883	CallExpression	anString . size ( )
>884	ArgumentList	 
>885	Callee	anString . size
>886	MemberAccess	anString . size
>887	Identifier	size
>888	Identifier	anString
>889	Identifier	nSSize
>890	Identifier	nSSize
>891	IdentifierDeclType	size_t
>892	IdentifierDeclStatement	 
>893	IdentifierDecl	& anString = aanXY [ iString ]
>894	AssignmentExpr	& anString = aanXY [ iString ]
>895	ArrayIndexing	aanXY [ iString ]
>896	Identifier	iString
>897	Identifier	aanXY
>898	Identifier	anString
>899	Identifier	anString
>900	IdentifierDeclType	std 
>901	IncDecOp	 
>902	IncDec	++
>903	Identifier	iString
>904	Condition	 
>905	RelationalExpression	iString < aanXY . size ( )
>906	CallExpression	aanXY . size ( )
>907	ArgumentList	 
>908	Callee	aanXY . size
>909	MemberAccess	aanXY . size
>910	Identifier	size
>911	Identifier	aanXY
>912	Identifier	iString
>913	ForInit	 
>914	AssignmentExpr	iString = 0
>915	PrimaryExpression	0
>916	Identifier	iString
>917	IdentifierDeclStatement	 
>918	IdentifierDecl	iString
>919	Identifier	iString
>920	IdentifierDeclType	size_t
>921	ExpressionStatement	 
>922	AssignmentExpr	nLastLineUpdated = MAX ( y1 , y2 )
>923	CallExpression	MAX ( y1 , y2 )
>924	ArgumentList	y1
>925	Argument	y2
>926	Identifier	y2
>927	Argument	y1
>928	Identifier	y1
>929	Callee	MAX
>930	Identifier	MAX
>931	Identifier	nLastLineUpdated
>956	FunctionDef	AddEdges (GInt32 * panThisLineId , GInt32 * panLastLineId , GInt32 * panPolyIdMap , GInt32 * panPolyValue , RPolygon * * \
>957	ParameterList	GInt32 * panThisLineId , GInt32 * panLastLineId , GInt32 * panPolyIdMap , GInt32 * panPolyValue , RPolygon * * papoPoly , \
>958	Parameter	 
>959	Identifier	iY
>960	ParameterType	int
>961	Parameter	 
>962	Identifier	iX
>963	ParameterType	int
>964	Parameter	 
>965	Identifier	papoPoly
>966	ParameterType	RPolygon * *
>967	Parameter	 
>968	Identifier	panPolyValue
>969	ParameterType	GInt32 *
>970	Parameter	 
>971	Identifier	panPolyIdMap
>972	ParameterType	GInt32 *
>973	Parameter	 
>974	Identifier	panLastLineId
>975	ParameterType	GInt32 *
>976	Parameter	 
>977	Identifier	panThisLineId
>978	ParameterType	GInt32 *
>979	ReturnType	static void
>980	CompoundStatement	 
>981	IfStatement	if ( nThisId != nRightId )
>982	CompoundStatement	 
>983	IfStatement	if ( nRightId != - 1 )
>984	CompoundStatement	 
>985	ExpressionStatement	 
>986	CallExpression	papoPoly [ nRightId ] -> AddSegment ( iXReal + 1 , iY , iXReal + 1 , iY + 1 )
>987	ArgumentList	iXReal + 1
>988	Argument	iY + 1
>989	AdditiveExpression	iY + 1
>990	PrimaryExpression	1
>991	Identifier	iY
>992	Argument	iXReal + 1
>993	AdditiveExpression	iXReal + 1
>994	PrimaryExpression	1
>995	Identifier	iXReal
>996	Argument	iY
>997	Identifier	iY
>998	Argument	iXReal + 1
>999	AdditiveExpression	iXReal + 1
>1000	PrimaryExpression	1
>1001	Identifier	iXReal
>1002	Callee	papoPoly [ nRightId ] -> AddSegment
>1003	PtrMemberAccess	papoPoly [ nRightId ] -> AddSegment
>1004	Identifier	AddSegment
>1005	ArrayIndexing	papoPoly [ nRightId ]
>1006	Identifier	nRightId
>1007	Identifier	papoPoly
>1008	IfStatement	if ( papoPoly [ nRightId ] == NULL )
>1009	ExpressionStatement	 
>1010	AssignmentExpr	papoPoly [ nRightId ] = new RPolygon ( panPolyValue [ nRightId ] )
>1011	ArrayIndexing	panPolyValue [ nRightId ]
>1012	Identifier	nRightId
>1013	Identifier	panPolyValue
>1014	ArrayIndexing	papoPoly [ nRightId ]
>1015	Identifier	nRightId
>1016	Identifier	papoPoly
>1017	Condition	 
>1018	EqualityExpression	papoPoly [ nRightId ] == NULL
>1019	Identifier	NULL
>1020	ArrayIndexing	papoPoly [ nRightId ]
>1021	Identifier	nRightId
>1022	Identifier	papoPoly
>1023	Condition	 
>1024	EqualityExpression	nRightId != - 1
>1025	UnaryOp	- 1
>1026	PrimaryExpression	1
>1027	UnaryOperator	-
>1028	Identifier	nRightId
>1029	IfStatement	if ( nThisId != - 1 )
>1030	CompoundStatement	 
>1031	ExpressionStatement	 
>1032	CallExpression	papoPoly [ nThisId ] -> AddSegment ( iXReal + 1 , iY , iXReal + 1 , iY + 1 )
>1033	ArgumentList	iXReal + 1
>1034	Argument	iY + 1
>1035	AdditiveExpression	iY + 1
>1036	PrimaryExpression	1
>1037	Identifier	iY
>1038	Argument	iXReal + 1
>1039	AdditiveExpression	iXReal + 1
>1040	PrimaryExpression	1
>1041	Identifier	iXReal
>1042	Argument	iY
>1043	Identifier	iY
>1044	Argument	iXReal + 1
>1045	AdditiveExpression	iXReal + 1
>1046	PrimaryExpression	1
>1047	Identifier	iXReal
>1048	Callee	papoPoly [ nThisId ] -> AddSegment
>1049	PtrMemberAccess	papoPoly [ nThisId ] -> AddSegment
>1050	Identifier	AddSegment
>1051	ArrayIndexing	papoPoly [ nThisId ]
>1052	Identifier	nThisId
>1053	Identifier	papoPoly
>1054	IfStatement	if ( papoPoly [ nThisId ] == NULL )
>1055	ExpressionStatement	 
>1056	AssignmentExpr	papoPoly [ nThisId ] = new RPolygon ( panPolyValue [ nThisId ] )
>1057	ArrayIndexing	panPolyValue [ nThisId ]
>1058	Identifier	nThisId
>1059	Identifier	panPolyValue
>1060	ArrayIndexing	papoPoly [ nThisId ]
>1061	Identifier	nThisId
>1062	Identifier	papoPoly
>1063	Condition	 
>1064	EqualityExpression	papoPoly [ nThisId ] == NULL
>1065	Identifier	NULL
>1066	ArrayIndexing	papoPoly [ nThisId ]
>1067	Identifier	nThisId
>1068	Identifier	papoPoly
>1069	Condition	 
>1070	EqualityExpression	nThisId != - 1
>1071	UnaryOp	- 1
>1072	PrimaryExpression	1
>1073	UnaryOperator	-
>1074	Identifier	nThisId
>1075	Condition	 
>1076	EqualityExpression	nThisId != nRightId
>1077	Identifier	nRightId
>1078	Identifier	nThisId
>1079	IfStatement	if ( nThisId != nPreviousId )
>1080	CompoundStatement	 
>1081	IfStatement	if ( nPreviousId != - 1 )
>1082	CompoundStatement	 
>1083	ExpressionStatement	 
>1084	CallExpression	papoPoly [ nPreviousId ] -> AddSegment ( iXReal , iY , iXReal + 1 , iY )
>1085	ArgumentList	iXReal
>1086	Argument	iY
>1087	Identifier	iY
>1088	Argument	iXReal + 1
>1089	AdditiveExpression	iXReal + 1
>1090	PrimaryExpression	1
>1091	Identifier	iXReal
>1092	Argument	iY
>1093	Identifier	iY
>1094	Argument	iXReal
>1095	Identifier	iXReal
>1096	Callee	papoPoly [ nPreviousId ] -> AddSegment
>1097	PtrMemberAccess	papoPoly [ nPreviousId ] -> AddSegment
>1098	Identifier	AddSegment
>1099	ArrayIndexing	papoPoly [ nPreviousId ]
>1100	Identifier	nPreviousId
>1101	Identifier	papoPoly
>1102	IfStatement	if ( papoPoly [ nPreviousId ] == NULL )
>1103	ExpressionStatement	 
>1104	AssignmentExpr	papoPoly [ nPreviousId ] = new RPolygon ( panPolyValue [ nPreviousId ] )
>1105	ArrayIndexing	panPolyValue [ nPreviousId ]
>1106	Identifier	nPreviousId
>1107	Identifier	panPolyValue
>1108	ArrayIndexing	papoPoly [ nPreviousId ]
>1109	Identifier	nPreviousId
>1110	Identifier	papoPoly
>1111	Condition	 
>1112	EqualityExpression	papoPoly [ nPreviousId ] == NULL
>1113	Identifier	NULL
>1114	ArrayIndexing	papoPoly [ nPreviousId ]
>1115	Identifier	nPreviousId
>1116	Identifier	papoPoly
>1117	Condition	 
>1118	EqualityExpression	nPreviousId != - 1
>1119	UnaryOp	- 1
>1120	PrimaryExpression	1
>1121	UnaryOperator	-
>1122	Identifier	nPreviousId
>1123	IfStatement	if ( nThisId != - 1 )
>1124	CompoundStatement	 
>1125	ExpressionStatement	 
>1126	CallExpression	papoPoly [ nThisId ] -> AddSegment ( iXReal , iY , iXReal + 1 , iY )
>1127	ArgumentList	iXReal
>1128	Argument	iY
>1129	Identifier	iY
>1130	Argument	iXReal + 1
>1131	AdditiveExpression	iXReal + 1
>1132	PrimaryExpression	1
>1133	Identifier	iXReal
>1134	Argument	iY
>1135	Identifier	iY
>1136	Argument	iXReal
>1137	Identifier	iXReal
>1138	Callee	papoPoly [ nThisId ] -> AddSegment
>1139	PtrMemberAccess	papoPoly [ nThisId ] -> AddSegment
>1140	Identifier	AddSegment
>1141	ArrayIndexing	papoPoly [ nThisId ]
>1142	Identifier	nThisId
>1143	Identifier	papoPoly
>1144	IfStatement	if ( papoPoly [ nThisId ] == NULL )
>1145	ExpressionStatement	 
>1146	AssignmentExpr	papoPoly [ nThisId ] = new RPolygon ( panPolyValue [ nThisId ] )
>1147	ArrayIndexing	panPolyValue [ nThisId ]
>1148	Identifier	nThisId
>1149	Identifier	panPolyValue
>1150	ArrayIndexing	papoPoly [ nThisId ]
>1151	Identifier	nThisId
>1152	Identifier	papoPoly
>1153	Condition	 
>1154	EqualityExpression	papoPoly [ nThisId ] == NULL
>1155	Identifier	NULL
>1156	ArrayIndexing	papoPoly [ nThisId ]
>1157	Identifier	nThisId
>1158	Identifier	papoPoly
>1159	Condition	 
>1160	EqualityExpression	nThisId != - 1
>1161	UnaryOp	- 1
>1162	PrimaryExpression	1
>1163	UnaryOperator	-
>1164	Identifier	nThisId
>1165	Condition	 
>1166	EqualityExpression	nThisId != nPreviousId
>1167	Identifier	nPreviousId
>1168	Identifier	nThisId
>1169	IfStatement	if ( nPreviousId != - 1 )
>1170	ExpressionStatement	 
>1171	AssignmentExpr	nPreviousId = panPolyIdMap [ nPreviousId ]
>1172	ArrayIndexing	panPolyIdMap [ nPreviousId ]
>1173	Identifier	nPreviousId
>1174	Identifier	panPolyIdMap
>1175	Identifier	nPreviousId
>1176	Condition	 
>1177	EqualityExpression	nPreviousId != - 1
>1178	UnaryOp	- 1
>1179	PrimaryExpression	1
>1180	UnaryOperator	-
>1181	Identifier	nPreviousId
>1182	IfStatement	if ( nRightId != - 1 )
>1183	ExpressionStatement	 
>1184	AssignmentExpr	nRightId = panPolyIdMap [ nRightId ]
>1185	ArrayIndexing	panPolyIdMap [ nRightId ]
>1186	Identifier	nRightId
>1187	Identifier	panPolyIdMap
>1188	Identifier	nRightId
>1189	Condition	 
>1190	EqualityExpression	nRightId != - 1
>1191	UnaryOp	- 1
>1192	PrimaryExpression	1
>1193	UnaryOperator	-
>1194	Identifier	nRightId
>1195	IfStatement	if ( nThisId != - 1 )
>1196	ExpressionStatement	 
>1197	AssignmentExpr	nThisId = panPolyIdMap [ nThisId ]
>1198	ArrayIndexing	panPolyIdMap [ nThisId ]
>1199	Identifier	nThisId
>1200	Identifier	panPolyIdMap
>1201	Identifier	nThisId
>1202	Condition	 
>1203	EqualityExpression	nThisId != - 1
>1204	UnaryOp	- 1
>1205	PrimaryExpression	1
>1206	UnaryOperator	-
>1207	Identifier	nThisId
>1208	IdentifierDeclStatement	 
>1209	IdentifierDecl	iXReal = iX - 1
>1210	AssignmentExpr	iXReal = iX - 1
>1211	AdditiveExpression	iX - 1
>1212	PrimaryExpression	1
>1213	Identifier	iX
>1214	Identifier	iXReal
>1215	Identifier	iXReal
>1216	IdentifierDeclType	int
>1217	IdentifierDeclStatement	 
>1218	IdentifierDecl	nPreviousId = panLastLineId [ iX ]
>1219	AssignmentExpr	nPreviousId = panLastLineId [ iX ]
>1220	ArrayIndexing	panLastLineId [ iX ]
>1221	Identifier	iX
>1222	Identifier	panLastLineId
>1223	Identifier	nPreviousId
>1224	Identifier	nPreviousId
>1225	IdentifierDeclType	int
>1226	IdentifierDeclStatement	 
>1227	IdentifierDecl	nRightId = panThisLineId [ iX + 1 ]
>1228	AssignmentExpr	nRightId = panThisLineId [ iX + 1 ]
>1229	ArrayIndexing	panThisLineId [ iX + 1 ]
>1230	AdditiveExpression	iX + 1
>1231	PrimaryExpression	1
>1232	Identifier	iX
>1233	Identifier	panThisLineId
>1234	Identifier	nRightId
>1235	Identifier	nRightId
>1236	IdentifierDeclType	int
>1237	IdentifierDeclStatement	 
>1238	IdentifierDecl	nThisId = panThisLineId [ iX ]
>1239	AssignmentExpr	nThisId = panThisLineId [ iX ]
>1240	ArrayIndexing	panThisLineId [ iX ]
>1241	Identifier	iX
>1242	Identifier	panThisLineId
>1243	Identifier	nThisId
>1244	Identifier	nThisId
>1245	IdentifierDeclType	int
>1270	FunctionDef	EmitPolygonToLayer (OGRLayerH hOutLayer , int iPixValField , RPolygon * poRPoly , double * padfGeoTransform)
>1271	ParameterList	OGRLayerH hOutLayer , int iPixValField , RPolygon * poRPoly , double * padfGeoTransform
>1272	Parameter	 
>1273	Identifier	padfGeoTransform
>1274	ParameterType	double *
>1275	Parameter	 
>1276	Identifier	poRPoly
>1277	ParameterType	RPolygon *
>1278	Parameter	 
>1279	Identifier	iPixValField
>1280	ParameterType	int
>1281	Parameter	 
>1282	Identifier	hOutLayer
>1283	ParameterType	OGRLayerH
>1284	ReturnType	static CPLErr
>1285	CompoundStatement	 
>1286	ReturnStatement	 
>1287	Identifier	eErr
>1288	ExpressionStatement	 
>1289	CallExpression	OGR_F_Destroy ( hFeat )
>1290	ArgumentList	hFeat
>1291	Argument	hFeat
>1292	Identifier	hFeat
>1293	Callee	OGR_F_Destroy
>1294	Identifier	OGR_F_Destroy
>1295	IfStatement	if ( OGR_L_CreateFeature ( hOutLayer , hFeat ) != OGRERR_NONE )
>1296	ExpressionStatement	 
>1297	AssignmentExpr	eErr = CE_Failure
>1298	Identifier	CE_Failure
>1299	Identifier	eErr
>1300	Condition	 
>1301	EqualityExpression	OGR_L_CreateFeature ( hOutLayer , hFeat ) != OGRERR_NONE
>1302	Identifier	OGRERR_NONE
>1303	CallExpression	OGR_L_CreateFeature ( hOutLayer , hFeat )
>1304	ArgumentList	hOutLayer
>1305	Argument	hFeat
>1306	Identifier	hFeat
>1307	Argument	hOutLayer
>1308	Identifier	hOutLayer
>1309	Callee	OGR_L_CreateFeature
>1310	Identifier	OGR_L_CreateFeature
>1311	IdentifierDeclStatement	 
>1312	IdentifierDecl	eErr = CE_None
>1313	AssignmentExpr	eErr = CE_None
>1314	Identifier	CE_None
>1315	Identifier	CE_None
>1316	Identifier	eErr
>1317	IdentifierDeclType	CPLErr
>1318	IfStatement	if ( iPixValField >= 0 )
>1319	ExpressionStatement	 
>1320	CallExpression	OGR_F_SetFieldInteger ( hFeat , iPixValField , poRPoly -> nPolyValue )
>1321	ArgumentList	hFeat
>1322	Argument	poRPoly -> nPolyValue
>1323	PtrMemberAccess	poRPoly -> nPolyValue
>1324	Identifier	nPolyValue
>1325	Identifier	poRPoly
>1326	Argument	iPixValField
>1327	Identifier	iPixValField
>1328	Argument	hFeat
>1329	Identifier	hFeat
>1330	Callee	OGR_F_SetFieldInteger
>1331	Identifier	OGR_F_SetFieldInteger
>1332	Condition	 
>1333	RelationalExpression	iPixValField >= 0
>1334	PrimaryExpression	0
>1335	Identifier	iPixValField
>1336	ExpressionStatement	 
>1337	CallExpression	OGR_F_SetGeometryDirectly ( hFeat , hPolygon )
>1338	ArgumentList	hFeat
>1339	Argument	hPolygon
>1340	Identifier	hPolygon
>1341	Argument	hFeat
>1342	Identifier	hFeat
>1343	Callee	OGR_F_SetGeometryDirectly
>1344	Identifier	OGR_F_SetGeometryDirectly
>1345	ExpressionStatement	 
>1346	AssignmentExpr	hFeat = OGR_F_Create ( OGR_L_GetLayerDefn ( hOutLayer ) )
>1347	CallExpression	OGR_F_Create ( OGR_L_GetLayerDefn ( hOutLayer ) )
>1348	ArgumentList	OGR_L_GetLayerDefn ( hOutLayer )
>1349	Argument	OGR_L_GetLayerDefn ( hOutLayer )
>1350	CallExpression	OGR_L_GetLayerDefn ( hOutLayer )
>1351	ArgumentList	hOutLayer
>1352	Argument	hOutLayer
>1353	Identifier	hOutLayer
>1354	Callee	OGR_L_GetLayerDefn
>1355	Identifier	OGR_L_GetLayerDefn
>1356	Callee	OGR_F_Create
>1357	Identifier	OGR_F_Create
>1358	Identifier	hFeat
>1359	ForStatement	for ( iString = 0 ; iString < poRPoly -> aanXY . size ( ) ; iString ++ )
>1360	CompoundStatement	 
>1361	ExpressionStatement	 
>1362	CallExpression	OGR_G_AddGeometryDirectly ( hPolygon , hRing )
>1363	ArgumentList	hPolygon
>1364	Argument	hRing
>1365	Identifier	hRing
>1366	Argument	hPolygon
>1367	Identifier	hPolygon
>1368	Callee	OGR_G_AddGeometryDirectly
>1369	Identifier	OGR_G_AddGeometryDirectly
>1370	ForStatement	for ( iVert = anString . size ( ) / 2 - 1 ; iVert >= 0 ; iVert -- )
>1371	CompoundStatement	 
>1372	ExpressionStatement	 
>1373	CallExpression	OGR_G_SetPoint_2D ( hRing , iVert , dfX , dfY )
>1374	ArgumentList	hRing
>1375	Argument	dfY
>1376	Identifier	dfY
>1377	Argument	dfX
>1378	Identifier	dfX
>1379	Argument	iVert
>1380	Identifier	iVert
>1381	Argument	hRing
>1382	Identifier	hRing
>1383	Callee	OGR_G_SetPoint_2D
>1384	Identifier	OGR_G_SetPoint_2D
>1385	ExpressionStatement	 
>1386	AssignmentExpr	dfY = padfGeoTransform [ 3 ] + nPixelX * padfGeoTransform [ 4 ] + nPixelY * padfGeoTransform [ 5 ]
>1387	AdditiveExpression	padfGeoTransform [ 3 ] + nPixelX * padfGeoTransform [ 4 ] + nPixelY * padfGeoTransform [ 5 ]
>1388	AdditiveExpression	nPixelX * padfGeoTransform [ 4 ] + nPixelY * padfGeoTransform [ 5 ]
>1389	MultiplicativeExpression	nPixelY * padfGeoTransform [ 5 ]
>1390	ArrayIndexing	padfGeoTransform [ 5 ]
>1391	PrimaryExpression	5
>1392	Identifier	padfGeoTransform
>1393	Identifier	nPixelY
>1394	MultiplicativeExpression	nPixelX * padfGeoTransform [ 4 ]
>1395	ArrayIndexing	padfGeoTransform [ 4 ]
>1396	PrimaryExpression	4
>1397	Identifier	padfGeoTransform
>1398	Identifier	nPixelX
>1399	ArrayIndexing	padfGeoTransform [ 3 ]
>1400	PrimaryExpression	3
>1401	Identifier	padfGeoTransform
>1402	Identifier	dfY
>1403	ExpressionStatement	 
>1404	AssignmentExpr	dfX = padfGeoTransform [ 0 ] + nPixelX * padfGeoTransform [ 1 ] + nPixelY * padfGeoTransform [ 2 ]
>1405	AdditiveExpression	padfGeoTransform [ 0 ] + nPixelX * padfGeoTransform [ 1 ] + nPixelY * padfGeoTransform [ 2 ]
>1406	AdditiveExpression	nPixelX * padfGeoTransform [ 1 ] + nPixelY * padfGeoTransform [ 2 ]
>1407	MultiplicativeExpression	nPixelY * padfGeoTransform [ 2 ]
>1408	ArrayIndexing	padfGeoTransform [ 2 ]
>1409	PrimaryExpression	2
>1410	Identifier	padfGeoTransform
>1411	Identifier	nPixelY
>1412	MultiplicativeExpression	nPixelX * padfGeoTransform [ 1 ]
>1413	ArrayIndexing	padfGeoTransform [ 1 ]
>1414	PrimaryExpression	1
>1415	Identifier	padfGeoTransform
>1416	Identifier	nPixelX
>1417	ArrayIndexing	padfGeoTransform [ 0 ]
>1418	PrimaryExpression	0
>1419	Identifier	padfGeoTransform
>1420	Identifier	dfX
>1421	ExpressionStatement	 
>1422	AssignmentExpr	nPixelY = anString [ iVert * 2 + 1 ]
>1423	ArrayIndexing	anString [ iVert * 2 + 1 ]
>1424	AdditiveExpression	iVert * 2 + 1
>1425	PrimaryExpression	1
>1426	MultiplicativeExpression	iVert * 2
>1427	PrimaryExpression	2
>1428	Identifier	iVert
>1429	Identifier	anString
>1430	Identifier	nPixelY
>1431	ExpressionStatement	 
>1432	AssignmentExpr	nPixelX = anString [ iVert * 2 ]
>1433	ArrayIndexing	anString [ iVert * 2 ]
>1434	MultiplicativeExpression	iVert * 2
>1435	PrimaryExpression	2
>1436	Identifier	iVert
>1437	Identifier	anString
>1438	Identifier	nPixelX
>1439	IdentifierDeclStatement	 
>1440	IdentifierDecl	nPixelY
>1441	Identifier	nPixelY
>1442	IdentifierDeclType	int
>1443	IdentifierDecl	nPixelX
>1444	Identifier	nPixelX
>1445	IdentifierDeclType	int
>1446	IdentifierDeclStatement	 
>1447	IdentifierDecl	dfY
>1448	Identifier	dfY
>1449	IdentifierDeclType	double
>1450	IdentifierDecl	dfX
>1451	Identifier	dfX
>1452	IdentifierDeclType	double
>1453	IncDecOp	 
>1454	IncDec	--
>1455	Identifier	iVert
>1456	Condition	 
>1457	RelationalExpression	iVert >= 0
>1458	PrimaryExpression	0
>1459	Identifier	iVert
>1460	ForInit	 
>1461	AssignmentExpr	iVert = anString . size ( ) / 2 - 1
>1462	AdditiveExpression	anString . size ( ) / 2 - 1
>1463	PrimaryExpression	1
>1464	MultiplicativeExpression	anString . size ( ) / 2
>1465	PrimaryExpression	2
>1466	CallExpression	anString . size ( )
>1467	ArgumentList	 
>1468	Callee	anString . size
>1469	MemberAccess	anString . size
>1470	Identifier	size
>1471	Identifier	anString
>1472	Identifier	iVert
>1473	IdentifierDeclStatement	 
>1474	IdentifierDecl	iVert
>1475	Identifier	iVert
>1476	IdentifierDeclType	int
>1477	IdentifierDeclStatement	 
>1478	IdentifierDecl	hRing = OGR_G_CreateGeometry ( wkbLinearRing )
>1479	AssignmentExpr	hRing = OGR_G_CreateGeometry ( wkbLinearRing )
>1480	CallExpression	OGR_G_CreateGeometry ( wkbLinearRing )
>1481	ArgumentList	wkbLinearRing
>1482	Argument	wkbLinearRing
>1483	Identifier	wkbLinearRing
>1484	Callee	OGR_G_CreateGeometry
>1485	Identifier	OGR_G_CreateGeometry
>1486	Identifier	hRing
>1487	Identifier	hRing
>1488	IdentifierDeclType	OGRGeometryH
>1489	IdentifierDeclStatement	 
>1490	IdentifierDecl	& anString = poRPoly -> aanXY [ iString ]
>1491	AssignmentExpr	& anString = poRPoly -> aanXY [ iString ]
>1492	ArrayIndexing	poRPoly -> aanXY [ iString ]
>1493	Identifier	iString
>1494	PtrMemberAccess	poRPoly -> aanXY
>1495	Identifier	aanXY
>1496	Identifier	poRPoly
>1497	Identifier	anString
>1498	Identifier	anString
>1499	IdentifierDeclType	std 
>1500	IncDecOp	 
>1501	IncDec	++
>1502	Identifier	iString
>1503	Condition	 
>1504	RelationalExpression	iString < poRPoly -> aanXY . size ( )
>1505	CallExpression	poRPoly -> aanXY . size ( )
>1506	ArgumentList	 
>1507	Callee	poRPoly -> aanXY . size
>1508	MemberAccess	poRPoly -> aanXY . size
>1509	Identifier	size
>1510	PtrMemberAccess	poRPoly -> aanXY
>1511	Identifier	aanXY
>1512	Identifier	poRPoly
>1513	Identifier	iString
>1514	ForInit	 
>1515	AssignmentExpr	iString = 0
>1516	PrimaryExpression	0
>1517	Identifier	iString
>1518	ExpressionStatement	 
>1519	AssignmentExpr	hPolygon = OGR_G_CreateGeometry ( wkbPolygon )
>1520	CallExpression	OGR_G_CreateGeometry ( wkbPolygon )
>1521	ArgumentList	wkbPolygon
>1522	Argument	wkbPolygon
>1523	Identifier	wkbPolygon
>1524	Callee	OGR_G_CreateGeometry
>1525	Identifier	OGR_G_CreateGeometry
>1526	Identifier	hPolygon
>1527	IdentifierDeclStatement	 
>1528	IdentifierDecl	iString
>1529	Identifier	iString
>1530	IdentifierDeclType	size_t
>1531	ExpressionStatement	 
>1532	CallExpression	poRPoly -> Coalesce ( )
>1533	ArgumentList	 
>1534	Callee	poRPoly -> Coalesce
>1535	PtrMemberAccess	poRPoly -> Coalesce
>1536	Identifier	Coalesce
>1537	Identifier	poRPoly
>1538	IdentifierDeclStatement	 
>1539	IdentifierDecl	hPolygon
>1540	Identifier	hPolygon
>1541	IdentifierDeclType	OGRGeometryH
>1542	IdentifierDeclStatement	 
>1543	IdentifierDecl	hFeat
>1544	Identifier	hFeat
>1545	IdentifierDeclType	OGRFeatureH
>1584	FunctionDef	GPMaskImageData (GDALRasterBandH hMaskBand , GByte * pabyMaskLine , int iY , int nXSize , GInt32 * panImageLine)
>1585	ParameterList	GDALRasterBandH hMaskBand , GByte * pabyMaskLine , int iY , int nXSize , GInt32 * panImageLine
>1586	Parameter	 
>1587	Identifier	panImageLine
>1588	ParameterType	GInt32 *
>1589	Parameter	 
>1590	Identifier	nXSize
>1591	ParameterType	int
>1592	Parameter	 
>1593	Identifier	iY
>1594	ParameterType	int
>1595	Parameter	 
>1596	Identifier	pabyMaskLine
>1597	ParameterType	GByte *
>1598	Parameter	 
>1599	Identifier	hMaskBand
>1600	ParameterType	GDALRasterBandH
>1601	ReturnType	static CPLErr
>1602	CompoundStatement	 
>1603	ReturnStatement	 
>1604	Identifier	eErr
>1605	IfStatement	if ( eErr == CE_None )
>1606	CompoundStatement	 
>1607	ForStatement	for ( i = 0 ; i < nXSize ; i ++ )
>1608	CompoundStatement	 
>1609	IfStatement	if ( pabyMaskLine [ i ] == 0 )
>1610	ExpressionStatement	 
>1611	AssignmentExpr	panImageLine [ i ] = GP_NODATA_MARKER
>1612	Identifier	GP_NODATA_MARKER
>1613	ArrayIndexing	panImageLine [ i ]
>1614	Identifier	i
>1615	Identifier	panImageLine
>1616	Condition	 
>1617	EqualityExpression	pabyMaskLine [ i ] == 0
>1618	PrimaryExpression	0
>1619	ArrayIndexing	pabyMaskLine [ i ]
>1620	Identifier	i
>1621	Identifier	pabyMaskLine
>1622	IncDecOp	 
>1623	IncDec	++
>1624	Identifier	i
>1625	Condition	 
>1626	RelationalExpression	i < nXSize
>1627	Identifier	nXSize
>1628	Identifier	i
>1629	ForInit	 
>1630	AssignmentExpr	i = 0
>1631	PrimaryExpression	0
>1632	Identifier	i
>1633	IdentifierDeclStatement	 
>1634	IdentifierDecl	i
>1635	Identifier	i
>1636	IdentifierDeclType	int
>1637	Condition	 
>1638	EqualityExpression	eErr == CE_None
>1639	Identifier	CE_None
>1640	Identifier	eErr
>1641	ExpressionStatement	 
>1642	AssignmentExpr	eErr = GDALRasterIO ( hMaskBand , GF_Read , 0 , iY , nXSize , 1 , pabyMaskLine , nXSize , 1 , GDT_Byte , \
>1643	CallExpression	GDALRasterIO ( hMaskBand , GF_Read , 0 , iY , nXSize , 1 , pabyMaskLine , nXSize , 1 , GDT_Byte , 0 , 0 )
>1644	ArgumentList	hMaskBand
>1645	Argument	0
>1646	PrimaryExpression	0
>1647	Argument	0
>1648	PrimaryExpression	0
>1649	Argument	GDT_Byte
>1650	Identifier	GDT_Byte
>1651	Argument	1
>1652	PrimaryExpression	1
>1653	Argument	nXSize
>1654	Identifier	nXSize
>1655	Argument	pabyMaskLine
>1656	Identifier	pabyMaskLine
>1657	Argument	1
>1658	PrimaryExpression	1
>1659	Argument	nXSize
>1660	Identifier	nXSize
>1661	Argument	iY
>1662	Identifier	iY
>1663	Argument	0
>1664	PrimaryExpression	0
>1665	Argument	GF_Read
>1666	Identifier	GF_Read
>1667	Argument	hMaskBand
>1668	Identifier	hMaskBand
>1669	Callee	GDALRasterIO
>1670	Identifier	GDALRasterIO
>1671	Identifier	eErr
>1672	IdentifierDeclStatement	 
>1673	IdentifierDecl	eErr
>1674	Identifier	eErr
>1675	IdentifierDeclType	CPLErr
>1694	FunctionDef	GDALPolygonize (GDALRasterBandH hSrcBand , GDALRasterBandH hMaskBand , OGRLayerH hOutLayer , int iPixValField , \
>1695	ParameterList	GDALRasterBandH hSrcBand , GDALRasterBandH hMaskBand , OGRLayerH hOutLayer , int iPixValField , char * * papszOptions , \
>1696	Parameter	 
>1697	Identifier	pProgressArg
>1698	ParameterType	void *
>1699	Parameter	 
>1700	Identifier	pfnProgress
>1701	ParameterType	GDALProgressFunc
>1702	Parameter	 
>1703	Identifier	papszOptions
>1704	ParameterType	char * *
>1705	Parameter	 
>1706	Identifier	iPixValField
>1707	ParameterType	int
>1708	Parameter	 
>1709	Identifier	hOutLayer
>1710	ParameterType	OGRLayerH
>1711	Parameter	 
>1712	Identifier	hMaskBand
>1713	ParameterType	GDALRasterBandH
>1714	Parameter	 
>1715	Identifier	hSrcBand
>1716	ParameterType	GDALRasterBandH
>1717	ReturnType	CPLErr CPL_STDCALL
>1718	CompoundStatement	 
>1719	ReturnStatement	 
>1720	Identifier	CE_Failure
>1721	ExpressionStatement	 
>1722	CallExpression	CPLError ( CE_Failure , CPLE_NotSupported , \"GDALPolygonize() unimplemented in a non OGR build\" )
>1723	ArgumentList	CE_Failure
>1724	Argument	\"GDALPolygonize() unimplemented in a non OGR build\"
>1725	PrimaryExpression	\"GDALPolygonize() unimplemented in a non OGR build\"
>1726	Argument	CPLE_NotSupported
>1727	Identifier	CPLE_NotSupported
>1728	Argument	CE_Failure
>1729	Identifier	CE_Failure
>1730	Callee	CPLError
>1731	Identifier	CPLError
<6=11,7
<7=8
<8=10,9
<11=18,12
<12=13
<13=17,14
<14=16,15
<18=19
<19=21,20
<42=45,44,43
<45=134,123,46
<46=119,110,107,47
<47=98,94,83,48
<48=79,70,67,49
<49=50
<50=51
<51=65,52
<52=63,59,53
<53=54
<54=58,55
<55=57,56
<59=60
<60=62,61
<63=64
<65=66
<67=69,68
<70=71
<71=78,72
<72=74,73
<74=75
<75=77,76
<79=80
<80=82,81
<83=84
<84=92,85
<85=90,86
<86=87
<87=89,88
<90=91
<92=93
<94=95
<95=97,96
<98=99
<99=106,105,100
<100=104,101
<101=103,102
<107=109,108
<110=111
<111=118,112
<112=114,113
<114=115
<115=117,116
<119=120
<120=122,121
<123=124
<124=132,125
<125=130,128,126
<126=127
<128=129
<130=131
<132=133
<134=135
<135=137,136
<153=156,155,154
<156=378,157
<157=374,365,362,158
<158=353,346,194,159
<159=160
<160=192,161
<161=162
<162=163
<163=178,164
<164=175,165
<165=174,166
<166=168,167
<168=170,169
<170=171
<171=173,172
<175=177,176
<178=189,179
<179=188,180
<180=182,181
<182=184,183
<184=185
<185=187,186
<189=191,190
<192=193
<194=344,195
<195=340,336,196
<196=330,321,318,197
<197=309,198
<198=279,263,199
<199=200
<200=219,201
<201=206,202
<202=203
<203=205,204
<206=207
<207=217,208
<208=215,213,209
<209=210
<210=212,211
<213=214
<215=216
<217=218
<219=220
<220=242,221
<221=232,222
<222=231,223
<223=225,224
<225=227,226
<227=228
<228=230,229
<232=241,233
<233=235,234
<235=237,236
<237=238
<238=240,239
<242=253,243
<243=252,244
<244=246,245
<246=248,247
<248=249
<249=251,250
<253=262,254
<254=256,255
<256=258,257
<258=259
<259=261,260
<263=268,264
<264=265
<265=267,266
<268=269
<269=277,270
<270=275,273,271
<271=272
<273=274
<275=276
<277=278
<279=280
<280=295,281
<281=285,282
<282=284,283
<285=294,286
<286=288,287
<288=290,289
<290=291
<291=293,292
<295=299,296
<296=298,297
<299=308,300
<300=302,301
<302=304,303
<304=305
<305=307,306
<309=310
<310=317,316,311
<311=315,312
<312=314,313
<318=320,319
<321=322
<322=329,323
<323=325,324
<325=326
<326=328,327
<330=331
<331=335,332
<332=334,333
<336=337
<337=339,338
<340=341
<341=343,342
<344=345
<346=347
<347=352,351,348
<348=350,349
<353=354
<354=361,360,355
<355=359,356
<356=358,357
<362=364,363
<365=366
<366=373,367
<367=369,368
<369=370
<370=372,371
<374=375
<375=377,376
<378=379
<379=381,380
<403=415,414,404
<404=411,408,405
<405=407,406
<408=410,409
<411=413,412
<415=572,563,553,511,468,439,427,416
<416=417
<417=423,418
<418=419
<419=420
<420=422,421
<423=424
<424=426,425
<427=428
<428=438,437,429
<429=436,430
<430=432,431
<432=433
<433=435,434
<439=455,440
<440=441
<441=452,442
<442=451,443
<443=445,444
<445=447,446
<447=448
<448=450,449
<452=454,453
<455=456
<456=467,457
<457=459,458
<459=466,460
<460=462,461
<462=463
<463=465,464
<468=507,503,500,469
<469=485,470
<470=471
<471=481,472
<472=473
<473=474
<474=480,475
<475=477,476
<477=479,478
<481=482
<482=484,483
<485=486
<486=496,487
<487=488
<488=489
<489=495,490
<490=492,491
<492=494,493
<496=497
<497=499,498
<500=502,501
<503=504
<504=506,505
<507=508
<508=510,509
<511=549,533,512
<512=513
<513=520,514
<514=515
<515=519,516
<516=518,517
<520=521
<521=532,522
<522=524,523
<524=526,525
<526=528,527
<528=529
<529=531,530
<533=545,534
<534=535
<535=544,536
<536=538,537
<538=540,539
<540=541
<541=543,542
<545=546
<546=548,547
<549=550
<550=552,551
<553=560,557,554
<554=556,555
<557=559,558
<560=562,561
<563=564
<564=571,570,565
<565=569,566
<566=568,567
<572=573
<573=580,579,574
<574=578,575
<575=577,576
<602=617,616,603
<603=613,610,607,604
<604=606,605
<607=609,608
<610=612,611
<613=615,614
<617=921,917,687,675,664,655,646,637,628,619,618
<619=620
<620=624,621
<621=622
<622=623
<624=625
<625=627,626
<628=629
<629=633,630
<630=631
<631=632
<633=634
<634=636,635
<637=638
<638=642,639
<639=640
<640=641
<642=643
<643=645,644
<646=647
<647=651,648
<648=649
<649=650
<651=652
<652=654,653
<655=656
<656=663,662,657
<657=661,658
<658=660,659
<664=665
<665=671,666
<666=667
<667=668
<668=670,669
<671=672
<672=674,673
<675=676
<676=686,685,677
<677=684,678
<678=680,679
<680=681
<681=683,682
<687=913,904,901,688
<688=892,880,834,689
<689=818,690
<690=774,710,701,692,691
<692=693
<693=697,694
<694=695
<695=696
<697=698
<698=700,699
<701=702
<702=706,703
<703=704
<704=705
<706=707
<707=709,708
<710=726,711
<711=719,712
<712=713
<713=715,714
<715=716
<716=718,717
<719=720
<720=722,721
<722=723
<723=725,724
<726=727
<727=771,728
<728=750,729
<729=739,730
<730=732,731
<732=734,733
<734=738,735
<735=737,736
<739=745,740
<740=744,741
<741=743,742
<745=749,746
<746=748,747
<750=760,751
<751=753,752
<753=755,754
<755=759,756
<756=758,757
<760=766,761
<761=765,762
<762=764,763
<766=770,767
<767=769,768
<771=773,772
<774=775
<775=817,816,776
<776=815,777
<777=813,778
<778=796,779
<779=780
<780=794,781
<781=782
<782=783
<783=789,784
<784=788,785
<785=787,786
<789=793,790
<790=792,791
<794=795
<796=797
<797=811,798
<798=799
<799=800
<800=806,801
<801=805,802
<802=804,803
<806=810,807
<807=809,808
<811=812
<813=814
<818=819
<819=827,820
<820=822,821
<822=826,823
<823=825,824
<827=829,828
<829=833,830
<830=832,831
<834=864,835
<835=860,856,852,848,844,840,836
<836=837
<837=839,838
<840=841
<841=843,842
<844=845
<845=847,846
<848=849
<849=851,850
<852=853
<853=855,854
<856=857
<857=859,858
<860=861
<861=863,862
<864=865
<865=873,866
<866=868,867
<868=872,869
<869=871,870
<873=875,874
<875=879,876
<876=878,877
<880=881
<881=891,890,882
<882=889,883
<883=885,884
<885=886
<886=888,887
<892=893
<893=900,899,894
<894=898,895
<895=897,896
<901=903,902
<904=905
<905=912,906
<906=908,907
<908=909
<909=911,910
<913=914
<914=916,915
<917=918
<918=920,919
<921=922
<922=931,923
<923=929,924
<924=927,925
<925=926
<927=928
<929=930
<956=980,979,957
<957=976,973,970,967,964,961,958
<958=960,959
<961=963,962
<964=966,965
<967=969,968
<970=972,971
<973=975,974
<976=978,977
<980=1237,1226,1217,1208,1195,1182,1169,1079,981
<981=1075,982
<982=1029,983
<983=1023,984
<984=1008,985
<985=986
<986=1002,987
<987=998,996,992,988
<988=989
<989=991,990
<992=993
<993=995,994
<996=997
<998=999
<999=1001,1000
<1002=1003
<1003=1005,1004
<1005=1007,1006
<1008=1017,1009
<1009=1010
<1010=1014,1011
<1011=1013,1012
<1014=1016,1015
<1017=1018
<1018=1020,1019
<1020=1022,1021
<1023=1024
<1024=1028,1025
<1025=1027,1026
<1029=1069,1030
<1030=1054,1031
<1031=1032
<1032=1048,1033
<1033=1044,1042,1038,1034
<1034=1035
<1035=1037,1036
<1038=1039
<1039=1041,1040
<1042=1043
<1044=1045
<1045=1047,1046
<1048=1049
<1049=1051,1050
<1051=1053,1052
<1054=1063,1055
<1055=1056
<1056=1060,1057
<1057=1059,1058
<1060=1062,1061
<1063=1064
<1064=1066,1065
<1066=1068,1067
<1069=1070
<1070=1074,1071
<1071=1073,1072
<1075=1076
<1076=1078,1077
<1079=1165,1080
<1080=1123,1081
<1081=1117,1082
<1082=1102,1083
<1083=1084
<1084=1096,1085
<1085=1094,1092,1088,1086
<1086=1087
<1088=1089
<1089=1091,1090
<1092=1093
<1094=1095
<1096=1097
<1097=1099,1098
<1099=1101,1100
<1102=1111,1103
<1103=1104
<1104=1108,1105
<1105=1107,1106
<1108=1110,1109
<1111=1112
<1112=1114,1113
<1114=1116,1115
<1117=1118
<1118=1122,1119
<1119=1121,1120
<1123=1159,1124
<1124=1144,1125
<1125=1126
<1126=1138,1127
<1127=1136,1134,1130,1128
<1128=1129
<1130=1131
<1131=1133,1132
<1134=1135
<1136=1137
<1138=1139
<1139=1141,1140
<1141=1143,1142
<1144=1153,1145
<1145=1146
<1146=1150,1147
<1147=1149,1148
<1150=1152,1151
<1153=1154
<1154=1156,1155
<1156=1158,1157
<1159=1160
<1160=1164,1161
<1161=1163,1162
<1165=1166
<1166=1168,1167
<1169=1176,1170
<1170=1171
<1171=1175,1172
<1172=1174,1173
<1176=1177
<1177=1181,1178
<1178=1180,1179
<1182=1189,1183
<1183=1184
<1184=1188,1185
<1185=1187,1186
<1189=1190
<1190=1194,1191
<1191=1193,1192
<1195=1202,1196
<1196=1197
<1197=1201,1198
<1198=1200,1199
<1202=1203
<1203=1207,1204
<1204=1206,1205
<1208=1209
<1209=1216,1215,1210
<1210=1214,1211
<1211=1213,1212
<1217=1218
<1218=1225,1224,1219
<1219=1223,1220
<1220=1222,1221
<1226=1227
<1227=1236,1235,1228
<1228=1234,1229
<1229=1233,1230
<1230=1232,1231
<1237=1238
<1238=1245,1244,1239
<1239=1243,1240
<1240=1242,1241
<1270=1285,1284,1271
<1271=1281,1278,1275,1272
<1272=1274,1273
<1275=1277,1276
<1278=1280,1279
<1281=1283,1282
<1285=1542,1538,1531,1527,1518,1359,1345,1336,1318,1311,1295,1288,1286
<1286=1287
<1288=1289
<1289=1293,1290
<1290=1291
<1291=1292
<1293=1294
<1295=1300,1296
<1296=1297
<1297=1299,1298
<1300=1301
<1301=1303,1302
<1303=1309,1304
<1304=1307,1305
<1305=1306
<1307=1308
<1309=1310
<1311=1312
<1312=1317,1316,1313
<1313=1315,1314
<1318=1332,1319
<1319=1320
<1320=1330,1321
<1321=1328,1326,1322
<1322=1323
<1323=1325,1324
<1326=1327
<1328=1329
<1330=1331
<1332=1333
<1333=1335,1334
<1336=1337
<1337=1343,1338
<1338=1341,1339
<1339=1340
<1341=1342
<1343=1344
<1345=1346
<1346=1358,1347
<1347=1356,1348
<1348=1349
<1349=1350
<1350=1354,1351
<1351=1352
<1352=1353
<1354=1355
<1356=1357
<1359=1514,1503,1500,1360
<1360=1489,1477,1473,1370,1361
<1361=1362
<1362=1368,1363
<1363=1366,1364
<1364=1365
<1366=1367
<1368=1369
<1370=1460,1456,1453,1371
<1371=1446,1439,1431,1421,1403,1385,1372
<1372=1373
<1373=1383,1374
<1374=1381,1379,1377,1375
<1375=1376
<1377=1378
<1379=1380
<1381=1382
<1383=1384
<1385=1386
<1386=1402,1387
<1387=1399,1388
<1388=1394,1389
<1389=1393,1390
<1390=1392,1391
<1394=1398,1395
<1395=1397,1396
<1399=1401,1400
<1403=1404
<1404=1420,1405
<1405=1417,1406
<1406=1412,1407
<1407=1411,1408
<1408=1410,1409
<1412=1416,1413
<1413=1415,1414
<1417=1419,1418
<1421=1422
<1422=1430,1423
<1423=1429,1424
<1424=1426,1425
<1426=1428,1427
<1431=1432
<1432=1438,1433
<1433=1437,1434
<1434=1436,1435
<1439=1443,1440
<1440=1442,1441
<1443=1445,1444
<1446=1450,1447
<1447=1449,1448
<1450=1452,1451
<1453=1455,1454
<1456=1457
<1457=1459,1458
<1460=1461
<1461=1472,1462
<1462=1464,1463
<1464=1466,1465
<1466=1468,1467
<1468=1469
<1469=1471,1470
<1473=1474
<1474=1476,1475
<1477=1478
<1478=1488,1487,1479
<1479=1486,1480
<1480=1484,1481
<1481=1482
<1482=1483
<1484=1485
<1489=1490
<1490=1499,1498,1491
<1491=1497,1492
<1492=1494,1493
<1494=1496,1495
<1500=1502,1501
<1503=1504
<1504=1513,1505
<1505=1507,1506
<1507=1508
<1508=1510,1509
<1510=1512,1511
<1514=1515
<1515=1517,1516
<1518=1519
<1519=1526,1520
<1520=1524,1521
<1521=1522
<1522=1523
<1524=1525
<1527=1528
<1528=1530,1529
<1531=1532
<1532=1534,1533
<1534=1535
<1535=1537,1536
<1538=1539
<1539=1541,1540
<1542=1543
<1543=1545,1544
<1584=1602,1601,1585
<1585=1598,1595,1592,1589,1586
<1586=1588,1587
<1589=1591,1590
<1592=1594,1593
<1595=1597,1596
<1598=1600,1599
<1602=1672,1641,1605,1603
<1603=1604
<1605=1637,1606
<1606=1633,1607
<1607=1629,1625,1622,1608
<1608=1609
<1609=1616,1610
<1610=1611
<1611=1613,1612
<1613=1615,1614
<1616=1617
<1617=1619,1618
<1619=1621,1620
<1622=1624,1623
<1625=1626
<1626=1628,1627
<1629=1630
<1630=1632,1631
<1633=1634
<1634=1636,1635
<1637=1638
<1638=1640,1639
<1641=1642
<1642=1671,1643
<1643=1669,1644
<1644=1667,1665,1663,1661,1659,1657,1655,1653,1651,1649,1647,1645
<1645=1646
<1647=1648
<1649=1650
<1651=1652
<1653=1654
<1655=1656
<1657=1658
<1659=1660
<1661=1662
<1663=1664
<1665=1666
<1667=1668
<1669=1670
<1672=1673
<1673=1675,1674
<1694=1718,1717,1695
<1695=1714,1711,1708,1705,1702,1699,1696
<1696=1698,1697
<1699=1701,1700
<1702=1704,1703
<1705=1707,1706
<1708=1710,1709
<1711=1713,1712
<1714=1716,1715
<1718=1721,1719
<1719=1720
<1721=1722
<1722=1730,1723
<1723=1728,1726,1724
<1724=1725
<1726=1727
<1728=1729
<1730=1731
