>3	FunctionDef	FixIntrinsics (double * P , double * K , double * R , double * t)
>4	ParameterList	double * P , double * K , double * R , double * t
>5	Parameter	 
>6	Identifier	t
>7	ParameterType	double *
>8	Parameter	 
>9	Identifier	R
>10	ParameterType	double *
>11	Parameter	 
>12	Identifier	K
>13	ParameterType	double *
>14	Parameter	 
>15	Identifier	P
>16	ParameterType	double *
>17	ReturnType	void
>18	CompoundStatement	 
>19	ExpressionStatement	 
>20	AssignmentExpr	t [ 2 ] = tmp2 [ 11 ]
>21	ArrayIndexing	tmp2 [ 11 ]
>22	PrimaryExpression	11
>23	Identifier	tmp2
>24	ArrayIndexing	t [ 2 ]
>25	PrimaryExpression	2
>26	Identifier	t
>27	ExpressionStatement	 
>28	AssignmentExpr	t [ 1 ] = tmp2 [ 7 ]
>29	ArrayIndexing	tmp2 [ 7 ]
>30	PrimaryExpression	7
>31	Identifier	tmp2
>32	ArrayIndexing	t [ 1 ]
>33	PrimaryExpression	1
>34	Identifier	t
>35	ExpressionStatement	 
>36	AssignmentExpr	t [ 0 ] = tmp2 [ 3 ]
>37	ArrayIndexing	tmp2 [ 3 ]
>38	PrimaryExpression	3
>39	Identifier	tmp2
>40	ArrayIndexing	t [ 0 ]
>41	PrimaryExpression	0
>42	Identifier	t
>43	ExpressionStatement	 
>44	CallExpression	memcpy ( R + 6 , tmp2 + 8 , sizeof ( double ) * 3 )
>45	ArgumentList	R + 6
>46	Argument	sizeof ( double ) * 3
>47	MultiplicativeExpression	sizeof ( double ) * 3
>48	PrimaryExpression	3
>49	SizeofExpr	sizeof ( double )
>50	SizeofOperand	double
>51	Sizeof	sizeof
>52	Argument	tmp2 + 8
>53	AdditiveExpression	tmp2 + 8
>54	PrimaryExpression	8
>55	Identifier	tmp2
>56	Argument	R + 6
>57	AdditiveExpression	R + 6
>58	PrimaryExpression	6
>59	Identifier	R
>60	Callee	memcpy
>61	Identifier	memcpy
>62	ExpressionStatement	 
>63	CallExpression	memcpy ( R + 3 , tmp2 + 4 , sizeof ( double ) * 3 )
>64	ArgumentList	R + 3
>65	Argument	sizeof ( double ) * 3
>66	MultiplicativeExpression	sizeof ( double ) * 3
>67	PrimaryExpression	3
>68	SizeofExpr	sizeof ( double )
>69	SizeofOperand	double
>70	Sizeof	sizeof
>71	Argument	tmp2 + 4
>72	AdditiveExpression	tmp2 + 4
>73	PrimaryExpression	4
>74	Identifier	tmp2
>75	Argument	R + 3
>76	AdditiveExpression	R + 3
>77	PrimaryExpression	3
>78	Identifier	R
>79	Callee	memcpy
>80	Identifier	memcpy
>81	ExpressionStatement	 
>82	CallExpression	memcpy ( R + 0 , tmp2 + 0 , sizeof ( double ) * 3 )
>83	ArgumentList	R + 0
>84	Argument	sizeof ( double ) * 3
>85	MultiplicativeExpression	sizeof ( double ) * 3
>86	PrimaryExpression	3
>87	SizeofExpr	sizeof ( double )
>88	SizeofOperand	double
>89	Sizeof	sizeof
>90	Argument	tmp2 + 0
>91	AdditiveExpression	tmp2 + 0
>92	PrimaryExpression	0
>93	Identifier	tmp2
>94	Argument	R + 0
>95	AdditiveExpression	R + 0
>96	PrimaryExpression	0
>97	Identifier	R
>98	Callee	memcpy
>99	Identifier	memcpy
>100	ExpressionStatement	 
>101	CallExpression	matrix_product ( 3 , 3 , 3 , 4 , Kinv , P , tmp2 )
>102	ArgumentList	3
>103	Argument	tmp2
>104	Identifier	tmp2
>105	Argument	P
>106	Identifier	P
>107	Argument	Kinv
>108	Identifier	Kinv
>109	Argument	4
>110	PrimaryExpression	4
>111	Argument	3
>112	PrimaryExpression	3
>113	Argument	3
>114	PrimaryExpression	3
>115	Argument	3
>116	PrimaryExpression	3
>117	Callee	matrix_product
>118	Identifier	matrix_product
>119	ExpressionStatement	 
>120	CallExpression	matrix_invert ( 3 , K , Kinv )
>121	ArgumentList	3
>122	Argument	Kinv
>123	Identifier	Kinv
>124	Argument	K
>125	Identifier	K
>126	Argument	3
>127	PrimaryExpression	3
>128	Callee	matrix_invert
>129	Identifier	matrix_invert
>130	IdentifierDeclStatement	 
>131	IdentifierDecl	Kinv [ 9 ]
>132	PrimaryExpression	9
>133	Identifier	Kinv
>134	IdentifierDeclType	double [ 9 ]
>135	ExpressionStatement	 
>136	CallExpression	memcpy ( K , tmp , sizeof ( double ) * 3 * 3 )
>137	ArgumentList	K
>138	Argument	sizeof ( double ) * 3 * 3
>139	MultiplicativeExpression	sizeof ( double ) * 3 * 3
>140	MultiplicativeExpression	3 * 3
>141	PrimaryExpression	3
>142	PrimaryExpression	3
>143	SizeofExpr	sizeof ( double )
>144	SizeofOperand	double
>145	Sizeof	sizeof
>146	Argument	tmp
>147	Identifier	tmp
>148	Argument	K
>149	Identifier	K
>150	Callee	memcpy
>151	Identifier	memcpy
>152	ExpressionStatement	 
>153	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , K , fix , tmp )
>154	ArgumentList	3
>155	Argument	tmp
>156	Identifier	tmp
>157	Argument	fix
>158	Identifier	fix
>159	Argument	K
>160	Identifier	K
>161	Argument	3
>162	PrimaryExpression	3
>163	Argument	3
>164	PrimaryExpression	3
>165	Argument	3
>166	PrimaryExpression	3
>167	Argument	3
>168	PrimaryExpression	3
>169	Callee	matrix_product
>170	Identifier	matrix_product
>171	IfStatement	if ( K [ 0 ] < 0.0 && K [ 4 ] < 0.0 )
>172	ElseStatement	else
>173	IfStatement	if ( K [ 0 ] < 0.0 )
>174	ElseStatement	else
>175	IfStatement	if ( K [ 4 ] < 0.0 )
>176	ElseStatement	else
>177	CompoundStatement	 
>178	CompoundStatement	 
>179	ExpressionStatement	 
>180	AssignmentExpr	fix [ 8 ] = - 1.0
>181	UnaryOp	- 1.0
>182	PrimaryExpression	1.0
>183	UnaryOperator	-
>184	ArrayIndexing	fix [ 8 ]
>185	PrimaryExpression	8
>186	Identifier	fix
>187	ExpressionStatement	 
>188	AssignmentExpr	fix [ 4 ] = - 1.0
>189	UnaryOp	- 1.0
>190	PrimaryExpression	1.0
>191	UnaryOperator	-
>192	ArrayIndexing	fix [ 4 ]
>193	PrimaryExpression	4
>194	Identifier	fix
>195	Condition	 
>196	RelationalExpression	K [ 4 ] < 0.0
>197	PrimaryExpression	0.0
>198	ArrayIndexing	K [ 4 ]
>199	PrimaryExpression	4
>200	Identifier	K
>201	CompoundStatement	 
>202	ExpressionStatement	 
>203	AssignmentExpr	fix [ 8 ] = - 1.0
>204	UnaryOp	- 1.0
>205	PrimaryExpression	1.0
>206	UnaryOperator	-
>207	ArrayIndexing	fix [ 8 ]
>208	PrimaryExpression	8
>209	Identifier	fix
>210	ExpressionStatement	 
>211	AssignmentExpr	fix [ 0 ] = - 1.0
>212	UnaryOp	- 1.0
>213	PrimaryExpression	1.0
>214	UnaryOperator	-
>215	ArrayIndexing	fix [ 0 ]
>216	PrimaryExpression	0
>217	Identifier	fix
>218	Condition	 
>219	RelationalExpression	K [ 0 ] < 0.0
>220	PrimaryExpression	0.0
>221	ArrayIndexing	K [ 0 ]
>222	PrimaryExpression	0
>223	Identifier	K
>224	CompoundStatement	 
>225	ExpressionStatement	 
>226	AssignmentExpr	fix [ 4 ] = - 1.0
>227	UnaryOp	- 1.0
>228	PrimaryExpression	1.0
>229	UnaryOperator	-
>230	ArrayIndexing	fix [ 4 ]
>231	PrimaryExpression	4
>232	Identifier	fix
>233	ExpressionStatement	 
>234	AssignmentExpr	fix [ 0 ] = - 1.0
>235	UnaryOp	- 1.0
>236	PrimaryExpression	1.0
>237	UnaryOperator	-
>238	ArrayIndexing	fix [ 0 ]
>239	PrimaryExpression	0
>240	Identifier	fix
>241	Condition	 
>242	AndExpression	K [ 0 ] < 0.0 && K [ 4 ] < 0.0
>243	RelationalExpression	K [ 4 ] < 0.0
>244	PrimaryExpression	0.0
>245	ArrayIndexing	K [ 4 ]
>246	PrimaryExpression	4
>247	Identifier	K
>248	RelationalExpression	K [ 0 ] < 0.0
>249	PrimaryExpression	0.0
>250	ArrayIndexing	K [ 0 ]
>251	PrimaryExpression	0
>252	Identifier	K
>253	IdentifierDeclStatement	 
>254	IdentifierDecl	tmp2 [ 12 ]
>255	PrimaryExpression	12
>256	Identifier	tmp2
>257	IdentifierDeclType	double [ 12 ]
>258	IdentifierDecl	tmp [ 9 ]
>259	PrimaryExpression	9
>260	Identifier	tmp
>261	IdentifierDeclType	double [ 9 ]
>262	ExpressionStatement	 
>263	CallExpression	matrix_ident ( 3 , fix )
>264	ArgumentList	3
>265	Argument	fix
>266	Identifier	fix
>267	Argument	3
>268	PrimaryExpression	3
>269	Callee	matrix_ident
>270	Identifier	matrix_ident
>271	IdentifierDeclStatement	 
>272	IdentifierDecl	fix [ 9 ]
>273	PrimaryExpression	9
>274	Identifier	fix
>275	IdentifierDeclType	double [ 9 ]
>276	IfStatement	if ( ( neg % 2 ) == 1 )
>277	CompoundStatement	 
>278	ExpressionStatement	 
>279	CallExpression	matrix_scale ( 3 , 4 , P , - 1.0 , P )
>280	ArgumentList	3
>281	Argument	P
>282	Identifier	P
>283	Argument	- 1.0
>284	UnaryOp	- 1.0
>285	PrimaryExpression	1.0
>286	UnaryOperator	-
>287	Argument	P
>288	Identifier	P
>289	Argument	4
>290	PrimaryExpression	4
>291	Argument	3
>292	PrimaryExpression	3
>293	Callee	matrix_scale
>294	Identifier	matrix_scale
>295	ExpressionStatement	 
>296	CallExpression	matrix_scale ( 3 , 3 , K , - 1.0 , K )
>297	ArgumentList	3
>298	Argument	K
>299	Identifier	K
>300	Argument	- 1.0
>301	UnaryOp	- 1.0
>302	PrimaryExpression	1.0
>303	UnaryOperator	-
>304	Argument	K
>305	Identifier	K
>306	Argument	3
>307	PrimaryExpression	3
>308	Argument	3
>309	PrimaryExpression	3
>310	Callee	matrix_scale
>311	Identifier	matrix_scale
>312	Condition	 
>313	EqualityExpression	( neg % 2 ) == 1
>314	PrimaryExpression	1
>315	MultiplicativeExpression	neg % 2
>316	PrimaryExpression	2
>317	Identifier	neg
>318	IdentifierDeclStatement	 
>319	IdentifierDecl	neg = ( K [ 0 ] < 0.0 ) + ( K [ 4 ] < 0.0 ) + ( K [ 8 ] < 0.0 )
>320	AssignmentExpr	neg = ( K [ 0 ] < 0.0 ) + ( K [ 4 ] < 0.0 ) + ( K [ 8 ] < 0.0 )
>321	AdditiveExpression	( K [ 0 ] < 0.0 ) + ( K [ 4 ] < 0.0 ) + ( K [ 8 ] < 0.0 )
>322	AdditiveExpression	( K [ 4 ] < 0.0 ) + ( K [ 8 ] < 0.0 )
>323	RelationalExpression	K [ 8 ] < 0.0
>324	PrimaryExpression	0.0
>325	ArrayIndexing	K [ 8 ]
>326	PrimaryExpression	8
>327	Identifier	K
>328	RelationalExpression	K [ 4 ] < 0.0
>329	PrimaryExpression	0.0
>330	ArrayIndexing	K [ 4 ]
>331	PrimaryExpression	4
>332	Identifier	K
>333	RelationalExpression	K [ 0 ] < 0.0
>334	PrimaryExpression	0.0
>335	ArrayIndexing	K [ 0 ]
>336	PrimaryExpression	0
>337	Identifier	K
>338	Identifier	neg
>339	Identifier	neg
>340	IdentifierDeclType	int
>357	FunctionDef	GetIntrinsics (const camera_params_t & camera , double * K)
>358	ParameterList	const camera_params_t & camera , double * K
>359	Parameter	 
>360	Identifier	K
>361	ParameterType	double *
>362	Parameter	 
>363	Identifier	camera
>364	ParameterType	const camera_params_t &
>365	ReturnType	void
>366	CompoundStatement	 
>367	IfStatement	if ( ! camera . known_intrinsics )
>368	ElseStatement	else
>369	CompoundStatement	 
>370	ExpressionStatement	 
>371	CallExpression	memcpy ( K , camera . K_known , 9 * sizeof ( double ) )
>372	ArgumentList	K
>373	Argument	9 * sizeof ( double )
>374	MultiplicativeExpression	9 * sizeof ( double )
>375	SizeofExpr	sizeof ( double )
>376	SizeofOperand	double
>377	Sizeof	sizeof
>378	PrimaryExpression	9
>379	Argument	camera . K_known
>380	MemberAccess	camera . K_known
>381	Identifier	K_known
>382	Identifier	camera
>383	Argument	K
>384	Identifier	K
>385	Callee	memcpy
>386	Identifier	memcpy
>387	CompoundStatement	 
>388	ExpressionStatement	 
>389	AssignmentExpr	K [ 8 ] = 1.0
>390	PrimaryExpression	1.0
>391	ArrayIndexing	K [ 8 ]
>392	PrimaryExpression	8
>393	Identifier	K
>394	ExpressionStatement	 
>395	AssignmentExpr	K [ 7 ] = 0.0
>396	PrimaryExpression	0.0
>397	ArrayIndexing	K [ 7 ]
>398	PrimaryExpression	7
>399	Identifier	K
>400	ExpressionStatement	 
>401	AssignmentExpr	K [ 6 ] = 0.0
>402	PrimaryExpression	0.0
>403	ArrayIndexing	K [ 6 ]
>404	PrimaryExpression	6
>405	Identifier	K
>406	ExpressionStatement	 
>407	AssignmentExpr	K [ 5 ] = 0.0
>408	PrimaryExpression	0.0
>409	ArrayIndexing	K [ 5 ]
>410	PrimaryExpression	5
>411	Identifier	K
>412	ExpressionStatement	 
>413	AssignmentExpr	K [ 4 ] = camera . f
>414	MemberAccess	camera . f
>415	Identifier	f
>416	Identifier	camera
>417	ArrayIndexing	K [ 4 ]
>418	PrimaryExpression	4
>419	Identifier	K
>420	ExpressionStatement	 
>421	AssignmentExpr	K [ 3 ] = 0.0
>422	PrimaryExpression	0.0
>423	ArrayIndexing	K [ 3 ]
>424	PrimaryExpression	3
>425	Identifier	K
>426	ExpressionStatement	 
>427	AssignmentExpr	K [ 2 ] = 0.0
>428	PrimaryExpression	0.0
>429	ArrayIndexing	K [ 2 ]
>430	PrimaryExpression	2
>431	Identifier	K
>432	ExpressionStatement	 
>433	AssignmentExpr	K [ 1 ] = 0.0
>434	PrimaryExpression	0.0
>435	ArrayIndexing	K [ 1 ]
>436	PrimaryExpression	1
>437	Identifier	K
>438	ExpressionStatement	 
>439	AssignmentExpr	K [ 0 ] = camera . f
>440	MemberAccess	camera . f
>441	Identifier	f
>442	Identifier	camera
>443	ArrayIndexing	K [ 0 ]
>444	PrimaryExpression	0
>445	Identifier	K
>446	Condition	 
>447	UnaryOp	! camera . known_intrinsics
>448	MemberAccess	camera . known_intrinsics
>449	Identifier	known_intrinsics
>450	Identifier	camera
>451	UnaryOperator	!
>461	FunctionDef	ComputeRayAngle (v2_t p , v2_t q , const camera_params_t & cam1 , const camera_params_t & cam2)
>462	ParameterList	v2_t p , v2_t q , const camera_params_t & cam1 , const camera_params_t & cam2
>463	Parameter	 
>464	Identifier	cam2
>465	ParameterType	const camera_params_t &
>466	Parameter	 
>467	Identifier	cam1
>468	ParameterType	const camera_params_t &
>469	Parameter	 
>470	Identifier	q
>471	ParameterType	v2_t
>472	Parameter	 
>473	Identifier	p
>474	ParameterType	v2_t
>475	ReturnType	double
>476	CompoundStatement	 
>477	ReturnStatement	 
>478	CallExpression	acos ( CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>479	ArgumentList	CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>480	Argument	CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>481	CallExpression	CLAMP ( dot / mag , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>482	ArgumentList	dot / mag
>483	Argument	1.0 - 1.0e-8
>484	AdditiveExpression	1.0 - 1.0e-8
>485	PrimaryExpression	1.0e-8
>486	PrimaryExpression	1.0
>487	Argument	- 1.0 + 1.0e-8
>488	AdditiveExpression	- 1.0 + 1.0e-8
>489	PrimaryExpression	1.0e-8
>490	UnaryOp	- 1.0
>491	PrimaryExpression	1.0
>492	UnaryOperator	-
>493	Argument	dot / mag
>494	MultiplicativeExpression	dot / mag
>495	Identifier	mag
>496	Identifier	dot
>497	Callee	CLAMP
>498	Identifier	CLAMP
>499	Callee	acos
>500	Identifier	acos
>501	IdentifierDeclStatement	 
>502	IdentifierDecl	mag = matrix_norm ( 3 , 1 , p_vec ) * matrix_norm ( 3 , 1 , q_vec )
>503	AssignmentExpr	mag = matrix_norm ( 3 , 1 , p_vec ) * matrix_norm ( 3 , 1 , q_vec )
>504	MultiplicativeExpression	matrix_norm ( 3 , 1 , p_vec ) * matrix_norm ( 3 , 1 , q_vec )
>505	CallExpression	matrix_norm ( 3 , 1 , q_vec )
>506	ArgumentList	3
>507	Argument	q_vec
>508	Identifier	q_vec
>509	Argument	1
>510	PrimaryExpression	1
>511	Argument	3
>512	PrimaryExpression	3
>513	Callee	matrix_norm
>514	Identifier	matrix_norm
>515	CallExpression	matrix_norm ( 3 , 1 , p_vec )
>516	ArgumentList	3
>517	Argument	p_vec
>518	Identifier	p_vec
>519	Argument	1
>520	PrimaryExpression	1
>521	Argument	3
>522	PrimaryExpression	3
>523	Callee	matrix_norm
>524	Identifier	matrix_norm
>525	Identifier	mag
>526	Identifier	mag
>527	IdentifierDeclType	double
>528	ExpressionStatement	 
>529	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , p_vec , q_vec , & dot )
>530	ArgumentList	1
>531	Argument	& dot
>532	UnaryOp	& dot
>533	Identifier	dot
>534	UnaryOperator	&
>535	Argument	q_vec
>536	Identifier	q_vec
>537	Argument	p_vec
>538	Identifier	p_vec
>539	Argument	1
>540	PrimaryExpression	1
>541	Argument	3
>542	PrimaryExpression	3
>543	Argument	3
>544	PrimaryExpression	3
>545	Argument	1
>546	PrimaryExpression	1
>547	Callee	matrix_product
>548	Identifier	matrix_product
>549	IdentifierDeclStatement	 
>550	IdentifierDecl	dot
>551	Identifier	dot
>552	IdentifierDeclType	double
>553	ExpressionStatement	 
>554	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , q_w , ( double * ) cam2 . t , q_vec )
>555	ArgumentList	3
>556	Argument	q_vec
>557	Identifier	q_vec
>558	Argument	( double * ) cam2 . t
>559	CastExpression	( double * ) cam2 . t
>560	MemberAccess	cam2 . t
>561	Identifier	t
>562	Identifier	cam2
>563	CastTarget	double *
>564	Argument	q_w
>565	Identifier	q_w
>566	Argument	1
>567	PrimaryExpression	1
>568	Argument	3
>569	PrimaryExpression	3
>570	Argument	1
>571	PrimaryExpression	1
>572	Argument	3
>573	PrimaryExpression	3
>574	Callee	matrix_diff
>575	Identifier	matrix_diff
>576	ExpressionStatement	 
>577	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , p_w , ( double * ) cam1 . t , p_vec )
>578	ArgumentList	3
>579	Argument	p_vec
>580	Identifier	p_vec
>581	Argument	( double * ) cam1 . t
>582	CastExpression	( double * ) cam1 . t
>583	MemberAccess	cam1 . t
>584	Identifier	t
>585	Identifier	cam1
>586	CastTarget	double *
>587	Argument	p_w
>588	Identifier	p_w
>589	Argument	1
>590	PrimaryExpression	1
>591	Argument	3
>592	PrimaryExpression	3
>593	Argument	1
>594	PrimaryExpression	1
>595	Argument	3
>596	PrimaryExpression	3
>597	Callee	matrix_diff
>598	Identifier	matrix_diff
>599	IdentifierDeclStatement	 
>600	IdentifierDecl	q_vec [ 3 ]
>601	PrimaryExpression	3
>602	Identifier	q_vec
>603	IdentifierDeclType	double [ 3 ]
>604	IdentifierDecl	p_vec [ 3 ]
>605	PrimaryExpression	3
>606	Identifier	p_vec
>607	IdentifierDeclType	double [ 3 ]
>608	ExpressionStatement	 
>609	CallExpression	matrix_sum ( 3 , 1 , 3 , 1 , Rqv , ( double * ) cam2 . t , q_w )
>610	ArgumentList	3
>611	Argument	q_w
>612	Identifier	q_w
>613	Argument	( double * ) cam2 . t
>614	CastExpression	( double * ) cam2 . t
>615	MemberAccess	cam2 . t
>616	Identifier	t
>617	Identifier	cam2
>618	CastTarget	double *
>619	Argument	Rqv
>620	Identifier	Rqv
>621	Argument	1
>622	PrimaryExpression	1
>623	Argument	3
>624	PrimaryExpression	3
>625	Argument	1
>626	PrimaryExpression	1
>627	Argument	3
>628	PrimaryExpression	3
>629	Callee	matrix_sum
>630	Identifier	matrix_sum
>631	ExpressionStatement	 
>632	CallExpression	matrix_sum ( 3 , 1 , 3 , 1 , Rpv , ( double * ) cam1 . t , p_w )
>633	ArgumentList	3
>634	Argument	p_w
>635	Identifier	p_w
>636	Argument	( double * ) cam1 . t
>637	CastExpression	( double * ) cam1 . t
>638	MemberAccess	cam1 . t
>639	Identifier	t
>640	Identifier	cam1
>641	CastTarget	double *
>642	Argument	Rpv
>643	Identifier	Rpv
>644	Argument	1
>645	PrimaryExpression	1
>646	Argument	3
>647	PrimaryExpression	3
>648	Argument	1
>649	PrimaryExpression	1
>650	Argument	3
>651	PrimaryExpression	3
>652	Callee	matrix_sum
>653	Identifier	matrix_sum
>654	ExpressionStatement	 
>655	CallExpression	matrix_product331 ( R2_inv , qv , Rqv )
>656	ArgumentList	R2_inv
>657	Argument	Rqv
>658	Identifier	Rqv
>659	Argument	qv
>660	Identifier	qv
>661	Argument	R2_inv
>662	Identifier	R2_inv
>663	Callee	matrix_product331
>664	Identifier	matrix_product331
>665	ExpressionStatement	 
>666	CallExpression	matrix_product331 ( R1_inv , pv , Rpv )
>667	ArgumentList	R1_inv
>668	Argument	Rpv
>669	Identifier	Rpv
>670	Argument	pv
>671	Identifier	pv
>672	Argument	R1_inv
>673	Identifier	R1_inv
>674	Callee	matrix_product331
>675	Identifier	matrix_product331
>676	IdentifierDeclStatement	 
>677	IdentifierDecl	Rqv [ 3 ]
>678	PrimaryExpression	3
>679	Identifier	Rqv
>680	IdentifierDeclType	double [ 3 ]
>681	IdentifierDecl	Rpv [ 3 ]
>682	PrimaryExpression	3
>683	Identifier	Rpv
>684	IdentifierDeclType	double [ 3 ]
>685	IdentifierDeclStatement	 
>686	IdentifierDecl	qv [ 3 ] = { Vx ( q_norm ) , Vy ( q_norm ) , - 1.0 }
>687	AssignmentExpr	qv [ 3 ] = { Vx ( q_norm ) , Vy ( q_norm ) , - 1.0 }
>688	InitializerList	Vx ( q_norm )
>689	UnaryOp	- 1.0
>690	PrimaryExpression	1.0
>691	UnaryOperator	-
>692	CallExpression	Vy ( q_norm )
>693	ArgumentList	q_norm
>694	Argument	q_norm
>695	Identifier	q_norm
>696	Callee	Vy
>697	Identifier	Vy
>698	CallExpression	Vx ( q_norm )
>699	ArgumentList	q_norm
>700	Argument	q_norm
>701	Identifier	q_norm
>702	Callee	Vx
>703	Identifier	Vx
>704	Identifier	qv
>705	PrimaryExpression	3
>706	Identifier	qv
>707	IdentifierDeclType	double [ 3 ]
>708	IdentifierDeclStatement	 
>709	IdentifierDecl	pv [ 3 ] = { Vx ( p_norm ) , Vy ( p_norm ) , - 1.0 }
>710	AssignmentExpr	pv [ 3 ] = { Vx ( p_norm ) , Vy ( p_norm ) , - 1.0 }
>711	InitializerList	Vx ( p_norm )
>712	UnaryOp	- 1.0
>713	PrimaryExpression	1.0
>714	UnaryOperator	-
>715	CallExpression	Vy ( p_norm )
>716	ArgumentList	p_norm
>717	Argument	p_norm
>718	Identifier	p_norm
>719	Callee	Vy
>720	Identifier	Vy
>721	CallExpression	Vx ( p_norm )
>722	ArgumentList	p_norm
>723	Argument	p_norm
>724	Identifier	p_norm
>725	Callee	Vx
>726	Identifier	Vx
>727	Identifier	pv
>728	PrimaryExpression	3
>729	Identifier	pv
>730	IdentifierDeclType	double [ 3 ]
>731	IdentifierDeclStatement	 
>732	IdentifierDecl	q_w [ 3 ]
>733	PrimaryExpression	3
>734	Identifier	q_w
>735	IdentifierDeclType	double [ 3 ]
>736	IdentifierDecl	p_w [ 3 ]
>737	PrimaryExpression	3
>738	Identifier	p_w
>739	IdentifierDeclType	double [ 3 ]
>740	ExpressionStatement	 
>741	CallExpression	matrix_transpose ( 3 , 3 , ( double * ) cam2 . R , R2_inv )
>742	ArgumentList	3
>743	Argument	R2_inv
>744	Identifier	R2_inv
>745	Argument	( double * ) cam2 . R
>746	CastExpression	( double * ) cam2 . R
>747	MemberAccess	cam2 . R
>748	Identifier	R
>749	Identifier	cam2
>750	CastTarget	double *
>751	Argument	3
>752	PrimaryExpression	3
>753	Argument	3
>754	PrimaryExpression	3
>755	Callee	matrix_transpose
>756	Identifier	matrix_transpose
>757	ExpressionStatement	 
>758	CallExpression	matrix_transpose ( 3 , 3 , ( double * ) cam1 . R , R1_inv )
>759	ArgumentList	3
>760	Argument	R1_inv
>761	Identifier	R1_inv
>762	Argument	( double * ) cam1 . R
>763	CastExpression	( double * ) cam1 . R
>764	MemberAccess	cam1 . R
>765	Identifier	R
>766	Identifier	cam1
>767	CastTarget	double *
>768	Argument	3
>769	PrimaryExpression	3
>770	Argument	3
>771	PrimaryExpression	3
>772	Callee	matrix_transpose
>773	Identifier	matrix_transpose
>774	IdentifierDeclStatement	 
>775	IdentifierDecl	R2_inv [ 9 ]
>776	PrimaryExpression	9
>777	Identifier	R2_inv
>778	IdentifierDeclType	double [ 9 ]
>779	IdentifierDecl	R1_inv [ 9 ]
>780	PrimaryExpression	9
>781	Identifier	R1_inv
>782	IdentifierDeclType	double [ 9 ]
>783	IdentifierDeclStatement	 
>784	IdentifierDecl	q_norm = v2_new ( q3_norm [ 0 ] / q3_norm [ 2 ] , q3_norm [ 1 ] / q3_norm [ 2 ] )
>785	AssignmentExpr	q_norm = v2_new ( q3_norm [ 0 ] / q3_norm [ 2 ] , q3_norm [ 1 ] / q3_norm [ 2 ] )
>786	CallExpression	v2_new ( q3_norm [ 0 ] / q3_norm [ 2 ] , q3_norm [ 1 ] / q3_norm [ 2 ] )
>787	ArgumentList	q3_norm [ 0 ] / q3_norm [ 2 ]
>788	Argument	q3_norm [ 1 ] / q3_norm [ 2 ]
>789	MultiplicativeExpression	q3_norm [ 1 ] / q3_norm [ 2 ]
>790	ArrayIndexing	q3_norm [ 2 ]
>791	PrimaryExpression	2
>792	Identifier	q3_norm
>793	ArrayIndexing	q3_norm [ 1 ]
>794	PrimaryExpression	1
>795	Identifier	q3_norm
>796	Argument	q3_norm [ 0 ] / q3_norm [ 2 ]
>797	MultiplicativeExpression	q3_norm [ 0 ] / q3_norm [ 2 ]
>798	ArrayIndexing	q3_norm [ 2 ]
>799	PrimaryExpression	2
>800	Identifier	q3_norm
>801	ArrayIndexing	q3_norm [ 0 ]
>802	PrimaryExpression	0
>803	Identifier	q3_norm
>804	Callee	v2_new
>805	Identifier	v2_new
>806	Identifier	q_norm
>807	Identifier	q_norm
>808	IdentifierDeclType	v2_t
>809	IdentifierDeclStatement	 
>810	IdentifierDecl	p_norm = v2_new ( p3_norm [ 0 ] / p3_norm [ 2 ] , p3_norm [ 1 ] / p3_norm [ 2 ] )
>811	AssignmentExpr	p_norm = v2_new ( p3_norm [ 0 ] / p3_norm [ 2 ] , p3_norm [ 1 ] / p3_norm [ 2 ] )
>812	CallExpression	v2_new ( p3_norm [ 0 ] / p3_norm [ 2 ] , p3_norm [ 1 ] / p3_norm [ 2 ] )
>813	ArgumentList	p3_norm [ 0 ] / p3_norm [ 2 ]
>814	Argument	p3_norm [ 1 ] / p3_norm [ 2 ]
>815	MultiplicativeExpression	p3_norm [ 1 ] / p3_norm [ 2 ]
>816	ArrayIndexing	p3_norm [ 2 ]
>817	PrimaryExpression	2
>818	Identifier	p3_norm
>819	ArrayIndexing	p3_norm [ 1 ]
>820	PrimaryExpression	1
>821	Identifier	p3_norm
>822	Argument	p3_norm [ 0 ] / p3_norm [ 2 ]
>823	MultiplicativeExpression	p3_norm [ 0 ] / p3_norm [ 2 ]
>824	ArrayIndexing	p3_norm [ 2 ]
>825	PrimaryExpression	2
>826	Identifier	p3_norm
>827	ArrayIndexing	p3_norm [ 0 ]
>828	PrimaryExpression	0
>829	Identifier	p3_norm
>830	Callee	v2_new
>831	Identifier	v2_new
>832	Identifier	p_norm
>833	Identifier	p_norm
>834	IdentifierDeclType	v2_t
>835	ExpressionStatement	 
>836	CallExpression	matrix_product331 ( K2_inv , q3 , q3_norm )
>837	ArgumentList	K2_inv
>838	Argument	q3_norm
>839	Identifier	q3_norm
>840	Argument	q3
>841	Identifier	q3
>842	Argument	K2_inv
>843	Identifier	K2_inv
>844	Callee	matrix_product331
>845	Identifier	matrix_product331
>846	ExpressionStatement	 
>847	CallExpression	matrix_product331 ( K1_inv , p3 , p3_norm )
>848	ArgumentList	K1_inv
>849	Argument	p3_norm
>850	Identifier	p3_norm
>851	Argument	p3
>852	Identifier	p3
>853	Argument	K1_inv
>854	Identifier	K1_inv
>855	Callee	matrix_product331
>856	Identifier	matrix_product331
>857	IdentifierDeclStatement	 
>858	IdentifierDecl	q3_norm [ 3 ]
>859	PrimaryExpression	3
>860	Identifier	q3_norm
>861	IdentifierDeclType	double [ 3 ]
>862	IdentifierDecl	p3_norm [ 3 ]
>863	PrimaryExpression	3
>864	Identifier	p3_norm
>865	IdentifierDeclType	double [ 3 ]
>866	IdentifierDeclStatement	 
>867	IdentifierDecl	q3 [ 3 ] = { Vx ( q ) , Vy ( q ) , 1.0 }
>868	AssignmentExpr	q3 [ 3 ] = { Vx ( q ) , Vy ( q ) , 1.0 }
>869	InitializerList	Vx ( q )
>870	PrimaryExpression	1.0
>871	CallExpression	Vy ( q )
>872	ArgumentList	q
>873	Argument	q
>874	Identifier	q
>875	Callee	Vy
>876	Identifier	Vy
>877	CallExpression	Vx ( q )
>878	ArgumentList	q
>879	Argument	q
>880	Identifier	q
>881	Callee	Vx
>882	Identifier	Vx
>883	Identifier	q3
>884	PrimaryExpression	3
>885	Identifier	q3
>886	IdentifierDeclType	double [ 3 ]
>887	IdentifierDeclStatement	 
>888	IdentifierDecl	p3 [ 3 ] = { Vx ( p ) , Vy ( p ) , 1.0 }
>889	AssignmentExpr	p3 [ 3 ] = { Vx ( p ) , Vy ( p ) , 1.0 }
>890	InitializerList	Vx ( p )
>891	PrimaryExpression	1.0
>892	CallExpression	Vy ( p )
>893	ArgumentList	p
>894	Argument	p
>895	Identifier	p
>896	Callee	Vy
>897	Identifier	Vy
>898	CallExpression	Vx ( p )
>899	ArgumentList	p
>900	Argument	p
>901	Identifier	p
>902	Callee	Vx
>903	Identifier	Vx
>904	Identifier	p3
>905	PrimaryExpression	3
>906	Identifier	p3
>907	IdentifierDeclType	double [ 3 ]
>908	ExpressionStatement	 
>909	CallExpression	matrix_invert ( 3 , K2 , K2_inv )
>910	ArgumentList	3
>911	Argument	K2_inv
>912	Identifier	K2_inv
>913	Argument	K2
>914	Identifier	K2
>915	Argument	3
>916	PrimaryExpression	3
>917	Callee	matrix_invert
>918	Identifier	matrix_invert
>919	ExpressionStatement	 
>920	CallExpression	matrix_invert ( 3 , K1 , K1_inv )
>921	ArgumentList	3
>922	Argument	K1_inv
>923	Identifier	K1_inv
>924	Argument	K1
>925	Identifier	K1
>926	Argument	3
>927	PrimaryExpression	3
>928	Callee	matrix_invert
>929	Identifier	matrix_invert
>930	IdentifierDeclStatement	 
>931	IdentifierDecl	K2_inv [ 9 ]
>932	PrimaryExpression	9
>933	Identifier	K2_inv
>934	IdentifierDeclType	double [ 9 ]
>935	IdentifierDecl	K1_inv [ 9 ]
>936	PrimaryExpression	9
>937	Identifier	K1_inv
>938	IdentifierDeclType	double [ 9 ]
>939	ExpressionStatement	 
>940	CallExpression	GetIntrinsics ( cam2 , K2 )
>941	ArgumentList	cam2
>942	Argument	K2
>943	Identifier	K2
>944	Argument	cam2
>945	Identifier	cam2
>946	Callee	GetIntrinsics
>947	Identifier	GetIntrinsics
>948	ExpressionStatement	 
>949	CallExpression	GetIntrinsics ( cam1 , K1 )
>950	ArgumentList	cam1
>951	Argument	K1
>952	Identifier	K1
>953	Argument	cam1
>954	Identifier	cam1
>955	Callee	GetIntrinsics
>956	Identifier	GetIntrinsics
>957	IdentifierDeclStatement	 
>958	IdentifierDecl	K2 [ 9 ]
>959	PrimaryExpression	9
>960	Identifier	K2
>961	IdentifierDeclType	double [ 9 ]
>962	IdentifierDecl	K1 [ 9 ]
>963	PrimaryExpression	9
>964	Identifier	K1
>965	IdentifierDeclType	double [ 9 ]
>1008	FunctionDef	RemoveImageKey (ImageKeyVector & vec , int view)
>1009	ParameterList	ImageKeyVector & vec , int view
>1010	Parameter	 
>1011	Identifier	view
>1012	ParameterType	int
>1013	Parameter	 
>1014	Identifier	vec
>1015	ParameterType	ImageKeyVector &
>1016	ReturnType	static void
>1017	CompoundStatement	 
>1018	IfStatement	if ( found == 0 )
>1019	ElseStatement	else
>1020	IfStatement	if ( found > 1 )
>1021	ExpressionStatement	 
>1022	CallExpression	printf ( \"[RemoveImageKey] Error! Found too many views %d\n\" , view )
>1023	ArgumentList	\"[RemoveImageKey] Error! Found too many views %d\n\"
>1024	Argument	view
>1025	Identifier	view
>1026	Argument	\"[RemoveImageKey] Error! Found too many views %d\n\"
>1027	PrimaryExpression	\"[RemoveImageKey] Error! Found too many views %d\n\"
>1028	Callee	printf
>1029	Identifier	printf
>1030	Condition	 
>1031	RelationalExpression	found > 1
>1032	PrimaryExpression	1
>1033	Identifier	found
>1034	ExpressionStatement	 
>1035	CallExpression	printf ( \"[RemoveImageKey] Error! Couldn't find view %d\n\" , view )
>1036	ArgumentList	\"[RemoveImageKey] Error! Couldn't find view %d\n\"
>1037	Argument	view
>1038	Identifier	view
>1039	Argument	\"[RemoveImageKey] Error! Couldn't find view %d\n\"
>1040	PrimaryExpression	\"[RemoveImageKey] Error! Couldn't find view %d\n\"
>1041	Callee	printf
>1042	Identifier	printf
>1043	Condition	 
>1044	EqualityExpression	found == 0
>1045	PrimaryExpression	0
>1046	Identifier	found
>1047	ForStatement	for ( int i = 0 ; i < size ; i ++ )
>1048	CompoundStatement	 
>1049	IfStatement	if ( vec [ i ] . first == view )
>1050	CompoundStatement	 
>1051	ExpressionStatement	 
>1052	IncDecOp	found ++
>1053	IncDec	++
>1054	Identifier	found
>1055	ExpressionStatement	 
>1056	IncDecOp	size --
>1057	IncDec	--
>1058	Identifier	size
>1059	ExpressionStatement	 
>1060	IncDecOp	i --
>1061	IncDec	--
>1062	Identifier	i
>1063	ExpressionStatement	 
>1064	CallExpression	vec . erase ( vec . begin ( ) + i )
>1065	ArgumentList	vec . begin ( ) + i
>1066	Argument	vec . begin ( ) + i
>1067	AdditiveExpression	vec . begin ( ) + i
>1068	Identifier	i
>1069	CallExpression	vec . begin ( )
>1070	ArgumentList	 
>1071	Callee	vec . begin
>1072	MemberAccess	vec . begin
>1073	Identifier	begin
>1074	Identifier	vec
>1075	Callee	vec . erase
>1076	MemberAccess	vec . erase
>1077	Identifier	erase
>1078	Identifier	vec
>1079	Condition	 
>1080	EqualityExpression	vec [ i ] . first == view
>1081	Identifier	view
>1082	MemberAccess	vec [ i ] . first
>1083	Identifier	first
>1084	ArrayIndexing	vec [ i ]
>1085	Identifier	i
>1086	Identifier	vec
>1087	IncDecOp	 
>1088	IncDec	++
>1089	Identifier	i
>1090	Condition	 
>1091	RelationalExpression	i < size
>1092	Identifier	size
>1093	Identifier	i
>1094	ForInit	 
>1095	IdentifierDeclStatement	int i = 0 ;
>1096	IdentifierDecl	i = 0
>1097	AssignmentExpr	i = 0
>1098	PrimaryExpression	0
>1099	Identifier	i
>1100	Identifier	i
>1101	IdentifierDeclType	int
>1102	IdentifierDeclStatement	 
>1103	IdentifierDecl	found = 0
>1104	AssignmentExpr	found = 0
>1105	PrimaryExpression	0
>1106	Identifier	found
>1107	Identifier	found
>1108	IdentifierDeclType	int
>1109	IdentifierDeclStatement	 
>1110	IdentifierDecl	size = ( int ) vec . size ( )
>1111	AssignmentExpr	size = ( int ) vec . size ( )
>1112	CastExpression	( int ) vec . size ( )
>1113	CallExpression	vec . size ( )
>1114	ArgumentList	 
>1115	Callee	vec . size
>1116	MemberAccess	vec . size
>1117	Identifier	size
>1118	Identifier	vec
>1119	CastTarget	int
>1120	Identifier	size
>1121	Identifier	size
>1122	IdentifierDeclType	int
>1136	FunctionDef	CheckCheirality (v3_t p , const camera_params_t & camera)
>1137	ParameterList	v3_t p , const camera_params_t & camera
>1138	Parameter	 
>1139	Identifier	camera
>1140	ParameterType	const camera_params_t &
>1141	Parameter	 
>1142	Identifier	p
>1143	ParameterType	v3_t
>1144	ReturnType	bool
>1145	CompoundStatement	 
>1146	IfStatement	if ( cam [ 2 ] > 0.0 )
>1147	ElseStatement	else
>1148	ReturnStatement	 
>1149	Identifier	true
>1150	ReturnStatement	 
>1151	Identifier	false
>1152	Condition	 
>1153	RelationalExpression	cam [ 2 ] > 0.0
>1154	PrimaryExpression	0.0
>1155	ArrayIndexing	cam [ 2 ]
>1156	PrimaryExpression	2
>1157	Identifier	cam
>1158	ExpressionStatement	 
>1159	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , ( double * ) camera . R , pt , cam )
>1160	ArgumentList	3
>1161	Argument	cam
>1162	Identifier	cam
>1163	Argument	pt
>1164	Identifier	pt
>1165	Argument	( double * ) camera . R
>1166	CastExpression	( double * ) camera . R
>1167	MemberAccess	camera . R
>1168	Identifier	R
>1169	Identifier	camera
>1170	CastTarget	double *
>1171	Argument	1
>1172	PrimaryExpression	1
>1173	Argument	3
>1174	PrimaryExpression	3
>1175	Argument	3
>1176	PrimaryExpression	3
>1177	Argument	3
>1178	PrimaryExpression	3
>1179	Callee	matrix_product
>1180	Identifier	matrix_product
>1181	ExpressionStatement	 
>1182	AssignmentExpr	pt [ 2 ] -= camera . t [ 2 ]
>1183	ArrayIndexing	camera . t [ 2 ]
>1184	PrimaryExpression	2
>1185	MemberAccess	camera . t
>1186	Identifier	t
>1187	Identifier	camera
>1188	ArrayIndexing	pt [ 2 ]
>1189	PrimaryExpression	2
>1190	Identifier	pt
>1191	ExpressionStatement	 
>1192	AssignmentExpr	pt [ 1 ] -= camera . t [ 1 ]
>1193	ArrayIndexing	camera . t [ 1 ]
>1194	PrimaryExpression	1
>1195	MemberAccess	camera . t
>1196	Identifier	t
>1197	Identifier	camera
>1198	ArrayIndexing	pt [ 1 ]
>1199	PrimaryExpression	1
>1200	Identifier	pt
>1201	ExpressionStatement	 
>1202	AssignmentExpr	pt [ 0 ] -= camera . t [ 0 ]
>1203	ArrayIndexing	camera . t [ 0 ]
>1204	PrimaryExpression	0
>1205	MemberAccess	camera . t
>1206	Identifier	t
>1207	Identifier	camera
>1208	ArrayIndexing	pt [ 0 ]
>1209	PrimaryExpression	0
>1210	Identifier	pt
>1211	IdentifierDeclStatement	 
>1212	IdentifierDecl	cam [ 3 ]
>1213	PrimaryExpression	3
>1214	Identifier	cam
>1215	IdentifierDeclType	double [ 3 ]
>1216	IdentifierDeclStatement	 
>1217	IdentifierDecl	pt [ 3 ] = { Vx ( p ) , Vy ( p ) , Vz ( p ) }
>1218	AssignmentExpr	pt [ 3 ] = { Vx ( p ) , Vy ( p ) , Vz ( p ) }
>1219	InitializerList	Vx ( p )
>1220	CallExpression	Vz ( p )
>1221	ArgumentList	p
>1222	Argument	p
>1223	Identifier	p
>1224	Callee	Vz
>1225	Identifier	Vz
>1226	CallExpression	Vy ( p )
>1227	ArgumentList	p
>1228	Argument	p
>1229	Identifier	p
>1230	Callee	Vy
>1231	Identifier	Vy
>1232	CallExpression	Vx ( p )
>1233	ArgumentList	p
>1234	Argument	p
>1235	Identifier	p
>1236	Callee	Vx
>1237	Identifier	Vx
>1238	Identifier	pt
>1239	PrimaryExpression	3
>1240	Identifier	pt
>1241	IdentifierDeclType	double [ 3 ]
>1260	FunctionDef	GetCameraDistance (camera_params_t * c1 , camera_params_t * c2)
>1261	ParameterList	camera_params_t * c1 , camera_params_t * c2
>1262	Parameter	 
>1263	Identifier	c2
>1264	ParameterType	camera_params_t *
>1265	Parameter	 
>1266	Identifier	c1
>1267	ParameterType	camera_params_t *
>1268	ReturnType	double
>1269	CompoundStatement	 
>1270	ReturnStatement	 
>1271	CallExpression	sqrt ( dx * dx + dy * dy + dz * dz )
>1272	ArgumentList	dx * dx + dy * dy + dz * dz
>1273	Argument	dx * dx + dy * dy + dz * dz
>1274	AdditiveExpression	dx * dx + dy * dy + dz * dz
>1275	AdditiveExpression	dy * dy + dz * dz
>1276	MultiplicativeExpression	dz * dz
>1277	Identifier	dz
>1278	Identifier	dz
>1279	MultiplicativeExpression	dy * dy
>1280	Identifier	dy
>1281	Identifier	dy
>1282	MultiplicativeExpression	dx * dx
>1283	Identifier	dx
>1284	Identifier	dx
>1285	Callee	sqrt
>1286	Identifier	sqrt
>1287	IdentifierDeclStatement	 
>1288	IdentifierDecl	dz = center1 [ 2 ] - center2 [ 2 ]
>1289	AssignmentExpr	dz = center1 [ 2 ] - center2 [ 2 ]
>1290	AdditiveExpression	center1 [ 2 ] - center2 [ 2 ]
>1291	ArrayIndexing	center2 [ 2 ]
>1292	PrimaryExpression	2
>1293	Identifier	center2
>1294	ArrayIndexing	center1 [ 2 ]
>1295	PrimaryExpression	2
>1296	Identifier	center1
>1297	Identifier	dz
>1298	Identifier	dz
>1299	IdentifierDeclType	double
>1300	IdentifierDeclStatement	 
>1301	IdentifierDecl	dy = center1 [ 1 ] - center2 [ 1 ]
>1302	AssignmentExpr	dy = center1 [ 1 ] - center2 [ 1 ]
>1303	AdditiveExpression	center1 [ 1 ] - center2 [ 1 ]
>1304	ArrayIndexing	center2 [ 1 ]
>1305	PrimaryExpression	1
>1306	Identifier	center2
>1307	ArrayIndexing	center1 [ 1 ]
>1308	PrimaryExpression	1
>1309	Identifier	center1
>1310	Identifier	dy
>1311	Identifier	dy
>1312	IdentifierDeclType	double
>1313	IdentifierDeclStatement	 
>1314	IdentifierDecl	dx = center1 [ 0 ] - center2 [ 0 ]
>1315	AssignmentExpr	dx = center1 [ 0 ] - center2 [ 0 ]
>1316	AdditiveExpression	center1 [ 0 ] - center2 [ 0 ]
>1317	ArrayIndexing	center2 [ 0 ]
>1318	PrimaryExpression	0
>1319	Identifier	center2
>1320	ArrayIndexing	center1 [ 0 ]
>1321	PrimaryExpression	0
>1322	Identifier	center1
>1323	Identifier	dx
>1324	Identifier	dx
>1325	IdentifierDeclType	double
>1326	ExpressionStatement	 
>1327	CallExpression	memcpy ( center2 , c2 -> t , 3 * sizeof ( double ) )
>1328	ArgumentList	center2
>1329	Argument	3 * sizeof ( double )
>1330	MultiplicativeExpression	3 * sizeof ( double )
>1331	SizeofExpr	sizeof ( double )
>1332	SizeofOperand	double
>1333	Sizeof	sizeof
>1334	PrimaryExpression	3
>1335	Argument	c2 -> t
>1336	PtrMemberAccess	c2 -> t
>1337	Identifier	t
>1338	Identifier	c2
>1339	Argument	center2
>1340	Identifier	center2
>1341	Callee	memcpy
>1342	Identifier	memcpy
>1343	ExpressionStatement	 
>1344	CallExpression	matrix_invert ( 3 , c2 -> R , Rinv2 )
>1345	ArgumentList	3
>1346	Argument	Rinv2
>1347	Identifier	Rinv2
>1348	Argument	c2 -> R
>1349	PtrMemberAccess	c2 -> R
>1350	Identifier	R
>1351	Identifier	c2
>1352	Argument	3
>1353	PrimaryExpression	3
>1354	Callee	matrix_invert
>1355	Identifier	matrix_invert
>1356	IdentifierDeclStatement	 
>1357	IdentifierDecl	Rinv2 [ 9 ]
>1358	PrimaryExpression	9
>1359	Identifier	Rinv2
>1360	IdentifierDeclType	double [ 9 ]
>1361	IdentifierDeclStatement	 
>1362	IdentifierDecl	center2 [ 3 ]
>1363	PrimaryExpression	3
>1364	Identifier	center2
>1365	IdentifierDeclType	double [ 3 ]
>1366	ExpressionStatement	 
>1367	CallExpression	memcpy ( center1 , c1 -> t , 3 * sizeof ( double ) )
>1368	ArgumentList	center1
>1369	Argument	3 * sizeof ( double )
>1370	MultiplicativeExpression	3 * sizeof ( double )
>1371	SizeofExpr	sizeof ( double )
>1372	SizeofOperand	double
>1373	Sizeof	sizeof
>1374	PrimaryExpression	3
>1375	Argument	c1 -> t
>1376	PtrMemberAccess	c1 -> t
>1377	Identifier	t
>1378	Identifier	c1
>1379	Argument	center1
>1380	Identifier	center1
>1381	Callee	memcpy
>1382	Identifier	memcpy
>1383	ExpressionStatement	 
>1384	CallExpression	matrix_invert ( 3 , c1 -> R , Rinv1 )
>1385	ArgumentList	3
>1386	Argument	Rinv1
>1387	Identifier	Rinv1
>1388	Argument	c1 -> R
>1389	PtrMemberAccess	c1 -> R
>1390	Identifier	R
>1391	Identifier	c1
>1392	Argument	3
>1393	PrimaryExpression	3
>1394	Callee	matrix_invert
>1395	Identifier	matrix_invert
>1396	IdentifierDeclStatement	 
>1397	IdentifierDecl	Rinv1 [ 9 ]
>1398	PrimaryExpression	9
>1399	Identifier	Rinv1
>1400	IdentifierDeclType	double [ 9 ]
>1401	IdentifierDeclStatement	 
>1402	IdentifierDecl	center1 [ 3 ]
>1403	PrimaryExpression	3
>1404	Identifier	center1
>1405	IdentifierDeclType	double [ 3 ]
>1427	FunctionDef	InitializeCameraParams (const ImageData & data , camera_params_t & camera)
>1428	ParameterList	const ImageData & data , camera_params_t & camera
>1429	Parameter	 
>1430	Identifier	camera
>1431	ParameterType	camera_params_t &
>1432	Parameter	 
>1433	Identifier	data
>1434	ParameterType	const ImageData &
>1435	ReturnType	void
>1436	CompoundStatement	 
>1437	IfStatement	if ( data . m_known_intrinsics )
>1438	ElseStatement	else
>1439	CompoundStatement	 
>1440	ExpressionStatement	 
>1441	AssignmentExpr	camera . known_intrinsics = 0
>1442	PrimaryExpression	0
>1443	MemberAccess	camera . known_intrinsics
>1444	Identifier	known_intrinsics
>1445	Identifier	camera
>1446	CompoundStatement	 
>1447	ExpressionStatement	 
>1448	CallExpression	memcpy ( camera . k_known , data . m_k , 5 * sizeof ( double ) )
>1449	ArgumentList	camera . k_known
>1450	Argument	5 * sizeof ( double )
>1451	MultiplicativeExpression	5 * sizeof ( double )
>1452	SizeofExpr	sizeof ( double )
>1453	SizeofOperand	double
>1454	Sizeof	sizeof
>1455	PrimaryExpression	5
>1456	Argument	data . m_k
>1457	MemberAccess	data . m_k
>1458	Identifier	m_k
>1459	Identifier	data
>1460	Argument	camera . k_known
>1461	MemberAccess	camera . k_known
>1462	Identifier	k_known
>1463	Identifier	camera
>1464	Callee	memcpy
>1465	Identifier	memcpy
>1466	ExpressionStatement	 
>1467	CallExpression	memcpy ( camera . K_known , data . m_K , 9 * sizeof ( double ) )
>1468	ArgumentList	camera . K_known
>1469	Argument	9 * sizeof ( double )
>1470	MultiplicativeExpression	9 * sizeof ( double )
>1471	SizeofExpr	sizeof ( double )
>1472	SizeofOperand	double
>1473	Sizeof	sizeof
>1474	PrimaryExpression	9
>1475	Argument	data . m_K
>1476	MemberAccess	data . m_K
>1477	Identifier	m_K
>1478	Identifier	data
>1479	Argument	camera . K_known
>1480	MemberAccess	camera . K_known
>1481	Identifier	K_known
>1482	Identifier	camera
>1483	Callee	memcpy
>1484	Identifier	memcpy
>1485	ExpressionStatement	 
>1486	AssignmentExpr	camera . known_intrinsics = 1
>1487	PrimaryExpression	1
>1488	MemberAccess	camera . known_intrinsics
>1489	Identifier	known_intrinsics
>1490	Identifier	camera
>1491	Condition	 
>1492	MemberAccess	data . m_known_intrinsics
>1493	Identifier	m_known_intrinsics
>1494	Identifier	data
>1495	ExpressionStatement	 
>1496	AssignmentExpr	camera . f_focal = data . m_fFocal
>1497	MemberAccess	data . m_fFocal
>1498	Identifier	m_fFocal
>1499	Identifier	data
>1500	MemberAccess	camera . f_focal
>1501	Identifier	f_focal
>1502	Identifier	camera
>1503	ExpressionStatement	 
>1504	AssignmentExpr	camera . f_angle = data . m_fAngle
>1505	MemberAccess	data . m_fAngle
>1506	Identifier	m_fAngle
>1507	Identifier	data
>1508	MemberAccess	camera . f_angle
>1509	Identifier	f_angle
>1510	Identifier	camera
>1511	ExpressionStatement	 
>1512	AssignmentExpr	camera . f_rad = data . m_fRad
>1513	MemberAccess	data . m_fRad
>1514	Identifier	m_fRad
>1515	Identifier	data
>1516	MemberAccess	camera . f_rad
>1517	Identifier	f_rad
>1518	Identifier	camera
>1519	ExpressionStatement	 
>1520	AssignmentExpr	camera . f_cy = data . m_fCy
>1521	MemberAccess	data . m_fCy
>1522	Identifier	m_fCy
>1523	Identifier	data
>1524	MemberAccess	camera . f_cy
>1525	Identifier	f_cy
>1526	Identifier	camera
>1527	ExpressionStatement	 
>1528	AssignmentExpr	camera . f_cx = data . m_fCx
>1529	MemberAccess	data . m_fCx
>1530	Identifier	m_fCx
>1531	Identifier	data
>1532	MemberAccess	camera . f_cx
>1533	Identifier	f_cx
>1534	Identifier	camera
>1535	ExpressionStatement	 
>1536	AssignmentExpr	camera . fisheye = data . m_fisheye
>1537	MemberAccess	data . m_fisheye
>1538	Identifier	m_fisheye
>1539	Identifier	data
>1540	MemberAccess	camera . fisheye
>1541	Identifier	fisheye
>1542	Identifier	camera
>1543	ForStatement	for ( int i = 0 ; i < NUM_CAMERA_PARAMS ; i ++ )
>1544	CompoundStatement	 
>1545	ExpressionStatement	 
>1546	AssignmentExpr	camera . weights [ i ] = 0.0
>1547	PrimaryExpression	0.0
>1548	ArrayIndexing	camera . weights [ i ]
>1549	Identifier	i
>1550	MemberAccess	camera . weights
>1551	Identifier	weights
>1552	Identifier	camera
>1553	ExpressionStatement	 
>1554	AssignmentExpr	camera . constraints [ i ] = 0.0
>1555	PrimaryExpression	0.0
>1556	ArrayIndexing	camera . constraints [ i ]
>1557	Identifier	i
>1558	MemberAccess	camera . constraints
>1559	Identifier	constraints
>1560	Identifier	camera
>1561	ExpressionStatement	 
>1562	AssignmentExpr	camera . constrained [ i ] = 0
>1563	PrimaryExpression	0
>1564	ArrayIndexing	camera . constrained [ i ]
>1565	Identifier	i
>1566	MemberAccess	camera . constrained
>1567	Identifier	constrained
>1568	Identifier	camera
>1569	IncDecOp	 
>1570	IncDec	++
>1571	Identifier	i
>1572	Condition	 
>1573	RelationalExpression	i < NUM_CAMERA_PARAMS
>1574	Identifier	NUM_CAMERA_PARAMS
>1575	Identifier	i
>1576	ForInit	 
>1577	IdentifierDeclStatement	int i = 0 ;
>1578	IdentifierDecl	i = 0
>1579	AssignmentExpr	i = 0
>1580	PrimaryExpression	0
>1581	Identifier	i
>1582	Identifier	i
>1583	IdentifierDeclType	int
>1584	ExpressionStatement	 
>1585	AssignmentExpr	camera . k_scale = 1.0
>1586	PrimaryExpression	1.0
>1587	MemberAccess	camera . k_scale
>1588	Identifier	k_scale
>1589	Identifier	camera
>1590	ExpressionStatement	 
>1591	AssignmentExpr	camera . f_scale = 1.0
>1592	PrimaryExpression	1.0
>1593	MemberAccess	camera . f_scale
>1594	Identifier	f_scale
>1595	Identifier	camera
>1596	ExpressionStatement	 
>1597	AssignmentExpr	camera . k_inv [ 1 ] = 1.0
>1598	PrimaryExpression	1.0
>1599	ArrayIndexing	camera . k_inv [ 1 ]
>1600	PrimaryExpression	1
>1601	MemberAccess	camera . k_inv
>1602	Identifier	k_inv
>1603	Identifier	camera
>1604	ExpressionStatement	 
>1605	AssignmentExpr	camera . k_inv [ 4 ] = camera . k_inv [ 5 ] = 0.0
>1606	AssignmentExpr	camera . k_inv [ 5 ] = 0.0
>1607	PrimaryExpression	0.0
>1608	ArrayIndexing	camera . k_inv [ 5 ]
>1609	PrimaryExpression	5
>1610	MemberAccess	camera . k_inv
>1611	Identifier	k_inv
>1612	Identifier	camera
>1613	ArrayIndexing	camera . k_inv [ 4 ]
>1614	PrimaryExpression	4
>1615	MemberAccess	camera . k_inv
>1616	Identifier	k_inv
>1617	Identifier	camera
>1618	ExpressionStatement	 
>1619	AssignmentExpr	camera . k_inv [ 0 ] = camera . k_inv [ 2 ] = camera . k_inv [ 3 ] = 0.0
>1620	AssignmentExpr	camera . k_inv [ 2 ] = camera . k_inv [ 3 ] = 0.0
>1621	AssignmentExpr	camera . k_inv [ 3 ] = 0.0
>1622	PrimaryExpression	0.0
>1623	ArrayIndexing	camera . k_inv [ 3 ]
>1624	PrimaryExpression	3
>1625	MemberAccess	camera . k_inv
>1626	Identifier	k_inv
>1627	Identifier	camera
>1628	ArrayIndexing	camera . k_inv [ 2 ]
>1629	PrimaryExpression	2
>1630	MemberAccess	camera . k_inv
>1631	Identifier	k_inv
>1632	Identifier	camera
>1633	ArrayIndexing	camera . k_inv [ 0 ]
>1634	PrimaryExpression	0
>1635	MemberAccess	camera . k_inv
>1636	Identifier	k_inv
>1637	Identifier	camera
>1638	ExpressionStatement	 
>1639	AssignmentExpr	camera . k [ 0 ] = camera . k [ 1 ] = 0.0
>1640	AssignmentExpr	camera . k [ 1 ] = 0.0
>1641	PrimaryExpression	0.0
>1642	ArrayIndexing	camera . k [ 1 ]
>1643	PrimaryExpression	1
>1644	MemberAccess	camera . k
>1645	Identifier	k
>1646	Identifier	camera
>1647	ArrayIndexing	camera . k [ 0 ]
>1648	PrimaryExpression	0
>1649	MemberAccess	camera . k
>1650	Identifier	k
>1651	Identifier	camera
>1652	ExpressionStatement	 
>1653	AssignmentExpr	camera . f = 0.0
>1654	PrimaryExpression	0.0
>1655	MemberAccess	camera . f
>1656	Identifier	f
>1657	Identifier	camera
>1658	ExpressionStatement	 
>1659	AssignmentExpr	camera . t [ 0 ] = camera . t [ 1 ] = camera . t [ 2 ] = 0.0
>1660	AssignmentExpr	camera . t [ 1 ] = camera . t [ 2 ] = 0.0
>1661	AssignmentExpr	camera . t [ 2 ] = 0.0
>1662	PrimaryExpression	0.0
>1663	ArrayIndexing	camera . t [ 2 ]
>1664	PrimaryExpression	2
>1665	MemberAccess	camera . t
>1666	Identifier	t
>1667	Identifier	camera
>1668	ArrayIndexing	camera . t [ 1 ]
>1669	PrimaryExpression	1
>1670	MemberAccess	camera . t
>1671	Identifier	t
>1672	Identifier	camera
>1673	ArrayIndexing	camera . t [ 0 ]
>1674	PrimaryExpression	0
>1675	MemberAccess	camera . t
>1676	Identifier	t
>1677	Identifier	camera
>1678	ExpressionStatement	 
>1679	CallExpression	matrix_ident ( 3 , camera . R )
>1680	ArgumentList	3
>1681	Argument	camera . R
>1682	MemberAccess	camera . R
>1683	Identifier	R
>1684	Identifier	camera
>1685	Argument	3
>1686	PrimaryExpression	3
>1687	Callee	matrix_ident
>1688	Identifier	matrix_ident
>1732	FunctionDef	BundlerApp 
>1733	ParameterList	const std 
>1734	Parameter	 
>1735	Identifier	added_order
>1736	ParameterType	int *
>1737	Parameter	 
>1738	Identifier	pt_views
>1739	ParameterType	const std 
>1740	ReturnType	void
>1741	CompoundStatement	 
>1742	ExpressionStatement	 
>1743	CallExpression	printf ( \"[CheckPointKeyConsistency] There were %d errors\n\" , errors )
>1744	ArgumentList	\"[CheckPointKeyConsistency] There were %d errors\n\"
>1745	Argument	errors
>1746	Identifier	errors
>1747	Argument	\"[CheckPointKeyConsistency] There were %d errors\n\"
>1748	PrimaryExpression	\"[CheckPointKeyConsistency] There were %d errors\n\"
>1749	Callee	printf
>1750	Identifier	printf
>1751	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>1752	CompoundStatement	 
>1753	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>1754	CompoundStatement	 
>1755	IfStatement	if ( m_image_data [ img ] . m_keys [ key ] . m_extra != i )
>1756	CompoundStatement	 
>1757	ExpressionStatement	 
>1758	IncDecOp	errors ++
>1759	IncDec	++
>1760	Identifier	errors
>1761	ExpressionStatement	 
>1762	Statement	 
>1763	Statement	 
>1764	Statement	 
>1765	Statement	 
>1766	Statement	 
>1767	Statement	 
>1768	Statement	 
>1769	Statement	 
>1770	Statement	 
>1771	Statement	 
>1772	Statement	 
>1773	Statement	 
>1774	Statement	 
>1775	Statement	 
>1776	Statement	 
>1777	Statement	 
>1778	Statement	 
>1779	Statement	 
>1780	Statement	 
>1781	Statement	 
>1782	Statement	 
>1783	Statement	 
>1784	Statement	 
>1785	Condition	 
>1786	EqualityExpression	m_image_data [ img ] . m_keys [ key ] . m_extra != i
>1787	Identifier	i
>1788	MemberAccess	m_image_data [ img ] . m_keys [ key ] . m_extra
>1789	Identifier	m_extra
>1790	ArrayIndexing	m_image_data [ img ] . m_keys [ key ]
>1791	Identifier	key
>1792	MemberAccess	m_image_data [ img ] . m_keys
>1793	Identifier	m_keys
>1794	ArrayIndexing	m_image_data [ img ]
>1795	Identifier	img
>1796	Identifier	m_image_data
>1797	IdentifierDeclStatement	 
>1798	IdentifierDecl	key = ik . second
>1799	AssignmentExpr	key = ik . second
>1800	MemberAccess	ik . second
>1801	Identifier	second
>1802	Identifier	ik
>1803	Identifier	key
>1804	Identifier	key
>1805	IdentifierDeclType	int
>1806	IdentifierDeclStatement	 
>1807	IdentifierDecl	img = added_order [ ik . first ]
>1808	AssignmentExpr	img = added_order [ ik . first ]
>1809	ArrayIndexing	added_order [ ik . first ]
>1810	MemberAccess	ik . first
>1811	Identifier	first
>1812	Identifier	ik
>1813	Identifier	added_order
>1814	Identifier	img
>1815	Identifier	img
>1816	IdentifierDeclType	int
>1817	IdentifierDeclStatement	 
>1818	IdentifierDecl	ik = pt_views [ i ] [ j ]
>1819	AssignmentExpr	ik = pt_views [ i ] [ j ]
>1820	ArrayIndexing	pt_views [ i ] [ j ]
>1821	Identifier	j
>1822	ArrayIndexing	pt_views [ i ]
>1823	Identifier	i
>1824	Identifier	pt_views
>1825	Identifier	ik
>1826	Identifier	ik
>1827	IdentifierDeclType	ImageKey
>1828	IncDecOp	 
>1829	IncDec	++
>1830	Identifier	j
>1831	Condition	 
>1832	RelationalExpression	j < num_views
>1833	Identifier	num_views
>1834	Identifier	j
>1835	ForInit	 
>1836	IdentifierDeclStatement	int j = 0 ;
>1837	IdentifierDecl	j = 0
>1838	AssignmentExpr	j = 0
>1839	PrimaryExpression	0
>1840	Identifier	j
>1841	Identifier	j
>1842	IdentifierDeclType	int
>1843	IdentifierDeclStatement	 
>1844	IdentifierDecl	num_views = pt_views [ i ] . size ( )
>1845	AssignmentExpr	num_views = pt_views [ i ] . size ( )
>1846	CallExpression	pt_views [ i ] . size ( )
>1847	ArgumentList	 
>1848	Callee	pt_views [ i ] . size
>1849	MemberAccess	pt_views [ i ] . size
>1850	Identifier	size
>1851	ArrayIndexing	pt_views [ i ]
>1852	Identifier	i
>1853	Identifier	pt_views
>1854	Identifier	num_views
>1855	Identifier	num_views
>1856	IdentifierDeclType	int
>1857	IncDecOp	 
>1858	IncDec	++
>1859	Identifier	i
>1860	Condition	 
>1861	RelationalExpression	i < num_points
>1862	Identifier	num_points
>1863	Identifier	i
>1864	ForInit	 
>1865	IdentifierDeclStatement	int i = 0 ;
>1866	IdentifierDecl	i = 0
>1867	AssignmentExpr	i = 0
>1868	PrimaryExpression	0
>1869	Identifier	i
>1870	Identifier	i
>1871	IdentifierDeclType	int
>1872	IdentifierDeclStatement	 
>1873	IdentifierDecl	errors = 0
>1874	AssignmentExpr	errors = 0
>1875	PrimaryExpression	0
>1876	Identifier	errors
>1877	Identifier	errors
>1878	IdentifierDeclType	int
>1879	IdentifierDeclStatement	 
>1880	IdentifierDecl	num_points = ( int ) pt_views . size ( )
>1881	AssignmentExpr	num_points = ( int ) pt_views . size ( )
>1882	CastExpression	( int ) pt_views . size ( )
>1883	CallExpression	pt_views . size ( )
>1884	ArgumentList	 
>1885	Callee	pt_views . size
>1886	MemberAccess	pt_views . size
>1887	Identifier	size
>1888	Identifier	pt_views
>1889	CastTarget	int
>1890	Identifier	num_points
>1891	Identifier	num_points
>1892	IdentifierDeclType	int
>1927	FunctionDef	BundlerApp 
>1928	ParameterList	double * S , double * U , double * V , double * W
>1929	Parameter	 
>1930	Identifier	W
>1931	ParameterType	double *
>1932	Parameter	 
>1933	Identifier	V
>1934	ParameterType	double *
>1935	Parameter	 
>1936	Identifier	U
>1937	ParameterType	double *
>1938	Parameter	 
>1939	Identifier	S
>1940	ParameterType	double *
>1941	ReturnType	void
>1942	CompoundStatement	 
>1943	ExpressionStatement	 
>1944	Identifier	added_order_inv
>1945	Statement	 
>1946	Statement	 
>1947	Statement	 
>1948	ExpressionStatement	 
>1949	Identifier	added_order
>1950	Statement	 
>1951	Statement	 
>1952	Statement	 
>1953	ExpressionStatement	 
>1954	Identifier	init_pts
>1955	Statement	 
>1956	Statement	 
>1957	Statement	 
>1958	ExpressionStatement	 
>1959	Identifier	cameras
>1960	Statement	 
>1961	Statement	 
>1962	Statement	 
>1963	IfStatement	if ( m_bundle_output_file != NULL )
>1964	CompoundStatement	 
>1965	ExpressionStatement	 
>1966	CallExpression	DumpOutputFile ( m_output_directory , m_bundle_output_file , num_images , num_init_cams , num_pts , added_order , \
>1967	ArgumentList	m_output_directory
>1968	Argument	pt_views
>1969	Identifier	pt_views
>1970	Argument	colors
>1971	Identifier	colors
>1972	Argument	init_pts
>1973	Identifier	init_pts
>1974	Argument	cameras
>1975	Identifier	cameras
>1976	Argument	added_order
>1977	Identifier	added_order
>1978	Argument	num_pts
>1979	Identifier	num_pts
>1980	Argument	num_init_cams
>1981	Identifier	num_init_cams
>1982	Argument	num_images
>1983	Identifier	num_images
>1984	Argument	m_bundle_output_file
>1985	Identifier	m_bundle_output_file
>1986	Argument	m_output_directory
>1987	Identifier	m_output_directory
>1988	Callee	DumpOutputFile
>1989	Identifier	DumpOutputFile
>1990	Condition	 
>1991	EqualityExpression	m_bundle_output_file != NULL
>1992	Identifier	NULL
>1993	Identifier	m_bundle_output_file
>1994	ExpressionStatement	 
>1995	CallExpression	DumpPointsToPly ( m_output_directory , \"points_readjusted.ply\" , num_pts , num_init_cams , init_pts , colors , cameras )
>1996	ArgumentList	m_output_directory
>1997	Argument	cameras
>1998	Identifier	cameras
>1999	Argument	colors
>2000	Identifier	colors
>2001	Argument	init_pts
>2002	Identifier	init_pts
>2003	Argument	num_init_cams
>2004	Identifier	num_init_cams
>2005	Argument	num_pts
>2006	Identifier	num_pts
>2007	Argument	\"points_readjusted.ply\"
>2008	PrimaryExpression	\"points_readjusted.ply\"
>2009	Argument	m_output_directory
>2010	Identifier	m_output_directory
>2011	Callee	DumpPointsToPly
>2012	Identifier	DumpPointsToPly
>2013	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>2014	CompoundStatement	 
>2015	ExpressionStatement	 
>2016	CallExpression	m_point_data . push_back ( pdata )
>2017	ArgumentList	pdata
>2018	Argument	pdata
>2019	Identifier	pdata
>2020	Callee	m_point_data . push_back
>2021	MemberAccess	m_point_data . push_back
>2022	Identifier	push_back
>2023	Identifier	m_point_data
>2024	ForStatement	for ( int j = 0 ; j < ( int ) pt_views [ i ] . size ( ) ; j ++ )
>2025	CompoundStatement	 
>2026	ExpressionStatement	 
>2027	CallExpression	pdata . m_views . push_back ( ImageKey ( vnew , pt_views [ i ] [ j ] . second ) )
>2028	ArgumentList	ImageKey ( vnew , pt_views [ i ] [ j ] . second )
>2029	Argument	ImageKey ( vnew , pt_views [ i ] [ j ] . second )
>2030	CallExpression	ImageKey ( vnew , pt_views [ i ] [ j ] . second )
>2031	ArgumentList	vnew
>2032	Argument	pt_views [ i ] [ j ] . second
>2033	MemberAccess	pt_views [ i ] [ j ] . second
>2034	Identifier	second
>2035	ArrayIndexing	pt_views [ i ] [ j ]
>2036	Identifier	j
>2037	ArrayIndexing	pt_views [ i ]
>2038	Identifier	i
>2039	Identifier	pt_views
>2040	Argument	vnew
>2041	Identifier	vnew
>2042	Callee	ImageKey
>2043	Identifier	ImageKey
>2044	Callee	pdata . m_views . push_back
>2045	MemberAccess	pdata . m_views . push_back
>2046	Identifier	push_back
>2047	MemberAccess	pdata . m_views
>2048	Identifier	m_views
>2049	Identifier	pdata
>2050	IdentifierDeclStatement	 
>2051	IdentifierDecl	vnew = added_order [ v ]
>2052	AssignmentExpr	vnew = added_order [ v ]
>2053	ArrayIndexing	added_order [ v ]
>2054	Identifier	v
>2055	Identifier	added_order
>2056	Identifier	vnew
>2057	Identifier	vnew
>2058	IdentifierDeclType	int
>2059	IdentifierDeclStatement	 
>2060	IdentifierDecl	v = pt_views [ i ] [ j ] . first
>2061	AssignmentExpr	v = pt_views [ i ] [ j ] . first
>2062	MemberAccess	pt_views [ i ] [ j ] . first
>2063	Identifier	first
>2064	ArrayIndexing	pt_views [ i ] [ j ]
>2065	Identifier	j
>2066	ArrayIndexing	pt_views [ i ]
>2067	Identifier	i
>2068	Identifier	pt_views
>2069	Identifier	v
>2070	Identifier	v
>2071	IdentifierDeclType	int
>2072	IncDecOp	 
>2073	IncDec	++
>2074	Identifier	j
>2075	Condition	 
>2076	RelationalExpression	j < ( int ) pt_views [ i ] . size ( )
>2077	CastExpression	( int ) pt_views [ i ] . size ( )
>2078	CallExpression	pt_views [ i ] . size ( )
>2079	ArgumentList	 
>2080	Callee	pt_views [ i ] . size
>2081	MemberAccess	pt_views [ i ] . size
>2082	Identifier	size
>2083	ArrayIndexing	pt_views [ i ]
>2084	Identifier	i
>2085	Identifier	pt_views
>2086	CastTarget	int
>2087	Identifier	j
>2088	ForInit	 
>2089	IdentifierDeclStatement	int j = 0 ;
>2090	IdentifierDecl	j = 0
>2091	AssignmentExpr	j = 0
>2092	PrimaryExpression	0
>2093	Identifier	j
>2094	Identifier	j
>2095	IdentifierDeclType	int
>2096	ExpressionStatement	 
>2097	AssignmentExpr	pdata . m_color [ 2 ] = ( float ) Vz ( colors [ i ] )
>2098	CastExpression	( float ) Vz ( colors [ i ] )
>2099	CallExpression	Vz ( colors [ i ] )
>2100	ArgumentList	colors [ i ]
>2101	Argument	colors [ i ]
>2102	ArrayIndexing	colors [ i ]
>2103	Identifier	i
>2104	Identifier	colors
>2105	Callee	Vz
>2106	Identifier	Vz
>2107	CastTarget	float
>2108	ArrayIndexing	pdata . m_color [ 2 ]
>2109	PrimaryExpression	2
>2110	MemberAccess	pdata . m_color
>2111	Identifier	m_color
>2112	Identifier	pdata
>2113	ExpressionStatement	 
>2114	AssignmentExpr	pdata . m_color [ 1 ] = ( float ) Vy ( colors [ i ] )
>2115	CastExpression	( float ) Vy ( colors [ i ] )
>2116	CallExpression	Vy ( colors [ i ] )
>2117	ArgumentList	colors [ i ]
>2118	Argument	colors [ i ]
>2119	ArrayIndexing	colors [ i ]
>2120	Identifier	i
>2121	Identifier	colors
>2122	Callee	Vy
>2123	Identifier	Vy
>2124	CastTarget	float
>2125	ArrayIndexing	pdata . m_color [ 1 ]
>2126	PrimaryExpression	1
>2127	MemberAccess	pdata . m_color
>2128	Identifier	m_color
>2129	Identifier	pdata
>2130	ExpressionStatement	 
>2131	AssignmentExpr	pdata . m_color [ 0 ] = ( float ) Vx ( colors [ i ] )
>2132	CastExpression	( float ) Vx ( colors [ i ] )
>2133	CallExpression	Vx ( colors [ i ] )
>2134	ArgumentList	colors [ i ]
>2135	Argument	colors [ i ]
>2136	ArrayIndexing	colors [ i ]
>2137	Identifier	i
>2138	Identifier	colors
>2139	Callee	Vx
>2140	Identifier	Vx
>2141	CastTarget	float
>2142	ArrayIndexing	pdata . m_color [ 0 ]
>2143	PrimaryExpression	0
>2144	MemberAccess	pdata . m_color
>2145	Identifier	m_color
>2146	Identifier	pdata
>2147	ExpressionStatement	 
>2148	AssignmentExpr	pdata . m_pos [ 2 ] = Vz ( init_pts [ i ] )
>2149	CallExpression	Vz ( init_pts [ i ] )
>2150	ArgumentList	init_pts [ i ]
>2151	Argument	init_pts [ i ]
>2152	ArrayIndexing	init_pts [ i ]
>2153	Identifier	i
>2154	Identifier	init_pts
>2155	Callee	Vz
>2156	Identifier	Vz
>2157	ArrayIndexing	pdata . m_pos [ 2 ]
>2158	PrimaryExpression	2
>2159	MemberAccess	pdata . m_pos
>2160	Identifier	m_pos
>2161	Identifier	pdata
>2162	ExpressionStatement	 
>2163	AssignmentExpr	pdata . m_pos [ 1 ] = Vy ( init_pts [ i ] )
>2164	CallExpression	Vy ( init_pts [ i ] )
>2165	ArgumentList	init_pts [ i ]
>2166	Argument	init_pts [ i ]
>2167	ArrayIndexing	init_pts [ i ]
>2168	Identifier	i
>2169	Identifier	init_pts
>2170	Callee	Vy
>2171	Identifier	Vy
>2172	ArrayIndexing	pdata . m_pos [ 1 ]
>2173	PrimaryExpression	1
>2174	MemberAccess	pdata . m_pos
>2175	Identifier	m_pos
>2176	Identifier	pdata
>2177	ExpressionStatement	 
>2178	AssignmentExpr	pdata . m_pos [ 0 ] = Vx ( init_pts [ i ] )
>2179	CallExpression	Vx ( init_pts [ i ] )
>2180	ArgumentList	init_pts [ i ]
>2181	Argument	init_pts [ i ]
>2182	ArrayIndexing	init_pts [ i ]
>2183	Identifier	i
>2184	Identifier	init_pts
>2185	Callee	Vx
>2186	Identifier	Vx
>2187	ArrayIndexing	pdata . m_pos [ 0 ]
>2188	PrimaryExpression	0
>2189	MemberAccess	pdata . m_pos
>2190	Identifier	m_pos
>2191	Identifier	pdata
>2192	IdentifierDeclStatement	 
>2193	IdentifierDecl	pdata
>2194	Identifier	pdata
>2195	IdentifierDeclType	PointData
>2196	IfStatement	if ( ( int ) pt_views [ i ] . size ( ) == 0 )
>2197	ContinueStatement	 
>2198	Condition	 
>2199	EqualityExpression	( int ) pt_views [ i ] . size ( ) == 0
>2200	PrimaryExpression	0
>2201	CastExpression	( int ) pt_views [ i ] . size ( )
>2202	CallExpression	pt_views [ i ] . size ( )
>2203	ArgumentList	 
>2204	Callee	pt_views [ i ] . size
>2205	MemberAccess	pt_views [ i ] . size
>2206	Identifier	size
>2207	ArrayIndexing	pt_views [ i ]
>2208	Identifier	i
>2209	Identifier	pt_views
>2210	CastTarget	int
>2211	IncDecOp	 
>2212	IncDec	++
>2213	Identifier	i
>2214	Condition	 
>2215	RelationalExpression	i < num_pts
>2216	Identifier	num_pts
>2217	Identifier	i
>2218	ForInit	 
>2219	IdentifierDeclStatement	int i = 0 ;
>2220	IdentifierDecl	i = 0
>2221	AssignmentExpr	i = 0
>2222	PrimaryExpression	0
>2223	Identifier	i
>2224	Identifier	i
>2225	IdentifierDeclType	int
>2226	ExpressionStatement	 
>2227	CallExpression	m_point_data . clear ( )
>2228	ArgumentList	 
>2229	Callee	m_point_data . clear
>2230	MemberAccess	m_point_data . clear
>2231	Identifier	clear
>2232	Identifier	m_point_data
>2233	ExpressionStatement	 
>2234	CallExpression	fflush ( stdout )
>2235	ArgumentList	stdout
>2236	Argument	stdout
>2237	Identifier	stdout
>2238	Callee	fflush
>2239	Identifier	fflush
>2240	ForStatement	for ( int i = 0 ; i < num_init_cams ; i ++ )
>2241	CompoundStatement	 
>2242	ExpressionStatement	 
>2243	CallExpression	m_image_data [ img ] . m_camera . Finalize ( )
>2244	ArgumentList	 
>2245	Callee	m_image_data [ img ] . m_camera . Finalize
>2246	MemberAccess	m_image_data [ img ] . m_camera . Finalize
>2247	Identifier	Finalize
>2248	MemberAccess	m_image_data [ img ] . m_camera
>2249	Identifier	m_camera
>2250	ArrayIndexing	m_image_data [ img ]
>2251	Identifier	img
>2252	Identifier	m_image_data
>2253	ExpressionStatement	 
>2254	CallExpression	printf ( \"  [%d]
>2255	ArgumentList	\"  [%d]
>2256	Argument	cameras [ i ] . f
>2257	MemberAccess	cameras [ i ] . f
>2258	Identifier	f
>2259	ArrayIndexing	cameras [ i ]
>2260	Identifier	i
>2261	Identifier	cameras
>2262	Argument	img
>2263	Identifier	img
>2264	Argument	\"  [%d]
>2265	PrimaryExpression	\"  [%d]
>2266	Callee	printf
>2267	Identifier	printf
>2268	ExpressionStatement	 
>2269	AssignmentExpr	m_image_data [ img ] . m_camera . m_focal = cameras [ i ] . f
>2270	MemberAccess	cameras [ i ] . f
>2271	Identifier	f
>2272	ArrayIndexing	cameras [ i ]
>2273	Identifier	i
>2274	Identifier	cameras
>2275	MemberAccess	m_image_data [ img ] . m_camera . m_focal
>2276	Identifier	m_focal
>2277	MemberAccess	m_image_data [ img ] . m_camera
>2278	Identifier	m_camera
>2279	ArrayIndexing	m_image_data [ img ]
>2280	Identifier	img
>2281	Identifier	m_image_data
>2282	ExpressionStatement	 
>2283	CallExpression	matrix_scale ( 3 , 1 , m_image_data [ img ] . m_camera . m_t , - 1.0 , m_image_data [ img ] . m_camera . m_t )
>2284	ArgumentList	3
>2285	Argument	m_image_data [ img ] . m_camera . m_t
>2286	MemberAccess	m_image_data [ img ] . m_camera . m_t
>2287	Identifier	m_t
>2288	MemberAccess	m_image_data [ img ] . m_camera
>2289	Identifier	m_camera
>2290	ArrayIndexing	m_image_data [ img ]
>2291	Identifier	img
>2292	Identifier	m_image_data
>2293	Argument	- 1.0
>2294	UnaryOp	- 1.0
>2295	PrimaryExpression	1.0
>2296	UnaryOperator	-
>2297	Argument	m_image_data [ img ] . m_camera . m_t
>2298	MemberAccess	m_image_data [ img ] . m_camera . m_t
>2299	Identifier	m_t
>2300	MemberAccess	m_image_data [ img ] . m_camera
>2301	Identifier	m_camera
>2302	ArrayIndexing	m_image_data [ img ]
>2303	Identifier	img
>2304	Identifier	m_image_data
>2305	Argument	1
>2306	PrimaryExpression	1
>2307	Argument	3
>2308	PrimaryExpression	3
>2309	Callee	matrix_scale
>2310	Identifier	matrix_scale
>2311	ExpressionStatement	 
>2312	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cameras [ i ] . R , cameras [ i ] . t , m_image_data [ img ] . m_camera . m_t )
>2313	ArgumentList	3
>2314	Argument	m_image_data [ img ] . m_camera . m_t
>2315	MemberAccess	m_image_data [ img ] . m_camera . m_t
>2316	Identifier	m_t
>2317	MemberAccess	m_image_data [ img ] . m_camera
>2318	Identifier	m_camera
>2319	ArrayIndexing	m_image_data [ img ]
>2320	Identifier	img
>2321	Identifier	m_image_data
>2322	Argument	cameras [ i ] . t
>2323	MemberAccess	cameras [ i ] . t
>2324	Identifier	t
>2325	ArrayIndexing	cameras [ i ]
>2326	Identifier	i
>2327	Identifier	cameras
>2328	Argument	cameras [ i ] . R
>2329	MemberAccess	cameras [ i ] . R
>2330	Identifier	R
>2331	ArrayIndexing	cameras [ i ]
>2332	Identifier	i
>2333	Identifier	cameras
>2334	Argument	1
>2335	PrimaryExpression	1
>2336	Argument	3
>2337	PrimaryExpression	3
>2338	Argument	3
>2339	PrimaryExpression	3
>2340	Argument	3
>2341	PrimaryExpression	3
>2342	Callee	matrix_product
>2343	Identifier	matrix_product
>2344	ExpressionStatement	 
>2345	CallExpression	memcpy ( m_image_data [ img ] . m_camera . m_R , cameras [ i ] . R , 9 * sizeof ( double ) )
>2346	ArgumentList	m_image_data [ img ] . m_camera . m_R
>2347	Argument	9 * sizeof ( double )
>2348	MultiplicativeExpression	9 * sizeof ( double )
>2349	SizeofExpr	sizeof ( double )
>2350	SizeofOperand	double
>2351	Sizeof	sizeof
>2352	PrimaryExpression	9
>2353	Argument	cameras [ i ] . R
>2354	MemberAccess	cameras [ i ] . R
>2355	Identifier	R
>2356	ArrayIndexing	cameras [ i ]
>2357	Identifier	i
>2358	Identifier	cameras
>2359	Argument	m_image_data [ img ] . m_camera . m_R
>2360	MemberAccess	m_image_data [ img ] . m_camera . m_R
>2361	Identifier	m_R
>2362	MemberAccess	m_image_data [ img ] . m_camera
>2363	Identifier	m_camera
>2364	ArrayIndexing	m_image_data [ img ]
>2365	Identifier	img
>2366	Identifier	m_image_data
>2367	Callee	memcpy
>2368	Identifier	memcpy
>2369	ExpressionStatement	 
>2370	AssignmentExpr	m_image_data [ img ] . m_camera . m_adjusted = true
>2371	Identifier	true
>2372	MemberAccess	m_image_data [ img ] . m_camera . m_adjusted
>2373	Identifier	m_adjusted
>2374	MemberAccess	m_image_data [ img ] . m_camera
>2375	Identifier	m_camera
>2376	ArrayIndexing	m_image_data [ img ]
>2377	Identifier	img
>2378	Identifier	m_image_data
>2379	IdentifierDeclStatement	 
>2380	IdentifierDecl	img = added_order [ i ]
>2381	AssignmentExpr	img = added_order [ i ]
>2382	ArrayIndexing	added_order [ i ]
>2383	Identifier	i
>2384	Identifier	added_order
>2385	Identifier	img
>2386	Identifier	img
>2387	IdentifierDeclType	int
>2388	IncDecOp	 
>2389	IncDec	++
>2390	Identifier	i
>2391	Condition	 
>2392	RelationalExpression	i < num_init_cams
>2393	Identifier	num_init_cams
>2394	Identifier	i
>2395	ForInit	 
>2396	IdentifierDeclStatement	int i = 0 ;
>2397	IdentifierDecl	i = 0
>2398	AssignmentExpr	i = 0
>2399	PrimaryExpression	0
>2400	Identifier	i
>2401	Identifier	i
>2402	IdentifierDeclType	int
>2403	ExpressionStatement	 
>2404	CallExpression	printf ( \"Focal lengths
>2405	ArgumentList	\"Focal lengths
>2406	Argument	\"Focal lengths
>2407	PrimaryExpression	\"Focal lengths
>2408	Callee	printf
>2409	Identifier	printf
>2410	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2411	CompoundStatement	 
>2412	ExpressionStatement	 
>2413	AssignmentExpr	m_image_data [ i ] . m_camera . m_adjusted = false
>2414	Identifier	false
>2415	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>2416	Identifier	m_adjusted
>2417	MemberAccess	m_image_data [ i ] . m_camera
>2418	Identifier	m_camera
>2419	ArrayIndexing	m_image_data [ i ]
>2420	Identifier	i
>2421	Identifier	m_image_data
>2422	IncDecOp	 
>2423	IncDec	++
>2424	Identifier	i
>2425	Condition	 
>2426	RelationalExpression	i < num_images
>2427	Identifier	num_images
>2428	Identifier	i
>2429	ForInit	 
>2430	IdentifierDeclStatement	int i = 0 ;
>2431	IdentifierDecl	i = 0
>2432	AssignmentExpr	i = 0
>2433	PrimaryExpression	0
>2434	Identifier	i
>2435	Identifier	i
>2436	IdentifierDeclType	int
>2437	ExpressionStatement	 
>2438	CallExpression	RunSFM ( num_pts , num_init_cams , 0 , false , cameras , init_pts , added_order , colors , pt_views , 0 , 0 , 0 , \
>2439	ArgumentList	num_pts
>2440	Argument	W
>2441	Identifier	W
>2442	Argument	V
>2443	Identifier	V
>2444	Argument	U
>2445	Identifier	U
>2446	Argument	S
>2447	Identifier	S
>2448	Argument	0.0
>2449	PrimaryExpression	0.0
>2450	Argument	0
>2451	PrimaryExpression	0
>2452	Argument	0
>2453	PrimaryExpression	0
>2454	Argument	0
>2455	PrimaryExpression	0
>2456	Argument	pt_views
>2457	Identifier	pt_views
>2458	Argument	colors
>2459	Identifier	colors
>2460	Argument	added_order
>2461	Identifier	added_order
>2462	Argument	init_pts
>2463	Identifier	init_pts
>2464	Argument	cameras
>2465	Identifier	cameras
>2466	Argument	false
>2467	Identifier	false
>2468	Argument	0
>2469	PrimaryExpression	0
>2470	Argument	num_init_cams
>2471	Identifier	num_init_cams
>2472	Argument	num_pts
>2473	Identifier	num_pts
>2474	Callee	RunSFM
>2475	Identifier	RunSFM
>2476	ExpressionStatement	 
>2477	CallExpression	DumpOutputFile ( m_output_directory , m_bundle_output_file , num_images , num_init_cams , num_pts , added_order , \
>2478	ArgumentList	m_output_directory
>2479	Argument	pt_views
>2480	Identifier	pt_views
>2481	Argument	colors
>2482	Identifier	colors
>2483	Argument	init_pts
>2484	Identifier	init_pts
>2485	Argument	cameras
>2486	Identifier	cameras
>2487	Argument	added_order
>2488	Identifier	added_order
>2489	Argument	num_pts
>2490	Identifier	num_pts
>2491	Argument	num_init_cams
>2492	Identifier	num_init_cams
>2493	Argument	num_images
>2494	Identifier	num_images
>2495	Argument	m_bundle_output_file
>2496	Identifier	m_bundle_output_file
>2497	Argument	m_output_directory
>2498	Identifier	m_output_directory
>2499	Callee	DumpOutputFile
>2500	Identifier	DumpOutputFile
>2501	ExpressionStatement	 
>2502	CallExpression	BundleAdjustAddAllNewPoints ( num_pts , num_init_cams , added_order , cameras , init_pts , colors , 0.0 , pt_views , \
>2503	ArgumentList	num_pts
>2504	Argument	2
>2505	PrimaryExpression	2
>2506	Argument	16.0
>2507	PrimaryExpression	16.0
>2508	Argument	pt_views
>2509	Identifier	pt_views
>2510	Argument	0.0
>2511	PrimaryExpression	0.0
>2512	Argument	colors
>2513	Identifier	colors
>2514	Argument	init_pts
>2515	Identifier	init_pts
>2516	Argument	cameras
>2517	Identifier	cameras
>2518	Argument	added_order
>2519	Identifier	added_order
>2520	Argument	num_init_cams
>2521	Identifier	num_init_cams
>2522	Argument	num_pts
>2523	Identifier	num_pts
>2524	Callee	BundleAdjustAddAllNewPoints
>2525	Identifier	BundleAdjustAddAllNewPoints
>2526	ExpressionStatement	 
>2527	CallExpression	CheckPointKeyConsistency ( pt_views , added_order )
>2528	ArgumentList	pt_views
>2529	Argument	added_order
>2530	Identifier	added_order
>2531	Argument	pt_views
>2532	Identifier	pt_views
>2533	Callee	CheckPointKeyConsistency
>2534	Identifier	CheckPointKeyConsistency
>2535	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>2536	CompoundStatement	 
>2537	ExpressionStatement	 
>2538	Identifier	perm
>2539	Statement	 
>2540	Statement	 
>2541	Statement	 
>2542	ExpressionStatement	 
>2543	Identifier	views_arr
>2544	Statement	 
>2545	Statement	 
>2546	Statement	 
>2547	ExpressionStatement	 
>2548	CallExpression	pt_views . push_back ( views_sorted )
>2549	ArgumentList	views_sorted
>2550	Argument	views_sorted
>2551	Identifier	views_sorted
>2552	Callee	pt_views . push_back
>2553	MemberAccess	pt_views . push_back
>2554	Identifier	push_back
>2555	Identifier	pt_views
>2556	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>2557	CompoundStatement	 
>2558	ExpressionStatement	 
>2559	CallExpression	views_sorted . push_back ( views [ perm [ j ] ] )
>2560	ArgumentList	views [ perm [ j ] ]
>2561	Argument	views [ perm [ j ] ]
>2562	ArrayIndexing	views [ perm [ j ] ]
>2563	ArrayIndexing	perm [ j ]
>2564	Identifier	j
>2565	Identifier	perm
>2566	Identifier	views
>2567	Callee	views_sorted . push_back
>2568	MemberAccess	views_sorted . push_back
>2569	Identifier	push_back
>2570	Identifier	views_sorted
>2571	IncDecOp	 
>2572	IncDec	++
>2573	Identifier	j
>2574	Condition	 
>2575	RelationalExpression	j < num_views
>2576	Identifier	num_views
>2577	Identifier	j
>2578	ForInit	 
>2579	IdentifierDeclStatement	int j = 0 ;
>2580	IdentifierDecl	j = 0
>2581	AssignmentExpr	j = 0
>2582	PrimaryExpression	0
>2583	Identifier	j
>2584	Identifier	j
>2585	IdentifierDeclType	int
>2586	IdentifierDeclStatement	 
>2587	IdentifierDecl	views_sorted
>2588	Identifier	views_sorted
>2589	IdentifierDeclType	ImageKeyVector
>2590	ExpressionStatement	 
>2591	CallExpression	qsort_perm ( num_views , views_arr , perm )
>2592	ArgumentList	num_views
>2593	Argument	perm
>2594	Identifier	perm
>2595	Argument	views_arr
>2596	Identifier	views_arr
>2597	Argument	num_views
>2598	Identifier	num_views
>2599	Callee	qsort_perm
>2600	Identifier	qsort_perm
>2601	ExpressionStatement	 
>2602	CallExpression	qsort_ascending ( )
>2603	ArgumentList	 
>2604	Callee	qsort_ascending
>2605	Identifier	qsort_ascending
>2606	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>2607	CompoundStatement	 
>2608	ExpressionStatement	 
>2609	CallExpression	views . push_back ( ik )
>2610	ArgumentList	ik
>2611	Argument	ik
>2612	Identifier	ik
>2613	Callee	views . push_back
>2614	MemberAccess	views . push_back
>2615	Identifier	push_back
>2616	Identifier	views
>2617	ExpressionStatement	 
>2618	AssignmentExpr	views_arr [ j ] = ( double ) v
>2619	CastExpression	( double ) v
>2620	Identifier	v
>2621	CastTarget	double
>2622	ArrayIndexing	views_arr [ j ]
>2623	Identifier	j
>2624	Identifier	views_arr
>2625	ExpressionStatement	 
>2626	AssignmentExpr	ik . first = added_order_inv [ ik . first ]
>2627	ArrayIndexing	added_order_inv [ ik . first ]
>2628	MemberAccess	ik . first
>2629	Identifier	first
>2630	Identifier	ik
>2631	Identifier	added_order_inv
>2632	MemberAccess	ik . first
>2633	Identifier	first
>2634	Identifier	ik
>2635	ExpressionStatement	 
>2636	AssignmentExpr	m_image_data [ v ] . m_keys [ k ] . m_extra = i
>2637	Identifier	i
>2638	MemberAccess	m_image_data [ v ] . m_keys [ k ] . m_extra
>2639	Identifier	m_extra
>2640	ArrayIndexing	m_image_data [ v ] . m_keys [ k ]
>2641	Identifier	k
>2642	MemberAccess	m_image_data [ v ] . m_keys
>2643	Identifier	m_keys
>2644	ArrayIndexing	m_image_data [ v ]
>2645	Identifier	v
>2646	Identifier	m_image_data
>2647	IfStatement	if ( m_image_data [ v ] . m_keys [ k ] . m_extra != - 1 )
>2648	CompoundStatement	 
>2649	ExpressionStatement	 
>2650	Statement	 
>2651	Statement	 
>2652	Statement	 
>2653	Statement	 
>2654	Statement	 
>2655	Statement	 
>2656	Statement	 
>2657	Statement	 
>2658	Statement	 
>2659	Statement	 
>2660	Statement	 
>2661	Statement	 
>2662	Statement	 
>2663	Statement	 
>2664	Statement	 
>2665	Statement	 
>2666	Statement	 
>2667	Statement	 
>2668	Statement	 
>2669	Statement	 
>2670	Statement	 
>2671	Statement	 
>2672	Statement	 
>2673	Condition	 
>2674	EqualityExpression	m_image_data [ v ] . m_keys [ k ] . m_extra != - 1
>2675	UnaryOp	- 1
>2676	PrimaryExpression	1
>2677	UnaryOperator	-
>2678	MemberAccess	m_image_data [ v ] . m_keys [ k ] . m_extra
>2679	Identifier	m_extra
>2680	ArrayIndexing	m_image_data [ v ] . m_keys [ k ]
>2681	Identifier	k
>2682	MemberAccess	m_image_data [ v ] . m_keys
>2683	Identifier	m_keys
>2684	ArrayIndexing	m_image_data [ v ]
>2685	Identifier	v
>2686	Identifier	m_image_data
>2687	IdentifierDeclStatement	 
>2688	IdentifierDecl	k = ik . second
>2689	AssignmentExpr	k = ik . second
>2690	MemberAccess	ik . second
>2691	Identifier	second
>2692	Identifier	ik
>2693	Identifier	k
>2694	Identifier	k
>2695	IdentifierDeclType	int
>2696	IdentifierDeclStatement	 
>2697	IdentifierDecl	v = ik . first
>2698	AssignmentExpr	v = ik . first
>2699	MemberAccess	ik . first
>2700	Identifier	first
>2701	Identifier	ik
>2702	Identifier	v
>2703	Identifier	v
>2704	IdentifierDeclType	int
>2705	IdentifierDeclStatement	 
>2706	IdentifierDecl	ik = pt . m_views [ j ]
>2707	AssignmentExpr	ik = pt . m_views [ j ]
>2708	ArrayIndexing	pt . m_views [ j ]
>2709	Identifier	j
>2710	MemberAccess	pt . m_views
>2711	Identifier	m_views
>2712	Identifier	pt
>2713	Identifier	ik
>2714	Identifier	ik
>2715	IdentifierDeclType	ImageKey
>2716	IncDecOp	 
>2717	IncDec	++
>2718	Identifier	j
>2719	Condition	 
>2720	RelationalExpression	j < num_views
>2721	Identifier	num_views
>2722	Identifier	j
>2723	ForInit	 
>2724	IdentifierDeclStatement	int j = 0 ;
>2725	IdentifierDecl	j = 0
>2726	AssignmentExpr	j = 0
>2727	PrimaryExpression	0
>2728	Identifier	j
>2729	Identifier	j
>2730	IdentifierDeclType	int
>2731	IdentifierDeclStatement	 
>2732	IdentifierDecl	* perm = new int [ num_views ]
>2733	AssignmentExpr	* perm = new int [ num_views ]
>2734	Identifier	num_views
>2735	Identifier	num_views
>2736	Identifier	perm
>2737	IdentifierDeclType	int *
>2738	IdentifierDeclStatement	 
>2739	IdentifierDecl	* views_arr = new double [ num_views ]
>2740	AssignmentExpr	* views_arr = new double [ num_views ]
>2741	Identifier	num_views
>2742	Identifier	num_views
>2743	Identifier	views_arr
>2744	IdentifierDeclType	double *
>2745	IdentifierDeclStatement	 
>2746	IdentifierDecl	views
>2747	Identifier	views
>2748	IdentifierDeclType	ImageKeyVector
>2749	ExpressionStatement	 
>2750	AssignmentExpr	colors [ i ] = v3_new ( pt . m_color [ 0 ] , pt . m_color [ 1 ] , pt . m_color [ 2 ] )
>2751	CallExpression	v3_new ( pt . m_color [ 0 ] , pt . m_color [ 1 ] , pt . m_color [ 2 ] )
>2752	ArgumentList	pt . m_color [ 0 ]
>2753	Argument	pt . m_color [ 2 ]
>2754	ArrayIndexing	pt . m_color [ 2 ]
>2755	PrimaryExpression	2
>2756	MemberAccess	pt . m_color
>2757	Identifier	m_color
>2758	Identifier	pt
>2759	Argument	pt . m_color [ 1 ]
>2760	ArrayIndexing	pt . m_color [ 1 ]
>2761	PrimaryExpression	1
>2762	MemberAccess	pt . m_color
>2763	Identifier	m_color
>2764	Identifier	pt
>2765	Argument	pt . m_color [ 0 ]
>2766	ArrayIndexing	pt . m_color [ 0 ]
>2767	PrimaryExpression	0
>2768	MemberAccess	pt . m_color
>2769	Identifier	m_color
>2770	Identifier	pt
>2771	Callee	v3_new
>2772	Identifier	v3_new
>2773	ArrayIndexing	colors [ i ]
>2774	Identifier	i
>2775	Identifier	colors
>2776	ExpressionStatement	 
>2777	AssignmentExpr	init_pts [ i ] = v3_new ( pt . m_pos [ 0 ] , pt . m_pos [ 1 ] , pt . m_pos [ 2 ] )
>2778	CallExpression	v3_new ( pt . m_pos [ 0 ] , pt . m_pos [ 1 ] , pt . m_pos [ 2 ] )
>2779	ArgumentList	pt . m_pos [ 0 ]
>2780	Argument	pt . m_pos [ 2 ]
>2781	ArrayIndexing	pt . m_pos [ 2 ]
>2782	PrimaryExpression	2
>2783	MemberAccess	pt . m_pos
>2784	Identifier	m_pos
>2785	Identifier	pt
>2786	Argument	pt . m_pos [ 1 ]
>2787	ArrayIndexing	pt . m_pos [ 1 ]
>2788	PrimaryExpression	1
>2789	MemberAccess	pt . m_pos
>2790	Identifier	m_pos
>2791	Identifier	pt
>2792	Argument	pt . m_pos [ 0 ]
>2793	ArrayIndexing	pt . m_pos [ 0 ]
>2794	PrimaryExpression	0
>2795	MemberAccess	pt . m_pos
>2796	Identifier	m_pos
>2797	Identifier	pt
>2798	Callee	v3_new
>2799	Identifier	v3_new
>2800	ArrayIndexing	init_pts [ i ]
>2801	Identifier	i
>2802	Identifier	init_pts
>2803	IdentifierDeclStatement	 
>2804	IdentifierDecl	num_views = pt . m_views . size ( )
>2805	AssignmentExpr	num_views = pt . m_views . size ( )
>2806	CallExpression	pt . m_views . size ( )
>2807	ArgumentList	 
>2808	Callee	pt . m_views . size
>2809	MemberAccess	pt . m_views . size
>2810	Identifier	size
>2811	MemberAccess	pt . m_views
>2812	Identifier	m_views
>2813	Identifier	pt
>2814	Identifier	num_views
>2815	Identifier	num_views
>2816	IdentifierDeclType	int
>2817	IdentifierDeclStatement	 
>2818	IdentifierDecl	& pt = m_point_data [ i ]
>2819	AssignmentExpr	& pt = m_point_data [ i ]
>2820	ArrayIndexing	m_point_data [ i ]
>2821	Identifier	i
>2822	Identifier	m_point_data
>2823	Identifier	pt
>2824	Identifier	pt
>2825	IdentifierDeclType	PointData &
>2826	IncDecOp	 
>2827	IncDec	++
>2828	Identifier	i
>2829	Condition	 
>2830	RelationalExpression	i < num_pts
>2831	Identifier	num_pts
>2832	Identifier	i
>2833	ForInit	 
>2834	IdentifierDeclStatement	int i = 0 ;
>2835	IdentifierDecl	i = 0
>2836	AssignmentExpr	i = 0
>2837	PrimaryExpression	0
>2838	Identifier	i
>2839	Identifier	i
>2840	IdentifierDeclType	int
>2841	IdentifierDeclStatement	 
>2842	IdentifierDecl	* colors = new v3_t [ num_pts ]
>2843	AssignmentExpr	* colors = new v3_t [ num_pts ]
>2844	Identifier	num_pts
>2845	Identifier	num_pts
>2846	Identifier	colors
>2847	IdentifierDeclType	v3_t *
>2848	IdentifierDeclStatement	 
>2849	IdentifierDecl	* init_pts = new v3_t [ num_pts ]
>2850	AssignmentExpr	* init_pts = new v3_t [ num_pts ]
>2851	Identifier	num_pts
>2852	Identifier	num_pts
>2853	Identifier	init_pts
>2854	IdentifierDeclType	v3_t *
>2855	ExpressionStatement	 
>2856	CallExpression	printf ( \"[ReRunSFM] Setting up views...\n\" )
>2857	ArgumentList	\"[ReRunSFM] Setting up views...\n\"
>2858	Argument	\"[ReRunSFM] Setting up views...\n\"
>2859	PrimaryExpression	\"[ReRunSFM] Setting up views...\n\"
>2860	Callee	printf
>2861	Identifier	printf
>2862	ExpressionStatement	 
>2863	CallExpression	printf ( \"\n\" )
>2864	ArgumentList	\"\n\"
>2865	Argument	\"\n\"
>2866	PrimaryExpression	\"\n\"
>2867	Callee	printf
>2868	Identifier	printf
>2869	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2870	CompoundStatement	 
>2871	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>2872	ElseStatement	else
>2873	CompoundStatement	 
>2874	ExpressionStatement	 
>2875	AssignmentExpr	added_order_inv [ i ] = - 1
>2876	UnaryOp	- 1
>2877	PrimaryExpression	1
>2878	UnaryOperator	-
>2879	ArrayIndexing	added_order_inv [ i ]
>2880	Identifier	i
>2881	Identifier	added_order_inv
>2882	CompoundStatement	 
>2883	ExpressionStatement	 
>2884	IncDecOp	num_init_cams ++
>2885	IncDec	++
>2886	Identifier	num_init_cams
>2887	IfStatement	if ( m_constrain_focal )
>2888	CompoundStatement	 
>2889	IfStatement	if ( m_image_data [ i ] . m_has_init_focal )
>2890	CompoundStatement	 
>2891	IfStatement	if ( fabs ( diff ) / m_image_data [ i ] . m_init_focal < 0.4 )
>2892	CompoundStatement	 
>2893	ExpressionStatement	 
>2894	CallExpression	SetFocalConstraint ( m_image_data [ i ] , cameras + num_init_cams )
>2895	ArgumentList	m_image_data [ i ]
>2896	Argument	cameras + num_init_cams
>2897	AdditiveExpression	cameras + num_init_cams
>2898	Identifier	num_init_cams
>2899	Identifier	cameras
>2900	Argument	m_image_data [ i ]
>2901	ArrayIndexing	m_image_data [ i ]
>2902	Identifier	i
>2903	Identifier	m_image_data
>2904	Callee	SetFocalConstraint
>2905	Identifier	SetFocalConstraint
>2906	ExpressionStatement	 
>2907	Statement	 
>2908	Statement	 
>2909	Statement	 
>2910	Statement	 
>2911	Statement	 
>2912	Statement	 
>2913	Statement	 
>2914	Condition	 
>2915	RelationalExpression	fabs ( diff ) / m_image_data [ i ] . m_init_focal < 0.4
>2916	PrimaryExpression	0.4
>2917	MultiplicativeExpression	fabs ( diff ) / m_image_data [ i ] . m_init_focal
>2918	MemberAccess	m_image_data [ i ] . m_init_focal
>2919	Identifier	m_init_focal
>2920	ArrayIndexing	m_image_data [ i ]
>2921	Identifier	i
>2922	Identifier	m_image_data
>2923	CallExpression	fabs ( diff )
>2924	ArgumentList	diff
>2925	Argument	diff
>2926	Identifier	diff
>2927	Callee	fabs
>2928	Identifier	fabs
>2929	IdentifierDeclStatement	 
>2930	IdentifierDecl	diff = cameras [ num_init_cams ] . f - m_image_data [ i ] . m_init_focal
>2931	AssignmentExpr	diff = cameras [ num_init_cams ] . f - m_image_data [ i ] . m_init_focal
>2932	AdditiveExpression	cameras [ num_init_cams ] . f - m_image_data [ i ] . m_init_focal
>2933	MemberAccess	m_image_data [ i ] . m_init_focal
>2934	Identifier	m_init_focal
>2935	ArrayIndexing	m_image_data [ i ]
>2936	Identifier	i
>2937	Identifier	m_image_data
>2938	MemberAccess	cameras [ num_init_cams ] . f
>2939	Identifier	f
>2940	ArrayIndexing	cameras [ num_init_cams ]
>2941	Identifier	num_init_cams
>2942	Identifier	cameras
>2943	Identifier	diff
>2944	Identifier	diff
>2945	IdentifierDeclType	double
>2946	Condition	 
>2947	MemberAccess	m_image_data [ i ] . m_has_init_focal
>2948	Identifier	m_has_init_focal
>2949	ArrayIndexing	m_image_data [ i ]
>2950	Identifier	i
>2951	Identifier	m_image_data
>2952	Condition	 
>2953	Identifier	m_constrain_focal
>2954	ExpressionStatement	 
>2955	CallExpression	SetCameraConstraints ( i , cameras + num_init_cams )
>2956	ArgumentList	i
>2957	Argument	cameras + num_init_cams
>2958	AdditiveExpression	cameras + num_init_cams
>2959	Identifier	num_init_cams
>2960	Identifier	cameras
>2961	Argument	i
>2962	Identifier	i
>2963	Callee	SetCameraConstraints
>2964	Identifier	SetCameraConstraints
>2965	ExpressionStatement	 
>2966	AssignmentExpr	cameras [ num_init_cams ] . k [ 1 ] = m_image_data [ i ] . m_camera . m_k [ 1 ]
>2967	ArrayIndexing	m_image_data [ i ] . m_camera . m_k [ 1 ]
>2968	PrimaryExpression	1
>2969	MemberAccess	m_image_data [ i ] . m_camera . m_k
>2970	Identifier	m_k
>2971	MemberAccess	m_image_data [ i ] . m_camera
>2972	Identifier	m_camera
>2973	ArrayIndexing	m_image_data [ i ]
>2974	Identifier	i
>2975	Identifier	m_image_data
>2976	ArrayIndexing	cameras [ num_init_cams ] . k [ 1 ]
>2977	PrimaryExpression	1
>2978	MemberAccess	cameras [ num_init_cams ] . k
>2979	Identifier	k
>2980	ArrayIndexing	cameras [ num_init_cams ]
>2981	Identifier	num_init_cams
>2982	Identifier	cameras
>2983	ExpressionStatement	 
>2984	AssignmentExpr	cameras [ num_init_cams ] . k [ 0 ] = m_image_data [ i ] . m_camera . m_k [ 0 ]
>2985	ArrayIndexing	m_image_data [ i ] . m_camera . m_k [ 0 ]
>2986	PrimaryExpression	0
>2987	MemberAccess	m_image_data [ i ] . m_camera . m_k
>2988	Identifier	m_k
>2989	MemberAccess	m_image_data [ i ] . m_camera
>2990	Identifier	m_camera
>2991	ArrayIndexing	m_image_data [ i ]
>2992	Identifier	i
>2993	Identifier	m_image_data
>2994	ArrayIndexing	cameras [ num_init_cams ] . k [ 0 ]
>2995	PrimaryExpression	0
>2996	MemberAccess	cameras [ num_init_cams ] . k
>2997	Identifier	k
>2998	ArrayIndexing	cameras [ num_init_cams ]
>2999	Identifier	num_init_cams
>3000	Identifier	cameras
>3001	ExpressionStatement	 
>3002	AssignmentExpr	cameras [ num_init_cams ] . f = m_image_data [ i ] . m_camera . m_focal
>3003	MemberAccess	m_image_data [ i ] . m_camera . m_focal
>3004	Identifier	m_focal
>3005	MemberAccess	m_image_data [ i ] . m_camera
>3006	Identifier	m_camera
>3007	ArrayIndexing	m_image_data [ i ]
>3008	Identifier	i
>3009	Identifier	m_image_data
>3010	MemberAccess	cameras [ num_init_cams ] . f
>3011	Identifier	f
>3012	ArrayIndexing	cameras [ num_init_cams ]
>3013	Identifier	num_init_cams
>3014	Identifier	cameras
>3015	ExpressionStatement	 
>3016	AssignmentExpr	cameras [ num_init_cams ] . t [ 2 ] *= - 1.0
>3017	UnaryOp	- 1.0
>3018	PrimaryExpression	1.0
>3019	UnaryOperator	-
>3020	ArrayIndexing	cameras [ num_init_cams ] . t [ 2 ]
>3021	PrimaryExpression	2
>3022	MemberAccess	cameras [ num_init_cams ] . t
>3023	Identifier	t
>3024	ArrayIndexing	cameras [ num_init_cams ]
>3025	Identifier	num_init_cams
>3026	Identifier	cameras
>3027	ExpressionStatement	 
>3028	AssignmentExpr	cameras [ num_init_cams ] . t [ 1 ] *= - 1.0
>3029	UnaryOp	- 1.0
>3030	PrimaryExpression	1.0
>3031	UnaryOperator	-
>3032	ArrayIndexing	cameras [ num_init_cams ] . t [ 1 ]
>3033	PrimaryExpression	1
>3034	MemberAccess	cameras [ num_init_cams ] . t
>3035	Identifier	t
>3036	ArrayIndexing	cameras [ num_init_cams ]
>3037	Identifier	num_init_cams
>3038	Identifier	cameras
>3039	ExpressionStatement	 
>3040	AssignmentExpr	cameras [ num_init_cams ] . t [ 0 ] *= - 1.0
>3041	UnaryOp	- 1.0
>3042	PrimaryExpression	1.0
>3043	UnaryOperator	-
>3044	ArrayIndexing	cameras [ num_init_cams ] . t [ 0 ]
>3045	PrimaryExpression	0
>3046	MemberAccess	cameras [ num_init_cams ] . t
>3047	Identifier	t
>3048	ArrayIndexing	cameras [ num_init_cams ]
>3049	Identifier	num_init_cams
>3050	Identifier	cameras
>3051	ExpressionStatement	 
>3052	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , m_image_data [ i ] . m_camera . m_R , m_image_data [ i ] . m_camera . \
>3053	ArgumentList	3
>3054	Argument	cameras [ num_init_cams ] . t
>3055	MemberAccess	cameras [ num_init_cams ] . t
>3056	Identifier	t
>3057	ArrayIndexing	cameras [ num_init_cams ]
>3058	Identifier	num_init_cams
>3059	Identifier	cameras
>3060	Argument	m_image_data [ i ] . m_camera . m_t
>3061	MemberAccess	m_image_data [ i ] . m_camera . m_t
>3062	Identifier	m_t
>3063	MemberAccess	m_image_data [ i ] . m_camera
>3064	Identifier	m_camera
>3065	ArrayIndexing	m_image_data [ i ]
>3066	Identifier	i
>3067	Identifier	m_image_data
>3068	Argument	m_image_data [ i ] . m_camera . m_R
>3069	MemberAccess	m_image_data [ i ] . m_camera . m_R
>3070	Identifier	m_R
>3071	MemberAccess	m_image_data [ i ] . m_camera
>3072	Identifier	m_camera
>3073	ArrayIndexing	m_image_data [ i ]
>3074	Identifier	i
>3075	Identifier	m_image_data
>3076	Argument	1
>3077	PrimaryExpression	1
>3078	Argument	3
>3079	PrimaryExpression	3
>3080	Argument	3
>3081	PrimaryExpression	3
>3082	Argument	3
>3083	PrimaryExpression	3
>3084	Callee	matrix_transpose_product
>3085	Identifier	matrix_transpose_product
>3086	ExpressionStatement	 
>3087	CallExpression	memcpy ( cameras [ num_init_cams ] . R , m_image_data [ i ] . m_camera . m_R , sizeof ( double ) * 9 )
>3088	ArgumentList	cameras [ num_init_cams ] . R
>3089	Argument	sizeof ( double ) * 9
>3090	MultiplicativeExpression	sizeof ( double ) * 9
>3091	PrimaryExpression	9
>3092	SizeofExpr	sizeof ( double )
>3093	SizeofOperand	double
>3094	Sizeof	sizeof
>3095	Argument	m_image_data [ i ] . m_camera . m_R
>3096	MemberAccess	m_image_data [ i ] . m_camera . m_R
>3097	Identifier	m_R
>3098	MemberAccess	m_image_data [ i ] . m_camera
>3099	Identifier	m_camera
>3100	ArrayIndexing	m_image_data [ i ]
>3101	Identifier	i
>3102	Identifier	m_image_data
>3103	Argument	cameras [ num_init_cams ] . R
>3104	MemberAccess	cameras [ num_init_cams ] . R
>3105	Identifier	R
>3106	ArrayIndexing	cameras [ num_init_cams ]
>3107	Identifier	num_init_cams
>3108	Identifier	cameras
>3109	Callee	memcpy
>3110	Identifier	memcpy
>3111	ExpressionStatement	 
>3112	CallExpression	InitializeCameraParams ( m_image_data [ i ] , cameras [ num_init_cams ] )
>3113	ArgumentList	m_image_data [ i ]
>3114	Argument	cameras [ num_init_cams ]
>3115	ArrayIndexing	cameras [ num_init_cams ]
>3116	Identifier	num_init_cams
>3117	Identifier	cameras
>3118	Argument	m_image_data [ i ]
>3119	ArrayIndexing	m_image_data [ i ]
>3120	Identifier	i
>3121	Identifier	m_image_data
>3122	Callee	InitializeCameraParams
>3123	Identifier	InitializeCameraParams
>3124	ExpressionStatement	 
>3125	AssignmentExpr	added_order_inv [ i ] = num_init_cams
>3126	Identifier	num_init_cams
>3127	ArrayIndexing	added_order_inv [ i ]
>3128	Identifier	i
>3129	Identifier	added_order_inv
>3130	ExpressionStatement	 
>3131	AssignmentExpr	added_order [ num_init_cams ] = i
>3132	Identifier	i
>3133	ArrayIndexing	added_order [ num_init_cams ]
>3134	Identifier	num_init_cams
>3135	Identifier	added_order
>3136	ExpressionStatement	 
>3137	CallExpression	SetTracks ( i )
>3138	ArgumentList	i
>3139	Argument	i
>3140	Identifier	i
>3141	Callee	SetTracks
>3142	Identifier	SetTracks
>3143	ExpressionStatement	 
>3144	CallExpression	m_image_data [ i ] . ReadKeyColors ( )
>3145	ArgumentList	 
>3146	Callee	m_image_data [ i ] . ReadKeyColors
>3147	MemberAccess	m_image_data [ i ] . ReadKeyColors
>3148	Identifier	ReadKeyColors
>3149	ArrayIndexing	m_image_data [ i ]
>3150	Identifier	i
>3151	Identifier	m_image_data
>3152	ExpressionStatement	 
>3153	CallExpression	m_image_data [ i ] . LoadKeys ( false , ! m_optimize_for_fisheye )
>3154	ArgumentList	false
>3155	Argument	! m_optimize_for_fisheye
>3156	UnaryOp	! m_optimize_for_fisheye
>3157	Identifier	m_optimize_for_fisheye
>3158	UnaryOperator	!
>3159	Argument	false
>3160	Identifier	false
>3161	Callee	m_image_data [ i ] . LoadKeys
>3162	MemberAccess	m_image_data [ i ] . LoadKeys
>3163	Identifier	LoadKeys
>3164	ArrayIndexing	m_image_data [ i ]
>3165	Identifier	i
>3166	Identifier	m_image_data
>3167	Condition	 
>3168	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>3169	Identifier	m_adjusted
>3170	MemberAccess	m_image_data [ i ] . m_camera
>3171	Identifier	m_camera
>3172	ArrayIndexing	m_image_data [ i ]
>3173	Identifier	i
>3174	Identifier	m_image_data
>3175	ExpressionStatement	 
>3176	CallExpression	fflush ( stdout )
>3177	ArgumentList	stdout
>3178	Argument	stdout
>3179	Identifier	stdout
>3180	Callee	fflush
>3181	Identifier	fflush
>3182	ExpressionStatement	 
>3183	CallExpression	printf ( \".\" )
>3184	ArgumentList	\".\"
>3185	Argument	\".\"
>3186	PrimaryExpression	\".\"
>3187	Callee	printf
>3188	Identifier	printf
>3189	IncDecOp	 
>3190	IncDec	++
>3191	Identifier	i
>3192	Condition	 
>3193	RelationalExpression	i < num_images
>3194	Identifier	num_images
>3195	Identifier	i
>3196	ForInit	 
>3197	IdentifierDeclStatement	int i = 0 ;
>3198	IdentifierDecl	i = 0
>3199	AssignmentExpr	i = 0
>3200	PrimaryExpression	0
>3201	Identifier	i
>3202	Identifier	i
>3203	IdentifierDeclType	int
>3204	ExpressionStatement	 
>3205	CallExpression	printf ( \"[ReRunSFM] Setting up cameras\n\" )
>3206	ArgumentList	\"[ReRunSFM] Setting up cameras\n\"
>3207	Argument	\"[ReRunSFM] Setting up cameras\n\"
>3208	PrimaryExpression	\"[ReRunSFM] Setting up cameras\n\"
>3209	Callee	printf
>3210	Identifier	printf
>3211	IdentifierDeclStatement	 
>3212	IdentifierDecl	* cameras = new camera_params_t [ num_images ]
>3213	AssignmentExpr	* cameras = new camera_params_t [ num_images ]
>3214	Identifier	num_images
>3215	Identifier	num_images
>3216	Identifier	cameras
>3217	IdentifierDeclType	camera_params_t *
>3218	IdentifierDeclStatement	 
>3219	IdentifierDecl	pt_views
>3220	Identifier	pt_views
>3221	IdentifierDeclType	std 
>3222	IdentifierDeclStatement	 
>3223	IdentifierDecl	* added_order_inv = new int [ num_images ]
>3224	AssignmentExpr	* added_order_inv = new int [ num_images ]
>3225	Identifier	num_images
>3226	Identifier	num_images
>3227	Identifier	added_order_inv
>3228	IdentifierDeclType	int *
>3229	IdentifierDeclStatement	 
>3230	IdentifierDecl	* added_order = new int [ num_images ]
>3231	AssignmentExpr	* added_order = new int [ num_images ]
>3232	Identifier	num_images
>3233	Identifier	num_images
>3234	Identifier	added_order
>3235	IdentifierDeclType	int *
>3236	IdentifierDeclStatement	 
>3237	IdentifierDecl	num_init_cams = 0
>3238	AssignmentExpr	num_init_cams = 0
>3239	PrimaryExpression	0
>3240	Identifier	num_init_cams
>3241	Identifier	num_init_cams
>3242	IdentifierDeclType	int
>3243	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>3244	CompoundStatement	 
>3245	ForStatement	for ( int j = 0 ; j < num_keys ; j ++ )
>3246	CompoundStatement	 
>3247	ExpressionStatement	 
>3248	AssignmentExpr	GetKey ( i , j ) . m_extra = - 1
>3249	UnaryOp	- 1
>3250	PrimaryExpression	1
>3251	UnaryOperator	-
>3252	MemberAccess	GetKey ( i , j ) . m_extra
>3253	Identifier	m_extra
>3254	CallExpression	GetKey ( i , j )
>3255	ArgumentList	i
>3256	Argument	j
>3257	Identifier	j
>3258	Argument	i
>3259	Identifier	i
>3260	Callee	GetKey
>3261	Identifier	GetKey
>3262	IncDecOp	 
>3263	IncDec	++
>3264	Identifier	j
>3265	Condition	 
>3266	RelationalExpression	j < num_keys
>3267	Identifier	num_keys
>3268	Identifier	j
>3269	ForInit	 
>3270	IdentifierDeclStatement	int j = 0 ;
>3271	IdentifierDecl	j = 0
>3272	AssignmentExpr	j = 0
>3273	PrimaryExpression	0
>3274	Identifier	j
>3275	Identifier	j
>3276	IdentifierDeclType	int
>3277	IdentifierDeclStatement	 
>3278	IdentifierDecl	num_keys = GetNumKeys ( i )
>3279	AssignmentExpr	num_keys = GetNumKeys ( i )
>3280	CallExpression	GetNumKeys ( i )
>3281	ArgumentList	i
>3282	Argument	i
>3283	Identifier	i
>3284	Callee	GetNumKeys
>3285	Identifier	GetNumKeys
>3286	Identifier	num_keys
>3287	Identifier	num_keys
>3288	IdentifierDeclType	int
>3289	IncDecOp	 
>3290	IncDec	++
>3291	Identifier	i
>3292	Condition	 
>3293	RelationalExpression	i < num_images
>3294	Identifier	num_images
>3295	Identifier	i
>3296	ForInit	 
>3297	IdentifierDeclStatement	int i = 0 ;
>3298	IdentifierDecl	i = 0
>3299	AssignmentExpr	i = 0
>3300	PrimaryExpression	0
>3301	Identifier	i
>3302	Identifier	i
>3303	IdentifierDeclType	int
>3304	ExpressionStatement	 
>3305	CallExpression	printf ( \"[ReRunSFM] Initializing keypoints...\n\" )
>3306	ArgumentList	\"[ReRunSFM] Initializing keypoints...\n\"
>3307	Argument	\"[ReRunSFM] Initializing keypoints...\n\"
>3308	PrimaryExpression	\"[ReRunSFM] Initializing keypoints...\n\"
>3309	Callee	printf
>3310	Identifier	printf
>3311	IdentifierDeclStatement	 
>3312	IdentifierDecl	num_images = GetNumImages ( )
>3313	AssignmentExpr	num_images = GetNumImages ( )
>3314	CallExpression	GetNumImages ( )
>3315	ArgumentList	 
>3316	Callee	GetNumImages
>3317	Identifier	GetNumImages
>3318	Identifier	num_images
>3319	Identifier	num_images
>3320	IdentifierDeclType	int
>3321	IdentifierDeclStatement	 
>3322	IdentifierDecl	num_pts = ( int ) m_point_data . size ( )
>3323	AssignmentExpr	num_pts = ( int ) m_point_data . size ( )
>3324	CastExpression	( int ) m_point_data . size ( )
>3325	CallExpression	m_point_data . size ( )
>3326	ArgumentList	 
>3327	Callee	m_point_data . size
>3328	MemberAccess	m_point_data . size
>3329	Identifier	size
>3330	Identifier	m_point_data
>3331	CastTarget	int
>3332	Identifier	num_pts
>3333	Identifier	num_pts
>3334	IdentifierDeclType	int
>3335	ExpressionStatement	 
>3336	CallExpression	ComputeGeometricConstraints ( )
>3337	ArgumentList	 
>3338	Callee	ComputeGeometricConstraints
>3339	Identifier	ComputeGeometricConstraints
>3466	FunctionDef	compare_doubles (const void * d1 , const void * d2)
>3467	ParameterList	const void * d1 , const void * d2
>3468	Parameter	 
>3469	Identifier	d2
>3470	ParameterType	const void *
>3471	Parameter	 
>3472	Identifier	d1
>3473	ParameterType	const void *
>3474	ReturnType	static int
>3475	CompoundStatement	 
>3476	ReturnStatement	 
>3477	PrimaryExpression	0
>3478	IfStatement	if ( a > b )
>3479	ReturnStatement	 
>3480	PrimaryExpression	1
>3481	Condition	 
>3482	RelationalExpression	a > b
>3483	Identifier	b
>3484	Identifier	a
>3485	IfStatement	if ( a < b )
>3486	ReturnStatement	 
>3487	UnaryOp	- 1
>3488	PrimaryExpression	1
>3489	UnaryOperator	-
>3490	Condition	 
>3491	RelationalExpression	a < b
>3492	Identifier	b
>3493	Identifier	a
>3494	IdentifierDeclStatement	 
>3495	IdentifierDecl	b = * ( double * ) d2
>3496	AssignmentExpr	b = * ( double * ) d2
>3497	UnaryOp	* ( double * ) d2
>3498	CastExpression	( double * ) d2
>3499	Identifier	d2
>3500	CastTarget	double *
>3501	UnaryOperator	*
>3502	Identifier	b
>3503	Identifier	b
>3504	IdentifierDeclType	double
>3505	IdentifierDeclStatement	 
>3506	IdentifierDecl	a = * ( double * ) d1
>3507	AssignmentExpr	a = * ( double * ) d1
>3508	UnaryOp	* ( double * ) d1
>3509	CastExpression	( double * ) d1
>3510	Identifier	d1
>3511	CastTarget	double *
>3512	UnaryOperator	*
>3513	Identifier	a
>3514	Identifier	a
>3515	IdentifierDeclType	double
>3527	FunctionDef	BundlerApp 
>3528	ParameterList	int num_pts , int num_cameras , int start_camera , bool fix_points , camera_params_t * init_camera_params , v3_t * \
>3529	Parameter	 
>3530	Identifier	write_intermediate
>3531	ParameterType	bool
>3532	Parameter	 
>3533	Identifier	final_bundle
>3534	ParameterType	bool
>3535	Parameter	 
>3536	Identifier	remove_outliers
>3537	ParameterType	bool
>3538	Parameter	 
>3539	Identifier	W
>3540	ParameterType	double *
>3541	Parameter	 
>3542	Identifier	V
>3543	ParameterType	double *
>3544	Parameter	 
>3545	Identifier	U
>3546	ParameterType	double *
>3547	Parameter	 
>3548	Identifier	S
>3549	ParameterType	double *
>3550	Parameter	 
>3551	Identifier	eps2
>3552	ParameterType	double
>3553	Parameter	 
>3554	Identifier	verbosity
>3555	ParameterType	int
>3556	Parameter	 
>3557	Identifier	max_iter2
>3558	ParameterType	int
>3559	Parameter	 
>3560	Identifier	max_iter
>3561	ParameterType	int
>3562	Parameter	 
>3563	Identifier	pt_views
>3564	ParameterType	std 
>3565	Parameter	 
>3566	Identifier	colors
>3567	ParameterType	v3_t *
>3568	Parameter	 
>3569	Identifier	added_order
>3570	ParameterType	int *
>3571	Parameter	 
>3572	Identifier	init_pts
>3573	ParameterType	v3_t *
>3574	Parameter	 
>3575	Identifier	init_camera_params
>3576	ParameterType	camera_params_t *
>3577	Parameter	 
>3578	Identifier	fix_points
>3579	ParameterType	bool
>3580	Parameter	 
>3581	Identifier	start_camera
>3582	ParameterType	int
>3583	Parameter	 
>3584	Identifier	num_cameras
>3585	ParameterType	int
>3586	Parameter	 
>3587	Identifier	num_pts
>3588	ParameterType	int
>3589	ReturnType	double
>3590	CompoundStatement	 
>3591	IfStatement	if ( ! m_use_ceres )
>3592	ElseStatement	else
>3593	CompoundStatement	 
>3594	ReturnStatement	 
>3595	CallExpression	RunSFM_Ceres ( num_pts , num_cameras , start_camera , fix_points , init_camera_params , init_pts , added_order , \
>3596	ArgumentList	num_pts
>3597	Argument	write_intermediate
>3598	Identifier	write_intermediate
>3599	Argument	final_bundle
>3600	Identifier	final_bundle
>3601	Argument	remove_outliers
>3602	Identifier	remove_outliers
>3603	Argument	W
>3604	Identifier	W
>3605	Argument	V
>3606	Identifier	V
>3607	Argument	U
>3608	Identifier	U
>3609	Argument	S
>3610	Identifier	S
>3611	Argument	eps2
>3612	Identifier	eps2
>3613	Argument	verbosity
>3614	Identifier	verbosity
>3615	Argument	max_iter2
>3616	Identifier	max_iter2
>3617	Argument	max_iter
>3618	Identifier	max_iter
>3619	Argument	pt_views
>3620	Identifier	pt_views
>3621	Argument	colors
>3622	Identifier	colors
>3623	Argument	added_order
>3624	Identifier	added_order
>3625	Argument	init_pts
>3626	Identifier	init_pts
>3627	Argument	init_camera_params
>3628	Identifier	init_camera_params
>3629	Argument	fix_points
>3630	Identifier	fix_points
>3631	Argument	start_camera
>3632	Identifier	start_camera
>3633	Argument	num_cameras
>3634	Identifier	num_cameras
>3635	Argument	num_pts
>3636	Identifier	num_pts
>3637	Callee	RunSFM_Ceres
>3638	Identifier	RunSFM_Ceres
>3639	CompoundStatement	 
>3640	ReturnStatement	 
>3641	CallExpression	RunSFM_SBA ( num_pts , num_cameras , start_camera , fix_points , init_camera_params , init_pts , added_order , colors , \
>3642	ArgumentList	num_pts
>3643	Argument	remove_outliers
>3644	Identifier	remove_outliers
>3645	Argument	W
>3646	Identifier	W
>3647	Argument	V
>3648	Identifier	V
>3649	Argument	U
>3650	Identifier	U
>3651	Argument	S
>3652	Identifier	S
>3653	Argument	eps2
>3654	Identifier	eps2
>3655	Argument	pt_views
>3656	Identifier	pt_views
>3657	Argument	colors
>3658	Identifier	colors
>3659	Argument	added_order
>3660	Identifier	added_order
>3661	Argument	init_pts
>3662	Identifier	init_pts
>3663	Argument	init_camera_params
>3664	Identifier	init_camera_params
>3665	Argument	fix_points
>3666	Identifier	fix_points
>3667	Argument	start_camera
>3668	Identifier	start_camera
>3669	Argument	num_cameras
>3670	Identifier	num_cameras
>3671	Argument	num_pts
>3672	Identifier	num_pts
>3673	Callee	RunSFM_SBA
>3674	Identifier	RunSFM_SBA
>3675	Condition	 
>3676	UnaryOp	! m_use_ceres
>3677	Identifier	m_use_ceres
>3678	UnaryOperator	!
>3705	FunctionDef	BundlerApp 
>3706	ParameterList	int num_pts , int num_cameras , int start_camera , bool fix_points , camera_params_t * init_camera_params , v3_t * \
>3707	Parameter	 
>3708	Identifier	remove_outliers
>3709	ParameterType	bool
>3710	Parameter	 
>3711	Identifier	W
>3712	ParameterType	double *
>3713	Parameter	 
>3714	Identifier	V
>3715	ParameterType	double *
>3716	Parameter	 
>3717	Identifier	U
>3718	ParameterType	double *
>3719	Parameter	 
>3720	Identifier	S
>3721	ParameterType	double *
>3722	Parameter	 
>3723	Identifier	eps2
>3724	ParameterType	double
>3725	Parameter	 
>3726	Identifier	pt_views
>3727	ParameterType	std 
>3728	Parameter	 
>3729	Identifier	colors
>3730	ParameterType	v3_t *
>3731	Parameter	 
>3732	Identifier	added_order
>3733	ParameterType	int *
>3734	Parameter	 
>3735	Identifier	init_pts
>3736	ParameterType	v3_t *
>3737	Parameter	 
>3738	Identifier	init_camera_params
>3739	ParameterType	camera_params_t *
>3740	Parameter	 
>3741	Identifier	fix_points
>3742	ParameterType	bool
>3743	Parameter	 
>3744	Identifier	start_camera
>3745	ParameterType	int
>3746	Parameter	 
>3747	Identifier	num_cameras
>3748	ParameterType	int
>3749	Parameter	 
>3750	Identifier	num_pts
>3751	ParameterType	int
>3752	ReturnType	double
>3753	CompoundStatement	 
>3754	ReturnStatement	 
>3755	MultiplicativeExpression	dist_total / num_dists
>3756	Identifier	num_dists
>3757	Identifier	dist_total
>3758	ExpressionStatement	 
>3759	Identifier	nz_pts
>3760	Statement	 
>3761	Statement	 
>3762	Statement	 
>3763	ExpressionStatement	 
>3764	Identifier	remap
>3765	Statement	 
>3766	Statement	 
>3767	Statement	 
>3768	DoStatement	do
>3769	Condition	 
>3770	RelationalExpression	num_outliers > MIN_OUTLIERS
>3771	Identifier	MIN_OUTLIERS
>3772	Identifier	num_outliers
>3773	CompoundStatement	 
>3774	IfStatement	if ( ! remove_outliers )
>3775	BreakStatement	 
>3776	Condition	 
>3777	UnaryOp	! remove_outliers
>3778	Identifier	remove_outliers
>3779	UnaryOperator	!
>3780	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>3781	CompoundStatement	 
>3782	IfStatement	if ( remap [ i ] != - 1 )
>3783	CompoundStatement	 
>3784	ExpressionStatement	 
>3785	AssignmentExpr	init_pts [ i ] = nz_pts [ remap [ i ] ]
>3786	ArrayIndexing	nz_pts [ remap [ i ] ]
>3787	ArrayIndexing	remap [ i ]
>3788	Identifier	i
>3789	Identifier	remap
>3790	Identifier	nz_pts
>3791	ArrayIndexing	init_pts [ i ]
>3792	Identifier	i
>3793	Identifier	init_pts
>3794	Condition	 
>3795	EqualityExpression	remap [ i ] != - 1
>3796	UnaryOp	- 1
>3797	PrimaryExpression	1
>3798	UnaryOperator	-
>3799	ArrayIndexing	remap [ i ]
>3800	Identifier	i
>3801	Identifier	remap
>3802	IncDecOp	 
>3803	IncDec	++
>3804	Identifier	i
>3805	Condition	 
>3806	RelationalExpression	i < num_pts
>3807	Identifier	num_pts
>3808	Identifier	i
>3809	ForInit	 
>3810	IdentifierDeclStatement	int i = 0 ;
>3811	IdentifierDecl	i = 0
>3812	AssignmentExpr	i = 0
>3813	PrimaryExpression	0
>3814	Identifier	i
>3815	Identifier	i
>3816	IdentifierDeclType	int
>3817	ExpressionStatement	 
>3818	Identifier	projections
>3819	Statement	 
>3820	Statement	 
>3821	Statement	 
>3822	ExpressionStatement	 
>3823	Identifier	vmask
>3824	Statement	 
>3825	Statement	 
>3826	Statement	 
>3827	IfStatement	if ( remove_outliers )
>3828	CompoundStatement	 
>3829	ExpressionStatement	 
>3830	CallExpression	printf ( \"[RunSFM] Removing %d outliers\n\" , num_outliers )
>3831	ArgumentList	\"[RunSFM] Removing %d outliers\n\"
>3832	Argument	num_outliers
>3833	Identifier	num_outliers
>3834	Argument	\"[RunSFM] Removing %d outliers\n\"
>3835	PrimaryExpression	\"[RunSFM] Removing %d outliers\n\"
>3836	Callee	printf
>3837	Identifier	printf
>3838	ExpressionStatement	 
>3839	CallExpression	printf ( \"[RunSFM] outlier removal took %0.3fs\n\" , ( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC )
>3840	ArgumentList	\"[RunSFM] outlier removal took %0.3fs\n\"
>3841	Argument	( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC
>3842	MultiplicativeExpression	( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC
>3843	CastExpression	( double ) CLOCKS_PER_SEC
>3844	Identifier	CLOCKS_PER_SEC
>3845	CastTarget	double
>3846	CastExpression	( double ) ( end - start )
>3847	AdditiveExpression	end - start
>3848	Identifier	start
>3849	Identifier	end
>3850	CastTarget	double
>3851	Argument	\"[RunSFM] outlier removal took %0.3fs\n\"
>3852	PrimaryExpression	\"[RunSFM] outlier removal took %0.3fs\n\"
>3853	Callee	printf
>3854	Identifier	printf
>3855	ExpressionStatement	 
>3856	AssignmentExpr	end = clock ( )
>3857	CallExpression	clock ( )
>3858	ArgumentList	 
>3859	Callee	clock
>3860	Identifier	clock
>3861	Identifier	end
>3862	ExpressionStatement	 
>3863	AssignmentExpr	total_outliers += num_outliers
>3864	Identifier	num_outliers
>3865	Identifier	total_outliers
>3866	ExpressionStatement	 
>3867	AssignmentExpr	num_outliers = outliers . size ( )
>3868	CallExpression	outliers . size ( )
>3869	ArgumentList	 
>3870	Callee	outliers . size
>3871	MemberAccess	outliers . size
>3872	Identifier	size
>3873	Identifier	outliers
>3874	Identifier	num_outliers
>3875	ForStatement	for ( int i = 0 ; i < ( int ) outliers . size ( ) ; i ++ )
>3876	CompoundStatement	 
>3877	ExpressionStatement	 
>3878	CallExpression	pt_views [ idx ] . clear ( )
>3879	ArgumentList	 
>3880	Callee	pt_views [ idx ] . clear
>3881	MemberAccess	pt_views [ idx ] . clear
>3882	Identifier	clear
>3883	ArrayIndexing	pt_views [ idx ]
>3884	Identifier	idx
>3885	Identifier	pt_views
>3886	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>3887	CompoundStatement	 
>3888	ExpressionStatement	 
>3889	AssignmentExpr	GetKey ( added_order [ v ] , k ) . m_extra = - 2
>3890	UnaryOp	- 2
>3891	PrimaryExpression	2
>3892	UnaryOperator	-
>3893	MemberAccess	GetKey ( added_order [ v ] , k ) . m_extra
>3894	Identifier	m_extra
>3895	CallExpression	GetKey ( added_order [ v ] , k )
>3896	ArgumentList	added_order [ v ]
>3897	Argument	k
>3898	Identifier	k
>3899	Argument	added_order [ v ]
>3900	ArrayIndexing	added_order [ v ]
>3901	Identifier	v
>3902	Identifier	added_order
>3903	Callee	GetKey
>3904	Identifier	GetKey
>3905	ExpressionStatement	 
>3906	Statement	 
>3907	Statement	 
>3908	Statement	 
>3909	Statement	 
>3910	Statement	 
>3911	Statement	 
>3912	Statement	 
>3913	Statement	 
>3914	Statement	 
>3915	Statement	 
>3916	Statement	 
>3917	Statement	 
>3918	Statement	 
>3919	Statement	 
>3920	Statement	 
>3921	Statement	 
>3922	Statement	 
>3923	Statement	 
>3924	Statement	 
>3925	Statement	 
>3926	Statement	 
>3927	Statement	 
>3928	Statement	 
>3929	Statement	 
>3930	Statement	 
>3931	IfStatement	if ( GetKey ( added_order [ v ] , k ) . m_extra != idx )
>3932	Statement	 
>3933	Condition	 
>3934	EqualityExpression	GetKey ( added_order [ v ] , k ) . m_extra != idx
>3935	Identifier	idx
>3936	MemberAccess	GetKey ( added_order [ v ] , k ) . m_extra
>3937	Identifier	m_extra
>3938	CallExpression	GetKey ( added_order [ v ] , k )
>3939	ArgumentList	added_order [ v ]
>3940	Argument	k
>3941	Identifier	k
>3942	Argument	added_order [ v ]
>3943	ArrayIndexing	added_order [ v ]
>3944	Identifier	v
>3945	Identifier	added_order
>3946	Callee	GetKey
>3947	Identifier	GetKey
>3948	ExpressionStatement	 
>3949	AssignmentExpr	vmask [ idx * num_cameras + v ] = 0
>3950	PrimaryExpression	0
>3951	ArrayIndexing	vmask [ idx * num_cameras + v ]
>3952	AdditiveExpression	idx * num_cameras + v
>3953	Identifier	v
>3954	MultiplicativeExpression	idx * num_cameras
>3955	Identifier	num_cameras
>3956	Identifier	idx
>3957	Identifier	vmask
>3958	IdentifierDeclStatement	 
>3959	IdentifierDecl	k = pt_views [ idx ] [ j ] . second
>3960	AssignmentExpr	k = pt_views [ idx ] [ j ] . second
>3961	MemberAccess	pt_views [ idx ] [ j ] . second
>3962	Identifier	second
>3963	ArrayIndexing	pt_views [ idx ] [ j ]
>3964	Identifier	j
>3965	ArrayIndexing	pt_views [ idx ]
>3966	Identifier	idx
>3967	Identifier	pt_views
>3968	Identifier	k
>3969	Identifier	k
>3970	IdentifierDeclType	int
>3971	IdentifierDeclStatement	 
>3972	IdentifierDecl	v = pt_views [ idx ] [ j ] . first
>3973	AssignmentExpr	v = pt_views [ idx ] [ j ] . first
>3974	MemberAccess	pt_views [ idx ] [ j ] . first
>3975	Identifier	first
>3976	ArrayIndexing	pt_views [ idx ] [ j ]
>3977	Identifier	j
>3978	ArrayIndexing	pt_views [ idx ]
>3979	Identifier	idx
>3980	Identifier	pt_views
>3981	Identifier	v
>3982	Identifier	v
>3983	IdentifierDeclType	int
>3984	IncDecOp	 
>3985	IncDec	++
>3986	Identifier	j
>3987	Condition	 
>3988	RelationalExpression	j < num_views
>3989	Identifier	num_views
>3990	Identifier	j
>3991	ForInit	 
>3992	IdentifierDeclStatement	int j = 0 ;
>3993	IdentifierDecl	j = 0
>3994	AssignmentExpr	j = 0
>3995	PrimaryExpression	0
>3996	Identifier	j
>3997	Identifier	j
>3998	IdentifierDeclType	int
>3999	IdentifierDeclStatement	 
>4000	IdentifierDecl	num_views = ( int ) pt_views [ idx ] . size ( )
>4001	AssignmentExpr	num_views = ( int ) pt_views [ idx ] . size ( )
>4002	CastExpression	( int ) pt_views [ idx ] . size ( )
>4003	CallExpression	pt_views [ idx ] . size ( )
>4004	ArgumentList	 
>4005	Callee	pt_views [ idx ] . size
>4006	MemberAccess	pt_views [ idx ] . size
>4007	Identifier	size
>4008	ArrayIndexing	pt_views [ idx ]
>4009	Identifier	idx
>4010	Identifier	pt_views
>4011	CastTarget	int
>4012	Identifier	num_views
>4013	Identifier	num_views
>4014	IdentifierDeclType	int
>4015	IfStatement	if ( colors != NULL )
>4016	CompoundStatement	 
>4017	ExpressionStatement	 
>4018	AssignmentExpr	Vz ( colors [ idx ] ) = 0xff
>4019	PrimaryExpression	0xff
>4020	CallExpression	Vz ( colors [ idx ] )
>4021	ArgumentList	colors [ idx ]
>4022	Argument	colors [ idx ]
>4023	ArrayIndexing	colors [ idx ]
>4024	Identifier	idx
>4025	Identifier	colors
>4026	Callee	Vz
>4027	Identifier	Vz
>4028	ExpressionStatement	 
>4029	AssignmentExpr	Vy ( colors [ idx ] ) = 0x0
>4030	PrimaryExpression	0x0
>4031	CallExpression	Vy ( colors [ idx ] )
>4032	ArgumentList	colors [ idx ]
>4033	Argument	colors [ idx ]
>4034	ArrayIndexing	colors [ idx ]
>4035	Identifier	idx
>4036	Identifier	colors
>4037	Callee	Vy
>4038	Identifier	Vy
>4039	ExpressionStatement	 
>4040	AssignmentExpr	Vx ( colors [ idx ] ) = 0x0
>4041	PrimaryExpression	0x0
>4042	CallExpression	Vx ( colors [ idx ] )
>4043	ArgumentList	colors [ idx ]
>4044	Argument	colors [ idx ]
>4045	ArrayIndexing	colors [ idx ]
>4046	Identifier	idx
>4047	Identifier	colors
>4048	Callee	Vx
>4049	Identifier	Vx
>4050	Condition	 
>4051	EqualityExpression	colors != NULL
>4052	Identifier	NULL
>4053	Identifier	colors
>4054	ExpressionStatement	 
>4055	Statement	 
>4056	Statement	 
>4057	Statement	 
>4058	Statement	 
>4059	Statement	 
>4060	Statement	 
>4061	Statement	 
>4062	Statement	 
>4063	Statement	 
>4064	Statement	 
>4065	Statement	 
>4066	Statement	 
>4067	IdentifierDeclStatement	 
>4068	IdentifierDecl	idx = outliers [ i ]
>4069	AssignmentExpr	idx = outliers [ i ]
>4070	ArrayIndexing	outliers [ i ]
>4071	Identifier	i
>4072	Identifier	outliers
>4073	Identifier	idx
>4074	Identifier	idx
>4075	IdentifierDeclType	int
>4076	IncDecOp	 
>4077	IncDec	++
>4078	Identifier	i
>4079	Condition	 
>4080	RelationalExpression	i < ( int ) outliers . size ( )
>4081	CastExpression	( int ) outliers . size ( )
>4082	CallExpression	outliers . size ( )
>4083	ArgumentList	 
>4084	Callee	outliers . size
>4085	MemberAccess	outliers . size
>4086	Identifier	size
>4087	Identifier	outliers
>4088	CastTarget	int
>4089	Identifier	i
>4090	ForInit	 
>4091	IdentifierDeclStatement	int i = 0 ;
>4092	IdentifierDecl	i = 0
>4093	AssignmentExpr	i = 0
>4094	PrimaryExpression	0
>4095	Identifier	i
>4096	Identifier	i
>4097	IdentifierDeclType	int
>4098	Condition	 
>4099	Identifier	remove_outliers
>4100	ExpressionStatement	 
>4101	Statement	 
>4102	Statement	 
>4103	Statement	 
>4104	Statement	 
>4105	Statement	 
>4106	Statement	 
>4107	Statement	 
>4108	Statement	 
>4109	Statement	 
>4110	Statement	 
>4111	Statement	 
>4112	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>4113	CompoundStatement	 
>4114	ExpressionStatement	 
>4115	Identifier	dists
>4116	Statement	 
>4117	Statement	 
>4118	Statement	 
>4119	ForStatement	for ( int i = 0 ; i < NUM_ERROR_BINS ; i ++ )
>4120	CompoundStatement	 
>4121	ExpressionStatement	 
>4122	CallExpression	printf ( \"   E[%0.3e--%0.3e]
>4123	ArgumentList	\"   E[%0.3e--%0.3e]
>4124	Argument	bin_size / ( double ) num_pts_proj
>4125	MultiplicativeExpression	bin_size / ( double ) num_pts_proj
>4126	CastExpression	( double ) num_pts_proj
>4127	Identifier	num_pts_proj
>4128	CastTarget	double
>4129	Identifier	bin_size
>4130	Argument	bin_size
>4131	Identifier	bin_size
>4132	Argument	max
>4133	Identifier	max
>4134	Argument	max - pr_step
>4135	AdditiveExpression	max - pr_step
>4136	Identifier	pr_step
>4137	Identifier	max
>4138	Argument	\"   E[%0.3e--%0.3e]
>4139	PrimaryExpression	\"   E[%0.3e--%0.3e]
>4140	Callee	printf
>4141	Identifier	printf
>4142	IdentifierDeclStatement	 
>4143	IdentifierDecl	bin_size = idx_count - start
>4144	AssignmentExpr	bin_size = idx_count - start
>4145	AdditiveExpression	idx_count - start
>4146	Identifier	start
>4147	Identifier	idx_count
>4148	Identifier	bin_size
>4149	Identifier	bin_size
>4150	IdentifierDeclType	int
>4151	WhileStatement	while ( idx_count < num_pts_proj && dists [ idx_count ] <= max )
>4152	ExpressionStatement	 
>4153	IncDecOp	idx_count ++
>4154	IncDec	++
>4155	Identifier	idx_count
>4156	Condition	 
>4157	AndExpression	idx_count < num_pts_proj && dists [ idx_count ] <= max
>4158	RelationalExpression	dists [ idx_count ] <= max
>4159	Identifier	max
>4160	ArrayIndexing	dists [ idx_count ]
>4161	Identifier	idx_count
>4162	Identifier	dists
>4163	RelationalExpression	idx_count < num_pts_proj
>4164	Identifier	num_pts_proj
>4165	Identifier	idx_count
>4166	IdentifierDeclStatement	 
>4167	IdentifierDecl	start = idx_count
>4168	AssignmentExpr	start = idx_count
>4169	Identifier	idx_count
>4170	Identifier	idx_count
>4171	Identifier	start
>4172	IdentifierDeclType	int
>4173	IdentifierDeclStatement	 
>4174	IdentifierDecl	max = pr_min + ( i + 1 ) * pr_step
>4175	AssignmentExpr	max = pr_min + ( i + 1 ) * pr_step
>4176	AdditiveExpression	pr_min + ( i + 1 ) * pr_step
>4177	MultiplicativeExpression	( i + 1 ) * pr_step
>4178	Identifier	pr_step
>4179	AdditiveExpression	i + 1
>4180	PrimaryExpression	1
>4181	Identifier	i
>4182	Identifier	pr_min
>4183	Identifier	max
>4184	Identifier	max
>4185	IdentifierDeclType	double
>4186	IncDecOp	 
>4187	IncDec	++
>4188	Identifier	i
>4189	Condition	 
>4190	RelationalExpression	i < NUM_ERROR_BINS
>4191	Identifier	NUM_ERROR_BINS
>4192	Identifier	i
>4193	ForInit	 
>4194	IdentifierDeclStatement	int i = 0 ;
>4195	IdentifierDecl	i = 0
>4196	AssignmentExpr	i = 0
>4197	PrimaryExpression	0
>4198	Identifier	i
>4199	Identifier	i
>4200	IdentifierDeclType	int
>4201	IdentifierDeclStatement	 
>4202	IdentifierDecl	idx_count = 0
>4203	AssignmentExpr	idx_count = 0
>4204	PrimaryExpression	0
>4205	Identifier	idx_count
>4206	Identifier	idx_count
>4207	IdentifierDeclType	int
>4208	IdentifierDeclStatement	 
>4209	IdentifierDecl	pr_step = ( pr_max - pr_min ) / NUM_ERROR_BINS
>4210	AssignmentExpr	pr_step = ( pr_max - pr_min ) / NUM_ERROR_BINS
>4211	MultiplicativeExpression	( pr_max - pr_min ) / NUM_ERROR_BINS
>4212	Identifier	NUM_ERROR_BINS
>4213	AdditiveExpression	pr_max - pr_min
>4214	Identifier	pr_min
>4215	Identifier	pr_max
>4216	Identifier	pr_step
>4217	Identifier	pr_step
>4218	IdentifierDeclType	double
>4219	IdentifierDeclStatement	 
>4220	IdentifierDecl	pr_max = dists [ num_pts_proj - 1 ]
>4221	AssignmentExpr	pr_max = dists [ num_pts_proj - 1 ]
>4222	ArrayIndexing	dists [ num_pts_proj - 1 ]
>4223	AdditiveExpression	num_pts_proj - 1
>4224	PrimaryExpression	1
>4225	Identifier	num_pts_proj
>4226	Identifier	dists
>4227	Identifier	pr_max
>4228	Identifier	pr_max
>4229	IdentifierDeclType	double
>4230	IdentifierDeclStatement	 
>4231	IdentifierDecl	pr_min = dists [ 0 ]
>4232	AssignmentExpr	pr_min = dists [ 0 ]
>4233	ArrayIndexing	dists [ 0 ]
>4234	PrimaryExpression	0
>4235	Identifier	dists
>4236	Identifier	pr_min
>4237	Identifier	pr_min
>4238	IdentifierDeclType	double
>4239	ExpressionStatement	 
>4240	CallExpression	qsort ( dists , num_pts_proj , sizeof ( double ) , compare_doubles )
>4241	ArgumentList	dists
>4242	Argument	compare_doubles
>4243	Identifier	compare_doubles
>4244	Argument	sizeof ( double )
>4245	SizeofExpr	sizeof ( double )
>4246	SizeofOperand	double
>4247	Sizeof	sizeof
>4248	Argument	num_pts_proj
>4249	Identifier	num_pts_proj
>4250	Argument	dists
>4251	Identifier	dists
>4252	Callee	qsort
>4253	Identifier	qsort
>4254	Statement	 
>4255	Statement	 
>4256	Statement	 
>4257	Statement	 
>4258	Statement	 
>4259	ForStatement	for ( int j = 0 ; j < num_keys ; j ++ )
>4260	CompoundStatement	 
>4261	ExpressionStatement	 
>4262	IncDecOp	pt_count ++
>4263	IncDec	++
>4264	Identifier	pt_count
>4265	IfStatement	if ( dists [ pt_count ] > thresh )
>4266	CompoundStatement	 
>4267	IfStatement	if ( ! found )
>4268	CompoundStatement	 
>4269	ExpressionStatement	 
>4270	CallExpression	reproj_errors . push_back ( dists [ pt_count ] )
>4271	ArgumentList	dists [ pt_count ]
>4272	Argument	dists [ pt_count ]
>4273	ArrayIndexing	dists [ pt_count ]
>4274	Identifier	pt_count
>4275	Identifier	dists
>4276	Callee	reproj_errors . push_back
>4277	MemberAccess	reproj_errors . push_back
>4278	Identifier	push_back
>4279	Identifier	reproj_errors
>4280	ExpressionStatement	 
>4281	CallExpression	outliers . push_back ( pt_idx )
>4282	ArgumentList	pt_idx
>4283	Argument	pt_idx
>4284	Identifier	pt_idx
>4285	Callee	outliers . push_back
>4286	MemberAccess	outliers . push_back
>4287	Identifier	push_back
>4288	Identifier	outliers
>4289	Condition	 
>4290	UnaryOp	! found
>4291	Identifier	found
>4292	UnaryOperator	!
>4293	ForStatement	for ( int k = 0 ; k < ( int ) outliers . size ( ) ; k ++ )
>4294	CompoundStatement	 
>4295	IfStatement	if ( outliers [ k ] == pt_idx )
>4296	CompoundStatement	 
>4297	BreakStatement	 
>4298	ExpressionStatement	 
>4299	AssignmentExpr	found = true
>4300	Identifier	true
>4301	Identifier	found
>4302	Condition	 
>4303	EqualityExpression	outliers [ k ] == pt_idx
>4304	Identifier	pt_idx
>4305	ArrayIndexing	outliers [ k ]
>4306	Identifier	k
>4307	Identifier	outliers
>4308	IncDecOp	 
>4309	IncDec	++
>4310	Identifier	k
>4311	Condition	 
>4312	RelationalExpression	k < ( int ) outliers . size ( )
>4313	CastExpression	( int ) outliers . size ( )
>4314	CallExpression	outliers . size ( )
>4315	ArgumentList	 
>4316	Callee	outliers . size
>4317	MemberAccess	outliers . size
>4318	Identifier	size
>4319	Identifier	outliers
>4320	CastTarget	int
>4321	Identifier	k
>4322	ForInit	 
>4323	IdentifierDeclStatement	int k = 0 ;
>4324	IdentifierDecl	k = 0
>4325	AssignmentExpr	k = 0
>4326	PrimaryExpression	0
>4327	Identifier	k
>4328	Identifier	k
>4329	IdentifierDeclType	int
>4330	IdentifierDeclStatement	 
>4331	IdentifierDecl	found = false
>4332	AssignmentExpr	found = false
>4333	Identifier	false
>4334	Identifier	false
>4335	Identifier	found
>4336	IdentifierDeclType	bool
>4337	Condition	 
>4338	RelationalExpression	dists [ pt_count ] > thresh
>4339	Identifier	thresh
>4340	ArrayIndexing	dists [ pt_count ]
>4341	Identifier	pt_count
>4342	Identifier	dists
>4343	IfStatement	if ( m_use_point_constraints && Vx ( m_point_constraints [ pt_idx ] ) != 0.0 )
>4344	CompoundStatement	 
>4345	ContinueStatement	 
>4346	ExpressionStatement	 
>4347	IncDecOp	pt_count ++
>4348	IncDec	++
>4349	Identifier	pt_count
>4350	Condition	 
>4351	AndExpression	m_use_point_constraints && Vx ( m_point_constraints [ pt_idx ] ) != 0.0
>4352	EqualityExpression	Vx ( m_point_constraints [ pt_idx ] ) != 0.0
>4353	PrimaryExpression	0.0
>4354	CallExpression	Vx ( m_point_constraints [ pt_idx ] )
>4355	ArgumentList	m_point_constraints [ pt_idx ]
>4356	Argument	m_point_constraints [ pt_idx ]
>4357	ArrayIndexing	m_point_constraints [ pt_idx ]
>4358	Identifier	pt_idx
>4359	Identifier	m_point_constraints
>4360	Callee	Vx
>4361	Identifier	Vx
>4362	Identifier	m_use_point_constraints
>4363	IfStatement	if ( pt_idx < 0 )
>4364	ContinueStatement	 
>4365	Condition	 
>4366	RelationalExpression	pt_idx < 0
>4367	PrimaryExpression	0
>4368	Identifier	pt_idx
>4369	IdentifierDeclStatement	 
>4370	IdentifierDecl	pt_idx = GetKey ( added_order [ i ] , j ) . m_extra
>4371	AssignmentExpr	pt_idx = GetKey ( added_order [ i ] , j ) . m_extra
>4372	MemberAccess	GetKey ( added_order [ i ] , j ) . m_extra
>4373	Identifier	m_extra
>4374	CallExpression	GetKey ( added_order [ i ] , j )
>4375	ArgumentList	added_order [ i ]
>4376	Argument	j
>4377	Identifier	j
>4378	Argument	added_order [ i ]
>4379	ArrayIndexing	added_order [ i ]
>4380	Identifier	i
>4381	Identifier	added_order
>4382	Callee	GetKey
>4383	Identifier	GetKey
>4384	Identifier	pt_idx
>4385	Identifier	pt_idx
>4386	IdentifierDeclType	int
>4387	IncDecOp	 
>4388	IncDec	++
>4389	Identifier	j
>4390	Condition	 
>4391	RelationalExpression	j < num_keys
>4392	Identifier	num_keys
>4393	Identifier	j
>4394	ForInit	 
>4395	IdentifierDeclStatement	int j = 0 ;
>4396	IdentifierDecl	j = 0
>4397	AssignmentExpr	j = 0
>4398	PrimaryExpression	0
>4399	Identifier	j
>4400	Identifier	j
>4401	IdentifierDeclType	int
>4402	ExpressionStatement	 
>4403	AssignmentExpr	pt_count = 0
>4404	PrimaryExpression	0
>4405	Identifier	pt_count
>4406	ExpressionStatement	 
>4407	AssignmentExpr	global_num_observations += num_pts_proj
>4408	Identifier	num_pts_proj
>4409	Identifier	global_num_observations
>4410	ExpressionStatement	 
>4411	AssignmentExpr	global_reprojection_error += sum
>4412	Identifier	sum
>4413	Identifier	global_reprojection_error
>4414	ExpressionStatement	 
>4415	Statement	 
>4416	Statement	 
>4417	Statement	 
>4418	Statement	 
>4419	Statement	 
>4420	Statement	 
>4421	Statement	 
>4422	Statement	 
>4423	Statement	 
>4424	Statement	 
>4425	Statement	 
>4426	Statement	 
>4427	Statement	 
>4428	Statement	 
>4429	Statement	 
>4430	Statement	 
>4431	Statement	 
>4432	Statement	 
>4433	Statement	 
>4434	Statement	 
>4435	Statement	 
>4436	Statement	 
>4437	Statement	 
>4438	Statement	 
>4439	Statement	 
>4440	Statement	 
>4441	Statement	 
>4442	Statement	 
>4443	Statement	 
>4444	Statement	 
>4445	Statement	 
>4446	Statement	 
>4447	IdentifierDeclStatement	 
>4448	IdentifierDecl	avg = sum / num_pts_proj
>4449	AssignmentExpr	avg = sum / num_pts_proj
>4450	MultiplicativeExpression	sum / num_pts_proj
>4451	Identifier	num_pts_proj
>4452	Identifier	sum
>4453	Identifier	avg
>4454	Identifier	avg
>4455	IdentifierDeclType	double
>4456	ForStatement	for ( int j = 0 ; j < num_pts_proj ; j ++ )
>4457	CompoundStatement	 
>4458	ExpressionStatement	 
>4459	AssignmentExpr	sum += dists [ j ]
>4460	ArrayIndexing	dists [ j ]
>4461	Identifier	j
>4462	Identifier	dists
>4463	Identifier	sum
>4464	IncDecOp	 
>4465	IncDec	++
>4466	Identifier	j
>4467	Condition	 
>4468	RelationalExpression	j < num_pts_proj
>4469	Identifier	num_pts_proj
>4470	Identifier	j
>4471	ForInit	 
>4472	IdentifierDeclStatement	int j = 0 ;
>4473	IdentifierDecl	j = 0
>4474	AssignmentExpr	j = 0
>4475	PrimaryExpression	0
>4476	Identifier	j
>4477	Identifier	j
>4478	IdentifierDeclType	int
>4479	IdentifierDeclStatement	 
>4480	IdentifierDecl	sum = 0.0
>4481	AssignmentExpr	sum = 0.0
>4482	PrimaryExpression	0.0
>4483	Identifier	sum
>4484	Identifier	sum
>4485	IdentifierDeclType	double
>4486	ExpressionStatement	 
>4487	AssignmentExpr	thresh = CLAMP ( thresh , m_min_proj_error_threshold , m_max_proj_error_threshold )
>4488	CallExpression	CLAMP ( thresh , m_min_proj_error_threshold , m_max_proj_error_threshold )
>4489	ArgumentList	thresh
>4490	Argument	m_max_proj_error_threshold
>4491	Identifier	m_max_proj_error_threshold
>4492	Argument	m_min_proj_error_threshold
>4493	Identifier	m_min_proj_error_threshold
>4494	Argument	thresh
>4495	Identifier	thresh
>4496	Callee	CLAMP
>4497	Identifier	CLAMP
>4498	Identifier	thresh
>4499	IdentifierDeclStatement	 
>4500	IdentifierDecl	thresh = 1.2 * NUM_STDDEV * med
>4501	AssignmentExpr	thresh = 1.2 * NUM_STDDEV * med
>4502	MultiplicativeExpression	1.2 * NUM_STDDEV * med
>4503	MultiplicativeExpression	NUM_STDDEV * med
>4504	Identifier	med
>4505	Identifier	NUM_STDDEV
>4506	PrimaryExpression	1.2
>4507	Identifier	thresh
>4508	Identifier	thresh
>4509	IdentifierDeclType	double
>4510	Statement	 
>4511	Statement	 
>4512	Statement	 
>4513	ExpressionStatement	 
>4514	CallExpression	median_copy ( num_pts_proj , dists )
>4515	ArgumentList	num_pts_proj
>4516	Argument	dists
>4517	Identifier	dists
>4518	Argument	num_pts_proj
>4519	Identifier	num_pts_proj
>4520	Callee	median_copy
>4521	Identifier	median_copy
>4522	IdentifierDeclStatement	 
>4523	IdentifierDecl	med = kth_element_copy ( num_pts_proj , iround ( 0.8 * num_pts_proj ) , dists )
>4524	AssignmentExpr	med = kth_element_copy ( num_pts_proj , iround ( 0.8 * num_pts_proj ) , dists )
>4525	CallExpression	kth_element_copy ( num_pts_proj , iround ( 0.8 * num_pts_proj ) , dists )
>4526	ArgumentList	num_pts_proj
>4527	Argument	dists
>4528	Identifier	dists
>4529	Argument	iround ( 0.8 * num_pts_proj )
>4530	CallExpression	iround ( 0.8 * num_pts_proj )
>4531	ArgumentList	0.8 * num_pts_proj
>4532	Argument	0.8 * num_pts_proj
>4533	MultiplicativeExpression	0.8 * num_pts_proj
>4534	Identifier	num_pts_proj
>4535	PrimaryExpression	0.8
>4536	Callee	iround
>4537	Identifier	iround
>4538	Argument	num_pts_proj
>4539	Identifier	num_pts_proj
>4540	Callee	kth_element_copy
>4541	Identifier	kth_element_copy
>4542	Identifier	med
>4543	Identifier	med
>4544	IdentifierDeclType	double
>4545	ForStatement	for ( iter = m_image_data [ added_order [ i ] ] . m_keys . begin ( ) ; iter != m_image_data [ added_order [ i ] ] \
>4546	CompoundStatement	 
>4547	IfStatement	if ( key . m_extra >= 0 )
>4548	CompoundStatement	 
>4549	ExpressionStatement	 
>4550	IncDecOp	pt_count ++
>4551	IncDec	++
>4552	Identifier	pt_count
>4553	ExpressionStatement	 
>4554	AssignmentExpr	dists [ pt_count ] = dist
>4555	Identifier	dist
>4556	ArrayIndexing	dists [ pt_count ]
>4557	Identifier	pt_count
>4558	Identifier	dists
>4559	ExpressionStatement	 
>4560	IncDecOp	num_dists ++
>4561	IncDec	++
>4562	Identifier	num_dists
>4563	ExpressionStatement	 
>4564	AssignmentExpr	dist_total += dist
>4565	Identifier	dist
>4566	Identifier	dist_total
>4567	ExpressionStatement	 
>4568	AssignmentExpr	dist = sqrt ( dx * dx + dy * dy )
>4569	CallExpression	sqrt ( dx * dx + dy * dy )
>4570	ArgumentList	dx * dx + dy * dy
>4571	Argument	dx * dx + dy * dy
>4572	AdditiveExpression	dx * dx + dy * dy
>4573	MultiplicativeExpression	dy * dy
>4574	Identifier	dy
>4575	Identifier	dy
>4576	MultiplicativeExpression	dx * dx
>4577	Identifier	dx
>4578	Identifier	dx
>4579	Callee	sqrt
>4580	Identifier	sqrt
>4581	Identifier	dist
>4582	ExpressionStatement	 
>4583	AssignmentExpr	dy = pr [ 1 ] - key . m_y
>4584	AdditiveExpression	pr [ 1 ] - key . m_y
>4585	MemberAccess	key . m_y
>4586	Identifier	m_y
>4587	Identifier	key
>4588	ArrayIndexing	pr [ 1 ]
>4589	PrimaryExpression	1
>4590	Identifier	pr
>4591	Identifier	dy
>4592	ExpressionStatement	 
>4593	AssignmentExpr	dx = pr [ 0 ] - key . m_x
>4594	AdditiveExpression	pr [ 0 ] - key . m_x
>4595	MemberAccess	key . m_x
>4596	Identifier	m_x
>4597	Identifier	key
>4598	ArrayIndexing	pr [ 0 ]
>4599	PrimaryExpression	0
>4600	Identifier	pr
>4601	Identifier	dx
>4602	IfStatement	if ( m_optimize_for_fisheye )
>4603	CompoundStatement	 
>4604	ExpressionStatement	 
>4605	CallExpression	m_image_data [ added_order [ i ] ] . DistortPoint ( x , y , pr [ 0 ] , pr [ 1 ] )
>4606	ArgumentList	x
>4607	Argument	pr [ 1 ]
>4608	ArrayIndexing	pr [ 1 ]
>4609	PrimaryExpression	1
>4610	Identifier	pr
>4611	Argument	pr [ 0 ]
>4612	ArrayIndexing	pr [ 0 ]
>4613	PrimaryExpression	0
>4614	Identifier	pr
>4615	Argument	y
>4616	Identifier	y
>4617	Argument	x
>4618	Identifier	x
>4619	Callee	m_image_data [ added_order [ i ] ] . DistortPoint
>4620	MemberAccess	m_image_data [ added_order [ i ] ] . DistortPoint
>4621	Identifier	DistortPoint
>4622	ArrayIndexing	m_image_data [ added_order [ i ] ]
>4623	ArrayIndexing	added_order [ i ]
>4624	Identifier	i
>4625	Identifier	added_order
>4626	Identifier	m_image_data
>4627	IdentifierDeclStatement	 
>4628	IdentifierDecl	y = pr [ 1 ]
>4629	AssignmentExpr	y = pr [ 1 ]
>4630	ArrayIndexing	pr [ 1 ]
>4631	PrimaryExpression	1
>4632	Identifier	pr
>4633	Identifier	y
>4634	Identifier	y
>4635	IdentifierDeclType	double
>4636	IdentifierDecl	x = pr [ 0 ]
>4637	AssignmentExpr	x = pr [ 0 ]
>4638	ArrayIndexing	pr [ 0 ]
>4639	PrimaryExpression	0
>4640	Identifier	pr
>4641	Identifier	x
>4642	Identifier	x
>4643	IdentifierDeclType	double
>4644	Condition	 
>4645	Identifier	m_optimize_for_fisheye
>4646	ExpressionStatement	 
>4647	CallExpression	sfm_project_rd ( & ( init_camera_params [ i ] ) , K , init_camera_params [ i ] . k , init_camera_params [ i ] . \
>4648	ArgumentList	& ( init_camera_params [ i ] )
>4649	Argument	true
>4650	Identifier	true
>4651	Argument	m_estimate_distortion
>4652	Identifier	m_estimate_distortion
>4653	Argument	pr
>4654	Identifier	pr
>4655	Argument	b
>4656	Identifier	b
>4657	Argument	dt
>4658	Identifier	dt
>4659	Argument	init_camera_params [ i ] . R
>4660	MemberAccess	init_camera_params [ i ] . R
>4661	Identifier	R
>4662	ArrayIndexing	init_camera_params [ i ]
>4663	Identifier	i
>4664	Identifier	init_camera_params
>4665	Argument	init_camera_params [ i ] . k
>4666	MemberAccess	init_camera_params [ i ] . k
>4667	Identifier	k
>4668	ArrayIndexing	init_camera_params [ i ]
>4669	Identifier	i
>4670	Identifier	init_camera_params
>4671	Argument	K
>4672	Identifier	K
>4673	Argument	& ( init_camera_params [ i ] )
>4674	UnaryOp	& ( init_camera_params [ i ] )
>4675	ArrayIndexing	init_camera_params [ i ]
>4676	Identifier	i
>4677	Identifier	init_camera_params
>4678	UnaryOperator	&
>4679	Callee	sfm_project_rd
>4680	Identifier	sfm_project_rd
>4681	ExpressionStatement	 
>4682	AssignmentExpr	b [ 2 ] = Vz ( nz_pts [ remap [ pt_idx ] ] )
>4683	CallExpression	Vz ( nz_pts [ remap [ pt_idx ] ] )
>4684	ArgumentList	nz_pts [ remap [ pt_idx ] ]
>4685	Argument	nz_pts [ remap [ pt_idx ] ]
>4686	ArrayIndexing	nz_pts [ remap [ pt_idx ] ]
>4687	ArrayIndexing	remap [ pt_idx ]
>4688	Identifier	pt_idx
>4689	Identifier	remap
>4690	Identifier	nz_pts
>4691	Callee	Vz
>4692	Identifier	Vz
>4693	ArrayIndexing	b [ 2 ]
>4694	PrimaryExpression	2
>4695	Identifier	b
>4696	ExpressionStatement	 
>4697	AssignmentExpr	b [ 1 ] = Vy ( nz_pts [ remap [ pt_idx ] ] )
>4698	CallExpression	Vy ( nz_pts [ remap [ pt_idx ] ] )
>4699	ArgumentList	nz_pts [ remap [ pt_idx ] ]
>4700	Argument	nz_pts [ remap [ pt_idx ] ]
>4701	ArrayIndexing	nz_pts [ remap [ pt_idx ] ]
>4702	ArrayIndexing	remap [ pt_idx ]
>4703	Identifier	pt_idx
>4704	Identifier	remap
>4705	Identifier	nz_pts
>4706	Callee	Vy
>4707	Identifier	Vy
>4708	ArrayIndexing	b [ 1 ]
>4709	PrimaryExpression	1
>4710	Identifier	b
>4711	ExpressionStatement	 
>4712	AssignmentExpr	b [ 0 ] = Vx ( nz_pts [ remap [ pt_idx ] ] )
>4713	CallExpression	Vx ( nz_pts [ remap [ pt_idx ] ] )
>4714	ArgumentList	nz_pts [ remap [ pt_idx ] ]
>4715	Argument	nz_pts [ remap [ pt_idx ] ]
>4716	ArrayIndexing	nz_pts [ remap [ pt_idx ] ]
>4717	ArrayIndexing	remap [ pt_idx ]
>4718	Identifier	pt_idx
>4719	Identifier	remap
>4720	Identifier	nz_pts
>4721	Callee	Vx
>4722	Identifier	Vx
>4723	ArrayIndexing	b [ 0 ]
>4724	PrimaryExpression	0
>4725	Identifier	b
>4726	IdentifierDeclStatement	 
>4727	IdentifierDecl	pt_idx = key . m_extra
>4728	AssignmentExpr	pt_idx = key . m_extra
>4729	MemberAccess	key . m_extra
>4730	Identifier	m_extra
>4731	Identifier	key
>4732	Identifier	pt_idx
>4733	Identifier	pt_idx
>4734	IdentifierDeclType	int
>4735	IdentifierDeclStatement	 
>4736	IdentifierDecl	dist
>4737	Identifier	dist
>4738	IdentifierDeclType	double
>4739	IdentifierDecl	dy
>4740	Identifier	dy
>4741	IdentifierDeclType	double
>4742	IdentifierDecl	dx
>4743	Identifier	dx
>4744	IdentifierDeclType	double
>4745	IdentifierDeclStatement	 
>4746	IdentifierDecl	pr [ 2 ]
>4747	PrimaryExpression	2
>4748	Identifier	pr
>4749	IdentifierDeclType	double [ 2 ]
>4750	IdentifierDecl	b [ 3 ]
>4751	PrimaryExpression	3
>4752	Identifier	b
>4753	IdentifierDeclType	double [ 3 ]
>4754	Condition	 
>4755	RelationalExpression	key . m_extra >= 0
>4756	PrimaryExpression	0
>4757	MemberAccess	key . m_extra
>4758	Identifier	m_extra
>4759	Identifier	key
>4760	IdentifierDeclStatement	 
>4761	IdentifierDecl	& key = * iter
>4762	AssignmentExpr	& key = * iter
>4763	UnaryOp	* iter
>4764	Identifier	iter
>4765	UnaryOperator	*
>4766	Identifier	key
>4767	Identifier	key
>4768	IdentifierDeclType	const Keypoint &
>4769	IncDecOp	 
>4770	IncDec	++
>4771	Identifier	iter
>4772	Condition	 
>4773	EqualityExpression	iter != m_image_data [ added_order [ i ] ] . m_keys . end ( )
>4774	CallExpression	m_image_data [ added_order [ i ] ] . m_keys . end ( )
>4775	ArgumentList	 
>4776	Callee	m_image_data [ added_order [ i ] ] . m_keys . end
>4777	MemberAccess	m_image_data [ added_order [ i ] ] . m_keys . end
>4778	Identifier	end
>4779	MemberAccess	m_image_data [ added_order [ i ] ] . m_keys
>4780	Identifier	m_keys
>4781	ArrayIndexing	m_image_data [ added_order [ i ] ]
>4782	ArrayIndexing	added_order [ i ]
>4783	Identifier	i
>4784	Identifier	added_order
>4785	Identifier	m_image_data
>4786	Identifier	iter
>4787	ForInit	 
>4788	AssignmentExpr	iter = m_image_data [ added_order [ i ] ] . m_keys . begin ( )
>4789	CallExpression	m_image_data [ added_order [ i ] ] . m_keys . begin ( )
>4790	ArgumentList	 
>4791	Callee	m_image_data [ added_order [ i ] ] . m_keys . begin
>4792	MemberAccess	m_image_data [ added_order [ i ] ] . m_keys . begin
>4793	Identifier	begin
>4794	MemberAccess	m_image_data [ added_order [ i ] ] . m_keys
>4795	Identifier	m_keys
>4796	ArrayIndexing	m_image_data [ added_order [ i ] ]
>4797	ArrayIndexing	added_order [ i ]
>4798	Identifier	i
>4799	Identifier	added_order
>4800	Identifier	m_image_data
>4801	Identifier	iter
>4802	IdentifierDeclStatement	 
>4803	IdentifierDecl	iter
>4804	Identifier	iter
>4805	IdentifierDeclType	std 
>4806	IdentifierDeclStatement	 
>4807	IdentifierDecl	pt_count = 0
>4808	AssignmentExpr	pt_count = 0
>4809	PrimaryExpression	0
>4810	Identifier	pt_count
>4811	Identifier	pt_count
>4812	IdentifierDeclType	int
>4813	IdentifierDeclStatement	 
>4814	IdentifierDecl	* dists = new double [ num_pts_proj ]
>4815	AssignmentExpr	* dists = new double [ num_pts_proj ]
>4816	Identifier	num_pts_proj
>4817	Identifier	num_pts_proj
>4818	Identifier	dists
>4819	IdentifierDeclType	double *
>4820	ForStatement	for ( int j = 0 ; j < num_keys ; j ++ )
>4821	CompoundStatement	 
>4822	IfStatement	if ( GetKey ( added_order [ i ] , j ) . m_extra >= 0 )
>4823	CompoundStatement	 
>4824	ExpressionStatement	 
>4825	IncDecOp	num_pts_proj ++
>4826	IncDec	++
>4827	Identifier	num_pts_proj
>4828	Condition	 
>4829	RelationalExpression	GetKey ( added_order [ i ] , j ) . m_extra >= 0
>4830	PrimaryExpression	0
>4831	MemberAccess	GetKey ( added_order [ i ] , j ) . m_extra
>4832	Identifier	m_extra
>4833	CallExpression	GetKey ( added_order [ i ] , j )
>4834	ArgumentList	added_order [ i ]
>4835	Argument	j
>4836	Identifier	j
>4837	Argument	added_order [ i ]
>4838	ArrayIndexing	added_order [ i ]
>4839	Identifier	i
>4840	Identifier	added_order
>4841	Callee	GetKey
>4842	Identifier	GetKey
>4843	IncDecOp	 
>4844	IncDec	++
>4845	Identifier	j
>4846	Condition	 
>4847	RelationalExpression	j < num_keys
>4848	Identifier	num_keys
>4849	Identifier	j
>4850	ForInit	 
>4851	IdentifierDeclStatement	int j = 0 ;
>4852	IdentifierDecl	j = 0
>4853	AssignmentExpr	j = 0
>4854	PrimaryExpression	0
>4855	Identifier	j
>4856	Identifier	j
>4857	IdentifierDeclType	int
>4858	IdentifierDeclStatement	 
>4859	IdentifierDecl	num_pts_proj = 0
>4860	AssignmentExpr	num_pts_proj = 0
>4861	PrimaryExpression	0
>4862	Identifier	num_pts_proj
>4863	Identifier	num_pts_proj
>4864	IdentifierDeclType	int
>4865	IdentifierDeclStatement	 
>4866	IdentifierDecl	num_keys = GetNumKeys ( added_order [ i ] )
>4867	AssignmentExpr	num_keys = GetNumKeys ( added_order [ i ] )
>4868	CallExpression	GetNumKeys ( added_order [ i ] )
>4869	ArgumentList	added_order [ i ]
>4870	Argument	added_order [ i ]
>4871	ArrayIndexing	added_order [ i ]
>4872	Identifier	i
>4873	Identifier	added_order
>4874	Callee	GetNumKeys
>4875	Identifier	GetNumKeys
>4876	Identifier	num_keys
>4877	Identifier	num_keys
>4878	IdentifierDeclType	int
>4879	IfStatement	if ( data . m_known_intrinsics )
>4880	CompoundStatement	 
>4881	ExpressionStatement	 
>4882	CallExpression	InvertDistortion ( 8 , 6 , 0.0 , max_radius , k_dist , init_camera_params [ i ] . k_inv )
>4883	ArgumentList	8
>4884	Argument	init_camera_params [ i ] . k_inv
>4885	MemberAccess	init_camera_params [ i ] . k_inv
>4886	Identifier	k_inv
>4887	ArrayIndexing	init_camera_params [ i ]
>4888	Identifier	i
>4889	Identifier	init_camera_params
>4890	Argument	k_dist
>4891	Identifier	k_dist
>4892	Argument	max_radius
>4893	Identifier	max_radius
>4894	Argument	0.0
>4895	PrimaryExpression	0.0
>4896	Argument	6
>4897	PrimaryExpression	6
>4898	Argument	8
>4899	PrimaryExpression	8
>4900	Callee	InvertDistortion
>4901	Identifier	InvertDistortion
>4902	IdentifierDeclStatement	 
>4903	IdentifierDecl	max_radius = sqrt ( w_2 * w_2 + h_2 * h_2 ) / init_camera_params [ i ] . K_known [ 0 ]
>4904	AssignmentExpr	max_radius = sqrt ( w_2 * w_2 + h_2 * h_2 ) / init_camera_params [ i ] . K_known [ 0 ]
>4905	MultiplicativeExpression	sqrt ( w_2 * w_2 + h_2 * h_2 ) / init_camera_params [ i ] . K_known [ 0 ]
>4906	ArrayIndexing	init_camera_params [ i ] . K_known [ 0 ]
>4907	PrimaryExpression	0
>4908	MemberAccess	init_camera_params [ i ] . K_known
>4909	Identifier	K_known
>4910	ArrayIndexing	init_camera_params [ i ]
>4911	Identifier	i
>4912	Identifier	init_camera_params
>4913	CallExpression	sqrt ( w_2 * w_2 + h_2 * h_2 )
>4914	ArgumentList	w_2 * w_2 + h_2 * h_2
>4915	Argument	w_2 * w_2 + h_2 * h_2
>4916	AdditiveExpression	w_2 * w_2 + h_2 * h_2
>4917	MultiplicativeExpression	h_2 * h_2
>4918	Identifier	h_2
>4919	Identifier	h_2
>4920	MultiplicativeExpression	w_2 * w_2
>4921	Identifier	w_2
>4922	Identifier	w_2
>4923	Callee	sqrt
>4924	Identifier	sqrt
>4925	Identifier	max_radius
>4926	Identifier	max_radius
>4927	IdentifierDeclType	double
>4928	IdentifierDeclStatement	 
>4929	IdentifierDecl	h_2 = 0.5 * data . GetHeight ( )
>4930	AssignmentExpr	h_2 = 0.5 * data . GetHeight ( )
>4931	MultiplicativeExpression	0.5 * data . GetHeight ( )
>4932	CallExpression	data . GetHeight ( )
>4933	ArgumentList	 
>4934	Callee	data . GetHeight
>4935	MemberAccess	data . GetHeight
>4936	Identifier	GetHeight
>4937	Identifier	data
>4938	PrimaryExpression	0.5
>4939	Identifier	h_2
>4940	Identifier	h_2
>4941	IdentifierDeclType	double
>4942	IdentifierDeclStatement	 
>4943	IdentifierDecl	w_2 = 0.5 * data . GetWidth ( )
>4944	AssignmentExpr	w_2 = 0.5 * data . GetWidth ( )
>4945	MultiplicativeExpression	0.5 * data . GetWidth ( )
>4946	CallExpression	data . GetWidth ( )
>4947	ArgumentList	 
>4948	Callee	data . GetWidth
>4949	MemberAccess	data . GetWidth
>4950	Identifier	GetWidth
>4951	Identifier	data
>4952	PrimaryExpression	0.5
>4953	Identifier	w_2
>4954	Identifier	w_2
>4955	IdentifierDeclType	double
>4956	IdentifierDeclStatement	 
>4957	IdentifierDecl	k_dist [ 8 ] = { 0.0 , 1.0 , 0.0 , k [ 0 ] , 0.0 , k [ 1 ] , 0.0 , k [ 4 ] }
>4958	AssignmentExpr	k_dist [ 8 ] = { 0.0 , 1.0 , 0.0 , k [ 0 ] , 0.0 , k [ 1 ] , 0.0 , k [ 4 ] }
>4959	InitializerList	0.0
>4960	ArrayIndexing	k [ 4 ]
>4961	PrimaryExpression	4
>4962	Identifier	k
>4963	PrimaryExpression	0.0
>4964	ArrayIndexing	k [ 1 ]
>4965	PrimaryExpression	1
>4966	Identifier	k
>4967	PrimaryExpression	0.0
>4968	ArrayIndexing	k [ 0 ]
>4969	PrimaryExpression	0
>4970	Identifier	k
>4971	PrimaryExpression	0.0
>4972	PrimaryExpression	1.0
>4973	PrimaryExpression	0.0
>4974	Identifier	k_dist
>4975	PrimaryExpression	8
>4976	Identifier	k_dist
>4977	IdentifierDeclType	double [ 8 ]
>4978	IdentifierDeclStatement	 
>4979	IdentifierDecl	* k = init_camera_params [ i ] . k_known
>4980	AssignmentExpr	* k = init_camera_params [ i ] . k_known
>4981	MemberAccess	init_camera_params [ i ] . k_known
>4982	Identifier	k_known
>4983	ArrayIndexing	init_camera_params [ i ]
>4984	Identifier	i
>4985	Identifier	init_camera_params
>4986	Identifier	k
>4987	Identifier	k
>4988	IdentifierDeclType	double *
>4989	Condition	 
>4990	MemberAccess	data . m_known_intrinsics
>4991	Identifier	m_known_intrinsics
>4992	Identifier	data
>4993	IfStatement	if ( m_estimate_distortion )
>4994	CompoundStatement	 
>4995	ExpressionStatement	 
>4996	CallExpression	InvertDistortion ( 6 , 6 , 0.0 , max_radius , k_dist , init_camera_params [ i ] . k_inv )
>4997	ArgumentList	6
>4998	Argument	init_camera_params [ i ] . k_inv
>4999	MemberAccess	init_camera_params [ i ] . k_inv
>5000	Identifier	k_inv
>5001	ArrayIndexing	init_camera_params [ i ]
>5002	Identifier	i
>5003	Identifier	init_camera_params
>5004	Argument	k_dist
>5005	Identifier	k_dist
>5006	Argument	max_radius
>5007	Identifier	max_radius
>5008	Argument	0.0
>5009	PrimaryExpression	0.0
>5010	Argument	6
>5011	PrimaryExpression	6
>5012	Argument	6
>5013	PrimaryExpression	6
>5014	Callee	InvertDistortion
>5015	Identifier	InvertDistortion
>5016	IdentifierDeclStatement	 
>5017	IdentifierDecl	max_radius = sqrt ( w_2 * w_2 + h_2 * h_2 ) / init_camera_params [ i ] . f
>5018	AssignmentExpr	max_radius = sqrt ( w_2 * w_2 + h_2 * h_2 ) / init_camera_params [ i ] . f
>5019	MultiplicativeExpression	sqrt ( w_2 * w_2 + h_2 * h_2 ) / init_camera_params [ i ] . f
>5020	MemberAccess	init_camera_params [ i ] . f
>5021	Identifier	f
>5022	ArrayIndexing	init_camera_params [ i ]
>5023	Identifier	i
>5024	Identifier	init_camera_params
>5025	CallExpression	sqrt ( w_2 * w_2 + h_2 * h_2 )
>5026	ArgumentList	w_2 * w_2 + h_2 * h_2
>5027	Argument	w_2 * w_2 + h_2 * h_2
>5028	AdditiveExpression	w_2 * w_2 + h_2 * h_2
>5029	MultiplicativeExpression	h_2 * h_2
>5030	Identifier	h_2
>5031	Identifier	h_2
>5032	MultiplicativeExpression	w_2 * w_2
>5033	Identifier	w_2
>5034	Identifier	w_2
>5035	Callee	sqrt
>5036	Identifier	sqrt
>5037	Identifier	max_radius
>5038	Identifier	max_radius
>5039	IdentifierDeclType	double
>5040	IdentifierDeclStatement	 
>5041	IdentifierDecl	h_2 = 0.5 * data . GetHeight ( )
>5042	AssignmentExpr	h_2 = 0.5 * data . GetHeight ( )
>5043	MultiplicativeExpression	0.5 * data . GetHeight ( )
>5044	CallExpression	data . GetHeight ( )
>5045	ArgumentList	 
>5046	Callee	data . GetHeight
>5047	MemberAccess	data . GetHeight
>5048	Identifier	GetHeight
>5049	Identifier	data
>5050	PrimaryExpression	0.5
>5051	Identifier	h_2
>5052	Identifier	h_2
>5053	IdentifierDeclType	double
>5054	IdentifierDeclStatement	 
>5055	IdentifierDecl	w_2 = 0.5 * data . GetWidth ( )
>5056	AssignmentExpr	w_2 = 0.5 * data . GetWidth ( )
>5057	MultiplicativeExpression	0.5 * data . GetWidth ( )
>5058	CallExpression	data . GetWidth ( )
>5059	ArgumentList	 
>5060	Callee	data . GetWidth
>5061	MemberAccess	data . GetWidth
>5062	Identifier	GetWidth
>5063	Identifier	data
>5064	PrimaryExpression	0.5
>5065	Identifier	w_2
>5066	Identifier	w_2
>5067	IdentifierDeclType	double
>5068	IdentifierDeclStatement	 
>5069	IdentifierDecl	k_dist [ 6 ] = { 0.0 , 1.0 , 0.0 , k [ 0 ] , 0.0 , k [ 1 ] }
>5070	AssignmentExpr	k_dist [ 6 ] = { 0.0 , 1.0 , 0.0 , k [ 0 ] , 0.0 , k [ 1 ] }
>5071	InitializerList	0.0
>5072	ArrayIndexing	k [ 1 ]
>5073	PrimaryExpression	1
>5074	Identifier	k
>5075	PrimaryExpression	0.0
>5076	ArrayIndexing	k [ 0 ]
>5077	PrimaryExpression	0
>5078	Identifier	k
>5079	PrimaryExpression	0.0
>5080	PrimaryExpression	1.0
>5081	PrimaryExpression	0.0
>5082	Identifier	k_dist
>5083	PrimaryExpression	6
>5084	Identifier	k_dist
>5085	IdentifierDeclType	double [ 6 ]
>5086	IdentifierDeclStatement	 
>5087	IdentifierDecl	* k = init_camera_params [ i ] . k
>5088	AssignmentExpr	* k = init_camera_params [ i ] . k
>5089	MemberAccess	init_camera_params [ i ] . k
>5090	Identifier	k
>5091	ArrayIndexing	init_camera_params [ i ]
>5092	Identifier	i
>5093	Identifier	init_camera_params
>5094	Identifier	k
>5095	Identifier	k
>5096	IdentifierDeclType	double *
>5097	Condition	 
>5098	Identifier	m_estimate_distortion
>5099	IdentifierDeclStatement	 
>5100	IdentifierDecl	dt [ 3 ] = { init_camera_params [ i ] . t [ 0 ] , init_camera_params [ i ] . t [ 1 ] , init_camera_params [ i ] \
>5101	AssignmentExpr	dt [ 3 ] = { init_camera_params [ i ] . t [ 0 ] , init_camera_params [ i ] . t [ 1 ] , init_camera_params [ \
>5102	InitializerList	init_camera_params [ i ] . t [ 0 ]
>5103	ArrayIndexing	init_camera_params [ i ] . t [ 2 ]
>5104	PrimaryExpression	2
>5105	MemberAccess	init_camera_params [ i ] . t
>5106	Identifier	t
>5107	ArrayIndexing	init_camera_params [ i ]
>5108	Identifier	i
>5109	Identifier	init_camera_params
>5110	ArrayIndexing	init_camera_params [ i ] . t [ 1 ]
>5111	PrimaryExpression	1
>5112	MemberAccess	init_camera_params [ i ] . t
>5113	Identifier	t
>5114	ArrayIndexing	init_camera_params [ i ]
>5115	Identifier	i
>5116	Identifier	init_camera_params
>5117	ArrayIndexing	init_camera_params [ i ] . t [ 0 ]
>5118	PrimaryExpression	0
>5119	MemberAccess	init_camera_params [ i ] . t
>5120	Identifier	t
>5121	ArrayIndexing	init_camera_params [ i ]
>5122	Identifier	i
>5123	Identifier	init_camera_params
>5124	Identifier	dt
>5125	PrimaryExpression	3
>5126	Identifier	dt
>5127	IdentifierDeclType	double [ 3 ]
>5128	IdentifierDeclStatement	 
>5129	IdentifierDecl	K [ 9 ] = { init_camera_params [ i ] . f , 0.0 , 0.0 , 0.0 , init_camera_params [ i ] . f , 0.0 , 0.0 , 0.0 , 1.0 }
>5130	AssignmentExpr	K [ 9 ] = { init_camera_params [ i ] . f , 0.0 , 0.0 , 0.0 , init_camera_params [ i ] . f , 0.0 , 0.0 , \
>5131	InitializerList	init_camera_params [ i ] . f
>5132	PrimaryExpression	1.0
>5133	PrimaryExpression	0.0
>5134	PrimaryExpression	0.0
>5135	PrimaryExpression	0.0
>5136	MemberAccess	init_camera_params [ i ] . f
>5137	Identifier	f
>5138	ArrayIndexing	init_camera_params [ i ]
>5139	Identifier	i
>5140	Identifier	init_camera_params
>5141	PrimaryExpression	0.0
>5142	PrimaryExpression	0.0
>5143	PrimaryExpression	0.0
>5144	MemberAccess	init_camera_params [ i ] . f
>5145	Identifier	f
>5146	ArrayIndexing	init_camera_params [ i ]
>5147	Identifier	i
>5148	Identifier	init_camera_params
>5149	Identifier	K
>5150	PrimaryExpression	9
>5151	Identifier	K
>5152	IdentifierDeclType	double [ 9 ]
>5153	IdentifierDeclStatement	 
>5154	IdentifierDecl	& data = m_image_data [ added_order [ i ] ]
>5155	AssignmentExpr	& data = m_image_data [ added_order [ i ] ]
>5156	ArrayIndexing	m_image_data [ added_order [ i ] ]
>5157	ArrayIndexing	added_order [ i ]
>5158	Identifier	i
>5159	Identifier	added_order
>5160	Identifier	m_image_data
>5161	Identifier	data
>5162	Identifier	data
>5163	IdentifierDeclType	ImageData &
>5164	IncDecOp	 
>5165	IncDec	++
>5166	Identifier	i
>5167	Condition	 
>5168	RelationalExpression	i < num_cameras
>5169	Identifier	num_cameras
>5170	Identifier	i
>5171	ForInit	 
>5172	IdentifierDeclStatement	int i = 0 ;
>5173	IdentifierDecl	i = 0
>5174	AssignmentExpr	i = 0
>5175	PrimaryExpression	0
>5176	Identifier	i
>5177	Identifier	i
>5178	IdentifierDeclType	int
>5179	IdentifierDeclStatement	 
>5180	IdentifierDecl	reproj_errors
>5181	Identifier	reproj_errors
>5182	IdentifierDeclType	std 
>5183	IdentifierDeclStatement	 
>5184	IdentifierDecl	outliers
>5185	Identifier	outliers
>5186	IdentifierDeclType	std 
>5187	IdentifierDeclStatement	 
>5188	IdentifierDecl	global_num_observations = 0
>5189	AssignmentExpr	global_num_observations = 0
>5190	PrimaryExpression	0
>5191	Identifier	global_num_observations
>5192	Identifier	global_num_observations
>5193	IdentifierDeclType	int
>5194	IdentifierDeclStatement	 
>5195	IdentifierDecl	global_reprojection_error = 0
>5196	AssignmentExpr	global_reprojection_error = 0
>5197	PrimaryExpression	0
>5198	Identifier	global_reprojection_error
>5199	Identifier	global_reprojection_error
>5200	IdentifierDeclType	double
>5201	ExpressionStatement	 
>5202	AssignmentExpr	start = clock ( )
>5203	CallExpression	clock ( )
>5204	ArgumentList	 
>5205	Callee	clock
>5206	Identifier	clock
>5207	Identifier	start
>5208	ExpressionStatement	 
>5209	CallExpression	printf ( \"[RunSFM] run_sfm took %0.3fs\n\" , ( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC )
>5210	ArgumentList	\"[RunSFM] run_sfm took %0.3fs\n\"
>5211	Argument	( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC
>5212	MultiplicativeExpression	( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC
>5213	CastExpression	( double ) CLOCKS_PER_SEC
>5214	Identifier	CLOCKS_PER_SEC
>5215	CastTarget	double
>5216	CastExpression	( double ) ( end - start )
>5217	AdditiveExpression	end - start
>5218	Identifier	start
>5219	Identifier	end
>5220	CastTarget	double
>5221	Argument	\"[RunSFM] run_sfm took %0.3fs\n\"
>5222	PrimaryExpression	\"[RunSFM] run_sfm took %0.3fs\n\"
>5223	Callee	printf
>5224	Identifier	printf
>5225	IdentifierDeclStatement	 
>5226	IdentifierDecl	end = clock ( )
>5227	AssignmentExpr	end = clock ( )
>5228	CallExpression	clock ( )
>5229	ArgumentList	 
>5230	Callee	clock
>5231	Identifier	clock
>5232	Identifier	end
>5233	Identifier	end
>5234	IdentifierDeclType	clock_t
>5235	ExpressionStatement	 
>5236	CallExpression	run_sfm ( nz_count , num_cameras , start_camera , vmask , projections , fixed_focal ? 0 
>5237	ArgumentList	nz_count
>5238	Argument	W
>5239	Identifier	W
>5240	Argument	U
>5241	Identifier	U
>5242	Argument	S
>5243	Identifier	S
>5244	Argument	V
>5245	Identifier	V
>5246	Argument	eps2
>5247	Identifier	eps2
>5248	Argument	m_optimize_for_fisheye
>5249	Identifier	m_optimize_for_fisheye
>5250	Argument	fix_points ? 1 
>5251	ConditionalExpression	fix_points ? 1 
>5252	PrimaryExpression	0
>5253	PrimaryExpression	1
>5254	Condition	fix_points
>5255	Identifier	fix_points
>5256	Argument	m_point_constraint_weight
>5257	Identifier	m_point_constraint_weight
>5258	Argument	m_point_constraints
>5259	Identifier	m_point_constraints
>5260	Argument	( m_use_point_constraints ) ? 1 
>5261	ConditionalExpression	( m_use_point_constraints ) ? 1 
>5262	PrimaryExpression	0
>5263	PrimaryExpression	1
>5264	Condition	m_use_point_constraints
>5265	Identifier	m_use_point_constraints
>5266	Argument	( m_use_constraints || m_constrain_focal ) ? 1 
>5267	ConditionalExpression	( m_use_constraints || m_constrain_focal ) ? 1 
>5268	PrimaryExpression	0
>5269	PrimaryExpression	1
>5270	Condition	m_use_constraints || m_constrain_focal
>5271	OrExpression	m_use_constraints || m_constrain_focal
>5272	Identifier	m_constrain_focal
>5273	Identifier	m_use_constraints
>5274	Argument	nz_pts
>5275	Identifier	nz_pts
>5276	Argument	init_camera_params
>5277	Identifier	init_camera_params
>5278	Argument	1
>5279	PrimaryExpression	1
>5280	Argument	m_estimate_distortion ? 1 
>5281	ConditionalExpression	m_estimate_distortion ? 1 
>5282	PrimaryExpression	0
>5283	PrimaryExpression	1
>5284	Condition	m_estimate_distortion
>5285	Identifier	m_estimate_distortion
>5286	Argument	0
>5287	PrimaryExpression	0
>5288	Argument	fixed_focal ? 0 
>5289	ConditionalExpression	fixed_focal ? 0 
>5290	PrimaryExpression	1
>5291	PrimaryExpression	0
>5292	Condition	fixed_focal
>5293	Identifier	fixed_focal
>5294	Argument	projections
>5295	Identifier	projections
>5296	Argument	vmask
>5297	Identifier	vmask
>5298	Argument	start_camera
>5299	Identifier	start_camera
>5300	Argument	num_cameras
>5301	Identifier	num_cameras
>5302	Argument	nz_count
>5303	Identifier	nz_count
>5304	Callee	run_sfm
>5305	Identifier	run_sfm
>5306	IdentifierDeclStatement	 
>5307	IdentifierDecl	start = clock ( )
>5308	AssignmentExpr	start = clock ( )
>5309	CallExpression	clock ( )
>5310	ArgumentList	 
>5311	Callee	clock
>5312	Identifier	clock
>5313	Identifier	start
>5314	Identifier	start
>5315	IdentifierDeclType	clock_t
>5316	IdentifierDeclStatement	 
>5317	IdentifierDecl	fixed_focal = m_fixed_focal_length
>5318	AssignmentExpr	fixed_focal = m_fixed_focal_length
>5319	Identifier	m_fixed_focal_length
>5320	Identifier	m_fixed_focal_length
>5321	Identifier	fixed_focal
>5322	IdentifierDeclType	bool
>5323	ExpressionStatement	 
>5324	AssignmentExpr	num_dists = 0
>5325	PrimaryExpression	0
>5326	Identifier	num_dists
>5327	ExpressionStatement	 
>5328	AssignmentExpr	dist_total = 0.0
>5329	PrimaryExpression	0.0
>5330	Identifier	dist_total
>5331	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>5332	CompoundStatement	 
>5333	IfStatement	if ( num_views > 0 )
>5334	ElseStatement	else
>5335	CompoundStatement	 
>5336	ExpressionStatement	 
>5337	AssignmentExpr	remap [ i ] = - 1
>5338	UnaryOp	- 1
>5339	PrimaryExpression	1
>5340	UnaryOperator	-
>5341	ArrayIndexing	remap [ i ]
>5342	Identifier	i
>5343	Identifier	remap
>5344	CompoundStatement	 
>5345	ExpressionStatement	 
>5346	IncDecOp	nz_count ++
>5347	IncDec	++
>5348	Identifier	nz_count
>5349	ExpressionStatement	 
>5350	AssignmentExpr	nz_pts [ nz_count ] = init_pts [ i ]
>5351	ArrayIndexing	init_pts [ i ]
>5352	Identifier	i
>5353	Identifier	init_pts
>5354	ArrayIndexing	nz_pts [ nz_count ]
>5355	Identifier	nz_count
>5356	Identifier	nz_pts
>5357	ExpressionStatement	 
>5358	AssignmentExpr	remap [ i ] = nz_count
>5359	Identifier	nz_count
>5360	ArrayIndexing	remap [ i ]
>5361	Identifier	i
>5362	Identifier	remap
>5363	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>5364	CompoundStatement	 
>5365	ExpressionStatement	 
>5366	IncDecOp	arr_idx ++
>5367	IncDec	++
>5368	Identifier	arr_idx
>5369	ExpressionStatement	 
>5370	AssignmentExpr	projections [ 2 * arr_idx + 1 ] = GetKey ( v , k ) . m_y
>5371	MemberAccess	GetKey ( v , k ) . m_y
>5372	Identifier	m_y
>5373	CallExpression	GetKey ( v , k )
>5374	ArgumentList	v
>5375	Argument	k
>5376	Identifier	k
>5377	Argument	v
>5378	Identifier	v
>5379	Callee	GetKey
>5380	Identifier	GetKey
>5381	ArrayIndexing	projections [ 2 * arr_idx + 1 ]
>5382	AdditiveExpression	2 * arr_idx + 1
>5383	PrimaryExpression	1
>5384	MultiplicativeExpression	2 * arr_idx
>5385	Identifier	arr_idx
>5386	PrimaryExpression	2
>5387	Identifier	projections
>5388	ExpressionStatement	 
>5389	AssignmentExpr	projections [ 2 * arr_idx + 0 ] = GetKey ( v , k ) . m_x
>5390	MemberAccess	GetKey ( v , k ) . m_x
>5391	Identifier	m_x
>5392	CallExpression	GetKey ( v , k )
>5393	ArgumentList	v
>5394	Argument	k
>5395	Identifier	k
>5396	Argument	v
>5397	Identifier	v
>5398	Callee	GetKey
>5399	Identifier	GetKey
>5400	ArrayIndexing	projections [ 2 * arr_idx + 0 ]
>5401	AdditiveExpression	2 * arr_idx + 0
>5402	PrimaryExpression	0
>5403	MultiplicativeExpression	2 * arr_idx
>5404	Identifier	arr_idx
>5405	PrimaryExpression	2
>5406	Identifier	projections
>5407	ExpressionStatement	 
>5408	AssignmentExpr	vmask [ nz_count * num_cameras + c ] = 1
>5409	PrimaryExpression	1
>5410	ArrayIndexing	vmask [ nz_count * num_cameras + c ]
>5411	AdditiveExpression	nz_count * num_cameras + c
>5412	Identifier	c
>5413	MultiplicativeExpression	nz_count * num_cameras
>5414	Identifier	num_cameras
>5415	Identifier	nz_count
>5416	Identifier	vmask
>5417	IdentifierDeclStatement	 
>5418	IdentifierDecl	k = pt_views [ i ] [ j ] . second
>5419	AssignmentExpr	k = pt_views [ i ] [ j ] . second
>5420	MemberAccess	pt_views [ i ] [ j ] . second
>5421	Identifier	second
>5422	ArrayIndexing	pt_views [ i ] [ j ]
>5423	Identifier	j
>5424	ArrayIndexing	pt_views [ i ]
>5425	Identifier	i
>5426	Identifier	pt_views
>5427	Identifier	k
>5428	Identifier	k
>5429	IdentifierDeclType	int
>5430	IdentifierDeclStatement	 
>5431	IdentifierDecl	v = added_order [ c ]
>5432	AssignmentExpr	v = added_order [ c ]
>5433	ArrayIndexing	added_order [ c ]
>5434	Identifier	c
>5435	Identifier	added_order
>5436	Identifier	v
>5437	Identifier	v
>5438	IdentifierDeclType	int
>5439	IdentifierDeclStatement	 
>5440	IdentifierDecl	c = pt_views [ i ] [ j ] . first
>5441	AssignmentExpr	c = pt_views [ i ] [ j ] . first
>5442	MemberAccess	pt_views [ i ] [ j ] . first
>5443	Identifier	first
>5444	ArrayIndexing	pt_views [ i ] [ j ]
>5445	Identifier	j
>5446	ArrayIndexing	pt_views [ i ]
>5447	Identifier	i
>5448	Identifier	pt_views
>5449	Identifier	c
>5450	Identifier	c
>5451	IdentifierDeclType	int
>5452	IncDecOp	 
>5453	IncDec	++
>5454	Identifier	j
>5455	Condition	 
>5456	RelationalExpression	j < num_views
>5457	Identifier	num_views
>5458	Identifier	j
>5459	ForInit	 
>5460	IdentifierDeclStatement	int j = 0 ;
>5461	IdentifierDecl	j = 0
>5462	AssignmentExpr	j = 0
>5463	PrimaryExpression	0
>5464	Identifier	j
>5465	Identifier	j
>5466	IdentifierDeclType	int
>5467	Condition	 
>5468	RelationalExpression	num_views > 0
>5469	PrimaryExpression	0
>5470	Identifier	num_views
>5471	IdentifierDeclStatement	 
>5472	IdentifierDecl	num_views = ( int ) pt_views [ i ] . size ( )
>5473	AssignmentExpr	num_views = ( int ) pt_views [ i ] . size ( )
>5474	CastExpression	( int ) pt_views [ i ] . size ( )
>5475	CallExpression	pt_views [ i ] . size ( )
>5476	ArgumentList	 
>5477	Callee	pt_views [ i ] . size
>5478	MemberAccess	pt_views [ i ] . size
>5479	Identifier	size
>5480	ArrayIndexing	pt_views [ i ]
>5481	Identifier	i
>5482	Identifier	pt_views
>5483	CastTarget	int
>5484	Identifier	num_views
>5485	Identifier	num_views
>5486	IdentifierDeclType	int
>5487	IncDecOp	 
>5488	IncDec	++
>5489	Identifier	i
>5490	Condition	 
>5491	RelationalExpression	i < num_pts
>5492	Identifier	num_pts
>5493	Identifier	i
>5494	ForInit	 
>5495	IdentifierDeclStatement	int i = 0 ;
>5496	IdentifierDecl	i = 0
>5497	AssignmentExpr	i = 0
>5498	PrimaryExpression	0
>5499	Identifier	i
>5500	Identifier	i
>5501	IdentifierDeclType	int
>5502	IdentifierDeclStatement	 
>5503	IdentifierDecl	nz_count = 0
>5504	AssignmentExpr	nz_count = 0
>5505	PrimaryExpression	0
>5506	Identifier	nz_count
>5507	Identifier	nz_count
>5508	IdentifierDeclType	int
>5509	IdentifierDeclStatement	 
>5510	IdentifierDecl	arr_idx = 0
>5511	AssignmentExpr	arr_idx = 0
>5512	PrimaryExpression	0
>5513	Identifier	arr_idx
>5514	Identifier	arr_idx
>5515	IdentifierDeclType	int
>5516	ForStatement	for ( int i = 0 ; i < num_pts * num_cameras ; i ++ )
>5517	ExpressionStatement	 
>5518	AssignmentExpr	vmask [ i ] = 0
>5519	PrimaryExpression	0
>5520	ArrayIndexing	vmask [ i ]
>5521	Identifier	i
>5522	Identifier	vmask
>5523	IncDecOp	 
>5524	IncDec	++
>5525	Identifier	i
>5526	Condition	 
>5527	RelationalExpression	i < num_pts * num_cameras
>5528	MultiplicativeExpression	num_pts * num_cameras
>5529	Identifier	num_cameras
>5530	Identifier	num_pts
>5531	Identifier	i
>5532	ForInit	 
>5533	IdentifierDeclStatement	int i = 0 ;
>5534	IdentifierDecl	i = 0
>5535	AssignmentExpr	i = 0
>5536	PrimaryExpression	0
>5537	Identifier	i
>5538	Identifier	i
>5539	IdentifierDeclType	int
>5540	ExpressionStatement	 
>5541	AssignmentExpr	projections = new double [ 2 * num_projections ]
>5542	MultiplicativeExpression	2 * num_projections
>5543	Identifier	num_projections
>5544	PrimaryExpression	2
>5545	Identifier	projections
>5546	ExpressionStatement	 
>5547	AssignmentExpr	vmask = new char [ num_pts * num_cameras ]
>5548	MultiplicativeExpression	num_pts * num_cameras
>5549	Identifier	num_cameras
>5550	Identifier	num_pts
>5551	Identifier	vmask
>5552	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>5553	CompoundStatement	 
>5554	ExpressionStatement	 
>5555	AssignmentExpr	num_projections += ( int ) pt_views [ i ] . size ( )
>5556	CastExpression	( int ) pt_views [ i ] . size ( )
>5557	CallExpression	pt_views [ i ] . size ( )
>5558	ArgumentList	 
>5559	Callee	pt_views [ i ] . size
>5560	MemberAccess	pt_views [ i ] . size
>5561	Identifier	size
>5562	ArrayIndexing	pt_views [ i ]
>5563	Identifier	i
>5564	Identifier	pt_views
>5565	CastTarget	int
>5566	Identifier	num_projections
>5567	IncDecOp	 
>5568	IncDec	++
>5569	Identifier	i
>5570	Condition	 
>5571	RelationalExpression	i < num_pts
>5572	Identifier	num_pts
>5573	Identifier	i
>5574	ForInit	 
>5575	IdentifierDeclStatement	int i = 0 ;
>5576	IdentifierDecl	i = 0
>5577	AssignmentExpr	i = 0
>5578	PrimaryExpression	0
>5579	Identifier	i
>5580	Identifier	i
>5581	IdentifierDeclType	int
>5582	IdentifierDeclStatement	 
>5583	IdentifierDecl	num_projections = 0
>5584	AssignmentExpr	num_projections = 0
>5585	PrimaryExpression	0
>5586	Identifier	num_projections
>5587	Identifier	num_projections
>5588	IdentifierDeclType	int
>5589	IdentifierDeclStatement	 
>5590	IdentifierDecl	* projections = NULL
>5591	AssignmentExpr	* projections = NULL
>5592	Identifier	NULL
>5593	Identifier	NULL
>5594	Identifier	projections
>5595	IdentifierDeclType	double *
>5596	IdentifierDeclStatement	 
>5597	IdentifierDecl	* vmask = NULL
>5598	AssignmentExpr	* vmask = NULL
>5599	Identifier	NULL
>5600	Identifier	NULL
>5601	Identifier	vmask
>5602	IdentifierDeclType	char *
>5603	IfStatement	if ( num_pts - total_outliers < MIN_POINTS )
>5604	CompoundStatement	 
>5605	BreakStatement	 
>5606	ExpressionStatement	 
>5607	AssignmentExpr	dist_total = DBL_MAX
>5608	Identifier	DBL_MAX
>5609	Identifier	dist_total
>5610	ExpressionStatement	 
>5611	CallExpression	fflush ( stdout )
>5612	ArgumentList	stdout
>5613	Argument	stdout
>5614	Identifier	stdout
>5615	Callee	fflush
>5616	Identifier	fflush
>5617	ExpressionStatement	 
>5618	CallExpression	printf ( \"[RunSFM] Too few points remaining, exiting!\n\" )
>5619	ArgumentList	\"[RunSFM] Too few points remaining, exiting!\n\"
>5620	Argument	\"[RunSFM] Too few points remaining, exiting!\n\"
>5621	PrimaryExpression	\"[RunSFM] Too few points remaining, exiting!\n\"
>5622	Callee	printf
>5623	Identifier	printf
>5624	Condition	 
>5625	RelationalExpression	num_pts - total_outliers < MIN_POINTS
>5626	Identifier	MIN_POINTS
>5627	AdditiveExpression	num_pts - total_outliers
>5628	Identifier	total_outliers
>5629	Identifier	num_pts
>5630	IdentifierDeclStatement	 
>5631	IdentifierDecl	MIN_OUTLIERS = 40
>5632	AssignmentExpr	MIN_OUTLIERS = 40
>5633	PrimaryExpression	40
>5634	Identifier	MIN_OUTLIERS
>5635	Identifier	MIN_OUTLIERS
>5636	IdentifierDeclType	const int
>5637	IdentifierDeclStatement	 
>5638	IdentifierDecl	* nz_pts = new v3_t [ num_pts ]
>5639	AssignmentExpr	* nz_pts = new v3_t [ num_pts ]
>5640	Identifier	num_pts
>5641	Identifier	num_pts
>5642	Identifier	nz_pts
>5643	IdentifierDeclType	v3_t *
>5644	IdentifierDeclStatement	 
>5645	IdentifierDecl	* remap = new int [ num_pts ]
>5646	AssignmentExpr	* remap = new int [ num_pts ]
>5647	Identifier	num_pts
>5648	Identifier	num_pts
>5649	Identifier	remap
>5650	IdentifierDeclType	int *
>5651	IdentifierDeclStatement	 
>5652	IdentifierDecl	num_dists = 0
>5653	AssignmentExpr	num_dists = 0
>5654	PrimaryExpression	0
>5655	Identifier	num_dists
>5656	Identifier	num_dists
>5657	IdentifierDeclType	int
>5658	IdentifierDeclStatement	 
>5659	IdentifierDecl	dist_total = 0.0
>5660	AssignmentExpr	dist_total = 0.0
>5661	PrimaryExpression	0.0
>5662	Identifier	dist_total
>5663	Identifier	dist_total
>5664	IdentifierDeclType	double
>5665	IdentifierDeclStatement	 
>5666	IdentifierDecl	total_outliers = 0
>5667	AssignmentExpr	total_outliers = 0
>5668	PrimaryExpression	0
>5669	Identifier	total_outliers
>5670	Identifier	total_outliers
>5671	IdentifierDeclType	int
>5672	IdentifierDeclStatement	 
>5673	IdentifierDecl	num_outliers = 0
>5674	AssignmentExpr	num_outliers = 0
>5675	PrimaryExpression	0
>5676	Identifier	num_outliers
>5677	Identifier	num_outliers
>5678	IdentifierDeclType	int
>5679	Statement	 
>5680	Statement	 
>5681	Statement	 
>5856	FunctionDef	BundlerApp 
>5857	ParameterList	camera_params_t * params
>5858	Parameter	 
>5859	Identifier	params
>5860	ParameterType	camera_params_t *
>5861	ReturnType	void
>5862	CompoundStatement	 
>5863	ForStatement	for ( int i = 0 ; i < NUM_CAMERA_PARAMS ; i ++ )
>5864	CompoundStatement	 
>5865	ExpressionStatement	 
>5866	AssignmentExpr	params -> weights [ i ] = 0.0
>5867	PrimaryExpression	0.0
>5868	ArrayIndexing	params -> weights [ i ]
>5869	Identifier	i
>5870	PtrMemberAccess	params -> weights
>5871	Identifier	weights
>5872	Identifier	params
>5873	ExpressionStatement	 
>5874	AssignmentExpr	params -> constraints [ i ] = 0.0
>5875	PrimaryExpression	0.0
>5876	ArrayIndexing	params -> constraints [ i ]
>5877	Identifier	i
>5878	PtrMemberAccess	params -> constraints
>5879	Identifier	constraints
>5880	Identifier	params
>5881	ExpressionStatement	 
>5882	AssignmentExpr	params -> constrained [ i ] = false
>5883	Identifier	false
>5884	ArrayIndexing	params -> constrained [ i ]
>5885	Identifier	i
>5886	PtrMemberAccess	params -> constrained
>5887	Identifier	constrained
>5888	Identifier	params
>5889	IncDecOp	 
>5890	IncDec	++
>5891	Identifier	i
>5892	Condition	 
>5893	RelationalExpression	i < NUM_CAMERA_PARAMS
>5894	Identifier	NUM_CAMERA_PARAMS
>5895	Identifier	i
>5896	ForInit	 
>5897	IdentifierDeclStatement	int i = 0 ;
>5898	IdentifierDecl	i = 0
>5899	AssignmentExpr	i = 0
>5900	PrimaryExpression	0
>5901	Identifier	i
>5902	Identifier	i
>5903	IdentifierDeclType	int
>5920	FunctionDef	BundlerApp 
>5921	ParameterList	int cam_idx , camera_params_t * params
>5922	Parameter	 
>5923	Identifier	params
>5924	ParameterType	camera_params_t *
>5925	Parameter	 
>5926	Identifier	cam_idx
>5927	ParameterType	int
>5928	ReturnType	void
>5929	CompoundStatement	 
>5930	IfStatement	if ( m_estimate_distortion )
>5931	ElseStatement	else
>5932	CompoundStatement	 
>5933	ExpressionStatement	 
>5934	AssignmentExpr	params -> weights [ 8 ] = 0.0
>5935	PrimaryExpression	0.0
>5936	ArrayIndexing	params -> weights [ 8 ]
>5937	PrimaryExpression	8
>5938	PtrMemberAccess	params -> weights
>5939	Identifier	weights
>5940	Identifier	params
>5941	ExpressionStatement	 
>5942	AssignmentExpr	params -> weights [ 7 ] = 0.0
>5943	PrimaryExpression	0.0
>5944	ArrayIndexing	params -> weights [ 7 ]
>5945	PrimaryExpression	7
>5946	PtrMemberAccess	params -> weights
>5947	Identifier	weights
>5948	Identifier	params
>5949	CompoundStatement	 
>5950	ExpressionStatement	 
>5951	AssignmentExpr	params -> weights [ 8 ] = m_distortion_weight
>5952	Identifier	m_distortion_weight
>5953	ArrayIndexing	params -> weights [ 8 ]
>5954	PrimaryExpression	8
>5955	PtrMemberAccess	params -> weights
>5956	Identifier	weights
>5957	Identifier	params
>5958	ExpressionStatement	 
>5959	AssignmentExpr	params -> weights [ 7 ] = m_distortion_weight
>5960	Identifier	m_distortion_weight
>5961	ArrayIndexing	params -> weights [ 7 ]
>5962	PrimaryExpression	7
>5963	PtrMemberAccess	params -> weights
>5964	Identifier	weights
>5965	Identifier	params
>5966	Condition	 
>5967	Identifier	m_estimate_distortion
>5968	ExpressionStatement	 
>5969	AssignmentExpr	params -> weights [ 6 ] = cam . m_constraint_weights [ 6 ]
>5970	ArrayIndexing	cam . m_constraint_weights [ 6 ]
>5971	PrimaryExpression	6
>5972	MemberAccess	cam . m_constraint_weights
>5973	Identifier	m_constraint_weights
>5974	Identifier	cam
>5975	ArrayIndexing	params -> weights [ 6 ]
>5976	PrimaryExpression	6
>5977	PtrMemberAccess	params -> weights
>5978	Identifier	weights
>5979	Identifier	params
>5980	ExpressionStatement	 
>5981	AssignmentExpr	params -> weights [ 5 ] = cam . m_constraint_weights [ 5 ]
>5982	ArrayIndexing	cam . m_constraint_weights [ 5 ]
>5983	PrimaryExpression	5
>5984	MemberAccess	cam . m_constraint_weights
>5985	Identifier	m_constraint_weights
>5986	Identifier	cam
>5987	ArrayIndexing	params -> weights [ 5 ]
>5988	PrimaryExpression	5
>5989	PtrMemberAccess	params -> weights
>5990	Identifier	weights
>5991	Identifier	params
>5992	ExpressionStatement	 
>5993	AssignmentExpr	params -> weights [ 4 ] = cam . m_constraint_weights [ 4 ]
>5994	ArrayIndexing	cam . m_constraint_weights [ 4 ]
>5995	PrimaryExpression	4
>5996	MemberAccess	cam . m_constraint_weights
>5997	Identifier	m_constraint_weights
>5998	Identifier	cam
>5999	ArrayIndexing	params -> weights [ 4 ]
>6000	PrimaryExpression	4
>6001	PtrMemberAccess	params -> weights
>6002	Identifier	weights
>6003	Identifier	params
>6004	ExpressionStatement	 
>6005	AssignmentExpr	params -> weights [ 3 ] = cam . m_constraint_weights [ 3 ]
>6006	ArrayIndexing	cam . m_constraint_weights [ 3 ]
>6007	PrimaryExpression	3
>6008	MemberAccess	cam . m_constraint_weights
>6009	Identifier	m_constraint_weights
>6010	Identifier	cam
>6011	ArrayIndexing	params -> weights [ 3 ]
>6012	PrimaryExpression	3
>6013	PtrMemberAccess	params -> weights
>6014	Identifier	weights
>6015	Identifier	params
>6016	ExpressionStatement	 
>6017	AssignmentExpr	params -> weights [ 2 ] = cam . m_constraint_weights [ 2 ]
>6018	ArrayIndexing	cam . m_constraint_weights [ 2 ]
>6019	PrimaryExpression	2
>6020	MemberAccess	cam . m_constraint_weights
>6021	Identifier	m_constraint_weights
>6022	Identifier	cam
>6023	ArrayIndexing	params -> weights [ 2 ]
>6024	PrimaryExpression	2
>6025	PtrMemberAccess	params -> weights
>6026	Identifier	weights
>6027	Identifier	params
>6028	ExpressionStatement	 
>6029	AssignmentExpr	params -> weights [ 1 ] = cam . m_constraint_weights [ 1 ]
>6030	ArrayIndexing	cam . m_constraint_weights [ 1 ]
>6031	PrimaryExpression	1
>6032	MemberAccess	cam . m_constraint_weights
>6033	Identifier	m_constraint_weights
>6034	Identifier	cam
>6035	ArrayIndexing	params -> weights [ 1 ]
>6036	PrimaryExpression	1
>6037	PtrMemberAccess	params -> weights
>6038	Identifier	weights
>6039	Identifier	params
>6040	ExpressionStatement	 
>6041	AssignmentExpr	params -> weights [ 0 ] = cam . m_constraint_weights [ 0 ]
>6042	ArrayIndexing	cam . m_constraint_weights [ 0 ]
>6043	PrimaryExpression	0
>6044	MemberAccess	cam . m_constraint_weights
>6045	Identifier	m_constraint_weights
>6046	Identifier	cam
>6047	ArrayIndexing	params -> weights [ 0 ]
>6048	PrimaryExpression	0
>6049	PtrMemberAccess	params -> weights
>6050	Identifier	weights
>6051	Identifier	params
>6052	ExpressionStatement	 
>6053	AssignmentExpr	params -> constraints [ 8 ] = 0.0
>6054	PrimaryExpression	0.0
>6055	ArrayIndexing	params -> constraints [ 8 ]
>6056	PrimaryExpression	8
>6057	PtrMemberAccess	params -> constraints
>6058	Identifier	constraints
>6059	Identifier	params
>6060	ExpressionStatement	 
>6061	AssignmentExpr	params -> constraints [ 7 ] = 0.0
>6062	PrimaryExpression	0.0
>6063	ArrayIndexing	params -> constraints [ 7 ]
>6064	PrimaryExpression	7
>6065	PtrMemberAccess	params -> constraints
>6066	Identifier	constraints
>6067	Identifier	params
>6068	ExpressionStatement	 
>6069	AssignmentExpr	params -> constraints [ 6 ] = cam . m_constraints [ 6 ]
>6070	ArrayIndexing	cam . m_constraints [ 6 ]
>6071	PrimaryExpression	6
>6072	MemberAccess	cam . m_constraints
>6073	Identifier	m_constraints
>6074	Identifier	cam
>6075	ArrayIndexing	params -> constraints [ 6 ]
>6076	PrimaryExpression	6
>6077	PtrMemberAccess	params -> constraints
>6078	Identifier	constraints
>6079	Identifier	params
>6080	ExpressionStatement	 
>6081	AssignmentExpr	params -> constraints [ 5 ] = cam . m_constraints [ 5 ]
>6082	ArrayIndexing	cam . m_constraints [ 5 ]
>6083	PrimaryExpression	5
>6084	MemberAccess	cam . m_constraints
>6085	Identifier	m_constraints
>6086	Identifier	cam
>6087	ArrayIndexing	params -> constraints [ 5 ]
>6088	PrimaryExpression	5
>6089	PtrMemberAccess	params -> constraints
>6090	Identifier	constraints
>6091	Identifier	params
>6092	ExpressionStatement	 
>6093	AssignmentExpr	params -> constraints [ 4 ] = cam . m_constraints [ 4 ]
>6094	ArrayIndexing	cam . m_constraints [ 4 ]
>6095	PrimaryExpression	4
>6096	MemberAccess	cam . m_constraints
>6097	Identifier	m_constraints
>6098	Identifier	cam
>6099	ArrayIndexing	params -> constraints [ 4 ]
>6100	PrimaryExpression	4
>6101	PtrMemberAccess	params -> constraints
>6102	Identifier	constraints
>6103	Identifier	params
>6104	ExpressionStatement	 
>6105	AssignmentExpr	params -> constraints [ 3 ] = cam . m_constraints [ 3 ]
>6106	ArrayIndexing	cam . m_constraints [ 3 ]
>6107	PrimaryExpression	3
>6108	MemberAccess	cam . m_constraints
>6109	Identifier	m_constraints
>6110	Identifier	cam
>6111	ArrayIndexing	params -> constraints [ 3 ]
>6112	PrimaryExpression	3
>6113	PtrMemberAccess	params -> constraints
>6114	Identifier	constraints
>6115	Identifier	params
>6116	ExpressionStatement	 
>6117	AssignmentExpr	params -> constraints [ 2 ] = cam . m_constraints [ 2 ]
>6118	ArrayIndexing	cam . m_constraints [ 2 ]
>6119	PrimaryExpression	2
>6120	MemberAccess	cam . m_constraints
>6121	Identifier	m_constraints
>6122	Identifier	cam
>6123	ArrayIndexing	params -> constraints [ 2 ]
>6124	PrimaryExpression	2
>6125	PtrMemberAccess	params -> constraints
>6126	Identifier	constraints
>6127	Identifier	params
>6128	ExpressionStatement	 
>6129	AssignmentExpr	params -> constraints [ 1 ] = cam . m_constraints [ 1 ]
>6130	ArrayIndexing	cam . m_constraints [ 1 ]
>6131	PrimaryExpression	1
>6132	MemberAccess	cam . m_constraints
>6133	Identifier	m_constraints
>6134	Identifier	cam
>6135	ArrayIndexing	params -> constraints [ 1 ]
>6136	PrimaryExpression	1
>6137	PtrMemberAccess	params -> constraints
>6138	Identifier	constraints
>6139	Identifier	params
>6140	ExpressionStatement	 
>6141	AssignmentExpr	params -> constraints [ 0 ] = cam . m_constraints [ 0 ]
>6142	ArrayIndexing	cam . m_constraints [ 0 ]
>6143	PrimaryExpression	0
>6144	MemberAccess	cam . m_constraints
>6145	Identifier	m_constraints
>6146	Identifier	cam
>6147	ArrayIndexing	params -> constraints [ 0 ]
>6148	PrimaryExpression	0
>6149	PtrMemberAccess	params -> constraints
>6150	Identifier	constraints
>6151	Identifier	params
>6152	IfStatement	if ( m_estimate_distortion )
>6153	ElseStatement	else
>6154	CompoundStatement	 
>6155	ExpressionStatement	 
>6156	AssignmentExpr	params -> constrained [ 8 ] = false
>6157	Identifier	false
>6158	ArrayIndexing	params -> constrained [ 8 ]
>6159	PrimaryExpression	8
>6160	PtrMemberAccess	params -> constrained
>6161	Identifier	constrained
>6162	Identifier	params
>6163	ExpressionStatement	 
>6164	AssignmentExpr	params -> constrained [ 7 ] = false
>6165	Identifier	false
>6166	ArrayIndexing	params -> constrained [ 7 ]
>6167	PrimaryExpression	7
>6168	PtrMemberAccess	params -> constrained
>6169	Identifier	constrained
>6170	Identifier	params
>6171	CompoundStatement	 
>6172	ExpressionStatement	 
>6173	AssignmentExpr	params -> constrained [ 8 ] = true
>6174	Identifier	true
>6175	ArrayIndexing	params -> constrained [ 8 ]
>6176	PrimaryExpression	8
>6177	PtrMemberAccess	params -> constrained
>6178	Identifier	constrained
>6179	Identifier	params
>6180	ExpressionStatement	 
>6181	AssignmentExpr	params -> constrained [ 7 ] = true
>6182	Identifier	true
>6183	ArrayIndexing	params -> constrained [ 7 ]
>6184	PrimaryExpression	7
>6185	PtrMemberAccess	params -> constrained
>6186	Identifier	constrained
>6187	Identifier	params
>6188	Condition	 
>6189	Identifier	m_estimate_distortion
>6190	ExpressionStatement	 
>6191	AssignmentExpr	params -> constrained [ 6 ] = cam . m_constrained [ 6 ]
>6192	ArrayIndexing	cam . m_constrained [ 6 ]
>6193	PrimaryExpression	6
>6194	MemberAccess	cam . m_constrained
>6195	Identifier	m_constrained
>6196	Identifier	cam
>6197	ArrayIndexing	params -> constrained [ 6 ]
>6198	PrimaryExpression	6
>6199	PtrMemberAccess	params -> constrained
>6200	Identifier	constrained
>6201	Identifier	params
>6202	ExpressionStatement	 
>6203	AssignmentExpr	params -> constrained [ 5 ] = cam . m_constrained [ 5 ]
>6204	ArrayIndexing	cam . m_constrained [ 5 ]
>6205	PrimaryExpression	5
>6206	MemberAccess	cam . m_constrained
>6207	Identifier	m_constrained
>6208	Identifier	cam
>6209	ArrayIndexing	params -> constrained [ 5 ]
>6210	PrimaryExpression	5
>6211	PtrMemberAccess	params -> constrained
>6212	Identifier	constrained
>6213	Identifier	params
>6214	ExpressionStatement	 
>6215	AssignmentExpr	params -> constrained [ 4 ] = cam . m_constrained [ 4 ]
>6216	ArrayIndexing	cam . m_constrained [ 4 ]
>6217	PrimaryExpression	4
>6218	MemberAccess	cam . m_constrained
>6219	Identifier	m_constrained
>6220	Identifier	cam
>6221	ArrayIndexing	params -> constrained [ 4 ]
>6222	PrimaryExpression	4
>6223	PtrMemberAccess	params -> constrained
>6224	Identifier	constrained
>6225	Identifier	params
>6226	ExpressionStatement	 
>6227	AssignmentExpr	params -> constrained [ 3 ] = cam . m_constrained [ 3 ]
>6228	ArrayIndexing	cam . m_constrained [ 3 ]
>6229	PrimaryExpression	3
>6230	MemberAccess	cam . m_constrained
>6231	Identifier	m_constrained
>6232	Identifier	cam
>6233	ArrayIndexing	params -> constrained [ 3 ]
>6234	PrimaryExpression	3
>6235	PtrMemberAccess	params -> constrained
>6236	Identifier	constrained
>6237	Identifier	params
>6238	ExpressionStatement	 
>6239	AssignmentExpr	params -> constrained [ 2 ] = cam . m_constrained [ 2 ]
>6240	ArrayIndexing	cam . m_constrained [ 2 ]
>6241	PrimaryExpression	2
>6242	MemberAccess	cam . m_constrained
>6243	Identifier	m_constrained
>6244	Identifier	cam
>6245	ArrayIndexing	params -> constrained [ 2 ]
>6246	PrimaryExpression	2
>6247	PtrMemberAccess	params -> constrained
>6248	Identifier	constrained
>6249	Identifier	params
>6250	ExpressionStatement	 
>6251	AssignmentExpr	params -> constrained [ 1 ] = cam . m_constrained [ 1 ]
>6252	ArrayIndexing	cam . m_constrained [ 1 ]
>6253	PrimaryExpression	1
>6254	MemberAccess	cam . m_constrained
>6255	Identifier	m_constrained
>6256	Identifier	cam
>6257	ArrayIndexing	params -> constrained [ 1 ]
>6258	PrimaryExpression	1
>6259	PtrMemberAccess	params -> constrained
>6260	Identifier	constrained
>6261	Identifier	params
>6262	ExpressionStatement	 
>6263	AssignmentExpr	params -> constrained [ 0 ] = cam . m_constrained [ 0 ]
>6264	ArrayIndexing	cam . m_constrained [ 0 ]
>6265	PrimaryExpression	0
>6266	MemberAccess	cam . m_constrained
>6267	Identifier	m_constrained
>6268	Identifier	cam
>6269	ArrayIndexing	params -> constrained [ 0 ]
>6270	PrimaryExpression	0
>6271	PtrMemberAccess	params -> constrained
>6272	Identifier	constrained
>6273	Identifier	params
>6274	IdentifierDeclStatement	 
>6275	IdentifierDecl	& cam = m_image_data [ cam_idx ] . m_camera
>6276	AssignmentExpr	& cam = m_image_data [ cam_idx ] . m_camera
>6277	MemberAccess	m_image_data [ cam_idx ] . m_camera
>6278	Identifier	m_camera
>6279	ArrayIndexing	m_image_data [ cam_idx ]
>6280	Identifier	cam_idx
>6281	Identifier	m_image_data
>6282	Identifier	cam
>6283	Identifier	cam
>6284	IdentifierDeclType	const CameraInfo &
>6314	FunctionDef	BundlerApp 
>6315	ParameterList	const ImageData & data , camera_params_t * params
>6316	Parameter	 
>6317	Identifier	params
>6318	ParameterType	camera_params_t *
>6319	Parameter	 
>6320	Identifier	data
>6321	ParameterType	const ImageData &
>6322	ReturnType	void
>6323	CompoundStatement	 
>6324	IfStatement	if ( data . m_has_init_focal )
>6325	CompoundStatement	 
>6326	ExpressionStatement	 
>6327	AssignmentExpr	params -> weights [ 6 ] = m_constrain_focal_weight
>6328	Identifier	m_constrain_focal_weight
>6329	ArrayIndexing	params -> weights [ 6 ]
>6330	PrimaryExpression	6
>6331	PtrMemberAccess	params -> weights
>6332	Identifier	weights
>6333	Identifier	params
>6334	ExpressionStatement	 
>6335	AssignmentExpr	params -> constraints [ 6 ] = data . m_init_focal
>6336	MemberAccess	data . m_init_focal
>6337	Identifier	m_init_focal
>6338	Identifier	data
>6339	ArrayIndexing	params -> constraints [ 6 ]
>6340	PrimaryExpression	6
>6341	PtrMemberAccess	params -> constraints
>6342	Identifier	constraints
>6343	Identifier	params
>6344	ExpressionStatement	 
>6345	AssignmentExpr	params -> constrained [ 6 ] = true
>6346	Identifier	true
>6347	ArrayIndexing	params -> constrained [ 6 ]
>6348	PrimaryExpression	6
>6349	PtrMemberAccess	params -> constrained
>6350	Identifier	constrained
>6351	Identifier	params
>6352	Condition	 
>6353	MemberAccess	data . m_has_init_focal
>6354	Identifier	m_has_init_focal
>6355	Identifier	data
>6373	FunctionDef	BundlerApp 
>6374	ParameterList	int & num_init_cams , int * added_order , int * added_order_inv , camera_params_t * cameras , v3_t * points , v3_\
>6375	Parameter	 
>6376	Identifier	use_constraints
>6377	ParameterType	bool
>6378	Parameter	 
>6379	Identifier	pt_views
>6380	ParameterType	std 
>6381	Parameter	 
>6382	Identifier	colors
>6383	ParameterType	v3_t *
>6384	Parameter	 
>6385	Identifier	points
>6386	ParameterType	v3_t *
>6387	Parameter	 
>6388	Identifier	cameras
>6389	ParameterType	camera_params_t *
>6390	Parameter	 
>6391	Identifier	added_order_inv
>6392	ParameterType	int *
>6393	Parameter	 
>6394	Identifier	added_order
>6395	ParameterType	int *
>6396	Parameter	 
>6397	Identifier	num_init_cams
>6398	ParameterType	int &
>6399	ReturnType	void
>6400	CompoundStatement	 
>6401	ExpressionStatement	 
>6402	CallExpression	printf ( \"  Avg. proj error [%d projections] = %0.3e\n\" , n , sqrt ( error / n ) )
>6403	ArgumentList	\"  Avg. proj error [%d projections] = %0.3e\n\"
>6404	Argument	sqrt ( error / n )
>6405	CallExpression	sqrt ( error / n )
>6406	ArgumentList	error / n
>6407	Argument	error / n
>6408	MultiplicativeExpression	error / n
>6409	Identifier	n
>6410	Identifier	error
>6411	Callee	sqrt
>6412	Identifier	sqrt
>6413	Argument	n
>6414	Identifier	n
>6415	Argument	\"  Avg. proj error [%d projections] = %0.3e\n\"
>6416	PrimaryExpression	\"  Avg. proj error [%d projections] = %0.3e\n\"
>6417	Callee	printf
>6418	Identifier	printf
>6419	ForStatement	for ( int i = 0 ; i < ( int ) m_point_data . size ( ) ; i ++ )
>6420	CompoundStatement	 
>6421	ExpressionStatement	 
>6422	Identifier	perm
>6423	Statement	 
>6424	Statement	 
>6425	Statement	 
>6426	ExpressionStatement	 
>6427	Identifier	views_arr
>6428	Statement	 
>6429	Statement	 
>6430	Statement	 
>6431	ExpressionStatement	 
>6432	CallExpression	pt_views . push_back ( views_sorted )
>6433	ArgumentList	views_sorted
>6434	Argument	views_sorted
>6435	Identifier	views_sorted
>6436	Callee	pt_views . push_back
>6437	MemberAccess	pt_views . push_back
>6438	Identifier	push_back
>6439	Identifier	pt_views
>6440	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>6441	CompoundStatement	 
>6442	ExpressionStatement	 
>6443	CallExpression	views_sorted . push_back ( views [ perm [ j ] ] )
>6444	ArgumentList	views [ perm [ j ] ]
>6445	Argument	views [ perm [ j ] ]
>6446	ArrayIndexing	views [ perm [ j ] ]
>6447	ArrayIndexing	perm [ j ]
>6448	Identifier	j
>6449	Identifier	perm
>6450	Identifier	views
>6451	Callee	views_sorted . push_back
>6452	MemberAccess	views_sorted . push_back
>6453	Identifier	push_back
>6454	Identifier	views_sorted
>6455	IncDecOp	 
>6456	IncDec	++
>6457	Identifier	j
>6458	Condition	 
>6459	RelationalExpression	j < num_views
>6460	Identifier	num_views
>6461	Identifier	j
>6462	ForInit	 
>6463	IdentifierDeclStatement	int j = 0 ;
>6464	IdentifierDecl	j = 0
>6465	AssignmentExpr	j = 0
>6466	PrimaryExpression	0
>6467	Identifier	j
>6468	Identifier	j
>6469	IdentifierDeclType	int
>6470	IdentifierDeclStatement	 
>6471	IdentifierDecl	views_sorted
>6472	Identifier	views_sorted
>6473	IdentifierDeclType	ImageKeyVector
>6474	ExpressionStatement	 
>6475	CallExpression	qsort_perm ( num_views , views_arr , perm )
>6476	ArgumentList	num_views
>6477	Argument	perm
>6478	Identifier	perm
>6479	Argument	views_arr
>6480	Identifier	views_arr
>6481	Argument	num_views
>6482	Identifier	num_views
>6483	Callee	qsort_perm
>6484	Identifier	qsort_perm
>6485	ExpressionStatement	 
>6486	CallExpression	qsort_ascending ( )
>6487	ArgumentList	 
>6488	Callee	qsort_ascending
>6489	Identifier	qsort_ascending
>6490	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>6491	CompoundStatement	 
>6492	IfStatement	if ( track != - 1 )
>6493	CompoundStatement	 
>6494	ExpressionStatement	 
>6495	AssignmentExpr	m_track_data [ track ] . m_extra = i
>6496	Identifier	i
>6497	MemberAccess	m_track_data [ track ] . m_extra
>6498	Identifier	m_extra
>6499	ArrayIndexing	m_track_data [ track ]
>6500	Identifier	track
>6501	Identifier	m_track_data
>6502	Condition	 
>6503	EqualityExpression	track != - 1
>6504	UnaryOp	- 1
>6505	PrimaryExpression	1
>6506	UnaryOperator	-
>6507	Identifier	track
>6508	IdentifierDeclStatement	 
>6509	IdentifierDecl	track = m_image_data [ image_idx ] . m_keys [ key_idx ] . m_track
>6510	AssignmentExpr	track = m_image_data [ image_idx ] . m_keys [ key_idx ] . m_track
>6511	MemberAccess	m_image_data [ image_idx ] . m_keys [ key_idx ] . m_track
>6512	Identifier	m_track
>6513	ArrayIndexing	m_image_data [ image_idx ] . m_keys [ key_idx ]
>6514	Identifier	key_idx
>6515	MemberAccess	m_image_data [ image_idx ] . m_keys
>6516	Identifier	m_keys
>6517	ArrayIndexing	m_image_data [ image_idx ]
>6518	Identifier	image_idx
>6519	Identifier	m_image_data
>6520	Identifier	track
>6521	Identifier	track
>6522	IdentifierDeclType	int
>6523	ExpressionStatement	 
>6524	CallExpression	views . push_back ( p )
>6525	ArgumentList	p
>6526	Argument	p
>6527	Identifier	p
>6528	Callee	views . push_back
>6529	MemberAccess	views . push_back
>6530	Identifier	push_back
>6531	Identifier	views
>6532	ExpressionStatement	 
>6533	AssignmentExpr	views_arr [ j ] = ( double ) p . first
>6534	CastExpression	( double ) p . first
>6535	MemberAccess	p . first
>6536	Identifier	first
>6537	Identifier	p
>6538	CastTarget	double
>6539	ArrayIndexing	views_arr [ j ]
>6540	Identifier	j
>6541	Identifier	views_arr
>6542	ExpressionStatement	 
>6543	AssignmentExpr	p . first = added_order_inv [ p . first ]
>6544	ArrayIndexing	added_order_inv [ p . first ]
>6545	MemberAccess	p . first
>6546	Identifier	first
>6547	Identifier	p
>6548	Identifier	added_order_inv
>6549	MemberAccess	p . first
>6550	Identifier	first
>6551	Identifier	p
>6552	ExpressionStatement	 
>6553	AssignmentExpr	m_image_data [ p . first ] . m_keys [ p . second ] . m_extra = i
>6554	Identifier	i
>6555	MemberAccess	m_image_data [ p . first ] . m_keys [ p . second ] . m_extra
>6556	Identifier	m_extra
>6557	ArrayIndexing	m_image_data [ p . first ] . m_keys [ p . second ]
>6558	MemberAccess	p . second
>6559	Identifier	second
>6560	Identifier	p
>6561	MemberAccess	m_image_data [ p . first ] . m_keys
>6562	Identifier	m_keys
>6563	ArrayIndexing	m_image_data [ p . first ]
>6564	MemberAccess	p . first
>6565	Identifier	first
>6566	Identifier	p
>6567	Identifier	m_image_data
>6568	IdentifierDeclStatement	 
>6569	IdentifierDecl	key_idx = p . second
>6570	AssignmentExpr	key_idx = p . second
>6571	MemberAccess	p . second
>6572	Identifier	second
>6573	Identifier	p
>6574	Identifier	key_idx
>6575	Identifier	key_idx
>6576	IdentifierDeclType	int
>6577	IdentifierDeclStatement	 
>6578	IdentifierDecl	image_idx = p . first
>6579	AssignmentExpr	image_idx = p . first
>6580	MemberAccess	p . first
>6581	Identifier	first
>6582	Identifier	p
>6583	Identifier	image_idx
>6584	Identifier	image_idx
>6585	IdentifierDeclType	int
>6586	IfStatement	if ( p . second < 0 || p . second >= ( int ) m_image_data [ p . first ] . m_keys . size ( ) )
>6587	CompoundStatement	 
>6588	ExpressionStatement	 
>6589	CallExpression	printf ( \"Error
>6590	ArgumentList	\"Error
>6591	Argument	( int ) m_image_data [ p . first ] . m_keys . size ( )
>6592	CastExpression	( int ) m_image_data [ p . first ] . m_keys . size ( )
>6593	CallExpression	m_image_data [ p . first ] . m_keys . size ( )
>6594	ArgumentList	 
>6595	Callee	m_image_data [ p . first ] . m_keys . size
>6596	MemberAccess	m_image_data [ p . first ] . m_keys . size
>6597	Identifier	size
>6598	MemberAccess	m_image_data [ p . first ] . m_keys
>6599	Identifier	m_keys
>6600	ArrayIndexing	m_image_data [ p . first ]
>6601	MemberAccess	p . first
>6602	Identifier	first
>6603	Identifier	p
>6604	Identifier	m_image_data
>6605	CastTarget	int
>6606	Argument	p . second
>6607	MemberAccess	p . second
>6608	Identifier	second
>6609	Identifier	p
>6610	Argument	\"Error
>6611	PrimaryExpression	\"Error
>6612	Callee	printf
>6613	Identifier	printf
>6614	Condition	 
>6615	OrExpression	p . second < 0 || p . second >= ( int ) m_image_data [ p . first ] . m_keys . size ( )
>6616	RelationalExpression	p . second >= ( int ) m_image_data [ p . first ] . m_keys . size ( )
>6617	CastExpression	( int ) m_image_data [ p . first ] . m_keys . size ( )
>6618	CallExpression	m_image_data [ p . first ] . m_keys . size ( )
>6619	ArgumentList	 
>6620	Callee	m_image_data [ p . first ] . m_keys . size
>6621	MemberAccess	m_image_data [ p . first ] . m_keys . size
>6622	Identifier	size
>6623	MemberAccess	m_image_data [ p . first ] . m_keys
>6624	Identifier	m_keys
>6625	ArrayIndexing	m_image_data [ p . first ]
>6626	MemberAccess	p . first
>6627	Identifier	first
>6628	Identifier	p
>6629	Identifier	m_image_data
>6630	CastTarget	int
>6631	MemberAccess	p . second
>6632	Identifier	second
>6633	Identifier	p
>6634	RelationalExpression	p . second < 0
>6635	PrimaryExpression	0
>6636	MemberAccess	p . second
>6637	Identifier	second
>6638	Identifier	p
>6639	IfStatement	if ( p . first < 0 || p . first >= num_images )
>6640	CompoundStatement	 
>6641	ExpressionStatement	 
>6642	CallExpression	printf ( \"Error
>6643	ArgumentList	\"Error
>6644	Argument	p . first
>6645	MemberAccess	p . first
>6646	Identifier	first
>6647	Identifier	p
>6648	Argument	\"Error
>6649	PrimaryExpression	\"Error
>6650	Callee	printf
>6651	Identifier	printf
>6652	Condition	 
>6653	OrExpression	p . first < 0 || p . first >= num_images
>6654	RelationalExpression	p . first >= num_images
>6655	Identifier	num_images
>6656	MemberAccess	p . first
>6657	Identifier	first
>6658	Identifier	p
>6659	RelationalExpression	p . first < 0
>6660	PrimaryExpression	0
>6661	MemberAccess	p . first
>6662	Identifier	first
>6663	Identifier	p
>6664	IfStatement	if ( added_order_inv [ p . first ] == - 1 )
>6665	CompoundStatement	 
>6666	ExpressionStatement	 
>6667	CallExpression	printf ( \"Error
>6668	ArgumentList	\"Error
>6669	Argument	p . first
>6670	MemberAccess	p . first
>6671	Identifier	first
>6672	Identifier	p
>6673	Argument	\"Error
>6674	PrimaryExpression	\"Error
>6675	Callee	printf
>6676	Identifier	printf
>6677	Condition	 
>6678	EqualityExpression	added_order_inv [ p . first ] == - 1
>6679	UnaryOp	- 1
>6680	PrimaryExpression	1
>6681	UnaryOperator	-
>6682	ArrayIndexing	added_order_inv [ p . first ]
>6683	MemberAccess	p . first
>6684	Identifier	first
>6685	Identifier	p
>6686	Identifier	added_order_inv
>6687	IdentifierDeclStatement	 
>6688	IdentifierDecl	p = m_point_data [ i ] . m_views [ j ]
>6689	AssignmentExpr	p = m_point_data [ i ] . m_views [ j ]
>6690	ArrayIndexing	m_point_data [ i ] . m_views [ j ]
>6691	Identifier	j
>6692	MemberAccess	m_point_data [ i ] . m_views
>6693	Identifier	m_views
>6694	ArrayIndexing	m_point_data [ i ]
>6695	Identifier	i
>6696	Identifier	m_point_data
>6697	Identifier	p
>6698	Identifier	p
>6699	IdentifierDeclType	ImageKey
>6700	IncDecOp	 
>6701	IncDec	++
>6702	Identifier	j
>6703	Condition	 
>6704	RelationalExpression	j < num_views
>6705	Identifier	num_views
>6706	Identifier	j
>6707	ForInit	 
>6708	IdentifierDeclStatement	int j = 0 ;
>6709	IdentifierDecl	j = 0
>6710	AssignmentExpr	j = 0
>6711	PrimaryExpression	0
>6712	Identifier	j
>6713	Identifier	j
>6714	IdentifierDeclType	int
>6715	IdentifierDeclStatement	 
>6716	IdentifierDecl	* perm = new int [ num_views ]
>6717	AssignmentExpr	* perm = new int [ num_views ]
>6718	Identifier	num_views
>6719	Identifier	num_views
>6720	Identifier	perm
>6721	IdentifierDeclType	int *
>6722	IdentifierDeclStatement	 
>6723	IdentifierDecl	* views_arr = new double [ num_views ]
>6724	AssignmentExpr	* views_arr = new double [ num_views ]
>6725	Identifier	num_views
>6726	Identifier	num_views
>6727	Identifier	views_arr
>6728	IdentifierDeclType	double *
>6729	IdentifierDeclStatement	 
>6730	IdentifierDecl	num_views = ( int ) m_point_data [ i ] . m_views . size ( )
>6731	AssignmentExpr	num_views = ( int ) m_point_data [ i ] . m_views . size ( )
>6732	CastExpression	( int ) m_point_data [ i ] . m_views . size ( )
>6733	CallExpression	m_point_data [ i ] . m_views . size ( )
>6734	ArgumentList	 
>6735	Callee	m_point_data [ i ] . m_views . size
>6736	MemberAccess	m_point_data [ i ] . m_views . size
>6737	Identifier	size
>6738	MemberAccess	m_point_data [ i ] . m_views
>6739	Identifier	m_views
>6740	ArrayIndexing	m_point_data [ i ]
>6741	Identifier	i
>6742	Identifier	m_point_data
>6743	CastTarget	int
>6744	Identifier	num_views
>6745	Identifier	num_views
>6746	IdentifierDeclType	int
>6747	IdentifierDeclStatement	 
>6748	IdentifierDecl	views
>6749	Identifier	views
>6750	IdentifierDeclType	ImageKeyVector
>6751	ExpressionStatement	 
>6752	AssignmentExpr	colors [ i ] = v3_new ( m_point_data [ i ] . m_color [ 0 ] , m_point_data [ i ] . m_color [ 1 ] , m_point_\
>6753	CallExpression	v3_new ( m_point_data [ i ] . m_color [ 0 ] , m_point_data [ i ] . m_color [ 1 ] , m_point_data [ i ] . m_color [ \
>6754	ArgumentList	m_point_data [ i ] . m_color [ 0 ]
>6755	Argument	m_point_data [ i ] . m_color [ 2 ]
>6756	ArrayIndexing	m_point_data [ i ] . m_color [ 2 ]
>6757	PrimaryExpression	2
>6758	MemberAccess	m_point_data [ i ] . m_color
>6759	Identifier	m_color
>6760	ArrayIndexing	m_point_data [ i ]
>6761	Identifier	i
>6762	Identifier	m_point_data
>6763	Argument	m_point_data [ i ] . m_color [ 1 ]
>6764	ArrayIndexing	m_point_data [ i ] . m_color [ 1 ]
>6765	PrimaryExpression	1
>6766	MemberAccess	m_point_data [ i ] . m_color
>6767	Identifier	m_color
>6768	ArrayIndexing	m_point_data [ i ]
>6769	Identifier	i
>6770	Identifier	m_point_data
>6771	Argument	m_point_data [ i ] . m_color [ 0 ]
>6772	ArrayIndexing	m_point_data [ i ] . m_color [ 0 ]
>6773	PrimaryExpression	0
>6774	MemberAccess	m_point_data [ i ] . m_color
>6775	Identifier	m_color
>6776	ArrayIndexing	m_point_data [ i ]
>6777	Identifier	i
>6778	Identifier	m_point_data
>6779	Callee	v3_new
>6780	Identifier	v3_new
>6781	ArrayIndexing	colors [ i ]
>6782	Identifier	i
>6783	Identifier	colors
>6784	ExpressionStatement	 
>6785	AssignmentExpr	points [ i ] = v3_new ( m_point_data [ i ] . m_pos [ 0 ] , m_point_data [ i ] . m_pos [ 1 ] , m_point_\
>6786	CallExpression	v3_new ( m_point_data [ i ] . m_pos [ 0 ] , m_point_data [ i ] . m_pos [ 1 ] , m_point_data [ i ] . m_pos [ 2 ] )
>6787	ArgumentList	m_point_data [ i ] . m_pos [ 0 ]
>6788	Argument	m_point_data [ i ] . m_pos [ 2 ]
>6789	ArrayIndexing	m_point_data [ i ] . m_pos [ 2 ]
>6790	PrimaryExpression	2
>6791	MemberAccess	m_point_data [ i ] . m_pos
>6792	Identifier	m_pos
>6793	ArrayIndexing	m_point_data [ i ]
>6794	Identifier	i
>6795	Identifier	m_point_data
>6796	Argument	m_point_data [ i ] . m_pos [ 1 ]
>6797	ArrayIndexing	m_point_data [ i ] . m_pos [ 1 ]
>6798	PrimaryExpression	1
>6799	MemberAccess	m_point_data [ i ] . m_pos
>6800	Identifier	m_pos
>6801	ArrayIndexing	m_point_data [ i ]
>6802	Identifier	i
>6803	Identifier	m_point_data
>6804	Argument	m_point_data [ i ] . m_pos [ 0 ]
>6805	ArrayIndexing	m_point_data [ i ] . m_pos [ 0 ]
>6806	PrimaryExpression	0
>6807	MemberAccess	m_point_data [ i ] . m_pos
>6808	Identifier	m_pos
>6809	ArrayIndexing	m_point_data [ i ]
>6810	Identifier	i
>6811	Identifier	m_point_data
>6812	Callee	v3_new
>6813	Identifier	v3_new
>6814	ArrayIndexing	points [ i ]
>6815	Identifier	i
>6816	Identifier	points
>6817	IncDecOp	 
>6818	IncDec	++
>6819	Identifier	i
>6820	Condition	 
>6821	RelationalExpression	i < ( int ) m_point_data . size ( )
>6822	CastExpression	( int ) m_point_data . size ( )
>6823	CallExpression	m_point_data . size ( )
>6824	ArgumentList	 
>6825	Callee	m_point_data . size
>6826	MemberAccess	m_point_data . size
>6827	Identifier	size
>6828	Identifier	m_point_data
>6829	CastTarget	int
>6830	Identifier	i
>6831	ForInit	 
>6832	IdentifierDeclStatement	int i = 0 ;
>6833	IdentifierDecl	i = 0
>6834	AssignmentExpr	i = 0
>6835	PrimaryExpression	0
>6836	Identifier	i
>6837	Identifier	i
>6838	IdentifierDeclType	int
>6839	IdentifierDeclStatement	 
>6840	IdentifierDecl	error = 0.0
>6841	AssignmentExpr	error = 0.0
>6842	PrimaryExpression	0.0
>6843	Identifier	error
>6844	Identifier	error
>6845	IdentifierDeclType	double
>6846	IdentifierDeclStatement	 
>6847	IdentifierDecl	n = 0
>6848	AssignmentExpr	n = 0
>6849	PrimaryExpression	0
>6850	Identifier	n
>6851	Identifier	n
>6852	IdentifierDeclType	int
>6853	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>6854	CompoundStatement	 
>6855	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>6856	ElseStatement	else
>6857	CompoundStatement	 
>6858	IfStatement	if ( added_order_inv != NULL )
>6859	ExpressionStatement	 
>6860	AssignmentExpr	added_order_inv [ i ] = - 1
>6861	UnaryOp	- 1
>6862	PrimaryExpression	1
>6863	UnaryOperator	-
>6864	ArrayIndexing	added_order_inv [ i ]
>6865	Identifier	i
>6866	Identifier	added_order_inv
>6867	Condition	 
>6868	EqualityExpression	added_order_inv != NULL
>6869	Identifier	NULL
>6870	Identifier	added_order_inv
>6871	CompoundStatement	 
>6872	ExpressionStatement	 
>6873	IncDecOp	num_init_cams ++
>6874	IncDec	++
>6875	Identifier	num_init_cams
>6876	IfStatement	if ( m_constrain_focal )
>6877	CompoundStatement	 
>6878	IfStatement	if ( m_image_data [ i ] . m_has_init_focal )
>6879	CompoundStatement	 
>6880	IfStatement	if ( fabs ( diff ) / m_image_data [ i ] . m_init_focal < 0.1 )
>6881	CompoundStatement	 
>6882	ExpressionStatement	 
>6883	CallExpression	SetFocalConstraint ( m_image_data [ i ] , cameras + num_init_cams )
>6884	ArgumentList	m_image_data [ i ]
>6885	Argument	cameras + num_init_cams
>6886	AdditiveExpression	cameras + num_init_cams
>6887	Identifier	num_init_cams
>6888	Identifier	cameras
>6889	Argument	m_image_data [ i ]
>6890	ArrayIndexing	m_image_data [ i ]
>6891	Identifier	i
>6892	Identifier	m_image_data
>6893	Callee	SetFocalConstraint
>6894	Identifier	SetFocalConstraint
>6895	ExpressionStatement	 
>6896	Statement	 
>6897	Statement	 
>6898	Statement	 
>6899	Statement	 
>6900	Statement	 
>6901	Statement	 
>6902	Statement	 
>6903	Condition	 
>6904	RelationalExpression	fabs ( diff ) / m_image_data [ i ] . m_init_focal < 0.1
>6905	PrimaryExpression	0.1
>6906	MultiplicativeExpression	fabs ( diff ) / m_image_data [ i ] . m_init_focal
>6907	MemberAccess	m_image_data [ i ] . m_init_focal
>6908	Identifier	m_init_focal
>6909	ArrayIndexing	m_image_data [ i ]
>6910	Identifier	i
>6911	Identifier	m_image_data
>6912	CallExpression	fabs ( diff )
>6913	ArgumentList	diff
>6914	Argument	diff
>6915	Identifier	diff
>6916	Callee	fabs
>6917	Identifier	fabs
>6918	IdentifierDeclStatement	 
>6919	IdentifierDecl	diff = cameras [ num_init_cams ] . f - m_image_data [ i ] . m_init_focal
>6920	AssignmentExpr	diff = cameras [ num_init_cams ] . f - m_image_data [ i ] . m_init_focal
>6921	AdditiveExpression	cameras [ num_init_cams ] . f - m_image_data [ i ] . m_init_focal
>6922	MemberAccess	m_image_data [ i ] . m_init_focal
>6923	Identifier	m_init_focal
>6924	ArrayIndexing	m_image_data [ i ]
>6925	Identifier	i
>6926	Identifier	m_image_data
>6927	MemberAccess	cameras [ num_init_cams ] . f
>6928	Identifier	f
>6929	ArrayIndexing	cameras [ num_init_cams ]
>6930	Identifier	num_init_cams
>6931	Identifier	cameras
>6932	Identifier	diff
>6933	Identifier	diff
>6934	IdentifierDeclType	double
>6935	Condition	 
>6936	MemberAccess	m_image_data [ i ] . m_has_init_focal
>6937	Identifier	m_has_init_focal
>6938	ArrayIndexing	m_image_data [ i ]
>6939	Identifier	i
>6940	Identifier	m_image_data
>6941	Condition	 
>6942	Identifier	m_constrain_focal
>6943	IfStatement	if ( use_constraints )
>6944	CompoundStatement	 
>6945	ExpressionStatement	 
>6946	CallExpression	SetCameraConstraints ( i , cameras + num_init_cams )
>6947	ArgumentList	i
>6948	Argument	cameras + num_init_cams
>6949	AdditiveExpression	cameras + num_init_cams
>6950	Identifier	num_init_cams
>6951	Identifier	cameras
>6952	Argument	i
>6953	Identifier	i
>6954	Callee	SetCameraConstraints
>6955	Identifier	SetCameraConstraints
>6956	Condition	 
>6957	Identifier	use_constraints
>6958	ExpressionStatement	 
>6959	CallExpression	ClearCameraConstraints ( cameras + num_init_cams )
>6960	ArgumentList	cameras + num_init_cams
>6961	Argument	cameras + num_init_cams
>6962	AdditiveExpression	cameras + num_init_cams
>6963	Identifier	num_init_cams
>6964	Identifier	cameras
>6965	Callee	ClearCameraConstraints
>6966	Identifier	ClearCameraConstraints
>6967	IfStatement	if ( m_image_data [ i ] . m_known_intrinsics )
>6968	CompoundStatement	 
>6969	ExpressionStatement	 
>6970	CallExpression	InvertDistortion ( 8 , 6 , 0.0 , max_radius , k_dist , cameras [ num_init_cams ] . k_inv )
>6971	ArgumentList	8
>6972	Argument	cameras [ num_init_cams ] . k_inv
>6973	MemberAccess	cameras [ num_init_cams ] . k_inv
>6974	Identifier	k_inv
>6975	ArrayIndexing	cameras [ num_init_cams ]
>6976	Identifier	num_init_cams
>6977	Identifier	cameras
>6978	Argument	k_dist
>6979	Identifier	k_dist
>6980	Argument	max_radius
>6981	Identifier	max_radius
>6982	Argument	0.0
>6983	PrimaryExpression	0.0
>6984	Argument	6
>6985	PrimaryExpression	6
>6986	Argument	8
>6987	PrimaryExpression	8
>6988	Callee	InvertDistortion
>6989	Identifier	InvertDistortion
>6990	IdentifierDeclStatement	 
>6991	IdentifierDecl	max_radius = sqrt ( w_2 * w_2 + h_2 * h_2 ) / cameras [ num_init_cams ] . K_known [ 0 ]
>6992	AssignmentExpr	max_radius = sqrt ( w_2 * w_2 + h_2 * h_2 ) / cameras [ num_init_cams ] . K_known [ 0 ]
>6993	MultiplicativeExpression	sqrt ( w_2 * w_2 + h_2 * h_2 ) / cameras [ num_init_cams ] . K_known [ 0 ]
>6994	ArrayIndexing	cameras [ num_init_cams ] . K_known [ 0 ]
>6995	PrimaryExpression	0
>6996	MemberAccess	cameras [ num_init_cams ] . K_known
>6997	Identifier	K_known
>6998	ArrayIndexing	cameras [ num_init_cams ]
>6999	Identifier	num_init_cams
>7000	Identifier	cameras
>7001	CallExpression	sqrt ( w_2 * w_2 + h_2 * h_2 )
>7002	ArgumentList	w_2 * w_2 + h_2 * h_2
>7003	Argument	w_2 * w_2 + h_2 * h_2
>7004	AdditiveExpression	w_2 * w_2 + h_2 * h_2
>7005	MultiplicativeExpression	h_2 * h_2
>7006	Identifier	h_2
>7007	Identifier	h_2
>7008	MultiplicativeExpression	w_2 * w_2
>7009	Identifier	w_2
>7010	Identifier	w_2
>7011	Callee	sqrt
>7012	Identifier	sqrt
>7013	Identifier	max_radius
>7014	Identifier	max_radius
>7015	IdentifierDeclType	double
>7016	IdentifierDeclStatement	 
>7017	IdentifierDecl	h_2 = 0.5 * m_image_data [ i ] . GetHeight ( )
>7018	AssignmentExpr	h_2 = 0.5 * m_image_data [ i ] . GetHeight ( )
>7019	MultiplicativeExpression	0.5 * m_image_data [ i ] . GetHeight ( )
>7020	CallExpression	m_image_data [ i ] . GetHeight ( )
>7021	ArgumentList	 
>7022	Callee	m_image_data [ i ] . GetHeight
>7023	MemberAccess	m_image_data [ i ] . GetHeight
>7024	Identifier	GetHeight
>7025	ArrayIndexing	m_image_data [ i ]
>7026	Identifier	i
>7027	Identifier	m_image_data
>7028	PrimaryExpression	0.5
>7029	Identifier	h_2
>7030	Identifier	h_2
>7031	IdentifierDeclType	double
>7032	IdentifierDeclStatement	 
>7033	IdentifierDecl	w_2 = 0.5 * m_image_data [ i ] . GetWidth ( )
>7034	AssignmentExpr	w_2 = 0.5 * m_image_data [ i ] . GetWidth ( )
>7035	MultiplicativeExpression	0.5 * m_image_data [ i ] . GetWidth ( )
>7036	CallExpression	m_image_data [ i ] . GetWidth ( )
>7037	ArgumentList	 
>7038	Callee	m_image_data [ i ] . GetWidth
>7039	MemberAccess	m_image_data [ i ] . GetWidth
>7040	Identifier	GetWidth
>7041	ArrayIndexing	m_image_data [ i ]
>7042	Identifier	i
>7043	Identifier	m_image_data
>7044	PrimaryExpression	0.5
>7045	Identifier	w_2
>7046	Identifier	w_2
>7047	IdentifierDeclType	double
>7048	IdentifierDeclStatement	 
>7049	IdentifierDecl	k_dist [ 8 ] = { 0.0 , 1.0 , 0.0 , k [ 0 ] , 0.0 , k [ 1 ] , 0.0 , k [ 4 ] }
>7050	AssignmentExpr	k_dist [ 8 ] = { 0.0 , 1.0 , 0.0 , k [ 0 ] , 0.0 , k [ 1 ] , 0.0 , k [ 4 ] }
>7051	InitializerList	0.0
>7052	ArrayIndexing	k [ 4 ]
>7053	PrimaryExpression	4
>7054	Identifier	k
>7055	PrimaryExpression	0.0
>7056	ArrayIndexing	k [ 1 ]
>7057	PrimaryExpression	1
>7058	Identifier	k
>7059	PrimaryExpression	0.0
>7060	ArrayIndexing	k [ 0 ]
>7061	PrimaryExpression	0
>7062	Identifier	k
>7063	PrimaryExpression	0.0
>7064	PrimaryExpression	1.0
>7065	PrimaryExpression	0.0
>7066	Identifier	k_dist
>7067	PrimaryExpression	8
>7068	Identifier	k_dist
>7069	IdentifierDeclType	double [ 8 ]
>7070	IdentifierDeclStatement	 
>7071	IdentifierDecl	* k = cameras [ num_init_cams ] . k_known
>7072	AssignmentExpr	* k = cameras [ num_init_cams ] . k_known
>7073	MemberAccess	cameras [ num_init_cams ] . k_known
>7074	Identifier	k_known
>7075	ArrayIndexing	cameras [ num_init_cams ]
>7076	Identifier	num_init_cams
>7077	Identifier	cameras
>7078	Identifier	k
>7079	Identifier	k
>7080	IdentifierDeclType	double *
>7081	ExpressionStatement	 
>7082	CallExpression	memcpy ( cameras [ num_init_cams ] . k_known , m_image_data [ i ] . m_k , 5 * sizeof ( double ) )
>7083	ArgumentList	cameras [ num_init_cams ] . k_known
>7084	Argument	5 * sizeof ( double )
>7085	MultiplicativeExpression	5 * sizeof ( double )
>7086	SizeofExpr	sizeof ( double )
>7087	SizeofOperand	double
>7088	Sizeof	sizeof
>7089	PrimaryExpression	5
>7090	Argument	m_image_data [ i ] . m_k
>7091	MemberAccess	m_image_data [ i ] . m_k
>7092	Identifier	m_k
>7093	ArrayIndexing	m_image_data [ i ]
>7094	Identifier	i
>7095	Identifier	m_image_data
>7096	Argument	cameras [ num_init_cams ] . k_known
>7097	MemberAccess	cameras [ num_init_cams ] . k_known
>7098	Identifier	k_known
>7099	ArrayIndexing	cameras [ num_init_cams ]
>7100	Identifier	num_init_cams
>7101	Identifier	cameras
>7102	Callee	memcpy
>7103	Identifier	memcpy
>7104	ExpressionStatement	 
>7105	CallExpression	memcpy ( cameras [ num_init_cams ] . K_known , m_image_data [ i ] . m_K , 9 * sizeof ( double ) )
>7106	ArgumentList	cameras [ num_init_cams ] . K_known
>7107	Argument	9 * sizeof ( double )
>7108	MultiplicativeExpression	9 * sizeof ( double )
>7109	SizeofExpr	sizeof ( double )
>7110	SizeofOperand	double
>7111	Sizeof	sizeof
>7112	PrimaryExpression	9
>7113	Argument	m_image_data [ i ] . m_K
>7114	MemberAccess	m_image_data [ i ] . m_K
>7115	Identifier	m_K
>7116	ArrayIndexing	m_image_data [ i ]
>7117	Identifier	i
>7118	Identifier	m_image_data
>7119	Argument	cameras [ num_init_cams ] . K_known
>7120	MemberAccess	cameras [ num_init_cams ] . K_known
>7121	Identifier	K_known
>7122	ArrayIndexing	cameras [ num_init_cams ]
>7123	Identifier	num_init_cams
>7124	Identifier	cameras
>7125	Callee	memcpy
>7126	Identifier	memcpy
>7127	Condition	 
>7128	MemberAccess	m_image_data [ i ] . m_known_intrinsics
>7129	Identifier	m_known_intrinsics
>7130	ArrayIndexing	m_image_data [ i ]
>7131	Identifier	i
>7132	Identifier	m_image_data
>7133	IfStatement	if ( m_estimate_distortion )
>7134	CompoundStatement	 
>7135	ExpressionStatement	 
>7136	CallExpression	InvertDistortion ( 6 , 6 , 0.0 , max_radius , k_dist , cameras [ num_init_cams ] . k_inv )
>7137	ArgumentList	6
>7138	Argument	cameras [ num_init_cams ] . k_inv
>7139	MemberAccess	cameras [ num_init_cams ] . k_inv
>7140	Identifier	k_inv
>7141	ArrayIndexing	cameras [ num_init_cams ]
>7142	Identifier	num_init_cams
>7143	Identifier	cameras
>7144	Argument	k_dist
>7145	Identifier	k_dist
>7146	Argument	max_radius
>7147	Identifier	max_radius
>7148	Argument	0.0
>7149	PrimaryExpression	0.0
>7150	Argument	6
>7151	PrimaryExpression	6
>7152	Argument	6
>7153	PrimaryExpression	6
>7154	Callee	InvertDistortion
>7155	Identifier	InvertDistortion
>7156	IdentifierDeclStatement	 
>7157	IdentifierDecl	max_radius = sqrt ( w_2 * w_2 + h_2 * h_2 ) / cameras [ num_init_cams ] . f
>7158	AssignmentExpr	max_radius = sqrt ( w_2 * w_2 + h_2 * h_2 ) / cameras [ num_init_cams ] . f
>7159	MultiplicativeExpression	sqrt ( w_2 * w_2 + h_2 * h_2 ) / cameras [ num_init_cams ] . f
>7160	MemberAccess	cameras [ num_init_cams ] . f
>7161	Identifier	f
>7162	ArrayIndexing	cameras [ num_init_cams ]
>7163	Identifier	num_init_cams
>7164	Identifier	cameras
>7165	CallExpression	sqrt ( w_2 * w_2 + h_2 * h_2 )
>7166	ArgumentList	w_2 * w_2 + h_2 * h_2
>7167	Argument	w_2 * w_2 + h_2 * h_2
>7168	AdditiveExpression	w_2 * w_2 + h_2 * h_2
>7169	MultiplicativeExpression	h_2 * h_2
>7170	Identifier	h_2
>7171	Identifier	h_2
>7172	MultiplicativeExpression	w_2 * w_2
>7173	Identifier	w_2
>7174	Identifier	w_2
>7175	Callee	sqrt
>7176	Identifier	sqrt
>7177	Identifier	max_radius
>7178	Identifier	max_radius
>7179	IdentifierDeclType	double
>7180	IdentifierDeclStatement	 
>7181	IdentifierDecl	h_2 = 0.5 * m_image_data [ i ] . GetHeight ( )
>7182	AssignmentExpr	h_2 = 0.5 * m_image_data [ i ] . GetHeight ( )
>7183	MultiplicativeExpression	0.5 * m_image_data [ i ] . GetHeight ( )
>7184	CallExpression	m_image_data [ i ] . GetHeight ( )
>7185	ArgumentList	 
>7186	Callee	m_image_data [ i ] . GetHeight
>7187	MemberAccess	m_image_data [ i ] . GetHeight
>7188	Identifier	GetHeight
>7189	ArrayIndexing	m_image_data [ i ]
>7190	Identifier	i
>7191	Identifier	m_image_data
>7192	PrimaryExpression	0.5
>7193	Identifier	h_2
>7194	Identifier	h_2
>7195	IdentifierDeclType	double
>7196	IdentifierDeclStatement	 
>7197	IdentifierDecl	w_2 = 0.5 * m_image_data [ i ] . GetWidth ( )
>7198	AssignmentExpr	w_2 = 0.5 * m_image_data [ i ] . GetWidth ( )
>7199	MultiplicativeExpression	0.5 * m_image_data [ i ] . GetWidth ( )
>7200	CallExpression	m_image_data [ i ] . GetWidth ( )
>7201	ArgumentList	 
>7202	Callee	m_image_data [ i ] . GetWidth
>7203	MemberAccess	m_image_data [ i ] . GetWidth
>7204	Identifier	GetWidth
>7205	ArrayIndexing	m_image_data [ i ]
>7206	Identifier	i
>7207	Identifier	m_image_data
>7208	PrimaryExpression	0.5
>7209	Identifier	w_2
>7210	Identifier	w_2
>7211	IdentifierDeclType	double
>7212	IdentifierDeclStatement	 
>7213	IdentifierDecl	k_dist [ 6 ] = { 0.0 , 1.0 , 0.0 , k [ 0 ] , 0.0 , k [ 1 ] }
>7214	AssignmentExpr	k_dist [ 6 ] = { 0.0 , 1.0 , 0.0 , k [ 0 ] , 0.0 , k [ 1 ] }
>7215	InitializerList	0.0
>7216	ArrayIndexing	k [ 1 ]
>7217	PrimaryExpression	1
>7218	Identifier	k
>7219	PrimaryExpression	0.0
>7220	ArrayIndexing	k [ 0 ]
>7221	PrimaryExpression	0
>7222	Identifier	k
>7223	PrimaryExpression	0.0
>7224	PrimaryExpression	1.0
>7225	PrimaryExpression	0.0
>7226	Identifier	k_dist
>7227	PrimaryExpression	6
>7228	Identifier	k_dist
>7229	IdentifierDeclType	double [ 6 ]
>7230	ExpressionStatement	 
>7231	AssignmentExpr	k [ 1 ] = cameras [ num_init_cams ] . k [ 1 ] = m_image_data [ i ] . m_camera . m_k [ 1 ]
>7232	AssignmentExpr	cameras [ num_init_cams ] . k [ 1 ] = m_image_data [ i ] . m_camera . m_k [ 1 ]
>7233	ArrayIndexing	m_image_data [ i ] . m_camera . m_k [ 1 ]
>7234	PrimaryExpression	1
>7235	MemberAccess	m_image_data [ i ] . m_camera . m_k
>7236	Identifier	m_k
>7237	MemberAccess	m_image_data [ i ] . m_camera
>7238	Identifier	m_camera
>7239	ArrayIndexing	m_image_data [ i ]
>7240	Identifier	i
>7241	Identifier	m_image_data
>7242	ArrayIndexing	cameras [ num_init_cams ] . k [ 1 ]
>7243	PrimaryExpression	1
>7244	MemberAccess	cameras [ num_init_cams ] . k
>7245	Identifier	k
>7246	ArrayIndexing	cameras [ num_init_cams ]
>7247	Identifier	num_init_cams
>7248	Identifier	cameras
>7249	ArrayIndexing	k [ 1 ]
>7250	PrimaryExpression	1
>7251	Identifier	k
>7252	ExpressionStatement	 
>7253	AssignmentExpr	k [ 0 ] = cameras [ num_init_cams ] . k [ 0 ] = m_image_data [ i ] . m_camera . m_k [ 0 ]
>7254	AssignmentExpr	cameras [ num_init_cams ] . k [ 0 ] = m_image_data [ i ] . m_camera . m_k [ 0 ]
>7255	ArrayIndexing	m_image_data [ i ] . m_camera . m_k [ 0 ]
>7256	PrimaryExpression	0
>7257	MemberAccess	m_image_data [ i ] . m_camera . m_k
>7258	Identifier	m_k
>7259	MemberAccess	m_image_data [ i ] . m_camera
>7260	Identifier	m_camera
>7261	ArrayIndexing	m_image_data [ i ]
>7262	Identifier	i
>7263	Identifier	m_image_data
>7264	ArrayIndexing	cameras [ num_init_cams ] . k [ 0 ]
>7265	PrimaryExpression	0
>7266	MemberAccess	cameras [ num_init_cams ] . k
>7267	Identifier	k
>7268	ArrayIndexing	cameras [ num_init_cams ]
>7269	Identifier	num_init_cams
>7270	Identifier	cameras
>7271	ArrayIndexing	k [ 0 ]
>7272	PrimaryExpression	0
>7273	Identifier	k
>7274	IdentifierDeclStatement	 
>7275	IdentifierDecl	k [ 2 ]
>7276	PrimaryExpression	2
>7277	Identifier	k
>7278	IdentifierDeclType	double [ 2 ]
>7279	Condition	 
>7280	Identifier	m_estimate_distortion
>7281	ExpressionStatement	 
>7282	AssignmentExpr	cameras [ num_init_cams ] . f = m_image_data [ i ] . m_camera . m_focal
>7283	MemberAccess	m_image_data [ i ] . m_camera . m_focal
>7284	Identifier	m_focal
>7285	MemberAccess	m_image_data [ i ] . m_camera
>7286	Identifier	m_camera
>7287	ArrayIndexing	m_image_data [ i ]
>7288	Identifier	i
>7289	Identifier	m_image_data
>7290	MemberAccess	cameras [ num_init_cams ] . f
>7291	Identifier	f
>7292	ArrayIndexing	cameras [ num_init_cams ]
>7293	Identifier	num_init_cams
>7294	Identifier	cameras
>7295	ExpressionStatement	 
>7296	AssignmentExpr	cameras [ num_init_cams ] . t [ 2 ] *= - 1.0
>7297	UnaryOp	- 1.0
>7298	PrimaryExpression	1.0
>7299	UnaryOperator	-
>7300	ArrayIndexing	cameras [ num_init_cams ] . t [ 2 ]
>7301	PrimaryExpression	2
>7302	MemberAccess	cameras [ num_init_cams ] . t
>7303	Identifier	t
>7304	ArrayIndexing	cameras [ num_init_cams ]
>7305	Identifier	num_init_cams
>7306	Identifier	cameras
>7307	ExpressionStatement	 
>7308	AssignmentExpr	cameras [ num_init_cams ] . t [ 1 ] *= - 1.0
>7309	UnaryOp	- 1.0
>7310	PrimaryExpression	1.0
>7311	UnaryOperator	-
>7312	ArrayIndexing	cameras [ num_init_cams ] . t [ 1 ]
>7313	PrimaryExpression	1
>7314	MemberAccess	cameras [ num_init_cams ] . t
>7315	Identifier	t
>7316	ArrayIndexing	cameras [ num_init_cams ]
>7317	Identifier	num_init_cams
>7318	Identifier	cameras
>7319	ExpressionStatement	 
>7320	AssignmentExpr	cameras [ num_init_cams ] . t [ 0 ] *= - 1.0
>7321	UnaryOp	- 1.0
>7322	PrimaryExpression	1.0
>7323	UnaryOperator	-
>7324	ArrayIndexing	cameras [ num_init_cams ] . t [ 0 ]
>7325	PrimaryExpression	0
>7326	MemberAccess	cameras [ num_init_cams ] . t
>7327	Identifier	t
>7328	ArrayIndexing	cameras [ num_init_cams ]
>7329	Identifier	num_init_cams
>7330	Identifier	cameras
>7331	ExpressionStatement	 
>7332	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , m_image_data [ i ] . m_camera . m_R , m_image_data [ i ] . m_camera . \
>7333	ArgumentList	3
>7334	Argument	cameras [ num_init_cams ] . t
>7335	MemberAccess	cameras [ num_init_cams ] . t
>7336	Identifier	t
>7337	ArrayIndexing	cameras [ num_init_cams ]
>7338	Identifier	num_init_cams
>7339	Identifier	cameras
>7340	Argument	m_image_data [ i ] . m_camera . m_t
>7341	MemberAccess	m_image_data [ i ] . m_camera . m_t
>7342	Identifier	m_t
>7343	MemberAccess	m_image_data [ i ] . m_camera
>7344	Identifier	m_camera
>7345	ArrayIndexing	m_image_data [ i ]
>7346	Identifier	i
>7347	Identifier	m_image_data
>7348	Argument	m_image_data [ i ] . m_camera . m_R
>7349	MemberAccess	m_image_data [ i ] . m_camera . m_R
>7350	Identifier	m_R
>7351	MemberAccess	m_image_data [ i ] . m_camera
>7352	Identifier	m_camera
>7353	ArrayIndexing	m_image_data [ i ]
>7354	Identifier	i
>7355	Identifier	m_image_data
>7356	Argument	1
>7357	PrimaryExpression	1
>7358	Argument	3
>7359	PrimaryExpression	3
>7360	Argument	3
>7361	PrimaryExpression	3
>7362	Argument	3
>7363	PrimaryExpression	3
>7364	Callee	matrix_transpose_product
>7365	Identifier	matrix_transpose_product
>7366	ExpressionStatement	 
>7367	CallExpression	memcpy ( cameras [ num_init_cams ] . R , m_image_data [ i ] . m_camera . m_R , sizeof ( double ) * 9 )
>7368	ArgumentList	cameras [ num_init_cams ] . R
>7369	Argument	sizeof ( double ) * 9
>7370	MultiplicativeExpression	sizeof ( double ) * 9
>7371	PrimaryExpression	9
>7372	SizeofExpr	sizeof ( double )
>7373	SizeofOperand	double
>7374	Sizeof	sizeof
>7375	Argument	m_image_data [ i ] . m_camera . m_R
>7376	MemberAccess	m_image_data [ i ] . m_camera . m_R
>7377	Identifier	m_R
>7378	MemberAccess	m_image_data [ i ] . m_camera
>7379	Identifier	m_camera
>7380	ArrayIndexing	m_image_data [ i ]
>7381	Identifier	i
>7382	Identifier	m_image_data
>7383	Argument	cameras [ num_init_cams ] . R
>7384	MemberAccess	cameras [ num_init_cams ] . R
>7385	Identifier	R
>7386	ArrayIndexing	cameras [ num_init_cams ]
>7387	Identifier	num_init_cams
>7388	Identifier	cameras
>7389	Callee	memcpy
>7390	Identifier	memcpy
>7391	ExpressionStatement	 
>7392	CallExpression	InitializeCameraParams ( m_image_data [ i ] , cameras [ num_init_cams ] )
>7393	ArgumentList	m_image_data [ i ]
>7394	Argument	cameras [ num_init_cams ]
>7395	ArrayIndexing	cameras [ num_init_cams ]
>7396	Identifier	num_init_cams
>7397	Identifier	cameras
>7398	Argument	m_image_data [ i ]
>7399	ArrayIndexing	m_image_data [ i ]
>7400	Identifier	i
>7401	Identifier	m_image_data
>7402	Callee	InitializeCameraParams
>7403	Identifier	InitializeCameraParams
>7404	ExpressionStatement	 
>7405	AssignmentExpr	added_order_inv [ i ] = num_init_cams
>7406	Identifier	num_init_cams
>7407	ArrayIndexing	added_order_inv [ i ]
>7408	Identifier	i
>7409	Identifier	added_order_inv
>7410	ExpressionStatement	 
>7411	AssignmentExpr	added_order [ num_init_cams ] = i
>7412	Identifier	i
>7413	ArrayIndexing	added_order [ num_init_cams ]
>7414	Identifier	num_init_cams
>7415	Identifier	added_order
>7416	ExpressionStatement	 
>7417	CallExpression	SetTracks ( i )
>7418	ArgumentList	i
>7419	Argument	i
>7420	Identifier	i
>7421	Callee	SetTracks
>7422	Identifier	SetTracks
>7423	ExpressionStatement	 
>7424	CallExpression	m_image_data [ i ] . ReadKeyColors ( )
>7425	ArgumentList	 
>7426	Callee	m_image_data [ i ] . ReadKeyColors
>7427	MemberAccess	m_image_data [ i ] . ReadKeyColors
>7428	Identifier	ReadKeyColors
>7429	ArrayIndexing	m_image_data [ i ]
>7430	Identifier	i
>7431	Identifier	m_image_data
>7432	ExpressionStatement	 
>7433	CallExpression	m_image_data [ i ] . LoadKeys ( false , ! m_optimize_for_fisheye )
>7434	ArgumentList	false
>7435	Argument	! m_optimize_for_fisheye
>7436	UnaryOp	! m_optimize_for_fisheye
>7437	Identifier	m_optimize_for_fisheye
>7438	UnaryOperator	!
>7439	Argument	false
>7440	Identifier	false
>7441	Callee	m_image_data [ i ] . LoadKeys
>7442	MemberAccess	m_image_data [ i ] . LoadKeys
>7443	Identifier	LoadKeys
>7444	ArrayIndexing	m_image_data [ i ]
>7445	Identifier	i
>7446	Identifier	m_image_data
>7447	ExpressionStatement	 
>7448	Statement	 
>7449	Statement	 
>7450	Statement	 
>7451	Statement	 
>7452	Statement	 
>7453	Statement	 
>7454	Statement	 
>7455	Condition	 
>7456	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>7457	Identifier	m_adjusted
>7458	MemberAccess	m_image_data [ i ] . m_camera
>7459	Identifier	m_camera
>7460	ArrayIndexing	m_image_data [ i ]
>7461	Identifier	i
>7462	Identifier	m_image_data
>7463	IncDecOp	 
>7464	IncDec	++
>7465	Identifier	i
>7466	Condition	 
>7467	RelationalExpression	i < num_images
>7468	Identifier	num_images
>7469	Identifier	i
>7470	ForInit	 
>7471	IdentifierDeclStatement	int i = 0 ;
>7472	IdentifierDecl	i = 0
>7473	AssignmentExpr	i = 0
>7474	PrimaryExpression	0
>7475	Identifier	i
>7476	Identifier	i
>7477	IdentifierDeclType	int
>7478	ExpressionStatement	 
>7479	AssignmentExpr	num_init_cams = 0
>7480	PrimaryExpression	0
>7481	Identifier	num_init_cams
>7482	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>7483	CompoundStatement	 
>7484	ForStatement	for ( iter = m_image_data [ i ] . m_keys . begin ( ) ; iter != m_image_data [ i ] . m_keys . end ( ) ; iter ++ )
>7485	CompoundStatement	 
>7486	ExpressionStatement	 
>7487	AssignmentExpr	iter -> m_extra = - 1
>7488	UnaryOp	- 1
>7489	PrimaryExpression	1
>7490	UnaryOperator	-
>7491	PtrMemberAccess	iter -> m_extra
>7492	Identifier	m_extra
>7493	Identifier	iter
>7494	IncDecOp	 
>7495	IncDec	++
>7496	Identifier	iter
>7497	Condition	 
>7498	EqualityExpression	iter != m_image_data [ i ] . m_keys . end ( )
>7499	CallExpression	m_image_data [ i ] . m_keys . end ( )
>7500	ArgumentList	 
>7501	Callee	m_image_data [ i ] . m_keys . end
>7502	MemberAccess	m_image_data [ i ] . m_keys . end
>7503	Identifier	end
>7504	MemberAccess	m_image_data [ i ] . m_keys
>7505	Identifier	m_keys
>7506	ArrayIndexing	m_image_data [ i ]
>7507	Identifier	i
>7508	Identifier	m_image_data
>7509	Identifier	iter
>7510	ForInit	 
>7511	AssignmentExpr	iter = m_image_data [ i ] . m_keys . begin ( )
>7512	CallExpression	m_image_data [ i ] . m_keys . begin ( )
>7513	ArgumentList	 
>7514	Callee	m_image_data [ i ] . m_keys . begin
>7515	MemberAccess	m_image_data [ i ] . m_keys . begin
>7516	Identifier	begin
>7517	MemberAccess	m_image_data [ i ] . m_keys
>7518	Identifier	m_keys
>7519	ArrayIndexing	m_image_data [ i ]
>7520	Identifier	i
>7521	Identifier	m_image_data
>7522	Identifier	iter
>7523	IdentifierDeclStatement	 
>7524	IdentifierDecl	iter
>7525	Identifier	iter
>7526	IdentifierDeclType	std 
>7527	IncDecOp	 
>7528	IncDec	++
>7529	Identifier	i
>7530	Condition	 
>7531	RelationalExpression	i < num_images
>7532	Identifier	num_images
>7533	Identifier	i
>7534	ForInit	 
>7535	IdentifierDeclStatement	int i = 0 ;
>7536	IdentifierDecl	i = 0
>7537	AssignmentExpr	i = 0
>7538	PrimaryExpression	0
>7539	Identifier	i
>7540	Identifier	i
>7541	IdentifierDeclType	int
>7542	IdentifierDeclStatement	 
>7543	IdentifierDecl	num_images = GetNumImages ( )
>7544	AssignmentExpr	num_images = GetNumImages ( )
>7545	CallExpression	GetNumImages ( )
>7546	ArgumentList	 
>7547	Callee	GetNumImages
>7548	Identifier	GetNumImages
>7549	Identifier	num_images
>7550	Identifier	num_images
>7551	IdentifierDeclType	int
>7675	FunctionDef	BundlerApp 
>7676	ParameterList	int num_cameras , int num_points , int * added_order , v2_t * projections , char * vmask
>7677	Parameter	 
>7678	Identifier	vmask
>7679	ParameterType	char *
>7680	Parameter	 
>7681	Identifier	projections
>7682	ParameterType	v2_t *
>7683	Parameter	 
>7684	Identifier	added_order
>7685	ParameterType	int *
>7686	Parameter	 
>7687	Identifier	num_points
>7688	ParameterType	int
>7689	Parameter	 
>7690	Identifier	num_cameras
>7691	ParameterType	int
>7692	ReturnType	void
>7693	CompoundStatement	 
>7694	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>7695	CompoundStatement	 
>7696	ForStatement	for ( int j = 0 ; j < num_keys ; j ++ )
>7697	CompoundStatement	 
>7698	IfStatement	if ( pidx >= 0 )
>7699	CompoundStatement	 
>7700	ExpressionStatement	 
>7701	AssignmentExpr	projections [ pidx * num_cameras + i ] = v2_new ( GetKey ( idx , j ) . m_x , GetKey ( idx , j ) . m_y )
>7702	CallExpression	v2_new ( GetKey ( idx , j ) . m_x , GetKey ( idx , j ) . m_y )
>7703	ArgumentList	GetKey ( idx , j ) . m_x
>7704	Argument	GetKey ( idx , j ) . m_y
>7705	MemberAccess	GetKey ( idx , j ) . m_y
>7706	Identifier	m_y
>7707	CallExpression	GetKey ( idx , j )
>7708	ArgumentList	idx
>7709	Argument	j
>7710	Identifier	j
>7711	Argument	idx
>7712	Identifier	idx
>7713	Callee	GetKey
>7714	Identifier	GetKey
>7715	Argument	GetKey ( idx , j ) . m_x
>7716	MemberAccess	GetKey ( idx , j ) . m_x
>7717	Identifier	m_x
>7718	CallExpression	GetKey ( idx , j )
>7719	ArgumentList	idx
>7720	Argument	j
>7721	Identifier	j
>7722	Argument	idx
>7723	Identifier	idx
>7724	Callee	GetKey
>7725	Identifier	GetKey
>7726	Callee	v2_new
>7727	Identifier	v2_new
>7728	ArrayIndexing	projections [ pidx * num_cameras + i ]
>7729	AdditiveExpression	pidx * num_cameras + i
>7730	Identifier	i
>7731	MultiplicativeExpression	pidx * num_cameras
>7732	Identifier	num_cameras
>7733	Identifier	pidx
>7734	Identifier	projections
>7735	ExpressionStatement	 
>7736	AssignmentExpr	vmask [ pidx * num_cameras + i ] = 1
>7737	PrimaryExpression	1
>7738	ArrayIndexing	vmask [ pidx * num_cameras + i ]
>7739	AdditiveExpression	pidx * num_cameras + i
>7740	Identifier	i
>7741	MultiplicativeExpression	pidx * num_cameras
>7742	Identifier	num_cameras
>7743	Identifier	pidx
>7744	Identifier	vmask
>7745	Condition	 
>7746	RelationalExpression	pidx >= 0
>7747	PrimaryExpression	0
>7748	Identifier	pidx
>7749	IdentifierDeclStatement	 
>7750	IdentifierDecl	pidx = GetKey ( idx , j ) . m_extra
>7751	AssignmentExpr	pidx = GetKey ( idx , j ) . m_extra
>7752	MemberAccess	GetKey ( idx , j ) . m_extra
>7753	Identifier	m_extra
>7754	CallExpression	GetKey ( idx , j )
>7755	ArgumentList	idx
>7756	Argument	j
>7757	Identifier	j
>7758	Argument	idx
>7759	Identifier	idx
>7760	Callee	GetKey
>7761	Identifier	GetKey
>7762	Identifier	pidx
>7763	Identifier	pidx
>7764	IdentifierDeclType	int
>7765	IncDecOp	 
>7766	IncDec	++
>7767	Identifier	j
>7768	Condition	 
>7769	RelationalExpression	j < num_keys
>7770	Identifier	num_keys
>7771	Identifier	j
>7772	ForInit	 
>7773	IdentifierDeclStatement	int j = 0 ;
>7774	IdentifierDecl	j = 0
>7775	AssignmentExpr	j = 0
>7776	PrimaryExpression	0
>7777	Identifier	j
>7778	Identifier	j
>7779	IdentifierDeclType	int
>7780	IdentifierDeclStatement	 
>7781	IdentifierDecl	num_keys = GetNumKeys ( idx )
>7782	AssignmentExpr	num_keys = GetNumKeys ( idx )
>7783	CallExpression	GetNumKeys ( idx )
>7784	ArgumentList	idx
>7785	Argument	idx
>7786	Identifier	idx
>7787	Callee	GetNumKeys
>7788	Identifier	GetNumKeys
>7789	Identifier	num_keys
>7790	Identifier	num_keys
>7791	IdentifierDeclType	int
>7792	IdentifierDeclStatement	 
>7793	IdentifierDecl	idx = added_order [ i ]
>7794	AssignmentExpr	idx = added_order [ i ]
>7795	ArrayIndexing	added_order [ i ]
>7796	Identifier	i
>7797	Identifier	added_order
>7798	Identifier	idx
>7799	Identifier	idx
>7800	IdentifierDeclType	int
>7801	IncDecOp	 
>7802	IncDec	++
>7803	Identifier	i
>7804	Condition	 
>7805	RelationalExpression	i < num_cameras
>7806	Identifier	num_cameras
>7807	Identifier	i
>7808	ForInit	 
>7809	IdentifierDeclStatement	int i = 0 ;
>7810	IdentifierDecl	i = 0
>7811	AssignmentExpr	i = 0
>7812	PrimaryExpression	0
>7813	Identifier	i
>7814	Identifier	i
>7815	IdentifierDeclType	int
>7816	ForStatement	for ( int i = 0 ; i < num_cameras * num_points ; i ++ )
>7817	ExpressionStatement	 
>7818	AssignmentExpr	vmask [ i ] = 0
>7819	PrimaryExpression	0
>7820	ArrayIndexing	vmask [ i ]
>7821	Identifier	i
>7822	Identifier	vmask
>7823	IncDecOp	 
>7824	IncDec	++
>7825	Identifier	i
>7826	Condition	 
>7827	RelationalExpression	i < num_cameras * num_points
>7828	MultiplicativeExpression	num_cameras * num_points
>7829	Identifier	num_points
>7830	Identifier	num_cameras
>7831	Identifier	i
>7832	ForInit	 
>7833	IdentifierDeclStatement	int i = 0 ;
>7834	IdentifierDecl	i = 0
>7835	AssignmentExpr	i = 0
>7836	PrimaryExpression	0
>7837	Identifier	i
>7838	Identifier	i
>7839	IdentifierDeclType	int
>7865	FunctionDef	BundlerApp 
>7866	ParameterList	int num_cameras , int num_points , int * added_order , int & parent_idx , int & max_matches
>7867	Parameter	 
>7868	Identifier	max_matches
>7869	ParameterType	int &
>7870	Parameter	 
>7871	Identifier	parent_idx
>7872	ParameterType	int &
>7873	Parameter	 
>7874	Identifier	added_order
>7875	ParameterType	int *
>7876	Parameter	 
>7877	Identifier	num_points
>7878	ParameterType	int
>7879	Parameter	 
>7880	Identifier	num_cameras
>7881	ParameterType	int
>7882	ReturnType	int
>7883	CompoundStatement	 
>7884	ReturnStatement	 
>7885	Identifier	i_best
>7886	ExpressionStatement	 
>7887	Identifier	parents
>7888	Statement	 
>7889	Statement	 
>7890	Statement	 
>7891	ExpressionStatement	 
>7892	Identifier	seen_scores
>7893	Statement	 
>7894	Statement	 
>7895	Statement	 
>7896	ExpressionStatement	 
>7897	Identifier	frontier_scores
>7898	Statement	 
>7899	Statement	 
>7900	Statement	 
>7901	ExpressionStatement	 
>7902	Identifier	frontier
>7903	Statement	 
>7904	Statement	 
>7905	Statement	 
>7906	ExpressionStatement	 
>7907	CallExpression	fflush ( stdout )
>7908	ArgumentList	stdout
>7909	Argument	stdout
>7910	Identifier	stdout
>7911	Callee	fflush
>7912	Identifier	fflush
>7913	ExpressionStatement	 
>7914	CallExpression	printf ( \"  accepting image %d (%d / %d)\n\" , i_best , seen_scores [ i_best ] , frontier_scores [ i_best ] )
>7915	ArgumentList	\"  accepting image %d (%d / %d)\n\"
>7916	Argument	frontier_scores [ i_best ]
>7917	ArrayIndexing	frontier_scores [ i_best ]
>7918	Identifier	i_best
>7919	Identifier	frontier_scores
>7920	Argument	seen_scores [ i_best ]
>7921	ArrayIndexing	seen_scores [ i_best ]
>7922	Identifier	i_best
>7923	Identifier	seen_scores
>7924	Argument	i_best
>7925	Identifier	i_best
>7926	Argument	\"  accepting image %d (%d / %d)\n\"
>7927	PrimaryExpression	\"  accepting image %d (%d / %d)\n\"
>7928	Callee	printf
>7929	Identifier	printf
>7930	IfStatement	if ( parent_idx == - 1 )
>7931	CompoundStatement	 
>7932	ExpressionStatement	 
>7933	CallExpression	printf ( \"Error
>7934	ArgumentList	\"Error
>7935	Argument	\"Error
>7936	PrimaryExpression	\"Error
>7937	Callee	printf
>7938	Identifier	printf
>7939	Condition	 
>7940	EqualityExpression	parent_idx == - 1
>7941	UnaryOp	- 1
>7942	PrimaryExpression	1
>7943	UnaryOperator	-
>7944	Identifier	parent_idx
>7945	ExpressionStatement	 
>7946	AssignmentExpr	max_matches = seen_scores [ i_best ]
>7947	ArrayIndexing	seen_scores [ i_best ]
>7948	Identifier	i_best
>7949	Identifier	seen_scores
>7950	Identifier	max_matches
>7951	ExpressionStatement	 
>7952	AssignmentExpr	parent_idx = parents [ i_best ]
>7953	ArrayIndexing	parents [ i_best ]
>7954	Identifier	i_best
>7955	Identifier	parents
>7956	Identifier	parent_idx
>7957	IfStatement	if ( i_best == - 1 )
>7958	CompoundStatement	 
>7959	ReturnStatement	 
>7960	UnaryOp	- 1
>7961	PrimaryExpression	1
>7962	UnaryOperator	-
>7963	ExpressionStatement	 
>7964	Identifier	parents
>7965	Statement	 
>7966	Statement	 
>7967	Statement	 
>7968	ExpressionStatement	 
>7969	Identifier	seen_scores
>7970	Statement	 
>7971	Statement	 
>7972	Statement	 
>7973	ExpressionStatement	 
>7974	Identifier	frontier_scores
>7975	Statement	 
>7976	Statement	 
>7977	Statement	 
>7978	ExpressionStatement	 
>7979	Identifier	frontier
>7980	Statement	 
>7981	Statement	 
>7982	Statement	 
>7983	ExpressionStatement	 
>7984	AssignmentExpr	max_matches = 0
>7985	PrimaryExpression	0
>7986	Identifier	max_matches
>7987	ExpressionStatement	 
>7988	AssignmentExpr	parent_idx = - 1
>7989	UnaryOp	- 1
>7990	PrimaryExpression	1
>7991	UnaryOperator	-
>7992	Identifier	parent_idx
>7993	Condition	 
>7994	EqualityExpression	i_best == - 1
>7995	UnaryOp	- 1
>7996	PrimaryExpression	1
>7997	UnaryOperator	-
>7998	Identifier	i_best
>7999	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>8000	CompoundStatement	 
>8001	IfStatement	if ( i_best == - 1 )
>8002	ElseStatement	else
>8003	IfStatement	if ( score == top_score )
>8004	ElseStatement	else
>8005	IfStatement	if ( score > top_score )
>8006	CompoundStatement	 
>8007	ExpressionStatement	 
>8008	AssignmentExpr	top_score = score
>8009	Identifier	score
>8010	Identifier	top_score
>8011	ExpressionStatement	 
>8012	AssignmentExpr	i_best = i
>8013	Identifier	i
>8014	Identifier	i_best
>8015	Condition	 
>8016	RelationalExpression	score > top_score
>8017	Identifier	top_score
>8018	Identifier	score
>8019	CompoundStatement	 
>8020	IfStatement	if ( seen_scores [ i ] > seen_scores [ i_best ] )
>8021	CompoundStatement	 
>8022	ExpressionStatement	 
>8023	AssignmentExpr	top_score = score
>8024	Identifier	score
>8025	Identifier	top_score
>8026	ExpressionStatement	 
>8027	AssignmentExpr	i_best = i
>8028	Identifier	i
>8029	Identifier	i_best
>8030	Condition	 
>8031	RelationalExpression	seen_scores [ i ] > seen_scores [ i_best ]
>8032	ArrayIndexing	seen_scores [ i_best ]
>8033	Identifier	i_best
>8034	Identifier	seen_scores
>8035	ArrayIndexing	seen_scores [ i ]
>8036	Identifier	i
>8037	Identifier	seen_scores
>8038	Condition	 
>8039	EqualityExpression	score == top_score
>8040	Identifier	top_score
>8041	Identifier	score
>8042	CompoundStatement	 
>8043	ExpressionStatement	 
>8044	AssignmentExpr	top_score = score
>8045	Identifier	score
>8046	Identifier	top_score
>8047	ExpressionStatement	 
>8048	AssignmentExpr	i_best = i
>8049	Identifier	i
>8050	Identifier	i_best
>8051	Condition	 
>8052	EqualityExpression	i_best == - 1
>8053	UnaryOp	- 1
>8054	PrimaryExpression	1
>8055	UnaryOperator	-
>8056	Identifier	i_best
>8057	IdentifierDeclStatement	 
>8058	IdentifierDecl	score = frontier_scores [ i ]
>8059	AssignmentExpr	score = frontier_scores [ i ]
>8060	ArrayIndexing	frontier_scores [ i ]
>8061	Identifier	i
>8062	Identifier	frontier_scores
>8063	Identifier	score
>8064	Identifier	score
>8065	IdentifierDeclType	double
>8066	IfStatement	if ( seen_scores [ i ] < 0.20 * max_seen_score || seen_scores [ i ] < 32 )
>8067	ContinueStatement	 
>8068	Condition	 
>8069	OrExpression	seen_scores [ i ] < 0.20 * max_seen_score || seen_scores [ i ] < 32
>8070	RelationalExpression	seen_scores [ i ] < 32
>8071	PrimaryExpression	32
>8072	ArrayIndexing	seen_scores [ i ]
>8073	Identifier	i
>8074	Identifier	seen_scores
>8075	RelationalExpression	seen_scores [ i ] < 0.20 * max_seen_score
>8076	MultiplicativeExpression	0.20 * max_seen_score
>8077	Identifier	max_seen_score
>8078	PrimaryExpression	0.20
>8079	ArrayIndexing	seen_scores [ i ]
>8080	Identifier	i
>8081	Identifier	seen_scores
>8082	ExpressionStatement	 
>8083	CallExpression	fflush ( stdout )
>8084	ArgumentList	stdout
>8085	Argument	stdout
>8086	Identifier	stdout
>8087	Callee	fflush
>8088	Identifier	fflush
>8089	ExpressionStatement	 
>8090	CallExpression	printf ( \"  score[%d] = %d / %d\n\" , i , seen_scores [ i ] , frontier_scores [ i ] )
>8091	ArgumentList	\"  score[%d] = %d / %d\n\"
>8092	Argument	frontier_scores [ i ]
>8093	ArrayIndexing	frontier_scores [ i ]
>8094	Identifier	i
>8095	Identifier	frontier_scores
>8096	Argument	seen_scores [ i ]
>8097	ArrayIndexing	seen_scores [ i ]
>8098	Identifier	i
>8099	Identifier	seen_scores
>8100	Argument	i
>8101	Identifier	i
>8102	Argument	\"  score[%d] = %d / %d\n\"
>8103	PrimaryExpression	\"  score[%d] = %d / %d\n\"
>8104	Callee	printf
>8105	Identifier	printf
>8106	IfStatement	if ( seen_scores [ i ] == 0 )
>8107	ContinueStatement	 
>8108	Condition	 
>8109	EqualityExpression	seen_scores [ i ] == 0
>8110	PrimaryExpression	0
>8111	ArrayIndexing	seen_scores [ i ]
>8112	Identifier	i
>8113	Identifier	seen_scores
>8114	IncDecOp	 
>8115	IncDec	++
>8116	Identifier	i
>8117	Condition	 
>8118	RelationalExpression	i < num_images
>8119	Identifier	num_images
>8120	Identifier	i
>8121	ForInit	 
>8122	IdentifierDeclStatement	int i = 0 ;
>8123	IdentifierDecl	i = 0
>8124	AssignmentExpr	i = 0
>8125	PrimaryExpression	0
>8126	Identifier	i
>8127	Identifier	i
>8128	IdentifierDeclType	int
>8129	IfStatement	if ( max_seen_score == 0 )
>8130	CompoundStatement	 
>8131	ReturnStatement	 
>8132	UnaryOp	- 1
>8133	PrimaryExpression	1
>8134	UnaryOperator	-
>8135	ExpressionStatement	 
>8136	AssignmentExpr	max_matches = 0
>8137	PrimaryExpression	0
>8138	Identifier	max_matches
>8139	Condition	 
>8140	EqualityExpression	max_seen_score == 0
>8141	PrimaryExpression	0
>8142	Identifier	max_seen_score
>8143	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>8144	CompoundStatement	 
>8145	IfStatement	if ( seen_scores [ i ] > max_seen_score )
>8146	ExpressionStatement	 
>8147	AssignmentExpr	max_seen_score = seen_scores [ i ]
>8148	ArrayIndexing	seen_scores [ i ]
>8149	Identifier	i
>8150	Identifier	seen_scores
>8151	Identifier	max_seen_score
>8152	Condition	 
>8153	RelationalExpression	seen_scores [ i ] > max_seen_score
>8154	Identifier	max_seen_score
>8155	ArrayIndexing	seen_scores [ i ]
>8156	Identifier	i
>8157	Identifier	seen_scores
>8158	IncDecOp	 
>8159	IncDec	++
>8160	Identifier	i
>8161	Condition	 
>8162	RelationalExpression	i < num_images
>8163	Identifier	num_images
>8164	Identifier	i
>8165	ForInit	 
>8166	IdentifierDeclStatement	int i = 0 ;
>8167	IdentifierDecl	i = 0
>8168	AssignmentExpr	i = 0
>8169	PrimaryExpression	0
>8170	Identifier	i
>8171	Identifier	i
>8172	IdentifierDeclType	int
>8173	IdentifierDeclStatement	 
>8174	IdentifierDecl	max_seen_score = 0
>8175	AssignmentExpr	max_seen_score = 0
>8176	PrimaryExpression	0
>8177	Identifier	max_seen_score
>8178	Identifier	max_seen_score
>8179	IdentifierDeclType	int
>8180	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>8181	CompoundStatement	 
>8182	ExpressionStatement	 
>8183	Identifier	saw
>8184	Statement	 
>8185	Statement	 
>8186	Statement	 
>8187	ExpressionStatement	 
>8188	AssignmentExpr	parents [ i ] = parent_idx_best
>8189	Identifier	parent_idx_best
>8190	ArrayIndexing	parents [ i ]
>8191	Identifier	i
>8192	Identifier	parents
>8193	ExpressionStatement	 
>8194	AssignmentExpr	seen_scores [ i ] = num_existing_matches
>8195	Identifier	num_existing_matches
>8196	ArrayIndexing	seen_scores [ i ]
>8197	Identifier	i
>8198	Identifier	seen_scores
>8199	ForStatement	for ( int j = 0 ; j < num_images ; j ++ )
>8200	CompoundStatement	 
>8201	IfStatement	if ( num_matches > 32 )
>8202	ExpressionStatement	 
>8203	IncDecOp	frontier_scores [ i ] ++
>8204	IncDec	++
>8205	ArrayIndexing	frontier_scores [ i ]
>8206	Identifier	i
>8207	Identifier	frontier_scores
>8208	Condition	 
>8209	RelationalExpression	num_matches > 32
>8210	PrimaryExpression	32
>8211	Identifier	num_matches
>8212	IdentifierDeclStatement	 
>8213	IdentifierDecl	num_matches = m_matches . GetNumMatches ( base )
>8214	AssignmentExpr	num_matches = m_matches . GetNumMatches ( base )
>8215	CallExpression	m_matches . GetNumMatches ( base )
>8216	ArgumentList	base
>8217	Argument	base
>8218	Identifier	base
>8219	Callee	m_matches . GetNumMatches
>8220	MemberAccess	m_matches . GetNumMatches
>8221	Identifier	GetNumMatches
>8222	Identifier	m_matches
>8223	Identifier	num_matches
>8224	Identifier	num_matches
>8225	IdentifierDeclType	unsigned int
>8226	IdentifierDeclStatement	 
>8227	IdentifierDecl	base = GetMatchIndex ( i , j )
>8228	AssignmentExpr	base = GetMatchIndex ( i , j )
>8229	CallExpression	GetMatchIndex ( i , j )
>8230	ArgumentList	i
>8231	Argument	j
>8232	Identifier	j
>8233	Argument	i
>8234	Identifier	i
>8235	Callee	GetMatchIndex
>8236	Identifier	GetMatchIndex
>8237	Identifier	base
>8238	Identifier	base
>8239	IdentifierDeclType	MatchIndex
>8240	ExpressionStatement	 
>8241	CallExpression	SetMatchesFromTracks ( i , j )
>8242	ArgumentList	i
>8243	Argument	j
>8244	Identifier	j
>8245	Argument	i
>8246	Identifier	i
>8247	Callee	SetMatchesFromTracks
>8248	Identifier	SetMatchesFromTracks
>8249	IfStatement	if ( frontier [ j ] )
>8250	ContinueStatement	 
>8251	Condition	 
>8252	ArrayIndexing	frontier [ j ]
>8253	Identifier	j
>8254	Identifier	frontier
>8255	IncDecOp	 
>8256	IncDec	++
>8257	Identifier	j
>8258	Condition	 
>8259	RelationalExpression	j < num_images
>8260	Identifier	num_images
>8261	Identifier	j
>8262	ForInit	 
>8263	IdentifierDeclStatement	int j = 0 ;
>8264	IdentifierDecl	j = 0
>8265	AssignmentExpr	j = 0
>8266	PrimaryExpression	0
>8267	Identifier	j
>8268	Identifier	j
>8269	IdentifierDeclType	int
>8270	IfStatement	if ( num_existing_matches > 0 )
>8271	ExpressionStatement	 
>8272	CallExpression	printf ( \"  existing_matches[%d] = %d\n\" , i , num_existing_matches )
>8273	ArgumentList	\"  existing_matches[%d] = %d\n\"
>8274	Argument	num_existing_matches
>8275	Identifier	num_existing_matches
>8276	Argument	i
>8277	Identifier	i
>8278	Argument	\"  existing_matches[%d] = %d\n\"
>8279	PrimaryExpression	\"  existing_matches[%d] = %d\n\"
>8280	Callee	printf
>8281	Identifier	printf
>8282	Condition	 
>8283	RelationalExpression	num_existing_matches > 0
>8284	PrimaryExpression	0
>8285	Identifier	num_existing_matches
>8286	ForStatement	for ( int j = 0 ; j < num_cameras ; j ++ )
>8287	CompoundStatement	 
>8288	ExpressionStatement	 
>8289	CallExpression	m_matches . ClearMatch ( base )
>8290	ArgumentList	base
>8291	Argument	base
>8292	Identifier	base
>8293	Callee	m_matches . ClearMatch
>8294	MemberAccess	m_matches . ClearMatch
>8295	Identifier	ClearMatch
>8296	Identifier	m_matches
>8297	IfStatement	if ( num_matches > max_matches_curr )
>8298	CompoundStatement	 
>8299	ExpressionStatement	 
>8300	AssignmentExpr	max_matches_curr = num_matches
>8301	Identifier	num_matches
>8302	Identifier	max_matches_curr
>8303	ExpressionStatement	 
>8304	AssignmentExpr	parent_idx_best = j
>8305	Identifier	j
>8306	Identifier	parent_idx_best
>8307	Condition	 
>8308	RelationalExpression	num_matches > max_matches_curr
>8309	Identifier	max_matches_curr
>8310	Identifier	num_matches
>8311	ForStatement	for ( unsigned int k = 0 ; k < num_matches ; k ++ )
>8312	CompoundStatement	 
>8313	IfStatement	if ( GetKey ( camera_idx , idx2 ) . m_extra >= 0 )
>8314	CompoundStatement	 
>8315	ExpressionStatement	 
>8316	IncDecOp	num_existing_matches_curr ++
>8317	IncDec	++
>8318	Identifier	num_existing_matches_curr
>8319	IfStatement	if ( saw [ pidx ] == 0 )
>8320	CompoundStatement	 
>8321	ExpressionStatement	 
>8322	AssignmentExpr	saw [ pidx ] = 1
>8323	PrimaryExpression	1
>8324	ArrayIndexing	saw [ pidx ]
>8325	Identifier	pidx
>8326	Identifier	saw
>8327	ExpressionStatement	 
>8328	IncDecOp	num_existing_matches ++
>8329	IncDec	++
>8330	Identifier	num_existing_matches
>8331	Condition	 
>8332	EqualityExpression	saw [ pidx ] == 0
>8333	PrimaryExpression	0
>8334	ArrayIndexing	saw [ pidx ]
>8335	Identifier	pidx
>8336	Identifier	saw
>8337	IdentifierDeclStatement	 
>8338	IdentifierDecl	pidx = GetKey ( camera_idx , idx2 ) . m_extra
>8339	AssignmentExpr	pidx = GetKey ( camera_idx , idx2 ) . m_extra
>8340	MemberAccess	GetKey ( camera_idx , idx2 ) . m_extra
>8341	Identifier	m_extra
>8342	CallExpression	GetKey ( camera_idx , idx2 )
>8343	ArgumentList	camera_idx
>8344	Argument	idx2
>8345	Identifier	idx2
>8346	Argument	camera_idx
>8347	Identifier	camera_idx
>8348	Callee	GetKey
>8349	Identifier	GetKey
>8350	Identifier	pidx
>8351	Identifier	pidx
>8352	IdentifierDeclType	int
>8353	Condition	 
>8354	RelationalExpression	GetKey ( camera_idx , idx2 ) . m_extra >= 0
>8355	PrimaryExpression	0
>8356	MemberAccess	GetKey ( camera_idx , idx2 ) . m_extra
>8357	Identifier	m_extra
>8358	CallExpression	GetKey ( camera_idx , idx2 )
>8359	ArgumentList	camera_idx
>8360	Argument	idx2
>8361	Identifier	idx2
>8362	Argument	camera_idx
>8363	Identifier	camera_idx
>8364	Callee	GetKey
>8365	Identifier	GetKey
>8366	IdentifierDeclStatement	 
>8367	IdentifierDecl	idx2 = list [ k ] . m_idx2
>8368	AssignmentExpr	idx2 = list [ k ] . m_idx2
>8369	MemberAccess	list [ k ] . m_idx2
>8370	Identifier	m_idx2
>8371	ArrayIndexing	list [ k ]
>8372	Identifier	k
>8373	Identifier	list
>8374	Identifier	idx2
>8375	Identifier	idx2
>8376	IdentifierDeclType	int
>8377	IncDecOp	 
>8378	IncDec	++
>8379	Identifier	k
>8380	Condition	 
>8381	RelationalExpression	k < num_matches
>8382	Identifier	num_matches
>8383	Identifier	k
>8384	ForInit	 
>8385	IdentifierDeclStatement	unsigned int k = 0 ;
>8386	IdentifierDecl	k = 0
>8387	AssignmentExpr	k = 0
>8388	PrimaryExpression	0
>8389	Identifier	k
>8390	Identifier	k
>8391	IdentifierDeclType	unsigned int
>8392	IdentifierDeclStatement	 
>8393	IdentifierDecl	& list = m_matches . GetMatchList ( base )
>8394	AssignmentExpr	& list = m_matches . GetMatchList ( base )
>8395	CallExpression	m_matches . GetMatchList ( base )
>8396	ArgumentList	base
>8397	Argument	base
>8398	Identifier	base
>8399	Callee	m_matches . GetMatchList
>8400	MemberAccess	m_matches . GetMatchList
>8401	Identifier	GetMatchList
>8402	Identifier	m_matches
>8403	Identifier	list
>8404	Identifier	list
>8405	IdentifierDeclType	const std 
>8406	IdentifierDeclStatement	 
>8407	IdentifierDecl	num_existing_matches_curr = 0
>8408	AssignmentExpr	num_existing_matches_curr = 0
>8409	PrimaryExpression	0
>8410	Identifier	num_existing_matches_curr
>8411	Identifier	num_existing_matches_curr
>8412	IdentifierDeclType	int
>8413	IdentifierDeclStatement	 
>8414	IdentifierDecl	num_matches = m_matches . GetNumMatches ( base )
>8415	AssignmentExpr	num_matches = m_matches . GetNumMatches ( base )
>8416	CallExpression	m_matches . GetNumMatches ( base )
>8417	ArgumentList	base
>8418	Argument	base
>8419	Identifier	base
>8420	Callee	m_matches . GetNumMatches
>8421	MemberAccess	m_matches . GetNumMatches
>8422	Identifier	GetNumMatches
>8423	Identifier	m_matches
>8424	Identifier	num_matches
>8425	Identifier	num_matches
>8426	IdentifierDeclType	unsigned int
>8427	ExpressionStatement	 
>8428	CallExpression	SetMatchesFromTracks ( i , camera_idx )
>8429	ArgumentList	i
>8430	Argument	camera_idx
>8431	Identifier	camera_idx
>8432	Argument	i
>8433	Identifier	i
>8434	Callee	SetMatchesFromTracks
>8435	Identifier	SetMatchesFromTracks
>8436	IdentifierDeclStatement	 
>8437	IdentifierDecl	base = GetMatchIndex ( i , camera_idx )
>8438	AssignmentExpr	base = GetMatchIndex ( i , camera_idx )
>8439	CallExpression	GetMatchIndex ( i , camera_idx )
>8440	ArgumentList	i
>8441	Argument	camera_idx
>8442	Identifier	camera_idx
>8443	Argument	i
>8444	Identifier	i
>8445	Callee	GetMatchIndex
>8446	Identifier	GetMatchIndex
>8447	Identifier	base
>8448	Identifier	base
>8449	IdentifierDeclType	MatchIndex
>8450	IdentifierDeclStatement	 
>8451	IdentifierDecl	camera_idx = added_order [ j ]
>8452	AssignmentExpr	camera_idx = added_order [ j ]
>8453	ArrayIndexing	added_order [ j ]
>8454	Identifier	j
>8455	Identifier	added_order
>8456	Identifier	camera_idx
>8457	Identifier	camera_idx
>8458	IdentifierDeclType	int
>8459	IncDecOp	 
>8460	IncDec	++
>8461	Identifier	j
>8462	Condition	 
>8463	RelationalExpression	j < num_cameras
>8464	Identifier	num_cameras
>8465	Identifier	j
>8466	ForInit	 
>8467	IdentifierDeclStatement	int j = 0 ;
>8468	IdentifierDecl	j = 0
>8469	AssignmentExpr	j = 0
>8470	PrimaryExpression	0
>8471	Identifier	j
>8472	Identifier	j
>8473	IdentifierDeclType	int
>8474	IdentifierDeclStatement	 
>8475	IdentifierDecl	parent_idx_best = - 1
>8476	AssignmentExpr	parent_idx_best = - 1
>8477	UnaryOp	- 1
>8478	PrimaryExpression	1
>8479	UnaryOperator	-
>8480	Identifier	parent_idx_best
>8481	Identifier	parent_idx_best
>8482	IdentifierDeclType	int
>8483	IdentifierDeclStatement	 
>8484	IdentifierDecl	max_matches_curr = 0
>8485	AssignmentExpr	max_matches_curr = 0
>8486	PrimaryExpression	0
>8487	Identifier	max_matches_curr
>8488	Identifier	max_matches_curr
>8489	IdentifierDeclType	unsigned int
>8490	IdentifierDeclStatement	 
>8491	IdentifierDecl	num_existing_matches = 0
>8492	AssignmentExpr	num_existing_matches = 0
>8493	PrimaryExpression	0
>8494	Identifier	num_existing_matches
>8495	Identifier	num_existing_matches
>8496	IdentifierDeclType	int
>8497	ForStatement	for ( int j = 0 ; j < num_points ; j ++ )
>8498	ExpressionStatement	 
>8499	AssignmentExpr	saw [ j ] = 0
>8500	PrimaryExpression	0
>8501	ArrayIndexing	saw [ j ]
>8502	Identifier	j
>8503	Identifier	saw
>8504	IncDecOp	 
>8505	IncDec	++
>8506	Identifier	j
>8507	Condition	 
>8508	RelationalExpression	j < num_points
>8509	Identifier	num_points
>8510	Identifier	j
>8511	ForInit	 
>8512	IdentifierDeclStatement	int j = 0 ;
>8513	IdentifierDecl	j = 0
>8514	AssignmentExpr	j = 0
>8515	PrimaryExpression	0
>8516	Identifier	j
>8517	Identifier	j
>8518	IdentifierDeclType	int
>8519	IdentifierDeclStatement	 
>8520	IdentifierDecl	* saw = new int [ num_points ]
>8521	AssignmentExpr	* saw = new int [ num_points ]
>8522	Identifier	num_points
>8523	Identifier	num_points
>8524	Identifier	saw
>8525	IdentifierDeclType	int *
>8526	IfStatement	if ( added )
>8527	ContinueStatement	 
>8528	Condition	 
>8529	Identifier	added
>8530	ForStatement	for ( int j = 0 ; j < num_cameras ; j ++ )
>8531	CompoundStatement	 
>8532	IfStatement	if ( added_order [ j ] == i )
>8533	CompoundStatement	 
>8534	BreakStatement	 
>8535	ExpressionStatement	 
>8536	AssignmentExpr	added = true
>8537	Identifier	true
>8538	Identifier	added
>8539	Condition	 
>8540	EqualityExpression	added_order [ j ] == i
>8541	Identifier	i
>8542	ArrayIndexing	added_order [ j ]
>8543	Identifier	j
>8544	Identifier	added_order
>8545	IncDecOp	 
>8546	IncDec	++
>8547	Identifier	j
>8548	Condition	 
>8549	RelationalExpression	j < num_cameras
>8550	Identifier	num_cameras
>8551	Identifier	j
>8552	ForInit	 
>8553	IdentifierDeclStatement	int j = 0 ;
>8554	IdentifierDecl	j = 0
>8555	AssignmentExpr	j = 0
>8556	PrimaryExpression	0
>8557	Identifier	j
>8558	Identifier	j
>8559	IdentifierDeclType	int
>8560	IdentifierDeclStatement	 
>8561	IdentifierDecl	added = false
>8562	AssignmentExpr	added = false
>8563	Identifier	false
>8564	Identifier	false
>8565	Identifier	added
>8566	IdentifierDeclType	bool
>8567	IfStatement	if ( m_only_bundle_init_focal && ! m_image_data [ i ] . m_has_init_focal )
>8568	ContinueStatement	 
>8569	Condition	 
>8570	AndExpression	m_only_bundle_init_focal && ! m_image_data [ i ] . m_has_init_focal
>8571	UnaryOp	! m_image_data [ i ] . m_has_init_focal
>8572	MemberAccess	m_image_data [ i ] . m_has_init_focal
>8573	Identifier	m_has_init_focal
>8574	ArrayIndexing	m_image_data [ i ]
>8575	Identifier	i
>8576	Identifier	m_image_data
>8577	UnaryOperator	!
>8578	Identifier	m_only_bundle_init_focal
>8579	IfStatement	if ( m_image_data [ i ] . m_ignore_in_bundle )
>8580	ContinueStatement	 
>8581	Condition	 
>8582	MemberAccess	m_image_data [ i ] . m_ignore_in_bundle
>8583	Identifier	m_ignore_in_bundle
>8584	ArrayIndexing	m_image_data [ i ]
>8585	Identifier	i
>8586	Identifier	m_image_data
>8587	IncDecOp	 
>8588	IncDec	++
>8589	Identifier	i
>8590	Condition	 
>8591	RelationalExpression	i < num_images
>8592	Identifier	num_images
>8593	Identifier	i
>8594	ForInit	 
>8595	IdentifierDeclStatement	int i = 0 ;
>8596	IdentifierDecl	i = 0
>8597	AssignmentExpr	i = 0
>8598	PrimaryExpression	0
>8599	Identifier	i
>8600	Identifier	i
>8601	IdentifierDeclType	int
>8602	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>8603	ExpressionStatement	 
>8604	AssignmentExpr	frontier_scores [ i ] = seen_scores [ i ] = 0
>8605	AssignmentExpr	seen_scores [ i ] = 0
>8606	PrimaryExpression	0
>8607	ArrayIndexing	seen_scores [ i ]
>8608	Identifier	i
>8609	Identifier	seen_scores
>8610	ArrayIndexing	frontier_scores [ i ]
>8611	Identifier	i
>8612	Identifier	frontier_scores
>8613	IncDecOp	 
>8614	IncDec	++
>8615	Identifier	i
>8616	Condition	 
>8617	RelationalExpression	i < num_images
>8618	Identifier	num_images
>8619	Identifier	i
>8620	ForInit	 
>8621	IdentifierDeclStatement	int i = 0 ;
>8622	IdentifierDecl	i = 0
>8623	AssignmentExpr	i = 0
>8624	PrimaryExpression	0
>8625	Identifier	i
>8626	Identifier	i
>8627	IdentifierDeclType	int
>8628	IdentifierDeclStatement	 
>8629	IdentifierDecl	* parents = new int [ num_images ]
>8630	AssignmentExpr	* parents = new int [ num_images ]
>8631	Identifier	num_images
>8632	Identifier	num_images
>8633	Identifier	parents
>8634	IdentifierDeclType	int *
>8635	IdentifierDeclStatement	 
>8636	IdentifierDecl	* seen_scores = new int [ num_images ]
>8637	AssignmentExpr	* seen_scores = new int [ num_images ]
>8638	Identifier	num_images
>8639	Identifier	num_images
>8640	Identifier	seen_scores
>8641	IdentifierDeclType	int *
>8642	IdentifierDeclStatement	 
>8643	IdentifierDecl	* frontier_scores = new int [ num_images ]
>8644	AssignmentExpr	* frontier_scores = new int [ num_images ]
>8645	Identifier	num_images
>8646	Identifier	num_images
>8647	Identifier	frontier_scores
>8648	IdentifierDeclType	int *
>8649	ExpressionStatement	 
>8650	AssignmentExpr	parent_idx = - 1
>8651	UnaryOp	- 1
>8652	PrimaryExpression	1
>8653	UnaryOperator	-
>8654	Identifier	parent_idx
>8655	IdentifierDeclStatement	 
>8656	IdentifierDecl	top_score = 0.0
>8657	AssignmentExpr	top_score = 0.0
>8658	PrimaryExpression	0.0
>8659	Identifier	top_score
>8660	Identifier	top_score
>8661	IdentifierDeclType	double
>8662	IdentifierDeclStatement	 
>8663	IdentifierDecl	i_best = - 1
>8664	AssignmentExpr	i_best = - 1
>8665	UnaryOp	- 1
>8666	PrimaryExpression	1
>8667	UnaryOperator	-
>8668	Identifier	i_best
>8669	Identifier	i_best
>8670	IdentifierDeclType	int
>8671	ExpressionStatement	 
>8672	AssignmentExpr	max_matches = 0
>8673	PrimaryExpression	0
>8674	Identifier	max_matches
>8675	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>8676	CompoundStatement	 
>8677	ForStatement	for ( int j = 0 ; j < num_images ; j ++ )
>8678	CompoundStatement	 
>8679	ExpressionStatement	 
>8680	CallExpression	m_matches . ClearMatch ( base )
>8681	ArgumentList	base
>8682	Argument	base
>8683	Identifier	base
>8684	Callee	m_matches . ClearMatch
>8685	MemberAccess	m_matches . ClearMatch
>8686	Identifier	ClearMatch
>8687	Identifier	m_matches
>8688	IfStatement	if ( num_matches > 32 )
>8689	CompoundStatement	 
>8690	ExpressionStatement	 
>8691	AssignmentExpr	frontier [ j ] = true
>8692	Identifier	true
>8693	ArrayIndexing	frontier [ j ]
>8694	Identifier	j
>8695	Identifier	frontier
>8696	Condition	 
>8697	RelationalExpression	num_matches > 32
>8698	PrimaryExpression	32
>8699	Identifier	num_matches
>8700	IdentifierDeclStatement	 
>8701	IdentifierDecl	num_matches = m_matches . GetNumMatches ( base )
>8702	AssignmentExpr	num_matches = m_matches . GetNumMatches ( base )
>8703	CallExpression	m_matches . GetNumMatches ( base )
>8704	ArgumentList	base
>8705	Argument	base
>8706	Identifier	base
>8707	Callee	m_matches . GetNumMatches
>8708	MemberAccess	m_matches . GetNumMatches
>8709	Identifier	GetNumMatches
>8710	Identifier	m_matches
>8711	Identifier	num_matches
>8712	Identifier	num_matches
>8713	IdentifierDeclType	unsigned int
>8714	IdentifierDeclStatement	 
>8715	IdentifierDecl	base = GetMatchIndex ( i , j )
>8716	AssignmentExpr	base = GetMatchIndex ( i , j )
>8717	CallExpression	GetMatchIndex ( i , j )
>8718	ArgumentList	i
>8719	Argument	j
>8720	Identifier	j
>8721	Argument	i
>8722	Identifier	i
>8723	Callee	GetMatchIndex
>8724	Identifier	GetMatchIndex
>8725	Identifier	base
>8726	Identifier	base
>8727	IdentifierDeclType	MatchIndex
>8728	ExpressionStatement	 
>8729	CallExpression	SetMatchesFromTracks ( i , j )
>8730	ArgumentList	i
>8731	Argument	j
>8732	Identifier	j
>8733	Argument	i
>8734	Identifier	i
>8735	Callee	SetMatchesFromTracks
>8736	Identifier	SetMatchesFromTracks
>8737	IncDecOp	 
>8738	IncDec	++
>8739	Identifier	j
>8740	Condition	 
>8741	RelationalExpression	j < num_images
>8742	Identifier	num_images
>8743	Identifier	j
>8744	ForInit	 
>8745	IdentifierDeclStatement	int j = 0 ;
>8746	IdentifierDecl	j = 0
>8747	AssignmentExpr	j = 0
>8748	PrimaryExpression	0
>8749	Identifier	j
>8750	Identifier	j
>8751	IdentifierDeclType	int
>8752	IfStatement	if ( added )
>8753	ElseStatement	else
>8754	ContinueStatement	 
>8755	ExpressionStatement	 
>8756	AssignmentExpr	frontier [ i ] = true
>8757	Identifier	true
>8758	ArrayIndexing	frontier [ i ]
>8759	Identifier	i
>8760	Identifier	frontier
>8761	Condition	 
>8762	Identifier	added
>8763	ForStatement	for ( int j = 0 ; j < num_cameras ; j ++ )
>8764	CompoundStatement	 
>8765	IfStatement	if ( added_order [ j ] == i )
>8766	CompoundStatement	 
>8767	BreakStatement	 
>8768	ExpressionStatement	 
>8769	AssignmentExpr	added = true
>8770	Identifier	true
>8771	Identifier	added
>8772	Condition	 
>8773	EqualityExpression	added_order [ j ] == i
>8774	Identifier	i
>8775	ArrayIndexing	added_order [ j ]
>8776	Identifier	j
>8777	Identifier	added_order
>8778	IncDecOp	 
>8779	IncDec	++
>8780	Identifier	j
>8781	Condition	 
>8782	RelationalExpression	j < num_cameras
>8783	Identifier	num_cameras
>8784	Identifier	j
>8785	ForInit	 
>8786	IdentifierDeclStatement	int j = 0 ;
>8787	IdentifierDecl	j = 0
>8788	AssignmentExpr	j = 0
>8789	PrimaryExpression	0
>8790	Identifier	j
>8791	Identifier	j
>8792	IdentifierDeclType	int
>8793	IdentifierDeclStatement	 
>8794	IdentifierDecl	added = false
>8795	AssignmentExpr	added = false
>8796	Identifier	false
>8797	Identifier	false
>8798	Identifier	added
>8799	IdentifierDeclType	bool
>8800	IncDecOp	 
>8801	IncDec	++
>8802	Identifier	i
>8803	Condition	 
>8804	RelationalExpression	i < num_images
>8805	Identifier	num_images
>8806	Identifier	i
>8807	ForInit	 
>8808	IdentifierDeclStatement	int i = 0 ;
>8809	IdentifierDecl	i = 0
>8810	AssignmentExpr	i = 0
>8811	PrimaryExpression	0
>8812	Identifier	i
>8813	Identifier	i
>8814	IdentifierDeclType	int
>8815	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>8816	ExpressionStatement	 
>8817	AssignmentExpr	frontier [ i ] = false
>8818	Identifier	false
>8819	ArrayIndexing	frontier [ i ]
>8820	Identifier	i
>8821	Identifier	frontier
>8822	IncDecOp	 
>8823	IncDec	++
>8824	Identifier	i
>8825	Condition	 
>8826	RelationalExpression	i < num_images
>8827	Identifier	num_images
>8828	Identifier	i
>8829	ForInit	 
>8830	IdentifierDeclStatement	int i = 0 ;
>8831	IdentifierDecl	i = 0
>8832	AssignmentExpr	i = 0
>8833	PrimaryExpression	0
>8834	Identifier	i
>8835	Identifier	i
>8836	IdentifierDeclType	int
>8837	IdentifierDeclStatement	 
>8838	IdentifierDecl	* frontier = new bool [ num_images ]
>8839	AssignmentExpr	* frontier = new bool [ num_images ]
>8840	Identifier	num_images
>8841	Identifier	num_images
>8842	Identifier	frontier
>8843	IdentifierDeclType	bool *
>8844	IdentifierDeclStatement	 
>8845	IdentifierDecl	num_images = GetNumImages ( )
>8846	AssignmentExpr	num_images = GetNumImages ( )
>8847	CallExpression	GetNumImages ( )
>8848	ArgumentList	 
>8849	Callee	GetNumImages
>8850	Identifier	GetNumImages
>8851	Identifier	num_images
>8852	Identifier	num_images
>8853	IdentifierDeclType	int
>8914	FunctionDef	BundlerApp 
>8915	ParameterList	int num_cameras , int num_points , int * added_order , int & parent_idx , int & max_matches , const std 
>8916	Parameter	 
>8917	Identifier	pt_views
>8918	ParameterType	const std 
>8919	Parameter	 
>8920	Identifier	max_matches
>8921	ParameterType	int &
>8922	Parameter	 
>8923	Identifier	parent_idx
>8924	ParameterType	int &
>8925	Parameter	 
>8926	Identifier	added_order
>8927	ParameterType	int *
>8928	Parameter	 
>8929	Identifier	num_points
>8930	ParameterType	int
>8931	Parameter	 
>8932	Identifier	num_cameras
>8933	ParameterType	int
>8934	ReturnType	int
>8935	CompoundStatement	 
>8936	ReturnStatement	 
>8937	Identifier	i_best
>8938	IfStatement	if ( parent_idx == - 1 )
>8939	CompoundStatement	 
>8940	ExpressionStatement	 
>8941	CallExpression	printf ( \"Error
>8942	ArgumentList	\"Error
>8943	Argument	\"Error
>8944	PrimaryExpression	\"Error
>8945	Callee	printf
>8946	Identifier	printf
>8947	Condition	 
>8948	EqualityExpression	parent_idx == - 1
>8949	UnaryOp	- 1
>8950	PrimaryExpression	1
>8951	UnaryOperator	-
>8952	Identifier	parent_idx
>8953	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>8954	CompoundStatement	 
>8955	IfStatement	if ( score > top_score )
>8956	CompoundStatement	 
>8957	ExpressionStatement	 
>8958	AssignmentExpr	top_score = score
>8959	Identifier	score
>8960	Identifier	top_score
>8961	ExpressionStatement	 
>8962	AssignmentExpr	max_matches = num_existing_matches
>8963	Identifier	num_existing_matches
>8964	Identifier	max_matches
>8965	ExpressionStatement	 
>8966	AssignmentExpr	parent_idx = parent_idx_best
>8967	Identifier	parent_idx_best
>8968	Identifier	parent_idx
>8969	ExpressionStatement	 
>8970	AssignmentExpr	i_best = i
>8971	Identifier	i
>8972	Identifier	i_best
>8973	Condition	 
>8974	RelationalExpression	score > top_score
>8975	Identifier	top_score
>8976	Identifier	score
>8977	IfStatement	if ( score > 0.0 )
>8978	ExpressionStatement	 
>8979	CallExpression	printf ( \"  score[%d]   = %0.3f\n\" , i , score )
>8980	ArgumentList	\"  score[%d]   = %0.3f\n\"
>8981	Argument	score
>8982	Identifier	score
>8983	Argument	i
>8984	Identifier	i
>8985	Argument	\"  score[%d]   = %0.3f\n\"
>8986	PrimaryExpression	\"  score[%d]   = %0.3f\n\"
>8987	Callee	printf
>8988	Identifier	printf
>8989	Condition	 
>8990	RelationalExpression	score > 0.0
>8991	PrimaryExpression	0.0
>8992	Identifier	score
>8993	IdentifierDeclStatement	 
>8994	IdentifierDecl	score = num_existing_matches
>8995	AssignmentExpr	score = num_existing_matches
>8996	Identifier	num_existing_matches
>8997	Identifier	num_existing_matches
>8998	Identifier	score
>8999	IdentifierDeclType	double
>9000	IfStatement	if ( num_existing_matches > 0 )
>9001	ExpressionStatement	 
>9002	CallExpression	printf ( \"  existing_matches[%d] = %d\n\" , i , num_existing_matches )
>9003	ArgumentList	\"  existing_matches[%d] = %d\n\"
>9004	Argument	num_existing_matches
>9005	Identifier	num_existing_matches
>9006	Argument	i
>9007	Identifier	i
>9008	Argument	\"  existing_matches[%d] = %d\n\"
>9009	PrimaryExpression	\"  existing_matches[%d] = %d\n\"
>9010	Callee	printf
>9011	Identifier	printf
>9012	Condition	 
>9013	RelationalExpression	num_existing_matches > 0
>9014	PrimaryExpression	0
>9015	Identifier	num_existing_matches
>9016	ForStatement	for ( int j = 0 ; j < num_tracks ; j ++ )
>9017	CompoundStatement	 
>9018	ExpressionStatement	 
>9019	IncDecOp	num_existing_matches ++
>9020	IncDec	++
>9021	Identifier	num_existing_matches
>9022	IfStatement	if ( ( int ) pt_views [ pt ] . size ( ) == 0 )
>9023	ContinueStatement	 
>9024	Condition	 
>9025	EqualityExpression	( int ) pt_views [ pt ] . size ( ) == 0
>9026	PrimaryExpression	0
>9027	CastExpression	( int ) pt_views [ pt ] . size ( )
>9028	CallExpression	pt_views [ pt ] . size ( )
>9029	ArgumentList	 
>9030	Callee	pt_views [ pt ] . size
>9031	MemberAccess	pt_views [ pt ] . size
>9032	Identifier	size
>9033	ArrayIndexing	pt_views [ pt ]
>9034	Identifier	pt
>9035	Identifier	pt_views
>9036	CastTarget	int
>9037	IdentifierDeclStatement	 
>9038	IdentifierDecl	pt = m_track_data [ tr ] . m_extra
>9039	AssignmentExpr	pt = m_track_data [ tr ] . m_extra
>9040	MemberAccess	m_track_data [ tr ] . m_extra
>9041	Identifier	m_extra
>9042	ArrayIndexing	m_track_data [ tr ]
>9043	Identifier	tr
>9044	Identifier	m_track_data
>9045	Identifier	pt
>9046	Identifier	pt
>9047	IdentifierDeclType	int
>9048	IfStatement	if ( m_track_data [ tr ] . m_extra < 0 )
>9049	ContinueStatement	 
>9050	Condition	 
>9051	RelationalExpression	m_track_data [ tr ] . m_extra < 0
>9052	PrimaryExpression	0
>9053	MemberAccess	m_track_data [ tr ] . m_extra
>9054	Identifier	m_extra
>9055	ArrayIndexing	m_track_data [ tr ]
>9056	Identifier	tr
>9057	Identifier	m_track_data
>9058	IdentifierDeclStatement	 
>9059	IdentifierDecl	tr = tracks [ j ]
>9060	AssignmentExpr	tr = tracks [ j ]
>9061	ArrayIndexing	tracks [ j ]
>9062	Identifier	j
>9063	Identifier	tracks
>9064	Identifier	tr
>9065	Identifier	tr
>9066	IdentifierDeclType	int
>9067	IncDecOp	 
>9068	IncDec	++
>9069	Identifier	j
>9070	Condition	 
>9071	RelationalExpression	j < num_tracks
>9072	Identifier	num_tracks
>9073	Identifier	j
>9074	ForInit	 
>9075	IdentifierDeclStatement	int j = 0 ;
>9076	IdentifierDecl	j = 0
>9077	AssignmentExpr	j = 0
>9078	PrimaryExpression	0
>9079	Identifier	j
>9080	Identifier	j
>9081	IdentifierDeclType	int
>9082	IdentifierDeclStatement	 
>9083	IdentifierDecl	num_tracks = ( int ) tracks . size ( )
>9084	AssignmentExpr	num_tracks = ( int ) tracks . size ( )
>9085	CastExpression	( int ) tracks . size ( )
>9086	CallExpression	tracks . size ( )
>9087	ArgumentList	 
>9088	Callee	tracks . size
>9089	MemberAccess	tracks . size
>9090	Identifier	size
>9091	Identifier	tracks
>9092	CastTarget	int
>9093	Identifier	num_tracks
>9094	Identifier	num_tracks
>9095	IdentifierDeclType	int
>9096	IdentifierDeclStatement	 
>9097	IdentifierDecl	& tracks = m_image_data [ i ] . m_visible_points
>9098	AssignmentExpr	& tracks = m_image_data [ i ] . m_visible_points
>9099	MemberAccess	m_image_data [ i ] . m_visible_points
>9100	Identifier	m_visible_points
>9101	ArrayIndexing	m_image_data [ i ]
>9102	Identifier	i
>9103	Identifier	m_image_data
>9104	Identifier	tracks
>9105	Identifier	tracks
>9106	IdentifierDeclType	const std 
>9107	IdentifierDeclStatement	 
>9108	IdentifierDecl	parent_idx_best = - 1
>9109	AssignmentExpr	parent_idx_best = - 1
>9110	UnaryOp	- 1
>9111	PrimaryExpression	1
>9112	UnaryOperator	-
>9113	Identifier	parent_idx_best
>9114	Identifier	parent_idx_best
>9115	IdentifierDeclType	int
>9116	IdentifierDeclStatement	 
>9117	IdentifierDecl	num_existing_matches = 0
>9118	AssignmentExpr	num_existing_matches = 0
>9119	PrimaryExpression	0
>9120	Identifier	num_existing_matches
>9121	Identifier	num_existing_matches
>9122	IdentifierDeclType	int
>9123	IfStatement	if ( added )
>9124	ContinueStatement	 
>9125	Condition	 
>9126	Identifier	added
>9127	ForStatement	for ( int j = 0 ; j < num_cameras ; j ++ )
>9128	CompoundStatement	 
>9129	IfStatement	if ( added_order [ j ] == i )
>9130	CompoundStatement	 
>9131	BreakStatement	 
>9132	ExpressionStatement	 
>9133	AssignmentExpr	added = true
>9134	Identifier	true
>9135	Identifier	added
>9136	Condition	 
>9137	EqualityExpression	added_order [ j ] == i
>9138	Identifier	i
>9139	ArrayIndexing	added_order [ j ]
>9140	Identifier	j
>9141	Identifier	added_order
>9142	IncDecOp	 
>9143	IncDec	++
>9144	Identifier	j
>9145	Condition	 
>9146	RelationalExpression	j < num_cameras
>9147	Identifier	num_cameras
>9148	Identifier	j
>9149	ForInit	 
>9150	IdentifierDeclStatement	int j = 0 ;
>9151	IdentifierDecl	j = 0
>9152	AssignmentExpr	j = 0
>9153	PrimaryExpression	0
>9154	Identifier	j
>9155	Identifier	j
>9156	IdentifierDeclType	int
>9157	IdentifierDeclStatement	 
>9158	IdentifierDecl	added = false
>9159	AssignmentExpr	added = false
>9160	Identifier	false
>9161	Identifier	false
>9162	Identifier	added
>9163	IdentifierDeclType	bool
>9164	IfStatement	if ( m_only_bundle_init_focal && ! m_image_data [ i ] . m_has_init_focal )
>9165	ContinueStatement	 
>9166	Condition	 
>9167	AndExpression	m_only_bundle_init_focal && ! m_image_data [ i ] . m_has_init_focal
>9168	UnaryOp	! m_image_data [ i ] . m_has_init_focal
>9169	MemberAccess	m_image_data [ i ] . m_has_init_focal
>9170	Identifier	m_has_init_focal
>9171	ArrayIndexing	m_image_data [ i ]
>9172	Identifier	i
>9173	Identifier	m_image_data
>9174	UnaryOperator	!
>9175	Identifier	m_only_bundle_init_focal
>9176	IfStatement	if ( m_image_data [ i ] . m_ignore_in_bundle )
>9177	ContinueStatement	 
>9178	Condition	 
>9179	MemberAccess	m_image_data [ i ] . m_ignore_in_bundle
>9180	Identifier	m_ignore_in_bundle
>9181	ArrayIndexing	m_image_data [ i ]
>9182	Identifier	i
>9183	Identifier	m_image_data
>9184	IncDecOp	 
>9185	IncDec	++
>9186	Identifier	i
>9187	Condition	 
>9188	RelationalExpression	i < num_images
>9189	Identifier	num_images
>9190	Identifier	i
>9191	ForInit	 
>9192	IdentifierDeclStatement	int i = 0 ;
>9193	IdentifierDecl	i = 0
>9194	AssignmentExpr	i = 0
>9195	PrimaryExpression	0
>9196	Identifier	i
>9197	Identifier	i
>9198	IdentifierDeclType	int
>9199	IdentifierDeclStatement	 
>9200	IdentifierDecl	num_images = GetNumImages ( )
>9201	AssignmentExpr	num_images = GetNumImages ( )
>9202	CallExpression	GetNumImages ( )
>9203	ArgumentList	 
>9204	Callee	GetNumImages
>9205	Identifier	GetNumImages
>9206	Identifier	num_images
>9207	Identifier	num_images
>9208	IdentifierDeclType	int
>9209	ExpressionStatement	 
>9210	AssignmentExpr	parent_idx = - 1
>9211	UnaryOp	- 1
>9212	PrimaryExpression	1
>9213	UnaryOperator	-
>9214	Identifier	parent_idx
>9215	IdentifierDeclStatement	 
>9216	IdentifierDecl	top_score = 0.0
>9217	AssignmentExpr	top_score = 0.0
>9218	PrimaryExpression	0.0
>9219	Identifier	top_score
>9220	Identifier	top_score
>9221	IdentifierDeclType	double
>9222	IdentifierDeclStatement	 
>9223	IdentifierDecl	i_best = - 1
>9224	AssignmentExpr	i_best = - 1
>9225	UnaryOp	- 1
>9226	PrimaryExpression	1
>9227	UnaryOperator	-
>9228	Identifier	i_best
>9229	Identifier	i_best
>9230	IdentifierDeclType	int
>9231	ExpressionStatement	 
>9232	AssignmentExpr	max_matches = 0
>9233	PrimaryExpression	0
>9234	Identifier	max_matches
>9278	FunctionDef	BundlerApp 
>9279	ParameterList	int n , int num_cameras , int num_points , int * added_order , const std 
>9280	Parameter	 
>9281	Identifier	pt_views
>9282	ParameterType	const std 
>9283	Parameter	 
>9284	Identifier	added_order
>9285	ParameterType	int *
>9286	Parameter	 
>9287	Identifier	num_points
>9288	ParameterType	int
>9289	Parameter	 
>9290	Identifier	num_cameras
>9291	ParameterType	int
>9292	Parameter	 
>9293	Identifier	n
>9294	ParameterType	int
>9295	ReturnType	std 
>9296	CompoundStatement	 
>9297	ReturnStatement	 
>9298	Identifier	image_pairs
>9299	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>9300	CompoundStatement	 
>9301	IfStatement	if ( num_existing_matches >= n )
>9302	ExpressionStatement	 
>9303	CallExpression	image_pairs . push_back ( ImagePair ( i , parent_idx_best ) )
>9304	ArgumentList	ImagePair ( i , parent_idx_best )
>9305	Argument	ImagePair ( i , parent_idx_best )
>9306	CallExpression	ImagePair ( i , parent_idx_best )
>9307	ArgumentList	i
>9308	Argument	parent_idx_best
>9309	Identifier	parent_idx_best
>9310	Argument	i
>9311	Identifier	i
>9312	Callee	ImagePair
>9313	Identifier	ImagePair
>9314	Callee	image_pairs . push_back
>9315	MemberAccess	image_pairs . push_back
>9316	Identifier	push_back
>9317	Identifier	image_pairs
>9318	Condition	 
>9319	RelationalExpression	num_existing_matches >= n
>9320	Identifier	n
>9321	Identifier	num_existing_matches
>9322	ForStatement	for ( int j = 0 ; j < num_tracks ; j ++ )
>9323	CompoundStatement	 
>9324	ExpressionStatement	 
>9325	IncDecOp	num_existing_matches ++
>9326	IncDec	++
>9327	Identifier	num_existing_matches
>9328	IfStatement	if ( ( int ) pt_views [ pt ] . size ( ) == 0 )
>9329	ContinueStatement	 
>9330	Condition	 
>9331	EqualityExpression	( int ) pt_views [ pt ] . size ( ) == 0
>9332	PrimaryExpression	0
>9333	CastExpression	( int ) pt_views [ pt ] . size ( )
>9334	CallExpression	pt_views [ pt ] . size ( )
>9335	ArgumentList	 
>9336	Callee	pt_views [ pt ] . size
>9337	MemberAccess	pt_views [ pt ] . size
>9338	Identifier	size
>9339	ArrayIndexing	pt_views [ pt ]
>9340	Identifier	pt
>9341	Identifier	pt_views
>9342	CastTarget	int
>9343	IdentifierDeclStatement	 
>9344	IdentifierDecl	pt = m_track_data [ tr ] . m_extra
>9345	AssignmentExpr	pt = m_track_data [ tr ] . m_extra
>9346	MemberAccess	m_track_data [ tr ] . m_extra
>9347	Identifier	m_extra
>9348	ArrayIndexing	m_track_data [ tr ]
>9349	Identifier	tr
>9350	Identifier	m_track_data
>9351	Identifier	pt
>9352	Identifier	pt
>9353	IdentifierDeclType	int
>9354	IfStatement	if ( m_track_data [ tr ] . m_extra < 0 )
>9355	ContinueStatement	 
>9356	Condition	 
>9357	RelationalExpression	m_track_data [ tr ] . m_extra < 0
>9358	PrimaryExpression	0
>9359	MemberAccess	m_track_data [ tr ] . m_extra
>9360	Identifier	m_extra
>9361	ArrayIndexing	m_track_data [ tr ]
>9362	Identifier	tr
>9363	Identifier	m_track_data
>9364	IdentifierDeclStatement	 
>9365	IdentifierDecl	tr = tracks [ j ]
>9366	AssignmentExpr	tr = tracks [ j ]
>9367	ArrayIndexing	tracks [ j ]
>9368	Identifier	j
>9369	Identifier	tracks
>9370	Identifier	tr
>9371	Identifier	tr
>9372	IdentifierDeclType	int
>9373	IncDecOp	 
>9374	IncDec	++
>9375	Identifier	j
>9376	Condition	 
>9377	RelationalExpression	j < num_tracks
>9378	Identifier	num_tracks
>9379	Identifier	j
>9380	ForInit	 
>9381	IdentifierDeclStatement	int j = 0 ;
>9382	IdentifierDecl	j = 0
>9383	AssignmentExpr	j = 0
>9384	PrimaryExpression	0
>9385	Identifier	j
>9386	Identifier	j
>9387	IdentifierDeclType	int
>9388	IdentifierDeclStatement	 
>9389	IdentifierDecl	num_tracks = ( int ) tracks . size ( )
>9390	AssignmentExpr	num_tracks = ( int ) tracks . size ( )
>9391	CastExpression	( int ) tracks . size ( )
>9392	CallExpression	tracks . size ( )
>9393	ArgumentList	 
>9394	Callee	tracks . size
>9395	MemberAccess	tracks . size
>9396	Identifier	size
>9397	Identifier	tracks
>9398	CastTarget	int
>9399	Identifier	num_tracks
>9400	Identifier	num_tracks
>9401	IdentifierDeclType	int
>9402	IdentifierDeclStatement	 
>9403	IdentifierDecl	& tracks = m_image_data [ i ] . m_visible_points
>9404	AssignmentExpr	& tracks = m_image_data [ i ] . m_visible_points
>9405	MemberAccess	m_image_data [ i ] . m_visible_points
>9406	Identifier	m_visible_points
>9407	ArrayIndexing	m_image_data [ i ]
>9408	Identifier	i
>9409	Identifier	m_image_data
>9410	Identifier	tracks
>9411	Identifier	tracks
>9412	IdentifierDeclType	const std 
>9413	IdentifierDeclStatement	 
>9414	IdentifierDecl	parent_idx_best = - 1
>9415	AssignmentExpr	parent_idx_best = - 1
>9416	UnaryOp	- 1
>9417	PrimaryExpression	1
>9418	UnaryOperator	-
>9419	Identifier	parent_idx_best
>9420	Identifier	parent_idx_best
>9421	IdentifierDeclType	int
>9422	IdentifierDeclStatement	 
>9423	IdentifierDecl	num_existing_matches = 0
>9424	AssignmentExpr	num_existing_matches = 0
>9425	PrimaryExpression	0
>9426	Identifier	num_existing_matches
>9427	Identifier	num_existing_matches
>9428	IdentifierDeclType	int
>9429	IfStatement	if ( added )
>9430	ContinueStatement	 
>9431	Condition	 
>9432	Identifier	added
>9433	ForStatement	for ( int j = 0 ; j < num_cameras ; j ++ )
>9434	CompoundStatement	 
>9435	IfStatement	if ( added_order [ j ] == i )
>9436	CompoundStatement	 
>9437	BreakStatement	 
>9438	ExpressionStatement	 
>9439	AssignmentExpr	added = true
>9440	Identifier	true
>9441	Identifier	added
>9442	Condition	 
>9443	EqualityExpression	added_order [ j ] == i
>9444	Identifier	i
>9445	ArrayIndexing	added_order [ j ]
>9446	Identifier	j
>9447	Identifier	added_order
>9448	IncDecOp	 
>9449	IncDec	++
>9450	Identifier	j
>9451	Condition	 
>9452	RelationalExpression	j < num_cameras
>9453	Identifier	num_cameras
>9454	Identifier	j
>9455	ForInit	 
>9456	IdentifierDeclStatement	int j = 0 ;
>9457	IdentifierDecl	j = 0
>9458	AssignmentExpr	j = 0
>9459	PrimaryExpression	0
>9460	Identifier	j
>9461	Identifier	j
>9462	IdentifierDeclType	int
>9463	IdentifierDeclStatement	 
>9464	IdentifierDecl	added = false
>9465	AssignmentExpr	added = false
>9466	Identifier	false
>9467	Identifier	false
>9468	Identifier	added
>9469	IdentifierDeclType	bool
>9470	IfStatement	if ( m_only_bundle_init_focal && ! m_image_data [ i ] . m_has_init_focal )
>9471	ContinueStatement	 
>9472	Condition	 
>9473	AndExpression	m_only_bundle_init_focal && ! m_image_data [ i ] . m_has_init_focal
>9474	UnaryOp	! m_image_data [ i ] . m_has_init_focal
>9475	MemberAccess	m_image_data [ i ] . m_has_init_focal
>9476	Identifier	m_has_init_focal
>9477	ArrayIndexing	m_image_data [ i ]
>9478	Identifier	i
>9479	Identifier	m_image_data
>9480	UnaryOperator	!
>9481	Identifier	m_only_bundle_init_focal
>9482	IfStatement	if ( m_image_data [ i ] . m_ignore_in_bundle )
>9483	ContinueStatement	 
>9484	Condition	 
>9485	MemberAccess	m_image_data [ i ] . m_ignore_in_bundle
>9486	Identifier	m_ignore_in_bundle
>9487	ArrayIndexing	m_image_data [ i ]
>9488	Identifier	i
>9489	Identifier	m_image_data
>9490	IncDecOp	 
>9491	IncDec	++
>9492	Identifier	i
>9493	Condition	 
>9494	RelationalExpression	i < num_images
>9495	Identifier	num_images
>9496	Identifier	i
>9497	ForInit	 
>9498	IdentifierDeclStatement	int i = 0 ;
>9499	IdentifierDecl	i = 0
>9500	AssignmentExpr	i = 0
>9501	PrimaryExpression	0
>9502	Identifier	i
>9503	Identifier	i
>9504	IdentifierDeclType	int
>9505	IdentifierDeclStatement	 
>9506	IdentifierDecl	num_images = GetNumImages ( )
>9507	AssignmentExpr	num_images = GetNumImages ( )
>9508	CallExpression	GetNumImages ( )
>9509	ArgumentList	 
>9510	Callee	GetNumImages
>9511	Identifier	GetNumImages
>9512	Identifier	num_images
>9513	Identifier	num_images
>9514	IdentifierDeclType	int
>9515	IdentifierDeclStatement	 
>9516	IdentifierDecl	image_pairs
>9517	Identifier	image_pairs
>9518	IdentifierDeclType	std 
>9560	FunctionDef	BundlerApp 
>9561	ParameterList	int & i_best , int & j_best , bool use_init_focal_only
>9562	Parameter	 
>9563	Identifier	use_init_focal_only
>9564	ParameterType	bool
>9565	Parameter	 
>9566	Identifier	j_best
>9567	ParameterType	int &
>9568	Parameter	 
>9569	Identifier	i_best
>9570	ParameterType	int &
>9571	ReturnType	void
>9572	CompoundStatement	 
>9573	IfStatement	if ( i_best == - 1 && j_best == - 1 )
>9574	CompoundStatement	 
>9575	IfStatement	if ( i_best_2 == - 1 && j_best_2 == - 1 )
>9576	ElseStatement	else
>9577	CompoundStatement	 
>9578	ExpressionStatement	 
>9579	AssignmentExpr	j_best = j_best_2
>9580	Identifier	j_best_2
>9581	Identifier	j_best
>9582	ExpressionStatement	 
>9583	AssignmentExpr	i_best = i_best_2
>9584	Identifier	i_best_2
>9585	Identifier	i_best
>9586	CompoundStatement	 
>9587	IfStatement	if ( use_init_focal_only )
>9588	ElseStatement	else
>9589	CompoundStatement	 
>9590	ExpressionStatement	 
>9591	AssignmentExpr	j_best = 1
>9592	PrimaryExpression	1
>9593	Identifier	j_best
>9594	ExpressionStatement	 
>9595	AssignmentExpr	i_best = 0
>9596	PrimaryExpression	0
>9597	Identifier	i_best
>9598	ExpressionStatement	 
>9599	CallExpression	printf ( \"[BundleAdjust] Picking first two cameras...\n\" )
>9600	ArgumentList	\"[BundleAdjust] Picking first two cameras...\n\"
>9601	Argument	\"[BundleAdjust] Picking first two cameras...\n\"
>9602	PrimaryExpression	\"[BundleAdjust] Picking first two cameras...\n\"
>9603	Callee	printf
>9604	Identifier	printf
>9605	CompoundStatement	 
>9606	ExpressionStatement	 
>9607	CallExpression	BundlePickInitialPair ( i_best , j_best , false )
>9608	ArgumentList	i_best
>9609	Argument	false
>9610	Identifier	false
>9611	Argument	j_best
>9612	Identifier	j_best
>9613	Argument	i_best
>9614	Identifier	i_best
>9615	Callee	BundlePickInitialPair
>9616	Identifier	BundlePickInitialPair
>9617	ExpressionStatement	 
>9618	CallExpression	printf ( \"[BundleAdjust] Trying a backup approach...\n\" )
>9619	ArgumentList	\"[BundleAdjust] Trying a backup approach...\n\"
>9620	Argument	\"[BundleAdjust] Trying a backup approach...\n\"
>9621	PrimaryExpression	\"[BundleAdjust] Trying a backup approach...\n\"
>9622	Callee	printf
>9623	Identifier	printf
>9624	Condition	 
>9625	Identifier	use_init_focal_only
>9626	ExpressionStatement	 
>9627	CallExpression	printf ( \"[BundleAdjust] Error
>9628	ArgumentList	\"[BundleAdjust] Error
>9629	Argument	\"[BundleAdjust] Error
>9630	PrimaryExpression	\"[BundleAdjust] Error
>9631	Callee	printf
>9632	Identifier	printf
>9633	Condition	 
>9634	AndExpression	i_best_2 == - 1 && j_best_2 == - 1
>9635	EqualityExpression	j_best_2 == - 1
>9636	UnaryOp	- 1
>9637	PrimaryExpression	1
>9638	UnaryOperator	-
>9639	Identifier	j_best_2
>9640	EqualityExpression	i_best_2 == - 1
>9641	UnaryOp	- 1
>9642	PrimaryExpression	1
>9643	UnaryOperator	-
>9644	Identifier	i_best_2
>9645	Condition	 
>9646	AndExpression	i_best == - 1 && j_best == - 1
>9647	EqualityExpression	j_best == - 1
>9648	UnaryOp	- 1
>9649	PrimaryExpression	1
>9650	UnaryOperator	-
>9651	Identifier	j_best
>9652	EqualityExpression	i_best == - 1
>9653	UnaryOp	- 1
>9654	PrimaryExpression	1
>9655	UnaryOperator	-
>9656	Identifier	i_best
>9657	ForStatement	for ( int i = 0 ; i < ( int ) m_track_data . size ( ) ; i ++ )
>9658	CompoundStatement	 
>9659	ExpressionStatement	 
>9660	AssignmentExpr	m_track_data [ i ] . m_extra = - 1
>9661	UnaryOp	- 1
>9662	PrimaryExpression	1
>9663	UnaryOperator	-
>9664	MemberAccess	m_track_data [ i ] . m_extra
>9665	Identifier	m_extra
>9666	ArrayIndexing	m_track_data [ i ]
>9667	Identifier	i
>9668	Identifier	m_track_data
>9669	IncDecOp	 
>9670	IncDec	++
>9671	Identifier	i
>9672	Condition	 
>9673	RelationalExpression	i < ( int ) m_track_data . size ( )
>9674	CastExpression	( int ) m_track_data . size ( )
>9675	CallExpression	m_track_data . size ( )
>9676	ArgumentList	 
>9677	Callee	m_track_data . size
>9678	MemberAccess	m_track_data . size
>9679	Identifier	size
>9680	Identifier	m_track_data
>9681	CastTarget	int
>9682	Identifier	i
>9683	ForInit	 
>9684	IdentifierDeclStatement	int i = 0 ;
>9685	IdentifierDecl	i = 0
>9686	AssignmentExpr	i = 0
>9687	PrimaryExpression	0
>9688	Identifier	i
>9689	Identifier	i
>9690	IdentifierDeclType	int
>9691	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>9692	CompoundStatement	 
>9693	ForStatement	for ( int j = i + 1 ; j < num_images ; j ++ )
>9694	CompoundStatement	 
>9695	IfStatement	if ( num_matches > MIN_MATCHES && score > max_score_2 )
>9696	CompoundStatement	 
>9697	ExpressionStatement	 
>9698	AssignmentExpr	j_best_2 = j
>9699	Identifier	j
>9700	Identifier	j_best_2
>9701	ExpressionStatement	 
>9702	AssignmentExpr	i_best_2 = i
>9703	Identifier	i
>9704	Identifier	i_best_2
>9705	ExpressionStatement	 
>9706	AssignmentExpr	max_score_2 = score
>9707	Identifier	score
>9708	Identifier	max_score_2
>9709	ExpressionStatement	 
>9710	AssignmentExpr	max_matches_2 = num_matches
>9711	Identifier	num_matches
>9712	Identifier	max_matches_2
>9713	Condition	 
>9714	AndExpression	num_matches > MIN_MATCHES && score > max_score_2
>9715	RelationalExpression	score > max_score_2
>9716	Identifier	max_score_2
>9717	Identifier	score
>9718	RelationalExpression	num_matches > MIN_MATCHES
>9719	Identifier	MIN_MATCHES
>9720	Identifier	num_matches
>9721	IfStatement	if ( num_matches > max_matches && score > SCORE_THRESHOLD )
>9722	CompoundStatement	 
>9723	ExpressionStatement	 
>9724	AssignmentExpr	j_best = j
>9725	Identifier	j
>9726	Identifier	j_best
>9727	ExpressionStatement	 
>9728	AssignmentExpr	i_best = i
>9729	Identifier	i
>9730	Identifier	i_best
>9731	ExpressionStatement	 
>9732	AssignmentExpr	max_score = score
>9733	Identifier	score
>9734	Identifier	max_score
>9735	ExpressionStatement	 
>9736	AssignmentExpr	max_matches = num_matches
>9737	Identifier	num_matches
>9738	Identifier	max_matches
>9739	Condition	 
>9740	AndExpression	num_matches > max_matches && score > SCORE_THRESHOLD
>9741	RelationalExpression	score > SCORE_THRESHOLD
>9742	Identifier	SCORE_THRESHOLD
>9743	Identifier	score
>9744	RelationalExpression	num_matches > max_matches
>9745	Identifier	max_matches
>9746	Identifier	num_matches
>9747	IfStatement	if ( m_use_angular_score )
>9748	ElseStatement	else
>9749	CompoundStatement	 
>9750	IfStatement	if ( ratio == 0.0 )
>9751	ElseStatement	else
>9752	CompoundStatement	 
>9753	ExpressionStatement	 
>9754	AssignmentExpr	score = 1.0 / m_transforms [ idx ] . m_inlier_ratio
>9755	MultiplicativeExpression	1.0 / m_transforms [ idx ] . m_inlier_ratio
>9756	MemberAccess	m_transforms [ idx ] . m_inlier_ratio
>9757	Identifier	m_inlier_ratio
>9758	ArrayIndexing	m_transforms [ idx ]
>9759	Identifier	idx
>9760	Identifier	m_transforms
>9761	PrimaryExpression	1.0
>9762	Identifier	score
>9763	CompoundStatement	 
>9764	ExpressionStatement	 
>9765	AssignmentExpr	score = MIN_SCORE
>9766	Identifier	MIN_SCORE
>9767	Identifier	score
>9768	Condition	 
>9769	EqualityExpression	ratio == 0.0
>9770	PrimaryExpression	0.0
>9771	Identifier	ratio
>9772	IdentifierDeclStatement	 
>9773	IdentifierDecl	ratio = m_transforms [ idx ] . m_inlier_ratio
>9774	AssignmentExpr	ratio = m_transforms [ idx ] . m_inlier_ratio
>9775	MemberAccess	m_transforms [ idx ] . m_inlier_ratio
>9776	Identifier	m_inlier_ratio
>9777	ArrayIndexing	m_transforms [ idx ]
>9778	Identifier	idx
>9779	Identifier	m_transforms
>9780	Identifier	ratio
>9781	Identifier	ratio
>9782	IdentifierDeclType	double
>9783	CompoundStatement	 
>9784	Condition	 
>9785	Identifier	m_use_angular_score
>9786	IdentifierDeclStatement	 
>9787	IdentifierDecl	score = 0.0
>9788	AssignmentExpr	score = 0.0
>9789	PrimaryExpression	0.0
>9790	Identifier	score
>9791	Identifier	score
>9792	IdentifierDeclType	double
>9793	IfStatement	if ( num_matches <= MATCH_THRESHOLD )
>9794	CompoundStatement	 
>9795	ContinueStatement	 
>9796	Condition	 
>9797	RelationalExpression	num_matches <= MATCH_THRESHOLD
>9798	Identifier	MATCH_THRESHOLD
>9799	Identifier	num_matches
>9800	Statement	 
>9801	Statement	 
>9802	Statement	 
>9803	Statement	 
>9804	Statement	 
>9805	Statement	 
>9806	Statement	 
>9807	Statement	 
>9808	Statement	 
>9809	ExpressionStatement	 
>9810	AssignmentExpr	max_pts += num_matches
>9811	Identifier	num_matches
>9812	Identifier	max_pts
>9813	IdentifierDeclStatement	 
>9814	IdentifierDecl	num_matches = GetNumTrackMatches ( i , j )
>9815	AssignmentExpr	num_matches = GetNumTrackMatches ( i , j )
>9816	CallExpression	GetNumTrackMatches ( i , j )
>9817	ArgumentList	i
>9818	Argument	j
>9819	Identifier	j
>9820	Argument	i
>9821	Identifier	i
>9822	Callee	GetNumTrackMatches
>9823	Identifier	GetNumTrackMatches
>9824	Identifier	num_matches
>9825	Identifier	num_matches
>9826	IdentifierDeclType	int
>9827	IdentifierDeclStatement	 
>9828	IdentifierDecl	idx = GetMatchIndex ( i , j )
>9829	AssignmentExpr	idx = GetMatchIndex ( i , j )
>9830	CallExpression	GetMatchIndex ( i , j )
>9831	ArgumentList	i
>9832	Argument	j
>9833	Identifier	j
>9834	Argument	i
>9835	Identifier	i
>9836	Callee	GetMatchIndex
>9837	Identifier	GetMatchIndex
>9838	Identifier	idx
>9839	Identifier	idx
>9840	IdentifierDeclType	MatchIndex
>9841	IfStatement	if ( use_init_focal_only && m_use_focal_estimate && ! m_image_data [ j ] . m_has_init_focal )
>9842	ContinueStatement	 
>9843	Condition	 
>9844	AndExpression	use_init_focal_only && m_use_focal_estimate && ! m_image_data [ j ] . m_has_init_focal
>9845	AndExpression	m_use_focal_estimate && ! m_image_data [ j ] . m_has_init_focal
>9846	UnaryOp	! m_image_data [ j ] . m_has_init_focal
>9847	MemberAccess	m_image_data [ j ] . m_has_init_focal
>9848	Identifier	m_has_init_focal
>9849	ArrayIndexing	m_image_data [ j ]
>9850	Identifier	j
>9851	Identifier	m_image_data
>9852	UnaryOperator	!
>9853	Identifier	m_use_focal_estimate
>9854	Identifier	use_init_focal_only
>9855	IfStatement	if ( m_image_data [ j ] . m_ignore_in_bundle )
>9856	ContinueStatement	 
>9857	Condition	 
>9858	MemberAccess	m_image_data [ j ] . m_ignore_in_bundle
>9859	Identifier	m_ignore_in_bundle
>9860	ArrayIndexing	m_image_data [ j ]
>9861	Identifier	j
>9862	Identifier	m_image_data
>9863	IncDecOp	 
>9864	IncDec	++
>9865	Identifier	j
>9866	Condition	 
>9867	RelationalExpression	j < num_images
>9868	Identifier	num_images
>9869	Identifier	j
>9870	ForInit	 
>9871	IdentifierDeclStatement	int j = i + 1 ;
>9872	IdentifierDecl	j = i + 1
>9873	AssignmentExpr	j = i + 1
>9874	AdditiveExpression	i + 1
>9875	PrimaryExpression	1
>9876	Identifier	i
>9877	Identifier	j
>9878	Identifier	j
>9879	IdentifierDeclType	int
>9880	IfStatement	if ( use_init_focal_only && m_use_focal_estimate && ! m_image_data [ i ] . m_has_init_focal )
>9881	ContinueStatement	 
>9882	Condition	 
>9883	AndExpression	use_init_focal_only && m_use_focal_estimate && ! m_image_data [ i ] . m_has_init_focal
>9884	AndExpression	m_use_focal_estimate && ! m_image_data [ i ] . m_has_init_focal
>9885	UnaryOp	! m_image_data [ i ] . m_has_init_focal
>9886	MemberAccess	m_image_data [ i ] . m_has_init_focal
>9887	Identifier	m_has_init_focal
>9888	ArrayIndexing	m_image_data [ i ]
>9889	Identifier	i
>9890	Identifier	m_image_data
>9891	UnaryOperator	!
>9892	Identifier	m_use_focal_estimate
>9893	Identifier	use_init_focal_only
>9894	IfStatement	if ( m_image_data [ i ] . m_ignore_in_bundle )
>9895	ContinueStatement	 
>9896	Condition	 
>9897	MemberAccess	m_image_data [ i ] . m_ignore_in_bundle
>9898	Identifier	m_ignore_in_bundle
>9899	ArrayIndexing	m_image_data [ i ]
>9900	Identifier	i
>9901	Identifier	m_image_data
>9902	IncDecOp	 
>9903	IncDec	++
>9904	Identifier	i
>9905	Condition	 
>9906	RelationalExpression	i < num_images
>9907	Identifier	num_images
>9908	Identifier	i
>9909	ForInit	 
>9910	IdentifierDeclStatement	int i = 0 ;
>9911	IdentifierDecl	i = 0
>9912	AssignmentExpr	i = 0
>9913	PrimaryExpression	0
>9914	Identifier	i
>9915	Identifier	i
>9916	IdentifierDeclType	int
>9917	IdentifierDeclStatement	 
>9918	IdentifierDecl	max_pts = 0
>9919	AssignmentExpr	max_pts = 0
>9920	PrimaryExpression	0
>9921	Identifier	max_pts
>9922	Identifier	max_pts
>9923	IdentifierDeclType	int
>9924	IfStatement	if ( m_use_angular_score )
>9925	ElseStatement	else
>9926	CompoundStatement	 
>9927	ExpressionStatement	 
>9928	AssignmentExpr	SCORE_THRESHOLD = 2.0
>9929	PrimaryExpression	2.0
>9930	Identifier	SCORE_THRESHOLD
>9931	CompoundStatement	 
>9932	ExpressionStatement	 
>9933	AssignmentExpr	SCORE_THRESHOLD = 0.2
>9934	PrimaryExpression	0.2
>9935	Identifier	SCORE_THRESHOLD
>9936	Condition	 
>9937	Identifier	m_use_angular_score
>9938	IdentifierDeclStatement	 
>9939	IdentifierDecl	SCORE_THRESHOLD
>9940	Identifier	SCORE_THRESHOLD
>9941	IdentifierDeclType	double
>9942	IfStatement	if ( m_initial_pair [ 0 ] != - 1 && m_initial_pair [ 1 ] != - 1 )
>9943	CompoundStatement	 
>9944	ReturnStatement	 
>9945	ExpressionStatement	 
>9946	Statement	 
>9947	Statement	 
>9948	Statement	 
>9949	Statement	 
>9950	Statement	 
>9951	Statement	 
>9952	Statement	 
>9953	Statement	 
>9954	Statement	 
>9955	ExpressionStatement	 
>9956	AssignmentExpr	j_best = m_initial_pair [ 1 ]
>9957	ArrayIndexing	m_initial_pair [ 1 ]
>9958	PrimaryExpression	1
>9959	Identifier	m_initial_pair
>9960	Identifier	j_best
>9961	ExpressionStatement	 
>9962	AssignmentExpr	i_best = m_initial_pair [ 0 ]
>9963	ArrayIndexing	m_initial_pair [ 0 ]
>9964	PrimaryExpression	0
>9965	Identifier	m_initial_pair
>9966	Identifier	i_best
>9967	Condition	 
>9968	AndExpression	m_initial_pair [ 0 ] != - 1 && m_initial_pair [ 1 ] != - 1
>9969	EqualityExpression	m_initial_pair [ 1 ] != - 1
>9970	UnaryOp	- 1
>9971	PrimaryExpression	1
>9972	UnaryOperator	-
>9973	ArrayIndexing	m_initial_pair [ 1 ]
>9974	PrimaryExpression	1
>9975	Identifier	m_initial_pair
>9976	EqualityExpression	m_initial_pair [ 0 ] != - 1
>9977	UnaryOp	- 1
>9978	PrimaryExpression	1
>9979	UnaryOperator	-
>9980	ArrayIndexing	m_initial_pair [ 0 ]
>9981	PrimaryExpression	0
>9982	Identifier	m_initial_pair
>9983	IdentifierDeclStatement	 
>9984	IdentifierDecl	j_best_3 = - 1
>9985	AssignmentExpr	j_best_3 = - 1
>9986	UnaryOp	- 1
>9987	PrimaryExpression	1
>9988	UnaryOperator	-
>9989	Identifier	j_best_3
>9990	Identifier	j_best_3
>9991	IdentifierDeclType	int
>9992	IdentifierDeclStatement	 
>9993	IdentifierDecl	i_best_3 = - 1
>9994	AssignmentExpr	i_best_3 = - 1
>9995	UnaryOp	- 1
>9996	PrimaryExpression	1
>9997	UnaryOperator	-
>9998	Identifier	i_best_3
>9999	Identifier	i_best_3
>10000	IdentifierDeclType	int
>10001	IdentifierDeclStatement	 
>10002	IdentifierDecl	j_best_2 = - 1
>10003	AssignmentExpr	j_best_2 = - 1
>10004	UnaryOp	- 1
>10005	PrimaryExpression	1
>10006	UnaryOperator	-
>10007	Identifier	j_best_2
>10008	Identifier	j_best_2
>10009	IdentifierDeclType	int
>10010	IdentifierDeclStatement	 
>10011	IdentifierDecl	i_best_2 = - 1
>10012	AssignmentExpr	i_best_2 = - 1
>10013	UnaryOp	- 1
>10014	PrimaryExpression	1
>10015	UnaryOperator	-
>10016	Identifier	i_best_2
>10017	Identifier	i_best_2
>10018	IdentifierDeclType	int
>10019	ExpressionStatement	 
>10020	AssignmentExpr	i_best = j_best = - 1
>10021	AssignmentExpr	j_best = - 1
>10022	UnaryOp	- 1
>10023	PrimaryExpression	1
>10024	UnaryOperator	-
>10025	Identifier	j_best
>10026	Identifier	i_best
>10027	IdentifierDeclStatement	 
>10028	IdentifierDecl	max_score_2 = 0.0
>10029	AssignmentExpr	max_score_2 = 0.0
>10030	PrimaryExpression	0.0
>10031	Identifier	max_score_2
>10032	Identifier	max_score_2
>10033	IdentifierDeclType	double
>10034	IdentifierDeclStatement	 
>10035	IdentifierDecl	max_matches_2 = 0
>10036	AssignmentExpr	max_matches_2 = 0
>10037	PrimaryExpression	0
>10038	Identifier	max_matches_2
>10039	Identifier	max_matches_2
>10040	IdentifierDeclType	int
>10041	IdentifierDeclStatement	 
>10042	IdentifierDecl	max_score = 0.0
>10043	AssignmentExpr	max_score = 0.0
>10044	PrimaryExpression	0.0
>10045	Identifier	max_score
>10046	Identifier	max_score
>10047	IdentifierDeclType	double
>10048	IdentifierDeclStatement	 
>10049	IdentifierDecl	max_matches = 0
>10050	AssignmentExpr	max_matches = 0
>10051	PrimaryExpression	0
>10052	Identifier	max_matches
>10053	Identifier	max_matches
>10054	IdentifierDeclType	int
>10055	IdentifierDeclStatement	 
>10056	IdentifierDecl	num_images = GetNumImages ( )
>10057	AssignmentExpr	num_images = GetNumImages ( )
>10058	CallExpression	GetNumImages ( )
>10059	ArgumentList	 
>10060	Callee	GetNumImages
>10061	Identifier	GetNumImages
>10062	Identifier	num_images
>10063	Identifier	num_images
>10064	IdentifierDeclType	int
>10115	FunctionDef	BundlerApp 
>10116	ParameterList	int i_best , int j_best , double & init_focal_length_0 , double & init_focal_length_1 , camera_params_t * cameras , \
>10117	Parameter	 
>10118	Identifier	pt_views
>10119	ParameterType	std 
>10120	Parameter	 
>10121	Identifier	colors
>10122	ParameterType	v3_t *
>10123	Parameter	 
>10124	Identifier	points
>10125	ParameterType	v3_t *
>10126	Parameter	 
>10127	Identifier	cameras
>10128	ParameterType	camera_params_t *
>10129	Parameter	 
>10130	Identifier	init_focal_length_1
>10131	ParameterType	double &
>10132	Parameter	 
>10133	Identifier	init_focal_length_0
>10134	ParameterType	double &
>10135	Parameter	 
>10136	Identifier	j_best
>10137	ParameterType	int
>10138	Parameter	 
>10139	Identifier	i_best
>10140	ParameterType	int
>10141	ReturnType	int
>10142	CompoundStatement	 
>10143	ReturnStatement	 
>10144	Identifier	pt_count
>10145	ExpressionStatement	 
>10146	CallExpression	m_matches . ClearMatch ( list_idx )
>10147	ArgumentList	list_idx
>10148	Argument	list_idx
>10149	Identifier	list_idx
>10150	Callee	m_matches . ClearMatch
>10151	MemberAccess	m_matches . ClearMatch
>10152	Identifier	ClearMatch
>10153	Identifier	m_matches
>10154	ForStatement	for ( unsigned int i = 0 ; i < num_matches ; i ++ )
>10155	CompoundStatement	 
>10156	ExpressionStatement	 
>10157	IncDecOp	pt_count ++
>10158	IncDec	++
>10159	Identifier	pt_count
>10160	ExpressionStatement	 
>10161	CallExpression	pt_views . push_back ( views )
>10162	ArgumentList	views
>10163	Argument	views
>10164	Identifier	views
>10165	Callee	pt_views . push_back
>10166	MemberAccess	pt_views . push_back
>10167	Identifier	push_back
>10168	Identifier	pt_views
>10169	ExpressionStatement	 
>10170	CallExpression	views . push_back ( ImageKey ( 1 , key_idx2 ) )
>10171	ArgumentList	ImageKey ( 1 , key_idx2 )
>10172	Argument	ImageKey ( 1 , key_idx2 )
>10173	CallExpression	ImageKey ( 1 , key_idx2 )
>10174	ArgumentList	1
>10175	Argument	key_idx2
>10176	Identifier	key_idx2
>10177	Argument	1
>10178	PrimaryExpression	1
>10179	Callee	ImageKey
>10180	Identifier	ImageKey
>10181	Callee	views . push_back
>10182	MemberAccess	views . push_back
>10183	Identifier	push_back
>10184	Identifier	views
>10185	ExpressionStatement	 
>10186	CallExpression	views . push_back ( ImageKey ( 0 , key_idx1 ) )
>10187	ArgumentList	ImageKey ( 0 , key_idx1 )
>10188	Argument	ImageKey ( 0 , key_idx1 )
>10189	CallExpression	ImageKey ( 0 , key_idx1 )
>10190	ArgumentList	0
>10191	Argument	key_idx1
>10192	Identifier	key_idx1
>10193	Argument	0
>10194	PrimaryExpression	0
>10195	Callee	ImageKey
>10196	Identifier	ImageKey
>10197	Callee	views . push_back
>10198	MemberAccess	views . push_back
>10199	Identifier	push_back
>10200	Identifier	views
>10201	IdentifierDeclStatement	 
>10202	IdentifierDecl	views
>10203	Identifier	views
>10204	IdentifierDeclType	ImageKeyVector
>10205	ExpressionStatement	 
>10206	AssignmentExpr	m_track_data [ track_idx ] . m_extra = pt_count
>10207	Identifier	pt_count
>10208	MemberAccess	m_track_data [ track_idx ] . m_extra
>10209	Identifier	m_extra
>10210	ArrayIndexing	m_track_data [ track_idx ]
>10211	Identifier	track_idx
>10212	Identifier	m_track_data
>10213	IdentifierDeclStatement	 
>10214	IdentifierDecl	track_idx = GetKey ( i_best , key_idx1 ) . m_track
>10215	AssignmentExpr	track_idx = GetKey ( i_best , key_idx1 ) . m_track
>10216	MemberAccess	GetKey ( i_best , key_idx1 ) . m_track
>10217	Identifier	m_track
>10218	CallExpression	GetKey ( i_best , key_idx1 )
>10219	ArgumentList	i_best
>10220	Argument	key_idx1
>10221	Identifier	key_idx1
>10222	Argument	i_best
>10223	Identifier	i_best
>10224	Callee	GetKey
>10225	Identifier	GetKey
>10226	Identifier	track_idx
>10227	Identifier	track_idx
>10228	IdentifierDeclType	int
>10229	ExpressionStatement	 
>10230	AssignmentExpr	GetKey ( j_best , key_idx2 ) . m_extra = pt_count
>10231	Identifier	pt_count
>10232	MemberAccess	GetKey ( j_best , key_idx2 ) . m_extra
>10233	Identifier	m_extra
>10234	CallExpression	GetKey ( j_best , key_idx2 )
>10235	ArgumentList	j_best
>10236	Argument	key_idx2
>10237	Identifier	key_idx2
>10238	Argument	j_best
>10239	Identifier	j_best
>10240	Callee	GetKey
>10241	Identifier	GetKey
>10242	ExpressionStatement	 
>10243	AssignmentExpr	GetKey ( i_best , key_idx1 ) . m_extra = pt_count
>10244	Identifier	pt_count
>10245	MemberAccess	GetKey ( i_best , key_idx1 ) . m_extra
>10246	Identifier	m_extra
>10247	CallExpression	GetKey ( i_best , key_idx1 )
>10248	ArgumentList	i_best
>10249	Argument	key_idx1
>10250	Identifier	key_idx1
>10251	Argument	i_best
>10252	Identifier	i_best
>10253	Callee	GetKey
>10254	Identifier	GetKey
>10255	ExpressionStatement	 
>10256	AssignmentExpr	colors [ pt_count ] = v3_new ( ( double ) r , ( double ) g , ( double ) b )
>10257	CallExpression	v3_new ( ( double ) r , ( double ) g , ( double ) b )
>10258	ArgumentList	( double ) r
>10259	Argument	( double ) b
>10260	CastExpression	( double ) b
>10261	Identifier	b
>10262	CastTarget	double
>10263	Argument	( double ) g
>10264	CastExpression	( double ) g
>10265	Identifier	g
>10266	CastTarget	double
>10267	Argument	( double ) r
>10268	CastExpression	( double ) r
>10269	Identifier	r
>10270	CastTarget	double
>10271	Callee	v3_new
>10272	Identifier	v3_new
>10273	ArrayIndexing	colors [ pt_count ]
>10274	Identifier	pt_count
>10275	Identifier	colors
>10276	IdentifierDeclStatement	 
>10277	IdentifierDecl	b = GetKey ( i_best , key_idx1 ) . m_b
>10278	AssignmentExpr	b = GetKey ( i_best , key_idx1 ) . m_b
>10279	MemberAccess	GetKey ( i_best , key_idx1 ) . m_b
>10280	Identifier	m_b
>10281	CallExpression	GetKey ( i_best , key_idx1 )
>10282	ArgumentList	i_best
>10283	Argument	key_idx1
>10284	Identifier	key_idx1
>10285	Argument	i_best
>10286	Identifier	i_best
>10287	Callee	GetKey
>10288	Identifier	GetKey
>10289	Identifier	b
>10290	Identifier	b
>10291	IdentifierDeclType	unsigned char
>10292	IdentifierDeclStatement	 
>10293	IdentifierDecl	g = GetKey ( i_best , key_idx1 ) . m_g
>10294	AssignmentExpr	g = GetKey ( i_best , key_idx1 ) . m_g
>10295	MemberAccess	GetKey ( i_best , key_idx1 ) . m_g
>10296	Identifier	m_g
>10297	CallExpression	GetKey ( i_best , key_idx1 )
>10298	ArgumentList	i_best
>10299	Argument	key_idx1
>10300	Identifier	key_idx1
>10301	Argument	i_best
>10302	Identifier	i_best
>10303	Callee	GetKey
>10304	Identifier	GetKey
>10305	Identifier	g
>10306	Identifier	g
>10307	IdentifierDeclType	unsigned char
>10308	IdentifierDeclStatement	 
>10309	IdentifierDecl	r = GetKey ( i_best , key_idx1 ) . m_r
>10310	AssignmentExpr	r = GetKey ( i_best , key_idx1 ) . m_r
>10311	MemberAccess	GetKey ( i_best , key_idx1 ) . m_r
>10312	Identifier	m_r
>10313	CallExpression	GetKey ( i_best , key_idx1 )
>10314	ArgumentList	i_best
>10315	Argument	key_idx1
>10316	Identifier	key_idx1
>10317	Argument	i_best
>10318	Identifier	i_best
>10319	Callee	GetKey
>10320	Identifier	GetKey
>10321	Identifier	r
>10322	Identifier	r
>10323	IdentifierDeclType	unsigned char
>10324	IfStatement	if ( ! solved_for_extrinsics )
>10325	ElseStatement	else
>10326	CompoundStatement	 
>10327	IfStatement	if ( error > m_projection_estimation_threshold )
>10328	CompoundStatement	 
>10329	ContinueStatement	 
>10330	ExpressionStatement	 
>10331	CallExpression	printf ( \" skipping point\n\" )
>10332	ArgumentList	\" skipping point\n\"
>10333	Argument	\" skipping point\n\"
>10334	PrimaryExpression	\" skipping point\n\"
>10335	Callee	printf
>10336	Identifier	printf
>10337	Condition	 
>10338	RelationalExpression	error > m_projection_estimation_threshold
>10339	Identifier	m_projection_estimation_threshold
>10340	Identifier	error
>10341	ExpressionStatement	 
>10342	CallExpression	printf ( \" tri.error[%d] = %0.3f\n\" , i , error )
>10343	ArgumentList	\" tri.error[%d] = %0.3f\n\"
>10344	Argument	error
>10345	Identifier	error
>10346	Argument	i
>10347	Identifier	i
>10348	Argument	\" tri.error[%d] = %0.3f\n\"
>10349	PrimaryExpression	\" tri.error[%d] = %0.3f\n\"
>10350	Callee	printf
>10351	Identifier	printf
>10352	ExpressionStatement	 
>10353	AssignmentExpr	points [ pt_count ] = Triangulate ( p , q , cameras [ 0 ] , cameras [ 1 ] , error , in_front , angle , \
>10354	CallExpression	Triangulate ( p , q , cameras [ 0 ] , cameras [ 1 ] , error , in_front , angle , true )
>10355	ArgumentList	p
>10356	Argument	true
>10357	Identifier	true
>10358	Argument	angle
>10359	Identifier	angle
>10360	Argument	in_front
>10361	Identifier	in_front
>10362	Argument	error
>10363	Identifier	error
>10364	Argument	cameras [ 1 ]
>10365	ArrayIndexing	cameras [ 1 ]
>10366	PrimaryExpression	1
>10367	Identifier	cameras
>10368	Argument	cameras [ 0 ]
>10369	ArrayIndexing	cameras [ 0 ]
>10370	PrimaryExpression	0
>10371	Identifier	cameras
>10372	Argument	q
>10373	Identifier	q
>10374	Argument	p
>10375	Identifier	p
>10376	Callee	Triangulate
>10377	Identifier	Triangulate
>10378	ArrayIndexing	points [ pt_count ]
>10379	Identifier	pt_count
>10380	Identifier	points
>10381	IdentifierDeclStatement	 
>10382	IdentifierDecl	angle = 0.0
>10383	AssignmentExpr	angle = 0.0
>10384	PrimaryExpression	0.0
>10385	Identifier	angle
>10386	Identifier	angle
>10387	IdentifierDeclType	double
>10388	IdentifierDeclStatement	 
>10389	IdentifierDecl	in_front = true
>10390	AssignmentExpr	in_front = true
>10391	Identifier	true
>10392	Identifier	true
>10393	Identifier	in_front
>10394	IdentifierDeclType	bool
>10395	IdentifierDeclStatement	 
>10396	IdentifierDecl	q = v2_new ( x_proj2 , y_proj2 )
>10397	AssignmentExpr	q = v2_new ( x_proj2 , y_proj2 )
>10398	CallExpression	v2_new ( x_proj2 , y_proj2 )
>10399	ArgumentList	x_proj2
>10400	Argument	y_proj2
>10401	Identifier	y_proj2
>10402	Argument	x_proj2
>10403	Identifier	x_proj2
>10404	Callee	v2_new
>10405	Identifier	v2_new
>10406	Identifier	q
>10407	Identifier	q
>10408	IdentifierDeclType	v2_t
>10409	IdentifierDeclStatement	 
>10410	IdentifierDecl	p = v2_new ( x_proj1 , y_proj1 )
>10411	AssignmentExpr	p = v2_new ( x_proj1 , y_proj1 )
>10412	CallExpression	v2_new ( x_proj1 , y_proj1 )
>10413	ArgumentList	x_proj1
>10414	Argument	y_proj1
>10415	Identifier	y_proj1
>10416	Argument	x_proj1
>10417	Identifier	x_proj1
>10418	Callee	v2_new
>10419	Identifier	v2_new
>10420	Identifier	p
>10421	Identifier	p
>10422	IdentifierDeclType	v2_t
>10423	IdentifierDeclStatement	 
>10424	IdentifierDecl	error
>10425	Identifier	error
>10426	IdentifierDeclType	double
>10427	CompoundStatement	 
>10428	ExpressionStatement	 
>10429	AssignmentExpr	points [ pt_count ] = v3_new ( x_pt , y_pt , z_pt )
>10430	CallExpression	v3_new ( x_pt , y_pt , z_pt )
>10431	ArgumentList	x_pt
>10432	Argument	z_pt
>10433	Identifier	z_pt
>10434	Argument	y_pt
>10435	Identifier	y_pt
>10436	Argument	x_pt
>10437	Identifier	x_pt
>10438	Callee	v3_new
>10439	Identifier	v3_new
>10440	ArrayIndexing	points [ pt_count ]
>10441	Identifier	pt_count
>10442	Identifier	points
>10443	IdentifierDeclStatement	 
>10444	IdentifierDecl	z_pt = INITIAL_DEPTH + cameras [ 0 ] . t [ 2 ]
>10445	AssignmentExpr	z_pt = INITIAL_DEPTH + cameras [ 0 ] . t [ 2 ]
>10446	AdditiveExpression	INITIAL_DEPTH + cameras [ 0 ] . t [ 2 ]
>10447	ArrayIndexing	cameras [ 0 ] . t [ 2 ]
>10448	PrimaryExpression	2
>10449	MemberAccess	cameras [ 0 ] . t
>10450	Identifier	t
>10451	ArrayIndexing	cameras [ 0 ]
>10452	PrimaryExpression	0
>10453	Identifier	cameras
>10454	Identifier	INITIAL_DEPTH
>10455	Identifier	z_pt
>10456	Identifier	z_pt
>10457	IdentifierDeclType	double
>10458	IdentifierDeclStatement	 
>10459	IdentifierDecl	y_pt = ( y_proj / m_init_focal_length ) * INITIAL_DEPTH
>10460	AssignmentExpr	y_pt = ( y_proj / m_init_focal_length ) * INITIAL_DEPTH
>10461	MultiplicativeExpression	( y_proj / m_init_focal_length ) * INITIAL_DEPTH
>10462	Identifier	INITIAL_DEPTH
>10463	MultiplicativeExpression	y_proj / m_init_focal_length
>10464	Identifier	m_init_focal_length
>10465	Identifier	y_proj
>10466	Identifier	y_pt
>10467	Identifier	y_pt
>10468	IdentifierDeclType	double
>10469	IdentifierDeclStatement	 
>10470	IdentifierDecl	x_pt = ( x_proj / m_init_focal_length ) * INITIAL_DEPTH
>10471	AssignmentExpr	x_pt = ( x_proj / m_init_focal_length ) * INITIAL_DEPTH
>10472	MultiplicativeExpression	( x_proj / m_init_focal_length ) * INITIAL_DEPTH
>10473	Identifier	INITIAL_DEPTH
>10474	MultiplicativeExpression	x_proj / m_init_focal_length
>10475	Identifier	m_init_focal_length
>10476	Identifier	x_proj
>10477	Identifier	x_pt
>10478	Identifier	x_pt
>10479	IdentifierDeclType	double
>10480	Condition	 
>10481	UnaryOp	! solved_for_extrinsics
>10482	Identifier	solved_for_extrinsics
>10483	UnaryOperator	!
>10484	ExpressionStatement	 
>10485	CallExpression	printf ( \"  Adding match %d ==> %d -- %0.3f %0.3f ==> %0.3f %0.3f [%d]\n\" , key_idx1 , key_idx2 , x_proj1 , y_proj1 , \
>10486	ArgumentList	\"  Adding match %d ==> %d -- %0.3f %0.3f ==> %0.3f %0.3f [%d]\n\"
>10487	Argument	pt_count
>10488	Identifier	pt_count
>10489	Argument	y_proj2
>10490	Identifier	y_proj2
>10491	Argument	x_proj2
>10492	Identifier	x_proj2
>10493	Argument	y_proj1
>10494	Identifier	y_proj1
>10495	Argument	x_proj1
>10496	Identifier	x_proj1
>10497	Argument	key_idx2
>10498	Identifier	key_idx2
>10499	Argument	key_idx1
>10500	Identifier	key_idx1
>10501	Argument	\"  Adding match %d ==> %d -- %0.3f %0.3f ==> %0.3f %0.3f [%d]\n\"
>10502	PrimaryExpression	\"  Adding match %d ==> %d -- %0.3f %0.3f ==> %0.3f %0.3f [%d]\n\"
>10503	Callee	printf
>10504	Identifier	printf
>10505	IdentifierDeclStatement	 
>10506	IdentifierDecl	y_proj2 = GetKey ( j_best , key_idx2 ) . m_y
>10507	AssignmentExpr	y_proj2 = GetKey ( j_best , key_idx2 ) . m_y
>10508	MemberAccess	GetKey ( j_best , key_idx2 ) . m_y
>10509	Identifier	m_y
>10510	CallExpression	GetKey ( j_best , key_idx2 )
>10511	ArgumentList	j_best
>10512	Argument	key_idx2
>10513	Identifier	key_idx2
>10514	Argument	j_best
>10515	Identifier	j_best
>10516	Callee	GetKey
>10517	Identifier	GetKey
>10518	Identifier	y_proj2
>10519	Identifier	y_proj2
>10520	IdentifierDeclType	double
>10521	IdentifierDeclStatement	 
>10522	IdentifierDecl	x_proj2 = GetKey ( j_best , key_idx2 ) . m_x
>10523	AssignmentExpr	x_proj2 = GetKey ( j_best , key_idx2 ) . m_x
>10524	MemberAccess	GetKey ( j_best , key_idx2 ) . m_x
>10525	Identifier	m_x
>10526	CallExpression	GetKey ( j_best , key_idx2 )
>10527	ArgumentList	j_best
>10528	Argument	key_idx2
>10529	Identifier	key_idx2
>10530	Argument	j_best
>10531	Identifier	j_best
>10532	Callee	GetKey
>10533	Identifier	GetKey
>10534	Identifier	x_proj2
>10535	Identifier	x_proj2
>10536	IdentifierDeclType	double
>10537	IdentifierDeclStatement	 
>10538	IdentifierDecl	y_proj1 = GetKey ( i_best , key_idx1 ) . m_y
>10539	AssignmentExpr	y_proj1 = GetKey ( i_best , key_idx1 ) . m_y
>10540	MemberAccess	GetKey ( i_best , key_idx1 ) . m_y
>10541	Identifier	m_y
>10542	CallExpression	GetKey ( i_best , key_idx1 )
>10543	ArgumentList	i_best
>10544	Argument	key_idx1
>10545	Identifier	key_idx1
>10546	Argument	i_best
>10547	Identifier	i_best
>10548	Callee	GetKey
>10549	Identifier	GetKey
>10550	Identifier	y_proj1
>10551	Identifier	y_proj1
>10552	IdentifierDeclType	double
>10553	IdentifierDeclStatement	 
>10554	IdentifierDecl	x_proj1 = GetKey ( i_best , key_idx1 ) . m_x
>10555	AssignmentExpr	x_proj1 = GetKey ( i_best , key_idx1 ) . m_x
>10556	MemberAccess	GetKey ( i_best , key_idx1 ) . m_x
>10557	Identifier	m_x
>10558	CallExpression	GetKey ( i_best , key_idx1 )
>10559	ArgumentList	i_best
>10560	Argument	key_idx1
>10561	Identifier	key_idx1
>10562	Argument	i_best
>10563	Identifier	i_best
>10564	Callee	GetKey
>10565	Identifier	GetKey
>10566	Identifier	x_proj1
>10567	Identifier	x_proj1
>10568	IdentifierDeclType	double
>10569	IdentifierDeclStatement	 
>10570	IdentifierDecl	y_proj = GetKey ( i_best , key_idx1 ) . m_y
>10571	AssignmentExpr	y_proj = GetKey ( i_best , key_idx1 ) . m_y
>10572	MemberAccess	GetKey ( i_best , key_idx1 ) . m_y
>10573	Identifier	m_y
>10574	CallExpression	GetKey ( i_best , key_idx1 )
>10575	ArgumentList	i_best
>10576	Argument	key_idx1
>10577	Identifier	key_idx1
>10578	Argument	i_best
>10579	Identifier	i_best
>10580	Callee	GetKey
>10581	Identifier	GetKey
>10582	Identifier	y_proj
>10583	Identifier	y_proj
>10584	IdentifierDeclType	double
>10585	IdentifierDeclStatement	 
>10586	IdentifierDecl	x_proj = GetKey ( i_best , key_idx1 ) . m_x
>10587	AssignmentExpr	x_proj = GetKey ( i_best , key_idx1 ) . m_x
>10588	MemberAccess	GetKey ( i_best , key_idx1 ) . m_x
>10589	Identifier	m_x
>10590	CallExpression	GetKey ( i_best , key_idx1 )
>10591	ArgumentList	i_best
>10592	Argument	key_idx1
>10593	Identifier	key_idx1
>10594	Argument	i_best
>10595	Identifier	i_best
>10596	Callee	GetKey
>10597	Identifier	GetKey
>10598	Identifier	x_proj
>10599	Identifier	x_proj
>10600	IdentifierDeclType	double
>10601	IdentifierDeclStatement	 
>10602	IdentifierDecl	key_idx2 = list [ i ] . m_idx2
>10603	AssignmentExpr	key_idx2 = list [ i ] . m_idx2
>10604	MemberAccess	list [ i ] . m_idx2
>10605	Identifier	m_idx2
>10606	ArrayIndexing	list [ i ]
>10607	Identifier	i
>10608	Identifier	list
>10609	Identifier	key_idx2
>10610	Identifier	key_idx2
>10611	IdentifierDeclType	int
>10612	IdentifierDeclStatement	 
>10613	IdentifierDecl	key_idx1 = list [ i ] . m_idx1
>10614	AssignmentExpr	key_idx1 = list [ i ] . m_idx1
>10615	MemberAccess	list [ i ] . m_idx1
>10616	Identifier	m_idx1
>10617	ArrayIndexing	list [ i ]
>10618	Identifier	i
>10619	Identifier	list
>10620	Identifier	key_idx1
>10621	Identifier	key_idx1
>10622	IdentifierDeclType	int
>10623	IncDecOp	 
>10624	IncDec	++
>10625	Identifier	i
>10626	Condition	 
>10627	RelationalExpression	i < num_matches
>10628	Identifier	num_matches
>10629	Identifier	i
>10630	ForInit	 
>10631	IdentifierDeclStatement	unsigned int i = 0 ;
>10632	IdentifierDecl	i = 0
>10633	AssignmentExpr	i = 0
>10634	PrimaryExpression	0
>10635	Identifier	i
>10636	Identifier	i
>10637	IdentifierDeclType	unsigned int
>10638	IdentifierDeclStatement	 
>10639	IdentifierDecl	num_matches = list . size ( )
>10640	AssignmentExpr	num_matches = list . size ( )
>10641	CallExpression	list . size ( )
>10642	ArgumentList	 
>10643	Callee	list . size
>10644	MemberAccess	list . size
>10645	Identifier	size
>10646	Identifier	list
>10647	Identifier	num_matches
>10648	Identifier	num_matches
>10649	IdentifierDeclType	unsigned int
>10650	IdentifierDeclStatement	 
>10651	IdentifierDecl	& list = m_matches . GetMatchList ( list_idx )
>10652	AssignmentExpr	& list = m_matches . GetMatchList ( list_idx )
>10653	CallExpression	m_matches . GetMatchList ( list_idx )
>10654	ArgumentList	list_idx
>10655	Argument	list_idx
>10656	Identifier	list_idx
>10657	Callee	m_matches . GetMatchList
>10658	MemberAccess	m_matches . GetMatchList
>10659	Identifier	GetMatchList
>10660	Identifier	m_matches
>10661	Identifier	list
>10662	Identifier	list
>10663	IdentifierDeclType	std 
>10664	IdentifierDeclStatement	 
>10665	IdentifierDecl	list_idx = GetMatchIndex ( i_best , j_best )
>10666	AssignmentExpr	list_idx = GetMatchIndex ( i_best , j_best )
>10667	CallExpression	GetMatchIndex ( i_best , j_best )
>10668	ArgumentList	i_best
>10669	Argument	j_best
>10670	Identifier	j_best
>10671	Argument	i_best
>10672	Identifier	i_best
>10673	Callee	GetMatchIndex
>10674	Identifier	GetMatchIndex
>10675	Identifier	list_idx
>10676	Identifier	list_idx
>10677	IdentifierDeclType	MatchIndex
>10678	IdentifierDeclStatement	 
>10679	IdentifierDecl	pt_count = 0
>10680	AssignmentExpr	pt_count = 0
>10681	PrimaryExpression	0
>10682	Identifier	pt_count
>10683	Identifier	pt_count
>10684	IdentifierDeclType	int
>10685	ExpressionStatement	 
>10686	CallExpression	printf ( \"[BundleAdjust] Adding initial matches...\n\" )
>10687	ArgumentList	\"[BundleAdjust] Adding initial matches...\n\"
>10688	Argument	\"[BundleAdjust] Adding initial matches...\n\"
>10689	PrimaryExpression	\"[BundleAdjust] Adding initial matches...\n\"
>10690	Callee	printf
>10691	Identifier	printf
>10692	IfStatement	if ( m_constrain_focal )
>10693	CompoundStatement	 
>10694	ExpressionStatement	 
>10695	CallExpression	SetFocalConstraint ( m_image_data [ j_best ] , cameras + 1 )
>10696	ArgumentList	m_image_data [ j_best ]
>10697	Argument	cameras + 1
>10698	AdditiveExpression	cameras + 1
>10699	PrimaryExpression	1
>10700	Identifier	cameras
>10701	Argument	m_image_data [ j_best ]
>10702	ArrayIndexing	m_image_data [ j_best ]
>10703	Identifier	j_best
>10704	Identifier	m_image_data
>10705	Callee	SetFocalConstraint
>10706	Identifier	SetFocalConstraint
>10707	ExpressionStatement	 
>10708	CallExpression	SetFocalConstraint ( m_image_data [ i_best ] , cameras + 0 )
>10709	ArgumentList	m_image_data [ i_best ]
>10710	Argument	cameras + 0
>10711	AdditiveExpression	cameras + 0
>10712	PrimaryExpression	0
>10713	Identifier	cameras
>10714	Argument	m_image_data [ i_best ]
>10715	ArrayIndexing	m_image_data [ i_best ]
>10716	Identifier	i_best
>10717	Identifier	m_image_data
>10718	Callee	SetFocalConstraint
>10719	Identifier	SetFocalConstraint
>10720	Condition	 
>10721	Identifier	m_constrain_focal
>10722	IfStatement	if ( m_factor_essential && m_image_data [ i_best ] . m_has_init_focal && m_image_data [ j_best ] . m_has_init_focal && ! \
>10723	ElseStatement	else
>10724	CompoundStatement	 
>10725	IfStatement	if ( m_image_data [ j_best ] . m_camera . m_constrained [ 2 ] )
>10726	ElseStatement	else
>10727	ExpressionStatement	 
>10728	AssignmentExpr	cameras [ 1 ] . t [ 2 ] = 0.0
>10729	PrimaryExpression	0.0
>10730	ArrayIndexing	cameras [ 1 ] . t [ 2 ]
>10731	PrimaryExpression	2
>10732	MemberAccess	cameras [ 1 ] . t
>10733	Identifier	t
>10734	ArrayIndexing	cameras [ 1 ]
>10735	PrimaryExpression	1
>10736	Identifier	cameras
>10737	ExpressionStatement	 
>10738	AssignmentExpr	cameras [ 1 ] . t [ 2 ] = m_image_data [ j_best ] . m_camera . m_constraints [ 2 ]
>10739	ArrayIndexing	m_image_data [ j_best ] . m_camera . m_constraints [ 2 ]
>10740	PrimaryExpression	2
>10741	MemberAccess	m_image_data [ j_best ] . m_camera . m_constraints
>10742	Identifier	m_constraints
>10743	MemberAccess	m_image_data [ j_best ] . m_camera
>10744	Identifier	m_camera
>10745	ArrayIndexing	m_image_data [ j_best ]
>10746	Identifier	j_best
>10747	Identifier	m_image_data
>10748	ArrayIndexing	cameras [ 1 ] . t [ 2 ]
>10749	PrimaryExpression	2
>10750	MemberAccess	cameras [ 1 ] . t
>10751	Identifier	t
>10752	ArrayIndexing	cameras [ 1 ]
>10753	PrimaryExpression	1
>10754	Identifier	cameras
>10755	Condition	 
>10756	ArrayIndexing	m_image_data [ j_best ] . m_camera . m_constrained [ 2 ]
>10757	PrimaryExpression	2
>10758	MemberAccess	m_image_data [ j_best ] . m_camera . m_constrained
>10759	Identifier	m_constrained
>10760	MemberAccess	m_image_data [ j_best ] . m_camera
>10761	Identifier	m_camera
>10762	ArrayIndexing	m_image_data [ j_best ]
>10763	Identifier	j_best
>10764	Identifier	m_image_data
>10765	IfStatement	if ( m_image_data [ j_best ] . m_camera . m_constrained [ 1 ] )
>10766	ElseStatement	else
>10767	ExpressionStatement	 
>10768	AssignmentExpr	cameras [ 1 ] . t [ 1 ] = 0.0
>10769	PrimaryExpression	0.0
>10770	ArrayIndexing	cameras [ 1 ] . t [ 1 ]
>10771	PrimaryExpression	1
>10772	MemberAccess	cameras [ 1 ] . t
>10773	Identifier	t
>10774	ArrayIndexing	cameras [ 1 ]
>10775	PrimaryExpression	1
>10776	Identifier	cameras
>10777	ExpressionStatement	 
>10778	AssignmentExpr	cameras [ 1 ] . t [ 1 ] = m_image_data [ j_best ] . m_camera . m_constraints [ 1 ]
>10779	ArrayIndexing	m_image_data [ j_best ] . m_camera . m_constraints [ 1 ]
>10780	PrimaryExpression	1
>10781	MemberAccess	m_image_data [ j_best ] . m_camera . m_constraints
>10782	Identifier	m_constraints
>10783	MemberAccess	m_image_data [ j_best ] . m_camera
>10784	Identifier	m_camera
>10785	ArrayIndexing	m_image_data [ j_best ]
>10786	Identifier	j_best
>10787	Identifier	m_image_data
>10788	ArrayIndexing	cameras [ 1 ] . t [ 1 ]
>10789	PrimaryExpression	1
>10790	MemberAccess	cameras [ 1 ] . t
>10791	Identifier	t
>10792	ArrayIndexing	cameras [ 1 ]
>10793	PrimaryExpression	1
>10794	Identifier	cameras
>10795	Condition	 
>10796	ArrayIndexing	m_image_data [ j_best ] . m_camera . m_constrained [ 1 ]
>10797	PrimaryExpression	1
>10798	MemberAccess	m_image_data [ j_best ] . m_camera . m_constrained
>10799	Identifier	m_constrained
>10800	MemberAccess	m_image_data [ j_best ] . m_camera
>10801	Identifier	m_camera
>10802	ArrayIndexing	m_image_data [ j_best ]
>10803	Identifier	j_best
>10804	Identifier	m_image_data
>10805	IfStatement	if ( m_image_data [ j_best ] . m_camera . m_constrained [ 0 ] )
>10806	ElseStatement	else
>10807	ExpressionStatement	 
>10808	AssignmentExpr	cameras [ 1 ] . t [ 0 ] = 0.0
>10809	PrimaryExpression	0.0
>10810	ArrayIndexing	cameras [ 1 ] . t [ 0 ]
>10811	PrimaryExpression	0
>10812	MemberAccess	cameras [ 1 ] . t
>10813	Identifier	t
>10814	ArrayIndexing	cameras [ 1 ]
>10815	PrimaryExpression	1
>10816	Identifier	cameras
>10817	ExpressionStatement	 
>10818	AssignmentExpr	cameras [ 1 ] . t [ 0 ] = m_image_data [ j_best ] . m_camera . m_constraints [ 0 ]
>10819	ArrayIndexing	m_image_data [ j_best ] . m_camera . m_constraints [ 0 ]
>10820	PrimaryExpression	0
>10821	MemberAccess	m_image_data [ j_best ] . m_camera . m_constraints
>10822	Identifier	m_constraints
>10823	MemberAccess	m_image_data [ j_best ] . m_camera
>10824	Identifier	m_camera
>10825	ArrayIndexing	m_image_data [ j_best ]
>10826	Identifier	j_best
>10827	Identifier	m_image_data
>10828	ArrayIndexing	cameras [ 1 ] . t [ 0 ]
>10829	PrimaryExpression	0
>10830	MemberAccess	cameras [ 1 ] . t
>10831	Identifier	t
>10832	ArrayIndexing	cameras [ 1 ]
>10833	PrimaryExpression	1
>10834	Identifier	cameras
>10835	Condition	 
>10836	ArrayIndexing	m_image_data [ j_best ] . m_camera . m_constrained [ 0 ]
>10837	PrimaryExpression	0
>10838	MemberAccess	m_image_data [ j_best ] . m_camera . m_constrained
>10839	Identifier	m_constrained
>10840	MemberAccess	m_image_data [ j_best ] . m_camera
>10841	Identifier	m_camera
>10842	ArrayIndexing	m_image_data [ j_best ]
>10843	Identifier	j_best
>10844	Identifier	m_image_data
>10845	ExpressionStatement	 
>10846	AssignmentExpr	cameras [ 1 ] . R [ 8 ] = 1.0
>10847	PrimaryExpression	1.0
>10848	ArrayIndexing	cameras [ 1 ] . R [ 8 ]
>10849	PrimaryExpression	8
>10850	MemberAccess	cameras [ 1 ] . R
>10851	Identifier	R
>10852	ArrayIndexing	cameras [ 1 ]
>10853	PrimaryExpression	1
>10854	Identifier	cameras
>10855	ExpressionStatement	 
>10856	AssignmentExpr	cameras [ 1 ] . R [ 7 ] = 0.0
>10857	PrimaryExpression	0.0
>10858	ArrayIndexing	cameras [ 1 ] . R [ 7 ]
>10859	PrimaryExpression	7
>10860	MemberAccess	cameras [ 1 ] . R
>10861	Identifier	R
>10862	ArrayIndexing	cameras [ 1 ]
>10863	PrimaryExpression	1
>10864	Identifier	cameras
>10865	ExpressionStatement	 
>10866	AssignmentExpr	cameras [ 1 ] . R [ 6 ] = 0.0
>10867	PrimaryExpression	0.0
>10868	ArrayIndexing	cameras [ 1 ] . R [ 6 ]
>10869	PrimaryExpression	6
>10870	MemberAccess	cameras [ 1 ] . R
>10871	Identifier	R
>10872	ArrayIndexing	cameras [ 1 ]
>10873	PrimaryExpression	1
>10874	Identifier	cameras
>10875	ExpressionStatement	 
>10876	AssignmentExpr	cameras [ 1 ] . R [ 5 ] = 0.0
>10877	PrimaryExpression	0.0
>10878	ArrayIndexing	cameras [ 1 ] . R [ 5 ]
>10879	PrimaryExpression	5
>10880	MemberAccess	cameras [ 1 ] . R
>10881	Identifier	R
>10882	ArrayIndexing	cameras [ 1 ]
>10883	PrimaryExpression	1
>10884	Identifier	cameras
>10885	ExpressionStatement	 
>10886	AssignmentExpr	cameras [ 1 ] . R [ 4 ] = 1.0
>10887	PrimaryExpression	1.0
>10888	ArrayIndexing	cameras [ 1 ] . R [ 4 ]
>10889	PrimaryExpression	4
>10890	MemberAccess	cameras [ 1 ] . R
>10891	Identifier	R
>10892	ArrayIndexing	cameras [ 1 ]
>10893	PrimaryExpression	1
>10894	Identifier	cameras
>10895	ExpressionStatement	 
>10896	AssignmentExpr	cameras [ 1 ] . R [ 3 ] = 0.0
>10897	PrimaryExpression	0.0
>10898	ArrayIndexing	cameras [ 1 ] . R [ 3 ]
>10899	PrimaryExpression	3
>10900	MemberAccess	cameras [ 1 ] . R
>10901	Identifier	R
>10902	ArrayIndexing	cameras [ 1 ]
>10903	PrimaryExpression	1
>10904	Identifier	cameras
>10905	ExpressionStatement	 
>10906	AssignmentExpr	cameras [ 1 ] . R [ 2 ] = 0.0
>10907	PrimaryExpression	0.0
>10908	ArrayIndexing	cameras [ 1 ] . R [ 2 ]
>10909	PrimaryExpression	2
>10910	MemberAccess	cameras [ 1 ] . R
>10911	Identifier	R
>10912	ArrayIndexing	cameras [ 1 ]
>10913	PrimaryExpression	1
>10914	Identifier	cameras
>10915	ExpressionStatement	 
>10916	AssignmentExpr	cameras [ 1 ] . R [ 1 ] = 0.0
>10917	PrimaryExpression	0.0
>10918	ArrayIndexing	cameras [ 1 ] . R [ 1 ]
>10919	PrimaryExpression	1
>10920	MemberAccess	cameras [ 1 ] . R
>10921	Identifier	R
>10922	ArrayIndexing	cameras [ 1 ]
>10923	PrimaryExpression	1
>10924	Identifier	cameras
>10925	ExpressionStatement	 
>10926	AssignmentExpr	cameras [ 1 ] . R [ 0 ] = 1.0
>10927	PrimaryExpression	1.0
>10928	ArrayIndexing	cameras [ 1 ] . R [ 0 ]
>10929	PrimaryExpression	0
>10930	MemberAccess	cameras [ 1 ] . R
>10931	Identifier	R
>10932	ArrayIndexing	cameras [ 1 ]
>10933	PrimaryExpression	1
>10934	Identifier	cameras
>10935	Statement	 
>10936	Statement	 
>10937	Statement	 
>10938	CompoundStatement	 
>10939	IfStatement	if ( EstimateRelativePose2 ( i_best , j_best , cameras [ 0 ] , cameras [ 1 ] ) )
>10940	CompoundStatement	 
>10941	ExpressionStatement	 
>10942	AssignmentExpr	solved_for_extrinsics = true
>10943	Identifier	true
>10944	Identifier	solved_for_extrinsics
>10945	Condition	 
>10946	CallExpression	EstimateRelativePose2 ( i_best , j_best , cameras [ 0 ] , cameras [ 1 ] )
>10947	ArgumentList	i_best
>10948	Argument	cameras [ 1 ]
>10949	ArrayIndexing	cameras [ 1 ]
>10950	PrimaryExpression	1
>10951	Identifier	cameras
>10952	Argument	cameras [ 0 ]
>10953	ArrayIndexing	cameras [ 0 ]
>10954	PrimaryExpression	0
>10955	Identifier	cameras
>10956	Argument	j_best
>10957	Identifier	j_best
>10958	Argument	i_best
>10959	Identifier	i_best
>10960	Callee	EstimateRelativePose2
>10961	Identifier	EstimateRelativePose2
>10962	Condition	 
>10963	AndExpression	m_factor_essential && m_image_data [ i_best ] . m_has_init_focal && m_image_data [ j_best ] . m_has_\
>10964	AndExpression	m_image_data [ i_best ] . m_has_init_focal && m_image_data [ j_best ] . m_has_init_focal && ! m_use_\
>10965	AndExpression	m_image_data [ j_best ] . m_has_init_focal && ! m_use_constraints
>10966	UnaryOp	! m_use_constraints
>10967	Identifier	m_use_constraints
>10968	UnaryOperator	!
>10969	MemberAccess	m_image_data [ j_best ] . m_has_init_focal
>10970	Identifier	m_has_init_focal
>10971	ArrayIndexing	m_image_data [ j_best ]
>10972	Identifier	j_best
>10973	Identifier	m_image_data
>10974	MemberAccess	m_image_data [ i_best ] . m_has_init_focal
>10975	Identifier	m_has_init_focal
>10976	ArrayIndexing	m_image_data [ i_best ]
>10977	Identifier	i_best
>10978	Identifier	m_image_data
>10979	Identifier	m_factor_essential
>10980	IdentifierDeclStatement	 
>10981	IdentifierDecl	solved_for_extrinsics = false
>10982	AssignmentExpr	solved_for_extrinsics = false
>10983	Identifier	false
>10984	Identifier	false
>10985	Identifier	solved_for_extrinsics
>10986	IdentifierDeclType	bool
>10987	IfStatement	if ( m_fixed_focal_length || ! m_image_data [ j_best ] . m_has_init_focal )
>10988	ElseStatement	else
>10989	CompoundStatement	 
>10990	ExpressionStatement	 
>10991	AssignmentExpr	init_focal_length_1 = cameras [ 1 ] . f = m_image_data [ j_best ] . m_init_focal
>10992	AssignmentExpr	cameras [ 1 ] . f = m_image_data [ j_best ] . m_init_focal
>10993	MemberAccess	m_image_data [ j_best ] . m_init_focal
>10994	Identifier	m_init_focal
>10995	ArrayIndexing	m_image_data [ j_best ]
>10996	Identifier	j_best
>10997	Identifier	m_image_data
>10998	MemberAccess	cameras [ 1 ] . f
>10999	Identifier	f
>11000	ArrayIndexing	cameras [ 1 ]
>11001	PrimaryExpression	1
>11002	Identifier	cameras
>11003	Identifier	init_focal_length_1
>11004	CompoundStatement	 
>11005	ExpressionStatement	 
>11006	AssignmentExpr	init_focal_length_1 = cameras [ 1 ] . f = m_init_focal_length
>11007	AssignmentExpr	cameras [ 1 ] . f = m_init_focal_length
>11008	Identifier	m_init_focal_length
>11009	MemberAccess	cameras [ 1 ] . f
>11010	Identifier	f
>11011	ArrayIndexing	cameras [ 1 ]
>11012	PrimaryExpression	1
>11013	Identifier	cameras
>11014	Identifier	init_focal_length_1
>11015	Condition	 
>11016	OrExpression	m_fixed_focal_length || ! m_image_data [ j_best ] . m_has_init_focal
>11017	UnaryOp	! m_image_data [ j_best ] . m_has_init_focal
>11018	MemberAccess	m_image_data [ j_best ] . m_has_init_focal
>11019	Identifier	m_has_init_focal
>11020	ArrayIndexing	m_image_data [ j_best ]
>11021	Identifier	j_best
>11022	Identifier	m_image_data
>11023	UnaryOperator	!
>11024	Identifier	m_fixed_focal_length
>11025	IfStatement	if ( m_fixed_focal_length || ! m_image_data [ i_best ] . m_has_init_focal )
>11026	ElseStatement	else
>11027	CompoundStatement	 
>11028	ExpressionStatement	 
>11029	AssignmentExpr	init_focal_length_0 = cameras [ 0 ] . f = m_image_data [ i_best ] . m_init_focal
>11030	AssignmentExpr	cameras [ 0 ] . f = m_image_data [ i_best ] . m_init_focal
>11031	MemberAccess	m_image_data [ i_best ] . m_init_focal
>11032	Identifier	m_init_focal
>11033	ArrayIndexing	m_image_data [ i_best ]
>11034	Identifier	i_best
>11035	Identifier	m_image_data
>11036	MemberAccess	cameras [ 0 ] . f
>11037	Identifier	f
>11038	ArrayIndexing	cameras [ 0 ]
>11039	PrimaryExpression	0
>11040	Identifier	cameras
>11041	Identifier	init_focal_length_0
>11042	CompoundStatement	 
>11043	ExpressionStatement	 
>11044	AssignmentExpr	init_focal_length_0 = cameras [ 0 ] . f = m_init_focal_length
>11045	AssignmentExpr	cameras [ 0 ] . f = m_init_focal_length
>11046	Identifier	m_init_focal_length
>11047	MemberAccess	cameras [ 0 ] . f
>11048	Identifier	f
>11049	ArrayIndexing	cameras [ 0 ]
>11050	PrimaryExpression	0
>11051	Identifier	cameras
>11052	Identifier	init_focal_length_0
>11053	Condition	 
>11054	OrExpression	m_fixed_focal_length || ! m_image_data [ i_best ] . m_has_init_focal
>11055	UnaryOp	! m_image_data [ i_best ] . m_has_init_focal
>11056	MemberAccess	m_image_data [ i_best ] . m_has_init_focal
>11057	Identifier	m_has_init_focal
>11058	ArrayIndexing	m_image_data [ i_best ]
>11059	Identifier	i_best
>11060	Identifier	m_image_data
>11061	UnaryOperator	!
>11062	Identifier	m_fixed_focal_length
>11063	IfStatement	if ( m_image_data [ i_best ] . m_camera . m_constrained [ 2 ] )
>11064	ElseStatement	else
>11065	ExpressionStatement	 
>11066	AssignmentExpr	cameras [ 0 ] . t [ 2 ] = 0.0
>11067	PrimaryExpression	0.0
>11068	ArrayIndexing	cameras [ 0 ] . t [ 2 ]
>11069	PrimaryExpression	2
>11070	MemberAccess	cameras [ 0 ] . t
>11071	Identifier	t
>11072	ArrayIndexing	cameras [ 0 ]
>11073	PrimaryExpression	0
>11074	Identifier	cameras
>11075	ExpressionStatement	 
>11076	AssignmentExpr	cameras [ 0 ] . t [ 2 ] = m_image_data [ i_best ] . m_camera . m_constraints [ 2 ]
>11077	ArrayIndexing	m_image_data [ i_best ] . m_camera . m_constraints [ 2 ]
>11078	PrimaryExpression	2
>11079	MemberAccess	m_image_data [ i_best ] . m_camera . m_constraints
>11080	Identifier	m_constraints
>11081	MemberAccess	m_image_data [ i_best ] . m_camera
>11082	Identifier	m_camera
>11083	ArrayIndexing	m_image_data [ i_best ]
>11084	Identifier	i_best
>11085	Identifier	m_image_data
>11086	ArrayIndexing	cameras [ 0 ] . t [ 2 ]
>11087	PrimaryExpression	2
>11088	MemberAccess	cameras [ 0 ] . t
>11089	Identifier	t
>11090	ArrayIndexing	cameras [ 0 ]
>11091	PrimaryExpression	0
>11092	Identifier	cameras
>11093	Condition	 
>11094	ArrayIndexing	m_image_data [ i_best ] . m_camera . m_constrained [ 2 ]
>11095	PrimaryExpression	2
>11096	MemberAccess	m_image_data [ i_best ] . m_camera . m_constrained
>11097	Identifier	m_constrained
>11098	MemberAccess	m_image_data [ i_best ] . m_camera
>11099	Identifier	m_camera
>11100	ArrayIndexing	m_image_data [ i_best ]
>11101	Identifier	i_best
>11102	Identifier	m_image_data
>11103	IfStatement	if ( m_image_data [ i_best ] . m_camera . m_constrained [ 1 ] )
>11104	ElseStatement	else
>11105	ExpressionStatement	 
>11106	AssignmentExpr	cameras [ 0 ] . t [ 1 ] = 0.0
>11107	PrimaryExpression	0.0
>11108	ArrayIndexing	cameras [ 0 ] . t [ 1 ]
>11109	PrimaryExpression	1
>11110	MemberAccess	cameras [ 0 ] . t
>11111	Identifier	t
>11112	ArrayIndexing	cameras [ 0 ]
>11113	PrimaryExpression	0
>11114	Identifier	cameras
>11115	ExpressionStatement	 
>11116	AssignmentExpr	cameras [ 0 ] . t [ 1 ] = m_image_data [ i_best ] . m_camera . m_constraints [ 1 ]
>11117	ArrayIndexing	m_image_data [ i_best ] . m_camera . m_constraints [ 1 ]
>11118	PrimaryExpression	1
>11119	MemberAccess	m_image_data [ i_best ] . m_camera . m_constraints
>11120	Identifier	m_constraints
>11121	MemberAccess	m_image_data [ i_best ] . m_camera
>11122	Identifier	m_camera
>11123	ArrayIndexing	m_image_data [ i_best ]
>11124	Identifier	i_best
>11125	Identifier	m_image_data
>11126	ArrayIndexing	cameras [ 0 ] . t [ 1 ]
>11127	PrimaryExpression	1
>11128	MemberAccess	cameras [ 0 ] . t
>11129	Identifier	t
>11130	ArrayIndexing	cameras [ 0 ]
>11131	PrimaryExpression	0
>11132	Identifier	cameras
>11133	Condition	 
>11134	ArrayIndexing	m_image_data [ i_best ] . m_camera . m_constrained [ 1 ]
>11135	PrimaryExpression	1
>11136	MemberAccess	m_image_data [ i_best ] . m_camera . m_constrained
>11137	Identifier	m_constrained
>11138	MemberAccess	m_image_data [ i_best ] . m_camera
>11139	Identifier	m_camera
>11140	ArrayIndexing	m_image_data [ i_best ]
>11141	Identifier	i_best
>11142	Identifier	m_image_data
>11143	IfStatement	if ( m_image_data [ i_best ] . m_camera . m_constrained [ 0 ] )
>11144	ElseStatement	else
>11145	ExpressionStatement	 
>11146	AssignmentExpr	cameras [ 0 ] . t [ 0 ] = 0.0
>11147	PrimaryExpression	0.0
>11148	ArrayIndexing	cameras [ 0 ] . t [ 0 ]
>11149	PrimaryExpression	0
>11150	MemberAccess	cameras [ 0 ] . t
>11151	Identifier	t
>11152	ArrayIndexing	cameras [ 0 ]
>11153	PrimaryExpression	0
>11154	Identifier	cameras
>11155	ExpressionStatement	 
>11156	AssignmentExpr	cameras [ 0 ] . t [ 0 ] = m_image_data [ i_best ] . m_camera . m_constraints [ 0 ]
>11157	ArrayIndexing	m_image_data [ i_best ] . m_camera . m_constraints [ 0 ]
>11158	PrimaryExpression	0
>11159	MemberAccess	m_image_data [ i_best ] . m_camera . m_constraints
>11160	Identifier	m_constraints
>11161	MemberAccess	m_image_data [ i_best ] . m_camera
>11162	Identifier	m_camera
>11163	ArrayIndexing	m_image_data [ i_best ]
>11164	Identifier	i_best
>11165	Identifier	m_image_data
>11166	ArrayIndexing	cameras [ 0 ] . t [ 0 ]
>11167	PrimaryExpression	0
>11168	MemberAccess	cameras [ 0 ] . t
>11169	Identifier	t
>11170	ArrayIndexing	cameras [ 0 ]
>11171	PrimaryExpression	0
>11172	Identifier	cameras
>11173	Condition	 
>11174	ArrayIndexing	m_image_data [ i_best ] . m_camera . m_constrained [ 0 ]
>11175	PrimaryExpression	0
>11176	MemberAccess	m_image_data [ i_best ] . m_camera . m_constrained
>11177	Identifier	m_constrained
>11178	MemberAccess	m_image_data [ i_best ] . m_camera
>11179	Identifier	m_camera
>11180	ArrayIndexing	m_image_data [ i_best ]
>11181	Identifier	i_best
>11182	Identifier	m_image_data
>11183	ExpressionStatement	 
>11184	AssignmentExpr	cameras [ 0 ] . R [ 8 ] = 1.0
>11185	PrimaryExpression	1.0
>11186	ArrayIndexing	cameras [ 0 ] . R [ 8 ]
>11187	PrimaryExpression	8
>11188	MemberAccess	cameras [ 0 ] . R
>11189	Identifier	R
>11190	ArrayIndexing	cameras [ 0 ]
>11191	PrimaryExpression	0
>11192	Identifier	cameras
>11193	ExpressionStatement	 
>11194	AssignmentExpr	cameras [ 0 ] . R [ 7 ] = 0.0
>11195	PrimaryExpression	0.0
>11196	ArrayIndexing	cameras [ 0 ] . R [ 7 ]
>11197	PrimaryExpression	7
>11198	MemberAccess	cameras [ 0 ] . R
>11199	Identifier	R
>11200	ArrayIndexing	cameras [ 0 ]
>11201	PrimaryExpression	0
>11202	Identifier	cameras
>11203	ExpressionStatement	 
>11204	AssignmentExpr	cameras [ 0 ] . R [ 6 ] = 0.0
>11205	PrimaryExpression	0.0
>11206	ArrayIndexing	cameras [ 0 ] . R [ 6 ]
>11207	PrimaryExpression	6
>11208	MemberAccess	cameras [ 0 ] . R
>11209	Identifier	R
>11210	ArrayIndexing	cameras [ 0 ]
>11211	PrimaryExpression	0
>11212	Identifier	cameras
>11213	ExpressionStatement	 
>11214	AssignmentExpr	cameras [ 0 ] . R [ 5 ] = 0.0
>11215	PrimaryExpression	0.0
>11216	ArrayIndexing	cameras [ 0 ] . R [ 5 ]
>11217	PrimaryExpression	5
>11218	MemberAccess	cameras [ 0 ] . R
>11219	Identifier	R
>11220	ArrayIndexing	cameras [ 0 ]
>11221	PrimaryExpression	0
>11222	Identifier	cameras
>11223	ExpressionStatement	 
>11224	AssignmentExpr	cameras [ 0 ] . R [ 4 ] = 1.0
>11225	PrimaryExpression	1.0
>11226	ArrayIndexing	cameras [ 0 ] . R [ 4 ]
>11227	PrimaryExpression	4
>11228	MemberAccess	cameras [ 0 ] . R
>11229	Identifier	R
>11230	ArrayIndexing	cameras [ 0 ]
>11231	PrimaryExpression	0
>11232	Identifier	cameras
>11233	ExpressionStatement	 
>11234	AssignmentExpr	cameras [ 0 ] . R [ 3 ] = 0.0
>11235	PrimaryExpression	0.0
>11236	ArrayIndexing	cameras [ 0 ] . R [ 3 ]
>11237	PrimaryExpression	3
>11238	MemberAccess	cameras [ 0 ] . R
>11239	Identifier	R
>11240	ArrayIndexing	cameras [ 0 ]
>11241	PrimaryExpression	0
>11242	Identifier	cameras
>11243	ExpressionStatement	 
>11244	AssignmentExpr	cameras [ 0 ] . R [ 2 ] = 0.0
>11245	PrimaryExpression	0.0
>11246	ArrayIndexing	cameras [ 0 ] . R [ 2 ]
>11247	PrimaryExpression	2
>11248	MemberAccess	cameras [ 0 ] . R
>11249	Identifier	R
>11250	ArrayIndexing	cameras [ 0 ]
>11251	PrimaryExpression	0
>11252	Identifier	cameras
>11253	ExpressionStatement	 
>11254	AssignmentExpr	cameras [ 0 ] . R [ 1 ] = 0.0
>11255	PrimaryExpression	0.0
>11256	ArrayIndexing	cameras [ 0 ] . R [ 1 ]
>11257	PrimaryExpression	1
>11258	MemberAccess	cameras [ 0 ] . R
>11259	Identifier	R
>11260	ArrayIndexing	cameras [ 0 ]
>11261	PrimaryExpression	0
>11262	Identifier	cameras
>11263	ExpressionStatement	 
>11264	AssignmentExpr	cameras [ 0 ] . R [ 0 ] = 1.0
>11265	PrimaryExpression	1.0
>11266	ArrayIndexing	cameras [ 0 ] . R [ 0 ]
>11267	PrimaryExpression	0
>11268	MemberAccess	cameras [ 0 ] . R
>11269	Identifier	R
>11270	ArrayIndexing	cameras [ 0 ]
>11271	PrimaryExpression	0
>11272	Identifier	cameras
>11273	ExpressionStatement	 
>11274	CallExpression	SetCameraConstraints ( j_best , cameras + 1 )
>11275	ArgumentList	j_best
>11276	Argument	cameras + 1
>11277	AdditiveExpression	cameras + 1
>11278	PrimaryExpression	1
>11279	Identifier	cameras
>11280	Argument	j_best
>11281	Identifier	j_best
>11282	Callee	SetCameraConstraints
>11283	Identifier	SetCameraConstraints
>11284	ExpressionStatement	 
>11285	CallExpression	SetCameraConstraints ( i_best , cameras + 0 )
>11286	ArgumentList	i_best
>11287	Argument	cameras + 0
>11288	AdditiveExpression	cameras + 0
>11289	PrimaryExpression	0
>11290	Identifier	cameras
>11291	Argument	i_best
>11292	Identifier	i_best
>11293	Callee	SetCameraConstraints
>11294	Identifier	SetCameraConstraints
>11295	ExpressionStatement	 
>11296	CallExpression	InitializeCameraParams ( m_image_data [ j_best ] , cameras [ 1 ] )
>11297	ArgumentList	m_image_data [ j_best ]
>11298	Argument	cameras [ 1 ]
>11299	ArrayIndexing	cameras [ 1 ]
>11300	PrimaryExpression	1
>11301	Identifier	cameras
>11302	Argument	m_image_data [ j_best ]
>11303	ArrayIndexing	m_image_data [ j_best ]
>11304	Identifier	j_best
>11305	Identifier	m_image_data
>11306	Callee	InitializeCameraParams
>11307	Identifier	InitializeCameraParams
>11308	ExpressionStatement	 
>11309	CallExpression	InitializeCameraParams ( m_image_data [ i_best ] , cameras [ 0 ] )
>11310	ArgumentList	m_image_data [ i_best ]
>11311	Argument	cameras [ 0 ]
>11312	ArrayIndexing	cameras [ 0 ]
>11313	PrimaryExpression	0
>11314	Identifier	cameras
>11315	Argument	m_image_data [ i_best ]
>11316	ArrayIndexing	m_image_data [ i_best ]
>11317	Identifier	i_best
>11318	Identifier	m_image_data
>11319	Callee	InitializeCameraParams
>11320	Identifier	InitializeCameraParams
>11321	ExpressionStatement	 
>11322	CallExpression	SetTracks ( j_best )
>11323	ArgumentList	j_best
>11324	Argument	j_best
>11325	Identifier	j_best
>11326	Callee	SetTracks
>11327	Identifier	SetTracks
>11328	ExpressionStatement	 
>11329	CallExpression	SetTracks ( i_best )
>11330	ArgumentList	i_best
>11331	Argument	i_best
>11332	Identifier	i_best
>11333	Callee	SetTracks
>11334	Identifier	SetTracks
>11335	ExpressionStatement	 
>11336	CallExpression	SetMatchesFromTracks ( i_best , j_best )
>11337	ArgumentList	i_best
>11338	Argument	j_best
>11339	Identifier	j_best
>11340	Argument	i_best
>11341	Identifier	i_best
>11342	Callee	SetMatchesFromTracks
>11343	Identifier	SetMatchesFromTracks
>11344	ExpressionStatement	 
>11345	CallExpression	m_image_data [ j_best ] . ReadKeyColors ( )
>11346	ArgumentList	 
>11347	Callee	m_image_data [ j_best ] . ReadKeyColors
>11348	MemberAccess	m_image_data [ j_best ] . ReadKeyColors
>11349	Identifier	ReadKeyColors
>11350	ArrayIndexing	m_image_data [ j_best ]
>11351	Identifier	j_best
>11352	Identifier	m_image_data
>11353	ExpressionStatement	 
>11354	CallExpression	m_image_data [ i_best ] . ReadKeyColors ( )
>11355	ArgumentList	 
>11356	Callee	m_image_data [ i_best ] . ReadKeyColors
>11357	MemberAccess	m_image_data [ i_best ] . ReadKeyColors
>11358	Identifier	ReadKeyColors
>11359	ArrayIndexing	m_image_data [ i_best ]
>11360	Identifier	i_best
>11361	Identifier	m_image_data
>11362	ExpressionStatement	 
>11363	CallExpression	m_image_data [ j_best ] . LoadKeys ( false , ! m_optimize_for_fisheye )
>11364	ArgumentList	false
>11365	Argument	! m_optimize_for_fisheye
>11366	UnaryOp	! m_optimize_for_fisheye
>11367	Identifier	m_optimize_for_fisheye
>11368	UnaryOperator	!
>11369	Argument	false
>11370	Identifier	false
>11371	Callee	m_image_data [ j_best ] . LoadKeys
>11372	MemberAccess	m_image_data [ j_best ] . LoadKeys
>11373	Identifier	LoadKeys
>11374	ArrayIndexing	m_image_data [ j_best ]
>11375	Identifier	j_best
>11376	Identifier	m_image_data
>11377	ExpressionStatement	 
>11378	CallExpression	m_image_data [ i_best ] . LoadKeys ( false , ! m_optimize_for_fisheye )
>11379	ArgumentList	false
>11380	Argument	! m_optimize_for_fisheye
>11381	UnaryOp	! m_optimize_for_fisheye
>11382	Identifier	m_optimize_for_fisheye
>11383	UnaryOperator	!
>11384	Argument	false
>11385	Identifier	false
>11386	Callee	m_image_data [ i_best ] . LoadKeys
>11387	MemberAccess	m_image_data [ i_best ] . LoadKeys
>11388	Identifier	LoadKeys
>11389	ArrayIndexing	m_image_data [ i_best ]
>11390	Identifier	i_best
>11391	Identifier	m_image_data
>11506	FunctionDef	BundlerApp 
>11507	ParameterList	int & curr_num_cameras , camera_params_t * cameras , int * added_order , int & curr_num_pts , v3_t * points , v3_\
>11508	Parameter	 
>11509	Identifier	pt_views
>11510	ParameterType	std 
>11511	Parameter	 
>11512	Identifier	colors
>11513	ParameterType	v3_t *
>11514	Parameter	 
>11515	Identifier	points
>11516	ParameterType	v3_t *
>11517	Parameter	 
>11518	Identifier	curr_num_pts
>11519	ParameterType	int &
>11520	Parameter	 
>11521	Identifier	added_order
>11522	ParameterType	int *
>11523	Parameter	 
>11524	Identifier	cameras
>11525	ParameterType	camera_params_t *
>11526	Parameter	 
>11527	Identifier	curr_num_cameras
>11528	ParameterType	int &
>11529	ReturnType	void
>11530	CompoundStatement	 
>11531	ExpressionStatement	 
>11532	CallExpression	DumpPointsToPly ( m_output_directory , \"final.ply\" , curr_num_pts , curr_num_cameras , points , colors , cameras )
>11533	ArgumentList	m_output_directory
>11534	Argument	cameras
>11535	Identifier	cameras
>11536	Argument	colors
>11537	Identifier	colors
>11538	Argument	points
>11539	Identifier	points
>11540	Argument	curr_num_cameras
>11541	Identifier	curr_num_cameras
>11542	Argument	curr_num_pts
>11543	Identifier	curr_num_pts
>11544	Argument	\"final.ply\"
>11545	PrimaryExpression	\"final.ply\"
>11546	Argument	m_output_directory
>11547	Identifier	m_output_directory
>11548	Callee	DumpPointsToPly
>11549	Identifier	DumpPointsToPly
>11550	ForStatement	for ( int i = 0 ; i < curr_num_cameras ; i ++ )
>11551	CompoundStatement	 
>11552	IfStatement	if ( m_image_data [ added_order [ i ] ] . m_has_init_focal )
>11553	ElseStatement	else
>11554	CompoundStatement	 
>11555	ExpressionStatement	 
>11556	CallExpression	printf ( \"   [%03d] %0.3f %s %d; %0.3e %0.3e\n\" , i , cameras [ i ] . f , m_image_data [ added_order [ i ] ] . m_\
>11557	ArgumentList	\"   [%03d] %0.3f %s %d; %0.3e %0.3e\n\"
>11558	Argument	cameras [ i ] . k [ 1 ]
>11559	ArrayIndexing	cameras [ i ] . k [ 1 ]
>11560	PrimaryExpression	1
>11561	MemberAccess	cameras [ i ] . k
>11562	Identifier	k
>11563	ArrayIndexing	cameras [ i ]
>11564	Identifier	i
>11565	Identifier	cameras
>11566	Argument	cameras [ i ] . k [ 0 ]
>11567	ArrayIndexing	cameras [ i ] . k [ 0 ]
>11568	PrimaryExpression	0
>11569	MemberAccess	cameras [ i ] . k
>11570	Identifier	k
>11571	ArrayIndexing	cameras [ i ]
>11572	Identifier	i
>11573	Identifier	cameras
>11574	Argument	added_order [ i ]
>11575	ArrayIndexing	added_order [ i ]
>11576	Identifier	i
>11577	Identifier	added_order
>11578	Argument	m_image_data [ added_order [ i ] ] . m_name
>11579	MemberAccess	m_image_data [ added_order [ i ] ] . m_name
>11580	Identifier	m_name
>11581	ArrayIndexing	m_image_data [ added_order [ i ] ]
>11582	ArrayIndexing	added_order [ i ]
>11583	Identifier	i
>11584	Identifier	added_order
>11585	Identifier	m_image_data
>11586	Argument	cameras [ i ] . f
>11587	MemberAccess	cameras [ i ] . f
>11588	Identifier	f
>11589	ArrayIndexing	cameras [ i ]
>11590	Identifier	i
>11591	Identifier	cameras
>11592	Argument	i
>11593	Identifier	i
>11594	Argument	\"   [%03d] %0.3f %s %d; %0.3e %0.3e\n\"
>11595	PrimaryExpression	\"   [%03d] %0.3f %s %d; %0.3e %0.3e\n\"
>11596	Callee	printf
>11597	Identifier	printf
>11598	CompoundStatement	 
>11599	ExpressionStatement	 
>11600	CallExpression	printf ( \"   [%03d] %0.3f (%0.3f) %s %d; %0.3e, %0.3e\n\" , i , cameras [ i ] . f , m_image_data [ added_order [ \
>11601	ArgumentList	\"   [%03d] %0.3f (%0.3f) %s %d; %0.3e, %0.3e\n\"
>11602	Argument	cameras [ i ] . k [ 1 ]
>11603	ArrayIndexing	cameras [ i ] . k [ 1 ]
>11604	PrimaryExpression	1
>11605	MemberAccess	cameras [ i ] . k
>11606	Identifier	k
>11607	ArrayIndexing	cameras [ i ]
>11608	Identifier	i
>11609	Identifier	cameras
>11610	Argument	cameras [ i ] . k [ 0 ]
>11611	ArrayIndexing	cameras [ i ] . k [ 0 ]
>11612	PrimaryExpression	0
>11613	MemberAccess	cameras [ i ] . k
>11614	Identifier	k
>11615	ArrayIndexing	cameras [ i ]
>11616	Identifier	i
>11617	Identifier	cameras
>11618	Argument	added_order [ i ]
>11619	ArrayIndexing	added_order [ i ]
>11620	Identifier	i
>11621	Identifier	added_order
>11622	Argument	m_image_data [ added_order [ i ] ] . m_name
>11623	MemberAccess	m_image_data [ added_order [ i ] ] . m_name
>11624	Identifier	m_name
>11625	ArrayIndexing	m_image_data [ added_order [ i ] ]
>11626	ArrayIndexing	added_order [ i ]
>11627	Identifier	i
>11628	Identifier	added_order
>11629	Identifier	m_image_data
>11630	Argument	m_image_data [ added_order [ i ] ] . m_init_focal
>11631	MemberAccess	m_image_data [ added_order [ i ] ] . m_init_focal
>11632	Identifier	m_init_focal
>11633	ArrayIndexing	m_image_data [ added_order [ i ] ]
>11634	ArrayIndexing	added_order [ i ]
>11635	Identifier	i
>11636	Identifier	added_order
>11637	Identifier	m_image_data
>11638	Argument	cameras [ i ] . f
>11639	MemberAccess	cameras [ i ] . f
>11640	Identifier	f
>11641	ArrayIndexing	cameras [ i ]
>11642	Identifier	i
>11643	Identifier	cameras
>11644	Argument	i
>11645	Identifier	i
>11646	Argument	\"   [%03d] %0.3f (%0.3f) %s %d; %0.3e, %0.3e\n\"
>11647	PrimaryExpression	\"   [%03d] %0.3f (%0.3f) %s %d; %0.3e, %0.3e\n\"
>11648	Callee	printf
>11649	Identifier	printf
>11650	Condition	 
>11651	MemberAccess	m_image_data [ added_order [ i ] ] . m_has_init_focal
>11652	Identifier	m_has_init_focal
>11653	ArrayIndexing	m_image_data [ added_order [ i ] ]
>11654	ArrayIndexing	added_order [ i ]
>11655	Identifier	i
>11656	Identifier	added_order
>11657	Identifier	m_image_data
>11658	IncDecOp	 
>11659	IncDec	++
>11660	Identifier	i
>11661	Condition	 
>11662	RelationalExpression	i < curr_num_cameras
>11663	Identifier	curr_num_cameras
>11664	Identifier	i
>11665	ForInit	 
>11666	IdentifierDeclStatement	int i = 0 ;
>11667	IdentifierDecl	i = 0
>11668	AssignmentExpr	i = 0
>11669	PrimaryExpression	0
>11670	Identifier	i
>11671	Identifier	i
>11672	IdentifierDeclType	int
>11673	ExpressionStatement	 
>11674	CallExpression	printf ( \"  focal lengths
>11675	ArgumentList	\"  focal lengths
>11676	Argument	\"  focal lengths
>11677	PrimaryExpression	\"  focal lengths
>11678	Callee	printf
>11679	Identifier	printf
>11680	ExpressionStatement	 
>11681	AssignmentExpr	curr_num_pts = pt_count
>11682	Identifier	pt_count
>11683	Identifier	curr_num_pts
>11684	ExpressionStatement	 
>11685	CallExpression	RunSFM ( pt_count , curr_num_cameras , 0 , false , cameras , points , added_order , colors , pt_views , 1.0e-20 )
>11686	ArgumentList	pt_count
>11687	Argument	1.0e-20
>11688	PrimaryExpression	1.0e-20
>11689	Argument	pt_views
>11690	Identifier	pt_views
>11691	Argument	colors
>11692	Identifier	colors
>11693	Argument	added_order
>11694	Identifier	added_order
>11695	Argument	points
>11696	Identifier	points
>11697	Argument	cameras
>11698	Identifier	cameras
>11699	Argument	false
>11700	Identifier	false
>11701	Argument	0
>11702	PrimaryExpression	0
>11703	Argument	curr_num_cameras
>11704	Identifier	curr_num_cameras
>11705	Argument	pt_count
>11706	Identifier	pt_count
>11707	Callee	RunSFM
>11708	Identifier	RunSFM
>11709	IfStatement	if ( m_bundle_output_file != NULL )
>11710	CompoundStatement	 
>11711	IfStatement	if ( m_estimate_distortion )
>11712	CompoundStatement	 
>11713	ExpressionStatement	 
>11714	CallExpression	DumpOutputFile ( m_output_directory , buf , num_images , curr_num_cameras , pt_count , added_order , cameras , points , \
>11715	ArgumentList	m_output_directory
>11716	Argument	true
>11717	Identifier	true
>11718	Argument	pt_views
>11719	Identifier	pt_views
>11720	Argument	colors
>11721	Identifier	colors
>11722	Argument	points
>11723	Identifier	points
>11724	Argument	cameras
>11725	Identifier	cameras
>11726	Argument	added_order
>11727	Identifier	added_order
>11728	Argument	pt_count
>11729	Identifier	pt_count
>11730	Argument	curr_num_cameras
>11731	Identifier	curr_num_cameras
>11732	Argument	num_images
>11733	Identifier	num_images
>11734	Argument	buf
>11735	Identifier	buf
>11736	Argument	m_output_directory
>11737	Identifier	m_output_directory
>11738	Callee	DumpOutputFile
>11739	Identifier	DumpOutputFile
>11740	ExpressionStatement	 
>11741	CallExpression	sprintf ( buf , \"%spre.rd.out\" , m_bundle_output_base )
>11742	ArgumentList	buf
>11743	Argument	m_bundle_output_base
>11744	Identifier	m_bundle_output_base
>11745	Argument	\"%spre.rd.out\"
>11746	PrimaryExpression	\"%spre.rd.out\"
>11747	Argument	buf
>11748	Identifier	buf
>11749	Callee	sprintf
>11750	Identifier	sprintf
>11751	Condition	 
>11752	Identifier	m_estimate_distortion
>11753	ExpressionStatement	 
>11754	CallExpression	DumpOutputFile ( m_output_directory , buf , num_images , curr_num_cameras , pt_count , added_order , cameras , points , \
>11755	ArgumentList	m_output_directory
>11756	Argument	pt_views
>11757	Identifier	pt_views
>11758	Argument	colors
>11759	Identifier	colors
>11760	Argument	points
>11761	Identifier	points
>11762	Argument	cameras
>11763	Identifier	cameras
>11764	Argument	added_order
>11765	Identifier	added_order
>11766	Argument	pt_count
>11767	Identifier	pt_count
>11768	Argument	curr_num_cameras
>11769	Identifier	curr_num_cameras
>11770	Argument	num_images
>11771	Identifier	num_images
>11772	Argument	buf
>11773	Identifier	buf
>11774	Argument	m_output_directory
>11775	Identifier	m_output_directory
>11776	Callee	DumpOutputFile
>11777	Identifier	DumpOutputFile
>11778	ExpressionStatement	 
>11779	CallExpression	sprintf ( buf , \"%spre.out\" , m_bundle_output_base )
>11780	ArgumentList	buf
>11781	Argument	m_bundle_output_base
>11782	Identifier	m_bundle_output_base
>11783	Argument	\"%spre.out\"
>11784	PrimaryExpression	\"%spre.out\"
>11785	Argument	buf
>11786	Identifier	buf
>11787	Callee	sprintf
>11788	Identifier	sprintf
>11789	IdentifierDeclStatement	 
>11790	IdentifierDecl	buf [ 256 ]
>11791	PrimaryExpression	256
>11792	Identifier	buf
>11793	IdentifierDeclType	char [ 256 ]
>11794	Condition	 
>11795	EqualityExpression	m_bundle_output_file != NULL
>11796	Identifier	NULL
>11797	Identifier	m_bundle_output_file
>11798	ForStatement	for ( int i = 0 ; i < curr_num_cameras ; i ++ )
>11799	CompoundStatement	 
>11800	ExpressionStatement	 
>11801	CallExpression	printf ( \"[BundleAdjust] Polishing took %0.3fs\n\" , ( double ) ( end - start ) / CLOCKS_PER_SEC )
>11802	ArgumentList	\"[BundleAdjust] Polishing took %0.3fs\n\"
>11803	Argument	( double ) ( end - start ) / CLOCKS_PER_SEC
>11804	MultiplicativeExpression	( double ) ( end - start ) / CLOCKS_PER_SEC
>11805	Identifier	CLOCKS_PER_SEC
>11806	CastExpression	( double ) ( end - start )
>11807	AdditiveExpression	end - start
>11808	Identifier	start
>11809	Identifier	end
>11810	CastTarget	double
>11811	Argument	\"[BundleAdjust] Polishing took %0.3fs\n\"
>11812	PrimaryExpression	\"[BundleAdjust] Polishing took %0.3fs\n\"
>11813	Callee	printf
>11814	Identifier	printf
>11815	IdentifierDeclStatement	 
>11816	IdentifierDecl	end = clock ( )
>11817	AssignmentExpr	end = clock ( )
>11818	CallExpression	clock ( )
>11819	ArgumentList	 
>11820	Callee	clock
>11821	Identifier	clock
>11822	Identifier	end
>11823	Identifier	end
>11824	IdentifierDeclType	clock_t
>11825	ExpressionStatement	 
>11826	Identifier	pt_idxs
>11827	Statement	 
>11828	Statement	 
>11829	Statement	 
>11830	ExpressionStatement	 
>11831	Identifier	projs
>11832	Statement	 
>11833	Statement	 
>11834	Statement	 
>11835	ExpressionStatement	 
>11836	Identifier	points_visible
>11837	Statement	 
>11838	Statement	 
>11839	Statement	 
>11840	ExpressionStatement	 
>11841	CallExpression	RefineCameraAndPoints ( m_image_data [ image ] , num_visible , points_visible , projs , pt_idxs , cameras , added_\
>11842	ArgumentList	m_image_data [ image ]
>11843	Argument	false
>11844	Identifier	false
>11845	Argument	cameras + i
>11846	AdditiveExpression	cameras + i
>11847	Identifier	i
>11848	Identifier	cameras
>11849	Argument	pt_views
>11850	Identifier	pt_views
>11851	Argument	added_order
>11852	Identifier	added_order
>11853	Argument	cameras
>11854	Identifier	cameras
>11855	Argument	pt_idxs
>11856	Identifier	pt_idxs
>11857	Argument	projs
>11858	Identifier	projs
>11859	Argument	points_visible
>11860	Identifier	points_visible
>11861	Argument	num_visible
>11862	Identifier	num_visible
>11863	Argument	m_image_data [ image ]
>11864	ArrayIndexing	m_image_data [ image ]
>11865	Identifier	image
>11866	Identifier	m_image_data
>11867	Callee	RefineCameraAndPoints
>11868	Identifier	RefineCameraAndPoints
>11869	ForStatement	for ( int j = 0 ; j < num_keys ; j ++ )
>11870	CompoundStatement	 
>11871	ExpressionStatement	 
>11872	IncDecOp	count ++
>11873	IncDec	++
>11874	Identifier	count
>11875	ExpressionStatement	 
>11876	AssignmentExpr	pt_idxs [ count ] = track
>11877	Identifier	track
>11878	ArrayIndexing	pt_idxs [ count ]
>11879	Identifier	count
>11880	Identifier	pt_idxs
>11881	ExpressionStatement	 
>11882	AssignmentExpr	projs [ count ] = v2_new ( key . m_x , key . m_y )
>11883	CallExpression	v2_new ( key . m_x , key . m_y )
>11884	ArgumentList	key . m_x
>11885	Argument	key . m_y
>11886	MemberAccess	key . m_y
>11887	Identifier	m_y
>11888	Identifier	key
>11889	Argument	key . m_x
>11890	MemberAccess	key . m_x
>11891	Identifier	m_x
>11892	Identifier	key
>11893	Callee	v2_new
>11894	Identifier	v2_new
>11895	ArrayIndexing	projs [ count ]
>11896	Identifier	count
>11897	Identifier	projs
>11898	ExpressionStatement	 
>11899	AssignmentExpr	points_visible [ count ] = points_visible [ track ]
>11900	ArrayIndexing	points_visible [ track ]
>11901	Identifier	track
>11902	Identifier	points_visible
>11903	ArrayIndexing	points_visible [ count ]
>11904	Identifier	count
>11905	Identifier	points_visible
>11906	IdentifierDeclStatement	 
>11907	IdentifierDecl	track = key . m_extra
>11908	AssignmentExpr	track = key . m_extra
>11909	MemberAccess	key . m_extra
>11910	Identifier	m_extra
>11911	Identifier	key
>11912	Identifier	track
>11913	Identifier	track
>11914	IdentifierDeclType	int
>11915	IdentifierDeclStatement	 
>11916	IdentifierDecl	& key = m_image_data [ image ] . m_keys [ j ]
>11917	AssignmentExpr	& key = m_image_data [ image ] . m_keys [ j ]
>11918	ArrayIndexing	m_image_data [ image ] . m_keys [ j ]
>11919	Identifier	j
>11920	MemberAccess	m_image_data [ image ] . m_keys
>11921	Identifier	m_keys
>11922	ArrayIndexing	m_image_data [ image ]
>11923	Identifier	image
>11924	Identifier	m_image_data
>11925	Identifier	key
>11926	Identifier	key
>11927	IdentifierDeclType	const Keypoint &
>11928	IfStatement	if ( m_image_data [ image ] . m_keys [ j ] . m_extra < 0 )
>11929	ContinueStatement	 
>11930	Condition	 
>11931	RelationalExpression	m_image_data [ image ] . m_keys [ j ] . m_extra < 0
>11932	PrimaryExpression	0
>11933	MemberAccess	m_image_data [ image ] . m_keys [ j ] . m_extra
>11934	Identifier	m_extra
>11935	ArrayIndexing	m_image_data [ image ] . m_keys [ j ]
>11936	Identifier	j
>11937	MemberAccess	m_image_data [ image ] . m_keys
>11938	Identifier	m_keys
>11939	ArrayIndexing	m_image_data [ image ]
>11940	Identifier	image
>11941	Identifier	m_image_data
>11942	IncDecOp	 
>11943	IncDec	++
>11944	Identifier	j
>11945	Condition	 
>11946	RelationalExpression	j < num_keys
>11947	Identifier	num_keys
>11948	Identifier	j
>11949	ForInit	 
>11950	IdentifierDeclStatement	int j = 0 ;
>11951	IdentifierDecl	j = 0
>11952	AssignmentExpr	j = 0
>11953	PrimaryExpression	0
>11954	Identifier	j
>11955	Identifier	j
>11956	IdentifierDeclType	int
>11957	IdentifierDeclStatement	 
>11958	IdentifierDecl	count = 0
>11959	AssignmentExpr	count = 0
>11960	PrimaryExpression	0
>11961	Identifier	count
>11962	Identifier	count
>11963	IdentifierDeclType	int
>11964	IdentifierDeclStatement	 
>11965	IdentifierDecl	* pt_idxs = new int [ num_keys ]
>11966	AssignmentExpr	* pt_idxs = new int [ num_keys ]
>11967	Identifier	num_keys
>11968	Identifier	num_keys
>11969	Identifier	pt_idxs
>11970	IdentifierDeclType	int *
>11971	IdentifierDeclStatement	 
>11972	IdentifierDecl	* projs = new v2_t [ num_keys ]
>11973	AssignmentExpr	* projs = new v2_t [ num_keys ]
>11974	Identifier	num_keys
>11975	Identifier	num_keys
>11976	Identifier	projs
>11977	IdentifierDeclType	v2_t *
>11978	IdentifierDeclStatement	 
>11979	IdentifierDecl	* points_visible = new v3_t [ num_keys ]
>11980	AssignmentExpr	* points_visible = new v3_t [ num_keys ]
>11981	Identifier	num_keys
>11982	Identifier	num_keys
>11983	Identifier	points_visible
>11984	IdentifierDeclType	v3_t *
>11985	ExpressionStatement	 
>11986	CallExpression	printf ( \"[EstimateIgnoredCameras] Polishing image %d (%d)\n\" , image , i )
>11987	ArgumentList	\"[EstimateIgnoredCameras] Polishing image %d (%d)\n\"
>11988	Argument	i
>11989	Identifier	i
>11990	Argument	image
>11991	Identifier	image
>11992	Argument	\"[EstimateIgnoredCameras] Polishing image %d (%d)\n\"
>11993	PrimaryExpression	\"[EstimateIgnoredCameras] Polishing image %d (%d)\n\"
>11994	Callee	printf
>11995	Identifier	printf
>11996	IdentifierDeclStatement	 
>11997	IdentifierDecl	num_visible = 0
>11998	AssignmentExpr	num_visible = 0
>11999	PrimaryExpression	0
>12000	Identifier	num_visible
>12001	Identifier	num_visible
>12002	IdentifierDeclType	int
>12003	IdentifierDeclStatement	 
>12004	IdentifierDecl	num_keys = GetNumKeys ( image )
>12005	AssignmentExpr	num_keys = GetNumKeys ( image )
>12006	CallExpression	GetNumKeys ( image )
>12007	ArgumentList	image
>12008	Argument	image
>12009	Identifier	image
>12010	Callee	GetNumKeys
>12011	Identifier	GetNumKeys
>12012	Identifier	num_keys
>12013	Identifier	num_keys
>12014	IdentifierDeclType	int
>12015	IdentifierDeclStatement	 
>12016	IdentifierDecl	image = added_order [ i ]
>12017	AssignmentExpr	image = added_order [ i ]
>12018	ArrayIndexing	added_order [ i ]
>12019	Identifier	i
>12020	Identifier	added_order
>12021	Identifier	image
>12022	Identifier	image
>12023	IdentifierDeclType	int
>12024	IdentifierDeclStatement	 
>12025	IdentifierDecl	start = clock ( )
>12026	AssignmentExpr	start = clock ( )
>12027	CallExpression	clock ( )
>12028	ArgumentList	 
>12029	Callee	clock
>12030	Identifier	clock
>12031	Identifier	start
>12032	Identifier	start
>12033	IdentifierDeclType	clock_t
>12034	IncDecOp	 
>12035	IncDec	++
>12036	Identifier	i
>12037	Condition	 
>12038	RelationalExpression	i < curr_num_cameras
>12039	Identifier	curr_num_cameras
>12040	Identifier	i
>12041	ForInit	 
>12042	IdentifierDeclStatement	int i = 0 ;
>12043	IdentifierDecl	i = 0
>12044	AssignmentExpr	i = 0
>12045	PrimaryExpression	0
>12046	Identifier	i
>12047	Identifier	i
>12048	IdentifierDeclType	int
>12049	ExpressionStatement	 
>12050	AssignmentExpr	pt_count = BundleAdjustAddAllNewPoints ( curr_num_pts , curr_num_cameras , added_order , cameras , points , \
>12051	CallExpression	BundleAdjustAddAllNewPoints ( curr_num_pts , curr_num_cameras , added_order , cameras , points , colors , 0.0 , \
>12052	ArgumentList	curr_num_pts
>12053	Argument	2
>12054	PrimaryExpression	2
>12055	Argument	16.0
>12056	PrimaryExpression	16.0
>12057	Argument	pt_views
>12058	Identifier	pt_views
>12059	Argument	0.0
>12060	PrimaryExpression	0.0
>12061	Argument	colors
>12062	Identifier	colors
>12063	Argument	points
>12064	Identifier	points
>12065	Argument	cameras
>12066	Identifier	cameras
>12067	Argument	added_order
>12068	Identifier	added_order
>12069	Argument	curr_num_cameras
>12070	Identifier	curr_num_cameras
>12071	Argument	curr_num_pts
>12072	Identifier	curr_num_pts
>12073	Callee	BundleAdjustAddAllNewPoints
>12074	Identifier	BundleAdjustAddAllNewPoints
>12075	Identifier	pt_count
>12076	ExpressionStatement	 
>12077	CallExpression	RunSFM ( curr_num_pts , curr_num_cameras , 0 , true , cameras , points , added_order , colors , pt_views , 1.0e-20 )
>12078	ArgumentList	curr_num_pts
>12079	Argument	1.0e-20
>12080	PrimaryExpression	1.0e-20
>12081	Argument	pt_views
>12082	Identifier	pt_views
>12083	Argument	colors
>12084	Identifier	colors
>12085	Argument	added_order
>12086	Identifier	added_order
>12087	Argument	points
>12088	Identifier	points
>12089	Argument	cameras
>12090	Identifier	cameras
>12091	Argument	true
>12092	Identifier	true
>12093	Argument	0
>12094	PrimaryExpression	0
>12095	Argument	curr_num_cameras
>12096	Identifier	curr_num_cameras
>12097	Argument	curr_num_pts
>12098	Identifier	curr_num_pts
>12099	Callee	RunSFM
>12100	Identifier	RunSFM
>12101	IfStatement	if ( m_bundle_output_file != NULL )
>12102	CompoundStatement	 
>12103	IfStatement	if ( m_estimate_distortion )
>12104	CompoundStatement	 
>12105	ExpressionStatement	 
>12106	CallExpression	DumpOutputFile ( m_output_directory , buf , num_images , curr_num_cameras , pt_count , added_order , cameras , points , \
>12107	ArgumentList	m_output_directory
>12108	Argument	true
>12109	Identifier	true
>12110	Argument	pt_views
>12111	Identifier	pt_views
>12112	Argument	colors
>12113	Identifier	colors
>12114	Argument	points
>12115	Identifier	points
>12116	Argument	cameras
>12117	Identifier	cameras
>12118	Argument	added_order
>12119	Identifier	added_order
>12120	Argument	pt_count
>12121	Identifier	pt_count
>12122	Argument	curr_num_cameras
>12123	Identifier	curr_num_cameras
>12124	Argument	num_images
>12125	Identifier	num_images
>12126	Argument	buf
>12127	Identifier	buf
>12128	Argument	m_output_directory
>12129	Identifier	m_output_directory
>12130	Callee	DumpOutputFile
>12131	Identifier	DumpOutputFile
>12132	ExpressionStatement	 
>12133	CallExpression	sprintf ( buf , \"%sadd.rd.out\" , m_bundle_output_base )
>12134	ArgumentList	buf
>12135	Argument	m_bundle_output_base
>12136	Identifier	m_bundle_output_base
>12137	Argument	\"%sadd.rd.out\"
>12138	PrimaryExpression	\"%sadd.rd.out\"
>12139	Argument	buf
>12140	Identifier	buf
>12141	Callee	sprintf
>12142	Identifier	sprintf
>12143	Condition	 
>12144	Identifier	m_estimate_distortion
>12145	ExpressionStatement	 
>12146	CallExpression	DumpOutputFile ( m_output_directory , buf , num_images , curr_num_cameras , pt_count , added_order , cameras , points , \
>12147	ArgumentList	m_output_directory
>12148	Argument	pt_views
>12149	Identifier	pt_views
>12150	Argument	colors
>12151	Identifier	colors
>12152	Argument	points
>12153	Identifier	points
>12154	Argument	cameras
>12155	Identifier	cameras
>12156	Argument	added_order
>12157	Identifier	added_order
>12158	Argument	pt_count
>12159	Identifier	pt_count
>12160	Argument	curr_num_cameras
>12161	Identifier	curr_num_cameras
>12162	Argument	num_images
>12163	Identifier	num_images
>12164	Argument	buf
>12165	Identifier	buf
>12166	Argument	m_output_directory
>12167	Identifier	m_output_directory
>12168	Callee	DumpOutputFile
>12169	Identifier	DumpOutputFile
>12170	ExpressionStatement	 
>12171	CallExpression	sprintf ( buf , \"%sadd.out\" , m_bundle_output_base )
>12172	ArgumentList	buf
>12173	Argument	m_bundle_output_base
>12174	Identifier	m_bundle_output_base
>12175	Argument	\"%sadd.out\"
>12176	PrimaryExpression	\"%sadd.out\"
>12177	Argument	buf
>12178	Identifier	buf
>12179	Callee	sprintf
>12180	Identifier	sprintf
>12181	IdentifierDeclStatement	 
>12182	IdentifierDecl	buf [ 256 ]
>12183	PrimaryExpression	256
>12184	Identifier	buf
>12185	IdentifierDeclType	char [ 256 ]
>12186	Condition	 
>12187	EqualityExpression	m_bundle_output_file != NULL
>12188	Identifier	NULL
>12189	Identifier	m_bundle_output_file
>12190	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>12191	CompoundStatement	 
>12192	IfStatement	if ( m_image_data [ i ] . m_ignore_in_bundle && ! m_image_data [ i ] . m_camera . m_adjusted )
>12193	CompoundStatement	 
>12194	IfStatement	if ( init_success )
>12195	CompoundStatement	 
>12196	ExpressionStatement	 
>12197	IncDecOp	curr_num_cameras ++
>12198	IncDec	++
>12199	Identifier	curr_num_cameras
>12200	ExpressionStatement	 
>12201	AssignmentExpr	cameras [ curr_num_cameras ] = camera
>12202	Identifier	camera
>12203	ArrayIndexing	cameras [ curr_num_cameras ]
>12204	Identifier	curr_num_cameras
>12205	Identifier	cameras
>12206	Condition	 
>12207	Identifier	init_success
>12208	IdentifierDeclStatement	 
>12209	IdentifierDecl	camera = BundleInitializeImage ( m_image_data [ i ] , i , curr_num_cameras , curr_num_cameras , curr_num_pts , added_\
>12210	AssignmentExpr	camera = BundleInitializeImage ( m_image_data [ i ] , i , curr_num_cameras , curr_num_cameras , curr_\
>12211	CallExpression	BundleInitializeImage ( m_image_data [ i ] , i , curr_num_cameras , curr_num_cameras , curr_num_pts , added_order , \
>12212	ArgumentList	m_image_data [ i ]
>12213	Argument	false
>12214	Identifier	false
>12215	Argument	& init_success
>12216	UnaryOp	& init_success
>12217	Identifier	init_success
>12218	UnaryOperator	&
>12219	Argument	pt_views
>12220	Identifier	pt_views
>12221	Argument	cameras
>12222	Identifier	cameras
>12223	Argument	NULL
>12224	Identifier	NULL
>12225	Argument	points
>12226	Identifier	points
>12227	Argument	added_order
>12228	Identifier	added_order
>12229	Argument	curr_num_pts
>12230	Identifier	curr_num_pts
>12231	Argument	curr_num_cameras
>12232	Identifier	curr_num_cameras
>12233	Argument	curr_num_cameras
>12234	Identifier	curr_num_cameras
>12235	Argument	i
>12236	Identifier	i
>12237	Argument	m_image_data [ i ]
>12238	ArrayIndexing	m_image_data [ i ]
>12239	Identifier	i
>12240	Identifier	m_image_data
>12241	Callee	BundleInitializeImage
>12242	Identifier	BundleInitializeImage
>12243	Identifier	camera
>12244	Identifier	camera
>12245	IdentifierDeclType	camera_params_t
>12246	IdentifierDeclStatement	 
>12247	IdentifierDecl	init_success
>12248	Identifier	init_success
>12249	IdentifierDeclType	bool
>12250	ExpressionStatement	 
>12251	AssignmentExpr	added_order [ curr_num_cameras ] = i
>12252	Identifier	i
>12253	ArrayIndexing	added_order [ curr_num_cameras ]
>12254	Identifier	curr_num_cameras
>12255	Identifier	added_order
>12256	ExpressionStatement	 
>12257	CallExpression	printf ( \"[BundleAdjust] Adding camera %d\n\" , i )
>12258	ArgumentList	\"[BundleAdjust] Adding camera %d\n\"
>12259	Argument	i
>12260	Identifier	i
>12261	Argument	\"[BundleAdjust] Adding camera %d\n\"
>12262	PrimaryExpression	\"[BundleAdjust] Adding camera %d\n\"
>12263	Callee	printf
>12264	Identifier	printf
>12265	Condition	 
>12266	AndExpression	m_image_data [ i ] . m_ignore_in_bundle && ! m_image_data [ i ] . m_camera . m_adjusted
>12267	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>12268	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>12269	Identifier	m_adjusted
>12270	MemberAccess	m_image_data [ i ] . m_camera
>12271	Identifier	m_camera
>12272	ArrayIndexing	m_image_data [ i ]
>12273	Identifier	i
>12274	Identifier	m_image_data
>12275	UnaryOperator	!
>12276	MemberAccess	m_image_data [ i ] . m_ignore_in_bundle
>12277	Identifier	m_ignore_in_bundle
>12278	ArrayIndexing	m_image_data [ i ]
>12279	Identifier	i
>12280	Identifier	m_image_data
>12281	IncDecOp	 
>12282	IncDec	++
>12283	Identifier	i
>12284	Condition	 
>12285	RelationalExpression	i < num_images
>12286	Identifier	num_images
>12287	Identifier	i
>12288	ForInit	 
>12289	IdentifierDeclStatement	int i = 0 ;
>12290	IdentifierDecl	i = 0
>12291	AssignmentExpr	i = 0
>12292	PrimaryExpression	0
>12293	Identifier	i
>12294	Identifier	i
>12295	IdentifierDeclType	int
>12296	ExpressionStatement	 
>12297	AssignmentExpr	curr_num_pts = pt_count
>12298	Identifier	pt_count
>12299	Identifier	curr_num_pts
>12300	IdentifierDeclStatement	 
>12301	IdentifierDecl	pt_count = BundleAdjustAddAllNewPoints ( curr_num_pts , curr_num_cameras , added_order , cameras , points , colors , \
>12302	AssignmentExpr	pt_count = BundleAdjustAddAllNewPoints ( curr_num_pts , curr_num_cameras , added_order , cameras , points , \
>12303	CallExpression	BundleAdjustAddAllNewPoints ( curr_num_pts , curr_num_cameras , added_order , cameras , points , colors , 0.0 , \
>12304	ArgumentList	curr_num_pts
>12305	Argument	2
>12306	PrimaryExpression	2
>12307	Argument	16.0
>12308	PrimaryExpression	16.0
>12309	Argument	pt_views
>12310	Identifier	pt_views
>12311	Argument	0.0
>12312	PrimaryExpression	0.0
>12313	Argument	colors
>12314	Identifier	colors
>12315	Argument	points
>12316	Identifier	points
>12317	Argument	cameras
>12318	Identifier	cameras
>12319	Argument	added_order
>12320	Identifier	added_order
>12321	Argument	curr_num_cameras
>12322	Identifier	curr_num_cameras
>12323	Argument	curr_num_pts
>12324	Identifier	curr_num_pts
>12325	Callee	BundleAdjustAddAllNewPoints
>12326	Identifier	BundleAdjustAddAllNewPoints
>12327	Identifier	pt_count
>12328	Identifier	pt_count
>12329	IdentifierDeclType	int
>12330	ExpressionStatement	 
>12331	CallExpression	RunSFM ( curr_num_pts , curr_num_cameras , 0 , true , cameras , points , added_order , colors , pt_views , 1.0e-20 )
>12332	ArgumentList	curr_num_pts
>12333	Argument	1.0e-20
>12334	PrimaryExpression	1.0e-20
>12335	Argument	pt_views
>12336	Identifier	pt_views
>12337	Argument	colors
>12338	Identifier	colors
>12339	Argument	added_order
>12340	Identifier	added_order
>12341	Argument	points
>12342	Identifier	points
>12343	Argument	cameras
>12344	Identifier	cameras
>12345	Argument	true
>12346	Identifier	true
>12347	Argument	0
>12348	PrimaryExpression	0
>12349	Argument	curr_num_cameras
>12350	Identifier	curr_num_cameras
>12351	Argument	curr_num_pts
>12352	Identifier	curr_num_pts
>12353	Callee	RunSFM
>12354	Identifier	RunSFM
>12355	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>12356	CompoundStatement	 
>12357	IfStatement	if ( m_image_data [ i ] . m_ignore_in_bundle )
>12358	CompoundStatement	 
>12359	IfStatement	if ( init_success )
>12360	CompoundStatement	 
>12361	ExpressionStatement	 
>12362	IncDecOp	curr_num_cameras ++
>12363	IncDec	++
>12364	Identifier	curr_num_cameras
>12365	ExpressionStatement	 
>12366	AssignmentExpr	cameras [ curr_num_cameras ] = camera
>12367	Identifier	camera
>12368	ArrayIndexing	cameras [ curr_num_cameras ]
>12369	Identifier	curr_num_cameras
>12370	Identifier	cameras
>12371	Condition	 
>12372	Identifier	init_success
>12373	IdentifierDeclStatement	 
>12374	IdentifierDecl	camera = BundleInitializeImage ( m_image_data [ i ] , i , curr_num_cameras , curr_num_cameras , curr_num_pts , added_\
>12375	AssignmentExpr	camera = BundleInitializeImage ( m_image_data [ i ] , i , curr_num_cameras , curr_num_cameras , curr_\
>12376	CallExpression	BundleInitializeImage ( m_image_data [ i ] , i , curr_num_cameras , curr_num_cameras , curr_num_pts , added_order , \
>12377	ArgumentList	m_image_data [ i ]
>12378	Argument	false
>12379	Identifier	false
>12380	Argument	& init_success
>12381	UnaryOp	& init_success
>12382	Identifier	init_success
>12383	UnaryOperator	&
>12384	Argument	pt_views
>12385	Identifier	pt_views
>12386	Argument	cameras
>12387	Identifier	cameras
>12388	Argument	NULL
>12389	Identifier	NULL
>12390	Argument	points
>12391	Identifier	points
>12392	Argument	added_order
>12393	Identifier	added_order
>12394	Argument	curr_num_pts
>12395	Identifier	curr_num_pts
>12396	Argument	curr_num_cameras
>12397	Identifier	curr_num_cameras
>12398	Argument	curr_num_cameras
>12399	Identifier	curr_num_cameras
>12400	Argument	i
>12401	Identifier	i
>12402	Argument	m_image_data [ i ]
>12403	ArrayIndexing	m_image_data [ i ]
>12404	Identifier	i
>12405	Identifier	m_image_data
>12406	Callee	BundleInitializeImage
>12407	Identifier	BundleInitializeImage
>12408	Identifier	camera
>12409	Identifier	camera
>12410	IdentifierDeclType	camera_params_t
>12411	IdentifierDeclStatement	 
>12412	IdentifierDecl	init_success
>12413	Identifier	init_success
>12414	IdentifierDeclType	bool
>12415	ExpressionStatement	 
>12416	AssignmentExpr	added_order [ curr_num_cameras ] = i
>12417	Identifier	i
>12418	ArrayIndexing	added_order [ curr_num_cameras ]
>12419	Identifier	curr_num_cameras
>12420	Identifier	added_order
>12421	ExpressionStatement	 
>12422	CallExpression	printf ( \"[BundleAdjust] Adding camera %d\n\" , i )
>12423	ArgumentList	\"[BundleAdjust] Adding camera %d\n\"
>12424	Argument	i
>12425	Identifier	i
>12426	Argument	\"[BundleAdjust] Adding camera %d\n\"
>12427	PrimaryExpression	\"[BundleAdjust] Adding camera %d\n\"
>12428	Callee	printf
>12429	Identifier	printf
>12430	Condition	 
>12431	MemberAccess	m_image_data [ i ] . m_ignore_in_bundle
>12432	Identifier	m_ignore_in_bundle
>12433	ArrayIndexing	m_image_data [ i ]
>12434	Identifier	i
>12435	Identifier	m_image_data
>12436	IncDecOp	 
>12437	IncDec	++
>12438	Identifier	i
>12439	Condition	 
>12440	RelationalExpression	i < num_images
>12441	Identifier	num_images
>12442	Identifier	i
>12443	ForInit	 
>12444	IdentifierDeclStatement	int i = 0 ;
>12445	IdentifierDecl	i = 0
>12446	AssignmentExpr	i = 0
>12447	PrimaryExpression	0
>12448	Identifier	i
>12449	Identifier	i
>12450	IdentifierDeclType	int
>12451	IdentifierDeclStatement	 
>12452	IdentifierDecl	num_images = GetNumImages ( )
>12453	AssignmentExpr	num_images = GetNumImages ( )
>12454	CallExpression	GetNumImages ( )
>12455	ArgumentList	 
>12456	Callee	GetNumImages
>12457	Identifier	GetNumImages
>12458	Identifier	num_images
>12459	Identifier	num_images
>12460	IdentifierDeclType	int
>12537	FunctionDef	BundlerApp 
>12538	ParameterList	 
>12539	ReturnType	void
>12540	CompoundStatement	 
>12541	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>12542	CompoundStatement	 
>12543	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>12544	ElseStatement	else
>12545	ExpressionStatement	 
>12546	AssignmentExpr	image_mask [ i ] = false
>12547	Identifier	false
>12548	ArrayIndexing	image_mask [ i ]
>12549	Identifier	i
>12550	Identifier	image_mask
>12551	ExpressionStatement	 
>12552	AssignmentExpr	image_mask [ i ] = true
>12553	Identifier	true
>12554	ArrayIndexing	image_mask [ i ]
>12555	Identifier	i
>12556	Identifier	image_mask
>12557	Condition	 
>12558	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>12559	Identifier	m_adjusted
>12560	MemberAccess	m_image_data [ i ] . m_camera
>12561	Identifier	m_camera
>12562	ArrayIndexing	m_image_data [ i ]
>12563	Identifier	i
>12564	Identifier	m_image_data
>12565	IncDecOp	 
>12566	IncDec	++
>12567	Identifier	i
>12568	Condition	 
>12569	RelationalExpression	i < num_images
>12570	Identifier	num_images
>12571	Identifier	i
>12572	ForInit	 
>12573	IdentifierDeclStatement	int i = 0 ;
>12574	IdentifierDecl	i = 0
>12575	AssignmentExpr	i = 0
>12576	PrimaryExpression	0
>12577	Identifier	i
>12578	Identifier	i
>12579	IdentifierDeclType	int
>12580	IdentifierDeclStatement	 
>12581	IdentifierDecl	* image_mask = new bool [ num_images ]
>12582	AssignmentExpr	* image_mask = new bool [ num_images ]
>12583	Identifier	num_images
>12584	Identifier	num_images
>12585	Identifier	image_mask
>12586	IdentifierDeclType	bool *
>12587	ExpressionStatement	 
>12588	CallExpression	SetMatchesFromPoints ( )
>12589	ArgumentList	 
>12590	Callee	SetMatchesFromPoints
>12591	Identifier	SetMatchesFromPoints
>12592	ExpressionStatement	 
>12593	Identifier	added_order_inv
>12594	Statement	 
>12595	Statement	 
>12596	Statement	 
>12597	ExpressionStatement	 
>12598	Identifier	added_order
>12599	Statement	 
>12600	Statement	 
>12601	Statement	 
>12602	ForStatement	for ( int i = 0 ; i < curr_num_pts ; i ++ )
>12603	CompoundStatement	 
>12604	ExpressionStatement	 
>12605	CallExpression	m_point_data . push_back ( pdata )
>12606	ArgumentList	pdata
>12607	Argument	pdata
>12608	Identifier	pdata
>12609	Callee	m_point_data . push_back
>12610	MemberAccess	m_point_data . push_back
>12611	Identifier	push_back
>12612	Identifier	m_point_data
>12613	ForStatement	for ( int j = 0 ; j < ( int ) pt_views [ i ] . size ( ) ; j ++ )
>12614	CompoundStatement	 
>12615	ExpressionStatement	 
>12616	CallExpression	pdata . m_views . push_back ( ImageKey ( vnew , pt_views [ i ] [ j ] . second ) )
>12617	ArgumentList	ImageKey ( vnew , pt_views [ i ] [ j ] . second )
>12618	Argument	ImageKey ( vnew , pt_views [ i ] [ j ] . second )
>12619	CallExpression	ImageKey ( vnew , pt_views [ i ] [ j ] . second )
>12620	ArgumentList	vnew
>12621	Argument	pt_views [ i ] [ j ] . second
>12622	MemberAccess	pt_views [ i ] [ j ] . second
>12623	Identifier	second
>12624	ArrayIndexing	pt_views [ i ] [ j ]
>12625	Identifier	j
>12626	ArrayIndexing	pt_views [ i ]
>12627	Identifier	i
>12628	Identifier	pt_views
>12629	Argument	vnew
>12630	Identifier	vnew
>12631	Callee	ImageKey
>12632	Identifier	ImageKey
>12633	Callee	pdata . m_views . push_back
>12634	MemberAccess	pdata . m_views . push_back
>12635	Identifier	push_back
>12636	MemberAccess	pdata . m_views
>12637	Identifier	m_views
>12638	Identifier	pdata
>12639	IdentifierDeclStatement	 
>12640	IdentifierDecl	vnew = added_order [ v ]
>12641	AssignmentExpr	vnew = added_order [ v ]
>12642	ArrayIndexing	added_order [ v ]
>12643	Identifier	v
>12644	Identifier	added_order
>12645	Identifier	vnew
>12646	Identifier	vnew
>12647	IdentifierDeclType	int
>12648	IdentifierDeclStatement	 
>12649	IdentifierDecl	v = pt_views [ i ] [ j ] . first
>12650	AssignmentExpr	v = pt_views [ i ] [ j ] . first
>12651	MemberAccess	pt_views [ i ] [ j ] . first
>12652	Identifier	first
>12653	ArrayIndexing	pt_views [ i ] [ j ]
>12654	Identifier	j
>12655	ArrayIndexing	pt_views [ i ]
>12656	Identifier	i
>12657	Identifier	pt_views
>12658	Identifier	v
>12659	Identifier	v
>12660	IdentifierDeclType	int
>12661	IncDecOp	 
>12662	IncDec	++
>12663	Identifier	j
>12664	Condition	 
>12665	RelationalExpression	j < ( int ) pt_views [ i ] . size ( )
>12666	CastExpression	( int ) pt_views [ i ] . size ( )
>12667	CallExpression	pt_views [ i ] . size ( )
>12668	ArgumentList	 
>12669	Callee	pt_views [ i ] . size
>12670	MemberAccess	pt_views [ i ] . size
>12671	Identifier	size
>12672	ArrayIndexing	pt_views [ i ]
>12673	Identifier	i
>12674	Identifier	pt_views
>12675	CastTarget	int
>12676	Identifier	j
>12677	ForInit	 
>12678	IdentifierDeclStatement	int j = 0 ;
>12679	IdentifierDecl	j = 0
>12680	AssignmentExpr	j = 0
>12681	PrimaryExpression	0
>12682	Identifier	j
>12683	Identifier	j
>12684	IdentifierDeclType	int
>12685	ExpressionStatement	 
>12686	AssignmentExpr	pdata . m_color [ 2 ] = ( float ) Vz ( colors [ i ] )
>12687	CastExpression	( float ) Vz ( colors [ i ] )
>12688	CallExpression	Vz ( colors [ i ] )
>12689	ArgumentList	colors [ i ]
>12690	Argument	colors [ i ]
>12691	ArrayIndexing	colors [ i ]
>12692	Identifier	i
>12693	Identifier	colors
>12694	Callee	Vz
>12695	Identifier	Vz
>12696	CastTarget	float
>12697	ArrayIndexing	pdata . m_color [ 2 ]
>12698	PrimaryExpression	2
>12699	MemberAccess	pdata . m_color
>12700	Identifier	m_color
>12701	Identifier	pdata
>12702	ExpressionStatement	 
>12703	AssignmentExpr	pdata . m_color [ 1 ] = ( float ) Vy ( colors [ i ] )
>12704	CastExpression	( float ) Vy ( colors [ i ] )
>12705	CallExpression	Vy ( colors [ i ] )
>12706	ArgumentList	colors [ i ]
>12707	Argument	colors [ i ]
>12708	ArrayIndexing	colors [ i ]
>12709	Identifier	i
>12710	Identifier	colors
>12711	Callee	Vy
>12712	Identifier	Vy
>12713	CastTarget	float
>12714	ArrayIndexing	pdata . m_color [ 1 ]
>12715	PrimaryExpression	1
>12716	MemberAccess	pdata . m_color
>12717	Identifier	m_color
>12718	Identifier	pdata
>12719	ExpressionStatement	 
>12720	AssignmentExpr	pdata . m_color [ 0 ] = ( float ) Vx ( colors [ i ] )
>12721	CastExpression	( float ) Vx ( colors [ i ] )
>12722	CallExpression	Vx ( colors [ i ] )
>12723	ArgumentList	colors [ i ]
>12724	Argument	colors [ i ]
>12725	ArrayIndexing	colors [ i ]
>12726	Identifier	i
>12727	Identifier	colors
>12728	Callee	Vx
>12729	Identifier	Vx
>12730	CastTarget	float
>12731	ArrayIndexing	pdata . m_color [ 0 ]
>12732	PrimaryExpression	0
>12733	MemberAccess	pdata . m_color
>12734	Identifier	m_color
>12735	Identifier	pdata
>12736	ExpressionStatement	 
>12737	AssignmentExpr	pdata . m_pos [ 2 ] = Vz ( points [ i ] )
>12738	CallExpression	Vz ( points [ i ] )
>12739	ArgumentList	points [ i ]
>12740	Argument	points [ i ]
>12741	ArrayIndexing	points [ i ]
>12742	Identifier	i
>12743	Identifier	points
>12744	Callee	Vz
>12745	Identifier	Vz
>12746	ArrayIndexing	pdata . m_pos [ 2 ]
>12747	PrimaryExpression	2
>12748	MemberAccess	pdata . m_pos
>12749	Identifier	m_pos
>12750	Identifier	pdata
>12751	ExpressionStatement	 
>12752	AssignmentExpr	pdata . m_pos [ 1 ] = Vy ( points [ i ] )
>12753	CallExpression	Vy ( points [ i ] )
>12754	ArgumentList	points [ i ]
>12755	Argument	points [ i ]
>12756	ArrayIndexing	points [ i ]
>12757	Identifier	i
>12758	Identifier	points
>12759	Callee	Vy
>12760	Identifier	Vy
>12761	ArrayIndexing	pdata . m_pos [ 1 ]
>12762	PrimaryExpression	1
>12763	MemberAccess	pdata . m_pos
>12764	Identifier	m_pos
>12765	Identifier	pdata
>12766	ExpressionStatement	 
>12767	AssignmentExpr	pdata . m_pos [ 0 ] = Vx ( points [ i ] )
>12768	CallExpression	Vx ( points [ i ] )
>12769	ArgumentList	points [ i ]
>12770	Argument	points [ i ]
>12771	ArrayIndexing	points [ i ]
>12772	Identifier	i
>12773	Identifier	points
>12774	Callee	Vx
>12775	Identifier	Vx
>12776	ArrayIndexing	pdata . m_pos [ 0 ]
>12777	PrimaryExpression	0
>12778	MemberAccess	pdata . m_pos
>12779	Identifier	m_pos
>12780	Identifier	pdata
>12781	IdentifierDeclStatement	 
>12782	IdentifierDecl	pdata
>12783	Identifier	pdata
>12784	IdentifierDeclType	PointData
>12785	IfStatement	if ( ( int ) pt_views [ i ] . size ( ) == 0 )
>12786	ContinueStatement	 
>12787	Condition	 
>12788	EqualityExpression	( int ) pt_views [ i ] . size ( ) == 0
>12789	PrimaryExpression	0
>12790	CastExpression	( int ) pt_views [ i ] . size ( )
>12791	CallExpression	pt_views [ i ] . size ( )
>12792	ArgumentList	 
>12793	Callee	pt_views [ i ] . size
>12794	MemberAccess	pt_views [ i ] . size
>12795	Identifier	size
>12796	ArrayIndexing	pt_views [ i ]
>12797	Identifier	i
>12798	Identifier	pt_views
>12799	CastTarget	int
>12800	IncDecOp	 
>12801	IncDec	++
>12802	Identifier	i
>12803	Condition	 
>12804	RelationalExpression	i < curr_num_pts
>12805	Identifier	curr_num_pts
>12806	Identifier	i
>12807	ForInit	 
>12808	IdentifierDeclStatement	int i = 0 ;
>12809	IdentifierDecl	i = 0
>12810	AssignmentExpr	i = 0
>12811	PrimaryExpression	0
>12812	Identifier	i
>12813	Identifier	i
>12814	IdentifierDeclType	int
>12815	ForStatement	for ( int i = 0 ; i < curr_num_cameras ; i ++ )
>12816	CompoundStatement	 
>12817	ExpressionStatement	 
>12818	CallExpression	m_image_data [ img ] . m_camera . Finalize ( )
>12819	ArgumentList	 
>12820	Callee	m_image_data [ img ] . m_camera . Finalize
>12821	MemberAccess	m_image_data [ img ] . m_camera . Finalize
>12822	Identifier	Finalize
>12823	MemberAccess	m_image_data [ img ] . m_camera
>12824	Identifier	m_camera
>12825	ArrayIndexing	m_image_data [ img ]
>12826	Identifier	img
>12827	Identifier	m_image_data
>12828	ExpressionStatement	 
>12829	AssignmentExpr	m_image_data [ img ] . m_camera . m_focal = cameras [ i ] . f
>12830	MemberAccess	cameras [ i ] . f
>12831	Identifier	f
>12832	ArrayIndexing	cameras [ i ]
>12833	Identifier	i
>12834	Identifier	cameras
>12835	MemberAccess	m_image_data [ img ] . m_camera . m_focal
>12836	Identifier	m_focal
>12837	MemberAccess	m_image_data [ img ] . m_camera
>12838	Identifier	m_camera
>12839	ArrayIndexing	m_image_data [ img ]
>12840	Identifier	img
>12841	Identifier	m_image_data
>12842	ExpressionStatement	 
>12843	CallExpression	matrix_scale ( 3 , 1 , m_image_data [ img ] . m_camera . m_t , - 1.0 , m_image_data [ img ] . m_camera . m_t )
>12844	ArgumentList	3
>12845	Argument	m_image_data [ img ] . m_camera . m_t
>12846	MemberAccess	m_image_data [ img ] . m_camera . m_t
>12847	Identifier	m_t
>12848	MemberAccess	m_image_data [ img ] . m_camera
>12849	Identifier	m_camera
>12850	ArrayIndexing	m_image_data [ img ]
>12851	Identifier	img
>12852	Identifier	m_image_data
>12853	Argument	- 1.0
>12854	UnaryOp	- 1.0
>12855	PrimaryExpression	1.0
>12856	UnaryOperator	-
>12857	Argument	m_image_data [ img ] . m_camera . m_t
>12858	MemberAccess	m_image_data [ img ] . m_camera . m_t
>12859	Identifier	m_t
>12860	MemberAccess	m_image_data [ img ] . m_camera
>12861	Identifier	m_camera
>12862	ArrayIndexing	m_image_data [ img ]
>12863	Identifier	img
>12864	Identifier	m_image_data
>12865	Argument	1
>12866	PrimaryExpression	1
>12867	Argument	3
>12868	PrimaryExpression	3
>12869	Callee	matrix_scale
>12870	Identifier	matrix_scale
>12871	ExpressionStatement	 
>12872	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cameras [ i ] . R , cameras [ i ] . t , m_image_data [ img ] . m_camera . m_t )
>12873	ArgumentList	3
>12874	Argument	m_image_data [ img ] . m_camera . m_t
>12875	MemberAccess	m_image_data [ img ] . m_camera . m_t
>12876	Identifier	m_t
>12877	MemberAccess	m_image_data [ img ] . m_camera
>12878	Identifier	m_camera
>12879	ArrayIndexing	m_image_data [ img ]
>12880	Identifier	img
>12881	Identifier	m_image_data
>12882	Argument	cameras [ i ] . t
>12883	MemberAccess	cameras [ i ] . t
>12884	Identifier	t
>12885	ArrayIndexing	cameras [ i ]
>12886	Identifier	i
>12887	Identifier	cameras
>12888	Argument	cameras [ i ] . R
>12889	MemberAccess	cameras [ i ] . R
>12890	Identifier	R
>12891	ArrayIndexing	cameras [ i ]
>12892	Identifier	i
>12893	Identifier	cameras
>12894	Argument	1
>12895	PrimaryExpression	1
>12896	Argument	3
>12897	PrimaryExpression	3
>12898	Argument	3
>12899	PrimaryExpression	3
>12900	Argument	3
>12901	PrimaryExpression	3
>12902	Callee	matrix_product
>12903	Identifier	matrix_product
>12904	ExpressionStatement	 
>12905	CallExpression	memcpy ( m_image_data [ img ] . m_camera . m_R , cameras [ i ] . R , 9 * sizeof ( double ) )
>12906	ArgumentList	m_image_data [ img ] . m_camera . m_R
>12907	Argument	9 * sizeof ( double )
>12908	MultiplicativeExpression	9 * sizeof ( double )
>12909	SizeofExpr	sizeof ( double )
>12910	SizeofOperand	double
>12911	Sizeof	sizeof
>12912	PrimaryExpression	9
>12913	Argument	cameras [ i ] . R
>12914	MemberAccess	cameras [ i ] . R
>12915	Identifier	R
>12916	ArrayIndexing	cameras [ i ]
>12917	Identifier	i
>12918	Identifier	cameras
>12919	Argument	m_image_data [ img ] . m_camera . m_R
>12920	MemberAccess	m_image_data [ img ] . m_camera . m_R
>12921	Identifier	m_R
>12922	MemberAccess	m_image_data [ img ] . m_camera
>12923	Identifier	m_camera
>12924	ArrayIndexing	m_image_data [ img ]
>12925	Identifier	img
>12926	Identifier	m_image_data
>12927	Callee	memcpy
>12928	Identifier	memcpy
>12929	ExpressionStatement	 
>12930	AssignmentExpr	m_image_data [ img ] . m_camera . m_adjusted = true
>12931	Identifier	true
>12932	MemberAccess	m_image_data [ img ] . m_camera . m_adjusted
>12933	Identifier	m_adjusted
>12934	MemberAccess	m_image_data [ img ] . m_camera
>12935	Identifier	m_camera
>12936	ArrayIndexing	m_image_data [ img ]
>12937	Identifier	img
>12938	Identifier	m_image_data
>12939	IdentifierDeclStatement	 
>12940	IdentifierDecl	img = added_order [ i ]
>12941	AssignmentExpr	img = added_order [ i ]
>12942	ArrayIndexing	added_order [ i ]
>12943	Identifier	i
>12944	Identifier	added_order
>12945	Identifier	img
>12946	Identifier	img
>12947	IdentifierDeclType	int
>12948	IncDecOp	 
>12949	IncDec	++
>12950	Identifier	i
>12951	Condition	 
>12952	RelationalExpression	i < curr_num_cameras
>12953	Identifier	curr_num_cameras
>12954	Identifier	i
>12955	ForInit	 
>12956	IdentifierDeclStatement	int i = 0 ;
>12957	IdentifierDecl	i = 0
>12958	AssignmentExpr	i = 0
>12959	PrimaryExpression	0
>12960	Identifier	i
>12961	Identifier	i
>12962	IdentifierDeclType	int
>12963	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>12964	CompoundStatement	 
>12965	ExpressionStatement	 
>12966	AssignmentExpr	m_image_data [ i ] . m_camera . m_adjusted = false
>12967	Identifier	false
>12968	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>12969	Identifier	m_adjusted
>12970	MemberAccess	m_image_data [ i ] . m_camera
>12971	Identifier	m_camera
>12972	ArrayIndexing	m_image_data [ i ]
>12973	Identifier	i
>12974	Identifier	m_image_data
>12975	IncDecOp	 
>12976	IncDec	++
>12977	Identifier	i
>12978	Condition	 
>12979	RelationalExpression	i < num_images
>12980	Identifier	num_images
>12981	Identifier	i
>12982	ForInit	 
>12983	IdentifierDeclStatement	int i = 0 ;
>12984	IdentifierDecl	i = 0
>12985	AssignmentExpr	i = 0
>12986	PrimaryExpression	0
>12987	Identifier	i
>12988	Identifier	i
>12989	IdentifierDeclType	int
>12990	IfStatement	if ( m_bundle_output_file != NULL )
>12991	CompoundStatement	 
>12992	IfStatement	if ( m_estimate_distortion )
>12993	CompoundStatement	 
>12994	ExpressionStatement	 
>12995	CallExpression	DumpOutputFile ( m_output_directory , buf , num_images , curr_num_cameras , curr_num_pts , added_order , cameras , \
>12996	ArgumentList	m_output_directory
>12997	Argument	true
>12998	Identifier	true
>12999	Argument	pt_views
>13000	Identifier	pt_views
>13001	Argument	colors
>13002	Identifier	colors
>13003	Argument	points
>13004	Identifier	points
>13005	Argument	cameras
>13006	Identifier	cameras
>13007	Argument	added_order
>13008	Identifier	added_order
>13009	Argument	curr_num_pts
>13010	Identifier	curr_num_pts
>13011	Argument	curr_num_cameras
>13012	Identifier	curr_num_cameras
>13013	Argument	num_images
>13014	Identifier	num_images
>13015	Argument	buf
>13016	Identifier	buf
>13017	Argument	m_output_directory
>13018	Identifier	m_output_directory
>13019	Callee	DumpOutputFile
>13020	Identifier	DumpOutputFile
>13021	ExpressionStatement	 
>13022	CallExpression	sprintf ( buf , \"%s.rd.out\" , m_bundle_output_file )
>13023	ArgumentList	buf
>13024	Argument	m_bundle_output_file
>13025	Identifier	m_bundle_output_file
>13026	Argument	\"%s.rd.out\"
>13027	PrimaryExpression	\"%s.rd.out\"
>13028	Argument	buf
>13029	Identifier	buf
>13030	Callee	sprintf
>13031	Identifier	sprintf
>13032	IdentifierDeclStatement	 
>13033	IdentifierDecl	buf [ 256 ]
>13034	PrimaryExpression	256
>13035	Identifier	buf
>13036	IdentifierDeclType	char [ 256 ]
>13037	Condition	 
>13038	Identifier	m_estimate_distortion
>13039	ExpressionStatement	 
>13040	CallExpression	DumpOutputFile ( m_output_directory , m_bundle_output_file , num_images , curr_num_cameras , curr_num_pts , added_\
>13041	ArgumentList	m_output_directory
>13042	Argument	pt_views
>13043	Identifier	pt_views
>13044	Argument	colors
>13045	Identifier	colors
>13046	Argument	points
>13047	Identifier	points
>13048	Argument	cameras
>13049	Identifier	cameras
>13050	Argument	added_order
>13051	Identifier	added_order
>13052	Argument	curr_num_pts
>13053	Identifier	curr_num_pts
>13054	Argument	curr_num_cameras
>13055	Identifier	curr_num_cameras
>13056	Argument	num_images
>13057	Identifier	num_images
>13058	Argument	m_bundle_output_file
>13059	Identifier	m_bundle_output_file
>13060	Argument	m_output_directory
>13061	Identifier	m_output_directory
>13062	Callee	DumpOutputFile
>13063	Identifier	DumpOutputFile
>13064	Condition	 
>13065	EqualityExpression	m_bundle_output_file != NULL
>13066	Identifier	NULL
>13067	Identifier	m_bundle_output_file
>13068	IfStatement	if ( m_estimate_ignored )
>13069	CompoundStatement	 
>13070	ExpressionStatement	 
>13071	CallExpression	EstimateIgnoredCameras ( curr_num_cameras , cameras , added_order , curr_num_pts , points , colors , pt_views )
>13072	ArgumentList	curr_num_cameras
>13073	Argument	pt_views
>13074	Identifier	pt_views
>13075	Argument	colors
>13076	Identifier	colors
>13077	Argument	points
>13078	Identifier	points
>13079	Argument	curr_num_pts
>13080	Identifier	curr_num_pts
>13081	Argument	added_order
>13082	Identifier	added_order
>13083	Argument	cameras
>13084	Identifier	cameras
>13085	Argument	curr_num_cameras
>13086	Identifier	curr_num_cameras
>13087	Callee	EstimateIgnoredCameras
>13088	Identifier	EstimateIgnoredCameras
>13089	Condition	 
>13090	Identifier	m_estimate_ignored
>13091	ExpressionStatement	 
>13092	CallExpression	printf ( \"[BundleAdjust] Bundle adjustment took %0.3fs\n\" , ( end - start ) / ( ( double ) CLOCKS_PER_SEC ) )
>13093	ArgumentList	\"[BundleAdjust] Bundle adjustment took %0.3fs\n\"
>13094	Argument	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>13095	MultiplicativeExpression	( end - start ) / ( ( double ) CLOCKS_PER_SEC )
>13096	CastExpression	( double ) CLOCKS_PER_SEC
>13097	Identifier	CLOCKS_PER_SEC
>13098	CastTarget	double
>13099	AdditiveExpression	end - start
>13100	Identifier	start
>13101	Identifier	end
>13102	Argument	\"[BundleAdjust] Bundle adjustment took %0.3fs\n\"
>13103	PrimaryExpression	\"[BundleAdjust] Bundle adjustment took %0.3fs\n\"
>13104	Callee	printf
>13105	Identifier	printf
>13106	IdentifierDeclStatement	 
>13107	IdentifierDecl	end = clock ( )
>13108	AssignmentExpr	end = clock ( )
>13109	CallExpression	clock ( )
>13110	ArgumentList	 
>13111	Callee	clock
>13112	Identifier	clock
>13113	Identifier	end
>13114	Identifier	end
>13115	IdentifierDeclType	clock_t
>13116	ForStatement	for ( int round = curr_num_cameras ; round < num_images ; round ++ , curr_num_cameras ++ )
>13117	CompoundStatement	 
>13118	IfStatement	if ( m_bundle_output_base != NULL )
>13119	CompoundStatement	 
>13120	IfStatement	if ( m_estimate_distortion )
>13121	CompoundStatement	 
>13122	ExpressionStatement	 
>13123	CallExpression	DumpOutputFile ( m_output_directory , buf , num_images , curr_num_cameras + 1 , curr_num_pts , added_order , cameras , \
>13124	ArgumentList	m_output_directory
>13125	Argument	true
>13126	Identifier	true
>13127	Argument	pt_views
>13128	Identifier	pt_views
>13129	Argument	colors
>13130	Identifier	colors
>13131	Argument	points
>13132	Identifier	points
>13133	Argument	cameras
>13134	Identifier	cameras
>13135	Argument	added_order
>13136	Identifier	added_order
>13137	Argument	curr_num_pts
>13138	Identifier	curr_num_pts
>13139	Argument	curr_num_cameras + 1
>13140	AdditiveExpression	curr_num_cameras + 1
>13141	PrimaryExpression	1
>13142	Identifier	curr_num_cameras
>13143	Argument	num_images
>13144	Identifier	num_images
>13145	Argument	buf
>13146	Identifier	buf
>13147	Argument	m_output_directory
>13148	Identifier	m_output_directory
>13149	Callee	DumpOutputFile
>13150	Identifier	DumpOutputFile
>13151	ExpressionStatement	 
>13152	CallExpression	sprintf ( buf , \"%s%03d.rd.out\" , m_bundle_output_base , round )
>13153	ArgumentList	buf
>13154	Argument	round
>13155	Identifier	round
>13156	Argument	m_bundle_output_base
>13157	Identifier	m_bundle_output_base
>13158	Argument	\"%s%03d.rd.out\"
>13159	PrimaryExpression	\"%s%03d.rd.out\"
>13160	Argument	buf
>13161	Identifier	buf
>13162	Callee	sprintf
>13163	Identifier	sprintf
>13164	Condition	 
>13165	Identifier	m_estimate_distortion
>13166	ExpressionStatement	 
>13167	CallExpression	DumpOutputFile ( m_output_directory , buf , num_images , curr_num_cameras + 1 , curr_num_pts , added_order , cameras , \
>13168	ArgumentList	m_output_directory
>13169	Argument	pt_views
>13170	Identifier	pt_views
>13171	Argument	colors
>13172	Identifier	colors
>13173	Argument	points
>13174	Identifier	points
>13175	Argument	cameras
>13176	Identifier	cameras
>13177	Argument	added_order
>13178	Identifier	added_order
>13179	Argument	curr_num_pts
>13180	Identifier	curr_num_pts
>13181	Argument	curr_num_cameras + 1
>13182	AdditiveExpression	curr_num_cameras + 1
>13183	PrimaryExpression	1
>13184	Identifier	curr_num_cameras
>13185	Argument	num_images
>13186	Identifier	num_images
>13187	Argument	buf
>13188	Identifier	buf
>13189	Argument	m_output_directory
>13190	Identifier	m_output_directory
>13191	Callee	DumpOutputFile
>13192	Identifier	DumpOutputFile
>13193	ExpressionStatement	 
>13194	CallExpression	sprintf ( buf , \"%s%03d.out\" , m_bundle_output_base , round )
>13195	ArgumentList	buf
>13196	Argument	round
>13197	Identifier	round
>13198	Argument	m_bundle_output_base
>13199	Identifier	m_bundle_output_base
>13200	Argument	\"%s%03d.out\"
>13201	PrimaryExpression	\"%s%03d.out\"
>13202	Argument	buf
>13203	Identifier	buf
>13204	Callee	sprintf
>13205	Identifier	sprintf
>13206	Condition	 
>13207	EqualityExpression	m_bundle_output_base != NULL
>13208	Identifier	NULL
>13209	Identifier	m_bundle_output_base
>13210	ExpressionStatement	 
>13211	CallExpression	DumpPointsToPly ( m_output_directory , buf , curr_num_pts , round + 1 , points , colors , cameras )
>13212	ArgumentList	m_output_directory
>13213	Argument	cameras
>13214	Identifier	cameras
>13215	Argument	colors
>13216	Identifier	colors
>13217	Argument	points
>13218	Identifier	points
>13219	Argument	round + 1
>13220	AdditiveExpression	round + 1
>13221	PrimaryExpression	1
>13222	Identifier	round
>13223	Argument	curr_num_pts
>13224	Identifier	curr_num_pts
>13225	Argument	buf
>13226	Identifier	buf
>13227	Argument	m_output_directory
>13228	Identifier	m_output_directory
>13229	Callee	DumpPointsToPly
>13230	Identifier	DumpPointsToPly
>13231	ExpressionStatement	 
>13232	CallExpression	sprintf ( buf , \"points%03d.ply\" , round )
>13233	ArgumentList	buf
>13234	Argument	round
>13235	Identifier	round
>13236	Argument	\"points%03d.ply\"
>13237	PrimaryExpression	\"points%03d.ply\"
>13238	Argument	buf
>13239	Identifier	buf
>13240	Callee	sprintf
>13241	Identifier	sprintf
>13242	IdentifierDeclStatement	 
>13243	IdentifierDecl	buf [ 256 ]
>13244	PrimaryExpression	256
>13245	Identifier	buf
>13246	IdentifierDeclType	char [ 256 ]
>13247	ForStatement	for ( int i = 0 ; i <= round ; i ++ )
>13248	CompoundStatement	 
>13249	IfStatement	if ( m_image_data [ added_order [ i ] ] . m_has_init_focal )
>13250	ElseStatement	else
>13251	CompoundStatement	 
>13252	ExpressionStatement	 
>13253	CallExpression	printf ( \"   [%03d] %0.3f %s %d; %0.3e %0.3e\n\" , i , cameras [ i ] . f , m_image_data [ added_order [ i ] ] . m_\
>13254	ArgumentList	\"   [%03d] %0.3f %s %d; %0.3e %0.3e\n\"
>13255	Argument	cameras [ i ] . k [ 1 ]
>13256	ArrayIndexing	cameras [ i ] . k [ 1 ]
>13257	PrimaryExpression	1
>13258	MemberAccess	cameras [ i ] . k
>13259	Identifier	k
>13260	ArrayIndexing	cameras [ i ]
>13261	Identifier	i
>13262	Identifier	cameras
>13263	Argument	cameras [ i ] . k [ 0 ]
>13264	ArrayIndexing	cameras [ i ] . k [ 0 ]
>13265	PrimaryExpression	0
>13266	MemberAccess	cameras [ i ] . k
>13267	Identifier	k
>13268	ArrayIndexing	cameras [ i ]
>13269	Identifier	i
>13270	Identifier	cameras
>13271	Argument	added_order [ i ]
>13272	ArrayIndexing	added_order [ i ]
>13273	Identifier	i
>13274	Identifier	added_order
>13275	Argument	m_image_data [ added_order [ i ] ] . m_name
>13276	MemberAccess	m_image_data [ added_order [ i ] ] . m_name
>13277	Identifier	m_name
>13278	ArrayIndexing	m_image_data [ added_order [ i ] ]
>13279	ArrayIndexing	added_order [ i ]
>13280	Identifier	i
>13281	Identifier	added_order
>13282	Identifier	m_image_data
>13283	Argument	cameras [ i ] . f
>13284	MemberAccess	cameras [ i ] . f
>13285	Identifier	f
>13286	ArrayIndexing	cameras [ i ]
>13287	Identifier	i
>13288	Identifier	cameras
>13289	Argument	i
>13290	Identifier	i
>13291	Argument	\"   [%03d] %0.3f %s %d; %0.3e %0.3e\n\"
>13292	PrimaryExpression	\"   [%03d] %0.3f %s %d; %0.3e %0.3e\n\"
>13293	Callee	printf
>13294	Identifier	printf
>13295	CompoundStatement	 
>13296	ExpressionStatement	 
>13297	CallExpression	printf ( \"   [%03d] %0.3f (%0.3f) %s %d; %0.3e, %0.3e\n\" , i , cameras [ i ] . f , m_image_data [ added_order [ \
>13298	ArgumentList	\"   [%03d] %0.3f (%0.3f) %s %d; %0.3e, %0.3e\n\"
>13299	Argument	cameras [ i ] . k [ 1 ]
>13300	ArrayIndexing	cameras [ i ] . k [ 1 ]
>13301	PrimaryExpression	1
>13302	MemberAccess	cameras [ i ] . k
>13303	Identifier	k
>13304	ArrayIndexing	cameras [ i ]
>13305	Identifier	i
>13306	Identifier	cameras
>13307	Argument	cameras [ i ] . k [ 0 ]
>13308	ArrayIndexing	cameras [ i ] . k [ 0 ]
>13309	PrimaryExpression	0
>13310	MemberAccess	cameras [ i ] . k
>13311	Identifier	k
>13312	ArrayIndexing	cameras [ i ]
>13313	Identifier	i
>13314	Identifier	cameras
>13315	Argument	added_order [ i ]
>13316	ArrayIndexing	added_order [ i ]
>13317	Identifier	i
>13318	Identifier	added_order
>13319	Argument	m_image_data [ added_order [ i ] ] . m_name
>13320	MemberAccess	m_image_data [ added_order [ i ] ] . m_name
>13321	Identifier	m_name
>13322	ArrayIndexing	m_image_data [ added_order [ i ] ]
>13323	ArrayIndexing	added_order [ i ]
>13324	Identifier	i
>13325	Identifier	added_order
>13326	Identifier	m_image_data
>13327	Argument	m_image_data [ added_order [ i ] ] . m_init_focal
>13328	MemberAccess	m_image_data [ added_order [ i ] ] . m_init_focal
>13329	Identifier	m_init_focal
>13330	ArrayIndexing	m_image_data [ added_order [ i ] ]
>13331	ArrayIndexing	added_order [ i ]
>13332	Identifier	i
>13333	Identifier	added_order
>13334	Identifier	m_image_data
>13335	Argument	cameras [ i ] . f
>13336	MemberAccess	cameras [ i ] . f
>13337	Identifier	f
>13338	ArrayIndexing	cameras [ i ]
>13339	Identifier	i
>13340	Identifier	cameras
>13341	Argument	i
>13342	Identifier	i
>13343	Argument	\"   [%03d] %0.3f (%0.3f) %s %d; %0.3e, %0.3e\n\"
>13344	PrimaryExpression	\"   [%03d] %0.3f (%0.3f) %s %d; %0.3e, %0.3e\n\"
>13345	Callee	printf
>13346	Identifier	printf
>13347	Condition	 
>13348	MemberAccess	m_image_data [ added_order [ i ] ] . m_has_init_focal
>13349	Identifier	m_has_init_focal
>13350	ArrayIndexing	m_image_data [ added_order [ i ] ]
>13351	ArrayIndexing	added_order [ i ]
>13352	Identifier	i
>13353	Identifier	added_order
>13354	Identifier	m_image_data
>13355	IncDecOp	 
>13356	IncDec	++
>13357	Identifier	i
>13358	Condition	 
>13359	RelationalExpression	i <= round
>13360	Identifier	round
>13361	Identifier	i
>13362	ForInit	 
>13363	IdentifierDeclStatement	int i = 0 ;
>13364	IdentifierDecl	i = 0
>13365	AssignmentExpr	i = 0
>13366	PrimaryExpression	0
>13367	Identifier	i
>13368	Identifier	i
>13369	IdentifierDeclType	int
>13370	ExpressionStatement	 
>13371	CallExpression	printf ( \"  focal lengths
>13372	ArgumentList	\"  focal lengths
>13373	Argument	\"  focal lengths
>13374	PrimaryExpression	\"  focal lengths
>13375	Callee	printf
>13376	Identifier	printf
>13377	ExpressionStatement	 
>13378	CallExpression	RemoveBadPointsAndCameras ( curr_num_pts , curr_num_cameras + 1 , added_order , cameras , points , colors , pt_views )
>13379	ArgumentList	curr_num_pts
>13380	Argument	pt_views
>13381	Identifier	pt_views
>13382	Argument	colors
>13383	Identifier	colors
>13384	Argument	points
>13385	Identifier	points
>13386	Argument	cameras
>13387	Identifier	cameras
>13388	Argument	added_order
>13389	Identifier	added_order
>13390	Argument	curr_num_cameras + 1
>13391	AdditiveExpression	curr_num_cameras + 1
>13392	PrimaryExpression	1
>13393	Identifier	curr_num_cameras
>13394	Argument	curr_num_pts
>13395	Identifier	curr_num_pts
>13396	Callee	RemoveBadPointsAndCameras
>13397	Identifier	RemoveBadPointsAndCameras
>13398	ExpressionStatement	 
>13399	CallExpression	RunSFM ( curr_num_pts , round + 1 , 0 , false , cameras , points , added_order , colors , pt_views )
>13400	ArgumentList	curr_num_pts
>13401	Argument	pt_views
>13402	Identifier	pt_views
>13403	Argument	colors
>13404	Identifier	colors
>13405	Argument	added_order
>13406	Identifier	added_order
>13407	Argument	points
>13408	Identifier	points
>13409	Argument	cameras
>13410	Identifier	cameras
>13411	Argument	false
>13412	Identifier	false
>13413	Argument	0
>13414	PrimaryExpression	0
>13415	Argument	round + 1
>13416	AdditiveExpression	round + 1
>13417	PrimaryExpression	1
>13418	Identifier	round
>13419	Argument	curr_num_pts
>13420	Identifier	curr_num_pts
>13421	Callee	RunSFM
>13422	Identifier	RunSFM
>13423	ExpressionStatement	 
>13424	CallExpression	fflush ( stdout )
>13425	ArgumentList	stdout
>13426	Argument	stdout
>13427	Identifier	stdout
>13428	Callee	fflush
>13429	Identifier	fflush
>13430	ExpressionStatement	 
>13431	CallExpression	printf ( \"[BundleAdjust] Number of points = %d\n\" , pt_count )
>13432	ArgumentList	\"[BundleAdjust] Number of points = %d\n\"
>13433	Argument	pt_count
>13434	Identifier	pt_count
>13435	Argument	\"[BundleAdjust] Number of points = %d\n\"
>13436	PrimaryExpression	\"[BundleAdjust] Number of points = %d\n\"
>13437	Callee	printf
>13438	Identifier	printf
>13439	ExpressionStatement	 
>13440	AssignmentExpr	curr_num_pts = pt_count
>13441	Identifier	pt_count
>13442	Identifier	curr_num_pts
>13443	IfStatement	if ( ! m_skip_add_points )
>13444	CompoundStatement	 
>13445	ExpressionStatement	 
>13446	AssignmentExpr	pt_count = BundleAdjustAddAllNewPoints ( curr_num_pts , curr_num_cameras + 1 , added_order , cameras , \
>13447	CallExpression	BundleAdjustAddAllNewPoints ( curr_num_pts , curr_num_cameras + 1 , added_order , cameras , points , colors , dist0 , \
>13448	ArgumentList	curr_num_pts
>13449	Argument	pt_views
>13450	Identifier	pt_views
>13451	Argument	dist0
>13452	Identifier	dist0
>13453	Argument	colors
>13454	Identifier	colors
>13455	Argument	points
>13456	Identifier	points
>13457	Argument	cameras
>13458	Identifier	cameras
>13459	Argument	added_order
>13460	Identifier	added_order
>13461	Argument	curr_num_cameras + 1
>13462	AdditiveExpression	curr_num_cameras + 1
>13463	PrimaryExpression	1
>13464	Identifier	curr_num_cameras
>13465	Argument	curr_num_pts
>13466	Identifier	curr_num_pts
>13467	Callee	BundleAdjustAddAllNewPoints
>13468	Identifier	BundleAdjustAddAllNewPoints
>13469	Identifier	pt_count
>13470	Condition	 
>13471	UnaryOp	! m_skip_add_points
>13472	Identifier	m_skip_add_points
>13473	UnaryOperator	!
>13474	ExpressionStatement	 
>13475	CallExpression	printf ( \"[BundleAdjust] Adding new matches\n\" )
>13476	ArgumentList	\"[BundleAdjust] Adding new matches\n\"
>13477	Argument	\"[BundleAdjust] Adding new matches\n\"
>13478	PrimaryExpression	\"[BundleAdjust] Adding new matches\n\"
>13479	Callee	printf
>13480	Identifier	printf
>13481	IdentifierDeclStatement	 
>13482	IdentifierDecl	dist0 = GetCameraDistance ( cameras + good_pair_1 , cameras + good_pair_2 , m_explicit_camera_centers )
>13483	AssignmentExpr	dist0 = GetCameraDistance ( cameras + good_pair_1 , cameras + good_pair_2 , m_explicit_camera_centers )
>13484	CallExpression	GetCameraDistance ( cameras + good_pair_1 , cameras + good_pair_2 , m_explicit_camera_centers )
>13485	ArgumentList	cameras + good_pair_1
>13486	Argument	m_explicit_camera_centers
>13487	Identifier	m_explicit_camera_centers
>13488	Argument	cameras + good_pair_2
>13489	AdditiveExpression	cameras + good_pair_2
>13490	Identifier	good_pair_2
>13491	Identifier	cameras
>13492	Argument	cameras + good_pair_1
>13493	AdditiveExpression	cameras + good_pair_1
>13494	Identifier	good_pair_1
>13495	Identifier	cameras
>13496	Callee	GetCameraDistance
>13497	Identifier	GetCameraDistance
>13498	Identifier	dist0
>13499	Identifier	dist0
>13500	IdentifierDeclType	double
>13501	ExpressionStatement	 
>13502	AssignmentExpr	cameras [ round ] = BundleInitializeImage ( m_image_data [ next_idx ] , next_idx , round , curr_num_pts , \
>13503	CallExpression	BundleInitializeImage ( m_image_data [ next_idx ] , next_idx , round , curr_num_pts , added_order , points , cameras + \
>13504	ArgumentList	m_image_data [ next_idx ]
>13505	Argument	pt_views
>13506	Identifier	pt_views
>13507	Argument	cameras
>13508	Identifier	cameras
>13509	Argument	cameras + parent_idx
>13510	AdditiveExpression	cameras + parent_idx
>13511	Identifier	parent_idx
>13512	Identifier	cameras
>13513	Argument	points
>13514	Identifier	points
>13515	Argument	added_order
>13516	Identifier	added_order
>13517	Argument	curr_num_pts
>13518	Identifier	curr_num_pts
>13519	Argument	round
>13520	Identifier	round
>13521	Argument	next_idx
>13522	Identifier	next_idx
>13523	Argument	m_image_data [ next_idx ]
>13524	ArrayIndexing	m_image_data [ next_idx ]
>13525	Identifier	next_idx
>13526	Identifier	m_image_data
>13527	Callee	BundleInitializeImage
>13528	Identifier	BundleInitializeImage
>13529	ArrayIndexing	cameras [ round ]
>13530	Identifier	round
>13531	Identifier	cameras
>13532	ExpressionStatement	 
>13533	Statement	 
>13534	Statement	 
>13535	Statement	 
>13536	Statement	 
>13537	Statement	 
>13538	Statement	 
>13539	Statement	 
>13540	Statement	 
>13541	Label	 
>13542	Statement	 
>13543	Statement	 
>13544	Statement	 
>13545	Statement	 
>13546	Statement	 
>13547	Statement	 
>13548	Statement	 
>13549	Statement	 
>13550	Statement	 
>13551	Statement	 
>13552	Statement	 
>13553	Statement	 
>13554	Statement	 
>13555	Statement	 
>13556	Statement	 
>13557	Statement	 
>13558	ExpressionStatement	 
>13559	AssignmentExpr	added_order [ round ] = next_idx
>13560	Identifier	next_idx
>13561	ArrayIndexing	added_order [ round ]
>13562	Identifier	round
>13563	Identifier	added_order
>13564	IfStatement	if ( max_matches < 16 )
>13565	BreakStatement	 
>13566	Condition	 
>13567	RelationalExpression	max_matches < 16
>13568	PrimaryExpression	16
>13569	Identifier	max_matches
>13570	ExpressionStatement	 
>13571	CallExpression	printf ( \"[BundleAdjust] max_matches = %d\n\" , max_matches )
>13572	ArgumentList	\"[BundleAdjust] max_matches = %d\n\"
>13573	Argument	max_matches
>13574	Identifier	max_matches
>13575	Argument	\"[BundleAdjust] max_matches = %d\n\"
>13576	PrimaryExpression	\"[BundleAdjust] max_matches = %d\n\"
>13577	Callee	printf
>13578	Identifier	printf
>13579	IfStatement	if ( m_construct_max_connectivity )
>13580	ElseStatement	else
>13581	ExpressionStatement	 
>13582	AssignmentExpr	next_idx = FindCameraWithMostMatches ( round , curr_num_pts , added_order , parent_idx , max_matches , \
>13583	CallExpression	FindCameraWithMostMatches ( round , curr_num_pts , added_order , parent_idx , max_matches , pt_views )
>13584	ArgumentList	round
>13585	Argument	pt_views
>13586	Identifier	pt_views
>13587	Argument	max_matches
>13588	Identifier	max_matches
>13589	Argument	parent_idx
>13590	Identifier	parent_idx
>13591	Argument	added_order
>13592	Identifier	added_order
>13593	Argument	curr_num_pts
>13594	Identifier	curr_num_pts
>13595	Argument	round
>13596	Identifier	round
>13597	Callee	FindCameraWithMostMatches
>13598	Identifier	FindCameraWithMostMatches
>13599	Identifier	next_idx
>13600	ExpressionStatement	 
>13601	AssignmentExpr	next_idx = FindCameraWithMostConnectivity ( round , curr_num_pts , added_order , parent_idx , max_matches )
>13602	CallExpression	FindCameraWithMostConnectivity ( round , curr_num_pts , added_order , parent_idx , max_matches )
>13603	ArgumentList	round
>13604	Argument	max_matches
>13605	Identifier	max_matches
>13606	Argument	parent_idx
>13607	Identifier	parent_idx
>13608	Argument	added_order
>13609	Identifier	added_order
>13610	Argument	curr_num_pts
>13611	Identifier	curr_num_pts
>13612	Argument	round
>13613	Identifier	round
>13614	Callee	FindCameraWithMostConnectivity
>13615	Identifier	FindCameraWithMostConnectivity
>13616	Identifier	next_idx
>13617	Condition	 
>13618	Identifier	m_construct_max_connectivity
>13619	IdentifierDeclStatement	 
>13620	IdentifierDecl	next_idx
>13621	Identifier	next_idx
>13622	IdentifierDeclType	int
>13623	IdentifierDeclStatement	 
>13624	IdentifierDecl	parent_idx = - 1
>13625	AssignmentExpr	parent_idx = - 1
>13626	UnaryOp	- 1
>13627	PrimaryExpression	1
>13628	UnaryOperator	-
>13629	Identifier	parent_idx
>13630	Identifier	parent_idx
>13631	IdentifierDeclType	int
>13632	Expression	 
>13633	IncDecOp	curr_num_cameras ++
>13634	IncDec	++
>13635	Identifier	curr_num_cameras
>13636	IncDecOp	round ++
>13637	IncDec	++
>13638	Identifier	round
>13639	Condition	 
>13640	RelationalExpression	round < num_images
>13641	Identifier	num_images
>13642	Identifier	round
>13643	ForInit	 
>13644	IdentifierDeclStatement	int round = curr_num_cameras ;
>13645	IdentifierDecl	round = curr_num_cameras
>13646	AssignmentExpr	round = curr_num_cameras
>13647	Identifier	curr_num_cameras
>13648	Identifier	curr_num_cameras
>13649	Identifier	round
>13650	IdentifierDeclType	int
>13651	IfStatement	if ( num_init_cams == 0 )
>13652	ElseStatement	else
>13653	CompoundStatement	 
>13654	ExpressionStatement	 
>13655	AssignmentExpr	pt_count = curr_num_pts = ( int ) m_point_data . size ( )
>13656	AssignmentExpr	curr_num_pts = ( int ) m_point_data . size ( )
>13657	CastExpression	( int ) m_point_data . size ( )
>13658	CallExpression	m_point_data . size ( )
>13659	ArgumentList	 
>13660	Callee	m_point_data . size
>13661	MemberAccess	m_point_data . size
>13662	Identifier	size
>13663	Identifier	m_point_data
>13664	CastTarget	int
>13665	Identifier	curr_num_pts
>13666	Identifier	pt_count
>13667	ExpressionStatement	 
>13668	AssignmentExpr	curr_num_cameras = num_init_cams
>13669	Identifier	num_init_cams
>13670	Identifier	curr_num_cameras
>13671	IfStatement	if ( good_pair_1 == - 1 || good_pair_2 == - 1 )
>13672	CompoundStatement	 
>13673	ExpressionStatement	 
>13674	CallExpression	exit ( 0 )
>13675	ArgumentList	0
>13676	Argument	0
>13677	PrimaryExpression	0
>13678	Callee	exit
>13679	Identifier	exit
>13680	ExpressionStatement	 
>13681	CallExpression	printf ( \"[BundleAdjust] Please specify another pair!\n\" )
>13682	ArgumentList	\"[BundleAdjust] Please specify another pair!\n\"
>13683	Argument	\"[BundleAdjust] Please specify another pair!\n\"
>13684	PrimaryExpression	\"[BundleAdjust] Please specify another pair!\n\"
>13685	Callee	printf
>13686	Identifier	printf
>13687	ExpressionStatement	 
>13688	Statement	 
>13689	Statement	 
>13690	Statement	 
>13691	Statement	 
>13692	Statement	 
>13693	Condition	 
>13694	OrExpression	good_pair_1 == - 1 || good_pair_2 == - 1
>13695	EqualityExpression	good_pair_2 == - 1
>13696	UnaryOp	- 1
>13697	PrimaryExpression	1
>13698	UnaryOperator	-
>13699	Identifier	good_pair_2
>13700	EqualityExpression	good_pair_1 == - 1
>13701	UnaryOp	- 1
>13702	PrimaryExpression	1
>13703	UnaryOperator	-
>13704	Identifier	good_pair_1
>13705	ExpressionStatement	 
>13706	AssignmentExpr	good_pair_2 = added_order_inv [ m_initial_pair [ 1 ] ]
>13707	ArrayIndexing	added_order_inv [ m_initial_pair [ 1 ] ]
>13708	ArrayIndexing	m_initial_pair [ 1 ]
>13709	PrimaryExpression	1
>13710	Identifier	m_initial_pair
>13711	Identifier	added_order_inv
>13712	Identifier	good_pair_2
>13713	ExpressionStatement	 
>13714	AssignmentExpr	good_pair_1 = added_order_inv [ m_initial_pair [ 0 ] ]
>13715	ArrayIndexing	added_order_inv [ m_initial_pair [ 0 ] ]
>13716	ArrayIndexing	m_initial_pair [ 0 ]
>13717	PrimaryExpression	0
>13718	Identifier	m_initial_pair
>13719	Identifier	added_order_inv
>13720	Identifier	good_pair_1
>13721	IfStatement	if ( m_initial_pair [ 0 ] == - 1 || m_initial_pair [ 1 ] == - 1 )
>13722	CompoundStatement	 
>13723	ExpressionStatement	 
>13724	CallExpression	exit ( 1 )
>13725	ArgumentList	1
>13726	Argument	1
>13727	PrimaryExpression	1
>13728	Callee	exit
>13729	Identifier	exit
>13730	ExpressionStatement	 
>13731	Statement	 
>13732	Statement	 
>13733	Statement	 
>13734	Statement	 
>13735	Statement	 
>13736	Statement	 
>13737	ExpressionStatement	 
>13738	Statement	 
>13739	Statement	 
>13740	Statement	 
>13741	Statement	 
>13742	Statement	 
>13743	Condition	 
>13744	OrExpression	m_initial_pair [ 0 ] == - 1 || m_initial_pair [ 1 ] == - 1
>13745	EqualityExpression	m_initial_pair [ 1 ] == - 1
>13746	UnaryOp	- 1
>13747	PrimaryExpression	1
>13748	UnaryOperator	-
>13749	ArrayIndexing	m_initial_pair [ 1 ]
>13750	PrimaryExpression	1
>13751	Identifier	m_initial_pair
>13752	EqualityExpression	m_initial_pair [ 0 ] == - 1
>13753	UnaryOp	- 1
>13754	PrimaryExpression	1
>13755	UnaryOperator	-
>13756	ArrayIndexing	m_initial_pair [ 0 ]
>13757	PrimaryExpression	0
>13758	Identifier	m_initial_pair
>13759	CompoundStatement	 
>13760	ExpressionStatement	 
>13761	AssignmentExpr	curr_num_cameras = 2
>13762	PrimaryExpression	2
>13763	Identifier	curr_num_cameras
>13764	IfStatement	if ( m_bundle_output_base != NULL )
>13765	CompoundStatement	 
>13766	IfStatement	if ( m_estimate_distortion )
>13767	CompoundStatement	 
>13768	ExpressionStatement	 
>13769	CallExpression	DumpOutputFile ( m_output_directory , buf , num_images , 2 , curr_num_pts , added_order , cameras , points , colors , \
>13770	ArgumentList	m_output_directory
>13771	Argument	true
>13772	Identifier	true
>13773	Argument	pt_views
>13774	Identifier	pt_views
>13775	Argument	colors
>13776	Identifier	colors
>13777	Argument	points
>13778	Identifier	points
>13779	Argument	cameras
>13780	Identifier	cameras
>13781	Argument	added_order
>13782	Identifier	added_order
>13783	Argument	curr_num_pts
>13784	Identifier	curr_num_pts
>13785	Argument	2
>13786	PrimaryExpression	2
>13787	Argument	num_images
>13788	Identifier	num_images
>13789	Argument	buf
>13790	Identifier	buf
>13791	Argument	m_output_directory
>13792	Identifier	m_output_directory
>13793	Callee	DumpOutputFile
>13794	Identifier	DumpOutputFile
>13795	ExpressionStatement	 
>13796	CallExpression	sprintf ( buf , \"%s%03d.rd.out\" , m_bundle_output_base , 1 )
>13797	ArgumentList	buf
>13798	Argument	1
>13799	PrimaryExpression	1
>13800	Argument	m_bundle_output_base
>13801	Identifier	m_bundle_output_base
>13802	Argument	\"%s%03d.rd.out\"
>13803	PrimaryExpression	\"%s%03d.rd.out\"
>13804	Argument	buf
>13805	Identifier	buf
>13806	Callee	sprintf
>13807	Identifier	sprintf
>13808	Condition	 
>13809	Identifier	m_estimate_distortion
>13810	ExpressionStatement	 
>13811	CallExpression	DumpOutputFile ( m_output_directory , buf , num_images , 2 , curr_num_pts , added_order , cameras , points , colors , \
>13812	ArgumentList	m_output_directory
>13813	Argument	pt_views
>13814	Identifier	pt_views
>13815	Argument	colors
>13816	Identifier	colors
>13817	Argument	points
>13818	Identifier	points
>13819	Argument	cameras
>13820	Identifier	cameras
>13821	Argument	added_order
>13822	Identifier	added_order
>13823	Argument	curr_num_pts
>13824	Identifier	curr_num_pts
>13825	Argument	2
>13826	PrimaryExpression	2
>13827	Argument	num_images
>13828	Identifier	num_images
>13829	Argument	buf
>13830	Identifier	buf
>13831	Argument	m_output_directory
>13832	Identifier	m_output_directory
>13833	Callee	DumpOutputFile
>13834	Identifier	DumpOutputFile
>13835	ExpressionStatement	 
>13836	CallExpression	sprintf ( buf , \"%s%03d.out\" , m_bundle_output_base , 1 )
>13837	ArgumentList	buf
>13838	Argument	1
>13839	PrimaryExpression	1
>13840	Argument	m_bundle_output_base
>13841	Identifier	m_bundle_output_base
>13842	Argument	\"%s%03d.out\"
>13843	PrimaryExpression	\"%s%03d.out\"
>13844	Argument	buf
>13845	Identifier	buf
>13846	Callee	sprintf
>13847	Identifier	sprintf
>13848	IdentifierDeclStatement	 
>13849	IdentifierDecl	buf [ 256 ]
>13850	PrimaryExpression	256
>13851	Identifier	buf
>13852	IdentifierDeclType	char [ 256 ]
>13853	Condition	 
>13854	EqualityExpression	m_bundle_output_base != NULL
>13855	Identifier	NULL
>13856	Identifier	m_bundle_output_base
>13857	ExpressionStatement	 
>13858	CallExpression	DumpPointsToPly ( m_output_directory , \"points001.ply\" , curr_num_pts , 2 , points , colors , cameras )
>13859	ArgumentList	m_output_directory
>13860	Argument	cameras
>13861	Identifier	cameras
>13862	Argument	colors
>13863	Identifier	colors
>13864	Argument	points
>13865	Identifier	points
>13866	Argument	2
>13867	PrimaryExpression	2
>13868	Argument	curr_num_pts
>13869	Identifier	curr_num_pts
>13870	Argument	\"points001.ply\"
>13871	PrimaryExpression	\"points001.ply\"
>13872	Argument	m_output_directory
>13873	Identifier	m_output_directory
>13874	Callee	DumpPointsToPly
>13875	Identifier	DumpPointsToPly
>13876	IfStatement	if ( m_fix_necker )
>13877	CompoundStatement	 
>13878	ExpressionStatement	 
>13879	Identifier	points_old
>13880	Statement	 
>13881	Statement	 
>13882	Statement	 
>13883	IfStatement	if ( error0 < error1 )
>13884	CompoundStatement	 
>13885	ExpressionStatement	 
>13886	CallExpression	memcpy ( cameras , cameras_old , sizeof ( camera_params_t ) * 2 )
>13887	ArgumentList	cameras
>13888	Argument	sizeof ( camera_params_t ) * 2
>13889	MultiplicativeExpression	sizeof ( camera_params_t ) * 2
>13890	PrimaryExpression	2
>13891	SizeofExpr	sizeof ( camera_params_t )
>13892	SizeofOperand	camera_params_t
>13893	Sizeof	sizeof
>13894	Argument	cameras_old
>13895	Identifier	cameras_old
>13896	Argument	cameras
>13897	Identifier	cameras
>13898	Callee	memcpy
>13899	Identifier	memcpy
>13900	ExpressionStatement	 
>13901	CallExpression	memcpy ( points , points_old , sizeof ( v3_t ) * curr_num_pts )
>13902	ArgumentList	points
>13903	Argument	sizeof ( v3_t ) * curr_num_pts
>13904	MultiplicativeExpression	sizeof ( v3_t ) * curr_num_pts
>13905	Identifier	curr_num_pts
>13906	SizeofExpr	sizeof ( v3_t )
>13907	SizeofOperand	v3_t
>13908	Sizeof	sizeof
>13909	Argument	points_old
>13910	Identifier	points_old
>13911	Argument	points
>13912	Identifier	points
>13913	Callee	memcpy
>13914	Identifier	memcpy
>13915	ExpressionStatement	 
>13916	CallExpression	printf ( \"Restoring pre-Necker configuration\n\" )
>13917	ArgumentList	\"Restoring pre-Necker configuration\n\"
>13918	Argument	\"Restoring pre-Necker configuration\n\"
>13919	PrimaryExpression	\"Restoring pre-Necker configuration\n\"
>13920	Callee	printf
>13921	Identifier	printf
>13922	Condition	 
>13923	RelationalExpression	error0 < error1
>13924	Identifier	error1
>13925	Identifier	error0
>13926	ExpressionStatement	 
>13927	CallExpression	printf ( \"  focal lengths
>13928	ArgumentList	\"  focal lengths
>13929	Argument	cameras [ 1 ] . f
>13930	MemberAccess	cameras [ 1 ] . f
>13931	Identifier	f
>13932	ArrayIndexing	cameras [ 1 ]
>13933	PrimaryExpression	1
>13934	Identifier	cameras
>13935	Argument	cameras [ 0 ] . f
>13936	MemberAccess	cameras [ 0 ] . f
>13937	Identifier	f
>13938	ArrayIndexing	cameras [ 0 ]
>13939	PrimaryExpression	0
>13940	Identifier	cameras
>13941	Argument	\"  focal lengths
>13942	PrimaryExpression	\"  focal lengths
>13943	Callee	printf
>13944	Identifier	printf
>13945	ExpressionStatement	 
>13946	AssignmentExpr	error1 = RunSFM ( curr_num_pts , 2 , 0 , false , cameras , points , added_order , colors , pt_views )
>13947	CallExpression	RunSFM ( curr_num_pts , 2 , 0 , false , cameras , points , added_order , colors , pt_views )
>13948	ArgumentList	curr_num_pts
>13949	Argument	pt_views
>13950	Identifier	pt_views
>13951	Argument	colors
>13952	Identifier	colors
>13953	Argument	added_order
>13954	Identifier	added_order
>13955	Argument	points
>13956	Identifier	points
>13957	Argument	cameras
>13958	Identifier	cameras
>13959	Argument	false
>13960	Identifier	false
>13961	Argument	0
>13962	PrimaryExpression	0
>13963	Argument	2
>13964	PrimaryExpression	2
>13965	Argument	curr_num_pts
>13966	Identifier	curr_num_pts
>13967	Callee	RunSFM
>13968	Identifier	RunSFM
>13969	Identifier	error1
>13970	IdentifierDeclStatement	 
>13971	IdentifierDecl	error1
>13972	Identifier	error1
>13973	IdentifierDeclType	double
>13974	ForStatement	for ( int i = 0 ; i < curr_num_pts ; i ++ )
>13975	CompoundStatement	 
>13976	ExpressionStatement	 
>13977	AssignmentExpr	points [ i ] = triangulate ( p , q , cameras [ 0 ] . R , t1 , cameras [ 1 ] . R , t2 , & proj_error )
>13978	CallExpression	triangulate ( p , q , cameras [ 0 ] . R , t1 , cameras [ 1 ] . R , t2 , & proj_error )
>13979	ArgumentList	p
>13980	Argument	& proj_error
>13981	UnaryOp	& proj_error
>13982	Identifier	proj_error
>13983	UnaryOperator	&
>13984	Argument	t2
>13985	Identifier	t2
>13986	Argument	cameras [ 1 ] . R
>13987	MemberAccess	cameras [ 1 ] . R
>13988	Identifier	R
>13989	ArrayIndexing	cameras [ 1 ]
>13990	PrimaryExpression	1
>13991	Identifier	cameras
>13992	Argument	t1
>13993	Identifier	t1
>13994	Argument	cameras [ 0 ] . R
>13995	MemberAccess	cameras [ 0 ] . R
>13996	Identifier	R
>13997	ArrayIndexing	cameras [ 0 ]
>13998	PrimaryExpression	0
>13999	Identifier	cameras
>14000	Argument	q
>14001	Identifier	q
>14002	Argument	p
>14003	Identifier	p
>14004	Callee	triangulate
>14005	Identifier	triangulate
>14006	ArrayIndexing	points [ i ]
>14007	Identifier	i
>14008	Identifier	points
>14009	ExpressionStatement	 
>14010	CallExpression	matrix_scale ( 3 , 1 , t2 , - 1.0 , t2 )
>14011	ArgumentList	3
>14012	Argument	t2
>14013	Identifier	t2
>14014	Argument	- 1.0
>14015	UnaryOp	- 1.0
>14016	PrimaryExpression	1.0
>14017	UnaryOperator	-
>14018	Argument	t2
>14019	Identifier	t2
>14020	Argument	1
>14021	PrimaryExpression	1
>14022	Argument	3
>14023	PrimaryExpression	3
>14024	Callee	matrix_scale
>14025	Identifier	matrix_scale
>14026	ExpressionStatement	 
>14027	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cameras [ 1 ] . R , cameras [ 1 ] . t , t2 )
>14028	ArgumentList	3
>14029	Argument	t2
>14030	Identifier	t2
>14031	Argument	cameras [ 1 ] . t
>14032	MemberAccess	cameras [ 1 ] . t
>14033	Identifier	t
>14034	ArrayIndexing	cameras [ 1 ]
>14035	PrimaryExpression	1
>14036	Identifier	cameras
>14037	Argument	cameras [ 1 ] . R
>14038	MemberAccess	cameras [ 1 ] . R
>14039	Identifier	R
>14040	ArrayIndexing	cameras [ 1 ]
>14041	PrimaryExpression	1
>14042	Identifier	cameras
>14043	Argument	1
>14044	PrimaryExpression	1
>14045	Argument	3
>14046	PrimaryExpression	3
>14047	Argument	3
>14048	PrimaryExpression	3
>14049	Argument	3
>14050	PrimaryExpression	3
>14051	Callee	matrix_product
>14052	Identifier	matrix_product
>14053	ExpressionStatement	 
>14054	CallExpression	matrix_scale ( 3 , 1 , t1 , - 1.0 , t1 )
>14055	ArgumentList	3
>14056	Argument	t1
>14057	Identifier	t1
>14058	Argument	- 1.0
>14059	UnaryOp	- 1.0
>14060	PrimaryExpression	1.0
>14061	UnaryOperator	-
>14062	Argument	t1
>14063	Identifier	t1
>14064	Argument	1
>14065	PrimaryExpression	1
>14066	Argument	3
>14067	PrimaryExpression	3
>14068	Callee	matrix_scale
>14069	Identifier	matrix_scale
>14070	ExpressionStatement	 
>14071	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cameras [ 0 ] . R , cameras [ 0 ] . t , t1 )
>14072	ArgumentList	3
>14073	Argument	t1
>14074	Identifier	t1
>14075	Argument	cameras [ 0 ] . t
>14076	MemberAccess	cameras [ 0 ] . t
>14077	Identifier	t
>14078	ArrayIndexing	cameras [ 0 ]
>14079	PrimaryExpression	0
>14080	Identifier	cameras
>14081	Argument	cameras [ 0 ] . R
>14082	MemberAccess	cameras [ 0 ] . R
>14083	Identifier	R
>14084	ArrayIndexing	cameras [ 0 ]
>14085	PrimaryExpression	0
>14086	Identifier	cameras
>14087	Argument	1
>14088	PrimaryExpression	1
>14089	Argument	3
>14090	PrimaryExpression	3
>14091	Argument	3
>14092	PrimaryExpression	3
>14093	Argument	3
>14094	PrimaryExpression	3
>14095	Callee	matrix_product
>14096	Identifier	matrix_product
>14097	IdentifierDeclStatement	 
>14098	IdentifierDecl	t2 [ 3 ]
>14099	PrimaryExpression	3
>14100	Identifier	t2
>14101	IdentifierDeclType	double [ 3 ]
>14102	IdentifierDecl	t1 [ 3 ]
>14103	PrimaryExpression	3
>14104	Identifier	t1
>14105	IdentifierDeclType	double [ 3 ]
>14106	IdentifierDeclStatement	 
>14107	IdentifierDecl	proj_error
>14108	Identifier	proj_error
>14109	IdentifierDeclType	double
>14110	IdentifierDeclStatement	 
>14111	IdentifierDecl	q = v2_new ( proj2_norm [ 0 ] / proj2_norm [ 2 ] , proj2_norm [ 1 ] / proj2_norm [ 2 ] )
>14112	AssignmentExpr	q = v2_new ( proj2_norm [ 0 ] / proj2_norm [ 2 ] , proj2_norm [ 1 ] / proj2_norm [ 2 ] )
>14113	CallExpression	v2_new ( proj2_norm [ 0 ] / proj2_norm [ 2 ] , proj2_norm [ 1 ] / proj2_norm [ 2 ] )
>14114	ArgumentList	proj2_norm [ 0 ] / proj2_norm [ 2 ]
>14115	Argument	proj2_norm [ 1 ] / proj2_norm [ 2 ]
>14116	MultiplicativeExpression	proj2_norm [ 1 ] / proj2_norm [ 2 ]
>14117	ArrayIndexing	proj2_norm [ 2 ]
>14118	PrimaryExpression	2
>14119	Identifier	proj2_norm
>14120	ArrayIndexing	proj2_norm [ 1 ]
>14121	PrimaryExpression	1
>14122	Identifier	proj2_norm
>14123	Argument	proj2_norm [ 0 ] / proj2_norm [ 2 ]
>14124	MultiplicativeExpression	proj2_norm [ 0 ] / proj2_norm [ 2 ]
>14125	ArrayIndexing	proj2_norm [ 2 ]
>14126	PrimaryExpression	2
>14127	Identifier	proj2_norm
>14128	ArrayIndexing	proj2_norm [ 0 ]
>14129	PrimaryExpression	0
>14130	Identifier	proj2_norm
>14131	Callee	v2_new
>14132	Identifier	v2_new
>14133	Identifier	q
>14134	Identifier	q
>14135	IdentifierDeclType	v2_t
>14136	IdentifierDeclStatement	 
>14137	IdentifierDecl	p = v2_new ( proj1_norm [ 0 ] / proj1_norm [ 2 ] , proj1_norm [ 1 ] / proj1_norm [ 2 ] )
>14138	AssignmentExpr	p = v2_new ( proj1_norm [ 0 ] / proj1_norm [ 2 ] , proj1_norm [ 1 ] / proj1_norm [ 2 ] )
>14139	CallExpression	v2_new ( proj1_norm [ 0 ] / proj1_norm [ 2 ] , proj1_norm [ 1 ] / proj1_norm [ 2 ] )
>14140	ArgumentList	proj1_norm [ 0 ] / proj1_norm [ 2 ]
>14141	Argument	proj1_norm [ 1 ] / proj1_norm [ 2 ]
>14142	MultiplicativeExpression	proj1_norm [ 1 ] / proj1_norm [ 2 ]
>14143	ArrayIndexing	proj1_norm [ 2 ]
>14144	PrimaryExpression	2
>14145	Identifier	proj1_norm
>14146	ArrayIndexing	proj1_norm [ 1 ]
>14147	PrimaryExpression	1
>14148	Identifier	proj1_norm
>14149	Argument	proj1_norm [ 0 ] / proj1_norm [ 2 ]
>14150	MultiplicativeExpression	proj1_norm [ 0 ] / proj1_norm [ 2 ]
>14151	ArrayIndexing	proj1_norm [ 2 ]
>14152	PrimaryExpression	2
>14153	Identifier	proj1_norm
>14154	ArrayIndexing	proj1_norm [ 0 ]
>14155	PrimaryExpression	0
>14156	Identifier	proj1_norm
>14157	Callee	v2_new
>14158	Identifier	v2_new
>14159	Identifier	p
>14160	Identifier	p
>14161	IdentifierDeclType	v2_t
>14162	ExpressionStatement	 
>14163	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , K2inv , proj2 , proj2_norm )
>14164	ArgumentList	3
>14165	Argument	proj2_norm
>14166	Identifier	proj2_norm
>14167	Argument	proj2
>14168	Identifier	proj2
>14169	Argument	K2inv
>14170	Identifier	K2inv
>14171	Argument	1
>14172	PrimaryExpression	1
>14173	Argument	3
>14174	PrimaryExpression	3
>14175	Argument	3
>14176	PrimaryExpression	3
>14177	Argument	3
>14178	PrimaryExpression	3
>14179	Callee	matrix_product
>14180	Identifier	matrix_product
>14181	ExpressionStatement	 
>14182	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , K1inv , proj1 , proj1_norm )
>14183	ArgumentList	3
>14184	Argument	proj1_norm
>14185	Identifier	proj1_norm
>14186	Argument	proj1
>14187	Identifier	proj1
>14188	Argument	K1inv
>14189	Identifier	K1inv
>14190	Argument	1
>14191	PrimaryExpression	1
>14192	Argument	3
>14193	PrimaryExpression	3
>14194	Argument	3
>14195	PrimaryExpression	3
>14196	Argument	3
>14197	PrimaryExpression	3
>14198	Callee	matrix_product
>14199	Identifier	matrix_product
>14200	IdentifierDeclStatement	 
>14201	IdentifierDecl	proj2_norm [ 3 ]
>14202	PrimaryExpression	3
>14203	Identifier	proj2_norm
>14204	IdentifierDeclType	double [ 3 ]
>14205	IdentifierDecl	proj1_norm [ 3 ]
>14206	PrimaryExpression	3
>14207	Identifier	proj1_norm
>14208	IdentifierDeclType	double [ 3 ]
>14209	IfStatement	if ( m_optimize_for_fisheye )
>14210	CompoundStatement	 
>14211	ExpressionStatement	 
>14212	CallExpression	m_image_data [ added_order [ 1 ] ] . UndistortPoint ( x2 , y2 , proj2 [ 0 ] , proj2 [ 1 ] )
>14213	ArgumentList	x2
>14214	Argument	proj2 [ 1 ]
>14215	ArrayIndexing	proj2 [ 1 ]
>14216	PrimaryExpression	1
>14217	Identifier	proj2
>14218	Argument	proj2 [ 0 ]
>14219	ArrayIndexing	proj2 [ 0 ]
>14220	PrimaryExpression	0
>14221	Identifier	proj2
>14222	Argument	y2
>14223	Identifier	y2
>14224	Argument	x2
>14225	Identifier	x2
>14226	Callee	m_image_data [ added_order [ 1 ] ] . UndistortPoint
>14227	MemberAccess	m_image_data [ added_order [ 1 ] ] . UndistortPoint
>14228	Identifier	UndistortPoint
>14229	ArrayIndexing	m_image_data [ added_order [ 1 ] ]
>14230	ArrayIndexing	added_order [ 1 ]
>14231	PrimaryExpression	1
>14232	Identifier	added_order
>14233	Identifier	m_image_data
>14234	ExpressionStatement	 
>14235	CallExpression	m_image_data [ added_order [ 0 ] ] . UndistortPoint ( x1 , y1 , proj1 [ 0 ] , proj1 [ 1 ] )
>14236	ArgumentList	x1
>14237	Argument	proj1 [ 1 ]
>14238	ArrayIndexing	proj1 [ 1 ]
>14239	PrimaryExpression	1
>14240	Identifier	proj1
>14241	Argument	proj1 [ 0 ]
>14242	ArrayIndexing	proj1 [ 0 ]
>14243	PrimaryExpression	0
>14244	Identifier	proj1
>14245	Argument	y1
>14246	Identifier	y1
>14247	Argument	x1
>14248	Identifier	x1
>14249	Callee	m_image_data [ added_order [ 0 ] ] . UndistortPoint
>14250	MemberAccess	m_image_data [ added_order [ 0 ] ] . UndistortPoint
>14251	Identifier	UndistortPoint
>14252	ArrayIndexing	m_image_data [ added_order [ 0 ] ]
>14253	ArrayIndexing	added_order [ 0 ]
>14254	PrimaryExpression	0
>14255	Identifier	added_order
>14256	Identifier	m_image_data
>14257	IdentifierDeclStatement	 
>14258	IdentifierDecl	y2 = proj2 [ 1 ]
>14259	AssignmentExpr	y2 = proj2 [ 1 ]
>14260	ArrayIndexing	proj2 [ 1 ]
>14261	PrimaryExpression	1
>14262	Identifier	proj2
>14263	Identifier	y2
>14264	Identifier	y2
>14265	IdentifierDeclType	double
>14266	IdentifierDeclStatement	 
>14267	IdentifierDecl	x2 = proj2 [ 0 ]
>14268	AssignmentExpr	x2 = proj2 [ 0 ]
>14269	ArrayIndexing	proj2 [ 0 ]
>14270	PrimaryExpression	0
>14271	Identifier	proj2
>14272	Identifier	x2
>14273	Identifier	x2
>14274	IdentifierDeclType	double
>14275	IdentifierDeclStatement	 
>14276	IdentifierDecl	y1 = proj1 [ 1 ]
>14277	AssignmentExpr	y1 = proj1 [ 1 ]
>14278	ArrayIndexing	proj1 [ 1 ]
>14279	PrimaryExpression	1
>14280	Identifier	proj1
>14281	Identifier	y1
>14282	Identifier	y1
>14283	IdentifierDeclType	double
>14284	IdentifierDeclStatement	 
>14285	IdentifierDecl	x1 = proj1 [ 0 ]
>14286	AssignmentExpr	x1 = proj1 [ 0 ]
>14287	ArrayIndexing	proj1 [ 0 ]
>14288	PrimaryExpression	0
>14289	Identifier	proj1
>14290	Identifier	x1
>14291	Identifier	x1
>14292	IdentifierDeclType	double
>14293	Condition	 
>14294	Identifier	m_optimize_for_fisheye
>14295	IdentifierDeclStatement	 
>14296	IdentifierDecl	proj2 [ 3 ] = { GetKey ( added_order [ 1 ] , k2 ) . m_x , GetKey ( added_order [ 1 ] , k2 ) . m_y , 1.0 }
>14297	AssignmentExpr	proj2 [ 3 ] = { GetKey ( added_order [ 1 ] , k2 ) . m_x , GetKey ( added_order [ 1 ] , k2 ) . m_y , 1.0 }
>14298	InitializerList	GetKey ( added_order [ 1 ] , k2 ) . m_x
>14299	PrimaryExpression	1.0
>14300	MemberAccess	GetKey ( added_order [ 1 ] , k2 ) . m_y
>14301	Identifier	m_y
>14302	CallExpression	GetKey ( added_order [ 1 ] , k2 )
>14303	ArgumentList	added_order [ 1 ]
>14304	Argument	k2
>14305	Identifier	k2
>14306	Argument	added_order [ 1 ]
>14307	ArrayIndexing	added_order [ 1 ]
>14308	PrimaryExpression	1
>14309	Identifier	added_order
>14310	Callee	GetKey
>14311	Identifier	GetKey
>14312	MemberAccess	GetKey ( added_order [ 1 ] , k2 ) . m_x
>14313	Identifier	m_x
>14314	CallExpression	GetKey ( added_order [ 1 ] , k2 )
>14315	ArgumentList	added_order [ 1 ]
>14316	Argument	k2
>14317	Identifier	k2
>14318	Argument	added_order [ 1 ]
>14319	ArrayIndexing	added_order [ 1 ]
>14320	PrimaryExpression	1
>14321	Identifier	added_order
>14322	Callee	GetKey
>14323	Identifier	GetKey
>14324	Identifier	proj2
>14325	PrimaryExpression	3
>14326	Identifier	proj2
>14327	IdentifierDeclType	double [ 3 ]
>14328	IdentifierDeclStatement	 
>14329	IdentifierDecl	proj1 [ 3 ] = { GetKey ( added_order [ 0 ] , k1 ) . m_x , GetKey ( added_order [ 0 ] , k1 ) . m_y , 1.0 }
>14330	AssignmentExpr	proj1 [ 3 ] = { GetKey ( added_order [ 0 ] , k1 ) . m_x , GetKey ( added_order [ 0 ] , k1 ) . m_y , 1.0 }
>14331	InitializerList	GetKey ( added_order [ 0 ] , k1 ) . m_x
>14332	PrimaryExpression	1.0
>14333	MemberAccess	GetKey ( added_order [ 0 ] , k1 ) . m_y
>14334	Identifier	m_y
>14335	CallExpression	GetKey ( added_order [ 0 ] , k1 )
>14336	ArgumentList	added_order [ 0 ]
>14337	Argument	k1
>14338	Identifier	k1
>14339	Argument	added_order [ 0 ]
>14340	ArrayIndexing	added_order [ 0 ]
>14341	PrimaryExpression	0
>14342	Identifier	added_order
>14343	Callee	GetKey
>14344	Identifier	GetKey
>14345	MemberAccess	GetKey ( added_order [ 0 ] , k1 ) . m_x
>14346	Identifier	m_x
>14347	CallExpression	GetKey ( added_order [ 0 ] , k1 )
>14348	ArgumentList	added_order [ 0 ]
>14349	Argument	k1
>14350	Identifier	k1
>14351	Argument	added_order [ 0 ]
>14352	ArrayIndexing	added_order [ 0 ]
>14353	PrimaryExpression	0
>14354	Identifier	added_order
>14355	Callee	GetKey
>14356	Identifier	GetKey
>14357	Identifier	proj1
>14358	PrimaryExpression	3
>14359	Identifier	proj1
>14360	IdentifierDeclType	double [ 3 ]
>14361	IdentifierDeclStatement	 
>14362	IdentifierDecl	k2 = pt_views [ i ] [ 1 ] . second
>14363	AssignmentExpr	k2 = pt_views [ i ] [ 1 ] . second
>14364	MemberAccess	pt_views [ i ] [ 1 ] . second
>14365	Identifier	second
>14366	ArrayIndexing	pt_views [ i ] [ 1 ]
>14367	PrimaryExpression	1
>14368	ArrayIndexing	pt_views [ i ]
>14369	Identifier	i
>14370	Identifier	pt_views
>14371	Identifier	k2
>14372	Identifier	k2
>14373	IdentifierDeclType	int
>14374	IdentifierDeclStatement	 
>14375	IdentifierDecl	k1 = pt_views [ i ] [ 0 ] . second
>14376	AssignmentExpr	k1 = pt_views [ i ] [ 0 ] . second
>14377	MemberAccess	pt_views [ i ] [ 0 ] . second
>14378	Identifier	second
>14379	ArrayIndexing	pt_views [ i ] [ 0 ]
>14380	PrimaryExpression	0
>14381	ArrayIndexing	pt_views [ i ]
>14382	Identifier	i
>14383	Identifier	pt_views
>14384	Identifier	k1
>14385	Identifier	k1
>14386	IdentifierDeclType	int
>14387	IncDecOp	 
>14388	IncDec	++
>14389	Identifier	i
>14390	Condition	 
>14391	RelationalExpression	i < curr_num_pts
>14392	Identifier	curr_num_pts
>14393	Identifier	i
>14394	ForInit	 
>14395	IdentifierDeclStatement	int i = 0 ;
>14396	IdentifierDecl	i = 0
>14397	AssignmentExpr	i = 0
>14398	PrimaryExpression	0
>14399	Identifier	i
>14400	Identifier	i
>14401	IdentifierDeclType	int
>14402	IdentifierDeclStatement	 
>14403	IdentifierDecl	K2inv [ 9 ] = { 1.0 / cameras [ 1 ] . f , 0.0 , 0.0 , 0.0 , 1.0 / cameras [ 1 ] . f , 0.0 , 0.0 , 0.0 , 1.0 }
>14404	AssignmentExpr	K2inv [ 9 ] = { 1.0 / cameras [ 1 ] . f , 0.0 , 0.0 , 0.0 , 1.0 / cameras [ 1 ] . f , 0.0 , 0.0 , 0.0 , \
>14405	InitializerList	1.0 / cameras [ 1 ] . f
>14406	PrimaryExpression	1.0
>14407	PrimaryExpression	0.0
>14408	PrimaryExpression	0.0
>14409	PrimaryExpression	0.0
>14410	MultiplicativeExpression	1.0 / cameras [ 1 ] . f
>14411	MemberAccess	cameras [ 1 ] . f
>14412	Identifier	f
>14413	ArrayIndexing	cameras [ 1 ]
>14414	PrimaryExpression	1
>14415	Identifier	cameras
>14416	PrimaryExpression	1.0
>14417	PrimaryExpression	0.0
>14418	PrimaryExpression	0.0
>14419	PrimaryExpression	0.0
>14420	MultiplicativeExpression	1.0 / cameras [ 1 ] . f
>14421	MemberAccess	cameras [ 1 ] . f
>14422	Identifier	f
>14423	ArrayIndexing	cameras [ 1 ]
>14424	PrimaryExpression	1
>14425	Identifier	cameras
>14426	PrimaryExpression	1.0
>14427	Identifier	K2inv
>14428	PrimaryExpression	9
>14429	Identifier	K2inv
>14430	IdentifierDeclType	double [ 9 ]
>14431	IdentifierDeclStatement	 
>14432	IdentifierDecl	K1inv [ 9 ] = { 1.0 / cameras [ 0 ] . f , 0.0 , 0.0 , 0.0 , 1.0 / cameras [ 0 ] . f , 0.0 , 0.0 , 0.0 , 1.0 }
>14433	AssignmentExpr	K1inv [ 9 ] = { 1.0 / cameras [ 0 ] . f , 0.0 , 0.0 , 0.0 , 1.0 / cameras [ 0 ] . f , 0.0 , 0.0 , 0.0 , \
>14434	InitializerList	1.0 / cameras [ 0 ] . f
>14435	PrimaryExpression	1.0
>14436	PrimaryExpression	0.0
>14437	PrimaryExpression	0.0
>14438	PrimaryExpression	0.0
>14439	MultiplicativeExpression	1.0 / cameras [ 0 ] . f
>14440	MemberAccess	cameras [ 0 ] . f
>14441	Identifier	f
>14442	ArrayIndexing	cameras [ 0 ]
>14443	PrimaryExpression	0
>14444	Identifier	cameras
>14445	PrimaryExpression	1.0
>14446	PrimaryExpression	0.0
>14447	PrimaryExpression	0.0
>14448	PrimaryExpression	0.0
>14449	MultiplicativeExpression	1.0 / cameras [ 0 ] . f
>14450	MemberAccess	cameras [ 0 ] . f
>14451	Identifier	f
>14452	ArrayIndexing	cameras [ 0 ]
>14453	PrimaryExpression	0
>14454	Identifier	cameras
>14455	PrimaryExpression	1.0
>14456	Identifier	K1inv
>14457	PrimaryExpression	9
>14458	Identifier	K1inv
>14459	IdentifierDeclType	double [ 9 ]
>14460	ExpressionStatement	 
>14461	AssignmentExpr	cameras [ 1 ] . k [ 0 ] = cameras [ 1 ] . k [ 1 ] = 0.0
>14462	AssignmentExpr	cameras [ 1 ] . k [ 1 ] = 0.0
>14463	PrimaryExpression	0.0
>14464	ArrayIndexing	cameras [ 1 ] . k [ 1 ]
>14465	PrimaryExpression	1
>14466	MemberAccess	cameras [ 1 ] . k
>14467	Identifier	k
>14468	ArrayIndexing	cameras [ 1 ]
>14469	PrimaryExpression	1
>14470	Identifier	cameras
>14471	ArrayIndexing	cameras [ 1 ] . k [ 0 ]
>14472	PrimaryExpression	0
>14473	MemberAccess	cameras [ 1 ] . k
>14474	Identifier	k
>14475	ArrayIndexing	cameras [ 1 ]
>14476	PrimaryExpression	1
>14477	Identifier	cameras
>14478	ExpressionStatement	 
>14479	AssignmentExpr	cameras [ 1 ] . f = init_focal_length_1
>14480	Identifier	init_focal_length_1
>14481	MemberAccess	cameras [ 1 ] . f
>14482	Identifier	f
>14483	ArrayIndexing	cameras [ 1 ]
>14484	PrimaryExpression	1
>14485	Identifier	cameras
>14486	ExpressionStatement	 
>14487	CallExpression	memcpy ( cameras [ 1 ] . t , tmp . t , sizeof ( double ) * 3 )
>14488	ArgumentList	cameras [ 1 ] . t
>14489	Argument	sizeof ( double ) * 3
>14490	MultiplicativeExpression	sizeof ( double ) * 3
>14491	PrimaryExpression	3
>14492	SizeofExpr	sizeof ( double )
>14493	SizeofOperand	double
>14494	Sizeof	sizeof
>14495	Argument	tmp . t
>14496	MemberAccess	tmp . t
>14497	Identifier	t
>14498	Identifier	tmp
>14499	Argument	cameras [ 1 ] . t
>14500	MemberAccess	cameras [ 1 ] . t
>14501	Identifier	t
>14502	ArrayIndexing	cameras [ 1 ]
>14503	PrimaryExpression	1
>14504	Identifier	cameras
>14505	Callee	memcpy
>14506	Identifier	memcpy
>14507	ExpressionStatement	 
>14508	CallExpression	memcpy ( cameras [ 1 ] . R , tmp . R , sizeof ( double ) * 9 )
>14509	ArgumentList	cameras [ 1 ] . R
>14510	Argument	sizeof ( double ) * 9
>14511	MultiplicativeExpression	sizeof ( double ) * 9
>14512	PrimaryExpression	9
>14513	SizeofExpr	sizeof ( double )
>14514	SizeofOperand	double
>14515	Sizeof	sizeof
>14516	Argument	tmp . R
>14517	MemberAccess	tmp . R
>14518	Identifier	R
>14519	Identifier	tmp
>14520	Argument	cameras [ 1 ] . R
>14521	MemberAccess	cameras [ 1 ] . R
>14522	Identifier	R
>14523	ArrayIndexing	cameras [ 1 ]
>14524	PrimaryExpression	1
>14525	Identifier	cameras
>14526	Callee	memcpy
>14527	Identifier	memcpy
>14528	ExpressionStatement	 
>14529	AssignmentExpr	cameras [ 0 ] . k [ 0 ] = cameras [ 0 ] . k [ 1 ] = 0.0
>14530	AssignmentExpr	cameras [ 0 ] . k [ 1 ] = 0.0
>14531	PrimaryExpression	0.0
>14532	ArrayIndexing	cameras [ 0 ] . k [ 1 ]
>14533	PrimaryExpression	1
>14534	MemberAccess	cameras [ 0 ] . k
>14535	Identifier	k
>14536	ArrayIndexing	cameras [ 0 ]
>14537	PrimaryExpression	0
>14538	Identifier	cameras
>14539	ArrayIndexing	cameras [ 0 ] . k [ 0 ]
>14540	PrimaryExpression	0
>14541	MemberAccess	cameras [ 0 ] . k
>14542	Identifier	k
>14543	ArrayIndexing	cameras [ 0 ]
>14544	PrimaryExpression	0
>14545	Identifier	cameras
>14546	ExpressionStatement	 
>14547	AssignmentExpr	cameras [ 0 ] . f = init_focal_length_0
>14548	Identifier	init_focal_length_0
>14549	MemberAccess	cameras [ 0 ] . f
>14550	Identifier	f
>14551	ArrayIndexing	cameras [ 0 ]
>14552	PrimaryExpression	0
>14553	Identifier	cameras
>14554	ExpressionStatement	 
>14555	CallExpression	memcpy ( cameras [ 0 ] . t , cameras [ 1 ] . t , sizeof ( double ) * 3 )
>14556	ArgumentList	cameras [ 0 ] . t
>14557	Argument	sizeof ( double ) * 3
>14558	MultiplicativeExpression	sizeof ( double ) * 3
>14559	PrimaryExpression	3
>14560	SizeofExpr	sizeof ( double )
>14561	SizeofOperand	double
>14562	Sizeof	sizeof
>14563	Argument	cameras [ 1 ] . t
>14564	MemberAccess	cameras [ 1 ] . t
>14565	Identifier	t
>14566	ArrayIndexing	cameras [ 1 ]
>14567	PrimaryExpression	1
>14568	Identifier	cameras
>14569	Argument	cameras [ 0 ] . t
>14570	MemberAccess	cameras [ 0 ] . t
>14571	Identifier	t
>14572	ArrayIndexing	cameras [ 0 ]
>14573	PrimaryExpression	0
>14574	Identifier	cameras
>14575	Callee	memcpy
>14576	Identifier	memcpy
>14577	ExpressionStatement	 
>14578	CallExpression	memcpy ( cameras [ 0 ] . R , cameras [ 1 ] . R , sizeof ( double ) * 9 )
>14579	ArgumentList	cameras [ 0 ] . R
>14580	Argument	sizeof ( double ) * 9
>14581	MultiplicativeExpression	sizeof ( double ) * 9
>14582	PrimaryExpression	9
>14583	SizeofExpr	sizeof ( double )
>14584	SizeofOperand	double
>14585	Sizeof	sizeof
>14586	Argument	cameras [ 1 ] . R
>14587	MemberAccess	cameras [ 1 ] . R
>14588	Identifier	R
>14589	ArrayIndexing	cameras [ 1 ]
>14590	PrimaryExpression	1
>14591	Identifier	cameras
>14592	Argument	cameras [ 0 ] . R
>14593	MemberAccess	cameras [ 0 ] . R
>14594	Identifier	R
>14595	ArrayIndexing	cameras [ 0 ]
>14596	PrimaryExpression	0
>14597	Identifier	cameras
>14598	Callee	memcpy
>14599	Identifier	memcpy
>14600	IdentifierDeclStatement	 
>14601	IdentifierDecl	tmp = cameras [ 0 ]
>14602	AssignmentExpr	tmp = cameras [ 0 ]
>14603	ArrayIndexing	cameras [ 0 ]
>14604	PrimaryExpression	0
>14605	Identifier	cameras
>14606	Identifier	tmp
>14607	Identifier	tmp
>14608	IdentifierDeclType	camera_params_t
>14609	ExpressionStatement	 
>14610	CallExpression	memcpy ( cameras_old , cameras , sizeof ( camera_params_t ) * 2 )
>14611	ArgumentList	cameras_old
>14612	Argument	sizeof ( camera_params_t ) * 2
>14613	MultiplicativeExpression	sizeof ( camera_params_t ) * 2
>14614	PrimaryExpression	2
>14615	SizeofExpr	sizeof ( camera_params_t )
>14616	SizeofOperand	camera_params_t
>14617	Sizeof	sizeof
>14618	Argument	cameras
>14619	Identifier	cameras
>14620	Argument	cameras_old
>14621	Identifier	cameras_old
>14622	Callee	memcpy
>14623	Identifier	memcpy
>14624	ExpressionStatement	 
>14625	CallExpression	memcpy ( points_old , points , sizeof ( v3_t ) * curr_num_pts )
>14626	ArgumentList	points_old
>14627	Argument	sizeof ( v3_t ) * curr_num_pts
>14628	MultiplicativeExpression	sizeof ( v3_t ) * curr_num_pts
>14629	Identifier	curr_num_pts
>14630	SizeofExpr	sizeof ( v3_t )
>14631	SizeofOperand	v3_t
>14632	Sizeof	sizeof
>14633	Argument	points
>14634	Identifier	points
>14635	Argument	points_old
>14636	Identifier	points_old
>14637	Callee	memcpy
>14638	Identifier	memcpy
>14639	ExpressionStatement	 
>14640	AssignmentExpr	points_old = new v3_t [ curr_num_pts ]
>14641	Identifier	curr_num_pts
>14642	Identifier	points_old
>14643	IdentifierDeclStatement	 
>14644	IdentifierDecl	* points_old
>14645	Identifier	points_old
>14646	IdentifierDeclType	v3_t *
>14647	IdentifierDeclStatement	 
>14648	IdentifierDecl	cameras_old [ 2 ]
>14649	PrimaryExpression	2
>14650	Identifier	cameras_old
>14651	IdentifierDeclType	camera_params_t [ 2 ]
>14652	Condition	 
>14653	Identifier	m_fix_necker
>14654	ExpressionStatement	 
>14655	CallExpression	printf ( \"  focal lengths
>14656	ArgumentList	\"  focal lengths
>14657	Argument	cameras [ 1 ] . f
>14658	MemberAccess	cameras [ 1 ] . f
>14659	Identifier	f
>14660	ArrayIndexing	cameras [ 1 ]
>14661	PrimaryExpression	1
>14662	Identifier	cameras
>14663	Argument	cameras [ 0 ] . f
>14664	MemberAccess	cameras [ 0 ] . f
>14665	Identifier	f
>14666	ArrayIndexing	cameras [ 0 ]
>14667	PrimaryExpression	0
>14668	Identifier	cameras
>14669	Argument	\"  focal lengths
>14670	PrimaryExpression	\"  focal lengths
>14671	Callee	printf
>14672	Identifier	printf
>14673	ExpressionStatement	 
>14674	Identifier	S
>14675	Statement	 
>14676	Statement	 
>14677	Statement	 
>14678	ExpressionStatement	 
>14679	AssignmentExpr	error0 = RunSFM ( curr_num_pts , 2 , 0 , false , cameras , points , added_order , colors , pt_views , \
>14680	CallExpression	RunSFM ( curr_num_pts , 2 , 0 , false , cameras , points , added_order , colors , pt_views , 0 , 0 , 0 , 0.0 , S , \
>14681	ArgumentList	curr_num_pts
>14682	Argument	! m_fix_necker
>14683	UnaryOp	! m_fix_necker
>14684	Identifier	m_fix_necker
>14685	UnaryOperator	!
>14686	Argument	NULL
>14687	Identifier	NULL
>14688	Argument	NULL
>14689	Identifier	NULL
>14690	Argument	NULL
>14691	Identifier	NULL
>14692	Argument	S
>14693	Identifier	S
>14694	Argument	0.0
>14695	PrimaryExpression	0.0
>14696	Argument	0
>14697	PrimaryExpression	0
>14698	Argument	0
>14699	PrimaryExpression	0
>14700	Argument	0
>14701	PrimaryExpression	0
>14702	Argument	pt_views
>14703	Identifier	pt_views
>14704	Argument	colors
>14705	Identifier	colors
>14706	Argument	added_order
>14707	Identifier	added_order
>14708	Argument	points
>14709	Identifier	points
>14710	Argument	cameras
>14711	Identifier	cameras
>14712	Argument	false
>14713	Identifier	false
>14714	Argument	0
>14715	PrimaryExpression	0
>14716	Argument	2
>14717	PrimaryExpression	2
>14718	Argument	curr_num_pts
>14719	Identifier	curr_num_pts
>14720	Callee	RunSFM
>14721	Identifier	RunSFM
>14722	Identifier	error0
>14723	IdentifierDeclStatement	 
>14724	IdentifierDecl	error0
>14725	Identifier	error0
>14726	IdentifierDeclType	double
>14727	IdentifierDeclStatement	 
>14728	IdentifierDecl	* S = new double [ 2 * 2 * cnp * cnp ]
>14729	AssignmentExpr	* S = new double [ 2 * 2 * cnp * cnp ]
>14730	MultiplicativeExpression	2 * 2 * cnp * cnp
>14731	MultiplicativeExpression	2 * cnp * cnp
>14732	MultiplicativeExpression	cnp * cnp
>14733	Identifier	cnp
>14734	Identifier	cnp
>14735	PrimaryExpression	2
>14736	PrimaryExpression	2
>14737	Identifier	S
>14738	Identifier	S
>14739	IdentifierDeclType	double *
>14740	IdentifierDeclStatement	 
>14741	IdentifierDecl	cnp = GetNumCameraParameters ( )
>14742	AssignmentExpr	cnp = GetNumCameraParameters ( )
>14743	CallExpression	GetNumCameraParameters ( )
>14744	ArgumentList	 
>14745	Callee	GetNumCameraParameters
>14746	Identifier	GetNumCameraParameters
>14747	Identifier	cnp
>14748	Identifier	cnp
>14749	IdentifierDeclType	int
>14750	ExpressionStatement	 
>14751	CallExpression	DumpOutputFile ( m_output_directory , \"bundle.init.out\" , num_images , 2 , curr_num_pts , added_order , cameras , \
>14752	ArgumentList	m_output_directory
>14753	Argument	pt_views
>14754	Identifier	pt_views
>14755	Argument	colors
>14756	Identifier	colors
>14757	Argument	points
>14758	Identifier	points
>14759	Argument	cameras
>14760	Identifier	cameras
>14761	Argument	added_order
>14762	Identifier	added_order
>14763	Argument	curr_num_pts
>14764	Identifier	curr_num_pts
>14765	Argument	2
>14766	PrimaryExpression	2
>14767	Argument	num_images
>14768	Identifier	num_images
>14769	Argument	\"bundle.init.out\"
>14770	PrimaryExpression	\"bundle.init.out\"
>14771	Argument	m_output_directory
>14772	Identifier	m_output_directory
>14773	Callee	DumpOutputFile
>14774	Identifier	DumpOutputFile
>14775	ExpressionStatement	 
>14776	AssignmentExpr	pt_count = curr_num_pts = SetupInitialCameraPair ( i_best , j_best , init_focal_length_0 , init_focal_\
>14777	AssignmentExpr	curr_num_pts = SetupInitialCameraPair ( i_best , j_best , init_focal_length_0 , init_focal_length_1 , \
>14778	CallExpression	SetupInitialCameraPair ( i_best , j_best , init_focal_length_0 , init_focal_length_1 , cameras , points , colors , \
>14779	ArgumentList	i_best
>14780	Argument	pt_views
>14781	Identifier	pt_views
>14782	Argument	colors
>14783	Identifier	colors
>14784	Argument	points
>14785	Identifier	points
>14786	Argument	cameras
>14787	Identifier	cameras
>14788	Argument	init_focal_length_1
>14789	Identifier	init_focal_length_1
>14790	Argument	init_focal_length_0
>14791	Identifier	init_focal_length_0
>14792	Argument	j_best
>14793	Identifier	j_best
>14794	Argument	i_best
>14795	Identifier	i_best
>14796	Callee	SetupInitialCameraPair
>14797	Identifier	SetupInitialCameraPair
>14798	Identifier	curr_num_pts
>14799	Identifier	pt_count
>14800	IdentifierDeclStatement	 
>14801	IdentifierDecl	init_focal_length_1 = 0.0
>14802	AssignmentExpr	init_focal_length_1 = 0.0
>14803	PrimaryExpression	0.0
>14804	Identifier	init_focal_length_1
>14805	Identifier	init_focal_length_1
>14806	IdentifierDeclType	double
>14807	IdentifierDecl	init_focal_length_0 = 0.0
>14808	AssignmentExpr	init_focal_length_0 = 0.0
>14809	PrimaryExpression	0.0
>14810	Identifier	init_focal_length_0
>14811	Identifier	init_focal_length_0
>14812	IdentifierDeclType	double
>14813	ExpressionStatement	 
>14814	Statement	 
>14815	Statement	 
>14816	Statement	 
>14817	Statement	 
>14818	Statement	 
>14819	Statement	 
>14820	Statement	 
>14821	Statement	 
>14822	Statement	 
>14823	Statement	 
>14824	Statement	 
>14825	ExpressionStatement	 
>14826	AssignmentExpr	added_order [ 1 ] = j_best
>14827	Identifier	j_best
>14828	ArrayIndexing	added_order [ 1 ]
>14829	PrimaryExpression	1
>14830	Identifier	added_order
>14831	ExpressionStatement	 
>14832	AssignmentExpr	added_order [ 0 ] = i_best
>14833	Identifier	i_best
>14834	ArrayIndexing	added_order [ 0 ]
>14835	PrimaryExpression	0
>14836	Identifier	added_order
>14837	ExpressionStatement	 
>14838	CallExpression	BundlePickInitialPair ( i_best , j_best , true )
>14839	ArgumentList	i_best
>14840	Argument	true
>14841	Identifier	true
>14842	Argument	j_best
>14843	Identifier	j_best
>14844	Argument	i_best
>14845	Identifier	i_best
>14846	Callee	BundlePickInitialPair
>14847	Identifier	BundlePickInitialPair
>14848	Condition	 
>14849	EqualityExpression	num_init_cams == 0
>14850	PrimaryExpression	0
>14851	Identifier	num_init_cams
>14852	IdentifierDeclStatement	 
>14853	IdentifierDecl	pt_count
>14854	Identifier	pt_count
>14855	IdentifierDeclType	int
>14856	IdentifierDeclStatement	 
>14857	IdentifierDecl	curr_num_pts
>14858	Identifier	curr_num_pts
>14859	IdentifierDeclType	int
>14860	IdentifierDecl	curr_num_cameras
>14861	Identifier	curr_num_cameras
>14862	IdentifierDeclType	int
>14863	IdentifierDeclStatement	 
>14864	IdentifierDecl	max_score = 0.0
>14865	AssignmentExpr	max_score = 0.0
>14866	PrimaryExpression	0.0
>14867	Identifier	max_score
>14868	Identifier	max_score
>14869	IdentifierDeclType	double
>14870	IdentifierDeclStatement	 
>14871	IdentifierDecl	max_matches = 0
>14872	AssignmentExpr	max_matches = 0
>14873	PrimaryExpression	0
>14874	Identifier	max_matches
>14875	Identifier	max_matches
>14876	IdentifierDeclType	int
>14877	IdentifierDecl	j_best = - 1
>14878	AssignmentExpr	j_best = - 1
>14879	UnaryOp	- 1
>14880	PrimaryExpression	1
>14881	UnaryOperator	-
>14882	Identifier	j_best
>14883	Identifier	j_best
>14884	IdentifierDeclType	int
>14885	IdentifierDecl	i_best = - 1
>14886	AssignmentExpr	i_best = - 1
>14887	UnaryOp	- 1
>14888	PrimaryExpression	1
>14889	UnaryOperator	-
>14890	Identifier	i_best
>14891	Identifier	i_best
>14892	IdentifierDeclType	int
>14893	ExpressionStatement	 
>14894	CallExpression	InitializeBundleAdjust ( num_init_cams , added_order , added_order_inv , cameras , points , colors , pt_views , \
>14895	ArgumentList	num_init_cams
>14896	Argument	m_use_constraints
>14897	Identifier	m_use_constraints
>14898	Argument	pt_views
>14899	Identifier	pt_views
>14900	Argument	colors
>14901	Identifier	colors
>14902	Argument	points
>14903	Identifier	points
>14904	Argument	cameras
>14905	Identifier	cameras
>14906	Argument	added_order_inv
>14907	Identifier	added_order_inv
>14908	Argument	added_order
>14909	Identifier	added_order
>14910	Argument	num_init_cams
>14911	Identifier	num_init_cams
>14912	Callee	InitializeBundleAdjust
>14913	Identifier	InitializeBundleAdjust
>14914	IdentifierDeclStatement	 
>14915	IdentifierDecl	num_init_cams = 0
>14916	AssignmentExpr	num_init_cams = 0
>14917	PrimaryExpression	0
>14918	Identifier	num_init_cams
>14919	Identifier	num_init_cams
>14920	IdentifierDeclType	int
>14921	IdentifierDeclStatement	 
>14922	IdentifierDecl	pt_views
>14923	Identifier	pt_views
>14924	IdentifierDeclType	std 
>14925	IdentifierDeclStatement	 
>14926	IdentifierDecl	* colors = new v3_t [ max_pts ]
>14927	AssignmentExpr	* colors = new v3_t [ max_pts ]
>14928	Identifier	max_pts
>14929	Identifier	max_pts
>14930	Identifier	colors
>14931	IdentifierDeclType	v3_t *
>14932	IdentifierDeclStatement	 
>14933	IdentifierDecl	* points = new v3_t [ max_pts ]
>14934	AssignmentExpr	* points = new v3_t [ max_pts ]
>14935	Identifier	max_pts
>14936	Identifier	max_pts
>14937	Identifier	points
>14938	IdentifierDeclType	v3_t *
>14939	IdentifierDeclStatement	 
>14940	IdentifierDecl	max_pts = ( int ) m_track_data . size ( )
>14941	AssignmentExpr	max_pts = ( int ) m_track_data . size ( )
>14942	CastExpression	( int ) m_track_data . size ( )
>14943	CallExpression	m_track_data . size ( )
>14944	ArgumentList	 
>14945	Callee	m_track_data . size
>14946	MemberAccess	m_track_data . size
>14947	Identifier	size
>14948	Identifier	m_track_data
>14949	CastTarget	int
>14950	Identifier	max_pts
>14951	Identifier	max_pts
>14952	IdentifierDeclType	int
>14953	IdentifierDeclStatement	 
>14954	IdentifierDecl	* cameras = new camera_params_t [ num_images ]
>14955	AssignmentExpr	* cameras = new camera_params_t [ num_images ]
>14956	Identifier	num_images
>14957	Identifier	num_images
>14958	Identifier	cameras
>14959	IdentifierDeclType	camera_params_t *
>14960	ForStatement	for ( int i = 0 ; i < ( int ) m_track_data . size ( ) ; i ++ )
>14961	CompoundStatement	 
>14962	ExpressionStatement	 
>14963	AssignmentExpr	m_track_data [ i ] . m_extra = - 1
>14964	UnaryOp	- 1
>14965	PrimaryExpression	1
>14966	UnaryOperator	-
>14967	MemberAccess	m_track_data [ i ] . m_extra
>14968	Identifier	m_extra
>14969	ArrayIndexing	m_track_data [ i ]
>14970	Identifier	i
>14971	Identifier	m_track_data
>14972	IncDecOp	 
>14973	IncDec	++
>14974	Identifier	i
>14975	Condition	 
>14976	RelationalExpression	i < ( int ) m_track_data . size ( )
>14977	CastExpression	( int ) m_track_data . size ( )
>14978	CallExpression	m_track_data . size ( )
>14979	ArgumentList	 
>14980	Callee	m_track_data . size
>14981	MemberAccess	m_track_data . size
>14982	Identifier	size
>14983	Identifier	m_track_data
>14984	CastTarget	int
>14985	Identifier	i
>14986	ForInit	 
>14987	IdentifierDeclStatement	int i = 0 ;
>14988	IdentifierDecl	i = 0
>14989	AssignmentExpr	i = 0
>14990	PrimaryExpression	0
>14991	Identifier	i
>14992	Identifier	i
>14993	IdentifierDeclType	int
>14994	IdentifierDeclStatement	 
>14995	IdentifierDecl	* added_order_inv = new int [ num_images ]
>14996	AssignmentExpr	* added_order_inv = new int [ num_images ]
>14997	Identifier	num_images
>14998	Identifier	num_images
>14999	Identifier	added_order_inv
>15000	IdentifierDeclType	int *
>15001	IdentifierDeclStatement	 
>15002	IdentifierDecl	* added_order = new int [ num_images ]
>15003	AssignmentExpr	* added_order = new int [ num_images ]
>15004	Identifier	num_images
>15005	Identifier	num_images
>15006	Identifier	added_order
>15007	IdentifierDeclType	int *
>15008	IdentifierDeclStatement	 
>15009	IdentifierDecl	num_images = GetNumImages ( )
>15010	AssignmentExpr	num_images = GetNumImages ( )
>15011	CallExpression	GetNumImages ( )
>15012	ArgumentList	 
>15013	Callee	GetNumImages
>15014	Identifier	GetNumImages
>15015	Identifier	num_images
>15016	Identifier	num_images
>15017	IdentifierDeclType	int
>15018	ExpressionStatement	 
>15019	CallExpression	OutputImageGraph ( \"graph.partition.dot\" , false )
>15020	ArgumentList	\"graph.partition.dot\"
>15021	Argument	false
>15022	Identifier	false
>15023	Argument	\"graph.partition.dot\"
>15024	PrimaryExpression	\"graph.partition.dot\"
>15025	Callee	OutputImageGraph
>15026	Identifier	OutputImageGraph
>15027	ExpressionStatement	 
>15028	CallExpression	PartitionGraph ( graph , interior )
>15029	ArgumentList	graph
>15030	Argument	interior
>15031	Identifier	interior
>15032	Argument	graph
>15033	Identifier	graph
>15034	Callee	PartitionGraph
>15035	Identifier	PartitionGraph
>15036	IdentifierDeclStatement	 
>15037	IdentifierDecl	graph = ComputeMSTWorkingGraph ( interior )
>15038	AssignmentExpr	graph = ComputeMSTWorkingGraph ( interior )
>15039	CallExpression	ComputeMSTWorkingGraph ( interior )
>15040	ArgumentList	interior
>15041	Argument	interior
>15042	Identifier	interior
>15043	Callee	ComputeMSTWorkingGraph
>15044	Identifier	ComputeMSTWorkingGraph
>15045	Identifier	graph
>15046	Identifier	graph
>15047	IdentifierDeclType	ImageGraph
>15048	IdentifierDeclStatement	 
>15049	IdentifierDecl	interior
>15050	Identifier	interior
>15051	IdentifierDeclType	std 
>15052	ExpressionStatement	 
>15053	CallExpression	CreateWorkingImageGraphLargestComponent ( )
>15054	ArgumentList	 
>15055	Callee	CreateWorkingImageGraphLargestComponent
>15056	Identifier	CreateWorkingImageGraphLargestComponent
>15057	ExpressionStatement	 
>15058	CallExpression	CreateImageGraph ( )
>15059	ArgumentList	 
>15060	Callee	CreateImageGraph
>15061	Identifier	CreateImageGraph
>15062	ExpressionStatement	 
>15063	CallExpression	ComputeImageGraphLayout ( )
>15064	ArgumentList	 
>15065	Callee	ComputeImageGraphLayout
>15066	Identifier	ComputeImageGraphLayout
>15067	ExpressionStatement	 
>15068	CallExpression	ComputeGeometricConstraints ( )
>15069	ArgumentList	 
>15070	Callee	ComputeGeometricConstraints
>15071	Identifier	ComputeGeometricConstraints
>15072	IdentifierDeclStatement	 
>15073	IdentifierDecl	start = clock ( )
>15074	AssignmentExpr	start = clock ( )
>15075	CallExpression	clock ( )
>15076	ArgumentList	 
>15077	Callee	clock
>15078	Identifier	clock
>15079	Identifier	start
>15080	Identifier	start
>15081	IdentifierDeclType	clock_t
>15254	FunctionDef	RefineCameraParameters (const ImageData & data , int num_points , v3_t * points , v2_t * projs , int * pt_idxs , \
>15255	ParameterList	const ImageData & data , int num_points , v3_t * points , v2_t * projs , int * pt_idxs , camera_params_t * camera , \
>15256	Parameter	 
>15257	Identifier	max_proj_error_threshold
>15258	ParameterType	double
>15259	Parameter	 
>15260	Identifier	min_proj_error_threshold
>15261	ParameterType	double
>15262	Parameter	 
>15263	Identifier	estimate_distortion
>15264	ParameterType	bool
>15265	Parameter	 
>15266	Identifier	optimize_for_fisheye
>15267	ParameterType	bool
>15268	Parameter	 
>15269	Identifier	remove_outliers
>15270	ParameterType	bool
>15271	Parameter	 
>15272	Identifier	adjust_focal
>15273	ParameterType	bool
>15274	Parameter	 
>15275	Identifier	error_out
>15276	ParameterType	double *
>15277	Parameter	 
>15278	Identifier	camera
>15279	ParameterType	camera_params_t *
>15280	Parameter	 
>15281	Identifier	pt_idxs
>15282	ParameterType	int *
>15283	Parameter	 
>15284	Identifier	projs
>15285	ParameterType	v2_t *
>15286	Parameter	 
>15287	Identifier	points
>15288	ParameterType	v3_t *
>15289	Parameter	 
>15290	Identifier	num_points
>15291	ParameterType	int
>15292	Parameter	 
>15293	Identifier	data
>15294	ParameterType	const ImageData &
>15295	ReturnType	std 
>15296	CompoundStatement	 
>15297	ReturnStatement	 
>15298	Identifier	inliers
>15299	ExpressionStatement	 
>15300	Identifier	projs_curr
>15301	Statement	 
>15302	Statement	 
>15303	Statement	 
>15304	ExpressionStatement	 
>15305	Identifier	points_curr
>15306	Statement	 
>15307	Statement	 
>15308	Statement	 
>15309	ExpressionStatement	 
>15310	Statement	 
>15311	Statement	 
>15312	Statement	 
>15313	Statement	 
>15314	Statement	 
>15315	Statement	 
>15316	Statement	 
>15317	Statement	 
>15318	Statement	 
>15319	Statement	 
>15320	Statement	 
>15321	Statement	 
>15322	Statement	 
>15323	WhileStatement	while ( 1 )
>15324	CompoundStatement	 
>15325	IfStatement	if ( error_out != NULL )
>15326	CompoundStatement	 
>15327	ExpressionStatement	 
>15328	AssignmentExpr	* error_out = error
>15329	Identifier	error
>15330	UnaryOp	* error_out
>15331	Identifier	error_out
>15332	UnaryOperator	*
>15333	Condition	 
>15334	EqualityExpression	error_out != NULL
>15335	Identifier	NULL
>15336	Identifier	error_out
>15337	ExpressionStatement	 
>15338	IncDecOp	round ++
>15339	IncDec	++
>15340	Identifier	round
>15341	IfStatement	if ( count == 0 )
>15342	BreakStatement	 
>15343	Condition	 
>15344	EqualityExpression	count == 0
>15345	PrimaryExpression	0
>15346	Identifier	count
>15347	ExpressionStatement	 
>15348	AssignmentExpr	inliers = inliers_next
>15349	Identifier	inliers_next
>15350	Identifier	inliers
>15351	ExpressionStatement	 
>15352	AssignmentExpr	num_points_curr = count
>15353	Identifier	count
>15354	Identifier	num_points_curr
>15355	IfStatement	if ( count == num_points_curr )
>15356	BreakStatement	 
>15357	Condition	 
>15358	EqualityExpression	count == num_points_curr
>15359	Identifier	num_points_curr
>15360	Identifier	count
>15361	ExpressionStatement	 
>15362	AssignmentExpr	projs_curr = projs_next
>15363	Identifier	projs_next
>15364	Identifier	projs_curr
>15365	ExpressionStatement	 
>15366	AssignmentExpr	points_curr = points_next
>15367	Identifier	points_next
>15368	Identifier	points_curr
>15369	ExpressionStatement	 
>15370	Identifier	errors
>15371	Statement	 
>15372	Statement	 
>15373	Statement	 
>15374	ExpressionStatement	 
>15375	Identifier	projs_curr
>15376	Statement	 
>15377	Statement	 
>15378	Statement	 
>15379	ExpressionStatement	 
>15380	Identifier	points_curr
>15381	Statement	 
>15382	Statement	 
>15383	Statement	 
>15384	ForStatement	for ( int i = 0 ; i < NUM_ERROR_BINS ; i ++ )
>15385	CompoundStatement	 
>15386	ExpressionStatement	 
>15387	CallExpression	printf ( \"   E[%0.3e--%0.3e]
>15388	ArgumentList	\"   E[%0.3e--%0.3e]
>15389	Argument	bin_size / ( double ) num_points_curr
>15390	MultiplicativeExpression	bin_size / ( double ) num_points_curr
>15391	CastExpression	( double ) num_points_curr
>15392	Identifier	num_points_curr
>15393	CastTarget	double
>15394	Identifier	bin_size
>15395	Argument	bin_size
>15396	Identifier	bin_size
>15397	Argument	max
>15398	Identifier	max
>15399	Argument	max - pr_step
>15400	AdditiveExpression	max - pr_step
>15401	Identifier	pr_step
>15402	Identifier	max
>15403	Argument	\"   E[%0.3e--%0.3e]
>15404	PrimaryExpression	\"   E[%0.3e--%0.3e]
>15405	Callee	printf
>15406	Identifier	printf
>15407	IdentifierDeclStatement	 
>15408	IdentifierDecl	bin_size = idx_count - start
>15409	AssignmentExpr	bin_size = idx_count - start
>15410	AdditiveExpression	idx_count - start
>15411	Identifier	start
>15412	Identifier	idx_count
>15413	Identifier	bin_size
>15414	Identifier	bin_size
>15415	IdentifierDeclType	int
>15416	WhileStatement	while ( idx_count < num_points_curr && errors [ idx_count ] <= max )
>15417	ExpressionStatement	 
>15418	IncDecOp	idx_count ++
>15419	IncDec	++
>15420	Identifier	idx_count
>15421	Condition	 
>15422	AndExpression	idx_count < num_points_curr && errors [ idx_count ] <= max
>15423	RelationalExpression	errors [ idx_count ] <= max
>15424	Identifier	max
>15425	ArrayIndexing	errors [ idx_count ]
>15426	Identifier	idx_count
>15427	Identifier	errors
>15428	RelationalExpression	idx_count < num_points_curr
>15429	Identifier	num_points_curr
>15430	Identifier	idx_count
>15431	IdentifierDeclStatement	 
>15432	IdentifierDecl	start = idx_count
>15433	AssignmentExpr	start = idx_count
>15434	Identifier	idx_count
>15435	Identifier	idx_count
>15436	Identifier	start
>15437	IdentifierDeclType	int
>15438	IdentifierDeclStatement	 
>15439	IdentifierDecl	max = pr_min + ( i + 1 ) * pr_step
>15440	AssignmentExpr	max = pr_min + ( i + 1 ) * pr_step
>15441	AdditiveExpression	pr_min + ( i + 1 ) * pr_step
>15442	MultiplicativeExpression	( i + 1 ) * pr_step
>15443	Identifier	pr_step
>15444	AdditiveExpression	i + 1
>15445	PrimaryExpression	1
>15446	Identifier	i
>15447	Identifier	pr_min
>15448	Identifier	max
>15449	Identifier	max
>15450	IdentifierDeclType	double
>15451	IncDecOp	 
>15452	IncDec	++
>15453	Identifier	i
>15454	Condition	 
>15455	RelationalExpression	i < NUM_ERROR_BINS
>15456	Identifier	NUM_ERROR_BINS
>15457	Identifier	i
>15458	ForInit	 
>15459	IdentifierDeclStatement	int i = 0 ;
>15460	IdentifierDecl	i = 0
>15461	AssignmentExpr	i = 0
>15462	PrimaryExpression	0
>15463	Identifier	i
>15464	Identifier	i
>15465	IdentifierDeclType	int
>15466	IdentifierDeclStatement	 
>15467	IdentifierDecl	idx_count = 0
>15468	AssignmentExpr	idx_count = 0
>15469	PrimaryExpression	0
>15470	Identifier	idx_count
>15471	Identifier	idx_count
>15472	IdentifierDeclType	int
>15473	IdentifierDeclStatement	 
>15474	IdentifierDecl	pr_step = ( pr_max - pr_min ) / NUM_ERROR_BINS
>15475	AssignmentExpr	pr_step = ( pr_max - pr_min ) / NUM_ERROR_BINS
>15476	MultiplicativeExpression	( pr_max - pr_min ) / NUM_ERROR_BINS
>15477	Identifier	NUM_ERROR_BINS
>15478	AdditiveExpression	pr_max - pr_min
>15479	Identifier	pr_min
>15480	Identifier	pr_max
>15481	Identifier	pr_step
>15482	Identifier	pr_step
>15483	IdentifierDeclType	double
>15484	IdentifierDeclStatement	 
>15485	IdentifierDecl	pr_max = errors [ num_points_curr - 1 ]
>15486	AssignmentExpr	pr_max = errors [ num_points_curr - 1 ]
>15487	ArrayIndexing	errors [ num_points_curr - 1 ]
>15488	AdditiveExpression	num_points_curr - 1
>15489	PrimaryExpression	1
>15490	Identifier	num_points_curr
>15491	Identifier	errors
>15492	Identifier	pr_max
>15493	Identifier	pr_max
>15494	IdentifierDeclType	double
>15495	IdentifierDeclStatement	 
>15496	IdentifierDecl	pr_min = errors [ 0 ]
>15497	AssignmentExpr	pr_min = errors [ 0 ]
>15498	ArrayIndexing	errors [ 0 ]
>15499	PrimaryExpression	0
>15500	Identifier	errors
>15501	Identifier	pr_min
>15502	Identifier	pr_min
>15503	IdentifierDeclType	double
>15504	ExpressionStatement	 
>15505	CallExpression	qsort ( errors , num_points_curr , sizeof ( double ) , compare_doubles )
>15506	ArgumentList	errors
>15507	Argument	compare_doubles
>15508	Identifier	compare_doubles
>15509	Argument	sizeof ( double )
>15510	SizeofExpr	sizeof ( double )
>15511	SizeofOperand	double
>15512	Sizeof	sizeof
>15513	Argument	num_points_curr
>15514	Identifier	num_points_curr
>15515	Argument	errors
>15516	Identifier	errors
>15517	Callee	qsort
>15518	Identifier	qsort
>15519	ForStatement	for ( int i = 0 ; i < num_points_curr ; i ++ )
>15520	CompoundStatement	 
>15521	IfStatement	if ( errors [ i ] < threshold )
>15522	ElseStatement	else
>15523	CompoundStatement	 
>15524	IfStatement	if ( pt_idxs != NULL )
>15525	ElseStatement	else
>15526	CompoundStatement	 
>15527	ExpressionStatement	 
>15528	Statement	 
>15529	Statement	 
>15530	Statement	 
>15531	Statement	 
>15532	Statement	 
>15533	Statement	 
>15534	Statement	 
>15535	Statement	 
>15536	Statement	 
>15537	Statement	 
>15538	CompoundStatement	 
>15539	ExpressionStatement	 
>15540	Statement	 
>15541	Statement	 
>15542	Statement	 
>15543	Statement	 
>15544	Statement	 
>15545	Statement	 
>15546	Statement	 
>15547	Statement	 
>15548	Statement	 
>15549	Statement	 
>15550	Statement	 
>15551	Statement	 
>15552	Statement	 
>15553	Statement	 
>15554	Statement	 
>15555	Condition	 
>15556	EqualityExpression	pt_idxs != NULL
>15557	Identifier	NULL
>15558	Identifier	pt_idxs
>15559	CompoundStatement	 
>15560	ExpressionStatement	 
>15561	IncDecOp	count ++
>15562	IncDec	++
>15563	Identifier	count
>15564	ExpressionStatement	 
>15565	AssignmentExpr	projs_next [ count ] = projs_curr [ i ]
>15566	ArrayIndexing	projs_curr [ i ]
>15567	Identifier	i
>15568	Identifier	projs_curr
>15569	ArrayIndexing	projs_next [ count ]
>15570	Identifier	count
>15571	Identifier	projs_next
>15572	ExpressionStatement	 
>15573	AssignmentExpr	points_next [ count ] = points_curr [ i ]
>15574	ArrayIndexing	points_curr [ i ]
>15575	Identifier	i
>15576	Identifier	points_curr
>15577	ArrayIndexing	points_next [ count ]
>15578	Identifier	count
>15579	Identifier	points_next
>15580	ExpressionStatement	 
>15581	CallExpression	inliers_next . push_back ( inliers [ i ] )
>15582	ArgumentList	inliers [ i ]
>15583	Argument	inliers [ i ]
>15584	ArrayIndexing	inliers [ i ]
>15585	Identifier	i
>15586	Identifier	inliers
>15587	Callee	inliers_next . push_back
>15588	MemberAccess	inliers_next . push_back
>15589	Identifier	push_back
>15590	Identifier	inliers_next
>15591	Condition	 
>15592	RelationalExpression	errors [ i ] < threshold
>15593	Identifier	threshold
>15594	ArrayIndexing	errors [ i ]
>15595	Identifier	i
>15596	Identifier	errors
>15597	IncDecOp	 
>15598	IncDec	++
>15599	Identifier	i
>15600	Condition	 
>15601	RelationalExpression	i < num_points_curr
>15602	Identifier	num_points_curr
>15603	Identifier	i
>15604	ForInit	 
>15605	IdentifierDeclStatement	int i = 0 ;
>15606	IdentifierDecl	i = 0
>15607	AssignmentExpr	i = 0
>15608	PrimaryExpression	0
>15609	Identifier	i
>15610	Identifier	i
>15611	IdentifierDeclType	int
>15612	ExpressionStatement	 
>15613	CallExpression	printf ( \"[RefineCameraParameters] Threshold = %0.3f\n\" , threshold )
>15614	ArgumentList	\"[RefineCameraParameters] Threshold = %0.3f\n\"
>15615	Argument	threshold
>15616	Identifier	threshold
>15617	Argument	\"[RefineCameraParameters] Threshold = %0.3f\n\"
>15618	PrimaryExpression	\"[RefineCameraParameters] Threshold = %0.3f\n\"
>15619	Callee	printf
>15620	Identifier	printf
>15621	ExpressionStatement	 
>15622	AssignmentExpr	threshold = CLAMP ( threshold , min_proj_error_threshold , max_proj_error_threshold )
>15623	CallExpression	CLAMP ( threshold , min_proj_error_threshold , max_proj_error_threshold )
>15624	ArgumentList	threshold
>15625	Argument	max_proj_error_threshold
>15626	Identifier	max_proj_error_threshold
>15627	Argument	min_proj_error_threshold
>15628	Identifier	min_proj_error_threshold
>15629	Argument	threshold
>15630	Identifier	threshold
>15631	Callee	CLAMP
>15632	Identifier	CLAMP
>15633	Identifier	threshold
>15634	IdentifierDeclStatement	 
>15635	IdentifierDecl	threshold = 1.2 * NUM_STDDEV * med
>15636	AssignmentExpr	threshold = 1.2 * NUM_STDDEV * med
>15637	MultiplicativeExpression	1.2 * NUM_STDDEV * med
>15638	MultiplicativeExpression	NUM_STDDEV * med
>15639	Identifier	med
>15640	Identifier	NUM_STDDEV
>15641	PrimaryExpression	1.2
>15642	Identifier	threshold
>15643	Identifier	threshold
>15644	IdentifierDeclType	double
>15645	IdentifierDeclStatement	 
>15646	IdentifierDecl	med = kth_element_copy ( num_points_curr , iround ( 0.95 * num_points_curr ) , errors )
>15647	AssignmentExpr	med = kth_element_copy ( num_points_curr , iround ( 0.95 * num_points_curr ) , errors )
>15648	CallExpression	kth_element_copy ( num_points_curr , iround ( 0.95 * num_points_curr ) , errors )
>15649	ArgumentList	num_points_curr
>15650	Argument	errors
>15651	Identifier	errors
>15652	Argument	iround ( 0.95 * num_points_curr )
>15653	CallExpression	iround ( 0.95 * num_points_curr )
>15654	ArgumentList	0.95 * num_points_curr
>15655	Argument	0.95 * num_points_curr
>15656	MultiplicativeExpression	0.95 * num_points_curr
>15657	Identifier	num_points_curr
>15658	PrimaryExpression	0.95
>15659	Callee	iround
>15660	Identifier	iround
>15661	Argument	num_points_curr
>15662	Identifier	num_points_curr
>15663	Callee	kth_element_copy
>15664	Identifier	kth_element_copy
>15665	Identifier	med
>15666	Identifier	med
>15667	IdentifierDeclType	double
>15668	ExpressionStatement	 
>15669	CallExpression	printf ( \"[RefineCameraParameters] Error
>15670	ArgumentList	\"[RefineCameraParameters] Error
>15671	Argument	error / num_points_curr
>15672	MultiplicativeExpression	error / num_points_curr
>15673	Identifier	num_points_curr
>15674	Identifier	error
>15675	Argument	\"[RefineCameraParameters] Error
>15676	PrimaryExpression	\"[RefineCameraParameters] Error
>15677	Callee	printf
>15678	Identifier	printf
>15679	ForStatement	for ( int i = 0 ; i < num_points_curr ; i ++ )
>15680	CompoundStatement	 
>15681	ExpressionStatement	 
>15682	AssignmentExpr	error += diff
>15683	Identifier	diff
>15684	Identifier	error
>15685	ExpressionStatement	 
>15686	AssignmentExpr	errors [ i ] = diff
>15687	Identifier	diff
>15688	ArrayIndexing	errors [ i ]
>15689	Identifier	i
>15690	Identifier	errors
>15691	IdentifierDeclStatement	 
>15692	IdentifierDecl	diff = sqrt ( dx * dx + dy * dy )
>15693	AssignmentExpr	diff = sqrt ( dx * dx + dy * dy )
>15694	CallExpression	sqrt ( dx * dx + dy * dy )
>15695	ArgumentList	dx * dx + dy * dy
>15696	Argument	dx * dx + dy * dy
>15697	AdditiveExpression	dx * dx + dy * dy
>15698	MultiplicativeExpression	dy * dy
>15699	Identifier	dy
>15700	Identifier	dy
>15701	MultiplicativeExpression	dx * dx
>15702	Identifier	dx
>15703	Identifier	dx
>15704	Callee	sqrt
>15705	Identifier	sqrt
>15706	Identifier	diff
>15707	Identifier	diff
>15708	IdentifierDeclType	double
>15709	IdentifierDeclStatement	 
>15710	IdentifierDecl	dy = Vy ( pr ) - Vy ( projs_curr [ i ] )
>15711	AssignmentExpr	dy = Vy ( pr ) - Vy ( projs_curr [ i ] )
>15712	AdditiveExpression	Vy ( pr ) - Vy ( projs_curr [ i ] )
>15713	CallExpression	Vy ( projs_curr [ i ] )
>15714	ArgumentList	projs_curr [ i ]
>15715	Argument	projs_curr [ i ]
>15716	ArrayIndexing	projs_curr [ i ]
>15717	Identifier	i
>15718	Identifier	projs_curr
>15719	Callee	Vy
>15720	Identifier	Vy
>15721	CallExpression	Vy ( pr )
>15722	ArgumentList	pr
>15723	Argument	pr
>15724	Identifier	pr
>15725	Callee	Vy
>15726	Identifier	Vy
>15727	Identifier	dy
>15728	Identifier	dy
>15729	IdentifierDeclType	double
>15730	IdentifierDeclStatement	 
>15731	IdentifierDecl	dx = Vx ( pr ) - Vx ( projs_curr [ i ] )
>15732	AssignmentExpr	dx = Vx ( pr ) - Vx ( projs_curr [ i ] )
>15733	AdditiveExpression	Vx ( pr ) - Vx ( projs_curr [ i ] )
>15734	CallExpression	Vx ( projs_curr [ i ] )
>15735	ArgumentList	projs_curr [ i ]
>15736	Argument	projs_curr [ i ]
>15737	ArrayIndexing	projs_curr [ i ]
>15738	Identifier	i
>15739	Identifier	projs_curr
>15740	Callee	Vx
>15741	Identifier	Vx
>15742	CallExpression	Vx ( pr )
>15743	ArgumentList	pr
>15744	Argument	pr
>15745	Identifier	pr
>15746	Callee	Vx
>15747	Identifier	Vx
>15748	Identifier	dx
>15749	Identifier	dx
>15750	IdentifierDeclType	double
>15751	IfStatement	if ( optimize_for_fisheye )
>15752	CompoundStatement	 
>15753	ExpressionStatement	 
>15754	CallExpression	data . DistortPoint ( x , y , Vx ( pr ) , Vy ( pr ) )
>15755	ArgumentList	x
>15756	Argument	Vy ( pr )
>15757	CallExpression	Vy ( pr )
>15758	ArgumentList	pr
>15759	Argument	pr
>15760	Identifier	pr
>15761	Callee	Vy
>15762	Identifier	Vy
>15763	Argument	Vx ( pr )
>15764	CallExpression	Vx ( pr )
>15765	ArgumentList	pr
>15766	Argument	pr
>15767	Identifier	pr
>15768	Callee	Vx
>15769	Identifier	Vx
>15770	Argument	y
>15771	Identifier	y
>15772	Argument	x
>15773	Identifier	x
>15774	Callee	data . DistortPoint
>15775	MemberAccess	data . DistortPoint
>15776	Identifier	DistortPoint
>15777	Identifier	data
>15778	IdentifierDeclStatement	 
>15779	IdentifierDecl	y = Vy ( pr )
>15780	AssignmentExpr	y = Vy ( pr )
>15781	CallExpression	Vy ( pr )
>15782	ArgumentList	pr
>15783	Argument	pr
>15784	Identifier	pr
>15785	Callee	Vy
>15786	Identifier	Vy
>15787	Identifier	y
>15788	Identifier	y
>15789	IdentifierDeclType	double
>15790	IdentifierDeclStatement	 
>15791	IdentifierDecl	x = Vx ( pr )
>15792	AssignmentExpr	x = Vx ( pr )
>15793	CallExpression	Vx ( pr )
>15794	ArgumentList	pr
>15795	Argument	pr
>15796	Identifier	pr
>15797	Callee	Vx
>15798	Identifier	Vx
>15799	Identifier	x
>15800	Identifier	x
>15801	IdentifierDeclType	double
>15802	Condition	 
>15803	Identifier	optimize_for_fisheye
>15804	IdentifierDeclStatement	 
>15805	IdentifierDecl	pr = sfm_project_final ( camera , points_curr [ i ] , 1 , estimate_distortion ? 1 
>15806	AssignmentExpr	pr = sfm_project_final ( camera , points_curr [ i ] , 1 , estimate_distortion ? 1 
>15807	CallExpression	sfm_project_final ( camera , points_curr [ i ] , 1 , estimate_distortion ? 1 
>15808	ArgumentList	camera
>15809	Argument	estimate_distortion ? 1 
>15810	ConditionalExpression	estimate_distortion ? 1 
>15811	PrimaryExpression	0
>15812	PrimaryExpression	1
>15813	Condition	estimate_distortion
>15814	Identifier	estimate_distortion
>15815	Argument	1
>15816	PrimaryExpression	1
>15817	Argument	points_curr [ i ]
>15818	ArrayIndexing	points_curr [ i ]
>15819	Identifier	i
>15820	Identifier	points_curr
>15821	Argument	camera
>15822	Identifier	camera
>15823	Callee	sfm_project_final
>15824	Identifier	sfm_project_final
>15825	Identifier	pr
>15826	Identifier	pr
>15827	IdentifierDeclType	v2_t
>15828	IncDecOp	 
>15829	IncDec	++
>15830	Identifier	i
>15831	Condition	 
>15832	RelationalExpression	i < num_points_curr
>15833	Identifier	num_points_curr
>15834	Identifier	i
>15835	ForInit	 
>15836	IdentifierDeclStatement	int i = 0 ;
>15837	IdentifierDecl	i = 0
>15838	AssignmentExpr	i = 0
>15839	PrimaryExpression	0
>15840	Identifier	i
>15841	Identifier	i
>15842	IdentifierDeclType	int
>15843	IdentifierDeclStatement	 
>15844	IdentifierDecl	* errors = new double [ num_points_curr ]
>15845	AssignmentExpr	* errors = new double [ num_points_curr ]
>15846	Identifier	num_points_curr
>15847	Identifier	num_points_curr
>15848	Identifier	errors
>15849	IdentifierDeclType	double *
>15850	IdentifierDeclStatement	 
>15851	IdentifierDecl	inliers_next
>15852	Identifier	inliers_next
>15853	IdentifierDeclType	std 
>15854	IdentifierDeclStatement	 
>15855	IdentifierDecl	error = 0.0
>15856	AssignmentExpr	error = 0.0
>15857	PrimaryExpression	0.0
>15858	Identifier	error
>15859	Identifier	error
>15860	IdentifierDeclType	double
>15861	IdentifierDeclStatement	 
>15862	IdentifierDecl	count = 0
>15863	AssignmentExpr	count = 0
>15864	PrimaryExpression	0
>15865	Identifier	count
>15866	Identifier	count
>15867	IdentifierDeclType	int
>15868	IdentifierDeclStatement	 
>15869	IdentifierDecl	* projs_next = new v2_t [ num_points ]
>15870	AssignmentExpr	* projs_next = new v2_t [ num_points ]
>15871	Identifier	num_points
>15872	Identifier	num_points
>15873	Identifier	projs_next
>15874	IdentifierDeclType	v2_t *
>15875	IdentifierDeclStatement	 
>15876	IdentifierDecl	* points_next = new v3_t [ num_points ]
>15877	AssignmentExpr	* points_next = new v3_t [ num_points ]
>15878	Identifier	num_points
>15879	Identifier	num_points
>15880	Identifier	points_next
>15881	IdentifierDeclType	v3_t *
>15882	IfStatement	if ( ! remove_outliers )
>15883	BreakStatement	 
>15884	Condition	 
>15885	UnaryOp	! remove_outliers
>15886	Identifier	remove_outliers
>15887	UnaryOperator	!
>15888	ExpressionStatement	 
>15889	CallExpression	camera_refine ( num_points_curr , points_curr , projs_curr , camera , adjust_focal ? 1 
>15890	ArgumentList	num_points_curr
>15891	Argument	estimate_distortion ? 1 
>15892	ConditionalExpression	estimate_distortion ? 1 
>15893	PrimaryExpression	0
>15894	PrimaryExpression	1
>15895	Condition	estimate_distortion
>15896	Identifier	estimate_distortion
>15897	Argument	adjust_focal ? 1 
>15898	ConditionalExpression	adjust_focal ? 1 
>15899	PrimaryExpression	0
>15900	PrimaryExpression	1
>15901	Condition	adjust_focal
>15902	Identifier	adjust_focal
>15903	Argument	camera
>15904	Identifier	camera
>15905	Argument	projs_curr
>15906	Identifier	projs_curr
>15907	Argument	points_curr
>15908	Identifier	points_curr
>15909	Argument	num_points_curr
>15910	Identifier	num_points_curr
>15911	Callee	camera_refine
>15912	Identifier	camera_refine
>15913	ExpressionStatement	 
>15914	CallExpression	printf ( \"[RefineCameraParameters] Calling with %d points\n\" , num_points_curr )
>15915	ArgumentList	\"[RefineCameraParameters] Calling with %d points\n\"
>15916	Argument	num_points_curr
>15917	Identifier	num_points_curr
>15918	Argument	\"[RefineCameraParameters] Calling with %d points\n\"
>15919	PrimaryExpression	\"[RefineCameraParameters] Calling with %d points\n\"
>15920	Callee	printf
>15921	Identifier	printf
>15922	Condition	 
>15923	PrimaryExpression	1
>15924	ExpressionStatement	 
>15925	CallExpression	camera_refine ( num_points_curr , points_curr , projs_curr , camera , 0 , 0 )
>15926	ArgumentList	num_points_curr
>15927	Argument	0
>15928	PrimaryExpression	0
>15929	Argument	0
>15930	PrimaryExpression	0
>15931	Argument	camera
>15932	Identifier	camera
>15933	Argument	projs_curr
>15934	Identifier	projs_curr
>15935	Argument	points_curr
>15936	Identifier	points_curr
>15937	Argument	num_points_curr
>15938	Identifier	num_points_curr
>15939	Callee	camera_refine
>15940	Identifier	camera_refine
>15941	IdentifierDeclStatement	 
>15942	IdentifierDecl	round = 0
>15943	AssignmentExpr	round = 0
>15944	PrimaryExpression	0
>15945	Identifier	round
>15946	Identifier	round
>15947	IdentifierDeclType	int
>15948	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>15949	ExpressionStatement	 
>15950	CallExpression	inliers . push_back ( i )
>15951	ArgumentList	i
>15952	Argument	i
>15953	Identifier	i
>15954	Callee	inliers . push_back
>15955	MemberAccess	inliers . push_back
>15956	Identifier	push_back
>15957	Identifier	inliers
>15958	IncDecOp	 
>15959	IncDec	++
>15960	Identifier	i
>15961	Condition	 
>15962	RelationalExpression	i < num_points
>15963	Identifier	num_points
>15964	Identifier	i
>15965	ForInit	 
>15966	IdentifierDeclStatement	int i = 0 ;
>15967	IdentifierDecl	i = 0
>15968	AssignmentExpr	i = 0
>15969	PrimaryExpression	0
>15970	Identifier	i
>15971	Identifier	i
>15972	IdentifierDeclType	int
>15973	IdentifierDeclStatement	 
>15974	IdentifierDecl	inliers
>15975	Identifier	inliers
>15976	IdentifierDeclType	std 
>15977	ExpressionStatement	 
>15978	CallExpression	memcpy ( projs_curr , projs , num_points * sizeof ( v2_t ) )
>15979	ArgumentList	projs_curr
>15980	Argument	num_points * sizeof ( v2_t )
>15981	MultiplicativeExpression	num_points * sizeof ( v2_t )
>15982	SizeofExpr	sizeof ( v2_t )
>15983	SizeofOperand	v2_t
>15984	Sizeof	sizeof
>15985	Identifier	num_points
>15986	Argument	projs
>15987	Identifier	projs
>15988	Argument	projs_curr
>15989	Identifier	projs_curr
>15990	Callee	memcpy
>15991	Identifier	memcpy
>15992	ExpressionStatement	 
>15993	CallExpression	memcpy ( points_curr , points , num_points * sizeof ( v3_t ) )
>15994	ArgumentList	points_curr
>15995	Argument	num_points * sizeof ( v3_t )
>15996	MultiplicativeExpression	num_points * sizeof ( v3_t )
>15997	SizeofExpr	sizeof ( v3_t )
>15998	SizeofOperand	v3_t
>15999	Sizeof	sizeof
>16000	Identifier	num_points
>16001	Argument	points
>16002	Identifier	points
>16003	Argument	points_curr
>16004	Identifier	points_curr
>16005	Callee	memcpy
>16006	Identifier	memcpy
>16007	IdentifierDeclStatement	 
>16008	IdentifierDecl	* projs_curr = new v2_t [ num_points ]
>16009	AssignmentExpr	* projs_curr = new v2_t [ num_points ]
>16010	Identifier	num_points
>16011	Identifier	num_points
>16012	Identifier	projs_curr
>16013	IdentifierDeclType	v2_t *
>16014	IdentifierDeclStatement	 
>16015	IdentifierDecl	* points_curr = new v3_t [ num_points ]
>16016	AssignmentExpr	* points_curr = new v3_t [ num_points ]
>16017	Identifier	num_points
>16018	Identifier	num_points
>16019	Identifier	points_curr
>16020	IdentifierDeclType	v3_t *
>16021	IdentifierDeclStatement	 
>16022	IdentifierDecl	num_points_curr = num_points
>16023	AssignmentExpr	num_points_curr = num_points
>16024	Identifier	num_points
>16025	Identifier	num_points
>16026	Identifier	num_points_curr
>16027	IdentifierDeclType	int
>16093	FunctionDef	BundlerApp 
>16094	ParameterList	int num_points , v3_t * points , v2_t * projs , int * pt_idxs , camera_params_t * cameras , int * added_order , \
>16095	Parameter	 
>16096	Identifier	camera_out
>16097	ParameterType	camera_params_t *
>16098	Parameter	 
>16099	Identifier	pt_views
>16100	ParameterType	const std 
>16101	Parameter	 
>16102	Identifier	added_order
>16103	ParameterType	int *
>16104	Parameter	 
>16105	Identifier	cameras
>16106	ParameterType	camera_params_t *
>16107	Parameter	 
>16108	Identifier	pt_idxs
>16109	ParameterType	int *
>16110	Parameter	 
>16111	Identifier	projs
>16112	ParameterType	v2_t *
>16113	Parameter	 
>16114	Identifier	points
>16115	ParameterType	v3_t *
>16116	Parameter	 
>16117	Identifier	num_points
>16118	ParameterType	int
>16119	ReturnType	double
>16120	CompoundStatement	 
>16121	ReturnStatement	 
>16122	CallExpression	sqrt ( error / num_points )
>16123	ArgumentList	error / num_points
>16124	Argument	error / num_points
>16125	MultiplicativeExpression	error / num_points
>16126	Identifier	num_points
>16127	Identifier	error
>16128	Callee	sqrt
>16129	Identifier	sqrt
>16130	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>16131	CompoundStatement	 
>16132	ExpressionStatement	 
>16133	Identifier	ts
>16134	Statement	 
>16135	Statement	 
>16136	Statement	 
>16137	ExpressionStatement	 
>16138	Identifier	Rs
>16139	Statement	 
>16140	Statement	 
>16141	Statement	 
>16142	ExpressionStatement	 
>16143	Identifier	pv
>16144	Statement	 
>16145	Statement	 
>16146	Statement	 
>16147	ExpressionStatement	 
>16148	AssignmentExpr	error += dx * dx + dy * dy
>16149	AdditiveExpression	dx * dx + dy * dy
>16150	MultiplicativeExpression	dy * dy
>16151	Identifier	dy
>16152	Identifier	dy
>16153	MultiplicativeExpression	dx * dx
>16154	Identifier	dx
>16155	Identifier	dx
>16156	Identifier	error
>16157	IdentifierDeclStatement	 
>16158	IdentifierDecl	dy = Vy ( pr ) - Vy ( projs [ i ] )
>16159	AssignmentExpr	dy = Vy ( pr ) - Vy ( projs [ i ] )
>16160	AdditiveExpression	Vy ( pr ) - Vy ( projs [ i ] )
>16161	CallExpression	Vy ( projs [ i ] )
>16162	ArgumentList	projs [ i ]
>16163	Argument	projs [ i ]
>16164	ArrayIndexing	projs [ i ]
>16165	Identifier	i
>16166	Identifier	projs
>16167	Callee	Vy
>16168	Identifier	Vy
>16169	CallExpression	Vy ( pr )
>16170	ArgumentList	pr
>16171	Argument	pr
>16172	Identifier	pr
>16173	Callee	Vy
>16174	Identifier	Vy
>16175	Identifier	dy
>16176	Identifier	dy
>16177	IdentifierDeclType	double
>16178	IdentifierDeclStatement	 
>16179	IdentifierDecl	dx = Vx ( pr ) - Vx ( projs [ i ] )
>16180	AssignmentExpr	dx = Vx ( pr ) - Vx ( projs [ i ] )
>16181	AdditiveExpression	Vx ( pr ) - Vx ( projs [ i ] )
>16182	CallExpression	Vx ( projs [ i ] )
>16183	ArgumentList	projs [ i ]
>16184	Argument	projs [ i ]
>16185	ArrayIndexing	projs [ i ]
>16186	Identifier	i
>16187	Identifier	projs
>16188	Callee	Vx
>16189	Identifier	Vx
>16190	CallExpression	Vx ( pr )
>16191	ArgumentList	pr
>16192	Argument	pr
>16193	Identifier	pr
>16194	Callee	Vx
>16195	Identifier	Vx
>16196	Identifier	dx
>16197	Identifier	dx
>16198	IdentifierDeclType	double
>16199	IdentifierDeclStatement	 
>16200	IdentifierDecl	pr = sfm_project_final ( camera_out , points [ i ] , 1 , m_estimate_distortion ? 1 
>16201	AssignmentExpr	pr = sfm_project_final ( camera_out , points [ i ] , 1 , m_estimate_distortion ? 1 
>16202	CallExpression	sfm_project_final ( camera_out , points [ i ] , 1 , m_estimate_distortion ? 1 
>16203	ArgumentList	camera_out
>16204	Argument	m_estimate_distortion ? 1 
>16205	ConditionalExpression	m_estimate_distortion ? 1 
>16206	PrimaryExpression	0
>16207	PrimaryExpression	1
>16208	Condition	m_estimate_distortion
>16209	Identifier	m_estimate_distortion
>16210	Argument	1
>16211	PrimaryExpression	1
>16212	Argument	points [ i ]
>16213	ArrayIndexing	points [ i ]
>16214	Identifier	i
>16215	Identifier	points
>16216	Argument	camera_out
>16217	Identifier	camera_out
>16218	Callee	sfm_project_final
>16219	Identifier	sfm_project_final
>16220	Identifier	pr
>16221	Identifier	pr
>16222	IdentifierDeclType	v2_t
>16223	ExpressionStatement	 
>16224	AssignmentExpr	points [ i ] = triangulate_n_refine ( points [ i ] , num_views , pv , Rs , ts , & error_curr )
>16225	CallExpression	triangulate_n_refine ( points [ i ] , num_views , pv , Rs , ts , & error_curr )
>16226	ArgumentList	points [ i ]
>16227	Argument	& error_curr
>16228	UnaryOp	& error_curr
>16229	Identifier	error_curr
>16230	UnaryOperator	&
>16231	Argument	ts
>16232	Identifier	ts
>16233	Argument	Rs
>16234	Identifier	Rs
>16235	Argument	pv
>16236	Identifier	pv
>16237	Argument	num_views
>16238	Identifier	num_views
>16239	Argument	points [ i ]
>16240	ArrayIndexing	points [ i ]
>16241	Identifier	i
>16242	Identifier	points
>16243	Callee	triangulate_n_refine
>16244	Identifier	triangulate_n_refine
>16245	ArrayIndexing	points [ i ]
>16246	Identifier	i
>16247	Identifier	points
>16248	IdentifierDeclStatement	 
>16249	IdentifierDecl	error_curr = 0.0
>16250	AssignmentExpr	error_curr = 0.0
>16251	PrimaryExpression	0.0
>16252	Identifier	error_curr
>16253	Identifier	error_curr
>16254	IdentifierDeclType	double
>16255	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>16256	CompoundStatement	 
>16257	ExpressionStatement	 
>16258	CallExpression	matrix_scale ( 3 , 1 , ts + 3 * j , - 1.0 , ts + 3 * j )
>16259	ArgumentList	3
>16260	Argument	ts + 3 * j
>16261	AdditiveExpression	ts + 3 * j
>16262	MultiplicativeExpression	3 * j
>16263	Identifier	j
>16264	PrimaryExpression	3
>16265	Identifier	ts
>16266	Argument	- 1.0
>16267	UnaryOp	- 1.0
>16268	PrimaryExpression	1.0
>16269	UnaryOperator	-
>16270	Argument	ts + 3 * j
>16271	AdditiveExpression	ts + 3 * j
>16272	MultiplicativeExpression	3 * j
>16273	Identifier	j
>16274	PrimaryExpression	3
>16275	Identifier	ts
>16276	Argument	1
>16277	PrimaryExpression	1
>16278	Argument	3
>16279	PrimaryExpression	3
>16280	Callee	matrix_scale
>16281	Identifier	matrix_scale
>16282	ExpressionStatement	 
>16283	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cam -> R , cam -> t , ts + 3 * j )
>16284	ArgumentList	3
>16285	Argument	ts + 3 * j
>16286	AdditiveExpression	ts + 3 * j
>16287	MultiplicativeExpression	3 * j
>16288	Identifier	j
>16289	PrimaryExpression	3
>16290	Identifier	ts
>16291	Argument	cam -> t
>16292	PtrMemberAccess	cam -> t
>16293	Identifier	t
>16294	Identifier	cam
>16295	Argument	cam -> R
>16296	PtrMemberAccess	cam -> R
>16297	Identifier	R
>16298	Identifier	cam
>16299	Argument	1
>16300	PrimaryExpression	1
>16301	Argument	3
>16302	PrimaryExpression	3
>16303	Argument	3
>16304	PrimaryExpression	3
>16305	Argument	3
>16306	PrimaryExpression	3
>16307	Callee	matrix_product
>16308	Identifier	matrix_product
>16309	ExpressionStatement	 
>16310	CallExpression	memcpy ( Rs + 9 * j , cam -> R , 9 * sizeof ( double ) )
>16311	ArgumentList	Rs + 9 * j
>16312	Argument	9 * sizeof ( double )
>16313	MultiplicativeExpression	9 * sizeof ( double )
>16314	SizeofExpr	sizeof ( double )
>16315	SizeofOperand	double
>16316	Sizeof	sizeof
>16317	PrimaryExpression	9
>16318	Argument	cam -> R
>16319	PtrMemberAccess	cam -> R
>16320	Identifier	R
>16321	Identifier	cam
>16322	Argument	Rs + 9 * j
>16323	AdditiveExpression	Rs + 9 * j
>16324	MultiplicativeExpression	9 * j
>16325	Identifier	j
>16326	PrimaryExpression	9
>16327	Identifier	Rs
>16328	Callee	memcpy
>16329	Identifier	memcpy
>16330	IfStatement	if ( j < num_views - 1 )
>16331	ElseStatement	else
>16332	CompoundStatement	 
>16333	ExpressionStatement	 
>16334	AssignmentExpr	cam = camera_out
>16335	Identifier	camera_out
>16336	Identifier	cam
>16337	ExpressionStatement	 
>16338	AssignmentExpr	pv [ j ] = v2_new ( p_n [ 0 ] , p_n [ 1 ] )
>16339	CallExpression	v2_new ( p_n [ 0 ] , p_n [ 1 ] )
>16340	ArgumentList	p_n [ 0 ]
>16341	Argument	p_n [ 1 ]
>16342	ArrayIndexing	p_n [ 1 ]
>16343	PrimaryExpression	1
>16344	Identifier	p_n
>16345	Argument	p_n [ 0 ]
>16346	ArrayIndexing	p_n [ 0 ]
>16347	PrimaryExpression	0
>16348	Identifier	p_n
>16349	Callee	v2_new
>16350	Identifier	v2_new
>16351	ArrayIndexing	pv [ j ]
>16352	Identifier	j
>16353	Identifier	pv
>16354	ExpressionStatement	 
>16355	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Kinv , p3 , p_n )
>16356	ArgumentList	3
>16357	Argument	p_n
>16358	Identifier	p_n
>16359	Argument	p3
>16360	Identifier	p3
>16361	Argument	Kinv
>16362	Identifier	Kinv
>16363	Argument	1
>16364	PrimaryExpression	1
>16365	Argument	3
>16366	PrimaryExpression	3
>16367	Argument	3
>16368	PrimaryExpression	3
>16369	Argument	3
>16370	PrimaryExpression	3
>16371	Callee	matrix_product
>16372	Identifier	matrix_product
>16373	IdentifierDeclStatement	 
>16374	IdentifierDecl	p_n [ 3 ]
>16375	PrimaryExpression	3
>16376	Identifier	p_n
>16377	IdentifierDeclType	double [ 3 ]
>16378	ExpressionStatement	 
>16379	CallExpression	matrix_invert ( 3 , K , Kinv )
>16380	ArgumentList	3
>16381	Argument	Kinv
>16382	Identifier	Kinv
>16383	Argument	K
>16384	Identifier	K
>16385	Argument	3
>16386	PrimaryExpression	3
>16387	Callee	matrix_invert
>16388	Identifier	matrix_invert
>16389	ExpressionStatement	 
>16390	CallExpression	GetIntrinsics ( * camera_out , K )
>16391	ArgumentList	* camera_out
>16392	Argument	K
>16393	Identifier	K
>16394	Argument	* camera_out
>16395	UnaryOp	* camera_out
>16396	Identifier	camera_out
>16397	UnaryOperator	*
>16398	Callee	GetIntrinsics
>16399	Identifier	GetIntrinsics
>16400	IdentifierDeclStatement	 
>16401	IdentifierDecl	Kinv [ 9 ]
>16402	PrimaryExpression	9
>16403	Identifier	Kinv
>16404	IdentifierDeclType	double [ 9 ]
>16405	IdentifierDecl	K [ 9 ]
>16406	PrimaryExpression	9
>16407	Identifier	K
>16408	IdentifierDeclType	double [ 9 ]
>16409	IdentifierDeclStatement	 
>16410	IdentifierDecl	p3 [ 3 ] = { Vx ( projs [ i ] ) , Vy ( projs [ i ] ) , 1.0 }
>16411	AssignmentExpr	p3 [ 3 ] = { Vx ( projs [ i ] ) , Vy ( projs [ i ] ) , 1.0 }
>16412	InitializerList	Vx ( projs [ i ] )
>16413	PrimaryExpression	1.0
>16414	CallExpression	Vy ( projs [ i ] )
>16415	ArgumentList	projs [ i ]
>16416	Argument	projs [ i ]
>16417	ArrayIndexing	projs [ i ]
>16418	Identifier	i
>16419	Identifier	projs
>16420	Callee	Vy
>16421	Identifier	Vy
>16422	CallExpression	Vx ( projs [ i ] )
>16423	ArgumentList	projs [ i ]
>16424	Argument	projs [ i ]
>16425	ArrayIndexing	projs [ i ]
>16426	Identifier	i
>16427	Identifier	projs
>16428	Callee	Vx
>16429	Identifier	Vx
>16430	Identifier	p3
>16431	PrimaryExpression	3
>16432	Identifier	p3
>16433	IdentifierDeclType	double [ 3 ]
>16434	CompoundStatement	 
>16435	ExpressionStatement	 
>16436	AssignmentExpr	cam = cameras + camera_idx
>16437	AdditiveExpression	cameras + camera_idx
>16438	Identifier	camera_idx
>16439	Identifier	cameras
>16440	Identifier	cam
>16441	ExpressionStatement	 
>16442	AssignmentExpr	pv [ j ] = v2_new ( p_n [ 0 ] , p_n [ 1 ] )
>16443	CallExpression	v2_new ( p_n [ 0 ] , p_n [ 1 ] )
>16444	ArgumentList	p_n [ 0 ]
>16445	Argument	p_n [ 1 ]
>16446	ArrayIndexing	p_n [ 1 ]
>16447	PrimaryExpression	1
>16448	Identifier	p_n
>16449	Argument	p_n [ 0 ]
>16450	ArrayIndexing	p_n [ 0 ]
>16451	PrimaryExpression	0
>16452	Identifier	p_n
>16453	Callee	v2_new
>16454	Identifier	v2_new
>16455	ArrayIndexing	pv [ j ]
>16456	Identifier	j
>16457	Identifier	pv
>16458	ExpressionStatement	 
>16459	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Kinv , p3 , p_n )
>16460	ArgumentList	3
>16461	Argument	p_n
>16462	Identifier	p_n
>16463	Argument	p3
>16464	Identifier	p3
>16465	Argument	Kinv
>16466	Identifier	Kinv
>16467	Argument	1
>16468	PrimaryExpression	1
>16469	Argument	3
>16470	PrimaryExpression	3
>16471	Argument	3
>16472	PrimaryExpression	3
>16473	Argument	3
>16474	PrimaryExpression	3
>16475	Callee	matrix_product
>16476	Identifier	matrix_product
>16477	IdentifierDeclStatement	 
>16478	IdentifierDecl	p_n [ 3 ]
>16479	PrimaryExpression	3
>16480	Identifier	p_n
>16481	IdentifierDeclType	double [ 3 ]
>16482	ExpressionStatement	 
>16483	CallExpression	matrix_invert ( 3 , K , Kinv )
>16484	ArgumentList	3
>16485	Argument	Kinv
>16486	Identifier	Kinv
>16487	Argument	K
>16488	Identifier	K
>16489	Argument	3
>16490	PrimaryExpression	3
>16491	Callee	matrix_invert
>16492	Identifier	matrix_invert
>16493	ExpressionStatement	 
>16494	CallExpression	GetIntrinsics ( cameras [ camera_idx ] , K )
>16495	ArgumentList	cameras [ camera_idx ]
>16496	Argument	K
>16497	Identifier	K
>16498	Argument	cameras [ camera_idx ]
>16499	ArrayIndexing	cameras [ camera_idx ]
>16500	Identifier	camera_idx
>16501	Identifier	cameras
>16502	Callee	GetIntrinsics
>16503	Identifier	GetIntrinsics
>16504	IdentifierDeclStatement	 
>16505	IdentifierDecl	Kinv [ 9 ]
>16506	PrimaryExpression	9
>16507	Identifier	Kinv
>16508	IdentifierDeclType	double [ 9 ]
>16509	IdentifierDecl	K [ 9 ]
>16510	PrimaryExpression	9
>16511	Identifier	K
>16512	IdentifierDeclType	double [ 9 ]
>16513	IdentifierDeclStatement	 
>16514	IdentifierDecl	p3 [ 3 ] = { key . m_x , key . m_y , 1.0 }
>16515	AssignmentExpr	p3 [ 3 ] = { key . m_x , key . m_y , 1.0 }
>16516	InitializerList	key . m_x
>16517	PrimaryExpression	1.0
>16518	MemberAccess	key . m_y
>16519	Identifier	m_y
>16520	Identifier	key
>16521	MemberAccess	key . m_x
>16522	Identifier	m_x
>16523	Identifier	key
>16524	Identifier	p3
>16525	PrimaryExpression	3
>16526	Identifier	p3
>16527	IdentifierDeclType	double [ 3 ]
>16528	IdentifierDeclStatement	 
>16529	IdentifierDecl	& key = GetKey ( image_idx , key_idx )
>16530	AssignmentExpr	& key = GetKey ( image_idx , key_idx )
>16531	CallExpression	GetKey ( image_idx , key_idx )
>16532	ArgumentList	image_idx
>16533	Argument	key_idx
>16534	Identifier	key_idx
>16535	Argument	image_idx
>16536	Identifier	image_idx
>16537	Callee	GetKey
>16538	Identifier	GetKey
>16539	Identifier	key
>16540	Identifier	key
>16541	IdentifierDeclType	Keypoint &
>16542	IdentifierDeclStatement	 
>16543	IdentifierDecl	key_idx = pt_views [ pt_idx ] [ j ] . second
>16544	AssignmentExpr	key_idx = pt_views [ pt_idx ] [ j ] . second
>16545	MemberAccess	pt_views [ pt_idx ] [ j ] . second
>16546	Identifier	second
>16547	ArrayIndexing	pt_views [ pt_idx ] [ j ]
>16548	Identifier	j
>16549	ArrayIndexing	pt_views [ pt_idx ]
>16550	Identifier	pt_idx
>16551	Identifier	pt_views
>16552	Identifier	key_idx
>16553	Identifier	key_idx
>16554	IdentifierDeclType	int
>16555	IdentifierDeclStatement	 
>16556	IdentifierDecl	image_idx = added_order [ camera_idx ]
>16557	AssignmentExpr	image_idx = added_order [ camera_idx ]
>16558	ArrayIndexing	added_order [ camera_idx ]
>16559	Identifier	camera_idx
>16560	Identifier	added_order
>16561	Identifier	image_idx
>16562	Identifier	image_idx
>16563	IdentifierDeclType	int
>16564	IdentifierDeclStatement	 
>16565	IdentifierDecl	camera_idx = pt_views [ pt_idx ] [ j ] . first
>16566	AssignmentExpr	camera_idx = pt_views [ pt_idx ] [ j ] . first
>16567	MemberAccess	pt_views [ pt_idx ] [ j ] . first
>16568	Identifier	first
>16569	ArrayIndexing	pt_views [ pt_idx ] [ j ]
>16570	Identifier	j
>16571	ArrayIndexing	pt_views [ pt_idx ]
>16572	Identifier	pt_idx
>16573	Identifier	pt_views
>16574	Identifier	camera_idx
>16575	Identifier	camera_idx
>16576	IdentifierDeclType	int
>16577	Condition	 
>16578	RelationalExpression	j < num_views - 1
>16579	AdditiveExpression	num_views - 1
>16580	PrimaryExpression	1
>16581	Identifier	num_views
>16582	Identifier	j
>16583	IdentifierDeclStatement	 
>16584	IdentifierDecl	* cam = NULL
>16585	AssignmentExpr	* cam = NULL
>16586	Identifier	NULL
>16587	Identifier	NULL
>16588	Identifier	cam
>16589	IdentifierDeclType	camera_params_t *
>16590	IncDecOp	 
>16591	IncDec	++
>16592	Identifier	j
>16593	Condition	 
>16594	RelationalExpression	j < num_views
>16595	Identifier	num_views
>16596	Identifier	j
>16597	ForInit	 
>16598	IdentifierDeclStatement	int j = 0 ;
>16599	IdentifierDecl	j = 0
>16600	AssignmentExpr	j = 0
>16601	PrimaryExpression	0
>16602	Identifier	j
>16603	Identifier	j
>16604	IdentifierDeclType	int
>16605	IdentifierDeclStatement	 
>16606	IdentifierDecl	* ts = new double [ 3 * num_views ]
>16607	AssignmentExpr	* ts = new double [ 3 * num_views ]
>16608	MultiplicativeExpression	3 * num_views
>16609	Identifier	num_views
>16610	PrimaryExpression	3
>16611	Identifier	ts
>16612	Identifier	ts
>16613	IdentifierDeclType	double *
>16614	IdentifierDeclStatement	 
>16615	IdentifierDecl	* Rs = new double [ 9 * num_views ]
>16616	AssignmentExpr	* Rs = new double [ 9 * num_views ]
>16617	MultiplicativeExpression	9 * num_views
>16618	Identifier	num_views
>16619	PrimaryExpression	9
>16620	Identifier	Rs
>16621	Identifier	Rs
>16622	IdentifierDeclType	double *
>16623	IdentifierDeclStatement	 
>16624	IdentifierDecl	* pv = new v2_t [ num_views ]
>16625	AssignmentExpr	* pv = new v2_t [ num_views ]
>16626	Identifier	num_views
>16627	Identifier	num_views
>16628	Identifier	pv
>16629	IdentifierDeclType	v2_t *
>16630	IfStatement	if ( num_views < 2 )
>16631	ContinueStatement	 
>16632	Condition	 
>16633	RelationalExpression	num_views < 2
>16634	PrimaryExpression	2
>16635	Identifier	num_views
>16636	IdentifierDeclStatement	 
>16637	IdentifierDecl	num_views = ( int ) pt_views [ pt_idx ] . size ( ) + 1
>16638	AssignmentExpr	num_views = ( int ) pt_views [ pt_idx ] . size ( ) + 1
>16639	AdditiveExpression	( int ) pt_views [ pt_idx ] . size ( ) + 1
>16640	PrimaryExpression	1
>16641	CastExpression	( int ) pt_views [ pt_idx ] . size ( )
>16642	CallExpression	pt_views [ pt_idx ] . size ( )
>16643	ArgumentList	 
>16644	Callee	pt_views [ pt_idx ] . size
>16645	MemberAccess	pt_views [ pt_idx ] . size
>16646	Identifier	size
>16647	ArrayIndexing	pt_views [ pt_idx ]
>16648	Identifier	pt_idx
>16649	Identifier	pt_views
>16650	CastTarget	int
>16651	Identifier	num_views
>16652	Identifier	num_views
>16653	IdentifierDeclType	int
>16654	IdentifierDeclStatement	 
>16655	IdentifierDecl	pt_idx = pt_idxs [ i ]
>16656	AssignmentExpr	pt_idx = pt_idxs [ i ]
>16657	ArrayIndexing	pt_idxs [ i ]
>16658	Identifier	i
>16659	Identifier	pt_idxs
>16660	Identifier	pt_idx
>16661	Identifier	pt_idx
>16662	IdentifierDeclType	int
>16663	IncDecOp	 
>16664	IncDec	++
>16665	Identifier	i
>16666	Condition	 
>16667	RelationalExpression	i < num_points
>16668	Identifier	num_points
>16669	Identifier	i
>16670	ForInit	 
>16671	IdentifierDeclStatement	int i = 0 ;
>16672	IdentifierDecl	i = 0
>16673	AssignmentExpr	i = 0
>16674	PrimaryExpression	0
>16675	Identifier	i
>16676	Identifier	i
>16677	IdentifierDeclType	int
>16678	IdentifierDeclStatement	 
>16679	IdentifierDecl	error = 0.0
>16680	AssignmentExpr	error = 0.0
>16681	PrimaryExpression	0.0
>16682	Identifier	error
>16683	Identifier	error
>16684	IdentifierDeclType	double
>16750	FunctionDef	BundlerApp 
>16751	ParameterList	const ImageData & data , int num_points , v3_t * points , v2_t * projs , int * pt_idxs , camera_params_t * cameras , \
>16752	Parameter	 
>16753	Identifier	remove_outliers
>16754	ParameterType	bool
>16755	Parameter	 
>16756	Identifier	camera_out
>16757	ParameterType	camera_params_t *
>16758	Parameter	 
>16759	Identifier	pt_views
>16760	ParameterType	const std 
>16761	Parameter	 
>16762	Identifier	added_order
>16763	ParameterType	int *
>16764	Parameter	 
>16765	Identifier	cameras
>16766	ParameterType	camera_params_t *
>16767	Parameter	 
>16768	Identifier	pt_idxs
>16769	ParameterType	int *
>16770	Parameter	 
>16771	Identifier	projs
>16772	ParameterType	v2_t *
>16773	Parameter	 
>16774	Identifier	points
>16775	ParameterType	v3_t *
>16776	Parameter	 
>16777	Identifier	num_points
>16778	ParameterType	int
>16779	Parameter	 
>16780	Identifier	data
>16781	ParameterType	const ImageData &
>16782	ReturnType	std 
>16783	CompoundStatement	 
>16784	ReturnStatement	 
>16785	Identifier	inliers_out
>16786	ExpressionStatement	 
>16787	Identifier	pt_idxs_curr
>16788	Statement	 
>16789	Statement	 
>16790	Statement	 
>16791	ExpressionStatement	 
>16792	Identifier	projs_curr
>16793	Statement	 
>16794	Statement	 
>16795	Statement	 
>16796	ExpressionStatement	 
>16797	Identifier	points_curr
>16798	Statement	 
>16799	Statement	 
>16800	Statement	 
>16801	DoStatement	do
>16802	Condition	 
>16803	Identifier	removed
>16804	CompoundStatement	 
>16805	IfStatement	if ( remove_outliers )
>16806	ElseStatement	else
>16807	CompoundStatement	 
>16808	ExpressionStatement	 
>16809	CallExpression	RefineCameraParameters ( data , num_points_curr , points_curr , projs_curr , pt_idxs_curr , camera_out , NULL , ! \
>16810	ArgumentList	data
>16811	Argument	m_max_proj_error_threshold
>16812	Identifier	m_max_proj_error_threshold
>16813	Argument	m_min_proj_error_threshold
>16814	Identifier	m_min_proj_error_threshold
>16815	Argument	m_estimate_distortion
>16816	Identifier	m_estimate_distortion
>16817	Argument	m_optimize_for_fisheye
>16818	Identifier	m_optimize_for_fisheye
>16819	Argument	false
>16820	Identifier	false
>16821	Argument	! m_fixed_focal_length
>16822	UnaryOp	! m_fixed_focal_length
>16823	Identifier	m_fixed_focal_length
>16824	UnaryOperator	!
>16825	Argument	NULL
>16826	Identifier	NULL
>16827	Argument	camera_out
>16828	Identifier	camera_out
>16829	Argument	pt_idxs_curr
>16830	Identifier	pt_idxs_curr
>16831	Argument	projs_curr
>16832	Identifier	projs_curr
>16833	Argument	points_curr
>16834	Identifier	points_curr
>16835	Argument	num_points_curr
>16836	Identifier	num_points_curr
>16837	Argument	data
>16838	Identifier	data
>16839	Callee	RefineCameraParameters
>16840	Identifier	RefineCameraParameters
>16841	CompoundStatement	 
>16842	IfStatement	if ( num_inliers < num_points_curr )
>16843	CompoundStatement	 
>16844	ExpressionStatement	 
>16845	AssignmentExpr	inliers_out = inliers_out_next
>16846	Identifier	inliers_out_next
>16847	Identifier	inliers_out
>16848	ExpressionStatement	 
>16849	AssignmentExpr	num_points_curr = num_inliers
>16850	Identifier	num_inliers
>16851	Identifier	num_points_curr
>16852	ForStatement	for ( int i = 0 ; i < num_inliers ; i ++ )
>16853	CompoundStatement	 
>16854	ExpressionStatement	 
>16855	CallExpression	inliers_out_next . push_back ( inliers_out [ i ] )
>16856	ArgumentList	inliers_out [ i ]
>16857	Argument	inliers_out [ i ]
>16858	ArrayIndexing	inliers_out [ i ]
>16859	Identifier	i
>16860	Identifier	inliers_out
>16861	Callee	inliers_out_next . push_back
>16862	MemberAccess	inliers_out_next . push_back
>16863	Identifier	push_back
>16864	Identifier	inliers_out_next
>16865	ExpressionStatement	 
>16866	AssignmentExpr	pt_idxs_curr [ i ] = pt_idxs_curr [ inliers [ i ] ]
>16867	ArrayIndexing	pt_idxs_curr [ inliers [ i ] ]
>16868	ArrayIndexing	inliers [ i ]
>16869	Identifier	i
>16870	Identifier	inliers
>16871	Identifier	pt_idxs_curr
>16872	ArrayIndexing	pt_idxs_curr [ i ]
>16873	Identifier	i
>16874	Identifier	pt_idxs_curr
>16875	ExpressionStatement	 
>16876	AssignmentExpr	projs_curr [ i ] = projs_curr [ inliers [ i ] ]
>16877	ArrayIndexing	projs_curr [ inliers [ i ] ]
>16878	ArrayIndexing	inliers [ i ]
>16879	Identifier	i
>16880	Identifier	inliers
>16881	Identifier	projs_curr
>16882	ArrayIndexing	projs_curr [ i ]
>16883	Identifier	i
>16884	Identifier	projs_curr
>16885	ExpressionStatement	 
>16886	AssignmentExpr	points_curr [ i ] = points_curr [ inliers [ i ] ]
>16887	ArrayIndexing	points_curr [ inliers [ i ] ]
>16888	ArrayIndexing	inliers [ i ]
>16889	Identifier	i
>16890	Identifier	inliers
>16891	Identifier	points_curr
>16892	ArrayIndexing	points_curr [ i ]
>16893	Identifier	i
>16894	Identifier	points_curr
>16895	IncDecOp	 
>16896	IncDec	++
>16897	Identifier	i
>16898	Condition	 
>16899	RelationalExpression	i < num_inliers
>16900	Identifier	num_inliers
>16901	Identifier	i
>16902	ForInit	 
>16903	IdentifierDeclStatement	int i = 0 ;
>16904	IdentifierDecl	i = 0
>16905	AssignmentExpr	i = 0
>16906	PrimaryExpression	0
>16907	Identifier	i
>16908	Identifier	i
>16909	IdentifierDeclType	int
>16910	ExpressionStatement	 
>16911	AssignmentExpr	removed = true
>16912	Identifier	true
>16913	Identifier	removed
>16914	Condition	 
>16915	RelationalExpression	num_inliers < num_points_curr
>16916	Identifier	num_points_curr
>16917	Identifier	num_inliers
>16918	IdentifierDeclStatement	 
>16919	IdentifierDecl	inliers_out_next
>16920	Identifier	inliers_out_next
>16921	IdentifierDeclType	std 
>16922	IdentifierDeclStatement	 
>16923	IdentifierDecl	num_inliers = inliers . size ( )
>16924	AssignmentExpr	num_inliers = inliers . size ( )
>16925	CallExpression	inliers . size ( )
>16926	ArgumentList	 
>16927	Callee	inliers . size
>16928	MemberAccess	inliers . size
>16929	Identifier	size
>16930	Identifier	inliers
>16931	Identifier	num_inliers
>16932	Identifier	num_inliers
>16933	IdentifierDeclType	int
>16934	ExpressionStatement	 
>16935	AssignmentExpr	inliers = RefineCameraParameters ( data , num_points_curr , points_curr , projs_curr , pt_idxs_curr , \
>16936	CallExpression	RefineCameraParameters ( data , num_points_curr , points_curr , projs_curr , pt_idxs_curr , camera_out , NULL , ! \
>16937	ArgumentList	data
>16938	Argument	m_max_proj_error_threshold
>16939	Identifier	m_max_proj_error_threshold
>16940	Argument	m_min_proj_error_threshold
>16941	Identifier	m_min_proj_error_threshold
>16942	Argument	m_estimate_distortion
>16943	Identifier	m_estimate_distortion
>16944	Argument	m_optimize_for_fisheye
>16945	Identifier	m_optimize_for_fisheye
>16946	Argument	true
>16947	Identifier	true
>16948	Argument	! m_fixed_focal_length
>16949	UnaryOp	! m_fixed_focal_length
>16950	Identifier	m_fixed_focal_length
>16951	UnaryOperator	!
>16952	Argument	NULL
>16953	Identifier	NULL
>16954	Argument	camera_out
>16955	Identifier	camera_out
>16956	Argument	pt_idxs_curr
>16957	Identifier	pt_idxs_curr
>16958	Argument	projs_curr
>16959	Identifier	projs_curr
>16960	Argument	points_curr
>16961	Identifier	points_curr
>16962	Argument	num_points_curr
>16963	Identifier	num_points_curr
>16964	Argument	data
>16965	Identifier	data
>16966	Callee	RefineCameraParameters
>16967	Identifier	RefineCameraParameters
>16968	Identifier	inliers
>16969	IdentifierDeclStatement	 
>16970	IdentifierDecl	inliers
>16971	Identifier	inliers
>16972	IdentifierDeclType	std 
>16973	Condition	 
>16974	Identifier	remove_outliers
>16975	CompoundStatement	 
>16976	ExpressionStatement	 
>16977	AssignmentExpr	error_old = error
>16978	Identifier	error
>16979	Identifier	error_old
>16980	ExpressionStatement	 
>16981	AssignmentExpr	derror = error_old - error
>16982	AdditiveExpression	error_old - error
>16983	Identifier	error
>16984	Identifier	error_old
>16985	Identifier	derror
>16986	ExpressionStatement	 
>16987	Statement	 
>16988	Statement	 
>16989	Statement	 
>16990	Statement	 
>16991	Statement	 
>16992	Statement	 
>16993	Statement	 
>16994	ExpressionStatement	 
>16995	AssignmentExpr	error = RefinePoints ( num_points_curr , points_curr , projs_curr , pt_idxs_curr , cameras , added_order , \
>16996	CallExpression	RefinePoints ( num_points_curr , points_curr , projs_curr , pt_idxs_curr , cameras , added_order , pt_views , camera_\
>16997	ArgumentList	num_points_curr
>16998	Argument	camera_out
>16999	Identifier	camera_out
>17000	Argument	pt_views
>17001	Identifier	pt_views
>17002	Argument	added_order
>17003	Identifier	added_order
>17004	Argument	cameras
>17005	Identifier	cameras
>17006	Argument	pt_idxs_curr
>17007	Identifier	pt_idxs_curr
>17008	Argument	projs_curr
>17009	Identifier	projs_curr
>17010	Argument	points_curr
>17011	Identifier	points_curr
>17012	Argument	num_points_curr
>17013	Identifier	num_points_curr
>17014	Callee	RefinePoints
>17015	Identifier	RefinePoints
>17016	Identifier	error
>17017	ExpressionStatement	 
>17018	CallExpression	RefineCameraParameters ( data , num_points_curr , points_curr , projs_curr , pt_idxs_curr , camera_out , & error , ! \
>17019	ArgumentList	data
>17020	Argument	m_max_proj_error_threshold
>17021	Identifier	m_max_proj_error_threshold
>17022	Argument	m_min_proj_error_threshold
>17023	Identifier	m_min_proj_error_threshold
>17024	Argument	m_estimate_distortion
>17025	Identifier	m_estimate_distortion
>17026	Argument	m_optimize_for_fisheye
>17027	Identifier	m_optimize_for_fisheye
>17028	Argument	false
>17029	Identifier	false
>17030	Argument	! m_fixed_focal_length
>17031	UnaryOp	! m_fixed_focal_length
>17032	Identifier	m_fixed_focal_length
>17033	UnaryOperator	!
>17034	Argument	& error
>17035	UnaryOp	& error
>17036	Identifier	error
>17037	UnaryOperator	&
>17038	Argument	camera_out
>17039	Identifier	camera_out
>17040	Argument	pt_idxs_curr
>17041	Identifier	pt_idxs_curr
>17042	Argument	projs_curr
>17043	Identifier	projs_curr
>17044	Argument	points_curr
>17045	Identifier	points_curr
>17046	Argument	num_points_curr
>17047	Identifier	num_points_curr
>17048	Argument	data
>17049	Identifier	data
>17050	Callee	RefineCameraParameters
>17051	Identifier	RefineCameraParameters
>17052	IdentifierDeclStatement	 
>17053	IdentifierDecl	error = 0.0
>17054	AssignmentExpr	error = 0.0
>17055	PrimaryExpression	0.0
>17056	Identifier	error
>17057	Identifier	error
>17058	IdentifierDeclType	double
>17059	ExpressionStatement	 
>17060	AssignmentExpr	removed = false
>17061	Identifier	false
>17062	Identifier	removed
>17063	ExpressionStatement	 
>17064	CallExpression	memcpy ( pt_idxs_curr , pt_idxs , sizeof ( int ) * num_points )
>17065	ArgumentList	pt_idxs_curr
>17066	Argument	sizeof ( int ) * num_points
>17067	MultiplicativeExpression	sizeof ( int ) * num_points
>17068	Identifier	num_points
>17069	SizeofExpr	sizeof ( int )
>17070	SizeofOperand	int
>17071	Sizeof	sizeof
>17072	Argument	pt_idxs
>17073	Identifier	pt_idxs
>17074	Argument	pt_idxs_curr
>17075	Identifier	pt_idxs_curr
>17076	Callee	memcpy
>17077	Identifier	memcpy
>17078	ExpressionStatement	 
>17079	CallExpression	memcpy ( projs_curr , projs , sizeof ( v2_t ) * num_points )
>17080	ArgumentList	projs_curr
>17081	Argument	sizeof ( v2_t ) * num_points
>17082	MultiplicativeExpression	sizeof ( v2_t ) * num_points
>17083	Identifier	num_points
>17084	SizeofExpr	sizeof ( v2_t )
>17085	SizeofOperand	v2_t
>17086	Sizeof	sizeof
>17087	Argument	projs
>17088	Identifier	projs
>17089	Argument	projs_curr
>17090	Identifier	projs_curr
>17091	Callee	memcpy
>17092	Identifier	memcpy
>17093	ExpressionStatement	 
>17094	CallExpression	memcpy ( points_curr , points , sizeof ( v3_t ) * num_points )
>17095	ArgumentList	points_curr
>17096	Argument	sizeof ( v3_t ) * num_points
>17097	MultiplicativeExpression	sizeof ( v3_t ) * num_points
>17098	Identifier	num_points
>17099	SizeofExpr	sizeof ( v3_t )
>17100	SizeofOperand	v3_t
>17101	Sizeof	sizeof
>17102	Argument	points
>17103	Identifier	points
>17104	Argument	points_curr
>17105	Identifier	points_curr
>17106	Callee	memcpy
>17107	Identifier	memcpy
>17108	IdentifierDeclStatement	 
>17109	IdentifierDecl	* pt_idxs_curr = new int [ num_points ]
>17110	AssignmentExpr	* pt_idxs_curr = new int [ num_points ]
>17111	Identifier	num_points
>17112	Identifier	num_points
>17113	Identifier	pt_idxs_curr
>17114	IdentifierDeclType	int *
>17115	IdentifierDeclStatement	 
>17116	IdentifierDecl	* projs_curr = new v2_t [ num_points ]
>17117	AssignmentExpr	* projs_curr = new v2_t [ num_points ]
>17118	Identifier	num_points
>17119	Identifier	num_points
>17120	Identifier	projs_curr
>17121	IdentifierDeclType	v2_t *
>17122	IdentifierDeclStatement	 
>17123	IdentifierDecl	* points_curr = new v3_t [ num_points ]
>17124	AssignmentExpr	* points_curr = new v3_t [ num_points ]
>17125	Identifier	num_points
>17126	Identifier	num_points
>17127	Identifier	points_curr
>17128	IdentifierDeclType	v3_t *
>17129	IdentifierDeclStatement	 
>17130	IdentifierDecl	num_points_curr = num_points
>17131	AssignmentExpr	num_points_curr = num_points
>17132	Identifier	num_points
>17133	Identifier	num_points
>17134	Identifier	num_points_curr
>17135	IdentifierDeclType	int
>17136	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>17137	ExpressionStatement	 
>17138	CallExpression	inliers_out . push_back ( i )
>17139	ArgumentList	i
>17140	Argument	i
>17141	Identifier	i
>17142	Callee	inliers_out . push_back
>17143	MemberAccess	inliers_out . push_back
>17144	Identifier	push_back
>17145	Identifier	inliers_out
>17146	IncDecOp	 
>17147	IncDec	++
>17148	Identifier	i
>17149	Condition	 
>17150	RelationalExpression	i < num_points
>17151	Identifier	num_points
>17152	Identifier	i
>17153	ForInit	 
>17154	IdentifierDeclStatement	int i = 0 ;
>17155	IdentifierDecl	i = 0
>17156	AssignmentExpr	i = 0
>17157	PrimaryExpression	0
>17158	Identifier	i
>17159	Identifier	i
>17160	IdentifierDeclType	int
>17161	IdentifierDeclStatement	 
>17162	IdentifierDecl	inliers_out
>17163	Identifier	inliers_out
>17164	IdentifierDeclType	std 
>17165	IdentifierDeclStatement	 
>17166	IdentifierDecl	removed
>17167	Identifier	removed
>17168	IdentifierDeclType	bool
>17169	IdentifierDeclStatement	 
>17170	IdentifierDecl	derror
>17171	Identifier	derror
>17172	IdentifierDeclType	double
>17173	IdentifierDeclStatement	 
>17174	IdentifierDecl	error_old = DBL_MAX
>17175	AssignmentExpr	error_old = DBL_MAX
>17176	Identifier	DBL_MAX
>17177	Identifier	DBL_MAX
>17178	Identifier	error_old
>17179	IdentifierDeclType	double
>17227	FunctionDef	FindAndVerifyCamera (int num_points , v3_t * points_solve , v2_t * projs_solve , int * idxs_solve , double * K , \
>17228	ParameterList	int num_points , v3_t * points_solve , v2_t * projs_solve , int * idxs_solve , double * K , double * R , double * \
>17229	Parameter	 
>17230	Identifier	outliers
>17231	ParameterType	std 
>17232	Parameter	 
>17233	Identifier	inliers_weak
>17234	ParameterType	std 
>17235	Parameter	 
>17236	Identifier	inliers
>17237	ParameterType	std 
>17238	Parameter	 
>17239	Identifier	proj_estimation_threshold_weak
>17240	ParameterType	double
>17241	Parameter	 
>17242	Identifier	proj_estimation_threshold
>17243	ParameterType	double
>17244	Parameter	 
>17245	Identifier	t
>17246	ParameterType	double *
>17247	Parameter	 
>17248	Identifier	R
>17249	ParameterType	double *
>17250	Parameter	 
>17251	Identifier	K
>17252	ParameterType	double *
>17253	Parameter	 
>17254	Identifier	idxs_solve
>17255	ParameterType	int *
>17256	Parameter	 
>17257	Identifier	projs_solve
>17258	ParameterType	v2_t *
>17259	Parameter	 
>17260	Identifier	points_solve
>17261	ParameterType	v3_t *
>17262	Parameter	 
>17263	Identifier	num_points
>17264	ParameterType	int
>17265	ReturnType	bool
>17266	CompoundStatement	 
>17267	ReturnStatement	 
>17268	Identifier	true
>17269	ExpressionStatement	 
>17270	AssignmentExpr	t [ 0 ] = t [ 1 ] = t [ 2 ] = 0.0
>17271	AssignmentExpr	t [ 1 ] = t [ 2 ] = 0.0
>17272	AssignmentExpr	t [ 2 ] = 0.0
>17273	PrimaryExpression	0.0
>17274	ArrayIndexing	t [ 2 ]
>17275	PrimaryExpression	2
>17276	Identifier	t
>17277	ArrayIndexing	t [ 1 ]
>17278	PrimaryExpression	1
>17279	Identifier	t
>17280	ArrayIndexing	t [ 0 ]
>17281	PrimaryExpression	0
>17282	Identifier	t
>17283	ExpressionStatement	 
>17284	CallExpression	matrix_ident ( 3 , R )
>17285	ArgumentList	3
>17286	Argument	R
>17287	Identifier	R
>17288	Argument	3
>17289	PrimaryExpression	3
>17290	Callee	matrix_ident
>17291	Identifier	matrix_ident
>17292	ExpressionStatement	 
>17293	CallExpression	memcpy ( t , tinit , sizeof ( double ) * 3 )
>17294	ArgumentList	t
>17295	Argument	sizeof ( double ) * 3
>17296	MultiplicativeExpression	sizeof ( double ) * 3
>17297	PrimaryExpression	3
>17298	SizeofExpr	sizeof ( double )
>17299	SizeofOperand	double
>17300	Sizeof	sizeof
>17301	Argument	tinit
>17302	Identifier	tinit
>17303	Argument	t
>17304	Identifier	t
>17305	Callee	memcpy
>17306	Identifier	memcpy
>17307	ExpressionStatement	 
>17308	CallExpression	memcpy ( R , Rinit , sizeof ( double ) * 9 )
>17309	ArgumentList	R
>17310	Argument	sizeof ( double ) * 9
>17311	MultiplicativeExpression	sizeof ( double ) * 9
>17312	PrimaryExpression	9
>17313	SizeofExpr	sizeof ( double )
>17314	SizeofOperand	double
>17315	Sizeof	sizeof
>17316	Argument	Rinit
>17317	Identifier	Rinit
>17318	Argument	R
>17319	Identifier	R
>17320	Callee	memcpy
>17321	Identifier	memcpy
>17322	ExpressionStatement	 
>17323	CallExpression	memcpy ( K , Kinit , sizeof ( double ) * 9 )
>17324	ArgumentList	K
>17325	Argument	sizeof ( double ) * 9
>17326	MultiplicativeExpression	sizeof ( double ) * 9
>17327	PrimaryExpression	9
>17328	SizeofExpr	sizeof ( double )
>17329	SizeofOperand	double
>17330	Sizeof	sizeof
>17331	Argument	Kinit
>17332	Identifier	Kinit
>17333	Argument	K
>17334	Identifier	K
>17335	Callee	memcpy
>17336	Identifier	memcpy
>17337	IfStatement	if ( num_behind >= 0.9 * num_points )
>17338	CompoundStatement	 
>17339	ReturnStatement	 
>17340	Identifier	false
>17341	ExpressionStatement	 
>17342	Statement	 
>17343	Statement	 
>17344	Statement	 
>17345	Statement	 
>17346	Statement	 
>17347	Condition	 
>17348	RelationalExpression	num_behind >= 0.9 * num_points
>17349	MultiplicativeExpression	0.9 * num_points
>17350	Identifier	num_points
>17351	PrimaryExpression	0.9
>17352	Identifier	num_behind
>17353	ForStatement	for ( int j = 0 ; j < num_points ; j ++ )
>17354	CompoundStatement	 
>17355	IfStatement	if ( q [ 2 ] > 0.0 )
>17356	ExpressionStatement	 
>17357	IncDecOp	num_behind ++
>17358	IncDec	++
>17359	Identifier	num_behind
>17360	Condition	 
>17361	RelationalExpression	q [ 2 ] > 0.0
>17362	PrimaryExpression	0.0
>17363	ArrayIndexing	q [ 2 ]
>17364	PrimaryExpression	2
>17365	Identifier	q
>17366	IfStatement	if ( diff < proj_estimation_threshold_weak )
>17367	ElseStatement	else
>17368	CompoundStatement	 
>17369	ExpressionStatement	 
>17370	CallExpression	outliers . push_back ( j )
>17371	ArgumentList	j
>17372	Argument	j
>17373	Identifier	j
>17374	Callee	outliers . push_back
>17375	MemberAccess	outliers . push_back
>17376	Identifier	push_back
>17377	Identifier	outliers
>17378	ExpressionStatement	 
>17379	Statement	 
>17380	Statement	 
>17381	Statement	 
>17382	Statement	 
>17383	Statement	 
>17384	Statement	 
>17385	Statement	 
>17386	Statement	 
>17387	Statement	 
>17388	Statement	 
>17389	Statement	 
>17390	Statement	 
>17391	CompoundStatement	 
>17392	ExpressionStatement	 
>17393	CallExpression	inliers_weak . push_back ( j )
>17394	ArgumentList	j
>17395	Argument	j
>17396	Identifier	j
>17397	Callee	inliers_weak . push_back
>17398	MemberAccess	inliers_weak . push_back
>17399	Identifier	push_back
>17400	Identifier	inliers_weak
>17401	Condition	 
>17402	RelationalExpression	diff < proj_estimation_threshold_weak
>17403	Identifier	proj_estimation_threshold_weak
>17404	Identifier	diff
>17405	IfStatement	if ( diff < proj_estimation_threshold )
>17406	ExpressionStatement	 
>17407	CallExpression	inliers . push_back ( j )
>17408	ArgumentList	j
>17409	Argument	j
>17410	Identifier	j
>17411	Callee	inliers . push_back
>17412	MemberAccess	inliers . push_back
>17413	Identifier	push_back
>17414	Identifier	inliers
>17415	Condition	 
>17416	RelationalExpression	diff < proj_estimation_threshold
>17417	Identifier	proj_estimation_threshold
>17418	Identifier	diff
>17419	ExpressionStatement	 
>17420	AssignmentExpr	diff = sqrt ( diff )
>17421	CallExpression	sqrt ( diff )
>17422	ArgumentList	diff
>17423	Argument	diff
>17424	Identifier	diff
>17425	Callee	sqrt
>17426	Identifier	sqrt
>17427	Identifier	diff
>17428	IdentifierDeclStatement	 
>17429	IdentifierDecl	diff = ( pimg [ 0 ] - Vx ( projs_solve [ j ] ) ) * ( pimg [ 0 ] - Vx ( projs_solve [ j ] ) ) + ( pimg [ 1 ] - Vy ( \
>17430	AssignmentExpr	diff = ( pimg [ 0 ] - Vx ( projs_solve [ j ] ) ) * ( pimg [ 0 ] - Vx ( projs_solve [ j ] ) ) + ( pimg [ \
>17431	AdditiveExpression	( pimg [ 0 ] - Vx ( projs_solve [ j ] ) ) * ( pimg [ 0 ] - Vx ( projs_solve [ j ] ) ) + ( pimg [ 1 ] \
>17432	MultiplicativeExpression	( pimg [ 1 ] - Vy ( projs_solve [ j ] ) ) * ( pimg [ 1 ] - Vy ( projs_solve [ j ] ) )
>17433	AdditiveExpression	pimg [ 1 ] - Vy ( projs_solve [ j ] )
>17434	CallExpression	Vy ( projs_solve [ j ] )
>17435	ArgumentList	projs_solve [ j ]
>17436	Argument	projs_solve [ j ]
>17437	ArrayIndexing	projs_solve [ j ]
>17438	Identifier	j
>17439	Identifier	projs_solve
>17440	Callee	Vy
>17441	Identifier	Vy
>17442	ArrayIndexing	pimg [ 1 ]
>17443	PrimaryExpression	1
>17444	Identifier	pimg
>17445	AdditiveExpression	pimg [ 1 ] - Vy ( projs_solve [ j ] )
>17446	CallExpression	Vy ( projs_solve [ j ] )
>17447	ArgumentList	projs_solve [ j ]
>17448	Argument	projs_solve [ j ]
>17449	ArrayIndexing	projs_solve [ j ]
>17450	Identifier	j
>17451	Identifier	projs_solve
>17452	Callee	Vy
>17453	Identifier	Vy
>17454	ArrayIndexing	pimg [ 1 ]
>17455	PrimaryExpression	1
>17456	Identifier	pimg
>17457	MultiplicativeExpression	( pimg [ 0 ] - Vx ( projs_solve [ j ] ) ) * ( pimg [ 0 ] - Vx ( projs_solve [ j ] ) )
>17458	AdditiveExpression	pimg [ 0 ] - Vx ( projs_solve [ j ] )
>17459	CallExpression	Vx ( projs_solve [ j ] )
>17460	ArgumentList	projs_solve [ j ]
>17461	Argument	projs_solve [ j ]
>17462	ArrayIndexing	projs_solve [ j ]
>17463	Identifier	j
>17464	Identifier	projs_solve
>17465	Callee	Vx
>17466	Identifier	Vx
>17467	ArrayIndexing	pimg [ 0 ]
>17468	PrimaryExpression	0
>17469	Identifier	pimg
>17470	AdditiveExpression	pimg [ 0 ] - Vx ( projs_solve [ j ] )
>17471	CallExpression	Vx ( projs_solve [ j ] )
>17472	ArgumentList	projs_solve [ j ]
>17473	Argument	projs_solve [ j ]
>17474	ArrayIndexing	projs_solve [ j ]
>17475	Identifier	j
>17476	Identifier	projs_solve
>17477	Callee	Vx
>17478	Identifier	Vx
>17479	ArrayIndexing	pimg [ 0 ]
>17480	PrimaryExpression	0
>17481	Identifier	pimg
>17482	Identifier	diff
>17483	Identifier	diff
>17484	IdentifierDeclType	double
>17485	IdentifierDeclStatement	 
>17486	IdentifierDecl	pimg [ 2 ] = { - q2 [ 0 ] / q2 [ 2 ] , - q2 [ 1 ] / q2 [ 2 ] }
>17487	AssignmentExpr	pimg [ 2 ] = { - q2 [ 0 ] / q2 [ 2 ] , - q2 [ 1 ] / q2 [ 2 ] }
>17488	InitializerList	- q2 [ 0 ] / q2 [ 2 ]
>17489	MultiplicativeExpression	- q2 [ 1 ] / q2 [ 2 ]
>17490	ArrayIndexing	q2 [ 2 ]
>17491	PrimaryExpression	2
>17492	Identifier	q2
>17493	UnaryOp	- q2 [ 1 ]
>17494	ArrayIndexing	q2 [ 1 ]
>17495	PrimaryExpression	1
>17496	Identifier	q2
>17497	UnaryOperator	-
>17498	MultiplicativeExpression	- q2 [ 0 ] / q2 [ 2 ]
>17499	ArrayIndexing	q2 [ 2 ]
>17500	PrimaryExpression	2
>17501	Identifier	q2
>17502	UnaryOp	- q2 [ 0 ]
>17503	ArrayIndexing	q2 [ 0 ]
>17504	PrimaryExpression	0
>17505	Identifier	q2
>17506	UnaryOperator	-
>17507	Identifier	pimg
>17508	PrimaryExpression	2
>17509	Identifier	pimg
>17510	IdentifierDeclType	double [ 2 ]
>17511	ExpressionStatement	 
>17512	CallExpression	matrix_product331 ( Kinit , q , q2 )
>17513	ArgumentList	Kinit
>17514	Argument	q2
>17515	Identifier	q2
>17516	Argument	q
>17517	Identifier	q
>17518	Argument	Kinit
>17519	Identifier	Kinit
>17520	Callee	matrix_product331
>17521	Identifier	matrix_product331
>17522	ExpressionStatement	 
>17523	CallExpression	matrix_product ( 3 , 4 , 4 , 1 , Rigid , p , q )
>17524	ArgumentList	3
>17525	Argument	q
>17526	Identifier	q
>17527	Argument	p
>17528	Identifier	p
>17529	Argument	Rigid
>17530	Identifier	Rigid
>17531	Argument	1
>17532	PrimaryExpression	1
>17533	Argument	4
>17534	PrimaryExpression	4
>17535	Argument	4
>17536	PrimaryExpression	4
>17537	Argument	3
>17538	PrimaryExpression	3
>17539	Callee	matrix_product
>17540	Identifier	matrix_product
>17541	IdentifierDeclStatement	 
>17542	IdentifierDecl	q2 [ 3 ]
>17543	PrimaryExpression	3
>17544	Identifier	q2
>17545	IdentifierDeclType	double [ 3 ]
>17546	IdentifierDecl	q [ 3 ]
>17547	PrimaryExpression	3
>17548	Identifier	q
>17549	IdentifierDeclType	double [ 3 ]
>17550	IdentifierDeclStatement	 
>17551	IdentifierDecl	p [ 4 ] = { Vx ( points_solve [ j ] ) , Vy ( points_solve [ j ] ) , Vz ( points_solve [ j ] ) , 1.0 }
>17552	AssignmentExpr	p [ 4 ] = { Vx ( points_solve [ j ] ) , Vy ( points_solve [ j ] ) , Vz ( points_solve [ j ] ) , 1.0 }
>17553	InitializerList	Vx ( points_solve [ j ] )
>17554	PrimaryExpression	1.0
>17555	CallExpression	Vz ( points_solve [ j ] )
>17556	ArgumentList	points_solve [ j ]
>17557	Argument	points_solve [ j ]
>17558	ArrayIndexing	points_solve [ j ]
>17559	Identifier	j
>17560	Identifier	points_solve
>17561	Callee	Vz
>17562	Identifier	Vz
>17563	CallExpression	Vy ( points_solve [ j ] )
>17564	ArgumentList	points_solve [ j ]
>17565	Argument	points_solve [ j ]
>17566	ArrayIndexing	points_solve [ j ]
>17567	Identifier	j
>17568	Identifier	points_solve
>17569	Callee	Vy
>17570	Identifier	Vy
>17571	CallExpression	Vx ( points_solve [ j ] )
>17572	ArgumentList	points_solve [ j ]
>17573	Argument	points_solve [ j ]
>17574	ArrayIndexing	points_solve [ j ]
>17575	Identifier	j
>17576	Identifier	points_solve
>17577	Callee	Vx
>17578	Identifier	Vx
>17579	Identifier	p
>17580	PrimaryExpression	4
>17581	Identifier	p
>17582	IdentifierDeclType	double [ 4 ]
>17583	IncDecOp	 
>17584	IncDec	++
>17585	Identifier	j
>17586	Condition	 
>17587	RelationalExpression	j < num_points
>17588	Identifier	num_points
>17589	Identifier	j
>17590	ForInit	 
>17591	IdentifierDeclStatement	int j = 0 ;
>17592	IdentifierDecl	j = 0
>17593	AssignmentExpr	j = 0
>17594	PrimaryExpression	0
>17595	Identifier	j
>17596	Identifier	j
>17597	IdentifierDeclType	int
>17598	IdentifierDeclStatement	 
>17599	IdentifierDecl	num_behind = 0
>17600	AssignmentExpr	num_behind = 0
>17601	PrimaryExpression	0
>17602	Identifier	num_behind
>17603	Identifier	num_behind
>17604	IdentifierDeclType	int
>17605	IdentifierDeclStatement	 
>17606	IdentifierDecl	Rigid [ 12 ] = { Rinit [ 0 ] , Rinit [ 1 ] , Rinit [ 2 ] , tinit [ 0 ] , Rinit [ 3 ] , Rinit [ 4 ] , Rinit [ 5 ] , \
>17607	AssignmentExpr	Rigid [ 12 ] = { Rinit [ 0 ] , Rinit [ 1 ] , Rinit [ 2 ] , tinit [ 0 ] , Rinit [ 3 ] , Rinit [ 4 ] , \
>17608	InitializerList	Rinit [ 0 ]
>17609	ArrayIndexing	tinit [ 2 ]
>17610	PrimaryExpression	2
>17611	Identifier	tinit
>17612	ArrayIndexing	Rinit [ 8 ]
>17613	PrimaryExpression	8
>17614	Identifier	Rinit
>17615	ArrayIndexing	Rinit [ 7 ]
>17616	PrimaryExpression	7
>17617	Identifier	Rinit
>17618	ArrayIndexing	Rinit [ 6 ]
>17619	PrimaryExpression	6
>17620	Identifier	Rinit
>17621	ArrayIndexing	tinit [ 1 ]
>17622	PrimaryExpression	1
>17623	Identifier	tinit
>17624	ArrayIndexing	Rinit [ 5 ]
>17625	PrimaryExpression	5
>17626	Identifier	Rinit
>17627	ArrayIndexing	Rinit [ 4 ]
>17628	PrimaryExpression	4
>17629	Identifier	Rinit
>17630	ArrayIndexing	Rinit [ 3 ]
>17631	PrimaryExpression	3
>17632	Identifier	Rinit
>17633	ArrayIndexing	tinit [ 0 ]
>17634	PrimaryExpression	0
>17635	Identifier	tinit
>17636	ArrayIndexing	Rinit [ 2 ]
>17637	PrimaryExpression	2
>17638	Identifier	Rinit
>17639	ArrayIndexing	Rinit [ 1 ]
>17640	PrimaryExpression	1
>17641	Identifier	Rinit
>17642	ArrayIndexing	Rinit [ 0 ]
>17643	PrimaryExpression	0
>17644	Identifier	Rinit
>17645	Identifier	Rigid
>17646	PrimaryExpression	12
>17647	Identifier	Rigid
>17648	IdentifierDeclType	double [ 12 ]
>17649	ExpressionStatement	 
>17650	CallExpression	printf ( \"[FindAndVerifyCamera] Checking consistency...\n\" )
>17651	ArgumentList	\"[FindAndVerifyCamera] Checking consistency...\n\"
>17652	Argument	\"[FindAndVerifyCamera] Checking consistency...\n\"
>17653	PrimaryExpression	\"[FindAndVerifyCamera] Checking consistency...\n\"
>17654	Callee	printf
>17655	Identifier	printf
>17656	ExpressionStatement	 
>17657	CallExpression	fflush ( stdout )
>17658	ArgumentList	stdout
>17659	Argument	stdout
>17660	Identifier	stdout
>17661	Callee	fflush
>17662	Identifier	fflush
>17663	ExpressionStatement	 
>17664	CallExpression	matrix_print ( 1 , 3 , tinit )
>17665	ArgumentList	1
>17666	Argument	tinit
>17667	Identifier	tinit
>17668	Argument	3
>17669	PrimaryExpression	3
>17670	Argument	1
>17671	PrimaryExpression	1
>17672	Callee	matrix_print
>17673	Identifier	matrix_print
>17674	ExpressionStatement	 
>17675	CallExpression	matrix_print ( 3 , 3 , Rinit )
>17676	ArgumentList	3
>17677	Argument	Rinit
>17678	Identifier	Rinit
>17679	Argument	3
>17680	PrimaryExpression	3
>17681	Argument	3
>17682	PrimaryExpression	3
>17683	Callee	matrix_print
>17684	Identifier	matrix_print
>17685	ExpressionStatement	 
>17686	CallExpression	printf ( \"[FindAndVerifyCamera] Estimated extrinsics
>17687	ArgumentList	\"[FindAndVerifyCamera] Estimated extrinsics
>17688	Argument	\"[FindAndVerifyCamera] Estimated extrinsics
>17689	PrimaryExpression	\"[FindAndVerifyCamera] Estimated extrinsics
>17690	Callee	printf
>17691	Identifier	printf
>17692	ExpressionStatement	 
>17693	CallExpression	matrix_print ( 3 , 3 , Kinit )
>17694	ArgumentList	3
>17695	Argument	Kinit
>17696	Identifier	Kinit
>17697	Argument	3
>17698	PrimaryExpression	3
>17699	Argument	3
>17700	PrimaryExpression	3
>17701	Callee	matrix_print
>17702	Identifier	matrix_print
>17703	ExpressionStatement	 
>17704	CallExpression	printf ( \"[FindAndVerifyCamera] Estimated intrinsics
>17705	ArgumentList	\"[FindAndVerifyCamera] Estimated intrinsics
>17706	Argument	\"[FindAndVerifyCamera] Estimated intrinsics
>17707	PrimaryExpression	\"[FindAndVerifyCamera] Estimated intrinsics
>17708	Callee	printf
>17709	Identifier	printf
>17710	ExpressionStatement	 
>17711	CallExpression	matrix_scale ( 3 , 3 , Kinit , 1.0 / Kinit [ 8 ] , Kinit )
>17712	ArgumentList	3
>17713	Argument	Kinit
>17714	Identifier	Kinit
>17715	Argument	1.0 / Kinit [ 8 ]
>17716	MultiplicativeExpression	1.0 / Kinit [ 8 ]
>17717	ArrayIndexing	Kinit [ 8 ]
>17718	PrimaryExpression	8
>17719	Identifier	Kinit
>17720	PrimaryExpression	1.0
>17721	Argument	Kinit
>17722	Identifier	Kinit
>17723	Argument	3
>17724	PrimaryExpression	3
>17725	Argument	3
>17726	PrimaryExpression	3
>17727	Callee	matrix_scale
>17728	Identifier	matrix_scale
>17729	ExpressionStatement	 
>17730	CallExpression	FixIntrinsics ( P , Kinit , Rinit , tinit )
>17731	ArgumentList	P
>17732	Argument	tinit
>17733	Identifier	tinit
>17734	Argument	Rinit
>17735	Identifier	Rinit
>17736	Argument	Kinit
>17737	Identifier	Kinit
>17738	Argument	P
>17739	Identifier	P
>17740	Callee	FixIntrinsics
>17741	Identifier	FixIntrinsics
>17742	ExpressionStatement	 
>17743	CallExpression	dgerqf_driver ( 3 , 3 , KRinit , Kinit , Rinit )
>17744	ArgumentList	3
>17745	Argument	Rinit
>17746	Identifier	Rinit
>17747	Argument	Kinit
>17748	Identifier	Kinit
>17749	Argument	KRinit
>17750	Identifier	KRinit
>17751	Argument	3
>17752	PrimaryExpression	3
>17753	Argument	3
>17754	PrimaryExpression	3
>17755	Callee	dgerqf_driver
>17756	Identifier	dgerqf_driver
>17757	ExpressionStatement	 
>17758	CallExpression	memcpy ( KRinit + 6 , P + 8 , 3 * sizeof ( double ) )
>17759	ArgumentList	KRinit + 6
>17760	Argument	3 * sizeof ( double )
>17761	MultiplicativeExpression	3 * sizeof ( double )
>17762	SizeofExpr	sizeof ( double )
>17763	SizeofOperand	double
>17764	Sizeof	sizeof
>17765	PrimaryExpression	3
>17766	Argument	P + 8
>17767	AdditiveExpression	P + 8
>17768	PrimaryExpression	8
>17769	Identifier	P
>17770	Argument	KRinit + 6
>17771	AdditiveExpression	KRinit + 6
>17772	PrimaryExpression	6
>17773	Identifier	KRinit
>17774	Callee	memcpy
>17775	Identifier	memcpy
>17776	ExpressionStatement	 
>17777	CallExpression	memcpy ( KRinit + 3 , P + 4 , 3 * sizeof ( double ) )
>17778	ArgumentList	KRinit + 3
>17779	Argument	3 * sizeof ( double )
>17780	MultiplicativeExpression	3 * sizeof ( double )
>17781	SizeofExpr	sizeof ( double )
>17782	SizeofOperand	double
>17783	Sizeof	sizeof
>17784	PrimaryExpression	3
>17785	Argument	P + 4
>17786	AdditiveExpression	P + 4
>17787	PrimaryExpression	4
>17788	Identifier	P
>17789	Argument	KRinit + 3
>17790	AdditiveExpression	KRinit + 3
>17791	PrimaryExpression	3
>17792	Identifier	KRinit
>17793	Callee	memcpy
>17794	Identifier	memcpy
>17795	ExpressionStatement	 
>17796	CallExpression	memcpy ( KRinit + 0 , P + 0 , 3 * sizeof ( double ) )
>17797	ArgumentList	KRinit + 0
>17798	Argument	3 * sizeof ( double )
>17799	MultiplicativeExpression	3 * sizeof ( double )
>17800	SizeofExpr	sizeof ( double )
>17801	SizeofOperand	double
>17802	Sizeof	sizeof
>17803	PrimaryExpression	3
>17804	Argument	P + 0
>17805	AdditiveExpression	P + 0
>17806	PrimaryExpression	0
>17807	Identifier	P
>17808	Argument	KRinit + 0
>17809	AdditiveExpression	KRinit + 0
>17810	PrimaryExpression	0
>17811	Identifier	KRinit
>17812	Callee	memcpy
>17813	Identifier	memcpy
>17814	IdentifierDeclStatement	 
>17815	IdentifierDecl	tinit [ 3 ]
>17816	PrimaryExpression	3
>17817	Identifier	tinit
>17818	IdentifierDeclType	double [ 3 ]
>17819	IdentifierDecl	Rinit [ 9 ]
>17820	PrimaryExpression	9
>17821	Identifier	Rinit
>17822	IdentifierDeclType	double [ 9 ]
>17823	IdentifierDecl	Kinit [ 9 ]
>17824	PrimaryExpression	9
>17825	Identifier	Kinit
>17826	IdentifierDeclType	double [ 9 ]
>17827	IdentifierDecl	KRinit [ 9 ]
>17828	PrimaryExpression	9
>17829	Identifier	KRinit
>17830	IdentifierDeclType	double [ 9 ]
>17831	IfStatement	if ( r <= MIN_INLIERS_EST_PROJECTION )
>17832	CompoundStatement	 
>17833	ReturnStatement	 
>17834	Identifier	false
>17835	ExpressionStatement	 
>17836	Statement	 
>17837	Statement	 
>17838	Statement	 
>17839	Statement	 
>17840	Statement	 
>17841	Condition	 
>17842	RelationalExpression	r <= MIN_INLIERS_EST_PROJECTION
>17843	Identifier	MIN_INLIERS_EST_PROJECTION
>17844	Identifier	r
>17845	IfStatement	if ( r == - 1 )
>17846	CompoundStatement	 
>17847	ReturnStatement	 
>17848	Identifier	false
>17849	ExpressionStatement	 
>17850	CallExpression	printf ( \"[FindAndVerifyCamera] Couldn't find projection matrix\n\" )
>17851	ArgumentList	\"[FindAndVerifyCamera] Couldn't find projection matrix\n\"
>17852	Argument	\"[FindAndVerifyCamera] Couldn't find projection matrix\n\"
>17853	PrimaryExpression	\"[FindAndVerifyCamera] Couldn't find projection matrix\n\"
>17854	Callee	printf
>17855	Identifier	printf
>17856	Condition	 
>17857	EqualityExpression	r == - 1
>17858	UnaryOp	- 1
>17859	PrimaryExpression	1
>17860	UnaryOperator	-
>17861	Identifier	r
>17862	IfStatement	if ( num_points >= 9 )
>17863	CompoundStatement	 
>17864	ExpressionStatement	 
>17865	AssignmentExpr	r = find_projection_3x4_ransac ( num_points , points_solve , projs_solve , P , 4096 , proj_estimation_\
>17866	CallExpression	find_projection_3x4_ransac ( num_points , points_solve , projs_solve , P , 4096 , proj_estimation_threshold )
>17867	ArgumentList	num_points
>17868	Argument	proj_estimation_threshold
>17869	Identifier	proj_estimation_threshold
>17870	Argument	4096
>17871	PrimaryExpression	4096
>17872	Argument	P
>17873	Identifier	P
>17874	Argument	projs_solve
>17875	Identifier	projs_solve
>17876	Argument	points_solve
>17877	Identifier	points_solve
>17878	Argument	num_points
>17879	Identifier	num_points
>17880	Callee	find_projection_3x4_ransac
>17881	Identifier	find_projection_3x4_ransac
>17882	Identifier	r
>17883	Condition	 
>17884	RelationalExpression	num_points >= 9
>17885	PrimaryExpression	9
>17886	Identifier	num_points
>17887	IdentifierDeclStatement	 
>17888	IdentifierDecl	r = - 1
>17889	AssignmentExpr	r = - 1
>17890	UnaryOp	- 1
>17891	PrimaryExpression	1
>17892	UnaryOperator	-
>17893	Identifier	r
>17894	Identifier	r
>17895	IdentifierDeclType	int
>17896	IdentifierDeclStatement	 
>17897	IdentifierDecl	P [ 12 ]
>17898	PrimaryExpression	12
>17899	Identifier	P
>17900	IdentifierDeclType	double [ 12 ]
>17949	FunctionDef	BundlerApp 
>17950	ParameterList	ImageData & data , int image_idx , int camera_idx , int num_cameras , int num_points , int * added_order , v3_t * \
>17951	Parameter	 
>17952	Identifier	refine_cameras_and_points
>17953	ParameterType	bool
>17954	Parameter	 
>17955	Identifier	success_out
>17956	ParameterType	bool *
>17957	Parameter	 
>17958	Identifier	pt_views
>17959	ParameterType	std 
>17960	Parameter	 
>17961	Identifier	cameras
>17962	ParameterType	camera_params_t *
>17963	Parameter	 
>17964	Identifier	parent
>17965	ParameterType	camera_params_t *
>17966	Parameter	 
>17967	Identifier	points
>17968	ParameterType	v3_t *
>17969	Parameter	 
>17970	Identifier	added_order
>17971	ParameterType	int *
>17972	Parameter	 
>17973	Identifier	num_points
>17974	ParameterType	int
>17975	Parameter	 
>17976	Identifier	num_cameras
>17977	ParameterType	int
>17978	Parameter	 
>17979	Identifier	camera_idx
>17980	ParameterType	int
>17981	Parameter	 
>17982	Identifier	image_idx
>17983	ParameterType	int
>17984	Parameter	 
>17985	Identifier	data
>17986	ParameterType	ImageData &
>17987	ReturnType	camera_params_t
>17988	CompoundStatement	 
>17989	ReturnStatement	 
>17990	Identifier	camera_new
>17991	ExpressionStatement	 
>17992	AssignmentExpr	data . m_camera . m_adjusted = true
>17993	Identifier	true
>17994	MemberAccess	data . m_camera . m_adjusted
>17995	Identifier	m_adjusted
>17996	MemberAccess	data . m_camera
>17997	Identifier	m_camera
>17998	Identifier	data
>17999	ExpressionStatement	 
>18000	CallExpression	data . ReadKeyColors ( )
>18001	ArgumentList	 
>18002	Callee	data . ReadKeyColors
>18003	MemberAccess	data . ReadKeyColors
>18004	Identifier	ReadKeyColors
>18005	Identifier	data
>18006	ExpressionStatement	 
>18007	CallExpression	printf ( \"[BundleInitializeImage] Initializing took %0.3fs\n\" , ( double ) ( end - start ) / CLOCKS_PER_SEC )
>18008	ArgumentList	\"[BundleInitializeImage] Initializing took %0.3fs\n\"
>18009	Argument	( double ) ( end - start ) / CLOCKS_PER_SEC
>18010	MultiplicativeExpression	( double ) ( end - start ) / CLOCKS_PER_SEC
>18011	Identifier	CLOCKS_PER_SEC
>18012	CastExpression	( double ) ( end - start )
>18013	AdditiveExpression	end - start
>18014	Identifier	start
>18015	Identifier	end
>18016	CastTarget	double
>18017	Argument	\"[BundleInitializeImage] Initializing took %0.3fs\n\"
>18018	PrimaryExpression	\"[BundleInitializeImage] Initializing took %0.3fs\n\"
>18019	Callee	printf
>18020	Identifier	printf
>18021	IdentifierDeclStatement	 
>18022	IdentifierDecl	end = clock ( )
>18023	AssignmentExpr	end = clock ( )
>18024	CallExpression	clock ( )
>18025	ArgumentList	 
>18026	Callee	clock
>18027	Identifier	clock
>18028	Identifier	end
>18029	Identifier	end
>18030	IdentifierDeclType	clock_t
>18031	ExpressionStatement	 
>18032	Identifier	keys_solve
>18033	Statement	 
>18034	Statement	 
>18035	Statement	 
>18036	ExpressionStatement	 
>18037	Identifier	idxs_solve
>18038	Statement	 
>18039	Statement	 
>18040	Statement	 
>18041	ExpressionStatement	 
>18042	Identifier	projs_solve_orig
>18043	Statement	 
>18044	Statement	 
>18045	Statement	 
>18046	ExpressionStatement	 
>18047	Identifier	projs_solve
>18048	Statement	 
>18049	Statement	 
>18050	Statement	 
>18051	ExpressionStatement	 
>18052	Identifier	points_solve
>18053	Statement	 
>18054	Statement	 
>18055	Statement	 
>18056	ExpressionStatement	 
>18057	Identifier	keys_final
>18058	Statement	 
>18059	Statement	 
>18060	Statement	 
>18061	ExpressionStatement	 
>18062	Identifier	idxs_final
>18063	Statement	 
>18064	Statement	 
>18065	Statement	 
>18066	ExpressionStatement	 
>18067	Identifier	projs_final
>18068	Statement	 
>18069	Statement	 
>18070	Statement	 
>18071	ExpressionStatement	 
>18072	Identifier	points_final
>18073	Statement	 
>18074	Statement	 
>18075	Statement	 
>18076	ExpressionStatement	 
>18077	CallExpression	fflush ( stdout )
>18078	ArgumentList	stdout
>18079	Argument	stdout
>18080	Identifier	stdout
>18081	Callee	fflush
>18082	Identifier	fflush
>18083	ForStatement	for ( int i = 0 ; i < num_inliers ; i ++ )
>18084	CompoundStatement	 
>18085	ExpressionStatement	 
>18086	CallExpression	pt_views [ idxs_final [ inlier_idx ] ] . push_back ( ImageKey ( camera_idx , keys_final [ inlier_idx ] ) )
>18087	ArgumentList	ImageKey ( camera_idx , keys_final [ inlier_idx ] )
>18088	Argument	ImageKey ( camera_idx , keys_final [ inlier_idx ] )
>18089	CallExpression	ImageKey ( camera_idx , keys_final [ inlier_idx ] )
>18090	ArgumentList	camera_idx
>18091	Argument	keys_final [ inlier_idx ]
>18092	ArrayIndexing	keys_final [ inlier_idx ]
>18093	Identifier	inlier_idx
>18094	Identifier	keys_final
>18095	Argument	camera_idx
>18096	Identifier	camera_idx
>18097	Callee	ImageKey
>18098	Identifier	ImageKey
>18099	Callee	pt_views [ idxs_final [ inlier_idx ] ] . push_back
>18100	MemberAccess	pt_views [ idxs_final [ inlier_idx ] ] . push_back
>18101	Identifier	push_back
>18102	ArrayIndexing	pt_views [ idxs_final [ inlier_idx ] ]
>18103	ArrayIndexing	idxs_final [ inlier_idx ]
>18104	Identifier	inlier_idx
>18105	Identifier	idxs_final
>18106	Identifier	pt_views
>18107	ExpressionStatement	 
>18108	AssignmentExpr	data . m_keys [ keys_final [ inlier_idx ] ] . m_extra = idxs_final [ inlier_idx ]
>18109	ArrayIndexing	idxs_final [ inlier_idx ]
>18110	Identifier	inlier_idx
>18111	Identifier	idxs_final
>18112	MemberAccess	data . m_keys [ keys_final [ inlier_idx ] ] . m_extra
>18113	Identifier	m_extra
>18114	ArrayIndexing	data . m_keys [ keys_final [ inlier_idx ] ]
>18115	ArrayIndexing	keys_final [ inlier_idx ]
>18116	Identifier	inlier_idx
>18117	Identifier	keys_final
>18118	MemberAccess	data . m_keys
>18119	Identifier	m_keys
>18120	Identifier	data
>18121	IdentifierDeclStatement	 
>18122	IdentifierDecl	inlier_idx = inliers [ i ]
>18123	AssignmentExpr	inlier_idx = inliers [ i ]
>18124	ArrayIndexing	inliers [ i ]
>18125	Identifier	i
>18126	Identifier	inliers
>18127	Identifier	inlier_idx
>18128	Identifier	inlier_idx
>18129	IdentifierDeclType	int
>18130	IncDecOp	 
>18131	IncDec	++
>18132	Identifier	i
>18133	Condition	 
>18134	RelationalExpression	i < num_inliers
>18135	Identifier	num_inliers
>18136	Identifier	i
>18137	ForInit	 
>18138	IdentifierDeclStatement	int i = 0 ;
>18139	IdentifierDecl	i = 0
>18140	AssignmentExpr	i = 0
>18141	PrimaryExpression	0
>18142	Identifier	i
>18143	Identifier	i
>18144	IdentifierDeclType	int
>18145	ExpressionStatement	 
>18146	AssignmentExpr	num_inliers = ( int ) inliers . size ( )
>18147	CastExpression	( int ) inliers . size ( )
>18148	CallExpression	inliers . size ( )
>18149	ArgumentList	 
>18150	Callee	inliers . size
>18151	MemberAccess	inliers . size
>18152	Identifier	size
>18153	Identifier	inliers
>18154	CastTarget	int
>18155	Identifier	num_inliers
>18156	IfStatement	if ( ( int ) inliers . size ( ) < 8 || camera_new . f < 0.1 * data . GetWidth ( ) )
>18157	CompoundStatement	 
>18158	ReturnStatement	 
>18159	Identifier	dummy
>18160	IdentifierDeclStatement	 
>18161	IdentifierDecl	dummy
>18162	Identifier	dummy
>18163	IdentifierDeclType	camera_params_t
>18164	ExpressionStatement	 
>18165	Identifier	keys_solve
>18166	Statement	 
>18167	Statement	 
>18168	Statement	 
>18169	ExpressionStatement	 
>18170	Identifier	idxs_solve
>18171	Statement	 
>18172	Statement	 
>18173	Statement	 
>18174	ExpressionStatement	 
>18175	Identifier	projs_solve_orig
>18176	Statement	 
>18177	Statement	 
>18178	Statement	 
>18179	ExpressionStatement	 
>18180	Identifier	projs_solve
>18181	Statement	 
>18182	Statement	 
>18183	Statement	 
>18184	ExpressionStatement	 
>18185	Identifier	points_solve
>18186	Statement	 
>18187	Statement	 
>18188	Statement	 
>18189	ExpressionStatement	 
>18190	Identifier	keys_final
>18191	Statement	 
>18192	Statement	 
>18193	Statement	 
>18194	ExpressionStatement	 
>18195	Identifier	idxs_final
>18196	Statement	 
>18197	Statement	 
>18198	Statement	 
>18199	ExpressionStatement	 
>18200	Identifier	projs_final
>18201	Statement	 
>18202	Statement	 
>18203	Statement	 
>18204	ExpressionStatement	 
>18205	Identifier	points_final
>18206	Statement	 
>18207	Statement	 
>18208	Statement	 
>18209	IfStatement	if ( success_out )
>18210	ExpressionStatement	 
>18211	AssignmentExpr	* success_out = false
>18212	Identifier	false
>18213	UnaryOp	* success_out
>18214	Identifier	success_out
>18215	UnaryOperator	*
>18216	Condition	 
>18217	Identifier	success_out
>18218	ExpressionStatement	 
>18219	CallExpression	printf ( \"[BundleInitializeImage] Bad camera\n\" )
>18220	ArgumentList	\"[BundleInitializeImage] Bad camera\n\"
>18221	Argument	\"[BundleInitializeImage] Bad camera\n\"
>18222	PrimaryExpression	\"[BundleInitializeImage] Bad camera\n\"
>18223	Callee	printf
>18224	Identifier	printf
>18225	Condition	 
>18226	OrExpression	( int ) inliers . size ( ) < 8 || camera_new . f < 0.1 * data . GetWidth ( )
>18227	RelationalExpression	camera_new . f < 0.1 * data . GetWidth ( )
>18228	MultiplicativeExpression	0.1 * data . GetWidth ( )
>18229	CallExpression	data . GetWidth ( )
>18230	ArgumentList	 
>18231	Callee	data . GetWidth
>18232	MemberAccess	data . GetWidth
>18233	Identifier	GetWidth
>18234	Identifier	data
>18235	PrimaryExpression	0.1
>18236	MemberAccess	camera_new . f
>18237	Identifier	f
>18238	Identifier	camera_new
>18239	RelationalExpression	( int ) inliers . size ( ) < 8
>18240	PrimaryExpression	8
>18241	CastExpression	( int ) inliers . size ( )
>18242	CallExpression	inliers . size ( )
>18243	ArgumentList	 
>18244	Callee	inliers . size
>18245	MemberAccess	inliers . size
>18246	Identifier	size
>18247	Identifier	inliers
>18248	CastTarget	int
>18249	IfStatement	if ( refine_cameras_and_points )
>18250	ElseStatement	else
>18251	CompoundStatement	 
>18252	ExpressionStatement	 
>18253	AssignmentExpr	inliers = RefineCameraParameters ( data , num_points_final , points_final , projs_final , idxs_final , & \
>18254	CallExpression	RefineCameraParameters ( data , num_points_final , points_final , projs_final , idxs_final , & camera_new , NULL , ! \
>18255	ArgumentList	data
>18256	Argument	m_max_proj_error_threshold
>18257	Identifier	m_max_proj_error_threshold
>18258	Argument	m_min_proj_error_threshold
>18259	Identifier	m_min_proj_error_threshold
>18260	Argument	m_estimate_distortion
>18261	Identifier	m_estimate_distortion
>18262	Argument	m_optimize_for_fisheye
>18263	Identifier	m_optimize_for_fisheye
>18264	Argument	true
>18265	Identifier	true
>18266	Argument	! m_fixed_focal_length
>18267	UnaryOp	! m_fixed_focal_length
>18268	Identifier	m_fixed_focal_length
>18269	UnaryOperator	!
>18270	Argument	NULL
>18271	Identifier	NULL
>18272	Argument	& camera_new
>18273	UnaryOp	& camera_new
>18274	Identifier	camera_new
>18275	UnaryOperator	&
>18276	Argument	idxs_final
>18277	Identifier	idxs_final
>18278	Argument	projs_final
>18279	Identifier	projs_final
>18280	Argument	points_final
>18281	Identifier	points_final
>18282	Argument	num_points_final
>18283	Identifier	num_points_final
>18284	Argument	data
>18285	Identifier	data
>18286	Callee	RefineCameraParameters
>18287	Identifier	RefineCameraParameters
>18288	Identifier	inliers
>18289	CompoundStatement	 
>18290	ExpressionStatement	 
>18291	AssignmentExpr	inliers = RefineCameraAndPoints ( data , num_points_final , points_final , projs_final , idxs_final , \
>18292	CallExpression	RefineCameraAndPoints ( data , num_points_final , points_final , projs_final , idxs_final , cameras , added_order , \
>18293	ArgumentList	data
>18294	Argument	true
>18295	Identifier	true
>18296	Argument	& camera_new
>18297	UnaryOp	& camera_new
>18298	Identifier	camera_new
>18299	UnaryOperator	&
>18300	Argument	pt_views
>18301	Identifier	pt_views
>18302	Argument	added_order
>18303	Identifier	added_order
>18304	Argument	cameras
>18305	Identifier	cameras
>18306	Argument	idxs_final
>18307	Identifier	idxs_final
>18308	Argument	projs_final
>18309	Identifier	projs_final
>18310	Argument	points_final
>18311	Identifier	points_final
>18312	Argument	num_points_final
>18313	Identifier	num_points_final
>18314	Argument	data
>18315	Identifier	data
>18316	Callee	RefineCameraAndPoints
>18317	Identifier	RefineCameraAndPoints
>18318	Identifier	inliers
>18319	Condition	 
>18320	Identifier	refine_cameras_and_points
>18321	ForStatement	for ( int i = 0 ; i < num_inliers ; i ++ )
>18322	CompoundStatement	 
>18323	ExpressionStatement	 
>18324	AssignmentExpr	keys_final [ i ] = keys_solve [ inliers_weak [ i ] ]
>18325	ArrayIndexing	keys_solve [ inliers_weak [ i ] ]
>18326	ArrayIndexing	inliers_weak [ i ]
>18327	Identifier	i
>18328	Identifier	inliers_weak
>18329	Identifier	keys_solve
>18330	ArrayIndexing	keys_final [ i ]
>18331	Identifier	i
>18332	Identifier	keys_final
>18333	ExpressionStatement	 
>18334	AssignmentExpr	idxs_final [ i ] = idxs_solve [ inliers_weak [ i ] ]
>18335	ArrayIndexing	idxs_solve [ inliers_weak [ i ] ]
>18336	ArrayIndexing	inliers_weak [ i ]
>18337	Identifier	i
>18338	Identifier	inliers_weak
>18339	Identifier	idxs_solve
>18340	ArrayIndexing	idxs_final [ i ]
>18341	Identifier	i
>18342	Identifier	idxs_final
>18343	IfStatement	if ( m_optimize_for_fisheye )
>18344	ElseStatement	else
>18345	ExpressionStatement	 
>18346	AssignmentExpr	projs_final [ i ] = projs_solve [ inliers_weak [ i ] ]
>18347	ArrayIndexing	projs_solve [ inliers_weak [ i ] ]
>18348	ArrayIndexing	inliers_weak [ i ]
>18349	Identifier	i
>18350	Identifier	inliers_weak
>18351	Identifier	projs_solve
>18352	ArrayIndexing	projs_final [ i ]
>18353	Identifier	i
>18354	Identifier	projs_final
>18355	ExpressionStatement	 
>18356	AssignmentExpr	projs_final [ i ] = projs_solve_orig [ inliers_weak [ i ] ]
>18357	ArrayIndexing	projs_solve_orig [ inliers_weak [ i ] ]
>18358	ArrayIndexing	inliers_weak [ i ]
>18359	Identifier	i
>18360	Identifier	inliers_weak
>18361	Identifier	projs_solve_orig
>18362	ArrayIndexing	projs_final [ i ]
>18363	Identifier	i
>18364	Identifier	projs_final
>18365	Condition	 
>18366	Identifier	m_optimize_for_fisheye
>18367	ExpressionStatement	 
>18368	AssignmentExpr	points_final [ i ] = points_solve [ inliers_weak [ i ] ]
>18369	ArrayIndexing	points_solve [ inliers_weak [ i ] ]
>18370	ArrayIndexing	inliers_weak [ i ]
>18371	Identifier	i
>18372	Identifier	inliers_weak
>18373	Identifier	points_solve
>18374	ArrayIndexing	points_final [ i ]
>18375	Identifier	i
>18376	Identifier	points_final
>18377	IncDecOp	 
>18378	IncDec	++
>18379	Identifier	i
>18380	Condition	 
>18381	RelationalExpression	i < num_inliers
>18382	Identifier	num_inliers
>18383	Identifier	i
>18384	ForInit	 
>18385	IdentifierDeclStatement	int i = 0 ;
>18386	IdentifierDecl	i = 0
>18387	AssignmentExpr	i = 0
>18388	PrimaryExpression	0
>18389	Identifier	i
>18390	Identifier	i
>18391	IdentifierDeclType	int
>18392	IdentifierDeclStatement	 
>18393	IdentifierDecl	num_points_final = num_inliers
>18394	AssignmentExpr	num_points_final = num_inliers
>18395	Identifier	num_inliers
>18396	Identifier	num_inliers
>18397	Identifier	num_points_final
>18398	IdentifierDeclType	int
>18399	IdentifierDeclStatement	 
>18400	IdentifierDecl	* keys_final = new int [ num_inliers ]
>18401	AssignmentExpr	* keys_final = new int [ num_inliers ]
>18402	Identifier	num_inliers
>18403	Identifier	num_inliers
>18404	Identifier	keys_final
>18405	IdentifierDeclType	int *
>18406	IdentifierDeclStatement	 
>18407	IdentifierDecl	* idxs_final = new int [ num_inliers ]
>18408	AssignmentExpr	* idxs_final = new int [ num_inliers ]
>18409	Identifier	num_inliers
>18410	Identifier	num_inliers
>18411	Identifier	idxs_final
>18412	IdentifierDeclType	int *
>18413	IdentifierDeclStatement	 
>18414	IdentifierDecl	* projs_final = new v2_t [ num_inliers ]
>18415	AssignmentExpr	* projs_final = new v2_t [ num_inliers ]
>18416	Identifier	num_inliers
>18417	Identifier	num_inliers
>18418	Identifier	projs_final
>18419	IdentifierDeclType	v2_t *
>18420	IdentifierDeclStatement	 
>18421	IdentifierDecl	* points_final = new v3_t [ num_inliers ]
>18422	AssignmentExpr	* points_final = new v3_t [ num_inliers ]
>18423	Identifier	num_inliers
>18424	Identifier	num_inliers
>18425	Identifier	points_final
>18426	IdentifierDeclType	v3_t *
>18427	IdentifierDeclStatement	 
>18428	IdentifierDecl	num_inliers = ( int ) inliers_weak . size ( )
>18429	AssignmentExpr	num_inliers = ( int ) inliers_weak . size ( )
>18430	CastExpression	( int ) inliers_weak . size ( )
>18431	CallExpression	inliers_weak . size ( )
>18432	ArgumentList	 
>18433	Callee	inliers_weak . size
>18434	MemberAccess	inliers_weak . size
>18435	Identifier	size
>18436	Identifier	inliers_weak
>18437	CastTarget	int
>18438	Identifier	num_inliers
>18439	Identifier	num_inliers
>18440	IdentifierDeclType	int
>18441	ExpressionStatement	 
>18442	CallExpression	fflush ( stdout )
>18443	ArgumentList	stdout
>18444	Argument	stdout
>18445	Identifier	stdout
>18446	Callee	fflush
>18447	Identifier	fflush
>18448	ExpressionStatement	 
>18449	CallExpression	printf ( \"[BundleInitializeImage] Adjusting...\n\" )
>18450	ArgumentList	\"[BundleInitializeImage] Adjusting...\n\"
>18451	Argument	\"[BundleInitializeImage] Adjusting...\n\"
>18452	PrimaryExpression	\"[BundleInitializeImage] Adjusting...\n\"
>18453	Callee	printf
>18454	Identifier	printf
>18455	IfStatement	if ( success )
>18456	ElseStatement	else
>18457	CompoundStatement	 
>18458	ExpressionStatement	 
>18459	Statement	 
>18460	Statement	 
>18461	Statement	 
>18462	Statement	 
>18463	Statement	 
>18464	CompoundStatement	 
>18465	IfStatement	if ( m_fixed_focal_length )
>18466	ElseStatement	else
>18467	CompoundStatement	 
>18468	IfStatement	if ( m_use_focal_estimate )
>18469	ElseStatement	else
>18470	CompoundStatement	 
>18471	IfStatement	if ( parent != NULL )
>18472	ElseStatement	else
>18473	ExpressionStatement	 
>18474	AssignmentExpr	camera_new . f = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>18475	MultiplicativeExpression	0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>18476	AdditiveExpression	Kinit [ 0 ] + Kinit [ 4 ]
>18477	ArrayIndexing	Kinit [ 4 ]
>18478	PrimaryExpression	4
>18479	Identifier	Kinit
>18480	ArrayIndexing	Kinit [ 0 ]
>18481	PrimaryExpression	0
>18482	Identifier	Kinit
>18483	PrimaryExpression	0.5
>18484	MemberAccess	camera_new . f
>18485	Identifier	f
>18486	Identifier	camera_new
>18487	ExpressionStatement	 
>18488	AssignmentExpr	camera_new . f = parent -> f
>18489	PtrMemberAccess	parent -> f
>18490	Identifier	f
>18491	Identifier	parent
>18492	MemberAccess	camera_new . f
>18493	Identifier	f
>18494	Identifier	camera_new
>18495	Condition	 
>18496	EqualityExpression	parent != NULL
>18497	Identifier	NULL
>18498	Identifier	parent
>18499	CompoundStatement	 
>18500	IfStatement	if ( data . m_has_init_focal )
>18501	ElseStatement	else
>18502	CompoundStatement	 
>18503	ExpressionStatement	 
>18504	AssignmentExpr	camera_new . f = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>18505	MultiplicativeExpression	0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>18506	AdditiveExpression	Kinit [ 0 ] + Kinit [ 4 ]
>18507	ArrayIndexing	Kinit [ 4 ]
>18508	PrimaryExpression	4
>18509	Identifier	Kinit
>18510	ArrayIndexing	Kinit [ 0 ]
>18511	PrimaryExpression	0
>18512	Identifier	Kinit
>18513	PrimaryExpression	0.5
>18514	MemberAccess	camera_new . f
>18515	Identifier	f
>18516	Identifier	camera_new
>18517	CompoundStatement	 
>18518	IfStatement	if ( ratio < 1.4 || m_trust_focal_estimate )
>18519	ElseStatement	else
>18520	CompoundStatement	 
>18521	ExpressionStatement	 
>18522	AssignmentExpr	camera_new . f = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>18523	MultiplicativeExpression	0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>18524	AdditiveExpression	Kinit [ 0 ] + Kinit [ 4 ]
>18525	ArrayIndexing	Kinit [ 4 ]
>18526	PrimaryExpression	4
>18527	Identifier	Kinit
>18528	ArrayIndexing	Kinit [ 0 ]
>18529	PrimaryExpression	0
>18530	Identifier	Kinit
>18531	PrimaryExpression	0.5
>18532	MemberAccess	camera_new . f
>18533	Identifier	f
>18534	Identifier	camera_new
>18535	ExpressionStatement	 
>18536	Statement	 
>18537	Statement	 
>18538	Statement	 
>18539	Statement	 
>18540	Statement	 
>18541	Statement	 
>18542	Statement	 
>18543	Statement	 
>18544	CompoundStatement	 
>18545	IfStatement	if ( m_constrain_focal )
>18546	ExpressionStatement	 
>18547	CallExpression	SetFocalConstraint ( m_image_data [ image_idx ] , & camera_new )
>18548	ArgumentList	m_image_data [ image_idx ]
>18549	Argument	& camera_new
>18550	UnaryOp	& camera_new
>18551	Identifier	camera_new
>18552	UnaryOperator	&
>18553	Argument	m_image_data [ image_idx ]
>18554	ArrayIndexing	m_image_data [ image_idx ]
>18555	Identifier	image_idx
>18556	Identifier	m_image_data
>18557	Callee	SetFocalConstraint
>18558	Identifier	SetFocalConstraint
>18559	Condition	 
>18560	Identifier	m_constrain_focal
>18561	ExpressionStatement	 
>18562	AssignmentExpr	camera_new . f = data . m_init_focal
>18563	MemberAccess	data . m_init_focal
>18564	Identifier	m_init_focal
>18565	Identifier	data
>18566	MemberAccess	camera_new . f
>18567	Identifier	f
>18568	Identifier	camera_new
>18569	Condition	 
>18570	OrExpression	ratio < 1.4 || m_trust_focal_estimate
>18571	Identifier	m_trust_focal_estimate
>18572	RelationalExpression	ratio < 1.4
>18573	PrimaryExpression	1.4
>18574	Identifier	ratio
>18575	IfStatement	if ( init > obs )
>18576	ElseStatement	else
>18577	ExpressionStatement	 
>18578	AssignmentExpr	ratio = obs / init
>18579	MultiplicativeExpression	obs / init
>18580	Identifier	init
>18581	Identifier	obs
>18582	Identifier	ratio
>18583	ExpressionStatement	 
>18584	AssignmentExpr	ratio = init / obs
>18585	MultiplicativeExpression	init / obs
>18586	Identifier	obs
>18587	Identifier	init
>18588	Identifier	ratio
>18589	Condition	 
>18590	RelationalExpression	init > obs
>18591	Identifier	obs
>18592	Identifier	init
>18593	ExpressionStatement	 
>18594	Statement	 
>18595	Statement	 
>18596	Statement	 
>18597	Statement	 
>18598	Statement	 
>18599	Statement	 
>18600	Statement	 
>18601	IdentifierDeclStatement	 
>18602	IdentifierDecl	obs = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>18603	AssignmentExpr	obs = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>18604	MultiplicativeExpression	0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>18605	AdditiveExpression	Kinit [ 0 ] + Kinit [ 4 ]
>18606	ArrayIndexing	Kinit [ 4 ]
>18607	PrimaryExpression	4
>18608	Identifier	Kinit
>18609	ArrayIndexing	Kinit [ 0 ]
>18610	PrimaryExpression	0
>18611	Identifier	Kinit
>18612	PrimaryExpression	0.5
>18613	Identifier	obs
>18614	Identifier	obs
>18615	IdentifierDeclType	double
>18616	IdentifierDeclStatement	 
>18617	IdentifierDecl	init = data . m_init_focal
>18618	AssignmentExpr	init = data . m_init_focal
>18619	MemberAccess	data . m_init_focal
>18620	Identifier	m_init_focal
>18621	Identifier	data
>18622	Identifier	init
>18623	Identifier	init
>18624	IdentifierDeclType	double
>18625	IdentifierDeclStatement	 
>18626	IdentifierDecl	ratio
>18627	Identifier	ratio
>18628	IdentifierDeclType	double
>18629	Condition	 
>18630	MemberAccess	data . m_has_init_focal
>18631	Identifier	m_has_init_focal
>18632	Identifier	data
>18633	Condition	 
>18634	Identifier	m_use_focal_estimate
>18635	CompoundStatement	 
>18636	ExpressionStatement	 
>18637	AssignmentExpr	camera_new . f = m_init_focal_length
>18638	Identifier	m_init_focal_length
>18639	MemberAccess	camera_new . f
>18640	Identifier	f
>18641	Identifier	camera_new
>18642	Condition	 
>18643	Identifier	m_fixed_focal_length
>18644	ExpressionStatement	 
>18645	CallExpression	SetCameraConstraints ( added_order [ num_cameras ] , & camera_new )
>18646	ArgumentList	added_order [ num_cameras ]
>18647	Argument	& camera_new
>18648	UnaryOp	& camera_new
>18649	Identifier	camera_new
>18650	UnaryOperator	&
>18651	Argument	added_order [ num_cameras ]
>18652	ArrayIndexing	added_order [ num_cameras ]
>18653	Identifier	num_cameras
>18654	Identifier	added_order
>18655	Callee	SetCameraConstraints
>18656	Identifier	SetCameraConstraints
>18657	ExpressionStatement	 
>18658	CallExpression	matrix_scale ( 3 , 1 , camera_new . t , - 1.0 , camera_new . t )
>18659	ArgumentList	3
>18660	Argument	camera_new . t
>18661	MemberAccess	camera_new . t
>18662	Identifier	t
>18663	Identifier	camera_new
>18664	Argument	- 1.0
>18665	UnaryOp	- 1.0
>18666	PrimaryExpression	1.0
>18667	UnaryOperator	-
>18668	Argument	camera_new . t
>18669	MemberAccess	camera_new . t
>18670	Identifier	t
>18671	Identifier	camera_new
>18672	Argument	1
>18673	PrimaryExpression	1
>18674	Argument	3
>18675	PrimaryExpression	3
>18676	Callee	matrix_scale
>18677	Identifier	matrix_scale
>18678	ExpressionStatement	 
>18679	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , Rinit , tinit , camera_new . t )
>18680	ArgumentList	3
>18681	Argument	camera_new . t
>18682	MemberAccess	camera_new . t
>18683	Identifier	t
>18684	Identifier	camera_new
>18685	Argument	tinit
>18686	Identifier	tinit
>18687	Argument	Rinit
>18688	Identifier	Rinit
>18689	Argument	1
>18690	PrimaryExpression	1
>18691	Argument	3
>18692	PrimaryExpression	3
>18693	Argument	3
>18694	PrimaryExpression	3
>18695	Argument	3
>18696	PrimaryExpression	3
>18697	Callee	matrix_transpose_product
>18698	Identifier	matrix_transpose_product
>18699	ExpressionStatement	 
>18700	CallExpression	memcpy ( camera_new . R , Rinit , 9 * sizeof ( double ) )
>18701	ArgumentList	camera_new . R
>18702	Argument	9 * sizeof ( double )
>18703	MultiplicativeExpression	9 * sizeof ( double )
>18704	SizeofExpr	sizeof ( double )
>18705	SizeofOperand	double
>18706	Sizeof	sizeof
>18707	PrimaryExpression	9
>18708	Argument	Rinit
>18709	Identifier	Rinit
>18710	Argument	camera_new . R
>18711	MemberAccess	camera_new . R
>18712	Identifier	R
>18713	Identifier	camera_new
>18714	Callee	memcpy
>18715	Identifier	memcpy
>18716	Condition	 
>18717	Identifier	success
>18718	ExpressionStatement	 
>18719	CallExpression	InitializeCameraParams ( data , camera_new )
>18720	ArgumentList	data
>18721	Argument	camera_new
>18722	Identifier	camera_new
>18723	Argument	data
>18724	Identifier	data
>18725	Callee	InitializeCameraParams
>18726	Identifier	InitializeCameraParams
>18727	IdentifierDeclStatement	 
>18728	IdentifierDecl	camera_new
>18729	Identifier	camera_new
>18730	IdentifierDeclType	camera_params_t
>18731	IfStatement	if ( ! success )
>18732	CompoundStatement	 
>18733	ReturnStatement	 
>18734	Identifier	dummy
>18735	ExpressionStatement	 
>18736	CallExpression	m_image_data [ image_idx ] . UnloadKeys ( )
>18737	ArgumentList	 
>18738	Callee	m_image_data [ image_idx ] . UnloadKeys
>18739	MemberAccess	m_image_data [ image_idx ] . UnloadKeys
>18740	Identifier	UnloadKeys
>18741	ArrayIndexing	m_image_data [ image_idx ]
>18742	Identifier	image_idx
>18743	Identifier	m_image_data
>18744	ExpressionStatement	 
>18745	Identifier	keys_solve
>18746	Statement	 
>18747	Statement	 
>18748	Statement	 
>18749	ExpressionStatement	 
>18750	Identifier	idxs_solve
>18751	Statement	 
>18752	Statement	 
>18753	Statement	 
>18754	ExpressionStatement	 
>18755	Identifier	projs_solve_orig
>18756	Statement	 
>18757	Statement	 
>18758	Statement	 
>18759	ExpressionStatement	 
>18760	Identifier	projs_solve
>18761	Statement	 
>18762	Statement	 
>18763	Statement	 
>18764	ExpressionStatement	 
>18765	Identifier	points_solve
>18766	Statement	 
>18767	Statement	 
>18768	Statement	 
>18769	IdentifierDeclStatement	 
>18770	IdentifierDecl	dummy
>18771	Identifier	dummy
>18772	IdentifierDeclType	camera_params_t
>18773	IfStatement	if ( success_out != NULL )
>18774	ExpressionStatement	 
>18775	AssignmentExpr	* success_out = false
>18776	Identifier	false
>18777	UnaryOp	* success_out
>18778	Identifier	success_out
>18779	UnaryOperator	*
>18780	Condition	 
>18781	EqualityExpression	success_out != NULL
>18782	Identifier	NULL
>18783	Identifier	success_out
>18784	ExpressionStatement	 
>18785	CallExpression	printf ( \"[BundleInitializeImage] Couldn't initialize\n\" )
>18786	ArgumentList	\"[BundleInitializeImage] Couldn't initialize\n\"
>18787	Argument	\"[BundleInitializeImage] Couldn't initialize\n\"
>18788	PrimaryExpression	\"[BundleInitializeImage] Couldn't initialize\n\"
>18789	Callee	printf
>18790	Identifier	printf
>18791	Condition	 
>18792	UnaryOp	! success
>18793	Identifier	success
>18794	UnaryOperator	!
>18795	IdentifierDeclStatement	 
>18796	IdentifierDecl	success = FindAndVerifyCamera ( num_pts_solve , points_solve , projs_solve , idxs_solve , Kinit , Rinit , tinit , \
>18797	AssignmentExpr	success = FindAndVerifyCamera ( num_pts_solve , points_solve , projs_solve , idxs_solve , Kinit , Rinit , \
>18798	CallExpression	FindAndVerifyCamera ( num_pts_solve , points_solve , projs_solve , idxs_solve , Kinit , Rinit , tinit , m_projection_\
>18799	ArgumentList	num_pts_solve
>18800	Argument	outliers
>18801	Identifier	outliers
>18802	Argument	inliers_weak
>18803	Identifier	inliers_weak
>18804	Argument	inliers
>18805	Identifier	inliers
>18806	Argument	16.0 * m_projection_estimation_threshold
>18807	MultiplicativeExpression	16.0 * m_projection_estimation_threshold
>18808	Identifier	m_projection_estimation_threshold
>18809	PrimaryExpression	16.0
>18810	Argument	m_projection_estimation_threshold
>18811	Identifier	m_projection_estimation_threshold
>18812	Argument	tinit
>18813	Identifier	tinit
>18814	Argument	Rinit
>18815	Identifier	Rinit
>18816	Argument	Kinit
>18817	Identifier	Kinit
>18818	Argument	idxs_solve
>18819	Identifier	idxs_solve
>18820	Argument	projs_solve
>18821	Identifier	projs_solve
>18822	Argument	points_solve
>18823	Identifier	points_solve
>18824	Argument	num_pts_solve
>18825	Identifier	num_pts_solve
>18826	Callee	FindAndVerifyCamera
>18827	Identifier	FindAndVerifyCamera
>18828	Identifier	success
>18829	Identifier	success
>18830	IdentifierDeclType	bool
>18831	IdentifierDeclStatement	 
>18832	IdentifierDecl	outliers
>18833	Identifier	outliers
>18834	IdentifierDeclType	std 
>18835	IdentifierDecl	inliers_weak
>18836	Identifier	inliers_weak
>18837	IdentifierDeclType	std 
>18838	IdentifierDecl	inliers
>18839	Identifier	inliers
>18840	IdentifierDeclType	std 
>18841	IdentifierDeclStatement	 
>18842	IdentifierDecl	tinit [ 3 ]
>18843	PrimaryExpression	3
>18844	Identifier	tinit
>18845	IdentifierDeclType	double [ 3 ]
>18846	IdentifierDecl	Rinit [ 9 ]
>18847	PrimaryExpression	9
>18848	Identifier	Rinit
>18849	IdentifierDeclType	double [ 9 ]
>18850	IdentifierDecl	Kinit [ 9 ]
>18851	PrimaryExpression	9
>18852	Identifier	Kinit
>18853	IdentifierDeclType	double [ 9 ]
>18854	ExpressionStatement	 
>18855	CallExpression	fflush ( stdout )
>18856	ArgumentList	stdout
>18857	Argument	stdout
>18858	Identifier	stdout
>18859	Callee	fflush
>18860	Identifier	fflush
>18861	ExpressionStatement	 
>18862	CallExpression	printf ( \"[BundleInitializeImage] Initializing camera...\n\" )
>18863	ArgumentList	\"[BundleInitializeImage] Initializing camera...\n\"
>18864	Argument	\"[BundleInitializeImage] Initializing camera...\n\"
>18865	PrimaryExpression	\"[BundleInitializeImage] Initializing camera...\n\"
>18866	Callee	printf
>18867	Identifier	printf
>18868	IfStatement	if ( num_pts_solve < m_min_max_matches )
>18869	CompoundStatement	 
>18870	ReturnStatement	 
>18871	Identifier	dummy
>18872	ExpressionStatement	 
>18873	CallExpression	m_image_data [ image_idx ] . UnloadKeys ( )
>18874	ArgumentList	 
>18875	Callee	m_image_data [ image_idx ] . UnloadKeys
>18876	MemberAccess	m_image_data [ image_idx ] . UnloadKeys
>18877	Identifier	UnloadKeys
>18878	ArrayIndexing	m_image_data [ image_idx ]
>18879	Identifier	image_idx
>18880	Identifier	m_image_data
>18881	ExpressionStatement	 
>18882	Identifier	keys_solve
>18883	Statement	 
>18884	Statement	 
>18885	Statement	 
>18886	ExpressionStatement	 
>18887	Identifier	idxs_solve
>18888	Statement	 
>18889	Statement	 
>18890	Statement	 
>18891	ExpressionStatement	 
>18892	Identifier	projs_solve_orig
>18893	Statement	 
>18894	Statement	 
>18895	Statement	 
>18896	ExpressionStatement	 
>18897	Identifier	projs_solve
>18898	Statement	 
>18899	Statement	 
>18900	Statement	 
>18901	ExpressionStatement	 
>18902	Identifier	points_solve
>18903	Statement	 
>18904	Statement	 
>18905	Statement	 
>18906	IdentifierDeclStatement	 
>18907	IdentifierDecl	dummy
>18908	Identifier	dummy
>18909	IdentifierDeclType	camera_params_t
>18910	IfStatement	if ( success_out != NULL )
>18911	ExpressionStatement	 
>18912	AssignmentExpr	* success_out = false
>18913	Identifier	false
>18914	UnaryOp	* success_out
>18915	Identifier	success_out
>18916	UnaryOperator	*
>18917	Condition	 
>18918	EqualityExpression	success_out != NULL
>18919	Identifier	NULL
>18920	Identifier	success_out
>18921	ExpressionStatement	 
>18922	CallExpression	printf ( \"[BundleInitializeImage] Couldn't initialize\n\" )
>18923	ArgumentList	\"[BundleInitializeImage] Couldn't initialize\n\"
>18924	Argument	\"[BundleInitializeImage] Couldn't initialize\n\"
>18925	PrimaryExpression	\"[BundleInitializeImage] Couldn't initialize\n\"
>18926	Callee	printf
>18927	Identifier	printf
>18928	Condition	 
>18929	RelationalExpression	num_pts_solve < m_min_max_matches
>18930	Identifier	m_min_max_matches
>18931	Identifier	num_pts_solve
>18932	ForStatement	for ( int i = 0 ; i < num_tracks ; i ++ )
>18933	CompoundStatement	 
>18934	ExpressionStatement	 
>18935	IncDecOp	num_pts_solve ++
>18936	IncDec	++
>18937	Identifier	num_pts_solve
>18938	ExpressionStatement	 
>18939	AssignmentExpr	keys_solve [ num_pts_solve ] = key
>18940	Identifier	key
>18941	ArrayIndexing	keys_solve [ num_pts_solve ]
>18942	Identifier	num_pts_solve
>18943	Identifier	keys_solve
>18944	ExpressionStatement	 
>18945	AssignmentExpr	idxs_solve [ num_pts_solve ] = pt
>18946	Identifier	pt
>18947	ArrayIndexing	idxs_solve [ num_pts_solve ]
>18948	Identifier	num_pts_solve
>18949	Identifier	idxs_solve
>18950	IfStatement	if ( m_optimize_for_fisheye )
>18951	ElseStatement	else
>18952	CompoundStatement	 
>18953	ExpressionStatement	 
>18954	AssignmentExpr	projs_solve [ num_pts_solve ] = v2_new ( data . m_keys [ key ] . m_x , data . m_keys [ key ] . m_y )
>18955	CallExpression	v2_new ( data . m_keys [ key ] . m_x , data . m_keys [ key ] . m_y )
>18956	ArgumentList	data . m_keys [ key ] . m_x
>18957	Argument	data . m_keys [ key ] . m_y
>18958	MemberAccess	data . m_keys [ key ] . m_y
>18959	Identifier	m_y
>18960	ArrayIndexing	data . m_keys [ key ]
>18961	Identifier	key
>18962	MemberAccess	data . m_keys
>18963	Identifier	m_keys
>18964	Identifier	data
>18965	Argument	data . m_keys [ key ] . m_x
>18966	MemberAccess	data . m_keys [ key ] . m_x
>18967	Identifier	m_x
>18968	ArrayIndexing	data . m_keys [ key ]
>18969	Identifier	key
>18970	MemberAccess	data . m_keys
>18971	Identifier	m_keys
>18972	Identifier	data
>18973	Callee	v2_new
>18974	Identifier	v2_new
>18975	ArrayIndexing	projs_solve [ num_pts_solve ]
>18976	Identifier	num_pts_solve
>18977	Identifier	projs_solve
>18978	CompoundStatement	 
>18979	ExpressionStatement	 
>18980	AssignmentExpr	projs_solve_orig [ num_pts_solve ] = v2_new ( x , y )
>18981	CallExpression	v2_new ( x , y )
>18982	ArgumentList	x
>18983	Argument	y
>18984	Identifier	y
>18985	Argument	x
>18986	Identifier	x
>18987	Callee	v2_new
>18988	Identifier	v2_new
>18989	ArrayIndexing	projs_solve_orig [ num_pts_solve ]
>18990	Identifier	num_pts_solve
>18991	Identifier	projs_solve_orig
>18992	ExpressionStatement	 
>18993	AssignmentExpr	projs_solve [ num_pts_solve ] = v2_new ( x_u , y_u )
>18994	CallExpression	v2_new ( x_u , y_u )
>18995	ArgumentList	x_u
>18996	Argument	y_u
>18997	Identifier	y_u
>18998	Argument	x_u
>18999	Identifier	x_u
>19000	Callee	v2_new
>19001	Identifier	v2_new
>19002	ArrayIndexing	projs_solve [ num_pts_solve ]
>19003	Identifier	num_pts_solve
>19004	Identifier	projs_solve
>19005	ExpressionStatement	 
>19006	CallExpression	data . UndistortPoint ( x , y , x_u , y_u )
>19007	ArgumentList	x
>19008	Argument	y_u
>19009	Identifier	y_u
>19010	Argument	x_u
>19011	Identifier	x_u
>19012	Argument	y
>19013	Identifier	y
>19014	Argument	x
>19015	Identifier	x
>19016	Callee	data . UndistortPoint
>19017	MemberAccess	data . UndistortPoint
>19018	Identifier	UndistortPoint
>19019	Identifier	data
>19020	IdentifierDeclStatement	 
>19021	IdentifierDecl	y_u
>19022	Identifier	y_u
>19023	IdentifierDeclType	double
>19024	IdentifierDecl	x_u
>19025	Identifier	x_u
>19026	IdentifierDeclType	double
>19027	IdentifierDeclStatement	 
>19028	IdentifierDecl	y = data . m_keys [ key ] . m_y
>19029	AssignmentExpr	y = data . m_keys [ key ] . m_y
>19030	MemberAccess	data . m_keys [ key ] . m_y
>19031	Identifier	m_y
>19032	ArrayIndexing	data . m_keys [ key ]
>19033	Identifier	key
>19034	MemberAccess	data . m_keys
>19035	Identifier	m_keys
>19036	Identifier	data
>19037	Identifier	y
>19038	Identifier	y
>19039	IdentifierDeclType	double
>19040	IdentifierDeclStatement	 
>19041	IdentifierDecl	x = data . m_keys [ key ] . m_x
>19042	AssignmentExpr	x = data . m_keys [ key ] . m_x
>19043	MemberAccess	data . m_keys [ key ] . m_x
>19044	Identifier	m_x
>19045	ArrayIndexing	data . m_keys [ key ]
>19046	Identifier	key
>19047	MemberAccess	data . m_keys
>19048	Identifier	m_keys
>19049	Identifier	data
>19050	Identifier	x
>19051	Identifier	x
>19052	IdentifierDeclType	double
>19053	Condition	 
>19054	Identifier	m_optimize_for_fisheye
>19055	ExpressionStatement	 
>19056	AssignmentExpr	points_solve [ num_pts_solve ] = points [ pt ]
>19057	ArrayIndexing	points [ pt ]
>19058	Identifier	pt
>19059	Identifier	points
>19060	ArrayIndexing	points_solve [ num_pts_solve ]
>19061	Identifier	num_pts_solve
>19062	Identifier	points_solve
>19063	IdentifierDeclStatement	 
>19064	IdentifierDecl	key = data . m_visible_keys [ i ]
>19065	AssignmentExpr	key = data . m_visible_keys [ i ]
>19066	ArrayIndexing	data . m_visible_keys [ i ]
>19067	Identifier	i
>19068	MemberAccess	data . m_visible_keys
>19069	Identifier	m_visible_keys
>19070	Identifier	data
>19071	Identifier	key
>19072	Identifier	key
>19073	IdentifierDeclType	int
>19074	IfStatement	if ( ( int ) pt_views [ pt ] . size ( ) == 0 )
>19075	ContinueStatement	 
>19076	Condition	 
>19077	EqualityExpression	( int ) pt_views [ pt ] . size ( ) == 0
>19078	PrimaryExpression	0
>19079	CastExpression	( int ) pt_views [ pt ] . size ( )
>19080	CallExpression	pt_views [ pt ] . size ( )
>19081	ArgumentList	 
>19082	Callee	pt_views [ pt ] . size
>19083	MemberAccess	pt_views [ pt ] . size
>19084	Identifier	size
>19085	ArrayIndexing	pt_views [ pt ]
>19086	Identifier	pt
>19087	Identifier	pt_views
>19088	CastTarget	int
>19089	IdentifierDeclStatement	 
>19090	IdentifierDecl	pt = m_track_data [ tr ] . m_extra
>19091	AssignmentExpr	pt = m_track_data [ tr ] . m_extra
>19092	MemberAccess	m_track_data [ tr ] . m_extra
>19093	Identifier	m_extra
>19094	ArrayIndexing	m_track_data [ tr ]
>19095	Identifier	tr
>19096	Identifier	m_track_data
>19097	Identifier	pt
>19098	Identifier	pt
>19099	IdentifierDeclType	int
>19100	IfStatement	if ( m_track_data [ tr ] . m_extra < 0 )
>19101	ContinueStatement	 
>19102	Condition	 
>19103	RelationalExpression	m_track_data [ tr ] . m_extra < 0
>19104	PrimaryExpression	0
>19105	MemberAccess	m_track_data [ tr ] . m_extra
>19106	Identifier	m_extra
>19107	ArrayIndexing	m_track_data [ tr ]
>19108	Identifier	tr
>19109	Identifier	m_track_data
>19110	IdentifierDeclStatement	 
>19111	IdentifierDecl	tr = tracks [ i ]
>19112	AssignmentExpr	tr = tracks [ i ]
>19113	ArrayIndexing	tracks [ i ]
>19114	Identifier	i
>19115	Identifier	tracks
>19116	Identifier	tr
>19117	Identifier	tr
>19118	IdentifierDeclType	int
>19119	IncDecOp	 
>19120	IncDec	++
>19121	Identifier	i
>19122	Condition	 
>19123	RelationalExpression	i < num_tracks
>19124	Identifier	num_tracks
>19125	Identifier	i
>19126	ForInit	 
>19127	IdentifierDeclStatement	int i = 0 ;
>19128	IdentifierDecl	i = 0
>19129	AssignmentExpr	i = 0
>19130	PrimaryExpression	0
>19131	Identifier	i
>19132	Identifier	i
>19133	IdentifierDeclType	int
>19134	IdentifierDeclStatement	 
>19135	IdentifierDecl	num_tracks = ( int ) tracks . size ( )
>19136	AssignmentExpr	num_tracks = ( int ) tracks . size ( )
>19137	CastExpression	( int ) tracks . size ( )
>19138	CallExpression	tracks . size ( )
>19139	ArgumentList	 
>19140	Callee	tracks . size
>19141	MemberAccess	tracks . size
>19142	Identifier	size
>19143	Identifier	tracks
>19144	CastTarget	int
>19145	Identifier	num_tracks
>19146	Identifier	num_tracks
>19147	IdentifierDeclType	int
>19148	IdentifierDeclStatement	 
>19149	IdentifierDecl	& tracks = data . m_visible_points
>19150	AssignmentExpr	& tracks = data . m_visible_points
>19151	MemberAccess	data . m_visible_points
>19152	Identifier	m_visible_points
>19153	Identifier	data
>19154	Identifier	tracks
>19155	Identifier	tracks
>19156	IdentifierDeclType	std 
>19157	ExpressionStatement	 
>19158	Statement	 
>19159	Statement	 
>19160	Statement	 
>19161	Statement	 
>19162	Statement	 
>19163	IdentifierDeclStatement	 
>19164	IdentifierDecl	* keys_solve = new int [ num_keys ]
>19165	AssignmentExpr	* keys_solve = new int [ num_keys ]
>19166	Identifier	num_keys
>19167	Identifier	num_keys
>19168	Identifier	keys_solve
>19169	IdentifierDeclType	int *
>19170	IdentifierDeclStatement	 
>19171	IdentifierDecl	* idxs_solve = new int [ num_keys ]
>19172	AssignmentExpr	* idxs_solve = new int [ num_keys ]
>19173	Identifier	num_keys
>19174	Identifier	num_keys
>19175	Identifier	idxs_solve
>19176	IdentifierDeclType	int *
>19177	IdentifierDeclStatement	 
>19178	IdentifierDecl	* projs_solve_orig = new v2_t [ num_keys ]
>19179	AssignmentExpr	* projs_solve_orig = new v2_t [ num_keys ]
>19180	Identifier	num_keys
>19181	Identifier	num_keys
>19182	Identifier	projs_solve_orig
>19183	IdentifierDeclType	v2_t *
>19184	IdentifierDeclStatement	 
>19185	IdentifierDecl	* projs_solve = new v2_t [ num_keys ]
>19186	AssignmentExpr	* projs_solve = new v2_t [ num_keys ]
>19187	Identifier	num_keys
>19188	Identifier	num_keys
>19189	Identifier	projs_solve
>19190	IdentifierDeclType	v2_t *
>19191	IdentifierDeclStatement	 
>19192	IdentifierDecl	* points_solve = new v3_t [ num_keys ]
>19193	AssignmentExpr	* points_solve = new v3_t [ num_keys ]
>19194	Identifier	num_keys
>19195	Identifier	num_keys
>19196	Identifier	points_solve
>19197	IdentifierDeclType	v3_t *
>19198	IdentifierDeclStatement	 
>19199	IdentifierDecl	num_keys = ( int ) data . m_keys . size ( )
>19200	AssignmentExpr	num_keys = ( int ) data . m_keys . size ( )
>19201	CastExpression	( int ) data . m_keys . size ( )
>19202	CallExpression	data . m_keys . size ( )
>19203	ArgumentList	 
>19204	Callee	data . m_keys . size
>19205	MemberAccess	data . m_keys . size
>19206	Identifier	size
>19207	MemberAccess	data . m_keys
>19208	Identifier	m_keys
>19209	Identifier	data
>19210	CastTarget	int
>19211	Identifier	num_keys
>19212	Identifier	num_keys
>19213	IdentifierDeclType	int
>19214	IdentifierDeclStatement	 
>19215	IdentifierDecl	num_pts_solve = 0
>19216	AssignmentExpr	num_pts_solve = 0
>19217	PrimaryExpression	0
>19218	Identifier	num_pts_solve
>19219	Identifier	num_pts_solve
>19220	IdentifierDeclType	int
>19221	ExpressionStatement	 
>19222	CallExpression	SetTracks ( image_idx )
>19223	ArgumentList	image_idx
>19224	Argument	image_idx
>19225	Identifier	image_idx
>19226	Callee	SetTracks
>19227	Identifier	SetTracks
>19228	ExpressionStatement	 
>19229	CallExpression	data . LoadKeys ( false , ! m_optimize_for_fisheye )
>19230	ArgumentList	false
>19231	Argument	! m_optimize_for_fisheye
>19232	UnaryOp	! m_optimize_for_fisheye
>19233	Identifier	m_optimize_for_fisheye
>19234	UnaryOperator	!
>19235	Argument	false
>19236	Identifier	false
>19237	Callee	data . LoadKeys
>19238	MemberAccess	data . LoadKeys
>19239	Identifier	LoadKeys
>19240	Identifier	data
>19241	IfStatement	if ( success_out != NULL )
>19242	ExpressionStatement	 
>19243	AssignmentExpr	* success_out = true
>19244	Identifier	true
>19245	UnaryOp	* success_out
>19246	Identifier	success_out
>19247	UnaryOperator	*
>19248	Condition	 
>19249	EqualityExpression	success_out != NULL
>19250	Identifier	NULL
>19251	Identifier	success_out
>19252	IdentifierDeclStatement	 
>19253	IdentifierDecl	start = clock ( )
>19254	AssignmentExpr	start = clock ( )
>19255	CallExpression	clock ( )
>19256	ArgumentList	 
>19257	Callee	clock
>19258	Identifier	clock
>19259	Identifier	start
>19260	Identifier	start
>19261	IdentifierDeclType	clock_t
>19397	FunctionDef	BundlerApp 
>19398	ParameterList	int image_idx , int parent_idx , int num_cameras , int num_points , int * added_order , camera_params_t * cameras , \
>19399	Parameter	 
>19400	Identifier	pt_views
>19401	ParameterType	std 
>19402	Parameter	 
>19403	Identifier	colors
>19404	ParameterType	v3_t *
>19405	Parameter	 
>19406	Identifier	points
>19407	ParameterType	v3_t *
>19408	Parameter	 
>19409	Identifier	cameras
>19410	ParameterType	camera_params_t *
>19411	Parameter	 
>19412	Identifier	added_order
>19413	ParameterType	int *
>19414	Parameter	 
>19415	Identifier	num_points
>19416	ParameterType	int
>19417	Parameter	 
>19418	Identifier	num_cameras
>19419	ParameterType	int
>19420	Parameter	 
>19421	Identifier	parent_idx
>19422	ParameterType	int
>19423	Parameter	 
>19424	Identifier	image_idx
>19425	ParameterType	int
>19426	ReturnType	void
>19427	CompoundStatement	 
>19428	IfStatement	if ( ! m_skip_full_bundle )
>19429	CompoundStatement	 
>19430	ExpressionStatement	 
>19431	CallExpression	RunSFM ( num_points , num_cameras + 1 , 0 , false , cameras , points , added_order , colors , pt_views )
>19432	ArgumentList	num_points
>19433	Argument	pt_views
>19434	Identifier	pt_views
>19435	Argument	colors
>19436	Identifier	colors
>19437	Argument	added_order
>19438	Identifier	added_order
>19439	Argument	points
>19440	Identifier	points
>19441	Argument	cameras
>19442	Identifier	cameras
>19443	Argument	false
>19444	Identifier	false
>19445	Argument	0
>19446	PrimaryExpression	0
>19447	Argument	num_cameras + 1
>19448	AdditiveExpression	num_cameras + 1
>19449	PrimaryExpression	1
>19450	Identifier	num_cameras
>19451	Argument	num_points
>19452	Identifier	num_points
>19453	Callee	RunSFM
>19454	Identifier	RunSFM
>19455	Condition	 
>19456	UnaryOp	! m_skip_full_bundle
>19457	Identifier	m_skip_full_bundle
>19458	UnaryOperator	!
>19459	ExpressionStatement	 
>19460	CallExpression	fflush ( stdout )
>19461	ArgumentList	stdout
>19462	Argument	stdout
>19463	Identifier	stdout
>19464	Callee	fflush
>19465	Identifier	fflush
>19466	ExpressionStatement	 
>19467	Identifier	keys_solve
>19468	Statement	 
>19469	Statement	 
>19470	Statement	 
>19471	ExpressionStatement	 
>19472	Identifier	idxs_solve
>19473	Statement	 
>19474	Statement	 
>19475	Statement	 
>19476	ExpressionStatement	 
>19477	Identifier	projs_solve
>19478	Statement	 
>19479	Statement	 
>19480	Statement	 
>19481	ExpressionStatement	 
>19482	Identifier	points_solve
>19483	Statement	 
>19484	Statement	 
>19485	Statement	 
>19486	ExpressionStatement	 
>19487	AssignmentExpr	cameras [ num_cameras ] . k [ 0 ] = cameras [ num_cameras ] . k [ 1 ] = 0.0
>19488	AssignmentExpr	cameras [ num_cameras ] . k [ 1 ] = 0.0
>19489	PrimaryExpression	0.0
>19490	ArrayIndexing	cameras [ num_cameras ] . k [ 1 ]
>19491	PrimaryExpression	1
>19492	MemberAccess	cameras [ num_cameras ] . k
>19493	Identifier	k
>19494	ArrayIndexing	cameras [ num_cameras ]
>19495	Identifier	num_cameras
>19496	Identifier	cameras
>19497	ArrayIndexing	cameras [ num_cameras ] . k [ 0 ]
>19498	PrimaryExpression	0
>19499	MemberAccess	cameras [ num_cameras ] . k
>19500	Identifier	k
>19501	ArrayIndexing	cameras [ num_cameras ]
>19502	Identifier	num_cameras
>19503	Identifier	cameras
>19504	IfStatement	if ( m_fixed_focal_length )
>19505	ElseStatement	else
>19506	CompoundStatement	 
>19507	IfStatement	if ( m_use_focal_estimate )
>19508	ElseStatement	else
>19509	IfStatement	if ( m_image_data [ image_idx ] . m_has_init_focal )
>19510	ElseStatement	else
>19511	CompoundStatement	 
>19512	IfStatement	if ( parent_idx != - 1 )
>19513	ElseStatement	else
>19514	CompoundStatement	 
>19515	ExpressionStatement	 
>19516	Statement	 
>19517	Statement	 
>19518	Statement	 
>19519	Statement	 
>19520	Statement	 
>19521	CompoundStatement	 
>19522	ExpressionStatement	 
>19523	AssignmentExpr	cameras [ num_cameras ] . f = cameras [ parent_idx ] . f
>19524	MemberAccess	cameras [ parent_idx ] . f
>19525	Identifier	f
>19526	ArrayIndexing	cameras [ parent_idx ]
>19527	Identifier	parent_idx
>19528	Identifier	cameras
>19529	MemberAccess	cameras [ num_cameras ] . f
>19530	Identifier	f
>19531	ArrayIndexing	cameras [ num_cameras ]
>19532	Identifier	num_cameras
>19533	Identifier	cameras
>19534	Condition	 
>19535	EqualityExpression	parent_idx != - 1
>19536	UnaryOp	- 1
>19537	PrimaryExpression	1
>19538	UnaryOperator	-
>19539	Identifier	parent_idx
>19540	CompoundStatement	 
>19541	ExpressionStatement	 
>19542	AssignmentExpr	cameras [ num_cameras ] . f = m_image_data [ image_idx ] . m_init_focal
>19543	MemberAccess	m_image_data [ image_idx ] . m_init_focal
>19544	Identifier	m_init_focal
>19545	ArrayIndexing	m_image_data [ image_idx ]
>19546	Identifier	image_idx
>19547	Identifier	m_image_data
>19548	MemberAccess	cameras [ num_cameras ] . f
>19549	Identifier	f
>19550	ArrayIndexing	cameras [ num_cameras ]
>19551	Identifier	num_cameras
>19552	Identifier	cameras
>19553	Condition	 
>19554	MemberAccess	m_image_data [ image_idx ] . m_has_init_focal
>19555	Identifier	m_has_init_focal
>19556	ArrayIndexing	m_image_data [ image_idx ]
>19557	Identifier	image_idx
>19558	Identifier	m_image_data
>19559	CompoundStatement	 
>19560	IfStatement	if ( m_image_data [ image_idx ] . m_has_init_focal )
>19561	ElseStatement	else
>19562	CompoundStatement	 
>19563	ExpressionStatement	 
>19564	AssignmentExpr	cameras [ num_cameras ] . f = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>19565	MultiplicativeExpression	0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>19566	AdditiveExpression	Kinit [ 0 ] + Kinit [ 4 ]
>19567	ArrayIndexing	Kinit [ 4 ]
>19568	PrimaryExpression	4
>19569	Identifier	Kinit
>19570	ArrayIndexing	Kinit [ 0 ]
>19571	PrimaryExpression	0
>19572	Identifier	Kinit
>19573	PrimaryExpression	0.5
>19574	MemberAccess	cameras [ num_cameras ] . f
>19575	Identifier	f
>19576	ArrayIndexing	cameras [ num_cameras ]
>19577	Identifier	num_cameras
>19578	Identifier	cameras
>19579	CompoundStatement	 
>19580	IfStatement	if ( ratio < 1.4 || m_trust_focal_estimate )
>19581	ElseStatement	else
>19582	CompoundStatement	 
>19583	ExpressionStatement	 
>19584	AssignmentExpr	cameras [ num_cameras ] . f = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>19585	MultiplicativeExpression	0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>19586	AdditiveExpression	Kinit [ 0 ] + Kinit [ 4 ]
>19587	ArrayIndexing	Kinit [ 4 ]
>19588	PrimaryExpression	4
>19589	Identifier	Kinit
>19590	ArrayIndexing	Kinit [ 0 ]
>19591	PrimaryExpression	0
>19592	Identifier	Kinit
>19593	PrimaryExpression	0.5
>19594	MemberAccess	cameras [ num_cameras ] . f
>19595	Identifier	f
>19596	ArrayIndexing	cameras [ num_cameras ]
>19597	Identifier	num_cameras
>19598	Identifier	cameras
>19599	ExpressionStatement	 
>19600	Statement	 
>19601	Statement	 
>19602	Statement	 
>19603	Statement	 
>19604	Statement	 
>19605	Statement	 
>19606	Statement	 
>19607	Statement	 
>19608	CompoundStatement	 
>19609	IfStatement	if ( m_constrain_focal )
>19610	ExpressionStatement	 
>19611	CallExpression	SetFocalConstraint ( m_image_data [ added_order [ num_cameras ] ] , cameras + num_cameras )
>19612	ArgumentList	m_image_data [ added_order [ num_cameras ] ]
>19613	Argument	cameras + num_cameras
>19614	AdditiveExpression	cameras + num_cameras
>19615	Identifier	num_cameras
>19616	Identifier	cameras
>19617	Argument	m_image_data [ added_order [ num_cameras ] ]
>19618	ArrayIndexing	m_image_data [ added_order [ num_cameras ] ]
>19619	ArrayIndexing	added_order [ num_cameras ]
>19620	Identifier	num_cameras
>19621	Identifier	added_order
>19622	Identifier	m_image_data
>19623	Callee	SetFocalConstraint
>19624	Identifier	SetFocalConstraint
>19625	Condition	 
>19626	Identifier	m_constrain_focal
>19627	ExpressionStatement	 
>19628	AssignmentExpr	cameras [ num_cameras ] . f = init
>19629	Identifier	init
>19630	MemberAccess	cameras [ num_cameras ] . f
>19631	Identifier	f
>19632	ArrayIndexing	cameras [ num_cameras ]
>19633	Identifier	num_cameras
>19634	Identifier	cameras
>19635	Condition	 
>19636	OrExpression	ratio < 1.4 || m_trust_focal_estimate
>19637	Identifier	m_trust_focal_estimate
>19638	RelationalExpression	ratio < 1.4
>19639	PrimaryExpression	1.4
>19640	Identifier	ratio
>19641	IfStatement	if ( init > obs )
>19642	ElseStatement	else
>19643	ExpressionStatement	 
>19644	AssignmentExpr	ratio = obs / init
>19645	MultiplicativeExpression	obs / init
>19646	Identifier	init
>19647	Identifier	obs
>19648	Identifier	ratio
>19649	ExpressionStatement	 
>19650	AssignmentExpr	ratio = init / obs
>19651	MultiplicativeExpression	init / obs
>19652	Identifier	obs
>19653	Identifier	init
>19654	Identifier	ratio
>19655	Condition	 
>19656	RelationalExpression	init > obs
>19657	Identifier	obs
>19658	Identifier	init
>19659	ExpressionStatement	 
>19660	Statement	 
>19661	Statement	 
>19662	Statement	 
>19663	Statement	 
>19664	Statement	 
>19665	Statement	 
>19666	Statement	 
>19667	IdentifierDeclStatement	 
>19668	IdentifierDecl	obs = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>19669	AssignmentExpr	obs = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>19670	MultiplicativeExpression	0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>19671	AdditiveExpression	Kinit [ 0 ] + Kinit [ 4 ]
>19672	ArrayIndexing	Kinit [ 4 ]
>19673	PrimaryExpression	4
>19674	Identifier	Kinit
>19675	ArrayIndexing	Kinit [ 0 ]
>19676	PrimaryExpression	0
>19677	Identifier	Kinit
>19678	PrimaryExpression	0.5
>19679	Identifier	obs
>19680	Identifier	obs
>19681	IdentifierDeclType	double
>19682	IdentifierDeclStatement	 
>19683	IdentifierDecl	init = m_image_data [ image_idx ] . m_init_focal
>19684	AssignmentExpr	init = m_image_data [ image_idx ] . m_init_focal
>19685	MemberAccess	m_image_data [ image_idx ] . m_init_focal
>19686	Identifier	m_init_focal
>19687	ArrayIndexing	m_image_data [ image_idx ]
>19688	Identifier	image_idx
>19689	Identifier	m_image_data
>19690	Identifier	init
>19691	Identifier	init
>19692	IdentifierDeclType	double
>19693	IdentifierDeclStatement	 
>19694	IdentifierDecl	ratio
>19695	Identifier	ratio
>19696	IdentifierDeclType	double
>19697	Condition	 
>19698	MemberAccess	m_image_data [ image_idx ] . m_has_init_focal
>19699	Identifier	m_has_init_focal
>19700	ArrayIndexing	m_image_data [ image_idx ]
>19701	Identifier	image_idx
>19702	Identifier	m_image_data
>19703	Condition	 
>19704	Identifier	m_use_focal_estimate
>19705	CompoundStatement	 
>19706	ExpressionStatement	 
>19707	AssignmentExpr	cameras [ num_cameras ] . f = m_init_focal_length
>19708	Identifier	m_init_focal_length
>19709	MemberAccess	cameras [ num_cameras ] . f
>19710	Identifier	f
>19711	ArrayIndexing	cameras [ num_cameras ]
>19712	Identifier	num_cameras
>19713	Identifier	cameras
>19714	Condition	 
>19715	Identifier	m_fixed_focal_length
>19716	ExpressionStatement	 
>19717	CallExpression	SetCameraConstraints ( added_order [ num_cameras ] , cameras + num_cameras )
>19718	ArgumentList	added_order [ num_cameras ]
>19719	Argument	cameras + num_cameras
>19720	AdditiveExpression	cameras + num_cameras
>19721	Identifier	num_cameras
>19722	Identifier	cameras
>19723	Argument	added_order [ num_cameras ]
>19724	ArrayIndexing	added_order [ num_cameras ]
>19725	Identifier	num_cameras
>19726	Identifier	added_order
>19727	Callee	SetCameraConstraints
>19728	Identifier	SetCameraConstraints
>19729	ExpressionStatement	 
>19730	CallExpression	fflush ( stdout )
>19731	ArgumentList	stdout
>19732	Argument	stdout
>19733	Identifier	stdout
>19734	Callee	fflush
>19735	Identifier	fflush
>19736	IfStatement	if ( success )
>19737	ElseStatement	else
>19738	CompoundStatement	 
>19739	IfStatement	if ( parent_idx != - 1 )
>19740	ElseStatement	else
>19741	CompoundStatement	 
>19742	ExpressionStatement	 
>19743	Statement	 
>19744	Statement	 
>19745	Statement	 
>19746	Statement	 
>19747	Statement	 
>19748	CompoundStatement	 
>19749	ExpressionStatement	 
>19750	CallExpression	memcpy ( cameras [ num_cameras ] . t , cameras [ parent_idx ] . t , 3 * sizeof ( double ) )
>19751	ArgumentList	cameras [ num_cameras ] . t
>19752	Argument	3 * sizeof ( double )
>19753	MultiplicativeExpression	3 * sizeof ( double )
>19754	SizeofExpr	sizeof ( double )
>19755	SizeofOperand	double
>19756	Sizeof	sizeof
>19757	PrimaryExpression	3
>19758	Argument	cameras [ parent_idx ] . t
>19759	MemberAccess	cameras [ parent_idx ] . t
>19760	Identifier	t
>19761	ArrayIndexing	cameras [ parent_idx ]
>19762	Identifier	parent_idx
>19763	Identifier	cameras
>19764	Argument	cameras [ num_cameras ] . t
>19765	MemberAccess	cameras [ num_cameras ] . t
>19766	Identifier	t
>19767	ArrayIndexing	cameras [ num_cameras ]
>19768	Identifier	num_cameras
>19769	Identifier	cameras
>19770	Callee	memcpy
>19771	Identifier	memcpy
>19772	ExpressionStatement	 
>19773	CallExpression	memcpy ( cameras [ num_cameras ] . R , cameras [ parent_idx ] . R , 9 * sizeof ( double ) )
>19774	ArgumentList	cameras [ num_cameras ] . R
>19775	Argument	9 * sizeof ( double )
>19776	MultiplicativeExpression	9 * sizeof ( double )
>19777	SizeofExpr	sizeof ( double )
>19778	SizeofOperand	double
>19779	Sizeof	sizeof
>19780	PrimaryExpression	9
>19781	Argument	cameras [ parent_idx ] . R
>19782	MemberAccess	cameras [ parent_idx ] . R
>19783	Identifier	R
>19784	ArrayIndexing	cameras [ parent_idx ]
>19785	Identifier	parent_idx
>19786	Identifier	cameras
>19787	Argument	cameras [ num_cameras ] . R
>19788	MemberAccess	cameras [ num_cameras ] . R
>19789	Identifier	R
>19790	ArrayIndexing	cameras [ num_cameras ]
>19791	Identifier	num_cameras
>19792	Identifier	cameras
>19793	Callee	memcpy
>19794	Identifier	memcpy
>19795	Condition	 
>19796	EqualityExpression	parent_idx != - 1
>19797	UnaryOp	- 1
>19798	PrimaryExpression	1
>19799	UnaryOperator	-
>19800	Identifier	parent_idx
>19801	CompoundStatement	 
>19802	ForStatement	for ( int i = 0 ; i < num_inliers ; i ++ )
>19803	CompoundStatement	 
>19804	ExpressionStatement	 
>19805	CallExpression	pt_views [ pt_idx ] . push_back ( ImageKey ( num_cameras , key_idx ) )
>19806	ArgumentList	ImageKey ( num_cameras , key_idx )
>19807	Argument	ImageKey ( num_cameras , key_idx )
>19808	CallExpression	ImageKey ( num_cameras , key_idx )
>19809	ArgumentList	num_cameras
>19810	Argument	key_idx
>19811	Identifier	key_idx
>19812	Argument	num_cameras
>19813	Identifier	num_cameras
>19814	Callee	ImageKey
>19815	Identifier	ImageKey
>19816	Callee	pt_views [ pt_idx ] . push_back
>19817	MemberAccess	pt_views [ pt_idx ] . push_back
>19818	Identifier	push_back
>19819	ArrayIndexing	pt_views [ pt_idx ]
>19820	Identifier	pt_idx
>19821	Identifier	pt_views
>19822	ExpressionStatement	 
>19823	AssignmentExpr	GetKey ( image_idx , key_idx ) . m_extra = pt_idx
>19824	Identifier	pt_idx
>19825	MemberAccess	GetKey ( image_idx , key_idx ) . m_extra
>19826	Identifier	m_extra
>19827	CallExpression	GetKey ( image_idx , key_idx )
>19828	ArgumentList	image_idx
>19829	Argument	key_idx
>19830	Identifier	key_idx
>19831	Argument	image_idx
>19832	Identifier	image_idx
>19833	Callee	GetKey
>19834	Identifier	GetKey
>19835	IdentifierDeclStatement	 
>19836	IdentifierDecl	pt_idx = idxs_solve [ inliers_weak [ i ] ]
>19837	AssignmentExpr	pt_idx = idxs_solve [ inliers_weak [ i ] ]
>19838	ArrayIndexing	idxs_solve [ inliers_weak [ i ] ]
>19839	ArrayIndexing	inliers_weak [ i ]
>19840	Identifier	i
>19841	Identifier	inliers_weak
>19842	Identifier	idxs_solve
>19843	Identifier	pt_idx
>19844	Identifier	pt_idx
>19845	IdentifierDeclType	int
>19846	IdentifierDeclStatement	 
>19847	IdentifierDecl	key_idx = keys_solve [ inliers_weak [ i ] ]
>19848	AssignmentExpr	key_idx = keys_solve [ inliers_weak [ i ] ]
>19849	ArrayIndexing	keys_solve [ inliers_weak [ i ] ]
>19850	ArrayIndexing	inliers_weak [ i ]
>19851	Identifier	i
>19852	Identifier	inliers_weak
>19853	Identifier	keys_solve
>19854	Identifier	key_idx
>19855	Identifier	key_idx
>19856	IdentifierDeclType	int
>19857	IncDecOp	 
>19858	IncDec	++
>19859	Identifier	i
>19860	Condition	 
>19861	RelationalExpression	i < num_inliers
>19862	Identifier	num_inliers
>19863	Identifier	i
>19864	ForInit	 
>19865	IdentifierDeclStatement	int i = 0 ;
>19866	IdentifierDecl	i = 0
>19867	AssignmentExpr	i = 0
>19868	PrimaryExpression	0
>19869	Identifier	i
>19870	Identifier	i
>19871	IdentifierDeclType	int
>19872	IdentifierDeclStatement	 
>19873	IdentifierDecl	num_inliers = ( int ) inliers_weak . size ( )
>19874	AssignmentExpr	num_inliers = ( int ) inliers_weak . size ( )
>19875	CastExpression	( int ) inliers_weak . size ( )
>19876	CallExpression	inliers_weak . size ( )
>19877	ArgumentList	 
>19878	Callee	inliers_weak . size
>19879	MemberAccess	inliers_weak . size
>19880	Identifier	size
>19881	Identifier	inliers_weak
>19882	CastTarget	int
>19883	Identifier	num_inliers
>19884	Identifier	num_inliers
>19885	IdentifierDeclType	int
>19886	ExpressionStatement	 
>19887	CallExpression	matrix_scale ( 3 , 1 , cameras [ num_cameras ] . t , - 1.0 , cameras [ num_cameras ] . t )
>19888	ArgumentList	3
>19889	Argument	cameras [ num_cameras ] . t
>19890	MemberAccess	cameras [ num_cameras ] . t
>19891	Identifier	t
>19892	ArrayIndexing	cameras [ num_cameras ]
>19893	Identifier	num_cameras
>19894	Identifier	cameras
>19895	Argument	- 1.0
>19896	UnaryOp	- 1.0
>19897	PrimaryExpression	1.0
>19898	UnaryOperator	-
>19899	Argument	cameras [ num_cameras ] . t
>19900	MemberAccess	cameras [ num_cameras ] . t
>19901	Identifier	t
>19902	ArrayIndexing	cameras [ num_cameras ]
>19903	Identifier	num_cameras
>19904	Identifier	cameras
>19905	Argument	1
>19906	PrimaryExpression	1
>19907	Argument	3
>19908	PrimaryExpression	3
>19909	Callee	matrix_scale
>19910	Identifier	matrix_scale
>19911	ExpressionStatement	 
>19912	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , Rinit , tinit , cameras [ num_cameras ] . t )
>19913	ArgumentList	3
>19914	Argument	cameras [ num_cameras ] . t
>19915	MemberAccess	cameras [ num_cameras ] . t
>19916	Identifier	t
>19917	ArrayIndexing	cameras [ num_cameras ]
>19918	Identifier	num_cameras
>19919	Identifier	cameras
>19920	Argument	tinit
>19921	Identifier	tinit
>19922	Argument	Rinit
>19923	Identifier	Rinit
>19924	Argument	1
>19925	PrimaryExpression	1
>19926	Argument	3
>19927	PrimaryExpression	3
>19928	Argument	3
>19929	PrimaryExpression	3
>19930	Argument	3
>19931	PrimaryExpression	3
>19932	Callee	matrix_transpose_product
>19933	Identifier	matrix_transpose_product
>19934	ExpressionStatement	 
>19935	CallExpression	memcpy ( cameras [ num_cameras ] . R , Rinit , 9 * sizeof ( double ) )
>19936	ArgumentList	cameras [ num_cameras ] . R
>19937	Argument	9 * sizeof ( double )
>19938	MultiplicativeExpression	9 * sizeof ( double )
>19939	SizeofExpr	sizeof ( double )
>19940	SizeofOperand	double
>19941	Sizeof	sizeof
>19942	PrimaryExpression	9
>19943	Argument	Rinit
>19944	Identifier	Rinit
>19945	Argument	cameras [ num_cameras ] . R
>19946	MemberAccess	cameras [ num_cameras ] . R
>19947	Identifier	R
>19948	ArrayIndexing	cameras [ num_cameras ]
>19949	Identifier	num_cameras
>19950	Identifier	cameras
>19951	Callee	memcpy
>19952	Identifier	memcpy
>19953	ExpressionStatement	 
>19954	CallExpression	matrix_invert ( 3 , Kinit , Kinit_inv )
>19955	ArgumentList	3
>19956	Argument	Kinit_inv
>19957	Identifier	Kinit_inv
>19958	Argument	Kinit
>19959	Identifier	Kinit
>19960	Argument	3
>19961	PrimaryExpression	3
>19962	Callee	matrix_invert
>19963	Identifier	matrix_invert
>19964	IdentifierDeclStatement	 
>19965	IdentifierDecl	Kinit_inv [ 9 ]
>19966	PrimaryExpression	9
>19967	Identifier	Kinit_inv
>19968	IdentifierDeclType	double [ 9 ]
>19969	ExpressionStatement	 
>19970	CallExpression	InitializeCameraParams ( m_image_data [ image_idx ] , cameras [ num_cameras ] )
>19971	ArgumentList	m_image_data [ image_idx ]
>19972	Argument	cameras [ num_cameras ]
>19973	ArrayIndexing	cameras [ num_cameras ]
>19974	Identifier	num_cameras
>19975	Identifier	cameras
>19976	Argument	m_image_data [ image_idx ]
>19977	ArrayIndexing	m_image_data [ image_idx ]
>19978	Identifier	image_idx
>19979	Identifier	m_image_data
>19980	Callee	InitializeCameraParams
>19981	Identifier	InitializeCameraParams
>19982	IfStatement	if ( num_outliers >= 32 )
>19983	CompoundStatement	 
>19984	ExpressionStatement	 
>19985	Identifier	idxs_solve2
>19986	Statement	 
>19987	Statement	 
>19988	Statement	 
>19989	ExpressionStatement	 
>19990	Identifier	keys_solve2
>19991	Statement	 
>19992	Statement	 
>19993	Statement	 
>19994	ExpressionStatement	 
>19995	Identifier	projs_solve2
>19996	Statement	 
>19997	Statement	 
>19998	Statement	 
>19999	ExpressionStatement	 
>20000	Identifier	points_solve2
>20001	Statement	 
>20002	Statement	 
>20003	Statement	 
>20004	IfStatement	if ( num_inliers2 > 0.5 * num_outliers )
>20005	CompoundStatement	 
>20006	ForStatement	for ( int i = 0 ; i < ( int ) inliers2_weak . size ( ) ; i ++ )
>20007	CompoundStatement	 
>20008	ExpressionStatement	 
>20009	CallExpression	inliers_weak . push_back ( real_idx )
>20010	ArgumentList	real_idx
>20011	Argument	real_idx
>20012	Identifier	real_idx
>20013	Callee	inliers_weak . push_back
>20014	MemberAccess	inliers_weak . push_back
>20015	Identifier	push_back
>20016	Identifier	inliers_weak
>20017	IdentifierDeclStatement	 
>20018	IdentifierDecl	real_idx = outliers [ idx ]
>20019	AssignmentExpr	real_idx = outliers [ idx ]
>20020	ArrayIndexing	outliers [ idx ]
>20021	Identifier	idx
>20022	Identifier	outliers
>20023	Identifier	real_idx
>20024	Identifier	real_idx
>20025	IdentifierDeclType	int
>20026	IdentifierDeclStatement	 
>20027	IdentifierDecl	idx = inliers2_weak [ i ]
>20028	AssignmentExpr	idx = inliers2_weak [ i ]
>20029	ArrayIndexing	inliers2_weak [ i ]
>20030	Identifier	i
>20031	Identifier	inliers2_weak
>20032	Identifier	idx
>20033	Identifier	idx
>20034	IdentifierDeclType	int
>20035	IncDecOp	 
>20036	IncDec	++
>20037	Identifier	i
>20038	Condition	 
>20039	RelationalExpression	i < ( int ) inliers2_weak . size ( )
>20040	CastExpression	( int ) inliers2_weak . size ( )
>20041	CallExpression	inliers2_weak . size ( )
>20042	ArgumentList	 
>20043	Callee	inliers2_weak . size
>20044	MemberAccess	inliers2_weak . size
>20045	Identifier	size
>20046	Identifier	inliers2_weak
>20047	CastTarget	int
>20048	Identifier	i
>20049	ForInit	 
>20050	IdentifierDeclStatement	int i = 0 ;
>20051	IdentifierDecl	i = 0
>20052	AssignmentExpr	i = 0
>20053	PrimaryExpression	0
>20054	Identifier	i
>20055	Identifier	i
>20056	IdentifierDeclType	int
>20057	ExpressionStatement	 
>20058	Statement	 
>20059	Statement	 
>20060	Statement	 
>20061	Statement	 
>20062	Statement	 
>20063	Statement	 
>20064	Statement	 
>20065	Statement	 
>20066	Statement	 
>20067	Statement	 
>20068	Statement	 
>20069	Statement	 
>20070	Statement	 
>20071	Statement	 
>20072	Condition	 
>20073	RelationalExpression	num_inliers2 > 0.5 * num_outliers
>20074	MultiplicativeExpression	0.5 * num_outliers
>20075	Identifier	num_outliers
>20076	PrimaryExpression	0.5
>20077	Identifier	num_inliers2
>20078	IdentifierDeclStatement	 
>20079	IdentifierDecl	num_inliers2 = ( int ) inliers2 . size ( )
>20080	AssignmentExpr	num_inliers2 = ( int ) inliers2 . size ( )
>20081	CastExpression	( int ) inliers2 . size ( )
>20082	CallExpression	inliers2 . size ( )
>20083	ArgumentList	 
>20084	Callee	inliers2 . size
>20085	MemberAccess	inliers2 . size
>20086	Identifier	size
>20087	Identifier	inliers2
>20088	CastTarget	int
>20089	Identifier	num_inliers2
>20090	Identifier	num_inliers2
>20091	IdentifierDeclType	int
>20092	ExpressionStatement	 
>20093	CallExpression	FindAndVerifyCamera ( num_outliers , points_solve2 , projs_solve2 , idxs_solve2 , Kinit2 , Rinit2 , tinit2 , m_projection_\
>20094	ArgumentList	num_outliers
>20095	Argument	outliers2
>20096	Identifier	outliers2
>20097	Argument	inliers2_weak
>20098	Identifier	inliers2_weak
>20099	Argument	inliers2
>20100	Identifier	inliers2
>20101	Argument	16.0 * m_projection_estimation_threshold
>20102	MultiplicativeExpression	16.0 * m_projection_estimation_threshold
>20103	Identifier	m_projection_estimation_threshold
>20104	PrimaryExpression	16.0
>20105	Argument	m_projection_estimation_threshold
>20106	Identifier	m_projection_estimation_threshold
>20107	Argument	tinit2
>20108	Identifier	tinit2
>20109	Argument	Rinit2
>20110	Identifier	Rinit2
>20111	Argument	Kinit2
>20112	Identifier	Kinit2
>20113	Argument	idxs_solve2
>20114	Identifier	idxs_solve2
>20115	Argument	projs_solve2
>20116	Identifier	projs_solve2
>20117	Argument	points_solve2
>20118	Identifier	points_solve2
>20119	Argument	num_outliers
>20120	Identifier	num_outliers
>20121	Callee	FindAndVerifyCamera
>20122	Identifier	FindAndVerifyCamera
>20123	IdentifierDeclStatement	 
>20124	IdentifierDecl	outliers2
>20125	Identifier	outliers2
>20126	IdentifierDeclType	std 
>20127	IdentifierDecl	inliers2_weak
>20128	Identifier	inliers2_weak
>20129	IdentifierDeclType	std 
>20130	IdentifierDecl	inliers2
>20131	Identifier	inliers2
>20132	IdentifierDeclType	std 
>20133	IdentifierDeclStatement	 
>20134	IdentifierDecl	tinit2 [ 3 ]
>20135	PrimaryExpression	3
>20136	Identifier	tinit2
>20137	IdentifierDeclType	double [ 3 ]
>20138	IdentifierDecl	Rinit2 [ 9 ]
>20139	PrimaryExpression	9
>20140	Identifier	Rinit2
>20141	IdentifierDeclType	double [ 9 ]
>20142	IdentifierDecl	Kinit2 [ 9 ]
>20143	PrimaryExpression	9
>20144	Identifier	Kinit2
>20145	IdentifierDeclType	double [ 9 ]
>20146	ForStatement	for ( int i = 0 ; i < num_outliers ; i ++ )
>20147	CompoundStatement	 
>20148	ExpressionStatement	 
>20149	AssignmentExpr	keys_solve2 [ i ] = keys_solve [ outliers [ i ] ]
>20150	ArrayIndexing	keys_solve [ outliers [ i ] ]
>20151	ArrayIndexing	outliers [ i ]
>20152	Identifier	i
>20153	Identifier	outliers
>20154	Identifier	keys_solve
>20155	ArrayIndexing	keys_solve2 [ i ]
>20156	Identifier	i
>20157	Identifier	keys_solve2
>20158	ExpressionStatement	 
>20159	AssignmentExpr	idxs_solve2 [ i ] = idxs_solve [ outliers [ i ] ]
>20160	ArrayIndexing	idxs_solve [ outliers [ i ] ]
>20161	ArrayIndexing	outliers [ i ]
>20162	Identifier	i
>20163	Identifier	outliers
>20164	Identifier	idxs_solve
>20165	ArrayIndexing	idxs_solve2 [ i ]
>20166	Identifier	i
>20167	Identifier	idxs_solve2
>20168	ExpressionStatement	 
>20169	AssignmentExpr	projs_solve2 [ i ] = projs_solve [ outliers [ i ] ]
>20170	ArrayIndexing	projs_solve [ outliers [ i ] ]
>20171	ArrayIndexing	outliers [ i ]
>20172	Identifier	i
>20173	Identifier	outliers
>20174	Identifier	projs_solve
>20175	ArrayIndexing	projs_solve2 [ i ]
>20176	Identifier	i
>20177	Identifier	projs_solve2
>20178	ExpressionStatement	 
>20179	AssignmentExpr	points_solve2 [ i ] = points_solve [ outliers [ i ] ]
>20180	ArrayIndexing	points_solve [ outliers [ i ] ]
>20181	ArrayIndexing	outliers [ i ]
>20182	Identifier	i
>20183	Identifier	outliers
>20184	Identifier	points_solve
>20185	ArrayIndexing	points_solve2 [ i ]
>20186	Identifier	i
>20187	Identifier	points_solve2
>20188	IncDecOp	 
>20189	IncDec	++
>20190	Identifier	i
>20191	Condition	 
>20192	RelationalExpression	i < num_outliers
>20193	Identifier	num_outliers
>20194	Identifier	i
>20195	ForInit	 
>20196	IdentifierDeclStatement	int i = 0 ;
>20197	IdentifierDecl	i = 0
>20198	AssignmentExpr	i = 0
>20199	PrimaryExpression	0
>20200	Identifier	i
>20201	Identifier	i
>20202	IdentifierDeclType	int
>20203	IdentifierDeclStatement	 
>20204	IdentifierDecl	* keys_solve2 = new int [ num_keys ]
>20205	AssignmentExpr	* keys_solve2 = new int [ num_keys ]
>20206	Identifier	num_keys
>20207	Identifier	num_keys
>20208	Identifier	keys_solve2
>20209	IdentifierDeclType	int *
>20210	IdentifierDeclStatement	 
>20211	IdentifierDecl	* idxs_solve2 = new int [ num_keys ]
>20212	AssignmentExpr	* idxs_solve2 = new int [ num_keys ]
>20213	Identifier	num_keys
>20214	Identifier	num_keys
>20215	Identifier	idxs_solve2
>20216	IdentifierDeclType	int *
>20217	IdentifierDeclStatement	 
>20218	IdentifierDecl	* projs_solve2 = new v2_t [ num_keys ]
>20219	AssignmentExpr	* projs_solve2 = new v2_t [ num_keys ]
>20220	Identifier	num_keys
>20221	Identifier	num_keys
>20222	Identifier	projs_solve2
>20223	IdentifierDeclType	v2_t *
>20224	IdentifierDeclStatement	 
>20225	IdentifierDecl	* points_solve2 = new v3_t [ num_outliers ]
>20226	AssignmentExpr	* points_solve2 = new v3_t [ num_outliers ]
>20227	Identifier	num_outliers
>20228	Identifier	num_outliers
>20229	Identifier	points_solve2
>20230	IdentifierDeclType	v3_t *
>20231	Condition	 
>20232	RelationalExpression	num_outliers >= 32
>20233	PrimaryExpression	32
>20234	Identifier	num_outliers
>20235	IdentifierDeclStatement	 
>20236	IdentifierDecl	num_outliers = ( int ) outliers . size ( )
>20237	AssignmentExpr	num_outliers = ( int ) outliers . size ( )
>20238	CastExpression	( int ) outliers . size ( )
>20239	CallExpression	outliers . size ( )
>20240	ArgumentList	 
>20241	Callee	outliers . size
>20242	MemberAccess	outliers . size
>20243	Identifier	size
>20244	Identifier	outliers
>20245	CastTarget	int
>20246	Identifier	num_outliers
>20247	Identifier	num_outliers
>20248	IdentifierDeclType	int
>20249	Condition	 
>20250	Identifier	success
>20251	ExpressionStatement	 
>20252	Statement	 
>20253	Statement	 
>20254	Statement	 
>20255	Statement	 
>20256	Statement	 
>20257	Statement	 
>20258	Statement	 
>20259	Statement	 
>20260	Statement	 
>20261	Statement	 
>20262	Statement	 
>20263	Statement	 
>20264	Statement	 
>20265	Statement	 
>20266	Statement	 
>20267	Statement	 
>20268	Statement	 
>20269	Statement	 
>20270	Statement	 
>20271	Statement	 
>20272	Statement	 
>20273	Statement	 
>20274	Statement	 
>20275	Statement	 
>20276	Statement	 
>20277	IdentifierDeclStatement	 
>20278	IdentifierDecl	success = FindAndVerifyCamera ( num_pts_solve , points_solve , projs_solve , idxs_solve , Kinit , Rinit , tinit , \
>20279	AssignmentExpr	success = FindAndVerifyCamera ( num_pts_solve , points_solve , projs_solve , idxs_solve , Kinit , Rinit , \
>20280	CallExpression	FindAndVerifyCamera ( num_pts_solve , points_solve , projs_solve , idxs_solve , Kinit , Rinit , tinit , m_projection_\
>20281	ArgumentList	num_pts_solve
>20282	Argument	outliers
>20283	Identifier	outliers
>20284	Argument	inliers_weak
>20285	Identifier	inliers_weak
>20286	Argument	inliers
>20287	Identifier	inliers
>20288	Argument	16.0 * m_projection_estimation_threshold
>20289	MultiplicativeExpression	16.0 * m_projection_estimation_threshold
>20290	Identifier	m_projection_estimation_threshold
>20291	PrimaryExpression	16.0
>20292	Argument	m_projection_estimation_threshold
>20293	Identifier	m_projection_estimation_threshold
>20294	Argument	tinit
>20295	Identifier	tinit
>20296	Argument	Rinit
>20297	Identifier	Rinit
>20298	Argument	Kinit
>20299	Identifier	Kinit
>20300	Argument	idxs_solve
>20301	Identifier	idxs_solve
>20302	Argument	projs_solve
>20303	Identifier	projs_solve
>20304	Argument	points_solve
>20305	Identifier	points_solve
>20306	Argument	num_pts_solve
>20307	Identifier	num_pts_solve
>20308	Callee	FindAndVerifyCamera
>20309	Identifier	FindAndVerifyCamera
>20310	Identifier	success
>20311	Identifier	success
>20312	IdentifierDeclType	bool
>20313	IdentifierDeclStatement	 
>20314	IdentifierDecl	outliers
>20315	Identifier	outliers
>20316	IdentifierDeclType	std 
>20317	IdentifierDecl	inliers_weak
>20318	Identifier	inliers_weak
>20319	IdentifierDeclType	std 
>20320	IdentifierDecl	inliers
>20321	Identifier	inliers
>20322	IdentifierDeclType	std 
>20323	IdentifierDeclStatement	 
>20324	IdentifierDecl	tinit [ 3 ]
>20325	PrimaryExpression	3
>20326	Identifier	tinit
>20327	IdentifierDeclType	double [ 3 ]
>20328	IdentifierDecl	Rinit [ 9 ]
>20329	PrimaryExpression	9
>20330	Identifier	Rinit
>20331	IdentifierDeclType	double [ 9 ]
>20332	IdentifierDecl	Kinit [ 9 ]
>20333	PrimaryExpression	9
>20334	Identifier	Kinit
>20335	IdentifierDeclType	double [ 9 ]
>20336	ExpressionStatement	 
>20337	Identifier	keys_seen
>20338	Statement	 
>20339	Statement	 
>20340	Statement	 
>20341	ExpressionStatement	 
>20342	Identifier	saw
>20343	Statement	 
>20344	Statement	 
>20345	Statement	 
>20346	ExpressionStatement	 
>20347	CallExpression	fflush ( stdout )
>20348	ArgumentList	stdout
>20349	Argument	stdout
>20350	Identifier	stdout
>20351	Callee	fflush
>20352	Identifier	fflush
>20353	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>20354	CompoundStatement	 
>20355	ExpressionStatement	 
>20356	CallExpression	m_matches . ClearMatch ( idx )
>20357	ArgumentList	idx
>20358	Argument	idx
>20359	Identifier	idx
>20360	Callee	m_matches . ClearMatch
>20361	MemberAccess	m_matches . ClearMatch
>20362	Identifier	ClearMatch
>20363	Identifier	m_matches
>20364	ForStatement	for ( unsigned int j = 0 ; j < list . size ( ) ; j ++ )
>20365	CompoundStatement	 
>20366	IfStatement	if ( GetKey ( other , other_idx ) . m_extra < 0 )
>20367	ElseStatement	else
>20368	CompoundStatement	 
>20369	IfStatement	if ( num_pts_solve > num_keys )
>20370	CompoundStatement	 
>20371	ExpressionStatement	 
>20372	Statement	 
>20373	Statement	 
>20374	Statement	 
>20375	Statement	 
>20376	Statement	 
>20377	Statement	 
>20378	Statement	 
>20379	Statement	 
>20380	Statement	 
>20381	Condition	 
>20382	RelationalExpression	num_pts_solve > num_keys
>20383	Identifier	num_keys
>20384	Identifier	num_pts_solve
>20385	ExpressionStatement	 
>20386	IncDecOp	num_pts_solve ++
>20387	IncDec	++
>20388	Identifier	num_pts_solve
>20389	ExpressionStatement	 
>20390	AssignmentExpr	keys_solve [ num_pts_solve ] = this_idx
>20391	Identifier	this_idx
>20392	ArrayIndexing	keys_solve [ num_pts_solve ]
>20393	Identifier	num_pts_solve
>20394	Identifier	keys_solve
>20395	ExpressionStatement	 
>20396	AssignmentExpr	idxs_solve [ num_pts_solve ] = pt_idx
>20397	Identifier	pt_idx
>20398	ArrayIndexing	idxs_solve [ num_pts_solve ]
>20399	Identifier	num_pts_solve
>20400	Identifier	idxs_solve
>20401	IfStatement	if ( m_optimize_for_fisheye )
>20402	ElseStatement	else
>20403	CompoundStatement	 
>20404	ExpressionStatement	 
>20405	AssignmentExpr	projs_solve [ num_pts_solve ] = v2_new ( GetKey ( image_idx , this_idx ) . m_x , GetKey ( image_idx , \
>20406	CallExpression	v2_new ( GetKey ( image_idx , this_idx ) . m_x , GetKey ( image_idx , this_idx ) . m_y )
>20407	ArgumentList	GetKey ( image_idx , this_idx ) . m_x
>20408	Argument	GetKey ( image_idx , this_idx ) . m_y
>20409	MemberAccess	GetKey ( image_idx , this_idx ) . m_y
>20410	Identifier	m_y
>20411	CallExpression	GetKey ( image_idx , this_idx )
>20412	ArgumentList	image_idx
>20413	Argument	this_idx
>20414	Identifier	this_idx
>20415	Argument	image_idx
>20416	Identifier	image_idx
>20417	Callee	GetKey
>20418	Identifier	GetKey
>20419	Argument	GetKey ( image_idx , this_idx ) . m_x
>20420	MemberAccess	GetKey ( image_idx , this_idx ) . m_x
>20421	Identifier	m_x
>20422	CallExpression	GetKey ( image_idx , this_idx )
>20423	ArgumentList	image_idx
>20424	Argument	this_idx
>20425	Identifier	this_idx
>20426	Argument	image_idx
>20427	Identifier	image_idx
>20428	Callee	GetKey
>20429	Identifier	GetKey
>20430	Callee	v2_new
>20431	Identifier	v2_new
>20432	ArrayIndexing	projs_solve [ num_pts_solve ]
>20433	Identifier	num_pts_solve
>20434	Identifier	projs_solve
>20435	CompoundStatement	 
>20436	ExpressionStatement	 
>20437	AssignmentExpr	projs_solve [ num_pts_solve ] = v2_new ( x_u , y_u )
>20438	CallExpression	v2_new ( x_u , y_u )
>20439	ArgumentList	x_u
>20440	Argument	y_u
>20441	Identifier	y_u
>20442	Argument	x_u
>20443	Identifier	x_u
>20444	Callee	v2_new
>20445	Identifier	v2_new
>20446	ArrayIndexing	projs_solve [ num_pts_solve ]
>20447	Identifier	num_pts_solve
>20448	Identifier	projs_solve
>20449	ExpressionStatement	 
>20450	CallExpression	m_image_data [ image_idx ] . UndistortPoint ( x , y , x_u , y_u )
>20451	ArgumentList	x
>20452	Argument	y_u
>20453	Identifier	y_u
>20454	Argument	x_u
>20455	Identifier	x_u
>20456	Argument	y
>20457	Identifier	y
>20458	Argument	x
>20459	Identifier	x
>20460	Callee	m_image_data [ image_idx ] . UndistortPoint
>20461	MemberAccess	m_image_data [ image_idx ] . UndistortPoint
>20462	Identifier	UndistortPoint
>20463	ArrayIndexing	m_image_data [ image_idx ]
>20464	Identifier	image_idx
>20465	Identifier	m_image_data
>20466	IdentifierDeclStatement	 
>20467	IdentifierDecl	y_u
>20468	Identifier	y_u
>20469	IdentifierDeclType	double
>20470	IdentifierDecl	x_u
>20471	Identifier	x_u
>20472	IdentifierDeclType	double
>20473	IdentifierDeclStatement	 
>20474	IdentifierDecl	y = GetKey ( image_idx , this_idx ) . m_y
>20475	AssignmentExpr	y = GetKey ( image_idx , this_idx ) . m_y
>20476	MemberAccess	GetKey ( image_idx , this_idx ) . m_y
>20477	Identifier	m_y
>20478	CallExpression	GetKey ( image_idx , this_idx )
>20479	ArgumentList	image_idx
>20480	Argument	this_idx
>20481	Identifier	this_idx
>20482	Argument	image_idx
>20483	Identifier	image_idx
>20484	Callee	GetKey
>20485	Identifier	GetKey
>20486	Identifier	y
>20487	Identifier	y
>20488	IdentifierDeclType	double
>20489	IdentifierDeclStatement	 
>20490	IdentifierDecl	x = GetKey ( image_idx , this_idx ) . m_x
>20491	AssignmentExpr	x = GetKey ( image_idx , this_idx ) . m_x
>20492	MemberAccess	GetKey ( image_idx , this_idx ) . m_x
>20493	Identifier	m_x
>20494	CallExpression	GetKey ( image_idx , this_idx )
>20495	ArgumentList	image_idx
>20496	Argument	this_idx
>20497	Identifier	this_idx
>20498	Argument	image_idx
>20499	Identifier	image_idx
>20500	Callee	GetKey
>20501	Identifier	GetKey
>20502	Identifier	x
>20503	Identifier	x
>20504	IdentifierDeclType	double
>20505	Condition	 
>20506	Identifier	m_optimize_for_fisheye
>20507	ExpressionStatement	 
>20508	AssignmentExpr	points_solve [ num_pts_solve ] = points [ pt_idx ]
>20509	ArrayIndexing	points [ pt_idx ]
>20510	Identifier	pt_idx
>20511	Identifier	points
>20512	ArrayIndexing	points_solve [ num_pts_solve ]
>20513	Identifier	num_pts_solve
>20514	Identifier	points_solve
>20515	ExpressionStatement	 
>20516	AssignmentExpr	keys_seen [ this_idx ] = pt_idx
>20517	Identifier	pt_idx
>20518	ArrayIndexing	keys_seen [ this_idx ]
>20519	Identifier	this_idx
>20520	Identifier	keys_seen
>20521	ExpressionStatement	 
>20522	Statement	 
>20523	Statement	 
>20524	Statement	 
>20525	Statement	 
>20526	Statement	 
>20527	Statement	 
>20528	Statement	 
>20529	Statement	 
>20530	Statement	 
>20531	Statement	 
>20532	Statement	 
>20533	Statement	 
>20534	Statement	 
>20535	IfStatement	if ( keys_seen [ this_idx ] != - 1 )
>20536	CompoundStatement	 
>20537	ExpressionStatement	 
>20538	CallExpression	printf ( \"Error!  Already saw key %d (pt
>20539	ArgumentList	\"Error!  Already saw key %d (pt
>20540	Argument	pt_idx
>20541	Identifier	pt_idx
>20542	Argument	this_idx
>20543	Identifier	this_idx
>20544	Argument	\"Error!  Already saw key %d (pt
>20545	PrimaryExpression	\"Error!  Already saw key %d (pt
>20546	Callee	printf
>20547	Identifier	printf
>20548	Condition	 
>20549	EqualityExpression	keys_seen [ this_idx ] != - 1
>20550	UnaryOp	- 1
>20551	PrimaryExpression	1
>20552	UnaryOperator	-
>20553	ArrayIndexing	keys_seen [ this_idx ]
>20554	Identifier	this_idx
>20555	Identifier	keys_seen
>20556	ExpressionStatement	 
>20557	AssignmentExpr	saw [ pt_idx ] = 1
>20558	PrimaryExpression	1
>20559	ArrayIndexing	saw [ pt_idx ]
>20560	Identifier	pt_idx
>20561	Identifier	saw
>20562	IfStatement	if ( saw [ pt_idx ] == 1 )
>20563	CompoundStatement	 
>20564	ContinueStatement	 
>20565	Condition	 
>20566	EqualityExpression	saw [ pt_idx ] == 1
>20567	PrimaryExpression	1
>20568	ArrayIndexing	saw [ pt_idx ]
>20569	Identifier	pt_idx
>20570	Identifier	saw
>20571	IdentifierDeclStatement	 
>20572	IdentifierDecl	pt_idx = GetKey ( other , other_idx ) . m_extra
>20573	AssignmentExpr	pt_idx = GetKey ( other , other_idx ) . m_extra
>20574	MemberAccess	GetKey ( other , other_idx ) . m_extra
>20575	Identifier	m_extra
>20576	CallExpression	GetKey ( other , other_idx )
>20577	ArgumentList	other
>20578	Argument	other_idx
>20579	Identifier	other_idx
>20580	Argument	other
>20581	Identifier	other
>20582	Callee	GetKey
>20583	Identifier	GetKey
>20584	Identifier	pt_idx
>20585	Identifier	pt_idx
>20586	IdentifierDeclType	int
>20587	CompoundStatement	 
>20588	ContinueStatement	 
>20589	IfStatement	if ( GetKey ( other , other_idx ) . m_extra == - 2 )
>20590	ElseStatement	else
>20591	IfStatement	if ( GetKey ( other , other_idx ) . m_extra == - 1 )
>20592	ElseStatement	else
>20593	CompoundStatement	 
>20594	ExpressionStatement	 
>20595	CallExpression	printf ( \"Error!  Index = %d\n\" , GetKey ( other , other_idx ) . m_extra )
>20596	ArgumentList	\"Error!  Index = %d\n\"
>20597	Argument	GetKey ( other , other_idx ) . m_extra
>20598	MemberAccess	GetKey ( other , other_idx ) . m_extra
>20599	Identifier	m_extra
>20600	CallExpression	GetKey ( other , other_idx )
>20601	ArgumentList	other
>20602	Argument	other_idx
>20603	Identifier	other_idx
>20604	Argument	other
>20605	Identifier	other
>20606	Callee	GetKey
>20607	Identifier	GetKey
>20608	Argument	\"Error!  Index = %d\n\"
>20609	PrimaryExpression	\"Error!  Index = %d\n\"
>20610	Callee	printf
>20611	Identifier	printf
>20612	CompoundStatement	 
>20613	Condition	 
>20614	EqualityExpression	GetKey ( other , other_idx ) . m_extra == - 1
>20615	UnaryOp	- 1
>20616	PrimaryExpression	1
>20617	UnaryOperator	-
>20618	MemberAccess	GetKey ( other , other_idx ) . m_extra
>20619	Identifier	m_extra
>20620	CallExpression	GetKey ( other , other_idx )
>20621	ArgumentList	other
>20622	Argument	other_idx
>20623	Identifier	other_idx
>20624	Argument	other
>20625	Identifier	other
>20626	Callee	GetKey
>20627	Identifier	GetKey
>20628	CompoundStatement	 
>20629	Condition	 
>20630	EqualityExpression	GetKey ( other , other_idx ) . m_extra == - 2
>20631	UnaryOp	- 2
>20632	PrimaryExpression	2
>20633	UnaryOperator	-
>20634	MemberAccess	GetKey ( other , other_idx ) . m_extra
>20635	Identifier	m_extra
>20636	CallExpression	GetKey ( other , other_idx )
>20637	ArgumentList	other
>20638	Argument	other_idx
>20639	Identifier	other_idx
>20640	Argument	other
>20641	Identifier	other
>20642	Callee	GetKey
>20643	Identifier	GetKey
>20644	Condition	 
>20645	RelationalExpression	GetKey ( other , other_idx ) . m_extra < 0
>20646	PrimaryExpression	0
>20647	MemberAccess	GetKey ( other , other_idx ) . m_extra
>20648	Identifier	m_extra
>20649	CallExpression	GetKey ( other , other_idx )
>20650	ArgumentList	other
>20651	Argument	other_idx
>20652	Identifier	other_idx
>20653	Argument	other
>20654	Identifier	other
>20655	Callee	GetKey
>20656	Identifier	GetKey
>20657	IfStatement	if ( image_idx == first )
>20658	ElseStatement	else
>20659	CompoundStatement	 
>20660	ExpressionStatement	 
>20661	AssignmentExpr	this_idx = idx2
>20662	Identifier	idx2
>20663	Identifier	this_idx
>20664	ExpressionStatement	 
>20665	AssignmentExpr	other_idx = idx1
>20666	Identifier	idx1
>20667	Identifier	other_idx
>20668	CompoundStatement	 
>20669	ExpressionStatement	 
>20670	AssignmentExpr	other_idx = idx2
>20671	Identifier	idx2
>20672	Identifier	other_idx
>20673	ExpressionStatement	 
>20674	AssignmentExpr	this_idx = idx1
>20675	Identifier	idx1
>20676	Identifier	this_idx
>20677	Condition	 
>20678	EqualityExpression	image_idx == first
>20679	Identifier	first
>20680	Identifier	image_idx
>20681	IdentifierDeclStatement	 
>20682	IdentifierDecl	other_idx
>20683	Identifier	other_idx
>20684	IdentifierDeclType	int
>20685	IdentifierDecl	this_idx
>20686	Identifier	this_idx
>20687	IdentifierDeclType	int
>20688	IdentifierDeclStatement	 
>20689	IdentifierDecl	idx2 = list [ j ] . m_idx2
>20690	AssignmentExpr	idx2 = list [ j ] . m_idx2
>20691	MemberAccess	list [ j ] . m_idx2
>20692	Identifier	m_idx2
>20693	ArrayIndexing	list [ j ]
>20694	Identifier	j
>20695	Identifier	list
>20696	Identifier	idx2
>20697	Identifier	idx2
>20698	IdentifierDeclType	int
>20699	IdentifierDeclStatement	 
>20700	IdentifierDecl	idx1 = list [ j ] . m_idx1
>20701	AssignmentExpr	idx1 = list [ j ] . m_idx1
>20702	MemberAccess	list [ j ] . m_idx1
>20703	Identifier	m_idx1
>20704	ArrayIndexing	list [ j ]
>20705	Identifier	j
>20706	Identifier	list
>20707	Identifier	idx1
>20708	Identifier	idx1
>20709	IdentifierDeclType	int
>20710	IncDecOp	 
>20711	IncDec	++
>20712	Identifier	j
>20713	Condition	 
>20714	RelationalExpression	j < list . size ( )
>20715	CallExpression	list . size ( )
>20716	ArgumentList	 
>20717	Callee	list . size
>20718	MemberAccess	list . size
>20719	Identifier	size
>20720	Identifier	list
>20721	Identifier	j
>20722	ForInit	 
>20723	IdentifierDeclStatement	unsigned int j = 0 ;
>20724	IdentifierDecl	j = 0
>20725	AssignmentExpr	j = 0
>20726	PrimaryExpression	0
>20727	Identifier	j
>20728	Identifier	j
>20729	IdentifierDeclType	unsigned int
>20730	ExpressionStatement	 
>20731	CallExpression	printf ( \"  Matches[%d,%d] = %d\n\" , image_idx , other , ( int ) m_matches . GetNumMatches ( idx ) )
>20732	ArgumentList	\"  Matches[%d,%d] = %d\n\"
>20733	Argument	( int ) m_matches . GetNumMatches ( idx )
>20734	CastExpression	( int ) m_matches . GetNumMatches ( idx )
>20735	CallExpression	m_matches . GetNumMatches ( idx )
>20736	ArgumentList	idx
>20737	Argument	idx
>20738	Identifier	idx
>20739	Callee	m_matches . GetNumMatches
>20740	MemberAccess	m_matches . GetNumMatches
>20741	Identifier	GetNumMatches
>20742	Identifier	m_matches
>20743	CastTarget	int
>20744	Argument	other
>20745	Identifier	other
>20746	Argument	image_idx
>20747	Identifier	image_idx
>20748	Argument	\"  Matches[%d,%d] = %d\n\"
>20749	PrimaryExpression	\"  Matches[%d,%d] = %d\n\"
>20750	Callee	printf
>20751	Identifier	printf
>20752	ExpressionStatement	 
>20753	CallExpression	SetMatchesFromTracks ( first , second )
>20754	ArgumentList	first
>20755	Argument	second
>20756	Identifier	second
>20757	Argument	first
>20758	Identifier	first
>20759	Callee	SetMatchesFromTracks
>20760	Identifier	SetMatchesFromTracks
>20761	IdentifierDeclStatement	 
>20762	IdentifierDecl	& list = m_matches . GetMatchList ( idx )
>20763	AssignmentExpr	& list = m_matches . GetMatchList ( idx )
>20764	CallExpression	m_matches . GetMatchList ( idx )
>20765	ArgumentList	idx
>20766	Argument	idx
>20767	Identifier	idx
>20768	Callee	m_matches . GetMatchList
>20769	MemberAccess	m_matches . GetMatchList
>20770	Identifier	GetMatchList
>20771	Identifier	m_matches
>20772	Identifier	list
>20773	Identifier	list
>20774	IdentifierDeclType	std 
>20775	IdentifierDeclStatement	 
>20776	IdentifierDecl	idx = GetMatchIndex ( first , second )
>20777	AssignmentExpr	idx = GetMatchIndex ( first , second )
>20778	CallExpression	GetMatchIndex ( first , second )
>20779	ArgumentList	first
>20780	Argument	second
>20781	Identifier	second
>20782	Argument	first
>20783	Identifier	first
>20784	Callee	GetMatchIndex
>20785	Identifier	GetMatchIndex
>20786	Identifier	idx
>20787	Identifier	idx
>20788	IdentifierDeclType	MatchIndex
>20789	IdentifierDeclStatement	 
>20790	IdentifierDecl	second = MAX ( image_idx , other )
>20791	AssignmentExpr	second = MAX ( image_idx , other )
>20792	CallExpression	MAX ( image_idx , other )
>20793	ArgumentList	image_idx
>20794	Argument	other
>20795	Identifier	other
>20796	Argument	image_idx
>20797	Identifier	image_idx
>20798	Callee	MAX
>20799	Identifier	MAX
>20800	Identifier	second
>20801	Identifier	second
>20802	IdentifierDeclType	int
>20803	IdentifierDeclStatement	 
>20804	IdentifierDecl	first = MIN ( image_idx , other )
>20805	AssignmentExpr	first = MIN ( image_idx , other )
>20806	CallExpression	MIN ( image_idx , other )
>20807	ArgumentList	image_idx
>20808	Argument	other
>20809	Identifier	other
>20810	Argument	image_idx
>20811	Identifier	image_idx
>20812	Callee	MIN
>20813	Identifier	MIN
>20814	Identifier	first
>20815	Identifier	first
>20816	IdentifierDeclType	int
>20817	IdentifierDeclStatement	 
>20818	IdentifierDecl	other = added_order [ i ]
>20819	AssignmentExpr	other = added_order [ i ]
>20820	ArrayIndexing	added_order [ i ]
>20821	Identifier	i
>20822	Identifier	added_order
>20823	Identifier	other
>20824	Identifier	other
>20825	IdentifierDeclType	int
>20826	IncDecOp	 
>20827	IncDec	++
>20828	Identifier	i
>20829	Condition	 
>20830	RelationalExpression	i < num_cameras
>20831	Identifier	num_cameras
>20832	Identifier	i
>20833	ForInit	 
>20834	IdentifierDeclStatement	int i = 0 ;
>20835	IdentifierDecl	i = 0
>20836	AssignmentExpr	i = 0
>20837	PrimaryExpression	0
>20838	Identifier	i
>20839	Identifier	i
>20840	IdentifierDeclType	int
>20841	ExpressionStatement	 
>20842	Statement	 
>20843	Statement	 
>20844	Statement	 
>20845	Statement	 
>20846	Statement	 
>20847	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>20848	ExpressionStatement	 
>20849	AssignmentExpr	keys_seen [ i ] = - 1
>20850	UnaryOp	- 1
>20851	PrimaryExpression	1
>20852	UnaryOperator	-
>20853	ArrayIndexing	keys_seen [ i ]
>20854	Identifier	i
>20855	Identifier	keys_seen
>20856	IncDecOp	 
>20857	IncDec	++
>20858	Identifier	i
>20859	Condition	 
>20860	RelationalExpression	i < num_keys
>20861	Identifier	num_keys
>20862	Identifier	i
>20863	ForInit	 
>20864	IdentifierDeclStatement	int i = 0 ;
>20865	IdentifierDecl	i = 0
>20866	AssignmentExpr	i = 0
>20867	PrimaryExpression	0
>20868	Identifier	i
>20869	Identifier	i
>20870	IdentifierDeclType	int
>20871	IdentifierDeclStatement	 
>20872	IdentifierDecl	* keys_seen = new int [ num_keys ]
>20873	AssignmentExpr	* keys_seen = new int [ num_keys ]
>20874	Identifier	num_keys
>20875	Identifier	num_keys
>20876	Identifier	keys_seen
>20877	IdentifierDeclType	int *
>20878	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>20879	ExpressionStatement	 
>20880	AssignmentExpr	saw [ i ] = 0
>20881	PrimaryExpression	0
>20882	ArrayIndexing	saw [ i ]
>20883	Identifier	i
>20884	Identifier	saw
>20885	IncDecOp	 
>20886	IncDec	++
>20887	Identifier	i
>20888	Condition	 
>20889	RelationalExpression	i < num_points
>20890	Identifier	num_points
>20891	Identifier	i
>20892	ForInit	 
>20893	IdentifierDeclStatement	int i = 0 ;
>20894	IdentifierDecl	i = 0
>20895	AssignmentExpr	i = 0
>20896	PrimaryExpression	0
>20897	Identifier	i
>20898	Identifier	i
>20899	IdentifierDeclType	int
>20900	IdentifierDeclStatement	 
>20901	IdentifierDecl	* saw = new int [ num_points ]
>20902	AssignmentExpr	* saw = new int [ num_points ]
>20903	Identifier	num_points
>20904	Identifier	num_points
>20905	Identifier	saw
>20906	IdentifierDeclType	int *
>20907	IdentifierDeclStatement	 
>20908	IdentifierDecl	* keys_solve = new int [ num_keys ]
>20909	AssignmentExpr	* keys_solve = new int [ num_keys ]
>20910	Identifier	num_keys
>20911	Identifier	num_keys
>20912	Identifier	keys_solve
>20913	IdentifierDeclType	int *
>20914	IdentifierDeclStatement	 
>20915	IdentifierDecl	* idxs_solve = new int [ num_keys ]
>20916	AssignmentExpr	* idxs_solve = new int [ num_keys ]
>20917	Identifier	num_keys
>20918	Identifier	num_keys
>20919	Identifier	idxs_solve
>20920	IdentifierDeclType	int *
>20921	IdentifierDeclStatement	 
>20922	IdentifierDecl	* projs_solve = new v2_t [ num_keys ]
>20923	AssignmentExpr	* projs_solve = new v2_t [ num_keys ]
>20924	Identifier	num_keys
>20925	Identifier	num_keys
>20926	Identifier	projs_solve
>20927	IdentifierDeclType	v2_t *
>20928	IdentifierDeclStatement	 
>20929	IdentifierDecl	* points_solve = new v3_t [ num_keys ]
>20930	AssignmentExpr	* points_solve = new v3_t [ num_keys ]
>20931	Identifier	num_keys
>20932	Identifier	num_keys
>20933	Identifier	points_solve
>20934	IdentifierDeclType	v3_t *
>20935	IdentifierDeclStatement	 
>20936	IdentifierDecl	num_keys = GetNumKeys ( image_idx )
>20937	AssignmentExpr	num_keys = GetNumKeys ( image_idx )
>20938	CallExpression	GetNumKeys ( image_idx )
>20939	ArgumentList	image_idx
>20940	Argument	image_idx
>20941	Identifier	image_idx
>20942	Callee	GetNumKeys
>20943	Identifier	GetNumKeys
>20944	Identifier	num_keys
>20945	Identifier	num_keys
>20946	IdentifierDeclType	int
>20947	IdentifierDeclStatement	 
>20948	IdentifierDecl	num_pts_solve = 0
>20949	AssignmentExpr	num_pts_solve = 0
>20950	PrimaryExpression	0
>20951	Identifier	num_pts_solve
>20952	Identifier	num_pts_solve
>20953	IdentifierDeclType	int
>20954	ExpressionStatement	 
>20955	CallExpression	SetTracks ( image_idx )
>20956	ArgumentList	image_idx
>20957	Argument	image_idx
>20958	Identifier	image_idx
>20959	Callee	SetTracks
>20960	Identifier	SetTracks
>20961	ExpressionStatement	 
>20962	CallExpression	m_image_data [ image_idx ] . ReadKeyColors ( )
>20963	ArgumentList	 
>20964	Callee	m_image_data [ image_idx ] . ReadKeyColors
>20965	MemberAccess	m_image_data [ image_idx ] . ReadKeyColors
>20966	Identifier	ReadKeyColors
>20967	ArrayIndexing	m_image_data [ image_idx ]
>20968	Identifier	image_idx
>20969	Identifier	m_image_data
>20970	ExpressionStatement	 
>20971	CallExpression	m_image_data [ image_idx ] . LoadKeys ( false , ! m_optimize_for_fisheye )
>20972	ArgumentList	false
>20973	Argument	! m_optimize_for_fisheye
>20974	UnaryOp	! m_optimize_for_fisheye
>20975	Identifier	m_optimize_for_fisheye
>20976	UnaryOperator	!
>20977	Argument	false
>20978	Identifier	false
>20979	Callee	m_image_data [ image_idx ] . LoadKeys
>20980	MemberAccess	m_image_data [ image_idx ] . LoadKeys
>20981	Identifier	LoadKeys
>20982	ArrayIndexing	m_image_data [ image_idx ]
>20983	Identifier	image_idx
>20984	Identifier	m_image_data
>21125	FunctionDef	BundlerApp 
>21126	ParameterList	char * filename , int parent_img
>21127	Parameter	 
>21128	Identifier	parent_img
>21129	ParameterType	int
>21130	Parameter	 
>21131	Identifier	filename
>21132	ParameterType	char *
>21133	ReturnType	void
>21134	CompoundStatement	 
>21135	ExpressionStatement	 
>21136	CallExpression	data . WriteTracks ( )
>21137	ArgumentList	 
>21138	Callee	data . WriteTracks
>21139	MemberAccess	data . WriteTracks
>21140	Identifier	WriteTracks
>21141	Identifier	data
>21142	ExpressionStatement	 
>21143	CallExpression	data . WriteCamera ( )
>21144	ArgumentList	 
>21145	Callee	data . WriteCamera
>21146	MemberAccess	data . WriteCamera
>21147	Identifier	WriteCamera
>21148	Identifier	data
>21149	IfStatement	if ( parent_img != - 1 )
>21150	ElseStatement	else
>21151	CompoundStatement	 
>21152	ExpressionStatement	 
>21153	CallExpression	BundleRegisterImage ( data , false )
>21154	ArgumentList	data
>21155	Argument	false
>21156	Identifier	false
>21157	Argument	data
>21158	Identifier	data
>21159	Callee	BundleRegisterImage
>21160	Identifier	BundleRegisterImage
>21161	CompoundStatement	 
>21162	ExpressionStatement	 
>21163	CallExpression	BundleRegisterImage ( data , true )
>21164	ArgumentList	data
>21165	Argument	true
>21166	Identifier	true
>21167	Argument	data
>21168	Identifier	data
>21169	Callee	BundleRegisterImage
>21170	Identifier	BundleRegisterImage
>21171	ExpressionStatement	 
>21172	CallExpression	memcpy ( data . m_drop_pt , pos , 3 * sizeof ( double ) )
>21173	ArgumentList	data . m_drop_pt
>21174	Argument	3 * sizeof ( double )
>21175	MultiplicativeExpression	3 * sizeof ( double )
>21176	SizeofExpr	sizeof ( double )
>21177	SizeofOperand	double
>21178	Sizeof	sizeof
>21179	PrimaryExpression	3
>21180	Argument	pos
>21181	Identifier	pos
>21182	Argument	data . m_drop_pt
>21183	MemberAccess	data . m_drop_pt
>21184	Identifier	m_drop_pt
>21185	Identifier	data
>21186	Callee	memcpy
>21187	Identifier	memcpy
>21188	ExpressionStatement	 
>21189	CallExpression	m_image_data [ parent_img ] . m_camera . GetPosition ( pos )
>21190	ArgumentList	pos
>21191	Argument	pos
>21192	Identifier	pos
>21193	Callee	m_image_data [ parent_img ] . m_camera . GetPosition
>21194	MemberAccess	m_image_data [ parent_img ] . m_camera . GetPosition
>21195	Identifier	GetPosition
>21196	MemberAccess	m_image_data [ parent_img ] . m_camera
>21197	Identifier	m_camera
>21198	ArrayIndexing	m_image_data [ parent_img ]
>21199	Identifier	parent_img
>21200	Identifier	m_image_data
>21201	IdentifierDeclStatement	 
>21202	IdentifierDecl	pos [ 3 ]
>21203	PrimaryExpression	3
>21204	Identifier	pos
>21205	IdentifierDeclType	double [ 3 ]
>21206	Condition	 
>21207	EqualityExpression	parent_img != - 1
>21208	UnaryOp	- 1
>21209	PrimaryExpression	1
>21210	UnaryOperator	-
>21211	Identifier	parent_img
>21212	IfStatement	if ( data . ReadCamera ( ) && data . ReadTracks ( img_idx , m_point_data ) )
>21213	CompoundStatement	 
>21214	ReturnStatement	 
>21215	ExpressionStatement	 
>21216	CallExpression	m_image_data . push_back ( data )
>21217	ArgumentList	data
>21218	Argument	data
>21219	Identifier	data
>21220	Callee	m_image_data . push_back
>21221	MemberAccess	m_image_data . push_back
>21222	Identifier	push_back
>21223	Identifier	m_image_data
>21224	ForStatement	for ( int i = 0 ; i < num_tracks ; i ++ )
>21225	CompoundStatement	 
>21226	ExpressionStatement	 
>21227	CallExpression	printf ( \"proj[%d] = %0.3f, %0.3f\n\" , i , proj [ 0 ] , proj [ 1 ] )
>21228	ArgumentList	\"proj[%d] = %0.3f, %0.3f\n\"
>21229	Argument	proj [ 1 ]
>21230	ArrayIndexing	proj [ 1 ]
>21231	PrimaryExpression	1
>21232	Identifier	proj
>21233	Argument	proj [ 0 ]
>21234	ArrayIndexing	proj [ 0 ]
>21235	PrimaryExpression	0
>21236	Identifier	proj
>21237	Argument	i
>21238	Identifier	i
>21239	Argument	\"proj[%d] = %0.3f, %0.3f\n\"
>21240	PrimaryExpression	\"proj[%d] = %0.3f, %0.3f\n\"
>21241	Callee	printf
>21242	Identifier	printf
>21243	ExpressionStatement	 
>21244	CallExpression	data . m_camera . Project ( pos , proj )
>21245	ArgumentList	pos
>21246	Argument	proj
>21247	Identifier	proj
>21248	Argument	pos
>21249	Identifier	pos
>21250	Callee	data . m_camera . Project
>21251	MemberAccess	data . m_camera . Project
>21252	Identifier	Project
>21253	MemberAccess	data . m_camera
>21254	Identifier	m_camera
>21255	Identifier	data
>21256	IdentifierDeclStatement	 
>21257	IdentifierDecl	proj [ 2 ]
>21258	PrimaryExpression	2
>21259	Identifier	proj
>21260	IdentifierDeclType	double [ 2 ]
>21261	IdentifierDeclStatement	 
>21262	IdentifierDecl	* pos = m_point_data [ pt_idx ] . m_pos
>21263	AssignmentExpr	* pos = m_point_data [ pt_idx ] . m_pos
>21264	MemberAccess	m_point_data [ pt_idx ] . m_pos
>21265	Identifier	m_pos
>21266	ArrayIndexing	m_point_data [ pt_idx ]
>21267	Identifier	pt_idx
>21268	Identifier	m_point_data
>21269	Identifier	pos
>21270	Identifier	pos
>21271	IdentifierDeclType	double *
>21272	IdentifierDeclStatement	 
>21273	IdentifierDecl	pt_idx = data . m_visible_points [ i ]
>21274	AssignmentExpr	pt_idx = data . m_visible_points [ i ]
>21275	ArrayIndexing	data . m_visible_points [ i ]
>21276	Identifier	i
>21277	MemberAccess	data . m_visible_points
>21278	Identifier	m_visible_points
>21279	Identifier	data
>21280	Identifier	pt_idx
>21281	Identifier	pt_idx
>21282	IdentifierDeclType	int
>21283	IncDecOp	 
>21284	IncDec	++
>21285	Identifier	i
>21286	Condition	 
>21287	RelationalExpression	i < num_tracks
>21288	Identifier	num_tracks
>21289	Identifier	i
>21290	ForInit	 
>21291	IdentifierDeclStatement	int i = 0 ;
>21292	IdentifierDecl	i = 0
>21293	AssignmentExpr	i = 0
>21294	PrimaryExpression	0
>21295	Identifier	i
>21296	Identifier	i
>21297	IdentifierDeclType	int
>21298	IdentifierDeclStatement	 
>21299	IdentifierDecl	num_tracks = ( int ) data . m_visible_points . size ( )
>21300	AssignmentExpr	num_tracks = ( int ) data . m_visible_points . size ( )
>21301	CastExpression	( int ) data . m_visible_points . size ( )
>21302	CallExpression	data . m_visible_points . size ( )
>21303	ArgumentList	 
>21304	Callee	data . m_visible_points . size
>21305	MemberAccess	data . m_visible_points . size
>21306	Identifier	size
>21307	MemberAccess	data . m_visible_points
>21308	Identifier	m_visible_points
>21309	Identifier	data
>21310	CastTarget	int
>21311	Identifier	num_tracks
>21312	Identifier	num_tracks
>21313	IdentifierDeclType	int
>21314	Condition	 
>21315	AndExpression	data . ReadCamera ( ) && data . ReadTracks ( img_idx , m_point_data )
>21316	CallExpression	data . ReadTracks ( img_idx , m_point_data )
>21317	ArgumentList	img_idx
>21318	Argument	m_point_data
>21319	Identifier	m_point_data
>21320	Argument	img_idx
>21321	Identifier	img_idx
>21322	Callee	data . ReadTracks
>21323	MemberAccess	data . ReadTracks
>21324	Identifier	ReadTracks
>21325	Identifier	data
>21326	CallExpression	data . ReadCamera ( )
>21327	ArgumentList	 
>21328	Callee	data . ReadCamera
>21329	MemberAccess	data . ReadCamera
>21330	Identifier	ReadCamera
>21331	Identifier	data
>21332	IdentifierDeclStatement	 
>21333	IdentifierDecl	img_idx = ( int ) m_image_data . size ( )
>21334	AssignmentExpr	img_idx = ( int ) m_image_data . size ( )
>21335	CastExpression	( int ) m_image_data . size ( )
>21336	CallExpression	m_image_data . size ( )
>21337	ArgumentList	 
>21338	Callee	m_image_data . size
>21339	MemberAccess	m_image_data . size
>21340	Identifier	size
>21341	Identifier	m_image_data
>21342	CastTarget	int
>21343	Identifier	img_idx
>21344	Identifier	img_idx
>21345	IdentifierDeclType	int
>21346	ExpressionStatement	 
>21347	AssignmentExpr	data . m_licensed = true
>21348	Identifier	true
>21349	MemberAccess	data . m_licensed
>21350	Identifier	m_licensed
>21351	Identifier	data
>21352	ExpressionStatement	 
>21353	AssignmentExpr	data . m_keys_loaded = false
>21354	Identifier	false
>21355	MemberAccess	data . m_keys_loaded
>21356	Identifier	m_keys_loaded
>21357	Identifier	data
>21358	ExpressionStatement	 
>21359	AssignmentExpr	data . m_image_loaded = false
>21360	Identifier	false
>21361	MemberAccess	data . m_image_loaded
>21362	Identifier	m_image_loaded
>21363	Identifier	data
>21364	ExpressionStatement	 
>21365	AssignmentExpr	data . m_thumb8 = NULL
>21366	Identifier	NULL
>21367	MemberAccess	data . m_thumb8
>21368	Identifier	m_thumb8
>21369	Identifier	data
>21370	ExpressionStatement	 
>21371	AssignmentExpr	data . m_thumb = NULL
>21372	Identifier	NULL
>21373	MemberAccess	data . m_thumb
>21374	Identifier	m_thumb
>21375	Identifier	data
>21376	ExpressionStatement	 
>21377	AssignmentExpr	data . m_img = NULL
>21378	Identifier	NULL
>21379	MemberAccess	data . m_img
>21380	Identifier	m_img
>21381	Identifier	data
>21382	ExpressionStatement	 
>21383	AssignmentExpr	data . m_name = strdup ( filename )
>21384	CallExpression	strdup ( filename )
>21385	ArgumentList	filename
>21386	Argument	filename
>21387	Identifier	filename
>21388	Callee	strdup
>21389	Identifier	strdup
>21390	MemberAccess	data . m_name
>21391	Identifier	m_name
>21392	Identifier	data
>21393	IdentifierDeclStatement	 
>21394	IdentifierDecl	data
>21395	Identifier	data
>21396	IdentifierDeclType	ImageData
>21439	FunctionDef	BundlerApp 
>21440	ParameterList	FILE * f
>21441	Parameter	 
>21442	Identifier	f
>21443	ParameterType	FILE *
>21444	ReturnType	void
>21445	CompoundStatement	 
>21446	WhileStatement	while ( fgets ( buf , 256 , f ) )
>21447	CompoundStatement	 
>21448	IfStatement	if ( data . ReadCamera ( ) && data . ReadTracks ( img_idx , m_point_data ) )
>21449	ElseStatement	else
>21450	IfStatement	if ( ! m_add_images_fast && BundleRegisterImage ( data , false ) )
>21451	CompoundStatement	 
>21452	ExpressionStatement	 
>21453	CallExpression	m_image_data . push_back ( data )
>21454	ArgumentList	data
>21455	Argument	data
>21456	Identifier	data
>21457	Callee	m_image_data . push_back
>21458	MemberAccess	m_image_data . push_back
>21459	Identifier	push_back
>21460	Identifier	m_image_data
>21461	ExpressionStatement	 
>21462	CallExpression	data . UnloadKeys ( )
>21463	ArgumentList	 
>21464	Callee	data . UnloadKeys
>21465	MemberAccess	data . UnloadKeys
>21466	Identifier	UnloadKeys
>21467	Identifier	data
>21468	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>21469	CompoundStatement	 
>21470	IfStatement	if ( data . m_keys [ i ] . m_extra != - 1 )
>21471	CompoundStatement	 
>21472	ExpressionStatement	 
>21473	CallExpression	m_point_data [ pt_idx ] . m_views . push_back ( ImageKey ( img_idx , i ) )
>21474	ArgumentList	ImageKey ( img_idx , i )
>21475	Argument	ImageKey ( img_idx , i )
>21476	CallExpression	ImageKey ( img_idx , i )
>21477	ArgumentList	img_idx
>21478	Argument	i
>21479	Identifier	i
>21480	Argument	img_idx
>21481	Identifier	img_idx
>21482	Callee	ImageKey
>21483	Identifier	ImageKey
>21484	Callee	m_point_data [ pt_idx ] . m_views . push_back
>21485	MemberAccess	m_point_data [ pt_idx ] . m_views . push_back
>21486	Identifier	push_back
>21487	MemberAccess	m_point_data [ pt_idx ] . m_views
>21488	Identifier	m_views
>21489	ArrayIndexing	m_point_data [ pt_idx ]
>21490	Identifier	pt_idx
>21491	Identifier	m_point_data
>21492	IdentifierDeclStatement	 
>21493	IdentifierDecl	pt_idx = data . m_keys [ i ] . m_extra
>21494	AssignmentExpr	pt_idx = data . m_keys [ i ] . m_extra
>21495	MemberAccess	data . m_keys [ i ] . m_extra
>21496	Identifier	m_extra
>21497	ArrayIndexing	data . m_keys [ i ]
>21498	Identifier	i
>21499	MemberAccess	data . m_keys
>21500	Identifier	m_keys
>21501	Identifier	data
>21502	Identifier	pt_idx
>21503	Identifier	pt_idx
>21504	IdentifierDeclType	int
>21505	Condition	 
>21506	EqualityExpression	data . m_keys [ i ] . m_extra != - 1
>21507	UnaryOp	- 1
>21508	PrimaryExpression	1
>21509	UnaryOperator	-
>21510	MemberAccess	data . m_keys [ i ] . m_extra
>21511	Identifier	m_extra
>21512	ArrayIndexing	data . m_keys [ i ]
>21513	Identifier	i
>21514	MemberAccess	data . m_keys
>21515	Identifier	m_keys
>21516	Identifier	data
>21517	IncDecOp	 
>21518	IncDec	++
>21519	Identifier	i
>21520	Condition	 
>21521	RelationalExpression	i < num_keys
>21522	Identifier	num_keys
>21523	Identifier	i
>21524	ForInit	 
>21525	IdentifierDeclStatement	int i = 0 ;
>21526	IdentifierDecl	i = 0
>21527	AssignmentExpr	i = 0
>21528	PrimaryExpression	0
>21529	Identifier	i
>21530	Identifier	i
>21531	IdentifierDeclType	int
>21532	IdentifierDeclStatement	 
>21533	IdentifierDecl	img_idx = ( int ) m_image_data . size ( )
>21534	AssignmentExpr	img_idx = ( int ) m_image_data . size ( )
>21535	CastExpression	( int ) m_image_data . size ( )
>21536	CallExpression	m_image_data . size ( )
>21537	ArgumentList	 
>21538	Callee	m_image_data . size
>21539	MemberAccess	m_image_data . size
>21540	Identifier	size
>21541	Identifier	m_image_data
>21542	CastTarget	int
>21543	Identifier	img_idx
>21544	Identifier	img_idx
>21545	IdentifierDeclType	int
>21546	IdentifierDeclStatement	 
>21547	IdentifierDecl	num_keys = data . m_keys . size ( )
>21548	AssignmentExpr	num_keys = data . m_keys . size ( )
>21549	CallExpression	data . m_keys . size ( )
>21550	ArgumentList	 
>21551	Callee	data . m_keys . size
>21552	MemberAccess	data . m_keys . size
>21553	Identifier	size
>21554	MemberAccess	data . m_keys
>21555	Identifier	m_keys
>21556	Identifier	data
>21557	Identifier	num_keys
>21558	Identifier	num_keys
>21559	IdentifierDeclType	int
>21560	ExpressionStatement	 
>21561	CallExpression	data . WriteTracks ( )
>21562	ArgumentList	 
>21563	Callee	data . WriteTracks
>21564	MemberAccess	data . WriteTracks
>21565	Identifier	WriteTracks
>21566	Identifier	data
>21567	ExpressionStatement	 
>21568	CallExpression	data . WriteCamera ( )
>21569	ArgumentList	 
>21570	Callee	data . WriteCamera
>21571	MemberAccess	data . WriteCamera
>21572	Identifier	WriteCamera
>21573	Identifier	data
>21574	Condition	 
>21575	AndExpression	! m_add_images_fast && BundleRegisterImage ( data , false )
>21576	CallExpression	BundleRegisterImage ( data , false )
>21577	ArgumentList	data
>21578	Argument	false
>21579	Identifier	false
>21580	Argument	data
>21581	Identifier	data
>21582	Callee	BundleRegisterImage
>21583	Identifier	BundleRegisterImage
>21584	UnaryOp	! m_add_images_fast
>21585	Identifier	m_add_images_fast
>21586	UnaryOperator	!
>21587	CompoundStatement	 
>21588	ExpressionStatement	 
>21589	CallExpression	m_image_data . push_back ( data )
>21590	ArgumentList	data
>21591	Argument	data
>21592	Identifier	data
>21593	Callee	m_image_data . push_back
>21594	MemberAccess	m_image_data . push_back
>21595	Identifier	push_back
>21596	Identifier	m_image_data
>21597	Condition	 
>21598	AndExpression	data . ReadCamera ( ) && data . ReadTracks ( img_idx , m_point_data )
>21599	CallExpression	data . ReadTracks ( img_idx , m_point_data )
>21600	ArgumentList	img_idx
>21601	Argument	m_point_data
>21602	Identifier	m_point_data
>21603	Argument	img_idx
>21604	Identifier	img_idx
>21605	Callee	data . ReadTracks
>21606	MemberAccess	data . ReadTracks
>21607	Identifier	ReadTracks
>21608	Identifier	data
>21609	CallExpression	data . ReadCamera ( )
>21610	ArgumentList	 
>21611	Callee	data . ReadCamera
>21612	MemberAccess	data . ReadCamera
>21613	Identifier	ReadCamera
>21614	Identifier	data
>21615	IdentifierDeclStatement	 
>21616	IdentifierDecl	img_idx = ( int ) m_image_data . size ( )
>21617	AssignmentExpr	img_idx = ( int ) m_image_data . size ( )
>21618	CastExpression	( int ) m_image_data . size ( )
>21619	CallExpression	m_image_data . size ( )
>21620	ArgumentList	 
>21621	Callee	m_image_data . size
>21622	MemberAccess	m_image_data . size
>21623	Identifier	size
>21624	Identifier	m_image_data
>21625	CastTarget	int
>21626	Identifier	img_idx
>21627	Identifier	img_idx
>21628	IdentifierDeclType	int
>21629	ExpressionStatement	 
>21630	AssignmentExpr	data . m_licensed = true
>21631	Identifier	true
>21632	MemberAccess	data . m_licensed
>21633	Identifier	m_licensed
>21634	Identifier	data
>21635	ExpressionStatement	 
>21636	CallExpression	data . InitFromString ( buf , m_image_directory , false )
>21637	ArgumentList	buf
>21638	Argument	false
>21639	Identifier	false
>21640	Argument	m_image_directory
>21641	Identifier	m_image_directory
>21642	Argument	buf
>21643	Identifier	buf
>21644	Callee	data . InitFromString
>21645	MemberAccess	data . InitFromString
>21646	Identifier	InitFromString
>21647	Identifier	data
>21648	IdentifierDeclStatement	 
>21649	IdentifierDecl	data
>21650	Identifier	data
>21651	IdentifierDeclType	ImageData
>21652	Condition	 
>21653	CallExpression	fgets ( buf , 256 , f )
>21654	ArgumentList	buf
>21655	Argument	f
>21656	Identifier	f
>21657	Argument	256
>21658	PrimaryExpression	256
>21659	Argument	buf
>21660	Identifier	buf
>21661	Callee	fgets
>21662	Identifier	fgets
>21663	IfStatement	if ( ! m_add_images_fast )
>21664	ExpressionStatement	 
>21665	CallExpression	CoalesceFeatureDescriptors ( )
>21666	ArgumentList	 
>21667	Callee	CoalesceFeatureDescriptors
>21668	Identifier	CoalesceFeatureDescriptors
>21669	Condition	 
>21670	UnaryOp	! m_add_images_fast
>21671	Identifier	m_add_images_fast
>21672	UnaryOperator	!
>21673	IdentifierDeclStatement	 
>21674	IdentifierDecl	buf [ 256 ]
>21675	PrimaryExpression	256
>21676	Identifier	buf
>21677	IdentifierDeclType	char [ 256 ]
>21710	FunctionDef	RemoveDuplicateMatches (const std 
>21711	ParameterList	const std 
>21712	Parameter	 
>21713	Identifier	matches
>21714	ParameterType	const std 
>21715	ReturnType	std 
>21716	CompoundStatement	 
>21717	ReturnStatement	 
>21718	Identifier	matches_new
>21719	ForStatement	for ( int i = 0 ; i < num_matches ; i ++ )
>21720	CompoundStatement	 
>21721	ExpressionStatement	 
>21722	AssignmentExpr	num_matches_new = ( int ) matches_new . size ( )
>21723	CastExpression	( int ) matches_new . size ( )
>21724	CallExpression	matches_new . size ( )
>21725	ArgumentList	 
>21726	Callee	matches_new . size
>21727	MemberAccess	matches_new . size
>21728	Identifier	size
>21729	Identifier	matches_new
>21730	CastTarget	int
>21731	Identifier	num_matches_new
>21732	IfStatement	if ( ! duplicate )
>21733	ExpressionStatement	 
>21734	CallExpression	matches_new . push_back ( matches [ i ] )
>21735	ArgumentList	matches [ i ]
>21736	Argument	matches [ i ]
>21737	ArrayIndexing	matches [ i ]
>21738	Identifier	i
>21739	Identifier	matches
>21740	Callee	matches_new . push_back
>21741	MemberAccess	matches_new . push_back
>21742	Identifier	push_back
>21743	Identifier	matches_new
>21744	Condition	 
>21745	UnaryOp	! duplicate
>21746	Identifier	duplicate
>21747	UnaryOperator	!
>21748	ForStatement	for ( int j = 0 ; j < num_matches_new ; j ++ )
>21749	CompoundStatement	 
>21750	IfStatement	if ( matches_new [ j ] . m_idx2 == target )
>21751	CompoundStatement	 
>21752	BreakStatement	 
>21753	ExpressionStatement	 
>21754	AssignmentExpr	duplicate = true
>21755	Identifier	true
>21756	Identifier	duplicate
>21757	Condition	 
>21758	EqualityExpression	matches_new [ j ] . m_idx2 == target
>21759	Identifier	target
>21760	MemberAccess	matches_new [ j ] . m_idx2
>21761	Identifier	m_idx2
>21762	ArrayIndexing	matches_new [ j ]
>21763	Identifier	j
>21764	Identifier	matches_new
>21765	IncDecOp	 
>21766	IncDec	++
>21767	Identifier	j
>21768	Condition	 
>21769	RelationalExpression	j < num_matches_new
>21770	Identifier	num_matches_new
>21771	Identifier	j
>21772	ForInit	 
>21773	IdentifierDeclStatement	int j = 0 ;
>21774	IdentifierDecl	j = 0
>21775	AssignmentExpr	j = 0
>21776	PrimaryExpression	0
>21777	Identifier	j
>21778	Identifier	j
>21779	IdentifierDeclType	int
>21780	IdentifierDeclStatement	 
>21781	IdentifierDecl	duplicate = false
>21782	AssignmentExpr	duplicate = false
>21783	Identifier	false
>21784	Identifier	false
>21785	Identifier	duplicate
>21786	IdentifierDeclType	bool
>21787	IdentifierDeclStatement	 
>21788	IdentifierDecl	target = matches [ i ] . m_idx2
>21789	AssignmentExpr	target = matches [ i ] . m_idx2
>21790	MemberAccess	matches [ i ] . m_idx2
>21791	Identifier	m_idx2
>21792	ArrayIndexing	matches [ i ]
>21793	Identifier	i
>21794	Identifier	matches
>21795	Identifier	target
>21796	Identifier	target
>21797	IdentifierDeclType	int
>21798	IncDecOp	 
>21799	IncDec	++
>21800	Identifier	i
>21801	Condition	 
>21802	RelationalExpression	i < num_matches
>21803	Identifier	num_matches
>21804	Identifier	i
>21805	ForInit	 
>21806	IdentifierDeclStatement	int i = 0 ;
>21807	IdentifierDecl	i = 0
>21808	AssignmentExpr	i = 0
>21809	PrimaryExpression	0
>21810	Identifier	i
>21811	Identifier	i
>21812	IdentifierDeclType	int
>21813	IdentifierDeclStatement	 
>21814	IdentifierDecl	num_matches_new = 0
>21815	AssignmentExpr	num_matches_new = 0
>21816	PrimaryExpression	0
>21817	Identifier	num_matches_new
>21818	Identifier	num_matches_new
>21819	IdentifierDeclType	int
>21820	IdentifierDeclStatement	 
>21821	IdentifierDecl	matches_new
>21822	Identifier	matches_new
>21823	IdentifierDeclType	std 
>21824	IdentifierDeclStatement	 
>21825	IdentifierDecl	num_matches = ( int ) matches . size ( )
>21826	AssignmentExpr	num_matches = ( int ) matches . size ( )
>21827	CastExpression	( int ) matches . size ( )
>21828	CallExpression	matches . size ( )
>21829	ArgumentList	 
>21830	Callee	matches . size
>21831	MemberAccess	matches . size
>21832	Identifier	size
>21833	Identifier	matches
>21834	CastTarget	int
>21835	Identifier	num_matches
>21836	Identifier	num_matches
>21837	IdentifierDeclType	int
>21859	FunctionDef	BundlerApp 
>21860	ParameterList	ImageData & data , bool init_location
>21861	Parameter	 
>21862	Identifier	init_location
>21863	ParameterType	bool
>21864	Parameter	 
>21865	Identifier	data
>21866	ParameterType	ImageData &
>21867	ReturnType	bool
>21868	CompoundStatement	 
>21869	ReturnStatement	 
>21870	Identifier	success
>21871	ExpressionStatement	 
>21872	CallExpression	printf ( \"[BundleRegisterImage] Registration took %0.3fs\n\" , ( double ) ( end - start ) / ( double ) CLOCKS_PER_\
>21873	ArgumentList	\"[BundleRegisterImage] Registration took %0.3fs\n\"
>21874	Argument	( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC
>21875	MultiplicativeExpression	( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC
>21876	CastExpression	( double ) CLOCKS_PER_SEC
>21877	Identifier	CLOCKS_PER_SEC
>21878	CastTarget	double
>21879	CastExpression	( double ) ( end - start )
>21880	AdditiveExpression	end - start
>21881	Identifier	start
>21882	Identifier	end
>21883	CastTarget	double
>21884	Argument	\"[BundleRegisterImage] Registration took %0.3fs\n\"
>21885	PrimaryExpression	\"[BundleRegisterImage] Registration took %0.3fs\n\"
>21886	Callee	printf
>21887	Identifier	printf
>21888	IdentifierDeclStatement	 
>21889	IdentifierDecl	end = clock ( )
>21890	AssignmentExpr	end = clock ( )
>21891	CallExpression	clock ( )
>21892	ArgumentList	 
>21893	Callee	clock
>21894	Identifier	clock
>21895	Identifier	end
>21896	Identifier	end
>21897	IdentifierDeclType	clock_t
>21898	ExpressionStatement	 
>21899	Identifier	keys_solve
>21900	Statement	 
>21901	Statement	 
>21902	Statement	 
>21903	ExpressionStatement	 
>21904	Identifier	idxs_solve
>21905	Statement	 
>21906	Statement	 
>21907	Statement	 
>21908	ExpressionStatement	 
>21909	Identifier	projs_solve
>21910	Statement	 
>21911	Statement	 
>21912	Statement	 
>21913	ExpressionStatement	 
>21914	Identifier	points_solve
>21915	Statement	 
>21916	Statement	 
>21917	Statement	 
>21918	ExpressionStatement	 
>21919	Identifier	projs_final
>21920	Statement	 
>21921	Statement	 
>21922	Statement	 
>21923	ExpressionStatement	 
>21924	Identifier	points_final
>21925	Statement	 
>21926	Statement	 
>21927	Statement	 
>21928	ExpressionStatement	 
>21929	Identifier	camera_new
>21930	Statement	 
>21931	IfStatement	if ( num_inliers < 0.5 * num_points_final )
>21932	ElseStatement	else
>21933	IfStatement	if ( num_inliers >= MIN_INLIERS_ADD_IMAGE )
>21934	CompoundStatement	 
>21935	ExpressionStatement	 
>21936	AssignmentExpr	success = true
>21937	Identifier	true
>21938	Identifier	success
>21939	ForStatement	for ( int i = 0 ; i < num_inliers_final ; i ++ )
>21940	CompoundStatement	 
>21941	ExpressionStatement	 
>21942	CallExpression	data . m_visible_keys . push_back ( key_idx )
>21943	ArgumentList	key_idx
>21944	Argument	key_idx
>21945	Identifier	key_idx
>21946	Callee	data . m_visible_keys . push_back
>21947	MemberAccess	data . m_visible_keys . push_back
>21948	Identifier	push_back
>21949	MemberAccess	data . m_visible_keys
>21950	Identifier	m_visible_keys
>21951	Identifier	data
>21952	ExpressionStatement	 
>21953	CallExpression	data . m_visible_points . push_back ( pt_idx )
>21954	ArgumentList	pt_idx
>21955	Argument	pt_idx
>21956	Identifier	pt_idx
>21957	Callee	data . m_visible_points . push_back
>21958	MemberAccess	data . m_visible_points . push_back
>21959	Identifier	push_back
>21960	MemberAccess	data . m_visible_points
>21961	Identifier	m_visible_points
>21962	Identifier	data
>21963	ExpressionStatement	 
>21964	AssignmentExpr	data . m_keys_desc [ key_idx ] . m_extra = pt_idx
>21965	Identifier	pt_idx
>21966	MemberAccess	data . m_keys_desc [ key_idx ] . m_extra
>21967	Identifier	m_extra
>21968	ArrayIndexing	data . m_keys_desc [ key_idx ]
>21969	Identifier	key_idx
>21970	MemberAccess	data . m_keys_desc
>21971	Identifier	m_keys_desc
>21972	Identifier	data
>21973	ExpressionStatement	 
>21974	CallExpression	printf ( \"pr[%d] = %0.3f, %0.3f == %0.3f, %0.3f\n\" , i , proj [ 0 ] , proj [ 1 ] , data . m_keys_desc [ key_idx ] \
>21975	ArgumentList	\"pr[%d] = %0.3f, %0.3f == %0.3f, %0.3f\n\"
>21976	Argument	data . m_keys_desc [ key_idx ] . m_y
>21977	MemberAccess	data . m_keys_desc [ key_idx ] . m_y
>21978	Identifier	m_y
>21979	ArrayIndexing	data . m_keys_desc [ key_idx ]
>21980	Identifier	key_idx
>21981	MemberAccess	data . m_keys_desc
>21982	Identifier	m_keys_desc
>21983	Identifier	data
>21984	Argument	data . m_keys_desc [ key_idx ] . m_x
>21985	MemberAccess	data . m_keys_desc [ key_idx ] . m_x
>21986	Identifier	m_x
>21987	ArrayIndexing	data . m_keys_desc [ key_idx ]
>21988	Identifier	key_idx
>21989	MemberAccess	data . m_keys_desc
>21990	Identifier	m_keys_desc
>21991	Identifier	data
>21992	Argument	proj [ 1 ]
>21993	ArrayIndexing	proj [ 1 ]
>21994	PrimaryExpression	1
>21995	Identifier	proj
>21996	Argument	proj [ 0 ]
>21997	ArrayIndexing	proj [ 0 ]
>21998	PrimaryExpression	0
>21999	Identifier	proj
>22000	Argument	i
>22001	Identifier	i
>22002	Argument	\"pr[%d] = %0.3f, %0.3f == %0.3f, %0.3f\n\"
>22003	PrimaryExpression	\"pr[%d] = %0.3f, %0.3f == %0.3f, %0.3f\n\"
>22004	Callee	printf
>22005	Identifier	printf
>22006	ExpressionStatement	 
>22007	CallExpression	data . m_camera . Project ( m_point_data [ pt_idx ] . m_pos , proj )
>22008	ArgumentList	m_point_data [ pt_idx ] . m_pos
>22009	Argument	proj
>22010	Identifier	proj
>22011	Argument	m_point_data [ pt_idx ] . m_pos
>22012	MemberAccess	m_point_data [ pt_idx ] . m_pos
>22013	Identifier	m_pos
>22014	ArrayIndexing	m_point_data [ pt_idx ]
>22015	Identifier	pt_idx
>22016	Identifier	m_point_data
>22017	Callee	data . m_camera . Project
>22018	MemberAccess	data . m_camera . Project
>22019	Identifier	Project
>22020	MemberAccess	data . m_camera
>22021	Identifier	m_camera
>22022	Identifier	data
>22023	IdentifierDeclStatement	 
>22024	IdentifierDecl	proj [ 2 ]
>22025	PrimaryExpression	2
>22026	Identifier	proj
>22027	IdentifierDeclType	double [ 2 ]
>22028	ExpressionStatement	 
>22029	CallExpression	printf ( \"(k,p)[%d] = %d, %d\n\" , i , key_idx , pt_idx )
>22030	ArgumentList	\"(k,p)[%d] = %d, %d\n\"
>22031	Argument	pt_idx
>22032	Identifier	pt_idx
>22033	Argument	key_idx
>22034	Identifier	key_idx
>22035	Argument	i
>22036	Identifier	i
>22037	Argument	\"(k,p)[%d] = %d, %d\n\"
>22038	PrimaryExpression	\"(k,p)[%d] = %d, %d\n\"
>22039	Callee	printf
>22040	Identifier	printf
>22041	IdentifierDeclStatement	 
>22042	IdentifierDecl	pt_idx = idxs_solve [ inliers_weak [ inliers_final [ i ] ] ]
>22043	AssignmentExpr	pt_idx = idxs_solve [ inliers_weak [ inliers_final [ i ] ] ]
>22044	ArrayIndexing	idxs_solve [ inliers_weak [ inliers_final [ i ] ] ]
>22045	ArrayIndexing	inliers_weak [ inliers_final [ i ] ]
>22046	ArrayIndexing	inliers_final [ i ]
>22047	Identifier	i
>22048	Identifier	inliers_final
>22049	Identifier	inliers_weak
>22050	Identifier	idxs_solve
>22051	Identifier	pt_idx
>22052	Identifier	pt_idx
>22053	IdentifierDeclType	int
>22054	IdentifierDeclStatement	 
>22055	IdentifierDecl	key_idx = keys_solve [ inliers_weak [ inliers_final [ i ] ] ]
>22056	AssignmentExpr	key_idx = keys_solve [ inliers_weak [ inliers_final [ i ] ] ]
>22057	ArrayIndexing	keys_solve [ inliers_weak [ inliers_final [ i ] ] ]
>22058	ArrayIndexing	inliers_weak [ inliers_final [ i ] ]
>22059	ArrayIndexing	inliers_final [ i ]
>22060	Identifier	i
>22061	Identifier	inliers_final
>22062	Identifier	inliers_weak
>22063	Identifier	keys_solve
>22064	Identifier	key_idx
>22065	Identifier	key_idx
>22066	IdentifierDeclType	int
>22067	IncDecOp	 
>22068	IncDec	++
>22069	Identifier	i
>22070	Condition	 
>22071	RelationalExpression	i < num_inliers_final
>22072	Identifier	num_inliers_final
>22073	Identifier	i
>22074	ForInit	 
>22075	IdentifierDeclStatement	int i = 0 ;
>22076	IdentifierDecl	i = 0
>22077	AssignmentExpr	i = 0
>22078	PrimaryExpression	0
>22079	Identifier	i
>22080	Identifier	i
>22081	IdentifierDeclType	int
>22082	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>22083	CompoundStatement	 
>22084	ExpressionStatement	 
>22085	AssignmentExpr	data . m_keys_desc [ i ] . m_extra = - 1
>22086	UnaryOp	- 1
>22087	PrimaryExpression	1
>22088	UnaryOperator	-
>22089	MemberAccess	data . m_keys_desc [ i ] . m_extra
>22090	Identifier	m_extra
>22091	ArrayIndexing	data . m_keys_desc [ i ]
>22092	Identifier	i
>22093	MemberAccess	data . m_keys_desc
>22094	Identifier	m_keys_desc
>22095	Identifier	data
>22096	IncDecOp	 
>22097	IncDec	++
>22098	Identifier	i
>22099	Condition	 
>22100	RelationalExpression	i < num_keys
>22101	Identifier	num_keys
>22102	Identifier	i
>22103	ForInit	 
>22104	IdentifierDeclStatement	int i = 0 ;
>22105	IdentifierDecl	i = 0
>22106	AssignmentExpr	i = 0
>22107	PrimaryExpression	0
>22108	Identifier	i
>22109	Identifier	i
>22110	IdentifierDeclType	int
>22111	IdentifierDeclStatement	 
>22112	IdentifierDecl	num_inliers_final = ( int ) inliers_final . size ( )
>22113	AssignmentExpr	num_inliers_final = ( int ) inliers_final . size ( )
>22114	CastExpression	( int ) inliers_final . size ( )
>22115	CallExpression	inliers_final . size ( )
>22116	ArgumentList	 
>22117	Callee	inliers_final . size
>22118	MemberAccess	inliers_final . size
>22119	Identifier	size
>22120	Identifier	inliers_final
>22121	CastTarget	int
>22122	Identifier	num_inliers_final
>22123	Identifier	num_inliers_final
>22124	IdentifierDeclType	int
>22125	ExpressionStatement	 
>22126	CallExpression	data . m_camera . Finalize ( )
>22127	ArgumentList	 
>22128	Callee	data . m_camera . Finalize
>22129	MemberAccess	data . m_camera . Finalize
>22130	Identifier	Finalize
>22131	MemberAccess	data . m_camera
>22132	Identifier	m_camera
>22133	Identifier	data
>22134	ExpressionStatement	 
>22135	AssignmentExpr	data . m_camera . m_focal = camera_new -> f
>22136	PtrMemberAccess	camera_new -> f
>22137	Identifier	f
>22138	Identifier	camera_new
>22139	MemberAccess	data . m_camera . m_focal
>22140	Identifier	m_focal
>22141	MemberAccess	data . m_camera
>22142	Identifier	m_camera
>22143	Identifier	data
>22144	ExpressionStatement	 
>22145	CallExpression	data . m_camera . SetPosition ( data . m_drop_pt )
>22146	ArgumentList	data . m_drop_pt
>22147	Argument	data . m_drop_pt
>22148	MemberAccess	data . m_drop_pt
>22149	Identifier	m_drop_pt
>22150	Identifier	data
>22151	Callee	data . m_camera . SetPosition
>22152	MemberAccess	data . m_camera . SetPosition
>22153	Identifier	SetPosition
>22154	MemberAccess	data . m_camera
>22155	Identifier	m_camera
>22156	Identifier	data
>22157	ExpressionStatement	 
>22158	AssignmentExpr	data . m_drop_pt [ 2 ] = camera_new -> t [ 2 ]
>22159	ArrayIndexing	camera_new -> t [ 2 ]
>22160	PrimaryExpression	2
>22161	PtrMemberAccess	camera_new -> t
>22162	Identifier	t
>22163	Identifier	camera_new
>22164	ArrayIndexing	data . m_drop_pt [ 2 ]
>22165	PrimaryExpression	2
>22166	MemberAccess	data . m_drop_pt
>22167	Identifier	m_drop_pt
>22168	Identifier	data
>22169	ExpressionStatement	 
>22170	AssignmentExpr	data . m_drop_pt [ 1 ] = camera_new -> t [ 1 ]
>22171	ArrayIndexing	camera_new -> t [ 1 ]
>22172	PrimaryExpression	1
>22173	PtrMemberAccess	camera_new -> t
>22174	Identifier	t
>22175	Identifier	camera_new
>22176	ArrayIndexing	data . m_drop_pt [ 1 ]
>22177	PrimaryExpression	1
>22178	MemberAccess	data . m_drop_pt
>22179	Identifier	m_drop_pt
>22180	Identifier	data
>22181	ExpressionStatement	 
>22182	AssignmentExpr	data . m_drop_pt [ 0 ] = camera_new -> t [ 0 ]
>22183	ArrayIndexing	camera_new -> t [ 0 ]
>22184	PrimaryExpression	0
>22185	PtrMemberAccess	camera_new -> t
>22186	Identifier	t
>22187	Identifier	camera_new
>22188	ArrayIndexing	data . m_drop_pt [ 0 ]
>22189	PrimaryExpression	0
>22190	MemberAccess	data . m_drop_pt
>22191	Identifier	m_drop_pt
>22192	Identifier	data
>22193	ExpressionStatement	 
>22194	CallExpression	memcpy ( data . m_camera . m_R , camera_new -> R , 9 * sizeof ( double ) )
>22195	ArgumentList	data . m_camera . m_R
>22196	Argument	9 * sizeof ( double )
>22197	MultiplicativeExpression	9 * sizeof ( double )
>22198	SizeofExpr	sizeof ( double )
>22199	SizeofOperand	double
>22200	Sizeof	sizeof
>22201	PrimaryExpression	9
>22202	Argument	camera_new -> R
>22203	PtrMemberAccess	camera_new -> R
>22204	Identifier	R
>22205	Identifier	camera_new
>22206	Argument	data . m_camera . m_R
>22207	MemberAccess	data . m_camera . m_R
>22208	Identifier	m_R
>22209	MemberAccess	data . m_camera
>22210	Identifier	m_camera
>22211	Identifier	data
>22212	Callee	memcpy
>22213	Identifier	memcpy
>22214	ExpressionStatement	 
>22215	AssignmentExpr	data . m_camera . m_adjusted = true
>22216	Identifier	true
>22217	MemberAccess	data . m_camera . m_adjusted
>22218	Identifier	m_adjusted
>22219	MemberAccess	data . m_camera
>22220	Identifier	m_camera
>22221	Identifier	data
>22222	ExpressionStatement	 
>22223	CallExpression	img_write_bmp_file ( data . m_img , \"projs.bmp\" )
>22224	ArgumentList	data . m_img
>22225	Argument	\"projs.bmp\"
>22226	PrimaryExpression	\"projs.bmp\"
>22227	Argument	data . m_img
>22228	MemberAccess	data . m_img
>22229	Identifier	m_img
>22230	Identifier	data
>22231	Callee	img_write_bmp_file
>22232	Identifier	img_write_bmp_file
>22233	ForStatement	for ( int i = 0 ; i < num_points_final ; i ++ )
>22234	CompoundStatement	 
>22235	ExpressionStatement	 
>22236	CallExpression	img_draw_pt ( data . m_img , iround ( Vx ( projs_final [ i ] ) + 0.5 * data . GetWidth ( ) ) , iround ( Vy ( projs_\
>22237	ArgumentList	data . m_img
>22238	Argument	0x0
>22239	PrimaryExpression	0x0
>22240	Argument	0x0
>22241	PrimaryExpression	0x0
>22242	Argument	0xff
>22243	PrimaryExpression	0xff
>22244	Argument	6
>22245	PrimaryExpression	6
>22246	Argument	iround ( Vy ( projs_final [ i ] ) + 0.5 * data . GetHeight ( ) )
>22247	CallExpression	iround ( Vy ( projs_final [ i ] ) + 0.5 * data . GetHeight ( ) )
>22248	ArgumentList	Vy ( projs_final [ i ] ) + 0.5 * data . GetHeight ( )
>22249	Argument	Vy ( projs_final [ i ] ) + 0.5 * data . GetHeight ( )
>22250	AdditiveExpression	Vy ( projs_final [ i ] ) + 0.5 * data . GetHeight ( )
>22251	MultiplicativeExpression	0.5 * data . GetHeight ( )
>22252	CallExpression	data . GetHeight ( )
>22253	ArgumentList	 
>22254	Callee	data . GetHeight
>22255	MemberAccess	data . GetHeight
>22256	Identifier	GetHeight
>22257	Identifier	data
>22258	PrimaryExpression	0.5
>22259	CallExpression	Vy ( projs_final [ i ] )
>22260	ArgumentList	projs_final [ i ]
>22261	Argument	projs_final [ i ]
>22262	ArrayIndexing	projs_final [ i ]
>22263	Identifier	i
>22264	Identifier	projs_final
>22265	Callee	Vy
>22266	Identifier	Vy
>22267	Callee	iround
>22268	Identifier	iround
>22269	Argument	iround ( Vx ( projs_final [ i ] ) + 0.5 * data . GetWidth ( ) )
>22270	CallExpression	iround ( Vx ( projs_final [ i ] ) + 0.5 * data . GetWidth ( ) )
>22271	ArgumentList	Vx ( projs_final [ i ] ) + 0.5 * data . GetWidth ( )
>22272	Argument	Vx ( projs_final [ i ] ) + 0.5 * data . GetWidth ( )
>22273	AdditiveExpression	Vx ( projs_final [ i ] ) + 0.5 * data . GetWidth ( )
>22274	MultiplicativeExpression	0.5 * data . GetWidth ( )
>22275	CallExpression	data . GetWidth ( )
>22276	ArgumentList	 
>22277	Callee	data . GetWidth
>22278	MemberAccess	data . GetWidth
>22279	Identifier	GetWidth
>22280	Identifier	data
>22281	PrimaryExpression	0.5
>22282	CallExpression	Vx ( projs_final [ i ] )
>22283	ArgumentList	projs_final [ i ]
>22284	Argument	projs_final [ i ]
>22285	ArrayIndexing	projs_final [ i ]
>22286	Identifier	i
>22287	Identifier	projs_final
>22288	Callee	Vx
>22289	Identifier	Vx
>22290	Callee	iround
>22291	Identifier	iround
>22292	Argument	data . m_img
>22293	MemberAccess	data . m_img
>22294	Identifier	m_img
>22295	Identifier	data
>22296	Callee	img_draw_pt
>22297	Identifier	img_draw_pt
>22298	IncDecOp	 
>22299	IncDec	++
>22300	Identifier	i
>22301	Condition	 
>22302	RelationalExpression	i < num_points_final
>22303	Identifier	num_points_final
>22304	Identifier	i
>22305	ForInit	 
>22306	IdentifierDeclStatement	int i = 0 ;
>22307	IdentifierDecl	i = 0
>22308	AssignmentExpr	i = 0
>22309	PrimaryExpression	0
>22310	Identifier	i
>22311	Identifier	i
>22312	IdentifierDeclType	int
>22313	ExpressionStatement	 
>22314	CallExpression	data . LoadImage ( )
>22315	ArgumentList	 
>22316	Callee	data . LoadImage
>22317	MemberAccess	data . LoadImage
>22318	Identifier	LoadImage
>22319	Identifier	data
>22320	ExpressionStatement	 
>22321	CallExpression	fflush ( stdout )
>22322	ArgumentList	stdout
>22323	Argument	stdout
>22324	Identifier	stdout
>22325	Callee	fflush
>22326	Identifier	fflush
>22327	ExpressionStatement	 
>22328	CallExpression	matrix_print ( 1 , 3 , camera_new -> t )
>22329	ArgumentList	1
>22330	Argument	camera_new -> t
>22331	PtrMemberAccess	camera_new -> t
>22332	Identifier	t
>22333	Identifier	camera_new
>22334	Argument	3
>22335	PrimaryExpression	3
>22336	Argument	1
>22337	PrimaryExpression	1
>22338	Callee	matrix_print
>22339	Identifier	matrix_print
>22340	ExpressionStatement	 
>22341	CallExpression	printf ( \"t
>22342	ArgumentList	\"t
>22343	Argument	\"t
>22344	PrimaryExpression	\"t
>22345	Callee	printf
>22346	Identifier	printf
>22347	ExpressionStatement	 
>22348	CallExpression	matrix_print ( 3 , 3 , camera_new -> R )
>22349	ArgumentList	3
>22350	Argument	camera_new -> R
>22351	PtrMemberAccess	camera_new -> R
>22352	Identifier	R
>22353	Identifier	camera_new
>22354	Argument	3
>22355	PrimaryExpression	3
>22356	Argument	3
>22357	PrimaryExpression	3
>22358	Callee	matrix_print
>22359	Identifier	matrix_print
>22360	ExpressionStatement	 
>22361	CallExpression	printf ( \"R
>22362	ArgumentList	\"R
>22363	Argument	\"R
>22364	PrimaryExpression	\"R
>22365	Callee	printf
>22366	Identifier	printf
>22367	ExpressionStatement	 
>22368	CallExpression	printf ( \"f
>22369	ArgumentList	\"f
>22370	Argument	camera_new -> f
>22371	PtrMemberAccess	camera_new -> f
>22372	Identifier	f
>22373	Identifier	camera_new
>22374	Argument	\"f
>22375	PrimaryExpression	\"f
>22376	Callee	printf
>22377	Identifier	printf
>22378	ExpressionStatement	 
>22379	CallExpression	printf ( \"[BundleRegisterImage] Final camera parameters
>22380	ArgumentList	\"[BundleRegisterImage] Final camera parameters
>22381	Argument	\"[BundleRegisterImage] Final camera parameters
>22382	PrimaryExpression	\"[BundleRegisterImage] Final camera parameters
>22383	Callee	printf
>22384	Identifier	printf
>22385	Condition	 
>22386	RelationalExpression	num_inliers >= MIN_INLIERS_ADD_IMAGE
>22387	Identifier	MIN_INLIERS_ADD_IMAGE
>22388	Identifier	num_inliers
>22389	CompoundStatement	 
>22390	ExpressionStatement	 
>22391	Statement	 
>22392	Statement	 
>22393	Statement	 
>22394	Statement	 
>22395	Statement	 
>22396	Statement	 
>22397	Statement	 
>22398	Statement	 
>22399	Statement	 
>22400	Condition	 
>22401	RelationalExpression	num_inliers < 0.5 * num_points_final
>22402	MultiplicativeExpression	0.5 * num_points_final
>22403	Identifier	num_points_final
>22404	PrimaryExpression	0.5
>22405	Identifier	num_inliers
>22406	Statement	 
>22407	Statement	 
>22408	Statement	 
>22409	ExpressionStatement	 
>22410	AssignmentExpr	success = false
>22411	Identifier	false
>22412	Identifier	success
>22413	IdentifierDeclStatement	 
>22414	IdentifierDecl	num_inliers = ( int ) inliers_final . size ( )
>22415	AssignmentExpr	num_inliers = ( int ) inliers_final . size ( )
>22416	CastExpression	( int ) inliers_final . size ( )
>22417	CallExpression	inliers_final . size ( )
>22418	ArgumentList	 
>22419	Callee	inliers_final . size
>22420	MemberAccess	inliers_final . size
>22421	Identifier	size
>22422	Identifier	inliers_final
>22423	CastTarget	int
>22424	Identifier	num_inliers
>22425	Identifier	num_inliers
>22426	IdentifierDeclType	int
>22427	ExpressionStatement	 
>22428	AssignmentExpr	inliers_final = RefineCameraParameters ( data , num_points_final , points_final , projs_final , NULL , \
>22429	CallExpression	RefineCameraParameters ( data , num_points_final , points_final , projs_final , NULL , camera_new , NULL , ! m_fixed_\
>22430	ArgumentList	data
>22431	Argument	m_max_proj_error_threshold
>22432	Identifier	m_max_proj_error_threshold
>22433	Argument	m_min_proj_error_threshold
>22434	Identifier	m_min_proj_error_threshold
>22435	Argument	m_estimate_distortion
>22436	Identifier	m_estimate_distortion
>22437	Argument	m_optimize_for_fisheye
>22438	Identifier	m_optimize_for_fisheye
>22439	Argument	true
>22440	Identifier	true
>22441	Argument	! m_fixed_focal_length
>22442	UnaryOp	! m_fixed_focal_length
>22443	Identifier	m_fixed_focal_length
>22444	UnaryOperator	!
>22445	Argument	NULL
>22446	Identifier	NULL
>22447	Argument	camera_new
>22448	Identifier	camera_new
>22449	Argument	NULL
>22450	Identifier	NULL
>22451	Argument	projs_final
>22452	Identifier	projs_final
>22453	Argument	points_final
>22454	Identifier	points_final
>22455	Argument	num_points_final
>22456	Identifier	num_points_final
>22457	Argument	data
>22458	Identifier	data
>22459	Callee	RefineCameraParameters
>22460	Identifier	RefineCameraParameters
>22461	Identifier	inliers_final
>22462	IdentifierDeclStatement	 
>22463	IdentifierDecl	inliers_final
>22464	Identifier	inliers_final
>22465	IdentifierDeclType	std 
>22466	ForStatement	for ( int i = 0 ; i < num_points_final ; i ++ )
>22467	CompoundStatement	 
>22468	ExpressionStatement	 
>22469	AssignmentExpr	projs_final [ i ] = projs_solve [ inliers_weak [ i ] ]
>22470	ArrayIndexing	projs_solve [ inliers_weak [ i ] ]
>22471	ArrayIndexing	inliers_weak [ i ]
>22472	Identifier	i
>22473	Identifier	inliers_weak
>22474	Identifier	projs_solve
>22475	ArrayIndexing	projs_final [ i ]
>22476	Identifier	i
>22477	Identifier	projs_final
>22478	ExpressionStatement	 
>22479	AssignmentExpr	points_final [ i ] = points_solve [ inliers_weak [ i ] ]
>22480	ArrayIndexing	points_solve [ inliers_weak [ i ] ]
>22481	ArrayIndexing	inliers_weak [ i ]
>22482	Identifier	i
>22483	Identifier	inliers_weak
>22484	Identifier	points_solve
>22485	ArrayIndexing	points_final [ i ]
>22486	Identifier	i
>22487	Identifier	points_final
>22488	IncDecOp	 
>22489	IncDec	++
>22490	Identifier	i
>22491	Condition	 
>22492	RelationalExpression	i < num_points_final
>22493	Identifier	num_points_final
>22494	Identifier	i
>22495	ForInit	 
>22496	IdentifierDeclStatement	int i = 0 ;
>22497	IdentifierDecl	i = 0
>22498	AssignmentExpr	i = 0
>22499	PrimaryExpression	0
>22500	Identifier	i
>22501	Identifier	i
>22502	IdentifierDeclType	int
>22503	IdentifierDeclStatement	 
>22504	IdentifierDecl	* projs_final = new v2_t [ num_points_final ]
>22505	AssignmentExpr	* projs_final = new v2_t [ num_points_final ]
>22506	Identifier	num_points_final
>22507	Identifier	num_points_final
>22508	Identifier	projs_final
>22509	IdentifierDeclType	v2_t *
>22510	IdentifierDeclStatement	 
>22511	IdentifierDecl	* points_final = new v3_t [ num_points_final ]
>22512	AssignmentExpr	* points_final = new v3_t [ num_points_final ]
>22513	Identifier	num_points_final
>22514	Identifier	num_points_final
>22515	Identifier	points_final
>22516	IdentifierDeclType	v3_t *
>22517	IdentifierDeclStatement	 
>22518	IdentifierDecl	num_points_final = ( int ) inliers_weak . size ( )
>22519	AssignmentExpr	num_points_final = ( int ) inliers_weak . size ( )
>22520	CastExpression	( int ) inliers_weak . size ( )
>22521	CallExpression	inliers_weak . size ( )
>22522	ArgumentList	 
>22523	Callee	inliers_weak . size
>22524	MemberAccess	inliers_weak . size
>22525	Identifier	size
>22526	Identifier	inliers_weak
>22527	CastTarget	int
>22528	Identifier	num_points_final
>22529	Identifier	num_points_final
>22530	IdentifierDeclType	int
>22531	ExpressionStatement	 
>22532	CallExpression	printf ( \"[BundleRegisterImage] Adjusting [%d,%d]...\n\" , ( int ) inliers . size ( ) , ( int ) inliers_weak . size ( ) )
>22533	ArgumentList	\"[BundleRegisterImage] Adjusting [%d,%d]...\n\"
>22534	Argument	( int ) inliers_weak . size ( )
>22535	CastExpression	( int ) inliers_weak . size ( )
>22536	CallExpression	inliers_weak . size ( )
>22537	ArgumentList	 
>22538	Callee	inliers_weak . size
>22539	MemberAccess	inliers_weak . size
>22540	Identifier	size
>22541	Identifier	inliers_weak
>22542	CastTarget	int
>22543	Argument	( int ) inliers . size ( )
>22544	CastExpression	( int ) inliers . size ( )
>22545	CallExpression	inliers . size ( )
>22546	ArgumentList	 
>22547	Callee	inliers . size
>22548	MemberAccess	inliers . size
>22549	Identifier	size
>22550	Identifier	inliers
>22551	CastTarget	int
>22552	Argument	\"[BundleRegisterImage] Adjusting [%d,%d]...\n\"
>22553	PrimaryExpression	\"[BundleRegisterImage] Adjusting [%d,%d]...\n\"
>22554	Callee	printf
>22555	Identifier	printf
>22556	IfStatement	if ( success )
>22557	ElseStatement	else
>22558	CompoundStatement	 
>22559	ReturnStatement	 
>22560	Identifier	false
>22561	ExpressionStatement	 
>22562	Identifier	keys_solve
>22563	Statement	 
>22564	Statement	 
>22565	Statement	 
>22566	ExpressionStatement	 
>22567	Identifier	idxs_solve
>22568	Statement	 
>22569	Statement	 
>22570	Statement	 
>22571	ExpressionStatement	 
>22572	Identifier	projs_solve
>22573	Statement	 
>22574	Statement	 
>22575	Statement	 
>22576	ExpressionStatement	 
>22577	Identifier	points_solve
>22578	Statement	 
>22579	Statement	 
>22580	Statement	 
>22581	ExpressionStatement	 
>22582	Identifier	camera_new
>22583	Statement	 
>22584	CompoundStatement	 
>22585	IfStatement	if ( m_fixed_focal_length )
>22586	ElseStatement	else
>22587	CompoundStatement	 
>22588	IfStatement	if ( m_use_focal_estimate )
>22589	ElseStatement	else
>22590	IfStatement	if ( data . m_has_init_focal )
>22591	ElseStatement	else
>22592	CompoundStatement	 
>22593	ExpressionStatement	 
>22594	AssignmentExpr	camera_new -> f = m_init_focal_length
>22595	Identifier	m_init_focal_length
>22596	PtrMemberAccess	camera_new -> f
>22597	Identifier	f
>22598	Identifier	camera_new
>22599	CompoundStatement	 
>22600	ExpressionStatement	 
>22601	AssignmentExpr	camera_new -> f = data . m_init_focal
>22602	MemberAccess	data . m_init_focal
>22603	Identifier	m_init_focal
>22604	Identifier	data
>22605	PtrMemberAccess	camera_new -> f
>22606	Identifier	f
>22607	Identifier	camera_new
>22608	Condition	 
>22609	MemberAccess	data . m_has_init_focal
>22610	Identifier	m_has_init_focal
>22611	Identifier	data
>22612	CompoundStatement	 
>22613	IfStatement	if ( data . m_has_init_focal )
>22614	ElseStatement	else
>22615	CompoundStatement	 
>22616	ExpressionStatement	 
>22617	AssignmentExpr	camera_new -> f = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>22618	MultiplicativeExpression	0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>22619	AdditiveExpression	Kinit [ 0 ] + Kinit [ 4 ]
>22620	ArrayIndexing	Kinit [ 4 ]
>22621	PrimaryExpression	4
>22622	Identifier	Kinit
>22623	ArrayIndexing	Kinit [ 0 ]
>22624	PrimaryExpression	0
>22625	Identifier	Kinit
>22626	PrimaryExpression	0.5
>22627	PtrMemberAccess	camera_new -> f
>22628	Identifier	f
>22629	Identifier	camera_new
>22630	CompoundStatement	 
>22631	IfStatement	if ( ratio < 1.4 || m_trust_focal_estimate )
>22632	ElseStatement	else
>22633	CompoundStatement	 
>22634	ExpressionStatement	 
>22635	AssignmentExpr	camera_new -> f = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>22636	MultiplicativeExpression	0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>22637	AdditiveExpression	Kinit [ 0 ] + Kinit [ 4 ]
>22638	ArrayIndexing	Kinit [ 4 ]
>22639	PrimaryExpression	4
>22640	Identifier	Kinit
>22641	ArrayIndexing	Kinit [ 0 ]
>22642	PrimaryExpression	0
>22643	Identifier	Kinit
>22644	PrimaryExpression	0.5
>22645	PtrMemberAccess	camera_new -> f
>22646	Identifier	f
>22647	Identifier	camera_new
>22648	ExpressionStatement	 
>22649	Statement	 
>22650	Statement	 
>22651	Statement	 
>22652	Statement	 
>22653	Statement	 
>22654	Statement	 
>22655	Statement	 
>22656	Statement	 
>22657	CompoundStatement	 
>22658	IfStatement	if ( m_constrain_focal )
>22659	ExpressionStatement	 
>22660	CallExpression	SetFocalConstraint ( data , camera_new )
>22661	ArgumentList	data
>22662	Argument	camera_new
>22663	Identifier	camera_new
>22664	Argument	data
>22665	Identifier	data
>22666	Callee	SetFocalConstraint
>22667	Identifier	SetFocalConstraint
>22668	Condition	 
>22669	Identifier	m_constrain_focal
>22670	ExpressionStatement	 
>22671	AssignmentExpr	camera_new -> f = init
>22672	Identifier	init
>22673	PtrMemberAccess	camera_new -> f
>22674	Identifier	f
>22675	Identifier	camera_new
>22676	Condition	 
>22677	OrExpression	ratio < 1.4 || m_trust_focal_estimate
>22678	Identifier	m_trust_focal_estimate
>22679	RelationalExpression	ratio < 1.4
>22680	PrimaryExpression	1.4
>22681	Identifier	ratio
>22682	IfStatement	if ( init > obs )
>22683	ElseStatement	else
>22684	ExpressionStatement	 
>22685	AssignmentExpr	ratio = obs / init
>22686	MultiplicativeExpression	obs / init
>22687	Identifier	init
>22688	Identifier	obs
>22689	Identifier	ratio
>22690	ExpressionStatement	 
>22691	AssignmentExpr	ratio = init / obs
>22692	MultiplicativeExpression	init / obs
>22693	Identifier	obs
>22694	Identifier	init
>22695	Identifier	ratio
>22696	Condition	 
>22697	RelationalExpression	init > obs
>22698	Identifier	obs
>22699	Identifier	init
>22700	ExpressionStatement	 
>22701	Statement	 
>22702	Statement	 
>22703	Statement	 
>22704	Statement	 
>22705	Statement	 
>22706	Statement	 
>22707	Statement	 
>22708	IdentifierDeclStatement	 
>22709	IdentifierDecl	obs = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>22710	AssignmentExpr	obs = 0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>22711	MultiplicativeExpression	0.5 * ( Kinit [ 0 ] + Kinit [ 4 ] )
>22712	AdditiveExpression	Kinit [ 0 ] + Kinit [ 4 ]
>22713	ArrayIndexing	Kinit [ 4 ]
>22714	PrimaryExpression	4
>22715	Identifier	Kinit
>22716	ArrayIndexing	Kinit [ 0 ]
>22717	PrimaryExpression	0
>22718	Identifier	Kinit
>22719	PrimaryExpression	0.5
>22720	Identifier	obs
>22721	Identifier	obs
>22722	IdentifierDeclType	double
>22723	IdentifierDeclStatement	 
>22724	IdentifierDecl	init = data . m_init_focal
>22725	AssignmentExpr	init = data . m_init_focal
>22726	MemberAccess	data . m_init_focal
>22727	Identifier	m_init_focal
>22728	Identifier	data
>22729	Identifier	init
>22730	Identifier	init
>22731	IdentifierDeclType	double
>22732	IdentifierDeclStatement	 
>22733	IdentifierDecl	ratio
>22734	Identifier	ratio
>22735	IdentifierDeclType	double
>22736	Condition	 
>22737	MemberAccess	data . m_has_init_focal
>22738	Identifier	m_has_init_focal
>22739	Identifier	data
>22740	Condition	 
>22741	Identifier	m_use_focal_estimate
>22742	CompoundStatement	 
>22743	ExpressionStatement	 
>22744	AssignmentExpr	camera_new -> f = m_init_focal_length
>22745	Identifier	m_init_focal_length
>22746	PtrMemberAccess	camera_new -> f
>22747	Identifier	f
>22748	Identifier	camera_new
>22749	Condition	 
>22750	Identifier	m_fixed_focal_length
>22751	ExpressionStatement	 
>22752	CallExpression	matrix_scale ( 3 , 1 , camera_new -> t , - 1.0 , camera_new -> t )
>22753	ArgumentList	3
>22754	Argument	camera_new -> t
>22755	PtrMemberAccess	camera_new -> t
>22756	Identifier	t
>22757	Identifier	camera_new
>22758	Argument	- 1.0
>22759	UnaryOp	- 1.0
>22760	PrimaryExpression	1.0
>22761	UnaryOperator	-
>22762	Argument	camera_new -> t
>22763	PtrMemberAccess	camera_new -> t
>22764	Identifier	t
>22765	Identifier	camera_new
>22766	Argument	1
>22767	PrimaryExpression	1
>22768	Argument	3
>22769	PrimaryExpression	3
>22770	Callee	matrix_scale
>22771	Identifier	matrix_scale
>22772	ExpressionStatement	 
>22773	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , Rinit , tinit , camera_new -> t )
>22774	ArgumentList	3
>22775	Argument	camera_new -> t
>22776	PtrMemberAccess	camera_new -> t
>22777	Identifier	t
>22778	Identifier	camera_new
>22779	Argument	tinit
>22780	Identifier	tinit
>22781	Argument	Rinit
>22782	Identifier	Rinit
>22783	Argument	1
>22784	PrimaryExpression	1
>22785	Argument	3
>22786	PrimaryExpression	3
>22787	Argument	3
>22788	PrimaryExpression	3
>22789	Argument	3
>22790	PrimaryExpression	3
>22791	Callee	matrix_transpose_product
>22792	Identifier	matrix_transpose_product
>22793	ExpressionStatement	 
>22794	CallExpression	memcpy ( camera_new -> R , Rinit , 9 * sizeof ( double ) )
>22795	ArgumentList	camera_new -> R
>22796	Argument	9 * sizeof ( double )
>22797	MultiplicativeExpression	9 * sizeof ( double )
>22798	SizeofExpr	sizeof ( double )
>22799	SizeofOperand	double
>22800	Sizeof	sizeof
>22801	PrimaryExpression	9
>22802	Argument	Rinit
>22803	Identifier	Rinit
>22804	Argument	camera_new -> R
>22805	PtrMemberAccess	camera_new -> R
>22806	Identifier	R
>22807	Identifier	camera_new
>22808	Callee	memcpy
>22809	Identifier	memcpy
>22810	Condition	 
>22811	Identifier	success
>22812	ExpressionStatement	 
>22813	CallExpression	ClearCameraConstraints ( camera_new )
>22814	ArgumentList	camera_new
>22815	Argument	camera_new
>22816	Identifier	camera_new
>22817	Callee	ClearCameraConstraints
>22818	Identifier	ClearCameraConstraints
>22819	IdentifierDeclStatement	 
>22820	IdentifierDecl	success = FindAndVerifyCamera ( num_pts_solve , points_solve , projs_solve , idxs_solve , Kinit , Rinit , tinit , \
>22821	AssignmentExpr	success = FindAndVerifyCamera ( num_pts_solve , points_solve , projs_solve , idxs_solve , Kinit , Rinit , \
>22822	CallExpression	FindAndVerifyCamera ( num_pts_solve , points_solve , projs_solve , idxs_solve , Kinit , Rinit , tinit , m_projection_\
>22823	ArgumentList	num_pts_solve
>22824	Argument	outliers
>22825	Identifier	outliers
>22826	Argument	inliers_weak
>22827	Identifier	inliers_weak
>22828	Argument	inliers
>22829	Identifier	inliers
>22830	Argument	2.0 * m_projection_estimation_threshold
>22831	MultiplicativeExpression	2.0 * m_projection_estimation_threshold
>22832	Identifier	m_projection_estimation_threshold
>22833	PrimaryExpression	2.0
>22834	Argument	m_projection_estimation_threshold
>22835	Identifier	m_projection_estimation_threshold
>22836	Argument	tinit
>22837	Identifier	tinit
>22838	Argument	Rinit
>22839	Identifier	Rinit
>22840	Argument	Kinit
>22841	Identifier	Kinit
>22842	Argument	idxs_solve
>22843	Identifier	idxs_solve
>22844	Argument	projs_solve
>22845	Identifier	projs_solve
>22846	Argument	points_solve
>22847	Identifier	points_solve
>22848	Argument	num_pts_solve
>22849	Identifier	num_pts_solve
>22850	Callee	FindAndVerifyCamera
>22851	Identifier	FindAndVerifyCamera
>22852	Identifier	success
>22853	Identifier	success
>22854	IdentifierDeclType	bool
>22855	IdentifierDeclStatement	 
>22856	IdentifierDecl	outliers
>22857	Identifier	outliers
>22858	IdentifierDeclType	std 
>22859	IdentifierDecl	inliers_weak
>22860	Identifier	inliers_weak
>22861	IdentifierDeclType	std 
>22862	IdentifierDecl	inliers
>22863	Identifier	inliers
>22864	IdentifierDeclType	std 
>22865	IdentifierDeclStatement	 
>22866	IdentifierDecl	tinit [ 3 ]
>22867	PrimaryExpression	3
>22868	Identifier	tinit
>22869	IdentifierDeclType	double [ 3 ]
>22870	IdentifierDecl	Rinit [ 9 ]
>22871	PrimaryExpression	9
>22872	Identifier	Rinit
>22873	IdentifierDeclType	double [ 9 ]
>22874	IdentifierDecl	Kinit [ 9 ]
>22875	PrimaryExpression	9
>22876	Identifier	Kinit
>22877	IdentifierDeclType	double [ 9 ]
>22878	ExpressionStatement	 
>22879	CallExpression	ClearCameraConstraints ( camera_new )
>22880	ArgumentList	camera_new
>22881	Argument	camera_new
>22882	Identifier	camera_new
>22883	Callee	ClearCameraConstraints
>22884	Identifier	ClearCameraConstraints
>22885	ExpressionStatement	 
>22886	CallExpression	InitializeCameraParams ( data , * camera_new )
>22887	ArgumentList	data
>22888	Argument	* camera_new
>22889	UnaryOp	* camera_new
>22890	Identifier	camera_new
>22891	UnaryOperator	*
>22892	Argument	data
>22893	Identifier	data
>22894	Callee	InitializeCameraParams
>22895	Identifier	InitializeCameraParams
>22896	ExpressionStatement	 
>22897	Identifier	camera_params_t
>22898	Statement	 
>22899	Statement	 
>22900	Statement	 
>22901	Statement	 
>22902	Statement	 
>22903	ExpressionStatement	 
>22904	CallExpression	printf ( \"[BundleRegisterImage] Initializing camera...\n\" )
>22905	ArgumentList	\"[BundleRegisterImage] Initializing camera...\n\"
>22906	Argument	\"[BundleRegisterImage] Initializing camera...\n\"
>22907	PrimaryExpression	\"[BundleRegisterImage] Initializing camera...\n\"
>22908	Callee	printf
>22909	Identifier	printf
>22910	IfStatement	if ( init_location )
>22911	ElseStatement	else
>22912	CompoundStatement	 
>22913	ForStatement	for ( int i = 0 ; i < num_pts_solve ; i ++ )
>22914	CompoundStatement	 
>22915	ExpressionStatement	 
>22916	AssignmentExpr	idxs_solve [ i ] = pt_idx
>22917	Identifier	pt_idx
>22918	ArrayIndexing	idxs_solve [ i ]
>22919	Identifier	i
>22920	Identifier	idxs_solve
>22921	ExpressionStatement	 
>22922	AssignmentExpr	keys_solve [ i ] = key_idx
>22923	Identifier	key_idx
>22924	ArrayIndexing	keys_solve [ i ]
>22925	Identifier	i
>22926	Identifier	keys_solve
>22927	IfStatement	if ( m_optimize_for_fisheye )
>22928	ElseStatement	else
>22929	CompoundStatement	 
>22930	ExpressionStatement	 
>22931	AssignmentExpr	projs_solve [ i ] = v2_new ( data . m_keys_desc [ key_idx ] . m_x , data . m_keys_desc [ key_idx ] . \
>22932	CallExpression	v2_new ( data . m_keys_desc [ key_idx ] . m_x , data . m_keys_desc [ key_idx ] . m_y )
>22933	ArgumentList	data . m_keys_desc [ key_idx ] . m_x
>22934	Argument	data . m_keys_desc [ key_idx ] . m_y
>22935	MemberAccess	data . m_keys_desc [ key_idx ] . m_y
>22936	Identifier	m_y
>22937	ArrayIndexing	data . m_keys_desc [ key_idx ]
>22938	Identifier	key_idx
>22939	MemberAccess	data . m_keys_desc
>22940	Identifier	m_keys_desc
>22941	Identifier	data
>22942	Argument	data . m_keys_desc [ key_idx ] . m_x
>22943	MemberAccess	data . m_keys_desc [ key_idx ] . m_x
>22944	Identifier	m_x
>22945	ArrayIndexing	data . m_keys_desc [ key_idx ]
>22946	Identifier	key_idx
>22947	MemberAccess	data . m_keys_desc
>22948	Identifier	m_keys_desc
>22949	Identifier	data
>22950	Callee	v2_new
>22951	Identifier	v2_new
>22952	ArrayIndexing	projs_solve [ i ]
>22953	Identifier	i
>22954	Identifier	projs_solve
>22955	CompoundStatement	 
>22956	ExpressionStatement	 
>22957	AssignmentExpr	projs_solve [ i ] = v2_new ( x_u , y_u )
>22958	CallExpression	v2_new ( x_u , y_u )
>22959	ArgumentList	x_u
>22960	Argument	y_u
>22961	Identifier	y_u
>22962	Argument	x_u
>22963	Identifier	x_u
>22964	Callee	v2_new
>22965	Identifier	v2_new
>22966	ArrayIndexing	projs_solve [ i ]
>22967	Identifier	i
>22968	Identifier	projs_solve
>22969	ExpressionStatement	 
>22970	CallExpression	data . UndistortPoint ( x , y , x_u , y_u )
>22971	ArgumentList	x
>22972	Argument	y_u
>22973	Identifier	y_u
>22974	Argument	x_u
>22975	Identifier	x_u
>22976	Argument	y
>22977	Identifier	y
>22978	Argument	x
>22979	Identifier	x
>22980	Callee	data . UndistortPoint
>22981	MemberAccess	data . UndistortPoint
>22982	Identifier	UndistortPoint
>22983	Identifier	data
>22984	IdentifierDeclStatement	 
>22985	IdentifierDecl	y_u
>22986	Identifier	y_u
>22987	IdentifierDeclType	double
>22988	IdentifierDecl	x_u
>22989	Identifier	x_u
>22990	IdentifierDeclType	double
>22991	IdentifierDeclStatement	 
>22992	IdentifierDecl	y = data . m_keys_desc [ key_idx ] . m_y
>22993	AssignmentExpr	y = data . m_keys_desc [ key_idx ] . m_y
>22994	MemberAccess	data . m_keys_desc [ key_idx ] . m_y
>22995	Identifier	m_y
>22996	ArrayIndexing	data . m_keys_desc [ key_idx ]
>22997	Identifier	key_idx
>22998	MemberAccess	data . m_keys_desc
>22999	Identifier	m_keys_desc
>23000	Identifier	data
>23001	Identifier	y
>23002	Identifier	y
>23003	IdentifierDeclType	double
>23004	IdentifierDeclStatement	 
>23005	IdentifierDecl	x = data . m_keys_desc [ key_idx ] . m_x
>23006	AssignmentExpr	x = data . m_keys_desc [ key_idx ] . m_x
>23007	MemberAccess	data . m_keys_desc [ key_idx ] . m_x
>23008	Identifier	m_x
>23009	ArrayIndexing	data . m_keys_desc [ key_idx ]
>23010	Identifier	key_idx
>23011	MemberAccess	data . m_keys_desc
>23012	Identifier	m_keys_desc
>23013	Identifier	data
>23014	Identifier	x
>23015	Identifier	x
>23016	IdentifierDeclType	double
>23017	Condition	 
>23018	Identifier	m_optimize_for_fisheye
>23019	ExpressionStatement	 
>23020	AssignmentExpr	points_solve [ i ] = v3_new ( pt . m_pos [ 0 ] , pt . m_pos [ 1 ] , pt . m_pos [ 2 ] )
>23021	CallExpression	v3_new ( pt . m_pos [ 0 ] , pt . m_pos [ 1 ] , pt . m_pos [ 2 ] )
>23022	ArgumentList	pt . m_pos [ 0 ]
>23023	Argument	pt . m_pos [ 2 ]
>23024	ArrayIndexing	pt . m_pos [ 2 ]
>23025	PrimaryExpression	2
>23026	MemberAccess	pt . m_pos
>23027	Identifier	m_pos
>23028	Identifier	pt
>23029	Argument	pt . m_pos [ 1 ]
>23030	ArrayIndexing	pt . m_pos [ 1 ]
>23031	PrimaryExpression	1
>23032	MemberAccess	pt . m_pos
>23033	Identifier	m_pos
>23034	Identifier	pt
>23035	Argument	pt . m_pos [ 0 ]
>23036	ArrayIndexing	pt . m_pos [ 0 ]
>23037	PrimaryExpression	0
>23038	MemberAccess	pt . m_pos
>23039	Identifier	m_pos
>23040	Identifier	pt
>23041	Callee	v3_new
>23042	Identifier	v3_new
>23043	ArrayIndexing	points_solve [ i ]
>23044	Identifier	i
>23045	Identifier	points_solve
>23046	IdentifierDeclStatement	 
>23047	IdentifierDecl	& pt = m_point_data [ pt_idx ]
>23048	AssignmentExpr	& pt = m_point_data [ pt_idx ]
>23049	ArrayIndexing	m_point_data [ pt_idx ]
>23050	Identifier	pt_idx
>23051	Identifier	m_point_data
>23052	Identifier	pt
>23053	Identifier	pt
>23054	IdentifierDeclType	const PointData &
>23055	IdentifierDeclStatement	 
>23056	IdentifierDecl	pt_idx = matches [ i ] . m_idx2
>23057	AssignmentExpr	pt_idx = matches [ i ] . m_idx2
>23058	MemberAccess	matches [ i ] . m_idx2
>23059	Identifier	m_idx2
>23060	ArrayIndexing	matches [ i ]
>23061	Identifier	i
>23062	Identifier	matches
>23063	Identifier	pt_idx
>23064	Identifier	pt_idx
>23065	IdentifierDeclType	int
>23066	IdentifierDeclStatement	 
>23067	IdentifierDecl	key_idx = matches [ i ] . m_idx1
>23068	AssignmentExpr	key_idx = matches [ i ] . m_idx1
>23069	MemberAccess	matches [ i ] . m_idx1
>23070	Identifier	m_idx1
>23071	ArrayIndexing	matches [ i ]
>23072	Identifier	i
>23073	Identifier	matches
>23074	Identifier	key_idx
>23075	Identifier	key_idx
>23076	IdentifierDeclType	int
>23077	IncDecOp	 
>23078	IncDec	++
>23079	Identifier	i
>23080	Condition	 
>23081	RelationalExpression	i < num_pts_solve
>23082	Identifier	num_pts_solve
>23083	Identifier	i
>23084	ForInit	 
>23085	IdentifierDeclStatement	int i = 0 ;
>23086	IdentifierDecl	i = 0
>23087	AssignmentExpr	i = 0
>23088	PrimaryExpression	0
>23089	Identifier	i
>23090	Identifier	i
>23091	IdentifierDeclType	int
>23092	ExpressionStatement	 
>23093	AssignmentExpr	keys_solve = new int [ num_pts_solve ]
>23094	Identifier	num_pts_solve
>23095	Identifier	keys_solve
>23096	ExpressionStatement	 
>23097	AssignmentExpr	idxs_solve = new int [ num_pts_solve ]
>23098	Identifier	num_pts_solve
>23099	Identifier	idxs_solve
>23100	ExpressionStatement	 
>23101	AssignmentExpr	projs_solve = new v2_t [ num_pts_solve ]
>23102	Identifier	num_pts_solve
>23103	Identifier	projs_solve
>23104	ExpressionStatement	 
>23105	AssignmentExpr	points_solve = new v3_t [ num_pts_solve ]
>23106	Identifier	num_pts_solve
>23107	Identifier	points_solve
>23108	ExpressionStatement	 
>23109	Identifier	keys_solve
>23110	Statement	 
>23111	Statement	 
>23112	Statement	 
>23113	ExpressionStatement	 
>23114	Identifier	idxs_solve
>23115	Statement	 
>23116	Statement	 
>23117	Statement	 
>23118	ExpressionStatement	 
>23119	Identifier	projs_solve
>23120	Statement	 
>23121	Statement	 
>23122	Statement	 
>23123	ExpressionStatement	 
>23124	Identifier	points_solve
>23125	Statement	 
>23126	Statement	 
>23127	Statement	 
>23128	ExpressionStatement	 
>23129	CallExpression	printf ( \"[BundleRegisterImage] Found %d matches\n\" , num_pts_solve )
>23130	ArgumentList	\"[BundleRegisterImage] Found %d matches\n\"
>23131	Argument	num_pts_solve
>23132	Identifier	num_pts_solve
>23133	Argument	\"[BundleRegisterImage] Found %d matches\n\"
>23134	PrimaryExpression	\"[BundleRegisterImage] Found %d matches\n\"
>23135	Callee	printf
>23136	Identifier	printf
>23137	ExpressionStatement	 
>23138	AssignmentExpr	num_pts_solve = ( int ) matches . size ( )
>23139	CastExpression	( int ) matches . size ( )
>23140	CallExpression	matches . size ( )
>23141	ArgumentList	 
>23142	Callee	matches . size
>23143	MemberAccess	matches . size
>23144	Identifier	size
>23145	Identifier	matches
>23146	CastTarget	int
>23147	Identifier	num_pts_solve
>23148	ExpressionStatement	 
>23149	AssignmentExpr	matches = RemoveDuplicateMatches ( matches )
>23150	CallExpression	RemoveDuplicateMatches ( matches )
>23151	ArgumentList	matches
>23152	Argument	matches
>23153	Identifier	matches
>23154	Callee	RemoveDuplicateMatches
>23155	Identifier	RemoveDuplicateMatches
>23156	Identifier	matches
>23157	IdentifierDeclStatement	 
>23158	IdentifierDecl	matches = MatchKeysToPoints ( data . m_keys , 0.6 )
>23159	AssignmentExpr	matches = MatchKeysToPoints ( data . m_keys , 0.6 )
>23160	CallExpression	MatchKeysToPoints ( data . m_keys , 0.6 )
>23161	ArgumentList	data . m_keys
>23162	Argument	0.6
>23163	PrimaryExpression	0.6
>23164	Argument	data . m_keys
>23165	MemberAccess	data . m_keys
>23166	Identifier	m_keys
>23167	Identifier	data
>23168	Callee	MatchKeysToPoints
>23169	Identifier	MatchKeysToPoints
>23170	Identifier	matches
>23171	Identifier	matches
>23172	IdentifierDeclType	std 
>23173	CompoundStatement	 
>23174	ExpressionStatement	 
>23175	Identifier	tree
>23176	Statement	 
>23177	ExpressionStatement	 
>23178	Identifier	saw
>23179	Statement	 
>23180	Statement	 
>23181	Statement	 
>23182	ExpressionStatement	 
>23183	CallExpression	fflush ( stdout )
>23184	ArgumentList	stdout
>23185	Argument	stdout
>23186	Identifier	stdout
>23187	Callee	fflush
>23188	Identifier	fflush
>23189	ForStatement	for ( int i = 0 ; i < NUM_NNS ; i ++ )
>23190	CompoundStatement	 
>23191	ForStatement	for ( int j = 0 ; j < ( int ) match_lists [ i ] . size ( ) ; j ++ )
>23192	CompoundStatement	 
>23193	IfStatement	if ( GetKey ( other , idx2 ) . m_extra < 0 )
>23194	ElseStatement	else
>23195	CompoundStatement	 
>23196	ExpressionStatement	 
>23197	IncDecOp	num_pts_solve ++
>23198	IncDec	++
>23199	Identifier	num_pts_solve
>23200	ExpressionStatement	 
>23201	AssignmentExpr	keys_solve [ num_pts_solve ] = idx1
>23202	Identifier	idx1
>23203	ArrayIndexing	keys_solve [ num_pts_solve ]
>23204	Identifier	num_pts_solve
>23205	Identifier	keys_solve
>23206	ExpressionStatement	 
>23207	AssignmentExpr	idxs_solve [ num_pts_solve ] = pt_idx
>23208	Identifier	pt_idx
>23209	ArrayIndexing	idxs_solve [ num_pts_solve ]
>23210	Identifier	num_pts_solve
>23211	Identifier	idxs_solve
>23212	IfStatement	if ( m_optimize_for_fisheye )
>23213	ElseStatement	else
>23214	CompoundStatement	 
>23215	ExpressionStatement	 
>23216	AssignmentExpr	projs_solve [ num_pts_solve ] = v2_new ( data . m_keys_desc [ idx1 ] . m_x , data . m_keys_desc [ idx1 ] \
>23217	CallExpression	v2_new ( data . m_keys_desc [ idx1 ] . m_x , data . m_keys_desc [ idx1 ] . m_y )
>23218	ArgumentList	data . m_keys_desc [ idx1 ] . m_x
>23219	Argument	data . m_keys_desc [ idx1 ] . m_y
>23220	MemberAccess	data . m_keys_desc [ idx1 ] . m_y
>23221	Identifier	m_y
>23222	ArrayIndexing	data . m_keys_desc [ idx1 ]
>23223	Identifier	idx1
>23224	MemberAccess	data . m_keys_desc
>23225	Identifier	m_keys_desc
>23226	Identifier	data
>23227	Argument	data . m_keys_desc [ idx1 ] . m_x
>23228	MemberAccess	data . m_keys_desc [ idx1 ] . m_x
>23229	Identifier	m_x
>23230	ArrayIndexing	data . m_keys_desc [ idx1 ]
>23231	Identifier	idx1
>23232	MemberAccess	data . m_keys_desc
>23233	Identifier	m_keys_desc
>23234	Identifier	data
>23235	Callee	v2_new
>23236	Identifier	v2_new
>23237	ArrayIndexing	projs_solve [ num_pts_solve ]
>23238	Identifier	num_pts_solve
>23239	Identifier	projs_solve
>23240	CompoundStatement	 
>23241	ExpressionStatement	 
>23242	AssignmentExpr	projs_solve [ num_pts_solve ] = v2_new ( x_u , y_u )
>23243	CallExpression	v2_new ( x_u , y_u )
>23244	ArgumentList	x_u
>23245	Argument	y_u
>23246	Identifier	y_u
>23247	Argument	x_u
>23248	Identifier	x_u
>23249	Callee	v2_new
>23250	Identifier	v2_new
>23251	ArrayIndexing	projs_solve [ num_pts_solve ]
>23252	Identifier	num_pts_solve
>23253	Identifier	projs_solve
>23254	ExpressionStatement	 
>23255	CallExpression	m_image_data [ idx1 ] . UndistortPoint ( x , y , x_u , y_u )
>23256	ArgumentList	x
>23257	Argument	y_u
>23258	Identifier	y_u
>23259	Argument	x_u
>23260	Identifier	x_u
>23261	Argument	y
>23262	Identifier	y
>23263	Argument	x
>23264	Identifier	x
>23265	Callee	m_image_data [ idx1 ] . UndistortPoint
>23266	MemberAccess	m_image_data [ idx1 ] . UndistortPoint
>23267	Identifier	UndistortPoint
>23268	ArrayIndexing	m_image_data [ idx1 ]
>23269	Identifier	idx1
>23270	Identifier	m_image_data
>23271	IdentifierDeclStatement	 
>23272	IdentifierDecl	y_u
>23273	Identifier	y_u
>23274	IdentifierDeclType	double
>23275	IdentifierDecl	x_u
>23276	Identifier	x_u
>23277	IdentifierDeclType	double
>23278	IdentifierDeclStatement	 
>23279	IdentifierDecl	y = data . m_keys_desc [ idx1 ] . m_y
>23280	AssignmentExpr	y = data . m_keys_desc [ idx1 ] . m_y
>23281	MemberAccess	data . m_keys_desc [ idx1 ] . m_y
>23282	Identifier	m_y
>23283	ArrayIndexing	data . m_keys_desc [ idx1 ]
>23284	Identifier	idx1
>23285	MemberAccess	data . m_keys_desc
>23286	Identifier	m_keys_desc
>23287	Identifier	data
>23288	Identifier	y
>23289	Identifier	y
>23290	IdentifierDeclType	double
>23291	IdentifierDeclStatement	 
>23292	IdentifierDecl	x = data . m_keys_desc [ idx1 ] . m_x
>23293	AssignmentExpr	x = data . m_keys_desc [ idx1 ] . m_x
>23294	MemberAccess	data . m_keys_desc [ idx1 ] . m_x
>23295	Identifier	m_x
>23296	ArrayIndexing	data . m_keys_desc [ idx1 ]
>23297	Identifier	idx1
>23298	MemberAccess	data . m_keys_desc
>23299	Identifier	m_keys_desc
>23300	Identifier	data
>23301	Identifier	x
>23302	Identifier	x
>23303	IdentifierDeclType	double
>23304	Condition	 
>23305	Identifier	m_optimize_for_fisheye
>23306	ExpressionStatement	 
>23307	AssignmentExpr	points_solve [ num_pts_solve ] = v3_new ( pt [ 0 ] , pt [ 1 ] , pt [ 2 ] )
>23308	CallExpression	v3_new ( pt [ 0 ] , pt [ 1 ] , pt [ 2 ] )
>23309	ArgumentList	pt [ 0 ]
>23310	Argument	pt [ 2 ]
>23311	ArrayIndexing	pt [ 2 ]
>23312	PrimaryExpression	2
>23313	Identifier	pt
>23314	Argument	pt [ 1 ]
>23315	ArrayIndexing	pt [ 1 ]
>23316	PrimaryExpression	1
>23317	Identifier	pt
>23318	Argument	pt [ 0 ]
>23319	ArrayIndexing	pt [ 0 ]
>23320	PrimaryExpression	0
>23321	Identifier	pt
>23322	Callee	v3_new
>23323	Identifier	v3_new
>23324	ArrayIndexing	points_solve [ num_pts_solve ]
>23325	Identifier	num_pts_solve
>23326	Identifier	points_solve
>23327	IdentifierDeclStatement	 
>23328	IdentifierDecl	* pt = m_point_data [ pt_idx ] . m_pos
>23329	AssignmentExpr	* pt = m_point_data [ pt_idx ] . m_pos
>23330	MemberAccess	m_point_data [ pt_idx ] . m_pos
>23331	Identifier	m_pos
>23332	ArrayIndexing	m_point_data [ pt_idx ]
>23333	Identifier	pt_idx
>23334	Identifier	m_point_data
>23335	Identifier	pt
>23336	Identifier	pt
>23337	IdentifierDeclType	double *
>23338	ExpressionStatement	 
>23339	AssignmentExpr	data . m_keys_desc [ idx1 ] . m_extra = pt_idx
>23340	Identifier	pt_idx
>23341	MemberAccess	data . m_keys_desc [ idx1 ] . m_extra
>23342	Identifier	m_extra
>23343	ArrayIndexing	data . m_keys_desc [ idx1 ]
>23344	Identifier	idx1
>23345	MemberAccess	data . m_keys_desc
>23346	Identifier	m_keys_desc
>23347	Identifier	data
>23348	ExpressionStatement	 
>23349	Statement	 
>23350	Statement	 
>23351	Statement	 
>23352	Statement	 
>23353	Statement	 
>23354	Statement	 
>23355	Statement	 
>23356	Statement	 
>23357	Statement	 
>23358	Statement	 
>23359	Statement	 
>23360	Statement	 
>23361	Statement	 
>23362	ExpressionStatement	 
>23363	AssignmentExpr	saw [ pt_idx ] = 1
>23364	PrimaryExpression	1
>23365	ArrayIndexing	saw [ pt_idx ]
>23366	Identifier	pt_idx
>23367	Identifier	saw
>23368	IfStatement	if ( saw [ pt_idx ] == 1 )
>23369	ContinueStatement	 
>23370	Condition	 
>23371	EqualityExpression	saw [ pt_idx ] == 1
>23372	PrimaryExpression	1
>23373	ArrayIndexing	saw [ pt_idx ]
>23374	Identifier	pt_idx
>23375	Identifier	saw
>23376	IdentifierDeclStatement	 
>23377	IdentifierDecl	pt_idx = GetKey ( other , idx2 ) . m_extra
>23378	AssignmentExpr	pt_idx = GetKey ( other , idx2 ) . m_extra
>23379	MemberAccess	GetKey ( other , idx2 ) . m_extra
>23380	Identifier	m_extra
>23381	CallExpression	GetKey ( other , idx2 )
>23382	ArgumentList	other
>23383	Argument	idx2
>23384	Identifier	idx2
>23385	Argument	other
>23386	Identifier	other
>23387	Callee	GetKey
>23388	Identifier	GetKey
>23389	Identifier	pt_idx
>23390	Identifier	pt_idx
>23391	IdentifierDeclType	int
>23392	CompoundStatement	 
>23393	ContinueStatement	 
>23394	Condition	 
>23395	RelationalExpression	GetKey ( other , idx2 ) . m_extra < 0
>23396	PrimaryExpression	0
>23397	MemberAccess	GetKey ( other , idx2 ) . m_extra
>23398	Identifier	m_extra
>23399	CallExpression	GetKey ( other , idx2 )
>23400	ArgumentList	other
>23401	Argument	idx2
>23402	Identifier	idx2
>23403	Argument	other
>23404	Identifier	other
>23405	Callee	GetKey
>23406	Identifier	GetKey
>23407	IdentifierDeclStatement	 
>23408	IdentifierDecl	idx2 = match_lists [ i ] [ j ] . m_idx2
>23409	AssignmentExpr	idx2 = match_lists [ i ] [ j ] . m_idx2
>23410	MemberAccess	match_lists [ i ] [ j ] . m_idx2
>23411	Identifier	m_idx2
>23412	ArrayIndexing	match_lists [ i ] [ j ]
>23413	Identifier	j
>23414	ArrayIndexing	match_lists [ i ]
>23415	Identifier	i
>23416	Identifier	match_lists
>23417	Identifier	idx2
>23418	Identifier	idx2
>23419	IdentifierDeclType	int
>23420	IdentifierDeclStatement	 
>23421	IdentifierDecl	idx1 = match_lists [ i ] [ j ] . m_idx1
>23422	AssignmentExpr	idx1 = match_lists [ i ] [ j ] . m_idx1
>23423	MemberAccess	match_lists [ i ] [ j ] . m_idx1
>23424	Identifier	m_idx1
>23425	ArrayIndexing	match_lists [ i ] [ j ]
>23426	Identifier	j
>23427	ArrayIndexing	match_lists [ i ]
>23428	Identifier	i
>23429	Identifier	match_lists
>23430	Identifier	idx1
>23431	Identifier	idx1
>23432	IdentifierDeclType	int
>23433	IncDecOp	 
>23434	IncDec	++
>23435	Identifier	j
>23436	Condition	 
>23437	RelationalExpression	j < ( int ) match_lists [ i ] . size ( )
>23438	CastExpression	( int ) match_lists [ i ] . size ( )
>23439	CallExpression	match_lists [ i ] . size ( )
>23440	ArgumentList	 
>23441	Callee	match_lists [ i ] . size
>23442	MemberAccess	match_lists [ i ] . size
>23443	Identifier	size
>23444	ArrayIndexing	match_lists [ i ]
>23445	Identifier	i
>23446	Identifier	match_lists
>23447	CastTarget	int
>23448	Identifier	j
>23449	ForInit	 
>23450	IdentifierDeclStatement	int j = 0 ;
>23451	IdentifierDecl	j = 0
>23452	AssignmentExpr	j = 0
>23453	PrimaryExpression	0
>23454	Identifier	j
>23455	Identifier	j
>23456	IdentifierDeclType	int
>23457	IdentifierDeclStatement	 
>23458	IdentifierDecl	other = GetRegisteredCameraIndex ( nn_idxs [ i ] )
>23459	AssignmentExpr	other = GetRegisteredCameraIndex ( nn_idxs [ i ] )
>23460	CallExpression	GetRegisteredCameraIndex ( nn_idxs [ i ] )
>23461	ArgumentList	nn_idxs [ i ]
>23462	Argument	nn_idxs [ i ]
>23463	ArrayIndexing	nn_idxs [ i ]
>23464	Identifier	i
>23465	Identifier	nn_idxs
>23466	Callee	GetRegisteredCameraIndex
>23467	Identifier	GetRegisteredCameraIndex
>23468	Identifier	other
>23469	Identifier	other
>23470	IdentifierDeclType	int
>23471	IncDecOp	 
>23472	IncDec	++
>23473	Identifier	i
>23474	Condition	 
>23475	RelationalExpression	i < NUM_NNS
>23476	Identifier	NUM_NNS
>23477	Identifier	i
>23478	ForInit	 
>23479	IdentifierDeclStatement	int i = 0 ;
>23480	IdentifierDecl	i = 0
>23481	AssignmentExpr	i = 0
>23482	PrimaryExpression	0
>23483	Identifier	i
>23484	Identifier	i
>23485	IdentifierDeclType	int
>23486	ExpressionStatement	 
>23487	Statement	 
>23488	Statement	 
>23489	Statement	 
>23490	Statement	 
>23491	Statement	 
>23492	ForStatement	for ( int i = 0 ; i < curr_num_pts ; i ++ )
>23493	CompoundStatement	 
>23494	ExpressionStatement	 
>23495	AssignmentExpr	saw [ i ] = 0
>23496	PrimaryExpression	0
>23497	ArrayIndexing	saw [ i ]
>23498	Identifier	i
>23499	Identifier	saw
>23500	IncDecOp	 
>23501	IncDec	++
>23502	Identifier	i
>23503	Condition	 
>23504	RelationalExpression	i < curr_num_pts
>23505	Identifier	curr_num_pts
>23506	Identifier	i
>23507	ForInit	 
>23508	IdentifierDeclStatement	int i = 0 ;
>23509	IdentifierDecl	i = 0
>23510	AssignmentExpr	i = 0
>23511	PrimaryExpression	0
>23512	Identifier	i
>23513	Identifier	i
>23514	IdentifierDeclType	int
>23515	IdentifierDeclStatement	 
>23516	IdentifierDecl	* saw = new int [ curr_num_pts ]
>23517	AssignmentExpr	* saw = new int [ curr_num_pts ]
>23518	Identifier	curr_num_pts
>23519	Identifier	curr_num_pts
>23520	Identifier	saw
>23521	IdentifierDeclType	int *
>23522	IdentifierDeclStatement	 
>23523	IdentifierDecl	curr_num_pts = ( int ) m_point_data . size ( )
>23524	AssignmentExpr	curr_num_pts = ( int ) m_point_data . size ( )
>23525	CastExpression	( int ) m_point_data . size ( )
>23526	CallExpression	m_point_data . size ( )
>23527	ArgumentList	 
>23528	Callee	m_point_data . size
>23529	MemberAccess	m_point_data . size
>23530	Identifier	size
>23531	Identifier	m_point_data
>23532	CastTarget	int
>23533	Identifier	curr_num_pts
>23534	Identifier	curr_num_pts
>23535	IdentifierDeclType	int
>23536	ForStatement	for ( int i = 0 ; i < NUM_NNS ; i ++ )
>23537	CompoundStatement	 
>23538	ExpressionStatement	 
>23539	CallExpression	fflush ( stdout )
>23540	ArgumentList	stdout
>23541	Argument	stdout
>23542	Identifier	stdout
>23543	Callee	fflush
>23544	Identifier	fflush
>23545	ExpressionStatement	 
>23546	CallExpression	match_lists . push_back ( new_matches )
>23547	ArgumentList	new_matches
>23548	Argument	new_matches
>23549	Identifier	new_matches
>23550	Callee	match_lists . push_back
>23551	MemberAccess	match_lists . push_back
>23552	Identifier	push_back
>23553	Identifier	match_lists
>23554	ForStatement	for ( int i = 0 ; i < num_inliers ; i ++ )
>23555	CompoundStatement	 
>23556	ExpressionStatement	 
>23557	CallExpression	new_matches . push_back ( matches [ inliers [ i ] ] )
>23558	ArgumentList	matches [ inliers [ i ] ]
>23559	Argument	matches [ inliers [ i ] ]
>23560	ArrayIndexing	matches [ inliers [ i ] ]
>23561	ArrayIndexing	inliers [ i ]
>23562	Identifier	i
>23563	Identifier	inliers
>23564	Identifier	matches
>23565	Callee	new_matches . push_back
>23566	MemberAccess	new_matches . push_back
>23567	Identifier	push_back
>23568	Identifier	new_matches
>23569	IncDecOp	 
>23570	IncDec	++
>23571	Identifier	i
>23572	Condition	 
>23573	RelationalExpression	i < num_inliers
>23574	Identifier	num_inliers
>23575	Identifier	i
>23576	ForInit	 
>23577	IdentifierDeclStatement	int i = 0 ;
>23578	IdentifierDecl	i = 0
>23579	AssignmentExpr	i = 0
>23580	PrimaryExpression	0
>23581	Identifier	i
>23582	Identifier	i
>23583	IdentifierDeclType	int
>23584	IdentifierDeclStatement	 
>23585	IdentifierDecl	new_matches
>23586	Identifier	new_matches
>23587	IdentifierDeclType	KeypointMatchList
>23588	ExpressionStatement	 
>23589	CallExpression	printf ( \"Inliers[%d] = %d out of %d\n\" , cam_idx , num_inliers , ( int ) matches . size ( ) )
>23590	ArgumentList	\"Inliers[%d] = %d out of %d\n\"
>23591	Argument	( int ) matches . size ( )
>23592	CastExpression	( int ) matches . size ( )
>23593	CallExpression	matches . size ( )
>23594	ArgumentList	 
>23595	Callee	matches . size
>23596	MemberAccess	matches . size
>23597	Identifier	size
>23598	Identifier	matches
>23599	CastTarget	int
>23600	Argument	num_inliers
>23601	Identifier	num_inliers
>23602	Argument	cam_idx
>23603	Identifier	cam_idx
>23604	Argument	\"Inliers[%d] = %d out of %d\n\"
>23605	PrimaryExpression	\"Inliers[%d] = %d out of %d\n\"
>23606	Callee	printf
>23607	Identifier	printf
>23608	IdentifierDeclStatement	 
>23609	IdentifierDecl	num_inliers = ( int ) inliers . size ( )
>23610	AssignmentExpr	num_inliers = ( int ) inliers . size ( )
>23611	CastExpression	( int ) inliers . size ( )
>23612	CallExpression	inliers . size ( )
>23613	ArgumentList	 
>23614	Callee	inliers . size
>23615	MemberAccess	inliers . size
>23616	Identifier	size
>23617	Identifier	inliers
>23618	CastTarget	int
>23619	Identifier	num_inliers
>23620	Identifier	num_inliers
>23621	IdentifierDeclType	int
>23622	IdentifierDeclStatement	 
>23623	IdentifierDecl	inliers = EstimateFMatrix ( data . m_keys_desc , m_image_data [ cam_idx ] . m_keys_desc , matches , m_fmatrix_rounds , \
>23624	AssignmentExpr	inliers = EstimateFMatrix ( data . m_keys_desc , m_image_data [ cam_idx ] . m_keys_desc , matches , m_\
>23625	CallExpression	EstimateFMatrix ( data . m_keys_desc , m_image_data [ cam_idx ] . m_keys_desc , matches , m_fmatrix_rounds , m_fmatrix_\
>23626	ArgumentList	data . m_keys_desc
>23627	Argument	F
>23628	Identifier	F
>23629	Argument	m_fmatrix_threshold
>23630	Identifier	m_fmatrix_threshold
>23631	Argument	m_fmatrix_rounds
>23632	Identifier	m_fmatrix_rounds
>23633	Argument	matches
>23634	Identifier	matches
>23635	Argument	m_image_data [ cam_idx ] . m_keys_desc
>23636	MemberAccess	m_image_data [ cam_idx ] . m_keys_desc
>23637	Identifier	m_keys_desc
>23638	ArrayIndexing	m_image_data [ cam_idx ]
>23639	Identifier	cam_idx
>23640	Identifier	m_image_data
>23641	Argument	data . m_keys_desc
>23642	MemberAccess	data . m_keys_desc
>23643	Identifier	m_keys_desc
>23644	Identifier	data
>23645	Callee	EstimateFMatrix
>23646	Identifier	EstimateFMatrix
>23647	Identifier	inliers
>23648	Identifier	inliers
>23649	IdentifierDeclType	std 
>23650	IdentifierDeclStatement	 
>23651	IdentifierDecl	F [ 9 ]
>23652	PrimaryExpression	9
>23653	Identifier	F
>23654	IdentifierDeclType	double [ 9 ]
>23655	ExpressionStatement	 
>23656	CallExpression	printf ( \"Found %d matches [after pruning]\n\" , ( int ) matches . size ( ) )
>23657	ArgumentList	\"Found %d matches [after pruning]\n\"
>23658	Argument	( int ) matches . size ( )
>23659	CastExpression	( int ) matches . size ( )
>23660	CallExpression	matches . size ( )
>23661	ArgumentList	 
>23662	Callee	matches . size
>23663	MemberAccess	matches . size
>23664	Identifier	size
>23665	Identifier	matches
>23666	CastTarget	int
>23667	Argument	\"Found %d matches [after pruning]\n\"
>23668	PrimaryExpression	\"Found %d matches [after pruning]\n\"
>23669	Callee	printf
>23670	Identifier	printf
>23671	ExpressionStatement	 
>23672	AssignmentExpr	matches = RemoveDuplicateMatches ( matches )
>23673	CallExpression	RemoveDuplicateMatches ( matches )
>23674	ArgumentList	matches
>23675	Argument	matches
>23676	Identifier	matches
>23677	Callee	RemoveDuplicateMatches
>23678	Identifier	RemoveDuplicateMatches
>23679	Identifier	matches
>23680	ExpressionStatement	 
>23681	CallExpression	printf ( \"Found %d matches [before pruning]\n\" , ( int ) matches . size ( ) )
>23682	ArgumentList	\"Found %d matches [before pruning]\n\"
>23683	Argument	( int ) matches . size ( )
>23684	CastExpression	( int ) matches . size ( )
>23685	CallExpression	matches . size ( )
>23686	ArgumentList	 
>23687	Callee	matches . size
>23688	MemberAccess	matches . size
>23689	Identifier	size
>23690	Identifier	matches
>23691	CastTarget	int
>23692	Argument	\"Found %d matches [before pruning]\n\"
>23693	PrimaryExpression	\"Found %d matches [before pruning]\n\"
>23694	Callee	printf
>23695	Identifier	printf
>23696	ExpressionStatement	 
>23697	AssignmentExpr	matches = matches_new
>23698	Identifier	matches_new
>23699	Identifier	matches
>23700	ForStatement	for ( int j = 0 ; j < ( int ) matches . size ( ) ; j ++ )
>23701	CompoundStatement	 
>23702	ExpressionStatement	 
>23703	CallExpression	matches_new . push_back ( matches [ j ] )
>23704	ArgumentList	matches [ j ]
>23705	Argument	matches [ j ]
>23706	ArrayIndexing	matches [ j ]
>23707	Identifier	j
>23708	Identifier	matches
>23709	Callee	matches_new . push_back
>23710	MemberAccess	matches_new . push_back
>23711	Identifier	push_back
>23712	Identifier	matches_new
>23713	IfStatement	if ( matches_sym [ idx2 ] . m_idx2 != idx1 )
>23714	ContinueStatement	 
>23715	Condition	 
>23716	EqualityExpression	matches_sym [ idx2 ] . m_idx2 != idx1
>23717	Identifier	idx1
>23718	MemberAccess	matches_sym [ idx2 ] . m_idx2
>23719	Identifier	m_idx2
>23720	ArrayIndexing	matches_sym [ idx2 ]
>23721	Identifier	idx2
>23722	Identifier	matches_sym
>23723	IdentifierDeclStatement	 
>23724	IdentifierDecl	idx2 = matches [ j ] . m_idx2
>23725	AssignmentExpr	idx2 = matches [ j ] . m_idx2
>23726	MemberAccess	matches [ j ] . m_idx2
>23727	Identifier	m_idx2
>23728	ArrayIndexing	matches [ j ]
>23729	Identifier	j
>23730	Identifier	matches
>23731	Identifier	idx2
>23732	Identifier	idx2
>23733	IdentifierDeclType	int
>23734	IdentifierDeclStatement	 
>23735	IdentifierDecl	idx1 = matches [ j ] . m_idx1
>23736	AssignmentExpr	idx1 = matches [ j ] . m_idx1
>23737	MemberAccess	matches [ j ] . m_idx1
>23738	Identifier	m_idx1
>23739	ArrayIndexing	matches [ j ]
>23740	Identifier	j
>23741	Identifier	matches
>23742	Identifier	idx1
>23743	Identifier	idx1
>23744	IdentifierDeclType	int
>23745	IncDecOp	 
>23746	IncDec	++
>23747	Identifier	j
>23748	Condition	 
>23749	RelationalExpression	j < ( int ) matches . size ( )
>23750	CastExpression	( int ) matches . size ( )
>23751	CallExpression	matches . size ( )
>23752	ArgumentList	 
>23753	Callee	matches . size
>23754	MemberAccess	matches . size
>23755	Identifier	size
>23756	Identifier	matches
>23757	CastTarget	int
>23758	Identifier	j
>23759	ForInit	 
>23760	IdentifierDeclStatement	int j = 0 ;
>23761	IdentifierDecl	j = 0
>23762	AssignmentExpr	j = 0
>23763	PrimaryExpression	0
>23764	Identifier	j
>23765	Identifier	j
>23766	IdentifierDeclType	int
>23767	IdentifierDeclStatement	 
>23768	IdentifierDecl	matches_new
>23769	Identifier	matches_new
>23770	IdentifierDeclType	KeypointMatchList
>23771	IfStatement	if ( matches_sym . size ( ) != m_image_data [ cam_idx ] . m_keys_desc . size ( ) )
>23772	ExpressionStatement	 
>23773	CallExpression	printf ( \"Error
>23774	ArgumentList	\"Error
>23775	Argument	\"Error
>23776	PrimaryExpression	\"Error
>23777	Callee	printf
>23778	Identifier	printf
>23779	Condition	 
>23780	EqualityExpression	matches_sym . size ( ) != m_image_data [ cam_idx ] . m_keys_desc . size ( )
>23781	CallExpression	m_image_data [ cam_idx ] . m_keys_desc . size ( )
>23782	ArgumentList	 
>23783	Callee	m_image_data [ cam_idx ] . m_keys_desc . size
>23784	MemberAccess	m_image_data [ cam_idx ] . m_keys_desc . size
>23785	Identifier	size
>23786	MemberAccess	m_image_data [ cam_idx ] . m_keys_desc
>23787	Identifier	m_keys_desc
>23788	ArrayIndexing	m_image_data [ cam_idx ]
>23789	Identifier	cam_idx
>23790	Identifier	m_image_data
>23791	CallExpression	matches_sym . size ( )
>23792	ArgumentList	 
>23793	Callee	matches_sym . size
>23794	MemberAccess	matches_sym . size
>23795	Identifier	size
>23796	Identifier	matches_sym
>23797	ExpressionStatement	 
>23798	AssignmentExpr	matches_sym = MatchKeys ( m_image_data [ cam_idx ] . m_keys_desc , data . m_keys_desc , false , 1.0 )
>23799	CallExpression	MatchKeys ( m_image_data [ cam_idx ] . m_keys_desc , data . m_keys_desc , false , 1.0 )
>23800	ArgumentList	m_image_data [ cam_idx ] . m_keys_desc
>23801	Argument	1.0
>23802	PrimaryExpression	1.0
>23803	Argument	false
>23804	Identifier	false
>23805	Argument	data . m_keys_desc
>23806	MemberAccess	data . m_keys_desc
>23807	Identifier	m_keys_desc
>23808	Identifier	data
>23809	Argument	m_image_data [ cam_idx ] . m_keys_desc
>23810	MemberAccess	m_image_data [ cam_idx ] . m_keys_desc
>23811	Identifier	m_keys_desc
>23812	ArrayIndexing	m_image_data [ cam_idx ]
>23813	Identifier	cam_idx
>23814	Identifier	m_image_data
>23815	Callee	MatchKeys
>23816	Identifier	MatchKeys
>23817	Identifier	matches_sym
>23818	IdentifierDeclStatement	 
>23819	IdentifierDecl	matches_sym
>23820	Identifier	matches_sym
>23821	IdentifierDeclType	KeypointMatchList
>23822	ExpressionStatement	 
>23823	AssignmentExpr	matches = MatchKeys ( data . m_keys_desc , m_image_data [ cam_idx ] . m_keys_desc , true , 0.75 )
>23824	CallExpression	MatchKeys ( data . m_keys_desc , m_image_data [ cam_idx ] . m_keys_desc , true , 0.75 )
>23825	ArgumentList	data . m_keys_desc
>23826	Argument	0.75
>23827	PrimaryExpression	0.75
>23828	Argument	true
>23829	Identifier	true
>23830	Argument	m_image_data [ cam_idx ] . m_keys_desc
>23831	MemberAccess	m_image_data [ cam_idx ] . m_keys_desc
>23832	Identifier	m_keys_desc
>23833	ArrayIndexing	m_image_data [ cam_idx ]
>23834	Identifier	cam_idx
>23835	Identifier	m_image_data
>23836	Argument	data . m_keys_desc
>23837	MemberAccess	data . m_keys_desc
>23838	Identifier	m_keys_desc
>23839	Identifier	data
>23840	Callee	MatchKeys
>23841	Identifier	MatchKeys
>23842	Identifier	matches
>23843	IdentifierDeclStatement	 
>23844	IdentifierDecl	matches
>23845	Identifier	matches
>23846	IdentifierDeclType	KeypointMatchList
>23847	ExpressionStatement	 
>23848	Statement	 
>23849	Statement	 
>23850	Statement	 
>23851	Statement	 
>23852	Statement	 
>23853	Statement	 
>23854	Statement	 
>23855	IdentifierDeclStatement	 
>23856	IdentifierDecl	cam_idx = GetRegisteredCameraIndex ( nn_idxs [ i ] )
>23857	AssignmentExpr	cam_idx = GetRegisteredCameraIndex ( nn_idxs [ i ] )
>23858	CallExpression	GetRegisteredCameraIndex ( nn_idxs [ i ] )
>23859	ArgumentList	nn_idxs [ i ]
>23860	Argument	nn_idxs [ i ]
>23861	ArrayIndexing	nn_idxs [ i ]
>23862	Identifier	i
>23863	Identifier	nn_idxs
>23864	Callee	GetRegisteredCameraIndex
>23865	Identifier	GetRegisteredCameraIndex
>23866	Identifier	cam_idx
>23867	Identifier	cam_idx
>23868	IdentifierDeclType	int
>23869	IncDecOp	 
>23870	IncDec	++
>23871	Identifier	i
>23872	Condition	 
>23873	RelationalExpression	i < NUM_NNS
>23874	Identifier	NUM_NNS
>23875	Identifier	i
>23876	ForInit	 
>23877	IdentifierDeclStatement	int i = 0 ;
>23878	IdentifierDecl	i = 0
>23879	AssignmentExpr	i = 0
>23880	PrimaryExpression	0
>23881	Identifier	i
>23882	Identifier	i
>23883	IdentifierDeclType	int
>23884	IdentifierDeclStatement	 
>23885	IdentifierDecl	match_lists
>23886	Identifier	match_lists
>23887	IdentifierDeclType	std 
>23888	IdentifierDeclStatement	 
>23889	IdentifierDecl	KeypointMatchList
>23890	Identifier	KeypointMatchList
>23891	IdentifierDeclType	std 
>23892	ExpressionStatement	 
>23893	CallExpression	printf ( \"[BundleRegisterImage] Matching images...\n\" )
>23894	ArgumentList	\"[BundleRegisterImage] Matching images...\n\"
>23895	Argument	\"[BundleRegisterImage] Matching images...\n\"
>23896	PrimaryExpression	\"[BundleRegisterImage] Matching images...\n\"
>23897	Callee	printf
>23898	Identifier	printf
>23899	ForStatement	for ( int i = 0 ; i < NUM_NNS ; i ++ )
>23900	CompoundStatement	 
>23901	ForStatement	for ( int j = 0 ; j < num_visible_points ; j ++ )
>23902	CompoundStatement	 
>23903	ForStatement	for ( int k = 0 ; k < num_views ; k ++ )
>23904	CompoundStatement	 
>23905	IfStatement	if ( img == cam_idx )
>23906	CompoundStatement	 
>23907	ExpressionStatement	 
>23908	AssignmentExpr	GetKey ( cam_idx , key_idx ) . m_extra = pt_idx
>23909	Identifier	pt_idx
>23910	MemberAccess	GetKey ( cam_idx , key_idx ) . m_extra
>23911	Identifier	m_extra
>23912	CallExpression	GetKey ( cam_idx , key_idx )
>23913	ArgumentList	cam_idx
>23914	Argument	key_idx
>23915	Identifier	key_idx
>23916	Argument	cam_idx
>23917	Identifier	cam_idx
>23918	Callee	GetKey
>23919	Identifier	GetKey
>23920	IdentifierDeclStatement	 
>23921	IdentifierDecl	key_idx = m_point_data [ pt_idx ] . m_views [ k ] . second
>23922	AssignmentExpr	key_idx = m_point_data [ pt_idx ] . m_views [ k ] . second
>23923	MemberAccess	m_point_data [ pt_idx ] . m_views [ k ] . second
>23924	Identifier	second
>23925	ArrayIndexing	m_point_data [ pt_idx ] . m_views [ k ]
>23926	Identifier	k
>23927	MemberAccess	m_point_data [ pt_idx ] . m_views
>23928	Identifier	m_views
>23929	ArrayIndexing	m_point_data [ pt_idx ]
>23930	Identifier	pt_idx
>23931	Identifier	m_point_data
>23932	Identifier	key_idx
>23933	Identifier	key_idx
>23934	IdentifierDeclType	int
>23935	Condition	 
>23936	EqualityExpression	img == cam_idx
>23937	Identifier	cam_idx
>23938	Identifier	img
>23939	IdentifierDeclStatement	 
>23940	IdentifierDecl	img = m_point_data [ pt_idx ] . m_views [ k ] . first
>23941	AssignmentExpr	img = m_point_data [ pt_idx ] . m_views [ k ] . first
>23942	MemberAccess	m_point_data [ pt_idx ] . m_views [ k ] . first
>23943	Identifier	first
>23944	ArrayIndexing	m_point_data [ pt_idx ] . m_views [ k ]
>23945	Identifier	k
>23946	MemberAccess	m_point_data [ pt_idx ] . m_views
>23947	Identifier	m_views
>23948	ArrayIndexing	m_point_data [ pt_idx ]
>23949	Identifier	pt_idx
>23950	Identifier	m_point_data
>23951	Identifier	img
>23952	Identifier	img
>23953	IdentifierDeclType	int
>23954	IncDecOp	 
>23955	IncDec	++
>23956	Identifier	k
>23957	Condition	 
>23958	RelationalExpression	k < num_views
>23959	Identifier	num_views
>23960	Identifier	k
>23961	ForInit	 
>23962	IdentifierDeclStatement	int k = 0 ;
>23963	IdentifierDecl	k = 0
>23964	AssignmentExpr	k = 0
>23965	PrimaryExpression	0
>23966	Identifier	k
>23967	Identifier	k
>23968	IdentifierDeclType	int
>23969	IdentifierDeclStatement	 
>23970	IdentifierDecl	num_views = m_point_data [ pt_idx ] . m_views . size ( )
>23971	AssignmentExpr	num_views = m_point_data [ pt_idx ] . m_views . size ( )
>23972	CallExpression	m_point_data [ pt_idx ] . m_views . size ( )
>23973	ArgumentList	 
>23974	Callee	m_point_data [ pt_idx ] . m_views . size
>23975	MemberAccess	m_point_data [ pt_idx ] . m_views . size
>23976	Identifier	size
>23977	MemberAccess	m_point_data [ pt_idx ] . m_views
>23978	Identifier	m_views
>23979	ArrayIndexing	m_point_data [ pt_idx ]
>23980	Identifier	pt_idx
>23981	Identifier	m_point_data
>23982	Identifier	num_views
>23983	Identifier	num_views
>23984	IdentifierDeclType	int
>23985	IdentifierDeclStatement	 
>23986	IdentifierDecl	pt_idx = m_image_data [ cam_idx ] . m_visible_points [ j ]
>23987	AssignmentExpr	pt_idx = m_image_data [ cam_idx ] . m_visible_points [ j ]
>23988	ArrayIndexing	m_image_data [ cam_idx ] . m_visible_points [ j ]
>23989	Identifier	j
>23990	MemberAccess	m_image_data [ cam_idx ] . m_visible_points
>23991	Identifier	m_visible_points
>23992	ArrayIndexing	m_image_data [ cam_idx ]
>23993	Identifier	cam_idx
>23994	Identifier	m_image_data
>23995	Identifier	pt_idx
>23996	Identifier	pt_idx
>23997	IdentifierDeclType	int
>23998	IncDecOp	 
>23999	IncDec	++
>24000	Identifier	j
>24001	Condition	 
>24002	RelationalExpression	j < num_visible_points
>24003	Identifier	num_visible_points
>24004	Identifier	j
>24005	ForInit	 
>24006	IdentifierDeclStatement	int j = 0 ;
>24007	IdentifierDecl	j = 0
>24008	AssignmentExpr	j = 0
>24009	PrimaryExpression	0
>24010	Identifier	j
>24011	Identifier	j
>24012	IdentifierDeclType	int
>24013	IdentifierDeclStatement	 
>24014	IdentifierDecl	num_visible_points = m_image_data [ cam_idx ] . m_visible_points . size ( )
>24015	AssignmentExpr	num_visible_points = m_image_data [ cam_idx ] . m_visible_points . size ( )
>24016	CallExpression	m_image_data [ cam_idx ] . m_visible_points . size ( )
>24017	ArgumentList	 
>24018	Callee	m_image_data [ cam_idx ] . m_visible_points . size
>24019	MemberAccess	m_image_data [ cam_idx ] . m_visible_points . size
>24020	Identifier	size
>24021	MemberAccess	m_image_data [ cam_idx ] . m_visible_points
>24022	Identifier	m_visible_points
>24023	ArrayIndexing	m_image_data [ cam_idx ]
>24024	Identifier	cam_idx
>24025	Identifier	m_image_data
>24026	Identifier	num_visible_points
>24027	Identifier	num_visible_points
>24028	IdentifierDeclType	int
>24029	IdentifierDeclStatement	 
>24030	IdentifierDecl	cam_idx = GetRegisteredCameraIndex ( nn_idxs [ i ] )
>24031	AssignmentExpr	cam_idx = GetRegisteredCameraIndex ( nn_idxs [ i ] )
>24032	CallExpression	GetRegisteredCameraIndex ( nn_idxs [ i ] )
>24033	ArgumentList	nn_idxs [ i ]
>24034	Argument	nn_idxs [ i ]
>24035	ArrayIndexing	nn_idxs [ i ]
>24036	Identifier	i
>24037	Identifier	nn_idxs
>24038	Callee	GetRegisteredCameraIndex
>24039	Identifier	GetRegisteredCameraIndex
>24040	Identifier	cam_idx
>24041	Identifier	cam_idx
>24042	IdentifierDeclType	int
>24043	IncDecOp	 
>24044	IncDec	++
>24045	Identifier	i
>24046	Condition	 
>24047	RelationalExpression	i < NUM_NNS
>24048	Identifier	NUM_NNS
>24049	Identifier	i
>24050	ForInit	 
>24051	IdentifierDeclStatement	int i = 0 ;
>24052	IdentifierDecl	i = 0
>24053	AssignmentExpr	i = 0
>24054	PrimaryExpression	0
>24055	Identifier	i
>24056	Identifier	i
>24057	IdentifierDeclType	int
>24058	ExpressionStatement	 
>24059	CallExpression	printf ( \"[BundleRegisterImage] Set point indices...\n\" )
>24060	ArgumentList	\"[BundleRegisterImage] Set point indices...\n\"
>24061	Argument	\"[BundleRegisterImage] Set point indices...\n\"
>24062	PrimaryExpression	\"[BundleRegisterImage] Set point indices...\n\"
>24063	Callee	printf
>24064	Identifier	printf
>24065	ForStatement	for ( int i = 0 ; i < NUM_NNS ; i ++ )
>24066	CompoundStatement	 
>24067	ForStatement	for ( int j = 0 ; j < num_keys2 ; j ++ )
>24068	CompoundStatement	 
>24069	ExpressionStatement	 
>24070	AssignmentExpr	m_image_data [ cam_idx ] . m_keys_desc [ j ] . m_extra = - 1
>24071	UnaryOp	- 1
>24072	PrimaryExpression	1
>24073	UnaryOperator	-
>24074	MemberAccess	m_image_data [ cam_idx ] . m_keys_desc [ j ] . m_extra
>24075	Identifier	m_extra
>24076	ArrayIndexing	m_image_data [ cam_idx ] . m_keys_desc [ j ]
>24077	Identifier	j
>24078	MemberAccess	m_image_data [ cam_idx ] . m_keys_desc
>24079	Identifier	m_keys_desc
>24080	ArrayIndexing	m_image_data [ cam_idx ]
>24081	Identifier	cam_idx
>24082	Identifier	m_image_data
>24083	IncDecOp	 
>24084	IncDec	++
>24085	Identifier	j
>24086	Condition	 
>24087	RelationalExpression	j < num_keys2
>24088	Identifier	num_keys2
>24089	Identifier	j
>24090	ForInit	 
>24091	IdentifierDeclStatement	int j = 0 ;
>24092	IdentifierDecl	j = 0
>24093	AssignmentExpr	j = 0
>24094	PrimaryExpression	0
>24095	Identifier	j
>24096	Identifier	j
>24097	IdentifierDeclType	int
>24098	IdentifierDeclStatement	 
>24099	IdentifierDecl	num_keys2 = ( int ) m_image_data [ cam_idx ] . m_keys . size ( )
>24100	AssignmentExpr	num_keys2 = ( int ) m_image_data [ cam_idx ] . m_keys . size ( )
>24101	CastExpression	( int ) m_image_data [ cam_idx ] . m_keys . size ( )
>24102	CallExpression	m_image_data [ cam_idx ] . m_keys . size ( )
>24103	ArgumentList	 
>24104	Callee	m_image_data [ cam_idx ] . m_keys . size
>24105	MemberAccess	m_image_data [ cam_idx ] . m_keys . size
>24106	Identifier	size
>24107	MemberAccess	m_image_data [ cam_idx ] . m_keys
>24108	Identifier	m_keys
>24109	ArrayIndexing	m_image_data [ cam_idx ]
>24110	Identifier	cam_idx
>24111	Identifier	m_image_data
>24112	CastTarget	int
>24113	Identifier	num_keys2
>24114	Identifier	num_keys2
>24115	IdentifierDeclType	int
>24116	ExpressionStatement	 
>24117	CallExpression	m_image_data [ cam_idx ] . LoadKeys ( true , ! m_optimize_for_fisheye )
>24118	ArgumentList	true
>24119	Argument	! m_optimize_for_fisheye
>24120	UnaryOp	! m_optimize_for_fisheye
>24121	Identifier	m_optimize_for_fisheye
>24122	UnaryOperator	!
>24123	Argument	true
>24124	Identifier	true
>24125	Callee	m_image_data [ cam_idx ] . LoadKeys
>24126	MemberAccess	m_image_data [ cam_idx ] . LoadKeys
>24127	Identifier	LoadKeys
>24128	ArrayIndexing	m_image_data [ cam_idx ]
>24129	Identifier	cam_idx
>24130	Identifier	m_image_data
>24131	ExpressionStatement	 
>24132	CallExpression	printf ( \"NN[%d] = %d\n\" , i , cam_idx )
>24133	ArgumentList	\"NN[%d] = %d\n\"
>24134	Argument	cam_idx
>24135	Identifier	cam_idx
>24136	Argument	i
>24137	Identifier	i
>24138	Argument	\"NN[%d] = %d\n\"
>24139	PrimaryExpression	\"NN[%d] = %d\n\"
>24140	Callee	printf
>24141	Identifier	printf
>24142	IdentifierDeclStatement	 
>24143	IdentifierDecl	cam_idx = GetRegisteredCameraIndex ( nn_idxs [ i ] )
>24144	AssignmentExpr	cam_idx = GetRegisteredCameraIndex ( nn_idxs [ i ] )
>24145	CallExpression	GetRegisteredCameraIndex ( nn_idxs [ i ] )
>24146	ArgumentList	nn_idxs [ i ]
>24147	Argument	nn_idxs [ i ]
>24148	ArrayIndexing	nn_idxs [ i ]
>24149	Identifier	i
>24150	Identifier	nn_idxs
>24151	Callee	GetRegisteredCameraIndex
>24152	Identifier	GetRegisteredCameraIndex
>24153	Identifier	cam_idx
>24154	Identifier	cam_idx
>24155	IdentifierDeclType	int
>24156	IncDecOp	 
>24157	IncDec	++
>24158	Identifier	i
>24159	Condition	 
>24160	RelationalExpression	i < NUM_NNS
>24161	Identifier	NUM_NNS
>24162	Identifier	i
>24163	ForInit	 
>24164	IdentifierDeclStatement	int i = 0 ;
>24165	IdentifierDecl	i = 0
>24166	AssignmentExpr	i = 0
>24167	PrimaryExpression	0
>24168	Identifier	i
>24169	Identifier	i
>24170	IdentifierDeclType	int
>24171	ExpressionStatement	 
>24172	CallExpression	printf ( \"[BundleRegisterImage] Initializing indices...\n\" )
>24173	ArgumentList	\"[BundleRegisterImage] Initializing indices...\n\"
>24174	Argument	\"[BundleRegisterImage] Initializing indices...\n\"
>24175	PrimaryExpression	\"[BundleRegisterImage] Initializing indices...\n\"
>24176	Callee	printf
>24177	Identifier	printf
>24178	ExpressionStatement	 
>24179	CallExpression	tree -> annkPriSearch ( query , NUM_NNS , nn_idxs , dists , 0.0 )
>24180	ArgumentList	query
>24181	Argument	0.0
>24182	PrimaryExpression	0.0
>24183	Argument	dists
>24184	Identifier	dists
>24185	Argument	nn_idxs
>24186	Identifier	nn_idxs
>24187	Argument	NUM_NNS
>24188	Identifier	NUM_NNS
>24189	Argument	query
>24190	Identifier	query
>24191	Callee	tree -> annkPriSearch
>24192	PtrMemberAccess	tree -> annkPriSearch
>24193	Identifier	annkPriSearch
>24194	Identifier	tree
>24195	IdentifierDeclStatement	 
>24196	IdentifierDecl	query [ 3 ] = { Vx ( q ) , Vy ( q ) , Vz ( q ) }
>24197	AssignmentExpr	query [ 3 ] = { Vx ( q ) , Vy ( q ) , Vz ( q ) }
>24198	InitializerList	Vx ( q )
>24199	CallExpression	Vz ( q )
>24200	ArgumentList	q
>24201	Argument	q
>24202	Identifier	q
>24203	Callee	Vz
>24204	Identifier	Vz
>24205	CallExpression	Vy ( q )
>24206	ArgumentList	q
>24207	Argument	q
>24208	Identifier	q
>24209	Callee	Vy
>24210	Identifier	Vy
>24211	CallExpression	Vx ( q )
>24212	ArgumentList	q
>24213	Argument	q
>24214	Identifier	q
>24215	Callee	Vx
>24216	Identifier	Vx
>24217	Identifier	query
>24218	PrimaryExpression	3
>24219	Identifier	query
>24220	IdentifierDeclType	float [ 3 ]
>24221	IdentifierDeclStatement	 
>24222	IdentifierDecl	dists [ NUM_NNS ]
>24223	Identifier	NUM_NNS
>24224	Identifier	dists
>24225	IdentifierDeclType	float [ NUM_NNS ]
>24226	IdentifierDeclStatement	 
>24227	IdentifierDecl	q = v3_new ( data . m_drop_pt [ 0 ] , data . m_drop_pt [ 1 ] , data . m_drop_pt [ 2 ] )
>24228	AssignmentExpr	q = v3_new ( data . m_drop_pt [ 0 ] , data . m_drop_pt [ 1 ] , data . m_drop_pt [ 2 ] )
>24229	CallExpression	v3_new ( data . m_drop_pt [ 0 ] , data . m_drop_pt [ 1 ] , data . m_drop_pt [ 2 ] )
>24230	ArgumentList	data . m_drop_pt [ 0 ]
>24231	Argument	data . m_drop_pt [ 2 ]
>24232	ArrayIndexing	data . m_drop_pt [ 2 ]
>24233	PrimaryExpression	2
>24234	MemberAccess	data . m_drop_pt
>24235	Identifier	m_drop_pt
>24236	Identifier	data
>24237	Argument	data . m_drop_pt [ 1 ]
>24238	ArrayIndexing	data . m_drop_pt [ 1 ]
>24239	PrimaryExpression	1
>24240	MemberAccess	data . m_drop_pt
>24241	Identifier	m_drop_pt
>24242	Identifier	data
>24243	Argument	data . m_drop_pt [ 0 ]
>24244	ArrayIndexing	data . m_drop_pt [ 0 ]
>24245	PrimaryExpression	0
>24246	MemberAccess	data . m_drop_pt
>24247	Identifier	m_drop_pt
>24248	Identifier	data
>24249	Callee	v3_new
>24250	Identifier	v3_new
>24251	Identifier	q
>24252	Identifier	q
>24253	IdentifierDeclType	v3_t
>24254	IdentifierDeclStatement	 
>24255	IdentifierDecl	nn_idxs [ NUM_NNS ]
>24256	Identifier	NUM_NNS
>24257	Identifier	nn_idxs
>24258	IdentifierDeclType	int [ NUM_NNS ]
>24259	Statement	 
>24260	Statement	 
>24261	Statement	 
>24262	IdentifierDeclStatement	 
>24263	IdentifierDecl	* tree = CreateCameraSearchTree ( )
>24264	AssignmentExpr	* tree = CreateCameraSearchTree ( )
>24265	CallExpression	CreateCameraSearchTree ( )
>24266	ArgumentList	 
>24267	Callee	CreateCameraSearchTree
>24268	Identifier	CreateCameraSearchTree
>24269	Identifier	tree
>24270	Identifier	tree
>24271	IdentifierDeclType	ANNkd_tree *
>24272	Condition	 
>24273	Identifier	init_location
>24274	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>24275	ExpressionStatement	 
>24276	AssignmentExpr	data . m_keys_desc [ i ] . m_extra = - 1
>24277	UnaryOp	- 1
>24278	PrimaryExpression	1
>24279	UnaryOperator	-
>24280	MemberAccess	data . m_keys_desc [ i ] . m_extra
>24281	Identifier	m_extra
>24282	ArrayIndexing	data . m_keys_desc [ i ]
>24283	Identifier	i
>24284	MemberAccess	data . m_keys_desc
>24285	Identifier	m_keys_desc
>24286	Identifier	data
>24287	IncDecOp	 
>24288	IncDec	++
>24289	Identifier	i
>24290	Condition	 
>24291	RelationalExpression	i < num_keys
>24292	Identifier	num_keys
>24293	Identifier	i
>24294	ForInit	 
>24295	IdentifierDeclStatement	int i = 0 ;
>24296	IdentifierDecl	i = 0
>24297	AssignmentExpr	i = 0
>24298	PrimaryExpression	0
>24299	Identifier	i
>24300	Identifier	i
>24301	IdentifierDeclType	int
>24302	IdentifierDeclStatement	 
>24303	IdentifierDecl	* keys_solve = new int [ num_keys ]
>24304	AssignmentExpr	* keys_solve = new int [ num_keys ]
>24305	Identifier	num_keys
>24306	Identifier	num_keys
>24307	Identifier	keys_solve
>24308	IdentifierDeclType	int *
>24309	IdentifierDeclStatement	 
>24310	IdentifierDecl	* idxs_solve = new int [ num_keys ]
>24311	AssignmentExpr	* idxs_solve = new int [ num_keys ]
>24312	Identifier	num_keys
>24313	Identifier	num_keys
>24314	Identifier	idxs_solve
>24315	IdentifierDeclType	int *
>24316	IdentifierDeclStatement	 
>24317	IdentifierDecl	* projs_solve = new v2_t [ num_keys ]
>24318	AssignmentExpr	* projs_solve = new v2_t [ num_keys ]
>24319	Identifier	num_keys
>24320	Identifier	num_keys
>24321	Identifier	projs_solve
>24322	IdentifierDeclType	v2_t *
>24323	IdentifierDeclStatement	 
>24324	IdentifierDecl	* points_solve = new v3_t [ num_keys ]
>24325	AssignmentExpr	* points_solve = new v3_t [ num_keys ]
>24326	Identifier	num_keys
>24327	Identifier	num_keys
>24328	Identifier	points_solve
>24329	IdentifierDeclType	v3_t *
>24330	IdentifierDeclStatement	 
>24331	IdentifierDecl	num_keys = ( int ) data . m_keys_desc . size ( )
>24332	AssignmentExpr	num_keys = ( int ) data . m_keys_desc . size ( )
>24333	CastExpression	( int ) data . m_keys_desc . size ( )
>24334	CallExpression	data . m_keys_desc . size ( )
>24335	ArgumentList	 
>24336	Callee	data . m_keys_desc . size
>24337	MemberAccess	data . m_keys_desc . size
>24338	Identifier	size
>24339	MemberAccess	data . m_keys_desc
>24340	Identifier	m_keys_desc
>24341	Identifier	data
>24342	CastTarget	int
>24343	Identifier	num_keys
>24344	Identifier	num_keys
>24345	IdentifierDeclType	int
>24346	IdentifierDeclStatement	 
>24347	IdentifierDecl	num_pts_solve = 0
>24348	AssignmentExpr	num_pts_solve = 0
>24349	PrimaryExpression	0
>24350	Identifier	num_pts_solve
>24351	Identifier	num_pts_solve
>24352	IdentifierDeclType	int
>24353	IdentifierDeclStatement	 
>24354	IdentifierDecl	start = clock ( )
>24355	AssignmentExpr	start = clock ( )
>24356	CallExpression	clock ( )
>24357	ArgumentList	 
>24358	Callee	clock
>24359	Identifier	clock
>24360	Identifier	start
>24361	Identifier	start
>24362	IdentifierDeclType	clock_t
>24363	IfStatement	if ( ( int ) data . m_keys_desc . size ( ) == 0 )
>24364	CompoundStatement	 
>24365	ReturnStatement	 
>24366	Identifier	false
>24367	ExpressionStatement	 
>24368	Statement	 
>24369	Statement	 
>24370	Statement	 
>24371	Statement	 
>24372	Statement	 
>24373	Condition	 
>24374	EqualityExpression	( int ) data . m_keys_desc . size ( ) == 0
>24375	PrimaryExpression	0
>24376	CastExpression	( int ) data . m_keys_desc . size ( )
>24377	CallExpression	data . m_keys_desc . size ( )
>24378	ArgumentList	 
>24379	Callee	data . m_keys_desc . size
>24380	MemberAccess	data . m_keys_desc . size
>24381	Identifier	size
>24382	MemberAccess	data . m_keys_desc
>24383	Identifier	m_keys_desc
>24384	Identifier	data
>24385	CastTarget	int
>24386	ExpressionStatement	 
>24387	CallExpression	data . LoadOrExtractKeys ( m_sift_binary , ! m_optimize_for_fisheye )
>24388	ArgumentList	m_sift_binary
>24389	Argument	! m_optimize_for_fisheye
>24390	UnaryOp	! m_optimize_for_fisheye
>24391	Identifier	m_optimize_for_fisheye
>24392	UnaryOperator	!
>24393	Argument	m_sift_binary
>24394	Identifier	m_sift_binary
>24395	Callee	data . LoadOrExtractKeys
>24396	MemberAccess	data . LoadOrExtractKeys
>24397	Identifier	LoadOrExtractKeys
>24398	Identifier	data
>24399	ExpressionStatement	 
>24400	CallExpression	printf ( \"[BundleRegisterImage] Registering [%dx%d] image\n\" , data . GetWidth ( ) , data . GetHeight ( ) )
>24401	ArgumentList	\"[BundleRegisterImage] Registering [%dx%d] image\n\"
>24402	Argument	data . GetHeight ( )
>24403	CallExpression	data . GetHeight ( )
>24404	ArgumentList	 
>24405	Callee	data . GetHeight
>24406	MemberAccess	data . GetHeight
>24407	Identifier	GetHeight
>24408	Identifier	data
>24409	Argument	data . GetWidth ( )
>24410	CallExpression	data . GetWidth ( )
>24411	ArgumentList	 
>24412	Callee	data . GetWidth
>24413	MemberAccess	data . GetWidth
>24414	Identifier	GetWidth
>24415	Identifier	data
>24416	Argument	\"[BundleRegisterImage] Registering [%dx%d] image\n\"
>24417	PrimaryExpression	\"[BundleRegisterImage] Registering [%dx%d] image\n\"
>24418	Callee	printf
>24419	Identifier	printf
>24624	FunctionDef	BundlerApp 
>24625	ParameterList	int num_points , int num_cameras , int * added_order , camera_params_t * cameras , v3_t * points , v3_t * colors , \
>24626	Parameter	 
>24627	Identifier	pt_views
>24628	ParameterType	std 
>24629	Parameter	 
>24630	Identifier	colors
>24631	ParameterType	v3_t *
>24632	Parameter	 
>24633	Identifier	points
>24634	ParameterType	v3_t *
>24635	Parameter	 
>24636	Identifier	cameras
>24637	ParameterType	camera_params_t *
>24638	Parameter	 
>24639	Identifier	added_order
>24640	ParameterType	int *
>24641	Parameter	 
>24642	Identifier	num_cameras
>24643	ParameterType	int
>24644	Parameter	 
>24645	Identifier	num_points
>24646	ParameterType	int
>24647	ReturnType	int
>24648	CompoundStatement	 
>24649	ReturnStatement	 
>24650	Identifier	num_pruned
>24651	ExpressionStatement	 
>24652	CallExpression	printf ( \"[RemoveBadPointsAndCameras] Pruned %d points\n\" , num_pruned )
>24653	ArgumentList	\"[RemoveBadPointsAndCameras] Pruned %d points\n\"
>24654	Argument	num_pruned
>24655	Identifier	num_pruned
>24656	Argument	\"[RemoveBadPointsAndCameras] Pruned %d points\n\"
>24657	PrimaryExpression	\"[RemoveBadPointsAndCameras] Pruned %d points\n\"
>24658	Callee	printf
>24659	Identifier	printf
>24660	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>24661	CompoundStatement	 
>24662	IfStatement	if ( RAD2DEG ( max_angle ) < 0.5 * m_ray_angle_threshold )
>24663	CompoundStatement	 
>24664	ExpressionStatement	 
>24665	IncDecOp	num_pruned ++
>24666	IncDec	++
>24667	Identifier	num_pruned
>24668	IfStatement	if ( colors != NULL )
>24669	CompoundStatement	 
>24670	ExpressionStatement	 
>24671	AssignmentExpr	Vz ( colors [ i ] ) = 0xff
>24672	PrimaryExpression	0xff
>24673	CallExpression	Vz ( colors [ i ] )
>24674	ArgumentList	colors [ i ]
>24675	Argument	colors [ i ]
>24676	ArrayIndexing	colors [ i ]
>24677	Identifier	i
>24678	Identifier	colors
>24679	Callee	Vz
>24680	Identifier	Vz
>24681	ExpressionStatement	 
>24682	AssignmentExpr	Vy ( colors [ i ] ) = 0x0
>24683	PrimaryExpression	0x0
>24684	CallExpression	Vy ( colors [ i ] )
>24685	ArgumentList	colors [ i ]
>24686	Argument	colors [ i ]
>24687	ArrayIndexing	colors [ i ]
>24688	Identifier	i
>24689	Identifier	colors
>24690	Callee	Vy
>24691	Identifier	Vy
>24692	ExpressionStatement	 
>24693	AssignmentExpr	Vx ( colors [ i ] ) = 0x0
>24694	PrimaryExpression	0x0
>24695	CallExpression	Vx ( colors [ i ] )
>24696	ArgumentList	colors [ i ]
>24697	Argument	colors [ i ]
>24698	ArrayIndexing	colors [ i ]
>24699	Identifier	i
>24700	Identifier	colors
>24701	Callee	Vx
>24702	Identifier	Vx
>24703	Condition	 
>24704	EqualityExpression	colors != NULL
>24705	Identifier	NULL
>24706	Identifier	colors
>24707	ExpressionStatement	 
>24708	CallExpression	pt_views [ i ] . clear ( )
>24709	ArgumentList	 
>24710	Callee	pt_views [ i ] . clear
>24711	MemberAccess	pt_views [ i ] . clear
>24712	Identifier	clear
>24713	ArrayIndexing	pt_views [ i ]
>24714	Identifier	i
>24715	Identifier	pt_views
>24716	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>24717	CompoundStatement	 
>24718	ExpressionStatement	 
>24719	AssignmentExpr	GetKey ( added_order [ v ] , k ) . m_extra = - 1
>24720	UnaryOp	- 1
>24721	PrimaryExpression	1
>24722	UnaryOperator	-
>24723	MemberAccess	GetKey ( added_order [ v ] , k ) . m_extra
>24724	Identifier	m_extra
>24725	CallExpression	GetKey ( added_order [ v ] , k )
>24726	ArgumentList	added_order [ v ]
>24727	Argument	k
>24728	Identifier	k
>24729	Argument	added_order [ v ]
>24730	ArrayIndexing	added_order [ v ]
>24731	Identifier	v
>24732	Identifier	added_order
>24733	Callee	GetKey
>24734	Identifier	GetKey
>24735	IdentifierDeclStatement	 
>24736	IdentifierDecl	k = pt_views [ i ] [ j ] . second
>24737	AssignmentExpr	k = pt_views [ i ] [ j ] . second
>24738	MemberAccess	pt_views [ i ] [ j ] . second
>24739	Identifier	second
>24740	ArrayIndexing	pt_views [ i ] [ j ]
>24741	Identifier	j
>24742	ArrayIndexing	pt_views [ i ]
>24743	Identifier	i
>24744	Identifier	pt_views
>24745	Identifier	k
>24746	Identifier	k
>24747	IdentifierDeclType	int
>24748	IdentifierDeclStatement	 
>24749	IdentifierDecl	v = pt_views [ i ] [ j ] . first
>24750	AssignmentExpr	v = pt_views [ i ] [ j ] . first
>24751	MemberAccess	pt_views [ i ] [ j ] . first
>24752	Identifier	first
>24753	ArrayIndexing	pt_views [ i ] [ j ]
>24754	Identifier	j
>24755	ArrayIndexing	pt_views [ i ]
>24756	Identifier	i
>24757	Identifier	pt_views
>24758	Identifier	v
>24759	Identifier	v
>24760	IdentifierDeclType	int
>24761	IncDecOp	 
>24762	IncDec	++
>24763	Identifier	j
>24764	Condition	 
>24765	RelationalExpression	j < num_views
>24766	Identifier	num_views
>24767	Identifier	j
>24768	ForInit	 
>24769	IdentifierDeclStatement	int j = 0 ;
>24770	IdentifierDecl	j = 0
>24771	AssignmentExpr	j = 0
>24772	PrimaryExpression	0
>24773	Identifier	j
>24774	Identifier	j
>24775	IdentifierDeclType	int
>24776	ExpressionStatement	 
>24777	Statement	 
>24778	Statement	 
>24779	Statement	 
>24780	Statement	 
>24781	Statement	 
>24782	Statement	 
>24783	Statement	 
>24784	Statement	 
>24785	Statement	 
>24786	Statement	 
>24787	Statement	 
>24788	Statement	 
>24789	Condition	 
>24790	RelationalExpression	RAD2DEG ( max_angle ) < 0.5 * m_ray_angle_threshold
>24791	MultiplicativeExpression	0.5 * m_ray_angle_threshold
>24792	Identifier	m_ray_angle_threshold
>24793	PrimaryExpression	0.5
>24794	CallExpression	RAD2DEG ( max_angle )
>24795	ArgumentList	max_angle
>24796	Argument	max_angle
>24797	Identifier	max_angle
>24798	Callee	RAD2DEG
>24799	Identifier	RAD2DEG
>24800	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>24801	CompoundStatement	 
>24802	ForStatement	for ( int k = j + 1 ; k < num_views ; k ++ )
>24803	CompoundStatement	 
>24804	IfStatement	if ( angle > max_angle )
>24805	CompoundStatement	 
>24806	ExpressionStatement	 
>24807	AssignmentExpr	max_angle = angle
>24808	Identifier	angle
>24809	Identifier	max_angle
>24810	Condition	 
>24811	RelationalExpression	angle > max_angle
>24812	Identifier	max_angle
>24813	Identifier	angle
>24814	IdentifierDeclStatement	 
>24815	IdentifierDecl	angle = acos ( CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>24816	AssignmentExpr	angle = acos ( CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>24817	CallExpression	acos ( CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>24818	ArgumentList	CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>24819	Argument	CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>24820	CallExpression	CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>24821	ArgumentList	dot
>24822	Argument	1.0 - 1.0e-8
>24823	AdditiveExpression	1.0 - 1.0e-8
>24824	PrimaryExpression	1.0e-8
>24825	PrimaryExpression	1.0
>24826	Argument	- 1.0 + 1.0e-8
>24827	AdditiveExpression	- 1.0 + 1.0e-8
>24828	PrimaryExpression	1.0e-8
>24829	UnaryOp	- 1.0
>24830	PrimaryExpression	1.0
>24831	UnaryOperator	-
>24832	Argument	dot
>24833	Identifier	dot
>24834	Callee	CLAMP
>24835	Identifier	CLAMP
>24836	Callee	acos
>24837	Identifier	acos
>24838	Identifier	angle
>24839	Identifier	angle
>24840	IdentifierDeclType	double
>24841	ExpressionStatement	 
>24842	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , r1 , r2 , & dot )
>24843	ArgumentList	1
>24844	Argument	& dot
>24845	UnaryOp	& dot
>24846	Identifier	dot
>24847	UnaryOperator	&
>24848	Argument	r2
>24849	Identifier	r2
>24850	Argument	r1
>24851	Identifier	r1
>24852	Argument	1
>24853	PrimaryExpression	1
>24854	Argument	3
>24855	PrimaryExpression	3
>24856	Argument	3
>24857	PrimaryExpression	3
>24858	Argument	1
>24859	PrimaryExpression	1
>24860	Callee	matrix_product
>24861	Identifier	matrix_product
>24862	IdentifierDeclStatement	 
>24863	IdentifierDecl	dot
>24864	Identifier	dot
>24865	IdentifierDeclType	double
>24866	ExpressionStatement	 
>24867	CallExpression	matrix_scale ( 3 , 1 , r2 , 1.0 / norm , r2 )
>24868	ArgumentList	3
>24869	Argument	r2
>24870	Identifier	r2
>24871	Argument	1.0 / norm
>24872	MultiplicativeExpression	1.0 / norm
>24873	Identifier	norm
>24874	PrimaryExpression	1.0
>24875	Argument	r2
>24876	Identifier	r2
>24877	Argument	1
>24878	PrimaryExpression	1
>24879	Argument	3
>24880	PrimaryExpression	3
>24881	Callee	matrix_scale
>24882	Identifier	matrix_scale
>24883	IdentifierDeclStatement	 
>24884	IdentifierDecl	norm = matrix_norm ( 3 , 1 , r2 )
>24885	AssignmentExpr	norm = matrix_norm ( 3 , 1 , r2 )
>24886	CallExpression	matrix_norm ( 3 , 1 , r2 )
>24887	ArgumentList	3
>24888	Argument	r2
>24889	Identifier	r2
>24890	Argument	1
>24891	PrimaryExpression	1
>24892	Argument	3
>24893	PrimaryExpression	3
>24894	Callee	matrix_norm
>24895	Identifier	matrix_norm
>24896	Identifier	norm
>24897	Identifier	norm
>24898	IdentifierDeclType	double
>24899	ExpressionStatement	 
>24900	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos , cameras [ v2 ] . t , r2 )
>24901	ArgumentList	3
>24902	Argument	r2
>24903	Identifier	r2
>24904	Argument	cameras [ v2 ] . t
>24905	MemberAccess	cameras [ v2 ] . t
>24906	Identifier	t
>24907	ArrayIndexing	cameras [ v2 ]
>24908	Identifier	v2
>24909	Identifier	cameras
>24910	Argument	pos
>24911	Identifier	pos
>24912	Argument	1
>24913	PrimaryExpression	1
>24914	Argument	3
>24915	PrimaryExpression	3
>24916	Argument	1
>24917	PrimaryExpression	1
>24918	Argument	3
>24919	PrimaryExpression	3
>24920	Callee	matrix_diff
>24921	Identifier	matrix_diff
>24922	IdentifierDeclStatement	 
>24923	IdentifierDecl	r2 [ 3 ]
>24924	PrimaryExpression	3
>24925	Identifier	r2
>24926	IdentifierDeclType	double [ 3 ]
>24927	IdentifierDeclStatement	 
>24928	IdentifierDecl	v2 = pt_views [ i ] [ k ] . first
>24929	AssignmentExpr	v2 = pt_views [ i ] [ k ] . first
>24930	MemberAccess	pt_views [ i ] [ k ] . first
>24931	Identifier	first
>24932	ArrayIndexing	pt_views [ i ] [ k ]
>24933	Identifier	k
>24934	ArrayIndexing	pt_views [ i ]
>24935	Identifier	i
>24936	Identifier	pt_views
>24937	Identifier	v2
>24938	Identifier	v2
>24939	IdentifierDeclType	int
>24940	IncDecOp	 
>24941	IncDec	++
>24942	Identifier	k
>24943	Condition	 
>24944	RelationalExpression	k < num_views
>24945	Identifier	num_views
>24946	Identifier	k
>24947	ForInit	 
>24948	IdentifierDeclStatement	int k = j + 1 ;
>24949	IdentifierDecl	k = j + 1
>24950	AssignmentExpr	k = j + 1
>24951	AdditiveExpression	j + 1
>24952	PrimaryExpression	1
>24953	Identifier	j
>24954	Identifier	k
>24955	Identifier	k
>24956	IdentifierDeclType	int
>24957	ExpressionStatement	 
>24958	CallExpression	matrix_scale ( 3 , 1 , r1 , 1.0 / norm , r1 )
>24959	ArgumentList	3
>24960	Argument	r1
>24961	Identifier	r1
>24962	Argument	1.0 / norm
>24963	MultiplicativeExpression	1.0 / norm
>24964	Identifier	norm
>24965	PrimaryExpression	1.0
>24966	Argument	r1
>24967	Identifier	r1
>24968	Argument	1
>24969	PrimaryExpression	1
>24970	Argument	3
>24971	PrimaryExpression	3
>24972	Callee	matrix_scale
>24973	Identifier	matrix_scale
>24974	IdentifierDeclStatement	 
>24975	IdentifierDecl	norm = matrix_norm ( 3 , 1 , r1 )
>24976	AssignmentExpr	norm = matrix_norm ( 3 , 1 , r1 )
>24977	CallExpression	matrix_norm ( 3 , 1 , r1 )
>24978	ArgumentList	3
>24979	Argument	r1
>24980	Identifier	r1
>24981	Argument	1
>24982	PrimaryExpression	1
>24983	Argument	3
>24984	PrimaryExpression	3
>24985	Callee	matrix_norm
>24986	Identifier	matrix_norm
>24987	Identifier	norm
>24988	Identifier	norm
>24989	IdentifierDeclType	double
>24990	ExpressionStatement	 
>24991	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos , cameras [ v1 ] . t , r1 )
>24992	ArgumentList	3
>24993	Argument	r1
>24994	Identifier	r1
>24995	Argument	cameras [ v1 ] . t
>24996	MemberAccess	cameras [ v1 ] . t
>24997	Identifier	t
>24998	ArrayIndexing	cameras [ v1 ]
>24999	Identifier	v1
>25000	Identifier	cameras
>25001	Argument	pos
>25002	Identifier	pos
>25003	Argument	1
>25004	PrimaryExpression	1
>25005	Argument	3
>25006	PrimaryExpression	3
>25007	Argument	1
>25008	PrimaryExpression	1
>25009	Argument	3
>25010	PrimaryExpression	3
>25011	Callee	matrix_diff
>25012	Identifier	matrix_diff
>25013	IdentifierDeclStatement	 
>25014	IdentifierDecl	r1 [ 3 ]
>25015	PrimaryExpression	3
>25016	Identifier	r1
>25017	IdentifierDeclType	double [ 3 ]
>25018	IdentifierDeclStatement	 
>25019	IdentifierDecl	v1 = pt_views [ i ] [ j ] . first
>25020	AssignmentExpr	v1 = pt_views [ i ] [ j ] . first
>25021	MemberAccess	pt_views [ i ] [ j ] . first
>25022	Identifier	first
>25023	ArrayIndexing	pt_views [ i ] [ j ]
>25024	Identifier	j
>25025	ArrayIndexing	pt_views [ i ]
>25026	Identifier	i
>25027	Identifier	pt_views
>25028	Identifier	v1
>25029	Identifier	v1
>25030	IdentifierDeclType	int
>25031	IncDecOp	 
>25032	IncDec	++
>25033	Identifier	j
>25034	Condition	 
>25035	RelationalExpression	j < num_views
>25036	Identifier	num_views
>25037	Identifier	j
>25038	ForInit	 
>25039	IdentifierDeclStatement	int j = 0 ;
>25040	IdentifierDecl	j = 0
>25041	AssignmentExpr	j = 0
>25042	PrimaryExpression	0
>25043	Identifier	j
>25044	Identifier	j
>25045	IdentifierDeclType	int
>25046	IdentifierDeclStatement	 
>25047	IdentifierDecl	max_angle = 0.0
>25048	AssignmentExpr	max_angle = 0.0
>25049	PrimaryExpression	0.0
>25050	Identifier	max_angle
>25051	Identifier	max_angle
>25052	IdentifierDeclType	double
>25053	IfStatement	if ( num_views == 0 )
>25054	ContinueStatement	 
>25055	Condition	 
>25056	EqualityExpression	num_views == 0
>25057	PrimaryExpression	0
>25058	Identifier	num_views
>25059	IdentifierDeclStatement	 
>25060	IdentifierDecl	num_views = ( int ) pt_views [ i ] . size ( )
>25061	AssignmentExpr	num_views = ( int ) pt_views [ i ] . size ( )
>25062	CastExpression	( int ) pt_views [ i ] . size ( )
>25063	CallExpression	pt_views [ i ] . size ( )
>25064	ArgumentList	 
>25065	Callee	pt_views [ i ] . size
>25066	MemberAccess	pt_views [ i ] . size
>25067	Identifier	size
>25068	ArrayIndexing	pt_views [ i ]
>25069	Identifier	i
>25070	Identifier	pt_views
>25071	CastTarget	int
>25072	Identifier	num_views
>25073	Identifier	num_views
>25074	IdentifierDeclType	int
>25075	IdentifierDeclStatement	 
>25076	IdentifierDecl	* pos = points [ i ] . p
>25077	AssignmentExpr	* pos = points [ i ] . p
>25078	MemberAccess	points [ i ] . p
>25079	Identifier	p
>25080	ArrayIndexing	points [ i ]
>25081	Identifier	i
>25082	Identifier	points
>25083	Identifier	pos
>25084	Identifier	pos
>25085	IdentifierDeclType	double *
>25086	IncDecOp	 
>25087	IncDec	++
>25088	Identifier	i
>25089	Condition	 
>25090	RelationalExpression	i < num_points
>25091	Identifier	num_points
>25092	Identifier	i
>25093	ForInit	 
>25094	IdentifierDeclStatement	int i = 0 ;
>25095	IdentifierDecl	i = 0
>25096	AssignmentExpr	i = 0
>25097	PrimaryExpression	0
>25098	Identifier	i
>25099	Identifier	i
>25100	IdentifierDeclType	int
>25101	IdentifierDeclStatement	 
>25102	IdentifierDecl	num_pruned = 0
>25103	AssignmentExpr	num_pruned = 0
>25104	PrimaryExpression	0
>25105	Identifier	num_pruned
>25106	Identifier	num_pruned
>25107	IdentifierDeclType	int
<3=18,17,4
<4=14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<18=318,276,271,262,253,171,152,135,130,119,100,81,62,43,35,27,19
<19=20
<20=24,21
<21=23,22
<24=26,25
<27=28
<28=32,29
<29=31,30
<32=34,33
<35=36
<36=40,37
<37=39,38
<40=42,41
<43=44
<44=60,45
<45=56,52,46
<46=47
<47=49,48
<49=51,50
<52=53
<53=55,54
<56=57
<57=59,58
<60=61
<62=63
<63=79,64
<64=75,71,65
<65=66
<66=68,67
<68=70,69
<71=72
<72=74,73
<75=76
<76=78,77
<79=80
<81=82
<82=98,83
<83=94,90,84
<84=85
<85=87,86
<87=89,88
<90=91
<91=93,92
<94=95
<95=97,96
<98=99
<100=101
<101=117,102
<102=115,113,111,109,107,105,103
<103=104
<105=106
<107=108
<109=110
<111=112
<113=114
<115=116
<117=118
<119=120
<120=128,121
<121=126,124,122
<122=123
<124=125
<126=127
<128=129
<130=131
<131=134,133,132
<135=136
<136=150,137
<137=148,146,138
<138=139
<139=143,140
<140=142,141
<143=145,144
<146=147
<148=149
<150=151
<152=153
<153=169,154
<154=167,165,163,161,159,157,155
<155=156
<157=158
<159=160
<161=162
<163=164
<165=166
<167=168
<169=170
<171=241,224,172
<172=173
<173=218,201,174
<174=175
<175=195,178,176
<176=177
<178=187,179
<179=180
<180=184,181
<181=183,182
<184=186,185
<187=188
<188=192,189
<189=191,190
<192=194,193
<195=196
<196=198,197
<198=200,199
<201=210,202
<202=203
<203=207,204
<204=206,205
<207=209,208
<210=211
<211=215,212
<212=214,213
<215=217,216
<218=219
<219=221,220
<221=223,222
<224=233,225
<225=226
<226=230,227
<227=229,228
<230=232,231
<233=234
<234=238,235
<235=237,236
<238=240,239
<241=242
<242=248,243
<243=245,244
<245=247,246
<248=250,249
<250=252,251
<253=258,254
<254=257,256,255
<258=261,260,259
<262=263
<263=269,264
<264=267,265
<265=266
<267=268
<269=270
<271=272
<272=275,274,273
<276=312,277
<277=295,278
<278=279
<279=293,280
<280=291,289,287,283,281
<281=282
<283=284
<284=286,285
<287=288
<289=290
<291=292
<293=294
<295=296
<296=310,297
<297=308,306,304,300,298
<298=299
<300=301
<301=303,302
<304=305
<306=307
<308=309
<310=311
<312=313
<313=315,314
<315=317,316
<318=319
<319=340,339,320
<320=338,321
<321=333,322
<322=328,323
<323=325,324
<325=327,326
<328=330,329
<330=332,331
<333=335,334
<335=337,336
<357=366,365,358
<358=362,359
<359=361,360
<362=364,363
<366=367
<367=446,387,368
<368=369
<369=370
<370=371
<371=385,372
<372=383,379,373
<373=374
<374=378,375
<375=377,376
<379=380
<380=382,381
<383=384
<385=386
<387=438,432,426,420,412,406,400,394,388
<388=389
<389=391,390
<391=393,392
<394=395
<395=397,396
<397=399,398
<400=401
<401=403,402
<403=405,404
<406=407
<407=409,408
<409=411,410
<412=413
<413=417,414
<414=416,415
<417=419,418
<420=421
<421=423,422
<423=425,424
<426=427
<427=429,428
<429=431,430
<432=433
<433=435,434
<435=437,436
<438=439
<439=443,440
<440=442,441
<443=445,444
<446=447
<447=451,448
<448=450,449
<461=476,475,462
<462=472,469,466,463
<463=465,464
<466=468,467
<469=471,470
<472=474,473
<476=957,948,939,930,919,908,887,866,857,846,835,809,783,774,757,740,731,708,685,676,665,654,631,608,599,576,553,549,528,501,477
<477=478
<478=499,479
<479=480
<480=481
<481=497,482
<482=493,487,483
<483=484
<484=486,485
<487=488
<488=490,489
<490=492,491
<493=494
<494=496,495
<497=498
<499=500
<501=502
<502=527,526,503
<503=525,504
<504=515,505
<505=513,506
<506=511,509,507
<507=508
<509=510
<511=512
<513=514
<515=523,516
<516=521,519,517
<517=518
<519=520
<521=522
<523=524
<528=529
<529=547,530
<530=545,543,541,539,537,535,531
<531=532
<532=534,533
<535=536
<537=538
<539=540
<541=542
<543=544
<545=546
<547=548
<549=550
<550=552,551
<553=554
<554=574,555
<555=572,570,568,566,564,558,556
<556=557
<558=559
<559=563,560
<560=562,561
<564=565
<566=567
<568=569
<570=571
<572=573
<574=575
<576=577
<577=597,578
<578=595,593,591,589,587,581,579
<579=580
<581=582
<582=586,583
<583=585,584
<587=588
<589=590
<591=592
<593=594
<595=596
<597=598
<599=604,600
<600=603,602,601
<604=607,606,605
<608=609
<609=629,610
<610=627,625,623,621,619,613,611
<611=612
<613=614
<614=618,615
<615=617,616
<619=620
<621=622
<623=624
<625=626
<627=628
<629=630
<631=632
<632=652,633
<633=650,648,646,644,642,636,634
<634=635
<636=637
<637=641,638
<638=640,639
<642=643
<644=645
<646=647
<648=649
<650=651
<652=653
<654=655
<655=663,656
<656=661,659,657
<657=658
<659=660
<661=662
<663=664
<665=666
<666=674,667
<667=672,670,668
<668=669
<670=671
<672=673
<674=675
<676=681,677
<677=680,679,678
<681=684,683,682
<685=686
<686=707,706,705,687
<687=704,688
<688=698,692,689
<689=691,690
<692=696,693
<693=694
<694=695
<696=697
<698=702,699
<699=700
<700=701
<702=703
<708=709
<709=730,729,728,710
<710=727,711
<711=721,715,712
<712=714,713
<715=719,716
<716=717
<717=718
<719=720
<721=725,722
<722=723
<723=724
<725=726
<731=736,732
<732=735,734,733
<736=739,738,737
<740=741
<741=755,742
<742=753,751,745,743
<743=744
<745=746
<746=750,747
<747=749,748
<751=752
<753=754
<755=756
<757=758
<758=772,759
<759=770,768,762,760
<760=761
<762=763
<763=767,764
<764=766,765
<768=769
<770=771
<772=773
<774=779,775
<775=778,777,776
<779=782,781,780
<783=784
<784=808,807,785
<785=806,786
<786=804,787
<787=796,788
<788=789
<789=793,790
<790=792,791
<793=795,794
<796=797
<797=801,798
<798=800,799
<801=803,802
<804=805
<809=810
<810=834,833,811
<811=832,812
<812=830,813
<813=822,814
<814=815
<815=819,816
<816=818,817
<819=821,820
<822=823
<823=827,824
<824=826,825
<827=829,828
<830=831
<835=836
<836=844,837
<837=842,840,838
<838=839
<840=841
<842=843
<844=845
<846=847
<847=855,848
<848=853,851,849
<849=850
<851=852
<853=854
<855=856
<857=862,858
<858=861,860,859
<862=865,864,863
<866=867
<867=886,885,884,868
<868=883,869
<869=877,871,870
<871=875,872
<872=873
<873=874
<875=876
<877=881,878
<878=879
<879=880
<881=882
<887=888
<888=907,906,905,889
<889=904,890
<890=898,892,891
<892=896,893
<893=894
<894=895
<896=897
<898=902,899
<899=900
<900=901
<902=903
<908=909
<909=917,910
<910=915,913,911
<911=912
<913=914
<915=916
<917=918
<919=920
<920=928,921
<921=926,924,922
<922=923
<924=925
<926=927
<928=929
<930=935,931
<931=934,933,932
<935=938,937,936
<939=940
<940=946,941
<941=944,942
<942=943
<944=945
<946=947
<948=949
<949=955,950
<950=953,951
<951=952
<953=954
<955=956
<957=962,958
<958=961,960,959
<962=965,964,963
<1008=1017,1016,1009
<1009=1013,1010
<1010=1012,1011
<1013=1015,1014
<1017=1109,1102,1047,1018
<1018=1043,1034,1019
<1019=1020
<1020=1030,1021
<1021=1022
<1022=1028,1023
<1023=1026,1024
<1024=1025
<1026=1027
<1028=1029
<1030=1031
<1031=1033,1032
<1034=1035
<1035=1041,1036
<1036=1039,1037
<1037=1038
<1039=1040
<1041=1042
<1043=1044
<1044=1046,1045
<1047=1094,1090,1087,1048
<1048=1049
<1049=1079,1050
<1050=1063,1059,1055,1051
<1051=1052
<1052=1054,1053
<1055=1056
<1056=1058,1057
<1059=1060
<1060=1062,1061
<1063=1064
<1064=1075,1065
<1065=1066
<1066=1067
<1067=1069,1068
<1069=1071,1070
<1071=1072
<1072=1074,1073
<1075=1076
<1076=1078,1077
<1079=1080
<1080=1082,1081
<1082=1084,1083
<1084=1086,1085
<1087=1089,1088
<1090=1091
<1091=1093,1092
<1094=1095
<1095=1096
<1096=1101,1100,1097
<1097=1099,1098
<1102=1103
<1103=1108,1107,1104
<1104=1106,1105
<1109=1110
<1110=1122,1121,1111
<1111=1120,1112
<1112=1119,1113
<1113=1115,1114
<1115=1116
<1116=1118,1117
<1136=1145,1144,1137
<1137=1141,1138
<1138=1140,1139
<1141=1143,1142
<1145=1216,1211,1201,1191,1181,1158,1146
<1146=1152,1150,1147
<1147=1148
<1148=1149
<1150=1151
<1152=1153
<1153=1155,1154
<1155=1157,1156
<1158=1159
<1159=1179,1160
<1160=1177,1175,1173,1171,1165,1163,1161
<1161=1162
<1163=1164
<1165=1166
<1166=1170,1167
<1167=1169,1168
<1171=1172
<1173=1174
<1175=1176
<1177=1178
<1179=1180
<1181=1182
<1182=1188,1183
<1183=1185,1184
<1185=1187,1186
<1188=1190,1189
<1191=1192
<1192=1198,1193
<1193=1195,1194
<1195=1197,1196
<1198=1200,1199
<1201=1202
<1202=1208,1203
<1203=1205,1204
<1205=1207,1206
<1208=1210,1209
<1211=1212
<1212=1215,1214,1213
<1216=1217
<1217=1241,1240,1239,1218
<1218=1238,1219
<1219=1232,1226,1220
<1220=1224,1221
<1221=1222
<1222=1223
<1224=1225
<1226=1230,1227
<1227=1228
<1228=1229
<1230=1231
<1232=1236,1233
<1233=1234
<1234=1235
<1236=1237
<1260=1269,1268,1261
<1261=1265,1262
<1262=1264,1263
<1265=1267,1266
<1269=1401,1396,1383,1366,1361,1356,1343,1326,1313,1300,1287,1270
<1270=1271
<1271=1285,1272
<1272=1273
<1273=1274
<1274=1282,1275
<1275=1279,1276
<1276=1278,1277
<1279=1281,1280
<1282=1284,1283
<1285=1286
<1287=1288
<1288=1299,1298,1289
<1289=1297,1290
<1290=1294,1291
<1291=1293,1292
<1294=1296,1295
<1300=1301
<1301=1312,1311,1302
<1302=1310,1303
<1303=1307,1304
<1304=1306,1305
<1307=1309,1308
<1313=1314
<1314=1325,1324,1315
<1315=1323,1316
<1316=1320,1317
<1317=1319,1318
<1320=1322,1321
<1326=1327
<1327=1341,1328
<1328=1339,1335,1329
<1329=1330
<1330=1334,1331
<1331=1333,1332
<1335=1336
<1336=1338,1337
<1339=1340
<1341=1342
<1343=1344
<1344=1354,1345
<1345=1352,1348,1346
<1346=1347
<1348=1349
<1349=1351,1350
<1352=1353
<1354=1355
<1356=1357
<1357=1360,1359,1358
<1361=1362
<1362=1365,1364,1363
<1366=1367
<1367=1381,1368
<1368=1379,1375,1369
<1369=1370
<1370=1374,1371
<1371=1373,1372
<1375=1376
<1376=1378,1377
<1379=1380
<1381=1382
<1383=1384
<1384=1394,1385
<1385=1392,1388,1386
<1386=1387
<1388=1389
<1389=1391,1390
<1392=1393
<1394=1395
<1396=1397
<1397=1400,1399,1398
<1401=1402
<1402=1405,1404,1403
<1427=1436,1435,1428
<1428=1432,1429
<1429=1431,1430
<1432=1434,1433
<1436=1678,1658,1652,1638,1618,1604,1596,1590,1584,1543,1535,1527,1519,1511,1503,1495,1437
<1437=1491,1446,1438
<1438=1439
<1439=1440
<1440=1441
<1441=1443,1442
<1443=1445,1444
<1446=1485,1466,1447
<1447=1448
<1448=1464,1449
<1449=1460,1456,1450
<1450=1451
<1451=1455,1452
<1452=1454,1453
<1456=1457
<1457=1459,1458
<1460=1461
<1461=1463,1462
<1464=1465
<1466=1467
<1467=1483,1468
<1468=1479,1475,1469
<1469=1470
<1470=1474,1471
<1471=1473,1472
<1475=1476
<1476=1478,1477
<1479=1480
<1480=1482,1481
<1483=1484
<1485=1486
<1486=1488,1487
<1488=1490,1489
<1491=1492
<1492=1494,1493
<1495=1496
<1496=1500,1497
<1497=1499,1498
<1500=1502,1501
<1503=1504
<1504=1508,1505
<1505=1507,1506
<1508=1510,1509
<1511=1512
<1512=1516,1513
<1513=1515,1514
<1516=1518,1517
<1519=1520
<1520=1524,1521
<1521=1523,1522
<1524=1526,1525
<1527=1528
<1528=1532,1529
<1529=1531,1530
<1532=1534,1533
<1535=1536
<1536=1540,1537
<1537=1539,1538
<1540=1542,1541
<1543=1576,1572,1569,1544
<1544=1561,1553,1545
<1545=1546
<1546=1548,1547
<1548=1550,1549
<1550=1552,1551
<1553=1554
<1554=1556,1555
<1556=1558,1557
<1558=1560,1559
<1561=1562
<1562=1564,1563
<1564=1566,1565
<1566=1568,1567
<1569=1571,1570
<1572=1573
<1573=1575,1574
<1576=1577
<1577=1578
<1578=1583,1582,1579
<1579=1581,1580
<1584=1585
<1585=1587,1586
<1587=1589,1588
<1590=1591
<1591=1593,1592
<1593=1595,1594
<1596=1597
<1597=1599,1598
<1599=1601,1600
<1601=1603,1602
<1604=1605
<1605=1613,1606
<1606=1608,1607
<1608=1610,1609
<1610=1612,1611
<1613=1615,1614
<1615=1617,1616
<1618=1619
<1619=1633,1620
<1620=1628,1621
<1621=1623,1622
<1623=1625,1624
<1625=1627,1626
<1628=1630,1629
<1630=1632,1631
<1633=1635,1634
<1635=1637,1636
<1638=1639
<1639=1647,1640
<1640=1642,1641
<1642=1644,1643
<1644=1646,1645
<1647=1649,1648
<1649=1651,1650
<1652=1653
<1653=1655,1654
<1655=1657,1656
<1658=1659
<1659=1673,1660
<1660=1668,1661
<1661=1663,1662
<1663=1665,1664
<1665=1667,1666
<1668=1670,1669
<1670=1672,1671
<1673=1675,1674
<1675=1677,1676
<1678=1679
<1679=1687,1680
<1680=1685,1681
<1681=1682
<1682=1684,1683
<1685=1686
<1687=1688
<1732=1741,1740,1733
<1733=1737,1734
<1734=1736,1735
<1737=1739,1738
<1741=1879,1872,1751,1742
<1742=1743
<1743=1749,1744
<1744=1747,1745
<1745=1746
<1747=1748
<1749=1750
<1751=1864,1860,1857,1752
<1752=1843,1753
<1753=1835,1831,1828,1754
<1754=1817,1806,1797,1755
<1755=1785,1756
<1756=1784,1783,1782,1781,1780,1779,1778,1777,1776,1775,1774,1773,1772,1771,1770,1769,1768,1767,1766,1765,1764,1763,1762,1761,1757
<1757=1758
<1758=1760,1759
<1785=1786
<1786=1788,1787
<1788=1790,1789
<1790=1792,1791
<1792=1794,1793
<1794=1796,1795
<1797=1798
<1798=1805,1804,1799
<1799=1803,1800
<1800=1802,1801
<1806=1807
<1807=1816,1815,1808
<1808=1814,1809
<1809=1813,1810
<1810=1812,1811
<1817=1818
<1818=1827,1826,1819
<1819=1825,1820
<1820=1822,1821
<1822=1824,1823
<1828=1830,1829
<1831=1832
<1832=1834,1833
<1835=1836
<1836=1837
<1837=1842,1841,1838
<1838=1840,1839
<1843=1844
<1844=1856,1855,1845
<1845=1854,1846
<1846=1848,1847
<1848=1849
<1849=1851,1850
<1851=1853,1852
<1857=1859,1858
<1860=1861
<1861=1863,1862
<1864=1865
<1865=1866
<1866=1871,1870,1867
<1867=1869,1868
<1872=1873
<1873=1878,1877,1874
<1874=1876,1875
<1879=1880
<1880=1892,1891,1881
<1881=1890,1882
<1882=1889,1883
<1883=1885,1884
<1885=1886
<1886=1888,1887
<1927=1942,1941,1928
<1928=1938,1935,1932,1929
<1929=1931,1930
<1932=1934,1933
<1935=1937,1936
<1938=1940,1939
<1942=3335,3321,3311,3304,3243,3236,3229,3222,3218,3211,3204,2869,2862,2855,2848,2841,2535,2526,2501,2476,2437,2410,2403,2240,2233,2226,2013,1994,1963,1962,1961,1960,1958,1957,1956,1955,1953,1952,1951,1950,1948,1947,1946,1945,1943
<1943=1944
<1948=1949
<1953=1954
<1958=1959
<1963=1990,1964
<1964=1965
<1965=1966
<1966=1988,1967
<1967=1986,1984,1982,1980,1978,1976,1974,1972,1970,1968
<1968=1969
<1970=1971
<1972=1973
<1974=1975
<1976=1977
<1978=1979
<1980=1981
<1982=1983
<1984=1985
<1986=1987
<1988=1989
<1990=1991
<1991=1993,1992
<1994=1995
<1995=2011,1996
<1996=2009,2007,2005,2003,2001,1999,1997
<1997=1998
<1999=2000
<2001=2002
<2003=2004
<2005=2006
<2007=2008
<2009=2010
<2011=2012
<2013=2218,2214,2211,2014
<2014=2196,2192,2177,2162,2147,2130,2113,2096,2024,2015
<2015=2016
<2016=2020,2017
<2017=2018
<2018=2019
<2020=2021
<2021=2023,2022
<2024=2088,2075,2072,2025
<2025=2059,2050,2026
<2026=2027
<2027=2044,2028
<2028=2029
<2029=2030
<2030=2042,2031
<2031=2040,2032
<2032=2033
<2033=2035,2034
<2035=2037,2036
<2037=2039,2038
<2040=2041
<2042=2043
<2044=2045
<2045=2047,2046
<2047=2049,2048
<2050=2051
<2051=2058,2057,2052
<2052=2056,2053
<2053=2055,2054
<2059=2060
<2060=2071,2070,2061
<2061=2069,2062
<2062=2064,2063
<2064=2066,2065
<2066=2068,2067
<2072=2074,2073
<2075=2076
<2076=2087,2077
<2077=2086,2078
<2078=2080,2079
<2080=2081
<2081=2083,2082
<2083=2085,2084
<2088=2089
<2089=2090
<2090=2095,2094,2091
<2091=2093,2092
<2096=2097
<2097=2108,2098
<2098=2107,2099
<2099=2105,2100
<2100=2101
<2101=2102
<2102=2104,2103
<2105=2106
<2108=2110,2109
<2110=2112,2111
<2113=2114
<2114=2125,2115
<2115=2124,2116
<2116=2122,2117
<2117=2118
<2118=2119
<2119=2121,2120
<2122=2123
<2125=2127,2126
<2127=2129,2128
<2130=2131
<2131=2142,2132
<2132=2141,2133
<2133=2139,2134
<2134=2135
<2135=2136
<2136=2138,2137
<2139=2140
<2142=2144,2143
<2144=2146,2145
<2147=2148
<2148=2157,2149
<2149=2155,2150
<2150=2151
<2151=2152
<2152=2154,2153
<2155=2156
<2157=2159,2158
<2159=2161,2160
<2162=2163
<2163=2172,2164
<2164=2170,2165
<2165=2166
<2166=2167
<2167=2169,2168
<2170=2171
<2172=2174,2173
<2174=2176,2175
<2177=2178
<2178=2187,2179
<2179=2185,2180
<2180=2181
<2181=2182
<2182=2184,2183
<2185=2186
<2187=2189,2188
<2189=2191,2190
<2192=2193
<2193=2195,2194
<2196=2198,2197
<2198=2199
<2199=2201,2200
<2201=2210,2202
<2202=2204,2203
<2204=2205
<2205=2207,2206
<2207=2209,2208
<2211=2213,2212
<2214=2215
<2215=2217,2216
<2218=2219
<2219=2220
<2220=2225,2224,2221
<2221=2223,2222
<2226=2227
<2227=2229,2228
<2229=2230
<2230=2232,2231
<2233=2234
<2234=2238,2235
<2235=2236
<2236=2237
<2238=2239
<2240=2395,2391,2388,2241
<2241=2379,2369,2344,2311,2282,2268,2253,2242
<2242=2243
<2243=2245,2244
<2245=2246
<2246=2248,2247
<2248=2250,2249
<2250=2252,2251
<2253=2254
<2254=2266,2255
<2255=2264,2262,2256
<2256=2257
<2257=2259,2258
<2259=2261,2260
<2262=2263
<2264=2265
<2266=2267
<2268=2269
<2269=2275,2270
<2270=2272,2271
<2272=2274,2273
<2275=2277,2276
<2277=2279,2278
<2279=2281,2280
<2282=2283
<2283=2309,2284
<2284=2307,2305,2297,2293,2285
<2285=2286
<2286=2288,2287
<2288=2290,2289
<2290=2292,2291
<2293=2294
<2294=2296,2295
<2297=2298
<2298=2300,2299
<2300=2302,2301
<2302=2304,2303
<2305=2306
<2307=2308
<2309=2310
<2311=2312
<2312=2342,2313
<2313=2340,2338,2336,2334,2328,2322,2314
<2314=2315
<2315=2317,2316
<2317=2319,2318
<2319=2321,2320
<2322=2323
<2323=2325,2324
<2325=2327,2326
<2328=2329
<2329=2331,2330
<2331=2333,2332
<2334=2335
<2336=2337
<2338=2339
<2340=2341
<2342=2343
<2344=2345
<2345=2367,2346
<2346=2359,2353,2347
<2347=2348
<2348=2352,2349
<2349=2351,2350
<2353=2354
<2354=2356,2355
<2356=2358,2357
<2359=2360
<2360=2362,2361
<2362=2364,2363
<2364=2366,2365
<2367=2368
<2369=2370
<2370=2372,2371
<2372=2374,2373
<2374=2376,2375
<2376=2378,2377
<2379=2380
<2380=2387,2386,2381
<2381=2385,2382
<2382=2384,2383
<2388=2390,2389
<2391=2392
<2392=2394,2393
<2395=2396
<2396=2397
<2397=2402,2401,2398
<2398=2400,2399
<2403=2404
<2404=2408,2405
<2405=2406
<2406=2407
<2408=2409
<2410=2429,2425,2422,2411
<2411=2412
<2412=2413
<2413=2415,2414
<2415=2417,2416
<2417=2419,2418
<2419=2421,2420
<2422=2424,2423
<2425=2426
<2426=2428,2427
<2429=2430
<2430=2431
<2431=2436,2435,2432
<2432=2434,2433
<2437=2438
<2438=2474,2439
<2439=2472,2470,2468,2466,2464,2462,2460,2458,2456,2454,2452,2450,2448,2446,2444,2442,2440
<2440=2441
<2442=2443
<2444=2445
<2446=2447
<2448=2449
<2450=2451
<2452=2453
<2454=2455
<2456=2457
<2458=2459
<2460=2461
<2462=2463
<2464=2465
<2466=2467
<2468=2469
<2470=2471
<2472=2473
<2474=2475
<2476=2477
<2477=2499,2478
<2478=2497,2495,2493,2491,2489,2487,2485,2483,2481,2479
<2479=2480
<2481=2482
<2483=2484
<2485=2486
<2487=2488
<2489=2490
<2491=2492
<2493=2494
<2495=2496
<2497=2498
<2499=2500
<2501=2502
<2502=2524,2503
<2503=2522,2520,2518,2516,2514,2512,2510,2508,2506,2504
<2504=2505
<2506=2507
<2508=2509
<2510=2511
<2512=2513
<2514=2515
<2516=2517
<2518=2519
<2520=2521
<2522=2523
<2524=2525
<2526=2527
<2527=2533,2528
<2528=2531,2529
<2529=2530
<2531=2532
<2533=2534
<2535=2833,2829,2826,2536
<2536=2817,2803,2776,2749,2745,2738,2731,2606,2601,2590,2586,2556,2547,2546,2545,2544,2542,2541,2540,2539,2537
<2537=2538
<2542=2543
<2547=2548
<2548=2552,2549
<2549=2550
<2550=2551
<2552=2553
<2553=2555,2554
<2556=2578,2574,2571,2557
<2557=2558
<2558=2559
<2559=2567,2560
<2560=2561
<2561=2562
<2562=2566,2563
<2563=2565,2564
<2567=2568
<2568=2570,2569
<2571=2573,2572
<2574=2575
<2575=2577,2576
<2578=2579
<2579=2580
<2580=2585,2584,2581
<2581=2583,2582
<2586=2587
<2587=2589,2588
<2590=2591
<2591=2599,2592
<2592=2597,2595,2593
<2593=2594
<2595=2596
<2597=2598
<2599=2600
<2601=2602
<2602=2604,2603
<2604=2605
<2606=2723,2719,2716,2607
<2607=2705,2696,2687,2647,2635,2625,2617,2608
<2608=2609
<2609=2613,2610
<2610=2611
<2611=2612
<2613=2614
<2614=2616,2615
<2617=2618
<2618=2622,2619
<2619=2621,2620
<2622=2624,2623
<2625=2626
<2626=2632,2627
<2627=2631,2628
<2628=2630,2629
<2632=2634,2633
<2635=2636
<2636=2638,2637
<2638=2640,2639
<2640=2642,2641
<2642=2644,2643
<2644=2646,2645
<2647=2673,2648
<2648=2672,2671,2670,2669,2668,2667,2666,2665,2664,2663,2662,2661,2660,2659,2658,2657,2656,2655,2654,2653,2652,2651,2650,2649
<2673=2674
<2674=2678,2675
<2675=2677,2676
<2678=2680,2679
<2680=2682,2681
<2682=2684,2683
<2684=2686,2685
<2687=2688
<2688=2695,2694,2689
<2689=2693,2690
<2690=2692,2691
<2696=2697
<2697=2704,2703,2698
<2698=2702,2699
<2699=2701,2700
<2705=2706
<2706=2715,2714,2707
<2707=2713,2708
<2708=2710,2709
<2710=2712,2711
<2716=2718,2717
<2719=2720
<2720=2722,2721
<2723=2724
<2724=2725
<2725=2730,2729,2726
<2726=2728,2727
<2731=2732
<2732=2737,2736,2733
<2733=2735,2734
<2738=2739
<2739=2744,2743,2740
<2740=2742,2741
<2745=2746
<2746=2748,2747
<2749=2750
<2750=2773,2751
<2751=2771,2752
<2752=2765,2759,2753
<2753=2754
<2754=2756,2755
<2756=2758,2757
<2759=2760
<2760=2762,2761
<2762=2764,2763
<2765=2766
<2766=2768,2767
<2768=2770,2769
<2771=2772
<2773=2775,2774
<2776=2777
<2777=2800,2778
<2778=2798,2779
<2779=2792,2786,2780
<2780=2781
<2781=2783,2782
<2783=2785,2784
<2786=2787
<2787=2789,2788
<2789=2791,2790
<2792=2793
<2793=2795,2794
<2795=2797,2796
<2798=2799
<2800=2802,2801
<2803=2804
<2804=2816,2815,2805
<2805=2814,2806
<2806=2808,2807
<2808=2809
<2809=2811,2810
<2811=2813,2812
<2817=2818
<2818=2825,2824,2819
<2819=2823,2820
<2820=2822,2821
<2826=2828,2827
<2829=2830
<2830=2832,2831
<2833=2834
<2834=2835
<2835=2840,2839,2836
<2836=2838,2837
<2841=2842
<2842=2847,2846,2843
<2843=2845,2844
<2848=2849
<2849=2854,2853,2850
<2850=2852,2851
<2855=2856
<2856=2860,2857
<2857=2858
<2858=2859
<2860=2861
<2862=2863
<2863=2867,2864
<2864=2865
<2865=2866
<2867=2868
<2869=3196,3192,3189,2870
<2870=3182,3175,2871
<2871=3167,2882,2872
<2872=2873
<2873=2874
<2874=2875
<2875=2879,2876
<2876=2878,2877
<2879=2881,2880
<2882=3152,3143,3136,3130,3124,3111,3086,3051,3039,3027,3015,3001,2983,2965,2954,2887,2883
<2883=2884
<2884=2886,2885
<2887=2952,2888
<2888=2889
<2889=2946,2890
<2890=2929,2891
<2891=2914,2892
<2892=2913,2912,2911,2910,2909,2908,2907,2906,2893
<2893=2894
<2894=2904,2895
<2895=2900,2896
<2896=2897
<2897=2899,2898
<2900=2901
<2901=2903,2902
<2904=2905
<2914=2915
<2915=2917,2916
<2917=2923,2918
<2918=2920,2919
<2920=2922,2921
<2923=2927,2924
<2924=2925
<2925=2926
<2927=2928
<2929=2930
<2930=2945,2944,2931
<2931=2943,2932
<2932=2938,2933
<2933=2935,2934
<2935=2937,2936
<2938=2940,2939
<2940=2942,2941
<2946=2947
<2947=2949,2948
<2949=2951,2950
<2952=2953
<2954=2955
<2955=2963,2956
<2956=2961,2957
<2957=2958
<2958=2960,2959
<2961=2962
<2963=2964
<2965=2966
<2966=2976,2967
<2967=2969,2968
<2969=2971,2970
<2971=2973,2972
<2973=2975,2974
<2976=2978,2977
<2978=2980,2979
<2980=2982,2981
<2983=2984
<2984=2994,2985
<2985=2987,2986
<2987=2989,2988
<2989=2991,2990
<2991=2993,2992
<2994=2996,2995
<2996=2998,2997
<2998=3000,2999
<3001=3002
<3002=3010,3003
<3003=3005,3004
<3005=3007,3006
<3007=3009,3008
<3010=3012,3011
<3012=3014,3013
<3015=3016
<3016=3020,3017
<3017=3019,3018
<3020=3022,3021
<3022=3024,3023
<3024=3026,3025
<3027=3028
<3028=3032,3029
<3029=3031,3030
<3032=3034,3033
<3034=3036,3035
<3036=3038,3037
<3039=3040
<3040=3044,3041
<3041=3043,3042
<3044=3046,3045
<3046=3048,3047
<3048=3050,3049
<3051=3052
<3052=3084,3053
<3053=3082,3080,3078,3076,3068,3060,3054
<3054=3055
<3055=3057,3056
<3057=3059,3058
<3060=3061
<3061=3063,3062
<3063=3065,3064
<3065=3067,3066
<3068=3069
<3069=3071,3070
<3071=3073,3072
<3073=3075,3074
<3076=3077
<3078=3079
<3080=3081
<3082=3083
<3084=3085
<3086=3087
<3087=3109,3088
<3088=3103,3095,3089
<3089=3090
<3090=3092,3091
<3092=3094,3093
<3095=3096
<3096=3098,3097
<3098=3100,3099
<3100=3102,3101
<3103=3104
<3104=3106,3105
<3106=3108,3107
<3109=3110
<3111=3112
<3112=3122,3113
<3113=3118,3114
<3114=3115
<3115=3117,3116
<3118=3119
<3119=3121,3120
<3122=3123
<3124=3125
<3125=3127,3126
<3127=3129,3128
<3130=3131
<3131=3133,3132
<3133=3135,3134
<3136=3137
<3137=3141,3138
<3138=3139
<3139=3140
<3141=3142
<3143=3144
<3144=3146,3145
<3146=3147
<3147=3149,3148
<3149=3151,3150
<3152=3153
<3153=3161,3154
<3154=3159,3155
<3155=3156
<3156=3158,3157
<3159=3160
<3161=3162
<3162=3164,3163
<3164=3166,3165
<3167=3168
<3168=3170,3169
<3170=3172,3171
<3172=3174,3173
<3175=3176
<3176=3180,3177
<3177=3178
<3178=3179
<3180=3181
<3182=3183
<3183=3187,3184
<3184=3185
<3185=3186
<3187=3188
<3189=3191,3190
<3192=3193
<3193=3195,3194
<3196=3197
<3197=3198
<3198=3203,3202,3199
<3199=3201,3200
<3204=3205
<3205=3209,3206
<3206=3207
<3207=3208
<3209=3210
<3211=3212
<3212=3217,3216,3213
<3213=3215,3214
<3218=3219
<3219=3221,3220
<3222=3223
<3223=3228,3227,3224
<3224=3226,3225
<3229=3230
<3230=3235,3234,3231
<3231=3233,3232
<3236=3237
<3237=3242,3241,3238
<3238=3240,3239
<3243=3296,3292,3289,3244
<3244=3277,3245
<3245=3269,3265,3262,3246
<3246=3247
<3247=3248
<3248=3252,3249
<3249=3251,3250
<3252=3254,3253
<3254=3260,3255
<3255=3258,3256
<3256=3257
<3258=3259
<3260=3261
<3262=3264,3263
<3265=3266
<3266=3268,3267
<3269=3270
<3270=3271
<3271=3276,3275,3272
<3272=3274,3273
<3277=3278
<3278=3288,3287,3279
<3279=3286,3280
<3280=3284,3281
<3281=3282
<3282=3283
<3284=3285
<3289=3291,3290
<3292=3293
<3293=3295,3294
<3296=3297
<3297=3298
<3298=3303,3302,3299
<3299=3301,3300
<3304=3305
<3305=3309,3306
<3306=3307
<3307=3308
<3309=3310
<3311=3312
<3312=3320,3319,3313
<3313=3318,3314
<3314=3316,3315
<3316=3317
<3321=3322
<3322=3334,3333,3323
<3323=3332,3324
<3324=3331,3325
<3325=3327,3326
<3327=3328
<3328=3330,3329
<3335=3336
<3336=3338,3337
<3338=3339
<3466=3475,3474,3467
<3467=3471,3468
<3468=3470,3469
<3471=3473,3472
<3475=3505,3494,3485,3478,3476
<3476=3477
<3478=3481,3479
<3479=3480
<3481=3482
<3482=3484,3483
<3485=3490,3486
<3486=3487
<3487=3489,3488
<3490=3491
<3491=3493,3492
<3494=3495
<3495=3504,3503,3496
<3496=3502,3497
<3497=3501,3498
<3498=3500,3499
<3505=3506
<3506=3515,3514,3507
<3507=3513,3508
<3508=3512,3509
<3509=3511,3510
<3527=3590,3589,3528
<3528=3586,3583,3580,3577,3574,3571,3568,3565,3562,3559,3556,3553,3550,3547,3544,3541,3538,3535,3532,3529
<3529=3531,3530
<3532=3534,3533
<3535=3537,3536
<3538=3540,3539
<3541=3543,3542
<3544=3546,3545
<3547=3549,3548
<3550=3552,3551
<3553=3555,3554
<3556=3558,3557
<3559=3561,3560
<3562=3564,3563
<3565=3567,3566
<3568=3570,3569
<3571=3573,3572
<3574=3576,3575
<3577=3579,3578
<3580=3582,3581
<3583=3585,3584
<3586=3588,3587
<3590=3591
<3591=3675,3639,3592
<3592=3593
<3593=3594
<3594=3595
<3595=3637,3596
<3596=3635,3633,3631,3629,3627,3625,3623,3621,3619,3617,3615,3613,3611,3609,3607,3605,3603,3601,3599,3597
<3597=3598
<3599=3600
<3601=3602
<3603=3604
<3605=3606
<3607=3608
<3609=3610
<3611=3612
<3613=3614
<3615=3616
<3617=3618
<3619=3620
<3621=3622
<3623=3624
<3625=3626
<3627=3628
<3629=3630
<3631=3632
<3633=3634
<3635=3636
<3637=3638
<3639=3640
<3640=3641
<3641=3673,3642
<3642=3671,3669,3667,3665,3663,3661,3659,3657,3655,3653,3651,3649,3647,3645,3643
<3643=3644
<3645=3646
<3647=3648
<3649=3650
<3651=3652
<3653=3654
<3655=3656
<3657=3658
<3659=3660
<3661=3662
<3663=3664
<3665=3666
<3667=3668
<3669=3670
<3671=3672
<3673=3674
<3675=3676
<3676=3678,3677
<3705=3753,3752,3706
<3706=3749,3746,3743,3740,3737,3734,3731,3728,3725,3722,3719,3716,3713,3710,3707
<3707=3709,3708
<3710=3712,3711
<3713=3715,3714
<3716=3718,3717
<3719=3721,3720
<3722=3724,3723
<3725=3727,3726
<3728=3730,3729
<3731=3733,3732
<3734=3736,3735
<3737=3739,3738
<3740=3742,3741
<3743=3745,3744
<3746=3748,3747
<3749=3751,3750
<3753=5681,5680,5679,5672,5665,5658,5651,5644,5637,5630,3768,3767,3766,3765,3763,3762,3761,3760,3758,3754
<3754=3755
<3755=3757,3756
<3758=3759
<3763=3764
<3768=3773,3769
<3769=3770
<3770=3772,3771
<3773=5603,5596,5589,5582,5552,5546,5540,5516,5509,5502,5331,5327,5323,5316,5306,5235,5225,5208,5201,5194,5187,5183,5179,4112,4111,4110,4109,4108,4107,4106,4105,4104,4103,4102,4101,4100,3827,3826,3825,3824,3822,3821,3820,3819,3817,3780,3774
<3774=3776,3775
<3776=3777
<3777=3779,3778
<3780=3809,3805,3802,3781
<3781=3782
<3782=3794,3783
<3783=3784
<3784=3785
<3785=3791,3786
<3786=3790,3787
<3787=3789,3788
<3791=3793,3792
<3794=3795
<3795=3799,3796
<3796=3798,3797
<3799=3801,3800
<3802=3804,3803
<3805=3806
<3806=3808,3807
<3809=3810
<3810=3811
<3811=3816,3815,3812
<3812=3814,3813
<3817=3818
<3822=3823
<3827=4098,3828
<3828=3875,3866,3862,3855,3838,3829
<3829=3830
<3830=3836,3831
<3831=3834,3832
<3832=3833
<3834=3835
<3836=3837
<3838=3839
<3839=3853,3840
<3840=3851,3841
<3841=3842
<3842=3846,3843
<3843=3845,3844
<3846=3850,3847
<3847=3849,3848
<3851=3852
<3853=3854
<3855=3856
<3856=3861,3857
<3857=3859,3858
<3859=3860
<3862=3863
<3863=3865,3864
<3866=3867
<3867=3874,3868
<3868=3870,3869
<3870=3871
<3871=3873,3872
<3875=4090,4079,4076,3876
<3876=4067,4066,4065,4064,4063,4062,4061,4060,4059,4058,4057,4056,4055,4054,4015,3999,3886,3877
<3877=3878
<3878=3880,3879
<3880=3881
<3881=3883,3882
<3883=3885,3884
<3886=3991,3987,3984,3887
<3887=3971,3958,3948,3931,3930,3929,3928,3927,3926,3925,3924,3923,3922,3921,3920,3919,3918,3917,3916,3915,3914,3913,3912,3911,3910,3909,3908,3907,3906,3905,3888
<3888=3889
<3889=3893,3890
<3890=3892,3891
<3893=3895,3894
<3895=3903,3896
<3896=3899,3897
<3897=3898
<3899=3900
<3900=3902,3901
<3903=3904
<3931=3933,3932
<3933=3934
<3934=3936,3935
<3936=3938,3937
<3938=3946,3939
<3939=3942,3940
<3940=3941
<3942=3943
<3943=3945,3944
<3946=3947
<3948=3949
<3949=3951,3950
<3951=3957,3952
<3952=3954,3953
<3954=3956,3955
<3958=3959
<3959=3970,3969,3960
<3960=3968,3961
<3961=3963,3962
<3963=3965,3964
<3965=3967,3966
<3971=3972
<3972=3983,3982,3973
<3973=3981,3974
<3974=3976,3975
<3976=3978,3977
<3978=3980,3979
<3984=3986,3985
<3987=3988
<3988=3990,3989
<3991=3992
<3992=3993
<3993=3998,3997,3994
<3994=3996,3995
<3999=4000
<4000=4014,4013,4001
<4001=4012,4002
<4002=4011,4003
<4003=4005,4004
<4005=4006
<4006=4008,4007
<4008=4010,4009
<4015=4050,4016
<4016=4039,4028,4017
<4017=4018
<4018=4020,4019
<4020=4026,4021
<4021=4022
<4022=4023
<4023=4025,4024
<4026=4027
<4028=4029
<4029=4031,4030
<4031=4037,4032
<4032=4033
<4033=4034
<4034=4036,4035
<4037=4038
<4039=4040
<4040=4042,4041
<4042=4048,4043
<4043=4044
<4044=4045
<4045=4047,4046
<4048=4049
<4050=4051
<4051=4053,4052
<4067=4068
<4068=4075,4074,4069
<4069=4073,4070
<4070=4072,4071
<4076=4078,4077
<4079=4080
<4080=4089,4081
<4081=4088,4082
<4082=4084,4083
<4084=4085
<4085=4087,4086
<4090=4091
<4091=4092
<4092=4097,4096,4093
<4093=4095,4094
<4098=4099
<4112=5171,5167,5164,4113
<4113=5153,5128,5099,4993,4879,4865,4858,4820,4813,4806,4802,4545,4522,4513,4512,4511,4510,4499,4486,4479,4456,4447,4446,4445,4114,4116,4117,4118,4119,4201,4208,4219,4230,4239,4254,4255,4256,4257,4258,4259,4402,4406,4410,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444
<4114=4115
<4119=4193,4189,4186,4120
<4120=4173,4166,4151,4142,4121
<4121=4122
<4122=4140,4123
<4123=4138,4134,4132,4130,4124
<4124=4125
<4125=4129,4126
<4126=4128,4127
<4130=4131
<4132=4133
<4134=4135
<4135=4137,4136
<4138=4139
<4140=4141
<4142=4143
<4143=4150,4149,4144
<4144=4148,4145
<4145=4147,4146
<4151=4156,4152
<4152=4153
<4153=4155,4154
<4156=4157
<4157=4163,4158
<4158=4160,4159
<4160=4162,4161
<4163=4165,4164
<4166=4167
<4167=4172,4171,4168
<4168=4170,4169
<4173=4174
<4174=4185,4184,4175
<4175=4183,4176
<4176=4182,4177
<4177=4179,4178
<4179=4181,4180
<4186=4188,4187
<4189=4190
<4190=4192,4191
<4193=4194
<4194=4195
<4195=4200,4199,4196
<4196=4198,4197
<4201=4202
<4202=4207,4206,4203
<4203=4205,4204
<4208=4209
<4209=4218,4217,4210
<4210=4216,4211
<4211=4213,4212
<4213=4215,4214
<4219=4220
<4220=4229,4228,4221
<4221=4227,4222
<4222=4226,4223
<4223=4225,4224
<4230=4231
<4231=4238,4237,4232
<4232=4236,4233
<4233=4235,4234
<4239=4240
<4240=4252,4241
<4241=4250,4248,4244,4242
<4242=4243
<4244=4245
<4245=4247,4246
<4248=4249
<4250=4251
<4252=4253
<4259=4394,4390,4387,4260
<4260=4369,4363,4343,4265,4261
<4261=4262
<4262=4264,4263
<4265=4337,4266
<4266=4330,4293,4267
<4267=4289,4268
<4268=4280,4269
<4269=4270
<4270=4276,4271
<4271=4272
<4272=4273
<4273=4275,4274
<4276=4277
<4277=4279,4278
<4280=4281
<4281=4285,4282
<4282=4283
<4283=4284
<4285=4286
<4286=4288,4287
<4289=4290
<4290=4292,4291
<4293=4322,4311,4308,4294
<4294=4295
<4295=4302,4296
<4296=4298,4297
<4298=4299
<4299=4301,4300
<4302=4303
<4303=4305,4304
<4305=4307,4306
<4308=4310,4309
<4311=4312
<4312=4321,4313
<4313=4320,4314
<4314=4316,4315
<4316=4317
<4317=4319,4318
<4322=4323
<4323=4324
<4324=4329,4328,4325
<4325=4327,4326
<4330=4331
<4331=4336,4335,4332
<4332=4334,4333
<4337=4338
<4338=4340,4339
<4340=4342,4341
<4343=4350,4344
<4344=4346,4345
<4346=4347
<4347=4349,4348
<4350=4351
<4351=4362,4352
<4352=4354,4353
<4354=4360,4355
<4355=4356
<4356=4357
<4357=4359,4358
<4360=4361
<4363=4365,4364
<4365=4366
<4366=4368,4367
<4369=4370
<4370=4386,4385,4371
<4371=4384,4372
<4372=4374,4373
<4374=4382,4375
<4375=4378,4376
<4376=4377
<4378=4379
<4379=4381,4380
<4382=4383
<4387=4389,4388
<4390=4391
<4391=4393,4392
<4394=4395
<4395=4396
<4396=4401,4400,4397
<4397=4399,4398
<4402=4403
<4403=4405,4404
<4406=4407
<4407=4409,4408
<4410=4411
<4411=4413,4412
<4447=4448
<4448=4455,4454,4449
<4449=4453,4450
<4450=4452,4451
<4456=4471,4467,4464,4457
<4457=4458
<4458=4459
<4459=4463,4460
<4460=4462,4461
<4464=4466,4465
<4467=4468
<4468=4470,4469
<4471=4472
<4472=4473
<4473=4478,4477,4474
<4474=4476,4475
<4479=4480
<4480=4485,4484,4481
<4481=4483,4482
<4486=4487
<4487=4498,4488
<4488=4496,4489
<4489=4494,4492,4490
<4490=4491
<4492=4493
<4494=4495
<4496=4497
<4499=4500
<4500=4509,4508,4501
<4501=4507,4502
<4502=4506,4503
<4503=4505,4504
<4513=4514
<4514=4520,4515
<4515=4518,4516
<4516=4517
<4518=4519
<4520=4521
<4522=4523
<4523=4544,4543,4524
<4524=4542,4525
<4525=4540,4526
<4526=4538,4529,4527
<4527=4528
<4529=4530
<4530=4536,4531
<4531=4532
<4532=4533
<4533=4535,4534
<4536=4537
<4538=4539
<4540=4541
<4545=4787,4772,4769,4546
<4546=4760,4547
<4547=4754,4548
<4548=4745,4735,4726,4711,4696,4681,4646,4602,4592,4582,4567,4563,4559,4553,4549
<4549=4550
<4550=4552,4551
<4553=4554
<4554=4556,4555
<4556=4558,4557
<4559=4560
<4560=4562,4561
<4563=4564
<4564=4566,4565
<4567=4568
<4568=4581,4569
<4569=4579,4570
<4570=4571
<4571=4572
<4572=4576,4573
<4573=4575,4574
<4576=4578,4577
<4579=4580
<4582=4583
<4583=4591,4584
<4584=4588,4585
<4585=4587,4586
<4588=4590,4589
<4592=4593
<4593=4601,4594
<4594=4598,4595
<4595=4597,4596
<4598=4600,4599
<4602=4644,4603
<4603=4627,4604
<4604=4605
<4605=4619,4606
<4606=4617,4615,4611,4607
<4607=4608
<4608=4610,4609
<4611=4612
<4612=4614,4613
<4615=4616
<4617=4618
<4619=4620
<4620=4622,4621
<4622=4626,4623
<4623=4625,4624
<4627=4636,4628
<4628=4635,4634,4629
<4629=4633,4630
<4630=4632,4631
<4636=4643,4642,4637
<4637=4641,4638
<4638=4640,4639
<4644=4645
<4646=4647
<4647=4679,4648
<4648=4673,4671,4665,4659,4657,4655,4653,4651,4649
<4649=4650
<4651=4652
<4653=4654
<4655=4656
<4657=4658
<4659=4660
<4660=4662,4661
<4662=4664,4663
<4665=4666
<4666=4668,4667
<4668=4670,4669
<4671=4672
<4673=4674
<4674=4678,4675
<4675=4677,4676
<4679=4680
<4681=4682
<4682=4693,4683
<4683=4691,4684
<4684=4685
<4685=4686
<4686=4690,4687
<4687=4689,4688
<4691=4692
<4693=4695,4694
<4696=4697
<4697=4708,4698
<4698=4706,4699
<4699=4700
<4700=4701
<4701=4705,4702
<4702=4704,4703
<4706=4707
<4708=4710,4709
<4711=4712
<4712=4723,4713
<4713=4721,4714
<4714=4715
<4715=4716
<4716=4720,4717
<4717=4719,4718
<4721=4722
<4723=4725,4724
<4726=4727
<4727=4734,4733,4728
<4728=4732,4729
<4729=4731,4730
<4735=4742,4739,4736
<4736=4738,4737
<4739=4741,4740
<4742=4744,4743
<4745=4750,4746
<4746=4749,4748,4747
<4750=4753,4752,4751
<4754=4755
<4755=4757,4756
<4757=4759,4758
<4760=4761
<4761=4768,4767,4762
<4762=4766,4763
<4763=4765,4764
<4769=4771,4770
<4772=4773
<4773=4786,4774
<4774=4776,4775
<4776=4777
<4777=4779,4778
<4779=4781,4780
<4781=4785,4782
<4782=4784,4783
<4787=4788
<4788=4801,4789
<4789=4791,4790
<4791=4792
<4792=4794,4793
<4794=4796,4795
<4796=4800,4797
<4797=4799,4798
<4802=4803
<4803=4805,4804
<4806=4807
<4807=4812,4811,4808
<4808=4810,4809
<4813=4814
<4814=4819,4818,4815
<4815=4817,4816
<4820=4850,4846,4843,4821
<4821=4822
<4822=4828,4823
<4823=4824
<4824=4825
<4825=4827,4826
<4828=4829
<4829=4831,4830
<4831=4833,4832
<4833=4841,4834
<4834=4837,4835
<4835=4836
<4837=4838
<4838=4840,4839
<4841=4842
<4843=4845,4844
<4846=4847
<4847=4849,4848
<4850=4851
<4851=4852
<4852=4857,4856,4853
<4853=4855,4854
<4858=4859
<4859=4864,4863,4860
<4860=4862,4861
<4865=4866
<4866=4878,4877,4867
<4867=4876,4868
<4868=4874,4869
<4869=4870
<4870=4871
<4871=4873,4872
<4874=4875
<4879=4989,4880
<4880=4978,4956,4942,4928,4902,4881
<4881=4882
<4882=4900,4883
<4883=4898,4896,4894,4892,4890,4884
<4884=4885
<4885=4887,4886
<4887=4889,4888
<4890=4891
<4892=4893
<4894=4895
<4896=4897
<4898=4899
<4900=4901
<4902=4903
<4903=4927,4926,4904
<4904=4925,4905
<4905=4913,4906
<4906=4908,4907
<4908=4910,4909
<4910=4912,4911
<4913=4923,4914
<4914=4915
<4915=4916
<4916=4920,4917
<4917=4919,4918
<4920=4922,4921
<4923=4924
<4928=4929
<4929=4941,4940,4930
<4930=4939,4931
<4931=4938,4932
<4932=4934,4933
<4934=4935
<4935=4937,4936
<4942=4943
<4943=4955,4954,4944
<4944=4953,4945
<4945=4952,4946
<4946=4948,4947
<4948=4949
<4949=4951,4950
<4956=4957
<4957=4977,4976,4975,4958
<4958=4974,4959
<4959=4973,4972,4971,4968,4967,4964,4963,4960
<4960=4962,4961
<4964=4966,4965
<4968=4970,4969
<4978=4979
<4979=4988,4987,4980
<4980=4986,4981
<4981=4983,4982
<4983=4985,4984
<4989=4990
<4990=4992,4991
<4993=5097,4994
<4994=5086,5068,5054,5040,5016,4995
<4995=4996
<4996=5014,4997
<4997=5012,5010,5008,5006,5004,4998
<4998=4999
<4999=5001,5000
<5001=5003,5002
<5004=5005
<5006=5007
<5008=5009
<5010=5011
<5012=5013
<5014=5015
<5016=5017
<5017=5039,5038,5018
<5018=5037,5019
<5019=5025,5020
<5020=5022,5021
<5022=5024,5023
<5025=5035,5026
<5026=5027
<5027=5028
<5028=5032,5029
<5029=5031,5030
<5032=5034,5033
<5035=5036
<5040=5041
<5041=5053,5052,5042
<5042=5051,5043
<5043=5050,5044
<5044=5046,5045
<5046=5047
<5047=5049,5048
<5054=5055
<5055=5067,5066,5056
<5056=5065,5057
<5057=5064,5058
<5058=5060,5059
<5060=5061
<5061=5063,5062
<5068=5069
<5069=5085,5084,5083,5070
<5070=5082,5071
<5071=5081,5080,5079,5076,5075,5072
<5072=5074,5073
<5076=5078,5077
<5086=5087
<5087=5096,5095,5088
<5088=5094,5089
<5089=5091,5090
<5091=5093,5092
<5097=5098
<5099=5100
<5100=5127,5126,5125,5101
<5101=5124,5102
<5102=5117,5110,5103
<5103=5105,5104
<5105=5107,5106
<5107=5109,5108
<5110=5112,5111
<5112=5114,5113
<5114=5116,5115
<5117=5119,5118
<5119=5121,5120
<5121=5123,5122
<5128=5129
<5129=5152,5151,5150,5130
<5130=5149,5131
<5131=5144,5143,5142,5141,5136,5135,5134,5133,5132
<5136=5138,5137
<5138=5140,5139
<5144=5146,5145
<5146=5148,5147
<5153=5154
<5154=5163,5162,5155
<5155=5161,5156
<5156=5160,5157
<5157=5159,5158
<5164=5166,5165
<5167=5168
<5168=5170,5169
<5171=5172
<5172=5173
<5173=5178,5177,5174
<5174=5176,5175
<5179=5180
<5180=5182,5181
<5183=5184
<5184=5186,5185
<5187=5188
<5188=5193,5192,5189
<5189=5191,5190
<5194=5195
<5195=5200,5199,5196
<5196=5198,5197
<5201=5202
<5202=5207,5203
<5203=5205,5204
<5205=5206
<5208=5209
<5209=5223,5210
<5210=5221,5211
<5211=5212
<5212=5216,5213
<5213=5215,5214
<5216=5220,5217
<5217=5219,5218
<5221=5222
<5223=5224
<5225=5226
<5226=5234,5233,5227
<5227=5232,5228
<5228=5230,5229
<5230=5231
<5235=5236
<5236=5304,5237
<5237=5302,5300,5298,5296,5294,5288,5286,5280,5278,5276,5274,5266,5260,5258,5256,5250,5248,5246,5244,5242,5240,5238
<5238=5239
<5240=5241
<5242=5243
<5244=5245
<5246=5247
<5248=5249
<5250=5251
<5251=5254,5253,5252
<5254=5255
<5256=5257
<5258=5259
<5260=5261
<5261=5264,5263,5262
<5264=5265
<5266=5267
<5267=5270,5269,5268
<5270=5271
<5271=5273,5272
<5274=5275
<5276=5277
<5278=5279
<5280=5281
<5281=5284,5283,5282
<5284=5285
<5286=5287
<5288=5289
<5289=5292,5291,5290
<5292=5293
<5294=5295
<5296=5297
<5298=5299
<5300=5301
<5302=5303
<5304=5305
<5306=5307
<5307=5315,5314,5308
<5308=5313,5309
<5309=5311,5310
<5311=5312
<5316=5317
<5317=5322,5321,5318
<5318=5320,5319
<5323=5324
<5324=5326,5325
<5327=5328
<5328=5330,5329
<5331=5494,5490,5487,5332
<5332=5471,5333
<5333=5467,5344,5334
<5334=5335
<5335=5336
<5336=5337
<5337=5341,5338
<5338=5340,5339
<5341=5343,5342
<5344=5363,5357,5349,5345
<5345=5346
<5346=5348,5347
<5349=5350
<5350=5354,5351
<5351=5353,5352
<5354=5356,5355
<5357=5358
<5358=5360,5359
<5360=5362,5361
<5363=5459,5455,5452,5364
<5364=5439,5430,5417,5407,5388,5369,5365
<5365=5366
<5366=5368,5367
<5369=5370
<5370=5381,5371
<5371=5373,5372
<5373=5379,5374
<5374=5377,5375
<5375=5376
<5377=5378
<5379=5380
<5381=5387,5382
<5382=5384,5383
<5384=5386,5385
<5388=5389
<5389=5400,5390
<5390=5392,5391
<5392=5398,5393
<5393=5396,5394
<5394=5395
<5396=5397
<5398=5399
<5400=5406,5401
<5401=5403,5402
<5403=5405,5404
<5407=5408
<5408=5410,5409
<5410=5416,5411
<5411=5413,5412
<5413=5415,5414
<5417=5418
<5418=5429,5428,5419
<5419=5427,5420
<5420=5422,5421
<5422=5424,5423
<5424=5426,5425
<5430=5431
<5431=5438,5437,5432
<5432=5436,5433
<5433=5435,5434
<5439=5440
<5440=5451,5450,5441
<5441=5449,5442
<5442=5444,5443
<5444=5446,5445
<5446=5448,5447
<5452=5454,5453
<5455=5456
<5456=5458,5457
<5459=5460
<5460=5461
<5461=5466,5465,5462
<5462=5464,5463
<5467=5468
<5468=5470,5469
<5471=5472
<5472=5486,5485,5473
<5473=5484,5474
<5474=5483,5475
<5475=5477,5476
<5477=5478
<5478=5480,5479
<5480=5482,5481
<5487=5489,5488
<5490=5491
<5491=5493,5492
<5494=5495
<5495=5496
<5496=5501,5500,5497
<5497=5499,5498
<5502=5503
<5503=5508,5507,5504
<5504=5506,5505
<5509=5510
<5510=5515,5514,5511
<5511=5513,5512
<5516=5532,5526,5523,5517
<5517=5518
<5518=5520,5519
<5520=5522,5521
<5523=5525,5524
<5526=5527
<5527=5531,5528
<5528=5530,5529
<5532=5533
<5533=5534
<5534=5539,5538,5535
<5535=5537,5536
<5540=5541
<5541=5545,5542
<5542=5544,5543
<5546=5547
<5547=5551,5548
<5548=5550,5549
<5552=5574,5570,5567,5553
<5553=5554
<5554=5555
<5555=5566,5556
<5556=5565,5557
<5557=5559,5558
<5559=5560
<5560=5562,5561
<5562=5564,5563
<5567=5569,5568
<5570=5571
<5571=5573,5572
<5574=5575
<5575=5576
<5576=5581,5580,5577
<5577=5579,5578
<5582=5583
<5583=5588,5587,5584
<5584=5586,5585
<5589=5590
<5590=5595,5594,5591
<5591=5593,5592
<5596=5597
<5597=5602,5601,5598
<5598=5600,5599
<5603=5624,5604
<5604=5617,5610,5606,5605
<5606=5607
<5607=5609,5608
<5610=5611
<5611=5615,5612
<5612=5613
<5613=5614
<5615=5616
<5617=5618
<5618=5622,5619
<5619=5620
<5620=5621
<5622=5623
<5624=5625
<5625=5627,5626
<5627=5629,5628
<5630=5631
<5631=5636,5635,5632
<5632=5634,5633
<5637=5638
<5638=5643,5642,5639
<5639=5641,5640
<5644=5645
<5645=5650,5649,5646
<5646=5648,5647
<5651=5652
<5652=5657,5656,5653
<5653=5655,5654
<5658=5659
<5659=5664,5663,5660
<5660=5662,5661
<5665=5666
<5666=5671,5670,5667
<5667=5669,5668
<5672=5673
<5673=5678,5677,5674
<5674=5676,5675
<5856=5862,5861,5857
<5857=5858
<5858=5860,5859
<5862=5863
<5863=5896,5892,5889,5864
<5864=5881,5873,5865
<5865=5866
<5866=5868,5867
<5868=5870,5869
<5870=5872,5871
<5873=5874
<5874=5876,5875
<5876=5878,5877
<5878=5880,5879
<5881=5882
<5882=5884,5883
<5884=5886,5885
<5886=5888,5887
<5889=5891,5890
<5892=5893
<5893=5895,5894
<5896=5897
<5897=5898
<5898=5903,5902,5899
<5899=5901,5900
<5920=5929,5928,5921
<5921=5925,5922
<5922=5924,5923
<5925=5927,5926
<5929=6274,6262,6250,6238,6226,6214,6202,6190,6152,6140,6128,6116,6104,6092,6080,6068,6060,6052,6040,6028,6016,6004,5992,5980,5968,5930
<5930=5966,5949,5931
<5931=5932
<5932=5941,5933
<5933=5934
<5934=5936,5935
<5936=5938,5937
<5938=5940,5939
<5941=5942
<5942=5944,5943
<5944=5946,5945
<5946=5948,5947
<5949=5958,5950
<5950=5951
<5951=5953,5952
<5953=5955,5954
<5955=5957,5956
<5958=5959
<5959=5961,5960
<5961=5963,5962
<5963=5965,5964
<5966=5967
<5968=5969
<5969=5975,5970
<5970=5972,5971
<5972=5974,5973
<5975=5977,5976
<5977=5979,5978
<5980=5981
<5981=5987,5982
<5982=5984,5983
<5984=5986,5985
<5987=5989,5988
<5989=5991,5990
<5992=5993
<5993=5999,5994
<5994=5996,5995
<5996=5998,5997
<5999=6001,6000
<6001=6003,6002
<6004=6005
<6005=6011,6006
<6006=6008,6007
<6008=6010,6009
<6011=6013,6012
<6013=6015,6014
<6016=6017
<6017=6023,6018
<6018=6020,6019
<6020=6022,6021
<6023=6025,6024
<6025=6027,6026
<6028=6029
<6029=6035,6030
<6030=6032,6031
<6032=6034,6033
<6035=6037,6036
<6037=6039,6038
<6040=6041
<6041=6047,6042
<6042=6044,6043
<6044=6046,6045
<6047=6049,6048
<6049=6051,6050
<6052=6053
<6053=6055,6054
<6055=6057,6056
<6057=6059,6058
<6060=6061
<6061=6063,6062
<6063=6065,6064
<6065=6067,6066
<6068=6069
<6069=6075,6070
<6070=6072,6071
<6072=6074,6073
<6075=6077,6076
<6077=6079,6078
<6080=6081
<6081=6087,6082
<6082=6084,6083
<6084=6086,6085
<6087=6089,6088
<6089=6091,6090
<6092=6093
<6093=6099,6094
<6094=6096,6095
<6096=6098,6097
<6099=6101,6100
<6101=6103,6102
<6104=6105
<6105=6111,6106
<6106=6108,6107
<6108=6110,6109
<6111=6113,6112
<6113=6115,6114
<6116=6117
<6117=6123,6118
<6118=6120,6119
<6120=6122,6121
<6123=6125,6124
<6125=6127,6126
<6128=6129
<6129=6135,6130
<6130=6132,6131
<6132=6134,6133
<6135=6137,6136
<6137=6139,6138
<6140=6141
<6141=6147,6142
<6142=6144,6143
<6144=6146,6145
<6147=6149,6148
<6149=6151,6150
<6152=6188,6171,6153
<6153=6154
<6154=6163,6155
<6155=6156
<6156=6158,6157
<6158=6160,6159
<6160=6162,6161
<6163=6164
<6164=6166,6165
<6166=6168,6167
<6168=6170,6169
<6171=6180,6172
<6172=6173
<6173=6175,6174
<6175=6177,6176
<6177=6179,6178
<6180=6181
<6181=6183,6182
<6183=6185,6184
<6185=6187,6186
<6188=6189
<6190=6191
<6191=6197,6192
<6192=6194,6193
<6194=6196,6195
<6197=6199,6198
<6199=6201,6200
<6202=6203
<6203=6209,6204
<6204=6206,6205
<6206=6208,6207
<6209=6211,6210
<6211=6213,6212
<6214=6215
<6215=6221,6216
<6216=6218,6217
<6218=6220,6219
<6221=6223,6222
<6223=6225,6224
<6226=6227
<6227=6233,6228
<6228=6230,6229
<6230=6232,6231
<6233=6235,6234
<6235=6237,6236
<6238=6239
<6239=6245,6240
<6240=6242,6241
<6242=6244,6243
<6245=6247,6246
<6247=6249,6248
<6250=6251
<6251=6257,6252
<6252=6254,6253
<6254=6256,6255
<6257=6259,6258
<6259=6261,6260
<6262=6263
<6263=6269,6264
<6264=6266,6265
<6266=6268,6267
<6269=6271,6270
<6271=6273,6272
<6274=6275
<6275=6284,6283,6276
<6276=6282,6277
<6277=6279,6278
<6279=6281,6280
<6314=6323,6322,6315
<6315=6319,6316
<6316=6318,6317
<6319=6321,6320
<6323=6324
<6324=6352,6325
<6325=6344,6334,6326
<6326=6327
<6327=6329,6328
<6329=6331,6330
<6331=6333,6332
<6334=6335
<6335=6339,6336
<6336=6338,6337
<6339=6341,6340
<6341=6343,6342
<6344=6345
<6345=6347,6346
<6347=6349,6348
<6349=6351,6350
<6352=6353
<6353=6355,6354
<6373=6400,6399,6374
<6374=6396,6393,6390,6387,6384,6381,6378,6375
<6375=6377,6376
<6378=6380,6379
<6381=6383,6382
<6384=6386,6385
<6387=6389,6388
<6390=6392,6391
<6393=6395,6394
<6396=6398,6397
<6400=7542,7482,7478,6853,6846,6839,6419,6401
<6401=6402
<6402=6417,6403
<6403=6415,6413,6404
<6404=6405
<6405=6411,6406
<6406=6407
<6407=6408
<6408=6410,6409
<6411=6412
<6413=6414
<6415=6416
<6417=6418
<6419=6831,6820,6817,6420
<6420=6784,6751,6747,6729,6722,6715,6490,6485,6474,6470,6440,6431,6430,6429,6428,6426,6425,6424,6423,6421
<6421=6422
<6426=6427
<6431=6432
<6432=6436,6433
<6433=6434
<6434=6435
<6436=6437
<6437=6439,6438
<6440=6462,6458,6455,6441
<6441=6442
<6442=6443
<6443=6451,6444
<6444=6445
<6445=6446
<6446=6450,6447
<6447=6449,6448
<6451=6452
<6452=6454,6453
<6455=6457,6456
<6458=6459
<6459=6461,6460
<6462=6463
<6463=6464
<6464=6469,6468,6465
<6465=6467,6466
<6470=6471
<6471=6473,6472
<6474=6475
<6475=6483,6476
<6476=6481,6479,6477
<6477=6478
<6479=6480
<6481=6482
<6483=6484
<6485=6486
<6486=6488,6487
<6488=6489
<6490=6707,6703,6700,6491
<6491=6687,6664,6639,6586,6577,6568,6552,6542,6532,6523,6508,6492
<6492=6502,6493
<6493=6494
<6494=6495
<6495=6497,6496
<6497=6499,6498
<6499=6501,6500
<6502=6503
<6503=6507,6504
<6504=6506,6505
<6508=6509
<6509=6522,6521,6510
<6510=6520,6511
<6511=6513,6512
<6513=6515,6514
<6515=6517,6516
<6517=6519,6518
<6523=6524
<6524=6528,6525
<6525=6526
<6526=6527
<6528=6529
<6529=6531,6530
<6532=6533
<6533=6539,6534
<6534=6538,6535
<6535=6537,6536
<6539=6541,6540
<6542=6543
<6543=6549,6544
<6544=6548,6545
<6545=6547,6546
<6549=6551,6550
<6552=6553
<6553=6555,6554
<6555=6557,6556
<6557=6561,6558
<6558=6560,6559
<6561=6563,6562
<6563=6567,6564
<6564=6566,6565
<6568=6569
<6569=6576,6575,6570
<6570=6574,6571
<6571=6573,6572
<6577=6578
<6578=6585,6584,6579
<6579=6583,6580
<6580=6582,6581
<6586=6614,6587
<6587=6588
<6588=6589
<6589=6612,6590
<6590=6610,6606,6591
<6591=6592
<6592=6605,6593
<6593=6595,6594
<6595=6596
<6596=6598,6597
<6598=6600,6599
<6600=6604,6601
<6601=6603,6602
<6606=6607
<6607=6609,6608
<6610=6611
<6612=6613
<6614=6615
<6615=6634,6616
<6616=6631,6617
<6617=6630,6618
<6618=6620,6619
<6620=6621
<6621=6623,6622
<6623=6625,6624
<6625=6629,6626
<6626=6628,6627
<6631=6633,6632
<6634=6636,6635
<6636=6638,6637
<6639=6652,6640
<6640=6641
<6641=6642
<6642=6650,6643
<6643=6648,6644
<6644=6645
<6645=6647,6646
<6648=6649
<6650=6651
<6652=6653
<6653=6659,6654
<6654=6656,6655
<6656=6658,6657
<6659=6661,6660
<6661=6663,6662
<6664=6677,6665
<6665=6666
<6666=6667
<6667=6675,6668
<6668=6673,6669
<6669=6670
<6670=6672,6671
<6673=6674
<6675=6676
<6677=6678
<6678=6682,6679
<6679=6681,6680
<6682=6686,6683
<6683=6685,6684
<6687=6688
<6688=6699,6698,6689
<6689=6697,6690
<6690=6692,6691
<6692=6694,6693
<6694=6696,6695
<6700=6702,6701
<6703=6704
<6704=6706,6705
<6707=6708
<6708=6709
<6709=6714,6713,6710
<6710=6712,6711
<6715=6716
<6716=6721,6720,6717
<6717=6719,6718
<6722=6723
<6723=6728,6727,6724
<6724=6726,6725
<6729=6730
<6730=6746,6745,6731
<6731=6744,6732
<6732=6743,6733
<6733=6735,6734
<6735=6736
<6736=6738,6737
<6738=6740,6739
<6740=6742,6741
<6747=6748
<6748=6750,6749
<6751=6752
<6752=6781,6753
<6753=6779,6754
<6754=6771,6763,6755
<6755=6756
<6756=6758,6757
<6758=6760,6759
<6760=6762,6761
<6763=6764
<6764=6766,6765
<6766=6768,6767
<6768=6770,6769
<6771=6772
<6772=6774,6773
<6774=6776,6775
<6776=6778,6777
<6779=6780
<6781=6783,6782
<6784=6785
<6785=6814,6786
<6786=6812,6787
<6787=6804,6796,6788
<6788=6789
<6789=6791,6790
<6791=6793,6792
<6793=6795,6794
<6796=6797
<6797=6799,6798
<6799=6801,6800
<6801=6803,6802
<6804=6805
<6805=6807,6806
<6807=6809,6808
<6809=6811,6810
<6812=6813
<6814=6816,6815
<6817=6819,6818
<6820=6821
<6821=6830,6822
<6822=6829,6823
<6823=6825,6824
<6825=6826
<6826=6828,6827
<6831=6832
<6832=6833
<6833=6838,6837,6834
<6834=6836,6835
<6839=6840
<6840=6845,6844,6841
<6841=6843,6842
<6846=6847
<6847=6852,6851,6848
<6848=6850,6849
<6853=7470,7466,7463,6854
<6854=6855
<6855=7455,6871,6856
<6856=6857
<6857=6858
<6858=6867,6859
<6859=6860
<6860=6864,6861
<6861=6863,6862
<6864=6866,6865
<6867=6868
<6868=6870,6869
<6871=7454,7453,7452,7451,7450,7449,7448,7447,7432,7423,7416,7410,7404,7391,7366,7331,7319,7307,7295,7281,7133,6967,6958,6943,6876,6872
<6872=6873
<6873=6875,6874
<6876=6941,6877
<6877=6878
<6878=6935,6879
<6879=6918,6880
<6880=6903,6881
<6881=6902,6901,6900,6899,6898,6897,6896,6895,6882
<6882=6883
<6883=6893,6884
<6884=6889,6885
<6885=6886
<6886=6888,6887
<6889=6890
<6890=6892,6891
<6893=6894
<6903=6904
<6904=6906,6905
<6906=6912,6907
<6907=6909,6908
<6909=6911,6910
<6912=6916,6913
<6913=6914
<6914=6915
<6916=6917
<6918=6919
<6919=6934,6933,6920
<6920=6932,6921
<6921=6927,6922
<6922=6924,6923
<6924=6926,6925
<6927=6929,6928
<6929=6931,6930
<6935=6936
<6936=6938,6937
<6938=6940,6939
<6941=6942
<6943=6956,6944
<6944=6945
<6945=6946
<6946=6954,6947
<6947=6952,6948
<6948=6949
<6949=6951,6950
<6952=6953
<6954=6955
<6956=6957
<6958=6959
<6959=6965,6960
<6960=6961
<6961=6962
<6962=6964,6963
<6965=6966
<6967=7127,6968
<6968=7104,7081,7070,7048,7032,7016,6990,6969
<6969=6970
<6970=6988,6971
<6971=6986,6984,6982,6980,6978,6972
<6972=6973
<6973=6975,6974
<6975=6977,6976
<6978=6979
<6980=6981
<6982=6983
<6984=6985
<6986=6987
<6988=6989
<6990=6991
<6991=7015,7014,6992
<6992=7013,6993
<6993=7001,6994
<6994=6996,6995
<6996=6998,6997
<6998=7000,6999
<7001=7011,7002
<7002=7003
<7003=7004
<7004=7008,7005
<7005=7007,7006
<7008=7010,7009
<7011=7012
<7016=7017
<7017=7031,7030,7018
<7018=7029,7019
<7019=7028,7020
<7020=7022,7021
<7022=7023
<7023=7025,7024
<7025=7027,7026
<7032=7033
<7033=7047,7046,7034
<7034=7045,7035
<7035=7044,7036
<7036=7038,7037
<7038=7039
<7039=7041,7040
<7041=7043,7042
<7048=7049
<7049=7069,7068,7067,7050
<7050=7066,7051
<7051=7065,7064,7063,7060,7059,7056,7055,7052
<7052=7054,7053
<7056=7058,7057
<7060=7062,7061
<7070=7071
<7071=7080,7079,7072
<7072=7078,7073
<7073=7075,7074
<7075=7077,7076
<7081=7082
<7082=7102,7083
<7083=7096,7090,7084
<7084=7085
<7085=7089,7086
<7086=7088,7087
<7090=7091
<7091=7093,7092
<7093=7095,7094
<7096=7097
<7097=7099,7098
<7099=7101,7100
<7102=7103
<7104=7105
<7105=7125,7106
<7106=7119,7113,7107
<7107=7108
<7108=7112,7109
<7109=7111,7110
<7113=7114
<7114=7116,7115
<7116=7118,7117
<7119=7120
<7120=7122,7121
<7122=7124,7123
<7125=7126
<7127=7128
<7128=7130,7129
<7130=7132,7131
<7133=7279,7134
<7134=7274,7252,7230,7212,7196,7180,7156,7135
<7135=7136
<7136=7154,7137
<7137=7152,7150,7148,7146,7144,7138
<7138=7139
<7139=7141,7140
<7141=7143,7142
<7144=7145
<7146=7147
<7148=7149
<7150=7151
<7152=7153
<7154=7155
<7156=7157
<7157=7179,7178,7158
<7158=7177,7159
<7159=7165,7160
<7160=7162,7161
<7162=7164,7163
<7165=7175,7166
<7166=7167
<7167=7168
<7168=7172,7169
<7169=7171,7170
<7172=7174,7173
<7175=7176
<7180=7181
<7181=7195,7194,7182
<7182=7193,7183
<7183=7192,7184
<7184=7186,7185
<7186=7187
<7187=7189,7188
<7189=7191,7190
<7196=7197
<7197=7211,7210,7198
<7198=7209,7199
<7199=7208,7200
<7200=7202,7201
<7202=7203
<7203=7205,7204
<7205=7207,7206
<7212=7213
<7213=7229,7228,7227,7214
<7214=7226,7215
<7215=7225,7224,7223,7220,7219,7216
<7216=7218,7217
<7220=7222,7221
<7230=7231
<7231=7249,7232
<7232=7242,7233
<7233=7235,7234
<7235=7237,7236
<7237=7239,7238
<7239=7241,7240
<7242=7244,7243
<7244=7246,7245
<7246=7248,7247
<7249=7251,7250
<7252=7253
<7253=7271,7254
<7254=7264,7255
<7255=7257,7256
<7257=7259,7258
<7259=7261,7260
<7261=7263,7262
<7264=7266,7265
<7266=7268,7267
<7268=7270,7269
<7271=7273,7272
<7274=7275
<7275=7278,7277,7276
<7279=7280
<7281=7282
<7282=7290,7283
<7283=7285,7284
<7285=7287,7286
<7287=7289,7288
<7290=7292,7291
<7292=7294,7293
<7295=7296
<7296=7300,7297
<7297=7299,7298
<7300=7302,7301
<7302=7304,7303
<7304=7306,7305
<7307=7308
<7308=7312,7309
<7309=7311,7310
<7312=7314,7313
<7314=7316,7315
<7316=7318,7317
<7319=7320
<7320=7324,7321
<7321=7323,7322
<7324=7326,7325
<7326=7328,7327
<7328=7330,7329
<7331=7332
<7332=7364,7333
<7333=7362,7360,7358,7356,7348,7340,7334
<7334=7335
<7335=7337,7336
<7337=7339,7338
<7340=7341
<7341=7343,7342
<7343=7345,7344
<7345=7347,7346
<7348=7349
<7349=7351,7350
<7351=7353,7352
<7353=7355,7354
<7356=7357
<7358=7359
<7360=7361
<7362=7363
<7364=7365
<7366=7367
<7367=7389,7368
<7368=7383,7375,7369
<7369=7370
<7370=7372,7371
<7372=7374,7373
<7375=7376
<7376=7378,7377
<7378=7380,7379
<7380=7382,7381
<7383=7384
<7384=7386,7385
<7386=7388,7387
<7389=7390
<7391=7392
<7392=7402,7393
<7393=7398,7394
<7394=7395
<7395=7397,7396
<7398=7399
<7399=7401,7400
<7402=7403
<7404=7405
<7405=7407,7406
<7407=7409,7408
<7410=7411
<7411=7413,7412
<7413=7415,7414
<7416=7417
<7417=7421,7418
<7418=7419
<7419=7420
<7421=7422
<7423=7424
<7424=7426,7425
<7426=7427
<7427=7429,7428
<7429=7431,7430
<7432=7433
<7433=7441,7434
<7434=7439,7435
<7435=7436
<7436=7438,7437
<7439=7440
<7441=7442
<7442=7444,7443
<7444=7446,7445
<7455=7456
<7456=7458,7457
<7458=7460,7459
<7460=7462,7461
<7463=7465,7464
<7466=7467
<7467=7469,7468
<7470=7471
<7471=7472
<7472=7477,7476,7473
<7473=7475,7474
<7478=7479
<7479=7481,7480
<7482=7534,7530,7527,7483
<7483=7523,7484
<7484=7510,7497,7494,7485
<7485=7486
<7486=7487
<7487=7491,7488
<7488=7490,7489
<7491=7493,7492
<7494=7496,7495
<7497=7498
<7498=7509,7499
<7499=7501,7500
<7501=7502
<7502=7504,7503
<7504=7506,7505
<7506=7508,7507
<7510=7511
<7511=7522,7512
<7512=7514,7513
<7514=7515
<7515=7517,7516
<7517=7519,7518
<7519=7521,7520
<7523=7524
<7524=7526,7525
<7527=7529,7528
<7530=7531
<7531=7533,7532
<7534=7535
<7535=7536
<7536=7541,7540,7537
<7537=7539,7538
<7542=7543
<7543=7551,7550,7544
<7544=7549,7545
<7545=7547,7546
<7547=7548
<7675=7693,7692,7676
<7676=7689,7686,7683,7680,7677
<7677=7679,7678
<7680=7682,7681
<7683=7685,7684
<7686=7688,7687
<7689=7691,7690
<7693=7816,7694
<7694=7808,7804,7801,7695
<7695=7792,7780,7696
<7696=7772,7768,7765,7697
<7697=7749,7698
<7698=7745,7699
<7699=7735,7700
<7700=7701
<7701=7728,7702
<7702=7726,7703
<7703=7715,7704
<7704=7705
<7705=7707,7706
<7707=7713,7708
<7708=7711,7709
<7709=7710
<7711=7712
<7713=7714
<7715=7716
<7716=7718,7717
<7718=7724,7719
<7719=7722,7720
<7720=7721
<7722=7723
<7724=7725
<7726=7727
<7728=7734,7729
<7729=7731,7730
<7731=7733,7732
<7735=7736
<7736=7738,7737
<7738=7744,7739
<7739=7741,7740
<7741=7743,7742
<7745=7746
<7746=7748,7747
<7749=7750
<7750=7764,7763,7751
<7751=7762,7752
<7752=7754,7753
<7754=7760,7755
<7755=7758,7756
<7756=7757
<7758=7759
<7760=7761
<7765=7767,7766
<7768=7769
<7769=7771,7770
<7772=7773
<7773=7774
<7774=7779,7778,7775
<7775=7777,7776
<7780=7781
<7781=7791,7790,7782
<7782=7789,7783
<7783=7787,7784
<7784=7785
<7785=7786
<7787=7788
<7792=7793
<7793=7800,7799,7794
<7794=7798,7795
<7795=7797,7796
<7801=7803,7802
<7804=7805
<7805=7807,7806
<7808=7809
<7809=7810
<7810=7815,7814,7811
<7811=7813,7812
<7816=7832,7826,7823,7817
<7817=7818
<7818=7820,7819
<7820=7822,7821
<7823=7825,7824
<7826=7827
<7827=7831,7828
<7828=7830,7829
<7832=7833
<7833=7834
<7834=7839,7838,7835
<7835=7837,7836
<7865=7883,7882,7866
<7866=7879,7876,7873,7870,7867
<7867=7869,7868
<7870=7872,7871
<7873=7875,7874
<7876=7878,7877
<7879=7881,7880
<7883=8844,8837,8815,8675,8671,8662,8655,8649,8642,8635,8628,8602,8180,8173,8143,8129,7999,7957,7951,7945,7930,7913,7906,7905,7904,7903,7901,7900,7899,7898,7896,7895,7894,7893,7891,7890,7889,7888,7886,7884
<7884=7885
<7886=7887
<7891=7892
<7896=7897
<7901=7902
<7906=7907
<7907=7911,7908
<7908=7909
<7909=7910
<7911=7912
<7913=7914
<7914=7928,7915
<7915=7926,7924,7920,7916
<7916=7917
<7917=7919,7918
<7920=7921
<7921=7923,7922
<7924=7925
<7926=7927
<7928=7929
<7930=7939,7931
<7931=7932
<7932=7933
<7933=7937,7934
<7934=7935
<7935=7936
<7937=7938
<7939=7940
<7940=7944,7941
<7941=7943,7942
<7945=7946
<7946=7950,7947
<7947=7949,7948
<7951=7952
<7952=7956,7953
<7953=7955,7954
<7957=7993,7958
<7958=7987,7983,7982,7981,7980,7978,7977,7976,7975,7973,7972,7971,7970,7968,7967,7966,7965,7963,7959
<7959=7960
<7960=7962,7961
<7963=7964
<7968=7969
<7973=7974
<7978=7979
<7983=7984
<7984=7986,7985
<7987=7988
<7988=7992,7989
<7989=7991,7990
<7993=7994
<7994=7998,7995
<7995=7997,7996
<7999=8121,8117,8114,8000
<8000=8106,8089,8082,8066,8057,8001
<8001=8051,8042,8002
<8002=8003
<8003=8038,8019,8004
<8004=8005
<8005=8015,8006
<8006=8011,8007
<8007=8008
<8008=8010,8009
<8011=8012
<8012=8014,8013
<8015=8016
<8016=8018,8017
<8019=8020
<8020=8030,8021
<8021=8026,8022
<8022=8023
<8023=8025,8024
<8026=8027
<8027=8029,8028
<8030=8031
<8031=8035,8032
<8032=8034,8033
<8035=8037,8036
<8038=8039
<8039=8041,8040
<8042=8047,8043
<8043=8044
<8044=8046,8045
<8047=8048
<8048=8050,8049
<8051=8052
<8052=8056,8053
<8053=8055,8054
<8057=8058
<8058=8065,8064,8059
<8059=8063,8060
<8060=8062,8061
<8066=8068,8067
<8068=8069
<8069=8075,8070
<8070=8072,8071
<8072=8074,8073
<8075=8079,8076
<8076=8078,8077
<8079=8081,8080
<8082=8083
<8083=8087,8084
<8084=8085
<8085=8086
<8087=8088
<8089=8090
<8090=8104,8091
<8091=8102,8100,8096,8092
<8092=8093
<8093=8095,8094
<8096=8097
<8097=8099,8098
<8100=8101
<8102=8103
<8104=8105
<8106=8108,8107
<8108=8109
<8109=8111,8110
<8111=8113,8112
<8114=8116,8115
<8117=8118
<8118=8120,8119
<8121=8122
<8122=8123
<8123=8128,8127,8124
<8124=8126,8125
<8129=8139,8130
<8130=8135,8131
<8131=8132
<8132=8134,8133
<8135=8136
<8136=8138,8137
<8139=8140
<8140=8142,8141
<8143=8165,8161,8158,8144
<8144=8145
<8145=8152,8146
<8146=8147
<8147=8151,8148
<8148=8150,8149
<8152=8153
<8153=8155,8154
<8155=8157,8156
<8158=8160,8159
<8161=8162
<8162=8164,8163
<8165=8166
<8166=8167
<8167=8172,8171,8168
<8168=8170,8169
<8173=8174
<8174=8179,8178,8175
<8175=8177,8176
<8180=8594,8590,8587,8181
<8181=8579,8567,8560,8530,8526,8519,8497,8490,8483,8474,8286,8270,8199,8193,8187,8186,8185,8184,8182
<8182=8183
<8187=8188
<8188=8190,8189
<8190=8192,8191
<8193=8194
<8194=8196,8195
<8196=8198,8197
<8199=8262,8258,8255,8200
<8200=8249,8240,8226,8212,8201
<8201=8208,8202
<8202=8203
<8203=8205,8204
<8205=8207,8206
<8208=8209
<8209=8211,8210
<8212=8213
<8213=8225,8224,8214
<8214=8223,8215
<8215=8219,8216
<8216=8217
<8217=8218
<8219=8220
<8220=8222,8221
<8226=8227
<8227=8239,8238,8228
<8228=8237,8229
<8229=8235,8230
<8230=8233,8231
<8231=8232
<8233=8234
<8235=8236
<8240=8241
<8241=8247,8242
<8242=8245,8243
<8243=8244
<8245=8246
<8247=8248
<8249=8251,8250
<8251=8252
<8252=8254,8253
<8255=8257,8256
<8258=8259
<8259=8261,8260
<8262=8263
<8263=8264
<8264=8269,8268,8265
<8265=8267,8266
<8270=8282,8271
<8271=8272
<8272=8280,8273
<8273=8278,8276,8274
<8274=8275
<8276=8277
<8278=8279
<8280=8281
<8282=8283
<8283=8285,8284
<8286=8466,8462,8459,8287
<8287=8450,8436,8427,8413,8406,8392,8311,8297,8288
<8288=8289
<8289=8293,8290
<8290=8291
<8291=8292
<8293=8294
<8294=8296,8295
<8297=8307,8298
<8298=8303,8299
<8299=8300
<8300=8302,8301
<8303=8304
<8304=8306,8305
<8307=8308
<8308=8310,8309
<8311=8384,8380,8377,8312
<8312=8366,8313
<8313=8353,8314
<8314=8337,8319,8315
<8315=8316
<8316=8318,8317
<8319=8331,8320
<8320=8327,8321
<8321=8322
<8322=8324,8323
<8324=8326,8325
<8327=8328
<8328=8330,8329
<8331=8332
<8332=8334,8333
<8334=8336,8335
<8337=8338
<8338=8352,8351,8339
<8339=8350,8340
<8340=8342,8341
<8342=8348,8343
<8343=8346,8344
<8344=8345
<8346=8347
<8348=8349
<8353=8354
<8354=8356,8355
<8356=8358,8357
<8358=8364,8359
<8359=8362,8360
<8360=8361
<8362=8363
<8364=8365
<8366=8367
<8367=8376,8375,8368
<8368=8374,8369
<8369=8371,8370
<8371=8373,8372
<8377=8379,8378
<8380=8381
<8381=8383,8382
<8384=8385
<8385=8386
<8386=8391,8390,8387
<8387=8389,8388
<8392=8393
<8393=8405,8404,8394
<8394=8403,8395
<8395=8399,8396
<8396=8397
<8397=8398
<8399=8400
<8400=8402,8401
<8406=8407
<8407=8412,8411,8408
<8408=8410,8409
<8413=8414
<8414=8426,8425,8415
<8415=8424,8416
<8416=8420,8417
<8417=8418
<8418=8419
<8420=8421
<8421=8423,8422
<8427=8428
<8428=8434,8429
<8429=8432,8430
<8430=8431
<8432=8433
<8434=8435
<8436=8437
<8437=8449,8448,8438
<8438=8447,8439
<8439=8445,8440
<8440=8443,8441
<8441=8442
<8443=8444
<8445=8446
<8450=8451
<8451=8458,8457,8452
<8452=8456,8453
<8453=8455,8454
<8459=8461,8460
<8462=8463
<8463=8465,8464
<8466=8467
<8467=8468
<8468=8473,8472,8469
<8469=8471,8470
<8474=8475
<8475=8482,8481,8476
<8476=8480,8477
<8477=8479,8478
<8483=8484
<8484=8489,8488,8485
<8485=8487,8486
<8490=8491
<8491=8496,8495,8492
<8492=8494,8493
<8497=8511,8507,8504,8498
<8498=8499
<8499=8501,8500
<8501=8503,8502
<8504=8506,8505
<8507=8508
<8508=8510,8509
<8511=8512
<8512=8513
<8513=8518,8517,8514
<8514=8516,8515
<8519=8520
<8520=8525,8524,8521
<8521=8523,8522
<8526=8528,8527
<8528=8529
<8530=8552,8548,8545,8531
<8531=8532
<8532=8539,8533
<8533=8535,8534
<8535=8536
<8536=8538,8537
<8539=8540
<8540=8542,8541
<8542=8544,8543
<8545=8547,8546
<8548=8549
<8549=8551,8550
<8552=8553
<8553=8554
<8554=8559,8558,8555
<8555=8557,8556
<8560=8561
<8561=8566,8565,8562
<8562=8564,8563
<8567=8569,8568
<8569=8570
<8570=8578,8571
<8571=8577,8572
<8572=8574,8573
<8574=8576,8575
<8579=8581,8580
<8581=8582
<8582=8584,8583
<8584=8586,8585
<8587=8589,8588
<8590=8591
<8591=8593,8592
<8594=8595
<8595=8596
<8596=8601,8600,8597
<8597=8599,8598
<8602=8620,8616,8613,8603
<8603=8604
<8604=8610,8605
<8605=8607,8606
<8607=8609,8608
<8610=8612,8611
<8613=8615,8614
<8616=8617
<8617=8619,8618
<8620=8621
<8621=8622
<8622=8627,8626,8623
<8623=8625,8624
<8628=8629
<8629=8634,8633,8630
<8630=8632,8631
<8635=8636
<8636=8641,8640,8637
<8637=8639,8638
<8642=8643
<8643=8648,8647,8644
<8644=8646,8645
<8649=8650
<8650=8654,8651
<8651=8653,8652
<8655=8656
<8656=8661,8660,8657
<8657=8659,8658
<8662=8663
<8663=8670,8669,8664
<8664=8668,8665
<8665=8667,8666
<8671=8672
<8672=8674,8673
<8675=8807,8803,8800,8676
<8676=8793,8763,8752,8677
<8677=8744,8740,8737,8678
<8678=8728,8714,8700,8688,8679
<8679=8680
<8680=8684,8681
<8681=8682
<8682=8683
<8684=8685
<8685=8687,8686
<8688=8696,8689
<8689=8690
<8690=8691
<8691=8693,8692
<8693=8695,8694
<8696=8697
<8697=8699,8698
<8700=8701
<8701=8713,8712,8702
<8702=8711,8703
<8703=8707,8704
<8704=8705
<8705=8706
<8707=8708
<8708=8710,8709
<8714=8715
<8715=8727,8726,8716
<8716=8725,8717
<8717=8723,8718
<8718=8721,8719
<8719=8720
<8721=8722
<8723=8724
<8728=8729
<8729=8735,8730
<8730=8733,8731
<8731=8732
<8733=8734
<8735=8736
<8737=8739,8738
<8740=8741
<8741=8743,8742
<8744=8745
<8745=8746
<8746=8751,8750,8747
<8747=8749,8748
<8752=8761,8755,8753
<8753=8754
<8755=8756
<8756=8758,8757
<8758=8760,8759
<8761=8762
<8763=8785,8781,8778,8764
<8764=8765
<8765=8772,8766
<8766=8768,8767
<8768=8769
<8769=8771,8770
<8772=8773
<8773=8775,8774
<8775=8777,8776
<8778=8780,8779
<8781=8782
<8782=8784,8783
<8785=8786
<8786=8787
<8787=8792,8791,8788
<8788=8790,8789
<8793=8794
<8794=8799,8798,8795
<8795=8797,8796
<8800=8802,8801
<8803=8804
<8804=8806,8805
<8807=8808
<8808=8809
<8809=8814,8813,8810
<8810=8812,8811
<8815=8829,8825,8822,8816
<8816=8817
<8817=8819,8818
<8819=8821,8820
<8822=8824,8823
<8825=8826
<8826=8828,8827
<8829=8830
<8830=8831
<8831=8836,8835,8832
<8832=8834,8833
<8837=8838
<8838=8843,8842,8839
<8839=8841,8840
<8844=8845
<8845=8853,8852,8846
<8846=8851,8847
<8847=8849,8848
<8849=8850
<8914=8935,8934,8915
<8915=8931,8928,8925,8922,8919,8916
<8916=8918,8917
<8919=8921,8920
<8922=8924,8923
<8925=8927,8926
<8928=8930,8929
<8931=8933,8932
<8935=9231,9222,9215,9209,9199,8953,8938,8936
<8936=8937
<8938=8947,8939
<8939=8940
<8940=8941
<8941=8945,8942
<8942=8943
<8943=8944
<8945=8946
<8947=8948
<8948=8952,8949
<8949=8951,8950
<8953=9191,9187,9184,8954
<8954=9176,9164,9157,9127,9123,9116,9107,9096,9082,9016,9000,8993,8977,8955
<8955=8973,8956
<8956=8969,8965,8961,8957
<8957=8958
<8958=8960,8959
<8961=8962
<8962=8964,8963
<8965=8966
<8966=8968,8967
<8969=8970
<8970=8972,8971
<8973=8974
<8974=8976,8975
<8977=8989,8978
<8978=8979
<8979=8987,8980
<8980=8985,8983,8981
<8981=8982
<8983=8984
<8985=8986
<8987=8988
<8989=8990
<8990=8992,8991
<8993=8994
<8994=8999,8998,8995
<8995=8997,8996
<9000=9012,9001
<9001=9002
<9002=9010,9003
<9003=9008,9006,9004
<9004=9005
<9006=9007
<9008=9009
<9010=9011
<9012=9013
<9013=9015,9014
<9016=9074,9070,9067,9017
<9017=9058,9048,9037,9022,9018
<9018=9019
<9019=9021,9020
<9022=9024,9023
<9024=9025
<9025=9027,9026
<9027=9036,9028
<9028=9030,9029
<9030=9031
<9031=9033,9032
<9033=9035,9034
<9037=9038
<9038=9047,9046,9039
<9039=9045,9040
<9040=9042,9041
<9042=9044,9043
<9048=9050,9049
<9050=9051
<9051=9053,9052
<9053=9055,9054
<9055=9057,9056
<9058=9059
<9059=9066,9065,9060
<9060=9064,9061
<9061=9063,9062
<9067=9069,9068
<9070=9071
<9071=9073,9072
<9074=9075
<9075=9076
<9076=9081,9080,9077
<9077=9079,9078
<9082=9083
<9083=9095,9094,9084
<9084=9093,9085
<9085=9092,9086
<9086=9088,9087
<9088=9089
<9089=9091,9090
<9096=9097
<9097=9106,9105,9098
<9098=9104,9099
<9099=9101,9100
<9101=9103,9102
<9107=9108
<9108=9115,9114,9109
<9109=9113,9110
<9110=9112,9111
<9116=9117
<9117=9122,9121,9118
<9118=9120,9119
<9123=9125,9124
<9125=9126
<9127=9149,9145,9142,9128
<9128=9129
<9129=9136,9130
<9130=9132,9131
<9132=9133
<9133=9135,9134
<9136=9137
<9137=9139,9138
<9139=9141,9140
<9142=9144,9143
<9145=9146
<9146=9148,9147
<9149=9150
<9150=9151
<9151=9156,9155,9152
<9152=9154,9153
<9157=9158
<9158=9163,9162,9159
<9159=9161,9160
<9164=9166,9165
<9166=9167
<9167=9175,9168
<9168=9174,9169
<9169=9171,9170
<9171=9173,9172
<9176=9178,9177
<9178=9179
<9179=9181,9180
<9181=9183,9182
<9184=9186,9185
<9187=9188
<9188=9190,9189
<9191=9192
<9192=9193
<9193=9198,9197,9194
<9194=9196,9195
<9199=9200
<9200=9208,9207,9201
<9201=9206,9202
<9202=9204,9203
<9204=9205
<9209=9210
<9210=9214,9211
<9211=9213,9212
<9215=9216
<9216=9221,9220,9217
<9217=9219,9218
<9222=9223
<9223=9230,9229,9224
<9224=9228,9225
<9225=9227,9226
<9231=9232
<9232=9234,9233
<9278=9296,9295,9279
<9279=9292,9289,9286,9283,9280
<9280=9282,9281
<9283=9285,9284
<9286=9288,9287
<9289=9291,9290
<9292=9294,9293
<9296=9515,9505,9299,9297
<9297=9298
<9299=9497,9493,9490,9300
<9300=9482,9470,9463,9433,9429,9422,9413,9402,9388,9322,9301
<9301=9318,9302
<9302=9303
<9303=9314,9304
<9304=9305
<9305=9306
<9306=9312,9307
<9307=9310,9308
<9308=9309
<9310=9311
<9312=9313
<9314=9315
<9315=9317,9316
<9318=9319
<9319=9321,9320
<9322=9380,9376,9373,9323
<9323=9364,9354,9343,9328,9324
<9324=9325
<9325=9327,9326
<9328=9330,9329
<9330=9331
<9331=9333,9332
<9333=9342,9334
<9334=9336,9335
<9336=9337
<9337=9339,9338
<9339=9341,9340
<9343=9344
<9344=9353,9352,9345
<9345=9351,9346
<9346=9348,9347
<9348=9350,9349
<9354=9356,9355
<9356=9357
<9357=9359,9358
<9359=9361,9360
<9361=9363,9362
<9364=9365
<9365=9372,9371,9366
<9366=9370,9367
<9367=9369,9368
<9373=9375,9374
<9376=9377
<9377=9379,9378
<9380=9381
<9381=9382
<9382=9387,9386,9383
<9383=9385,9384
<9388=9389
<9389=9401,9400,9390
<9390=9399,9391
<9391=9398,9392
<9392=9394,9393
<9394=9395
<9395=9397,9396
<9402=9403
<9403=9412,9411,9404
<9404=9410,9405
<9405=9407,9406
<9407=9409,9408
<9413=9414
<9414=9421,9420,9415
<9415=9419,9416
<9416=9418,9417
<9422=9423
<9423=9428,9427,9424
<9424=9426,9425
<9429=9431,9430
<9431=9432
<9433=9455,9451,9448,9434
<9434=9435
<9435=9442,9436
<9436=9438,9437
<9438=9439
<9439=9441,9440
<9442=9443
<9443=9445,9444
<9445=9447,9446
<9448=9450,9449
<9451=9452
<9452=9454,9453
<9455=9456
<9456=9457
<9457=9462,9461,9458
<9458=9460,9459
<9463=9464
<9464=9469,9468,9465
<9465=9467,9466
<9470=9472,9471
<9472=9473
<9473=9481,9474
<9474=9480,9475
<9475=9477,9476
<9477=9479,9478
<9482=9484,9483
<9484=9485
<9485=9487,9486
<9487=9489,9488
<9490=9492,9491
<9493=9494
<9494=9496,9495
<9497=9498
<9498=9499
<9499=9504,9503,9500
<9500=9502,9501
<9505=9506
<9506=9514,9513,9507
<9507=9512,9508
<9508=9510,9509
<9510=9511
<9515=9516
<9516=9518,9517
<9560=9572,9571,9561
<9561=9568,9565,9562
<9562=9564,9563
<9565=9567,9566
<9568=9570,9569
<9572=10055,10048,10041,10034,10027,10019,10010,10001,9992,9983,9942,9938,9924,9917,9691,9657,9573
<9573=9645,9574
<9574=9575
<9575=9633,9586,9576
<9576=9577
<9577=9582,9578
<9578=9579
<9579=9581,9580
<9582=9583
<9583=9585,9584
<9586=9626,9587
<9587=9624,9605,9588
<9588=9589
<9589=9598,9594,9590
<9590=9591
<9591=9593,9592
<9594=9595
<9595=9597,9596
<9598=9599
<9599=9603,9600
<9600=9601
<9601=9602
<9603=9604
<9605=9617,9606
<9606=9607
<9607=9615,9608
<9608=9613,9611,9609
<9609=9610
<9611=9612
<9613=9614
<9615=9616
<9617=9618
<9618=9622,9619
<9619=9620
<9620=9621
<9622=9623
<9624=9625
<9626=9627
<9627=9631,9628
<9628=9629
<9629=9630
<9631=9632
<9633=9634
<9634=9640,9635
<9635=9639,9636
<9636=9638,9637
<9640=9644,9641
<9641=9643,9642
<9645=9646
<9646=9652,9647
<9647=9651,9648
<9648=9650,9649
<9652=9656,9653
<9653=9655,9654
<9657=9683,9672,9669,9658
<9658=9659
<9659=9660
<9660=9664,9661
<9661=9663,9662
<9664=9666,9665
<9666=9668,9667
<9669=9671,9670
<9672=9673
<9673=9682,9674
<9674=9681,9675
<9675=9677,9676
<9677=9678
<9678=9680,9679
<9683=9684
<9684=9685
<9685=9690,9689,9686
<9686=9688,9687
<9691=9909,9905,9902,9692
<9692=9894,9880,9693
<9693=9870,9866,9863,9694
<9694=9855,9841,9827,9813,9809,9808,9807,9806,9805,9804,9803,9802,9801,9800,9793,9786,9747,9721,9695
<9695=9713,9696
<9696=9709,9705,9701,9697
<9697=9698
<9698=9700,9699
<9701=9702
<9702=9704,9703
<9705=9706
<9706=9708,9707
<9709=9710
<9710=9712,9711
<9713=9714
<9714=9718,9715
<9715=9717,9716
<9718=9720,9719
<9721=9739,9722
<9722=9735,9731,9727,9723
<9723=9724
<9724=9726,9725
<9727=9728
<9728=9730,9729
<9731=9732
<9732=9734,9733
<9735=9736
<9736=9738,9737
<9739=9740
<9740=9744,9741
<9741=9743,9742
<9744=9746,9745
<9747=9784,9783,9748
<9748=9749
<9749=9772,9750
<9750=9768,9763,9751
<9751=9752
<9752=9753
<9753=9754
<9754=9762,9755
<9755=9761,9756
<9756=9758,9757
<9758=9760,9759
<9763=9764
<9764=9765
<9765=9767,9766
<9768=9769
<9769=9771,9770
<9772=9773
<9773=9782,9781,9774
<9774=9780,9775
<9775=9777,9776
<9777=9779,9778
<9784=9785
<9786=9787
<9787=9792,9791,9788
<9788=9790,9789
<9793=9796,9794
<9794=9795
<9796=9797
<9797=9799,9798
<9809=9810
<9810=9812,9811
<9813=9814
<9814=9826,9825,9815
<9815=9824,9816
<9816=9822,9817
<9817=9820,9818
<9818=9819
<9820=9821
<9822=9823
<9827=9828
<9828=9840,9839,9829
<9829=9838,9830
<9830=9836,9831
<9831=9834,9832
<9832=9833
<9834=9835
<9836=9837
<9841=9843,9842
<9843=9844
<9844=9854,9845
<9845=9853,9846
<9846=9852,9847
<9847=9849,9848
<9849=9851,9850
<9855=9857,9856
<9857=9858
<9858=9860,9859
<9860=9862,9861
<9863=9865,9864
<9866=9867
<9867=9869,9868
<9870=9871
<9871=9872
<9872=9879,9878,9873
<9873=9877,9874
<9874=9876,9875
<9880=9882,9881
<9882=9883
<9883=9893,9884
<9884=9892,9885
<9885=9891,9886
<9886=9888,9887
<9888=9890,9889
<9894=9896,9895
<9896=9897
<9897=9899,9898
<9899=9901,9900
<9902=9904,9903
<9905=9906
<9906=9908,9907
<9909=9910
<9910=9911
<9911=9916,9915,9912
<9912=9914,9913
<9917=9918
<9918=9923,9922,9919
<9919=9921,9920
<9924=9936,9931,9925
<9925=9926
<9926=9927
<9927=9928
<9928=9930,9929
<9931=9932
<9932=9933
<9933=9935,9934
<9936=9937
<9938=9939
<9939=9941,9940
<9942=9967,9943
<9943=9961,9955,9954,9953,9952,9951,9950,9949,9948,9947,9946,9945,9944
<9955=9956
<9956=9960,9957
<9957=9959,9958
<9961=9962
<9962=9966,9963
<9963=9965,9964
<9967=9968
<9968=9976,9969
<9969=9973,9970
<9970=9972,9971
<9973=9975,9974
<9976=9980,9977
<9977=9979,9978
<9980=9982,9981
<9983=9984
<9984=9991,9990,9985
<9985=9989,9986
<9986=9988,9987
<9992=9993
<9993=10000,9999,9994
<9994=9998,9995
<9995=9997,9996
<10001=10002
<10002=10009,10008,10003
<10003=10007,10004
<10004=10006,10005
<10010=10011
<10011=10018,10017,10012
<10012=10016,10013
<10013=10015,10014
<10019=10020
<10020=10026,10021
<10021=10025,10022
<10022=10024,10023
<10027=10028
<10028=10033,10032,10029
<10029=10031,10030
<10034=10035
<10035=10040,10039,10036
<10036=10038,10037
<10041=10042
<10042=10047,10046,10043
<10043=10045,10044
<10048=10049
<10049=10054,10053,10050
<10050=10052,10051
<10055=10056
<10056=10064,10063,10057
<10057=10062,10058
<10058=10060,10059
<10060=10061
<10115=10142,10141,10116
<10116=10138,10135,10132,10129,10126,10123,10120,10117
<10117=10119,10118
<10120=10122,10121
<10123=10125,10124
<10126=10127,10128
<10129=10131,10130
<10132=10134,10133
<10135=10137,10136
<10138=10140,10139
<10142=11377,11362,11353,11344,11335,11328,11321,11308,11295,11284,11273,11263,11253,11243,11233,11223,11213,11203,11193,11183,11143,11103,11063,11025,10987,10980,10722,10692,10685,10678,10664,10650,10638,10154,10145,10143
<10143=10144
<10145=10146
<10146=10150,10147
<10147=10148
<10148=10149
<10150=10151
<10151=10153,10152
<10154=10630,10626,10623,10155
<10155=10612,10601,10585,10569,10553,10537,10521,10505,10484,10324,10308,10292,10276,10255,10242,10229,10213,10205,10201,10185,10169,10160,10156
<10156=10157
<10157=10159,10158
<10160=10161
<10161=10165,10162
<10162=10163
<10163=10164
<10165=10166
<10166=10168,10167
<10169=10170
<10170=10181,10171
<10171=10172
<10172=10173
<10173=10179,10174
<10174=10177,10175
<10175=10176
<10177=10178
<10179=10180
<10181=10182
<10182=10184,10183
<10185=10186
<10186=10197,10187
<10187=10188
<10188=10189
<10189=10195,10190
<10190=10193,10191
<10191=10192
<10193=10194
<10195=10196
<10197=10198
<10198=10200,10199
<10201=10202
<10202=10204,10203
<10205=10206
<10206=10208,10207
<10208=10210,10209
<10210=10212,10211
<10213=10214
<10214=10228,10227,10215
<10215=10226,10216
<10216=10218,10217
<10218=10224,10219
<10219=10222,10220
<10220=10221
<10222=10223
<10224=10225
<10229=10230
<10230=10232,10231
<10232=10234,10233
<10234=10240,10235
<10235=10238,10236
<10236=10237
<10238=10239
<10240=10241
<10242=10243
<10243=10245,10244
<10245=10247,10246
<10247=10253,10248
<10248=10251,10249
<10249=10250
<10251=10252
<10253=10254
<10255=10256
<10256=10273,10257
<10257=10271,10258
<10258=10267,10263,10259
<10259=10260
<10260=10262,10261
<10263=10264
<10264=10266,10265
<10267=10268
<10268=10270,10269
<10271=10272
<10273=10275,10274
<10276=10277
<10277=10291,10290,10278
<10278=10289,10279
<10279=10281,10280
<10281=10287,10282
<10282=10285,10283
<10283=10284
<10285=10286
<10287=10288
<10292=10293
<10293=10307,10306,10294
<10294=10305,10295
<10295=10297,10296
<10297=10303,10298
<10298=10301,10299
<10299=10300
<10301=10302
<10303=10304
<10308=10309
<10309=10323,10322,10310
<10310=10321,10311
<10311=10313,10312
<10313=10319,10314
<10314=10317,10315
<10315=10316
<10317=10318
<10319=10320
<10324=10480,10427,10325
<10325=10326
<10326=10423,10409,10395,10388,10381,10352,10341,10327
<10327=10337,10328
<10328=10330,10329
<10330=10331
<10331=10335,10332
<10332=10333
<10333=10334
<10335=10336
<10337=10338
<10338=10340,10339
<10341=10342
<10342=10350,10343
<10343=10348,10346,10344
<10344=10345
<10346=10347
<10348=10349
<10350=10351
<10352=10353
<10353=10378,10354
<10354=10376,10355
<10355=10374,10372,10368,10364,10362,10360,10358,10356
<10356=10357
<10358=10359
<10360=10361
<10362=10363
<10364=10365
<10365=10367,10366
<10368=10369
<10369=10371,10370
<10372=10373
<10374=10375
<10376=10377
<10378=10380,10379
<10381=10382
<10382=10387,10386,10383
<10383=10385,10384
<10388=10389
<10389=10394,10393,10390
<10390=10392,10391
<10395=10396
<10396=10408,10407,10397
<10397=10406,10398
<10398=10404,10399
<10399=10402,10400
<10400=10401
<10402=10403
<10404=10405
<10409=10410
<10410=10422,10421,10411
<10411=10420,10412
<10412=10418,10413
<10413=10416,10414
<10414=10415
<10416=10417
<10418=10419
<10423=10424
<10424=10426,10425
<10427=10469,10458,10443,10428
<10428=10429
<10429=10440,10430
<10430=10438,10431
<10431=10436,10434,10432
<10432=10433
<10434=10435
<10436=10437
<10438=10439
<10440=10442,10441
<10443=10444
<10444=10457,10456,10445
<10445=10455,10446
<10446=10454,10447
<10447=10449,10448
<10449=10451,10450
<10451=10453,10452
<10458=10459
<10459=10468,10467,10460
<10460=10466,10461
<10461=10463,10462
<10463=10465,10464
<10469=10470
<10470=10479,10478,10471
<10471=10477,10472
<10472=10474,10473
<10474=10476,10475
<10480=10481
<10481=10483,10482
<10484=10485
<10485=10503,10486
<10486=10501,10499,10497,10495,10493,10491,10489,10487
<10487=10488
<10489=10490
<10491=10492
<10493=10494
<10495=10496
<10497=10498
<10499=10500
<10501=10502
<10503=10504
<10505=10506
<10506=10520,10519,10507
<10507=10518,10508
<10508=10510,10509
<10510=10516,10511
<10511=10514,10512
<10512=10513
<10514=10515
<10516=10517
<10521=10522
<10522=10536,10535,10523
<10523=10534,10524
<10524=10526,10525
<10526=10532,10527
<10527=10530,10528
<10528=10529
<10530=10531
<10532=10533
<10537=10538
<10538=10552,10551,10539
<10539=10550,10540
<10540=10542,10541
<10542=10548,10543
<10543=10546,10544
<10544=10545
<10546=10547
<10548=10549
<10553=10554
<10554=10568,10567,10555
<10555=10566,10556
<10556=10558,10557
<10558=10564,10559
<10559=10562,10560
<10560=10561
<10562=10563
<10564=10565
<10569=10570
<10570=10584,10583,10571
<10571=10582,10572
<10572=10574,10573
<10574=10580,10575
<10575=10578,10576
<10576=10577
<10578=10579
<10580=10581
<10585=10586
<10586=10600,10599,10587
<10587=10598,10588
<10588=10590,10589
<10590=10596,10591
<10591=10594,10592
<10592=10593
<10594=10595
<10596=10597
<10601=10602
<10602=10611,10610,10603
<10603=10609,10604
<10604=10606,10605
<10606=10608,10607
<10612=10613
<10613=10622,10621,10614
<10614=10620,10615
<10615=10617,10616
<10617=10619,10618
<10623=10625,10624
<10626=10627
<10627=10629,10628
<10630=10631
<10631=10632
<10632=10637,10636,10633
<10633=10635,10634
<10638=10639
<10639=10649,10648,10640
<10640=10647,10641
<10641=10643,10642
<10643=10644
<10644=10646,10645
<10650=10651
<10651=10663,10662,10652
<10652=10661,10653
<10653=10657,10654
<10654=10655
<10655=10656
<10657=10658
<10658=10660,10659
<10664=10665
<10665=10677,10676,10666
<10666=10675,10667
<10667=10673,10668
<10668=10671,10669
<10669=10670
<10671=10672
<10673=10674
<10678=10679
<10679=10684,10683,10680
<10680=10682,10681
<10685=10686
<10686=10690,10687
<10687=10688
<10688=10689
<10690=10691
<10692=10720,10693
<10693=10707,10694
<10694=10695
<10695=10705,10696
<10696=10701,10697
<10697=10698
<10698=10700,10699
<10701=10702
<10702=10704,10703
<10705=10706
<10707=10708
<10708=10718,10709
<10709=10714,10710
<10710=10711
<10711=10713,10712
<10714=10715
<10715=10717,10716
<10718=10719
<10720=10721
<10722=10962,10938,10723
<10723=10724
<10724=10937,10936,10935,10925,10915,10905,10895,10885,10875,10865,10855,10845,10805,10765,10725
<10725=10755,10737,10726
<10726=10727
<10727=10728
<10728=10730,10729
<10730=10732,10731
<10732=10734,10733
<10734=10736,10735
<10737=10738
<10738=10748,10739
<10739=10741,10740
<10741=10743,10742
<10743=10745,10744
<10745=10747,10746
<10748=10750,10749
<10750=10752,10751
<10752=10754,10753
<10755=10756
<10756=10758,10757
<10758=10760,10759
<10760=10762,10761
<10762=10764,10763
<10765=10795,10777,10766
<10766=10767
<10767=10768
<10768=10770,10769
<10770=10772,10771
<10772=10774,10773
<10774=10776,10775
<10777=10778
<10778=10788,10779
<10779=10781,10780
<10781=10783,10782
<10783=10785,10784
<10785=10787,10786
<10788=10790,10789
<10790=10792,10791
<10792=10794,10793
<10795=10796
<10796=10798,10797
<10798=10800,10799
<10800=10802,10801
<10802=10804,10803
<10805=10835,10817,10806
<10806=10807
<10807=10808
<10808=10810,10809
<10810=10812,10811
<10812=10814,10813
<10814=10816,10815
<10817=10818
<10818=10828,10819
<10819=10821,10820
<10821=10823,10822
<10823=10825,10824
<10825=10827,10826
<10828=10830,10829
<10830=10832,10831
<10832=10834,10833
<10835=10836
<10836=10838,10837
<10838=10840,10839
<10840=10842,10841
<10842=10844,10843
<10845=10846
<10846=10848,10847
<10848=10850,10849
<10850=10852,10851
<10852=10854,10853
<10855=10856
<10856=10858,10857
<10858=10860,10859
<10860=10862,10861
<10862=10864,10863
<10865=10866
<10866=10868,10867
<10868=10870,10869
<10870=10872,10871
<10872=10874,10873
<10875=10876
<10876=10878,10877
<10878=10880,10879
<10880=10882,10881
<10882=10884,10883
<10885=10886
<10886=10888,10887
<10888=10890,10889
<10890=10892,10891
<10892=10894,10893
<10895=10896
<10896=10898,10897
<10898=10900,10899
<10900=10902,10901
<10902=10904,10903
<10905=10906
<10906=10908,10907
<10908=10910,10909
<10910=10912,10911
<10912=10914,10913
<10915=10916
<10916=10918,10917
<10918=10920,10919
<10920=10922,10921
<10922=10924,10923
<10925=10926
<10926=10928,10927
<10928=10930,10929
<10930=10932,10931
<10932=10934,10933
<10938=10939
<10939=10945,10940
<10940=10941
<10941=10942
<10942=10944,10943
<10945=10946
<10946=10960,10947
<10947=10958,10956,10952,10948
<10948=10949
<10949=10951,10950
<10952=10953
<10953=10955,10954
<10956=10957
<10958=10959
<10960=10961
<10962=10963
<10963=10979,10964
<10964=10974,10965
<10965=10969,10966
<10966=10968,10967
<10969=10971,10970
<10971=10973,10972
<10974=10976,10975
<10976=10978,10977
<10980=10981
<10981=10986,10985,10982
<10982=10984,10983
<10987=11015,11004,10988
<10988=10989
<10989=10990
<10990=10991
<10991=11003,10992
<10992=10998,10993
<10993=10995,10994
<10995=10997,10996
<10998=11000,10999
<11000=11002,11001
<11004=11005
<11005=11006
<11006=11014,11007
<11007=11009,11008
<11009=11011,11010
<11011=11013,11012
<11015=11016
<11016=11024,11017
<11017=11023,11018
<11018=11020,11019
<11020=11022,11021
<11025=11053,11042,11026
<11026=11027
<11027=11028
<11028=11029
<11029=11041,11030
<11030=11036,11031
<11031=11033,11032
<11033=11035,11034
<11036=11038,11037
<11038=11040,11039
<11042=11043
<11043=11044
<11044=11052,11045
<11045=11047,11046
<11047=11049,11048
<11049=11051,11050
<11053=11054
<11054=11062,11055
<11055=11061,11056
<11056=11058,11057
<11058=11060,11059
<11063=11093,11075,11064
<11064=11065
<11065=11066
<11066=11068,11067
<11068=11070,11069
<11070=11072,11071
<11072=11074,11073
<11075=11076
<11076=11086,11077
<11077=11079,11078
<11079=11081,11080
<11081=11083,11082
<11083=11085,11084
<11086=11088,11087
<11088=11090,11089
<11090=11092,11091
<11093=11094
<11094=11096,11095
<11096=11098,11097
<11098=11100,11099
<11100=11102,11101
<11103=11133,11115,11104
<11104=11105
<11105=11106
<11106=11108,11107
<11108=11110,11109
<11110=11112,11111
<11112=11114,11113
<11115=11116
<11116=11126,11117
<11117=11119,11118
<11119=11121,11120
<11121=11123,11122
<11123=11125,11124
<11126=11128,11127
<11128=11130,11129
<11130=11132,11131
<11133=11134
<11134=11136,11135
<11136=11138,11137
<11138=11140,11139
<11140=11142,11141
<11143=11173,11155,11144
<11144=11145
<11145=11146
<11146=11148,11147
<11148=11150,11149
<11150=11152,11151
<11152=11154,11153
<11155=11156
<11156=11166,11157
<11157=11159,11158
<11159=11161,11160
<11161=11163,11162
<11163=11165,11164
<11166=11168,11167
<11168=11170,11169
<11170=11172,11171
<11173=11174
<11174=11176,11175
<11176=11178,11177
<11178=11180,11179
<11180=11182,11181
<11183=11184
<11184=11186,11185
<11186=11188,11187
<11188=11190,11189
<11190=11192,11191
<11193=11194
<11194=11196,11195
<11196=11198,11197
<11198=11200,11199
<11200=11202,11201
<11203=11204
<11204=11206,11205
<11206=11208,11207
<11208=11210,11209
<11210=11212,11211
<11213=11214
<11214=11216,11215
<11216=11218,11217
<11218=11220,11219
<11220=11222,11221
<11223=11224
<11224=11226,11225
<11226=11228,11227
<11228=11230,11229
<11230=11232,11231
<11233=11234
<11234=11236,11235
<11236=11238,11237
<11238=11240,11239
<11240=11242,11241
<11243=11244
<11244=11246,11245
<11246=11248,11247
<11248=11250,11249
<11250=11252,11251
<11253=11254
<11254=11256,11255
<11256=11258,11257
<11258=11260,11259
<11260=11262,11261
<11263=11264
<11264=11266,11265
<11266=11268,11267
<11268=11270,11269
<11270=11272,11271
<11273=11274
<11274=11282,11275
<11275=11280,11276
<11276=11277
<11277=11279,11278
<11280=11281
<11282=11283
<11284=11285
<11285=11293,11286
<11286=11291,11287
<11287=11288
<11288=11290,11289
<11291=11292
<11293=11294
<11295=11296
<11296=11306,11297
<11297=11302,11298
<11298=11299
<11299=11301,11300
<11302=11303
<11303=11305,11304
<11306=11307
<11308=11309
<11309=11319,11310
<11310=11315,11311
<11311=11312
<11312=11314,11313
<11315=11316
<11316=11318,11317
<11319=11320
<11321=11322
<11322=11326,11323
<11323=11324
<11324=11325
<11326=11327
<11328=11329
<11329=11333,11330
<11330=11331
<11331=11332
<11333=11334
<11335=11336
<11336=11342,11337
<11337=11340,11338
<11338=11339
<11340=11341
<11342=11343
<11344=11345
<11345=11347,11346
<11347=11348
<11348=11350,11349
<11350=11352,11351
<11353=11354
<11354=11356,11355
<11356=11357
<11357=11359,11358
<11359=11361,11360
<11362=11363
<11363=11371,11364
<11364=11369,11365
<11365=11366
<11366=11368,11367
<11369=11370
<11371=11372
<11372=11374,11373
<11374=11376,11375
<11377=11378
<11378=11386,11379
<11379=11384,11380
<11380=11381
<11381=11383,11382
<11384=11385
<11386=11387
<11387=11389,11388
<11389=11391,11390
<11506=11530,11529,11507
<11507=11526,11523,11520,11517,11514,11511,11508
<11508=11510,11509
<11511=11513,11512
<11514=11516,11515
<11517=11519,11518
<11520=11522,11521
<11523=11525,11524
<11526=11528,11527
<11530=12451,12355,12330,12300,12296,12190,12101,12076,12049,11798,11709,11684,11680,11673,11550,11531
<11531=11532
<11532=11548,11533
<11533=11546,11544,11542,11540,11538,11536,11534
<11534=11535
<11536=11537
<11538=11539
<11540=11541
<11542=11543
<11544=11545
<11546=11547
<11548=11549
<11550=11665,11661,11658,11551
<11551=11552
<11552=11650,11598,11553
<11553=11554
<11554=11555
<11555=11556
<11556=11596,11557
<11557=11594,11592,11586,11578,11574,11566,11558
<11558=11559
<11559=11561,11560
<11561=11563,11562
<11563=11565,11564
<11566=11567
<11567=11569,11568
<11569=11571,11570
<11571=11573,11572
<11574=11575
<11575=11577,11576
<11578=11579
<11579=11581,11580
<11581=11585,11582
<11582=11584,11583
<11586=11587
<11587=11589,11588
<11589=11591,11590
<11592=11593
<11594=11595
<11596=11597
<11598=11599
<11599=11600
<11600=11648,11601
<11601=11646,11644,11638,11630,11622,11618,11610,11602
<11602=11603
<11603=11605,11604
<11605=11607,11606
<11607=11609,11608
<11610=11611
<11611=11613,11612
<11613=11615,11614
<11615=11617,11616
<11618=11619
<11619=11621,11620
<11622=11623
<11623=11625,11624
<11625=11629,11626
<11626=11628,11627
<11630=11631
<11631=11633,11632
<11633=11637,11634
<11634=11636,11635
<11638=11639
<11639=11641,11640
<11641=11643,11642
<11644=11645
<11646=11647
<11648=11649
<11650=11651
<11651=11653,11652
<11653=11657,11654
<11654=11656,11655
<11658=11660,11659
<11661=11662
<11662=11664,11663
<11665=11666
<11666=11667
<11667=11672,11671,11668
<11668=11670,11669
<11673=11674
<11674=11678,11675
<11675=11676
<11676=11677
<11678=11679
<11680=11681
<11681=11683,11682
<11684=11685
<11685=11707,11686
<11686=11705,11703,11701,11699,11697,11695,11693,11691,11689,11687
<11687=11688
<11689=11690
<11691=11692
<11693=11694
<11695=11696
<11697=11698
<11699=11700
<11701=11702
<11703=11704
<11705=11706
<11707=11708
<11709=11794,11710
<11710=11789,11778,11753,11711
<11711=11751,11712
<11712=11740,11713
<11713=11714
<11714=11738,11715
<11715=11736,11734,11732,11730,11728,11726,11724,11722,11720,11718,11716
<11716=11717
<11718=11719
<11720=11721
<11722=11723
<11724=11725
<11726=11727
<11728=11729
<11730=11731
<11732=11733
<11734=11735
<11736=11737
<11738=11739
<11740=11741
<11741=11749,11742
<11742=11747,11745,11743
<11743=11744
<11745=11746
<11747=11748
<11749=11750
<11751=11752
<11753=11754
<11754=11776,11755
<11755=11774,11772,11770,11768,11766,11764,11762,11760,11758,11756
<11756=11757
<11758=11759
<11760=11761
<11762=11763
<11764=11765
<11766=11767
<11768=11769
<11770=11771
<11772=11773
<11774=11775
<11776=11777
<11778=11779
<11779=11787,11780
<11780=11785,11783,11781
<11781=11782
<11783=11784
<11785=11786
<11787=11788
<11789=11790
<11790=11793,11792,11791
<11794=11795
<11795=11797,11796
<11798=12041,12037,12034,11799
<11799=12024,12015,12003,11996,11985,11978,11971,11964,11957,11869,11840,11839,11838,11837,11835,11834,11833,11832,11830,11829,11828,11827,11825,11815,11800
<11800=11801
<11801=11813,11802
<11802=11811,11803
<11803=11804
<11804=11806,11805
<11806=11810,11807
<11807=11809,11808
<11811=11812
<11813=11814
<11815=11816
<11816=11824,11823,11817
<11817=11822,11818
<11818=11820,11819
<11820=11821
<11825=11826
<11830=11831
<11835=11836
<11840=11841
<11841=11867,11842
<11842=11863,11861,11859,11857,11855,11853,11851,11849,11845,11843
<11843=11844
<11845=11846
<11846=11848,11847
<11849=11850
<11851=11852
<11853=11854
<11855=11856
<11857=11858
<11859=11860
<11861=11862
<11863=11864
<11864=11866,11865
<11867=11868
<11869=11949,11945,11942,11870
<11870=11928,11915,11906,11898,11881,11875,11871
<11871=11872
<11872=11874,11873
<11875=11876
<11876=11878,11877
<11878=11880,11879
<11881=11882
<11882=11895,11883
<11883=11893,11884
<11884=11889,11885
<11885=11886
<11886=11888,11887
<11889=11890
<11890=11892,11891
<11893=11894
<11895=11897,11896
<11898=11899
<11899=11903,11900
<11900=11902,11901
<11903=11905,11904
<11906=11907
<11907=11914,11913,11908
<11908=11912,11909
<11909=11911,11910
<11915=11916
<11916=11927,11926,11917
<11917=11925,11918
<11918=11920,11919
<11920=11922,11921
<11922=11924,11923
<11928=11930,11929
<11930=11931
<11931=11933,11932
<11933=11935,11934
<11935=11937,11936
<11937=11939,11938
<11939=11941,11940
<11942=11944,11943
<11945=11946
<11946=11948,11947
<11949=11950
<11950=11951
<11951=11956,11955,11952
<11952=11954,11953
<11957=11958
<11958=11963,11962,11959
<11959=11961,11960
<11964=11965
<11965=11970,11969,11966
<11966=11968,11967
<11971=11972
<11972=11977,11976,11973
<11973=11975,11974
<11978=11979
<11979=11984,11983,11980
<11980=11982,11981
<11985=11986
<11986=11994,11987
<11987=11992,11990,11988
<11988=11989
<11990=11991
<11992=11993
<11994=11995
<11996=11997
<11997=12002,12001,11998
<11998=12000,11999
<12003=12004
<12004=12014,12013,12005
<12005=12012,12006
<12006=12010,12007
<12007=12008
<12008=12009
<12010=12011
<12015=12016
<12016=12023,12022,12017
<12017=12021,12018
<12018=12020,12019
<12024=12025
<12025=12033,12032,12026
<12026=12031,12027
<12027=12029,12028
<12029=12030
<12034=12036,12035
<12037=12038
<12038=12040,12039
<12041=12042
<12042=12043
<12043=12048,12047,12044
<12044=12046,12045
<12049=12050
<12050=12075,12051
<12051=12073,12052
<12052=12071,12069,12067,12065,12063,12061,12059,12057,12055,12053
<12053=12054
<12055=12056
<12057=12058
<12059=12060
<12061=12062
<12063=12064
<12065=12066
<12067=12068
<12069=12070
<12071=12072
<12073=12074
<12076=12077
<12077=12099,12078
<12078=12097,12095,12093,12091,12089,12087,12085,12083,12081,12079
<12079=12080
<12081=12082
<12083=12084
<12085=12086
<12087=12088
<12089=12090
<12091=12092
<12093=12094
<12095=12096
<12097=12098
<12099=12100
<12101=12186,12102
<12102=12181,12170,12145,12103
<12103=12143,12104
<12104=12132,12105
<12105=12106
<12106=12130,12107
<12107=12128,12126,12124,12122,12120,12118,12116,12114,12112,12110,12108
<12108=12109
<12110=12111
<12112=12113
<12114=12115
<12116=12117
<12118=12119
<12120=12121
<12122=12123
<12124=12125
<12126=12127
<12128=12129
<12130=12131
<12132=12133
<12133=12141,12134
<12134=12139,12137,12135
<12135=12136
<12137=12138
<12139=12140
<12141=12142
<12143=12144
<12145=12146
<12146=12168,12147
<12147=12166,12164,12162,12160,12158,12156,12154,12152,12150,12148
<12148=12149
<12150=12151
<12152=12153
<12154=12155
<12156=12157
<12158=12159
<12160=12161
<12162=12163
<12164=12165
<12166=12167
<12168=12169
<12170=12171
<12171=12179,12172
<12172=12177,12175,12173
<12173=12174
<12175=12176
<12177=12178
<12179=12180
<12181=12182
<12182=12185,12184,12183
<12186=12187
<12187=12189,12188
<12190=12288,12284,12281,12191
<12191=12192
<12192=12265,12193
<12193=12256,12250,12246,12208,12194
<12194=12206,12195
<12195=12200,12196
<12196=12197
<12197=12199,12198
<12200=12201
<12201=12203,12202
<12203=12205,12204
<12206=12207
<12208=12209
<12209=12245,12244,12210
<12210=12243,12211
<12211=12241,12212
<12212=12237,12235,12233,12231,12229,12227,12225,12223,12221,12219,12215,12213
<12213=12214
<12215=12216
<12216=12218,12217
<12219=12220
<12221=12222
<12223=12224
<12225=12226
<12227=12228
<12229=12230
<12231=12232
<12233=12234
<12235=12236
<12237=12238
<12238=12240,12239
<12241=12242
<12246=12247
<12247=12249,12248
<12250=12251
<12251=12253,12252
<12253=12255,12254
<12256=12257
<12257=12263,12258
<12258=12261,12259
<12259=12260
<12261=12262
<12263=12264
<12265=12266
<12266=12276,12267
<12267=12275,12268
<12268=12270,12269
<12270=12272,12271
<12272=12274,12273
<12276=12278,12277
<12278=12280,12279
<12281=12283,12282
<12284=12285
<12285=12287,12286
<12288=12289
<12289=12290
<12290=12295,12294,12291
<12291=12293,12292
<12296=12297
<12297=12299,12298
<12300=12301
<12301=12329,12328,12302
<12302=12327,12303
<12303=12325,12304
<12304=12323,12321,12319,12317,12315,12313,12311,12309,12307,12305
<12305=12306
<12307=12308
<12309=12310
<12311=12312
<12313=12314
<12315=12316
<12317=12318
<12319=12320
<12321=12322
<12323=12324
<12325=12326
<12330=12331
<12331=12353,12332
<12332=12351,12349,12347,12345,12343,12341,12339,12337,12335,12333
<12333=12334
<12335=12336
<12337=12338
<12339=12340
<12341=12342
<12343=12344
<12345=12346
<12347=12348
<12349=12350
<12351=12352
<12353=12354
<12355=12443,12439,12436,12356
<12356=12357
<12357=12430,12358
<12358=12421,12415,12411,12373,12359
<12359=12371,12360
<12360=12365,12361
<12361=12362
<12362=12364,12363
<12365=12366
<12366=12368,12367
<12368=12370,12369
<12371=12372
<12373=12374
<12374=12410,12409,12375
<12375=12408,12376
<12376=12406,12377
<12377=12402,12400,12398,12396,12394,12392,12390,12388,12386,12384,12380,12378
<12378=12379
<12380=12381
<12381=12383,12382
<12384=12385
<12386=12387
<12388=12389
<12390=12391
<12392=12393
<12394=12395
<12396=12397
<12398=12399
<12400=12401
<12402=12403
<12403=12405,12404
<12406=12407
<12411=12412
<12412=12414,12413
<12415=12416
<12416=12418,12417
<12418=12420,12419
<12421=12422
<12422=12428,12423
<12423=12426,12424
<12424=12425
<12426=12427
<12428=12429
<12430=12431
<12431=12433,12432
<12433=12435,12434
<12436=12438,12437
<12439=12440
<12440=12442,12441
<12443=12444
<12444=12445
<12445=12450,12449,12446
<12446=12448,12447
<12451=12452
<12452=12460,12459,12453
<12453=12458,12454
<12454=12456,12455
<12456=12457
<12537=12540,12539,12538
<12540=15072,15067,15062,15057,15052,15048,15036,15027,15018,15008,15001,14994,14960,14953,14939,14932,14925,14921,14914,14893,14870,14863,14856,14852,13651,13116,13106,13091,13068,12990,12963,12815,12602,12601,12600,12599,12597,12596,12595,12594,12592,12587,12580,12541
<12541=12572,12568,12565,12542
<12542=12543
<12543=12557,12551,12544
<12544=12545
<12545=12546
<12546=12548,12547
<12548=12550,12549
<12551=12552
<12552=12554,12553
<12554=12556,12555
<12557=12558
<12558=12560,12559
<12560=12562,12561
<12562=12564,12563
<12565=12567,12566
<12568=12569
<12569=12571,12570
<12572=12573
<12573=12574
<12574=12579,12578,12575
<12575=12577,12576
<12580=12581
<12581=12586,12585,12582
<12582=12584,12583
<12587=12588
<12588=12590,12589
<12590=12591
<12592=12593
<12597=12598
<12602=12807,12803,12800,12603
<12603=12785,12781,12766,12751,12736,12719,12702,12685,12613,12604
<12604=12605
<12605=12609,12606
<12606=12607
<12607=12608
<12609=12610
<12610=12612,12611
<12613=12677,12664,12661,12614
<12614=12648,12639,12615
<12615=12616
<12616=12633,12617
<12617=12618
<12618=12619
<12619=12631,12620
<12620=12629,12621
<12621=12622
<12622=12624,12623
<12624=12626,12625
<12626=12628,12627
<12629=12630
<12631=12632
<12633=12634
<12634=12636,12635
<12636=12638,12637
<12639=12640
<12640=12647,12646,12641
<12641=12645,12642
<12642=12644,12643
<12648=12649
<12649=12660,12659,12650
<12650=12658,12651
<12651=12653,12652
<12653=12655,12654
<12655=12657,12656
<12661=12663,12662
<12664=12665
<12665=12676,12666
<12666=12675,12667
<12667=12669,12668
<12669=12670
<12670=12672,12671
<12672=12674,12673
<12677=12678
<12678=12679
<12679=12684,12683,12680
<12680=12682,12681
<12685=12686
<12686=12697,12687
<12687=12696,12688
<12688=12694,12689
<12689=12690
<12690=12691
<12691=12693,12692
<12694=12695
<12697=12699,12698
<12699=12701,12700
<12702=12703
<12703=12714,12704
<12704=12713,12705
<12705=12711,12706
<12706=12707
<12707=12708
<12708=12710,12709
<12711=12712
<12714=12716,12715
<12716=12718,12717
<12719=12720
<12720=12731,12721
<12721=12730,12722
<12722=12728,12723
<12723=12724
<12724=12725
<12725=12727,12726
<12728=12729
<12731=12733,12732
<12733=12735,12734
<12736=12737
<12737=12746,12738
<12738=12744,12739
<12739=12740
<12740=12741
<12741=12743,12742
<12744=12745
<12746=12748,12747
<12748=12750,12749
<12751=12752
<12752=12761,12753
<12753=12759,12754
<12754=12755
<12755=12756
<12756=12758,12757
<12759=12760
<12761=12763,12762
<12763=12765,12764
<12766=12767
<12767=12776,12768
<12768=12774,12769
<12769=12770
<12770=12771
<12771=12773,12772
<12774=12775
<12776=12778,12777
<12778=12780,12779
<12781=12782
<12782=12784,12783
<12785=12787,12786
<12787=12788
<12788=12790,12789
<12790=12799,12791
<12791=12793,12792
<12793=12794
<12794=12796,12795
<12796=12798,12797
<12800=12802,12801
<12803=12804
<12804=12806,12805
<12807=12808
<12808=12809
<12809=12814,12813,12810
<12810=12812,12811
<12815=12955,12951,12948,12816
<12816=12939,12929,12904,12871,12842,12828,12817
<12817=12818
<12818=12820,12819
<12820=12821
<12821=12823,12822
<12823=12825,12824
<12825=12827,12826
<12828=12829
<12829=12835,12830
<12830=12832,12831
<12832=12834,12833
<12835=12837,12836
<12837=12839,12838
<12839=12841,12840
<12842=12843
<12843=12869,12844
<12844=12867,12865,12857,12853,12845
<12845=12846
<12846=12848,12847
<12848=12850,12849
<12850=12852,12851
<12853=12854
<12854=12856,12855
<12857=12858
<12858=12860,12859
<12860=12862,12861
<12862=12864,12863
<12865=12866
<12867=12868
<12869=12870
<12871=12872
<12872=12902,12873
<12873=12900,12898,12896,12894,12888,12882,12874
<12874=12875
<12875=12877,12876
<12877=12879,12878
<12879=12881,12880
<12882=12883
<12883=12885,12884
<12885=12887,12886
<12888=12889
<12889=12891,12890
<12891=12893,12892
<12894=12895
<12896=12897
<12898=12899
<12900=12901
<12902=12903
<12904=12905
<12905=12927,12906
<12906=12919,12913,12907
<12907=12908
<12908=12912,12909
<12909=12911,12910
<12913=12914
<12914=12916,12915
<12916=12918,12917
<12919=12920
<12920=12922,12921
<12922=12924,12923
<12924=12926,12925
<12927=12928
<12929=12930
<12930=12932,12931
<12932=12934,12933
<12934=12936,12935
<12936=12938,12937
<12939=12940
<12940=12947,12946,12941
<12941=12945,12942
<12942=12944,12943
<12948=12950,12949
<12951=12952
<12952=12954,12953
<12955=12956
<12956=12957
<12957=12962,12961,12958
<12958=12960,12959
<12963=12982,12978,12975,12964
<12964=12965
<12965=12966
<12966=12968,12967
<12968=12970,12969
<12970=12972,12971
<12972=12974,12973
<12975=12977,12976
<12978=12979
<12979=12981,12980
<12982=12983
<12983=12984
<12984=12989,12988,12985
<12985=12987,12986
<12990=13064,12991
<12991=13039,12992
<12992=13037,12993
<12993=13032,13021,12994
<12994=12995
<12995=13019,12996
<12996=13017,13015,13013,13011,13009,13007,13005,13003,13001,12999,12997
<12997=12998
<12999=13000
<13001=13002
<13003=13004
<13005=13006
<13007=13008
<13009=13010
<13011=13012
<13013=13014
<13015=13016
<13017=13018
<13019=13020
<13021=13022
<13022=13030,13023
<13023=13028,13026,13024
<13024=13025
<13026=13027
<13028=13029
<13030=13031
<13032=13033
<13033=13036,13035,13034
<13037=13038
<13039=13040
<13040=13062,13041
<13041=13060,13058,13056,13054,13052,13050,13048,13046,13044,13042
<13042=13043
<13044=13045
<13046=13047
<13048=13049
<13050=13051
<13052=13053
<13054=13055
<13056=13057
<13058=13059
<13060=13061
<13062=13063
<13064=13065
<13065=13067,13066
<13068=13089,13069
<13069=13070
<13070=13071
<13071=13087,13072
<13072=13085,13083,13081,13079,13077,13075,13073
<13073=13074
<13075=13076
<13077=13078
<13079=13080
<13081=13082
<13083=13084
<13085=13086
<13087=13088
<13089=13090
<13091=13092
<13092=13104,13093
<13093=13102,13094
<13094=13095
<13095=13099,13096
<13096=13098,13097
<13099=13101,13100
<13102=13103
<13104=13105
<13106=13107
<13107=13115,13114,13108
<13108=13113,13109
<13109=13111,13110
<13111=13112
<13116=13643,13639,13632,13117
<13117=13623,13619,13579,13570,13564,13558,13557,13556,13555,13554,13553,13552,13551,13550,13549,13548,13547,13546,13545,13544,13543,13542,13541,13540,13539,13538,13537,13536,13535,13534,13533,13532,13501,13481,13474,13443,13439,13430,13423,13398,13377,13370,13247,13242,13231,13210,13118
<13118=13206,13119
<13119=13193,13166,13120
<13120=13164,13121
<13121=13151,13122
<13122=13123
<13123=13149,13124
<13124=13147,13145,13143,13139,13137,13135,13133,13131,13129,13127,13125
<13125=13126
<13127=13128
<13129=13130
<13131=13132
<13133=13134
<13135=13136
<13137=13138
<13139=13140
<13140=13142,13141
<13143=13144
<13145=13146
<13147=13148
<13149=13150
<13151=13152
<13152=13162,13153
<13153=13160,13158,13156,13154
<13154=13155
<13156=13157
<13158=13159
<13160=13161
<13162=13163
<13164=13165
<13166=13167
<13167=13191,13168
<13168=13189,13187,13185,13181,13179,13177,13175,13173,13171,13169
<13169=13170
<13171=13172
<13173=13174
<13175=13176
<13177=13178
<13179=13180
<13181=13182
<13182=13184,13183
<13185=13186
<13187=13188
<13189=13190
<13191=13192
<13193=13194
<13194=13204,13195
<13195=13202,13200,13198,13196
<13196=13197
<13198=13199
<13200=13201
<13202=13203
<13204=13205
<13206=13207
<13207=13209,13208
<13210=13211
<13211=13229,13212
<13212=13227,13225,13223,13219,13217,13215,13213
<13213=13214
<13215=13216
<13217=13218
<13219=13220
<13220=13222,13221
<13223=13224
<13225=13226
<13227=13228
<13229=13230
<13231=13232
<13232=13240,13233
<13233=13238,13236,13234
<13234=13235
<13236=13237
<13238=13239
<13240=13241
<13242=13243
<13243=13246,13245,13244
<13247=13362,13358,13355,13248
<13248=13249
<13249=13347,13295,13250
<13250=13251
<13251=13252
<13252=13253
<13253=13293,13254
<13254=13291,13289,13283,13275,13271,13263,13255
<13255=13256
<13256=13258,13257
<13258=13260,13259
<13260=13262,13261
<13263=13264
<13264=13266,13265
<13266=13268,13267
<13268=13270,13269
<13271=13272
<13272=13274,13273
<13275=13276
<13276=13278,13277
<13278=13282,13279
<13279=13281,13280
<13283=13284
<13284=13286,13285
<13286=13288,13287
<13289=13290
<13291=13292
<13293=13294
<13295=13296
<13296=13297
<13297=13345,13298
<13298=13343,13341,13335,13327,13319,13315,13307,13299
<13299=13300
<13300=13302,13301
<13302=13304,13303
<13304=13306,13305
<13307=13308
<13308=13310,13309
<13310=13312,13311
<13312=13314,13313
<13315=13316
<13316=13318,13317
<13319=13320
<13320=13322,13321
<13322=13326,13323
<13323=13325,13324
<13327=13328
<13328=13330,13329
<13330=13334,13331
<13331=13333,13332
<13335=13336
<13336=13338,13337
<13338=13340,13339
<13341=13342
<13343=13344
<13345=13346
<13347=13348
<13348=13350,13349
<13350=13354,13351
<13351=13353,13352
<13355=13357,13356
<13358=13359
<13359=13361,13360
<13362=13363
<13363=13364
<13364=13369,13368,13365
<13365=13367,13366
<13370=13371
<13371=13375,13372
<13372=13373
<13373=13374
<13375=13376
<13377=13378
<13378=13396,13379
<13379=13394,13390,13388,13386,13384,13382,13380
<13380=13381
<13382=13383
<13384=13385
<13386=13387
<13388=13389
<13390=13391
<13391=13393,13392
<13394=13395
<13396=13397
<13398=13399
<13399=13421,13400
<13400=13419,13415,13413,13411,13409,13407,13405,13403,13401
<13401=13402
<13403=13404
<13405=13406
<13407=13408
<13409=13410
<13411=13412
<13413=13414
<13415=13416
<13416=13418,13417
<13419=13420
<13421=13422
<13423=13424
<13424=13428,13425
<13425=13426
<13426=13427
<13428=13429
<13430=13431
<13431=13437,13432
<13432=13435,13433
<13433=13434
<13435=13436
<13437=13438
<13439=13440
<13440=13442,13441
<13443=13470,13444
<13444=13445
<13445=13446
<13446=13469,13447
<13447=13467,13448
<13448=13465,13461,13459,13457,13455,13453,13451,13449
<13449=13450
<13451=13452
<13453=13454
<13455=13456
<13457=13458
<13459=13460
<13461=13462
<13462=13464,13463
<13465=13466
<13467=13468
<13470=13471
<13471=13473,13472
<13474=13475
<13475=13479,13476
<13476=13477
<13477=13478
<13479=13480
<13481=13482
<13482=13500,13499,13483
<13483=13498,13484
<13484=13496,13485
<13485=13492,13488,13486
<13486=13487
<13488=13489
<13489=13491,13490
<13492=13493
<13493=13495,13494
<13496=13497
<13501=13502
<13502=13529,13503
<13503=13527,13504
<13504=13523,13521,13519,13517,13515,13513,13509,13507,13505
<13505=13506
<13507=13508
<13509=13510
<13510=13512,13511
<13513=13514
<13515=13516
<13517=13518
<13519=13520
<13521=13522
<13523=13524
<13524=13526,13525
<13527=13528
<13529=13531,13530
<13558=13559
<13559=13561,13560
<13561=13563,13562
<13564=13566,13565
<13566=13567
<13567=13569,13568
<13570=13571
<13571=13577,13572
<13572=13575,13573
<13573=13574
<13575=13576
<13577=13578
<13579=13617,13600,13580
<13580=13581
<13581=13582
<13582=13599,13583
<13583=13597,13584
<13584=13595,13593,13591,13589,13587,13585
<13585=13586
<13587=13588
<13589=13590
<13591=13592
<13593=13594
<13595=13596
<13597=13598
<13600=13601
<13601=13616,13602
<13602=13614,13603
<13603=13612,13610,13608,13606,13604
<13604=13605
<13606=13607
<13608=13609
<13610=13611
<13612=13613
<13614=13615
<13617=13618
<13619=13620
<13620=13622,13621
<13623=13624
<13624=13631,13630,13625
<13625=13629,13626
<13626=13628,13627
<13632=13636,13633
<13633=13635,13634
<13636=13638,13637
<13639=13640
<13640=13642,13641
<13643=13644
<13644=13645
<13645=13650,13649,13646
<13646=13648,13647
<13651=14848,13759,13652
<13652=13653
<13653=13721,13713,13705,13671,13667,13654
<13654=13655
<13655=13666,13656
<13656=13665,13657
<13657=13664,13658
<13658=13660,13659
<13660=13661
<13661=13663,13662
<13667=13668
<13668=13670,13669
<13671=13693,13672
<13672=13692,13691,13690,13689,13688,13687,13680,13673
<13673=13674
<13674=13678,13675
<13675=13676
<13676=13677
<13678=13679
<13680=13681
<13681=13685,13682
<13682=13683
<13683=13684
<13685=13686
<13693=13694
<13694=13700,13695
<13695=13699,13696
<13696=13698,13697
<13700=13704,13701
<13701=13703,13702
<13705=13706
<13706=13712,13707
<13707=13711,13708
<13708=13710,13709
<13713=13714
<13714=13720,13715
<13715=13719,13716
<13716=13718,13717
<13721=13743,13722
<13722=13742,13741,13740,13739,13738,13737,13736,13735,13734,13733,13732,13731,13730,13723
<13723=13724
<13724=13728,13725
<13725=13726
<13726=13727
<13728=13729
<13743=13744
<13744=13752,13745
<13745=13749,13746
<13746=13748,13747
<13749=13751,13750
<13752=13756,13753
<13753=13755,13754
<13756=13758,13757
<13759=14837,14831,14825,14824,14823,14822,14821,14820,14819,14818,14817,14816,14815,14814,14813,14800,14775,14750,14740,14727,14723,14678,14677,14676,14675,14673,14654,13876,13857,13764,13760
<13760=13761
<13761=13763,13762
<13764=13853,13765
<13765=13848,13835,13810,13766
<13766=13808,13767
<13767=13795,13768
<13768=13769
<13769=13793,13770
<13770=13791,13789,13787,13785,13783,13781,13779,13777,13775,13773,13771
<13771=13772
<13773=13774
<13775=13776
<13777=13778
<13779=13780
<13781=13782
<13783=13784
<13785=13786
<13787=13788
<13789=13790
<13791=13792
<13793=13794
<13795=13796
<13796=13806,13797
<13797=13804,13802,13800,13798
<13798=13799
<13800=13801
<13802=13803
<13804=13805
<13806=13807
<13808=13809
<13810=13811
<13811=13833,13812
<13812=13831,13829,13827,13825,13823,13821,13819,13817,13815,13813
<13813=13814
<13815=13816
<13817=13818
<13819=13820
<13821=13822
<13823=13824
<13825=13826
<13827=13828
<13829=13830
<13831=13832
<13833=13834
<13835=13836
<13836=13846,13837
<13837=13844,13842,13840,13838
<13838=13839
<13840=13841
<13842=13843
<13844=13845
<13846=13847
<13848=13849
<13849=13852,13851,13850
<13853=13854
<13854=13856,13855
<13857=13858
<13858=13874,13859
<13859=13872,13870,13868,13866,13864,13862,13860
<13860=13861
<13862=13863
<13864=13865
<13866=13867
<13868=13869
<13870=13871
<13872=13873
<13874=13875
<13876=14652,13877
<13877=14647,14643,14639,14624,14609,14600,14577,14554,14546,14528,14507,14486,14478,14460,14431,14402,13974,13970,13945,13926,13883,13882,13881,13880,13878
<13878=13879
<13883=13922,13884
<13884=13915,13900,13885
<13885=13886
<13886=13898,13887
<13887=13896,13894,13888
<13888=13889
<13889=13891,13890
<13891=13893,13892
<13894=13895
<13896=13897
<13898=13899
<13900=13901
<13901=13913,13902
<13902=13911,13909,13903
<13903=13904
<13904=13906,13905
<13906=13908,13907
<13909=13910
<13911=13912
<13913=13914
<13915=13916
<13916=13920,13917
<13917=13918
<13918=13919
<13920=13921
<13922=13923
<13923=13925,13924
<13926=13927
<13927=13943,13928
<13928=13941,13935,13929
<13929=13930
<13930=13932,13931
<13932=13934,13933
<13935=13936
<13936=13938,13937
<13938=13940,13939
<13941=13942
<13943=13944
<13945=13946
<13946=13969,13947
<13947=13967,13948
<13948=13965,13963,13961,13959,13957,13955,13953,13951,13949
<13949=13950
<13951=13952
<13953=13954
<13955=13956
<13957=13958
<13959=13960
<13961=13962
<13963=13964
<13965=13966
<13967=13968
<13970=13971
<13971=13973,13972
<13974=14394,14390,14387,13975
<13975=14374,14361,14328,14295,14209,14200,14181,14162,14136,14110,14106,14097,14070,14053,14026,14009,13976
<13976=13977
<13977=14006,13978
<13978=14004,13979
<13979=14002,14000,13994,13992,13986,13984,13980
<13980=13981
<13981=13983,13982
<13984=13985
<13986=13987
<13987=13989,13988
<13989=13991,13990
<13992=13993
<13994=13995
<13995=13997,13996
<13997=13999,13998
<14000=14001
<14002=14003
<14004=14005
<14006=14008,14007
<14009=14010
<14010=14024,14011
<14011=14022,14020,14018,14014,14012
<14012=14013
<14014=14015
<14015=14017,14016
<14018=14019
<14020=14021
<14022=14023
<14024=14025
<14026=14027
<14027=14051,14028
<14028=14049,14047,14045,14043,14037,14031,14029
<14029=14030
<14031=14032
<14032=14034,14033
<14034=14036,14035
<14037=14038
<14038=14040,14039
<14040=14042,14041
<14043=14044
<14045=14046
<14047=14048
<14049=14050
<14051=14052
<14053=14054
<14054=14068,14055
<14055=14066,14064,14062,14058,14056
<14056=14057
<14058=14059
<14059=14061,14060
<14062=14063
<14064=14065
<14066=14067
<14068=14069
<14070=14071
<14071=14095,14072
<14072=14093,14091,14089,14087,14081,14075,14073
<14073=14074
<14075=14076
<14076=14078,14077
<14078=14080,14079
<14081=14082
<14082=14084,14083
<14084=14086,14085
<14087=14088
<14089=14090
<14091=14092
<14093=14094
<14095=14096
<14097=14102,14098
<14098=14101,14100,14099
<14102=14105,14104,14103
<14106=14107
<14107=14109,14108
<14110=14111
<14111=14135,14134,14112
<14112=14133,14113
<14113=14131,14114
<14114=14123,14115
<14115=14116
<14116=14120,14117
<14117=14119,14118
<14120=14122,14121
<14123=14124
<14124=14128,14125
<14125=14127,14126
<14128=14130,14129
<14131=14132
<14136=14137
<14137=14161,14160,14138
<14138=14159,14139
<14139=14157,14140
<14140=14149,14141
<14141=14142
<14142=14146,14143
<14143=14145,14144
<14146=14148,14147
<14149=14150
<14150=14154,14151
<14151=14153,14152
<14154=14156,14155
<14157=14158
<14162=14163
<14163=14179,14164
<14164=14177,14175,14173,14171,14169,14167,14165
<14165=14166
<14167=14168
<14169=14170
<14171=14172
<14173=14174
<14175=14176
<14177=14178
<14179=14180
<14181=14182
<14182=14198,14183
<14183=14196,14194,14192,14190,14188,14186,14184
<14184=14185
<14186=14187
<14188=14189
<14190=14191
<14192=14193
<14194=14195
<14196=14197
<14198=14199
<14200=14205,14201
<14201=14204,14203,14202
<14205=14208,14207,14206
<14209=14293,14210
<14210=14284,14275,14266,14257,14234,14211
<14211=14212
<14212=14226,14213
<14213=14224,14222,14218,14214
<14214=14215
<14215=14217,14216
<14218=14219
<14219=14221,14220
<14222=14223
<14224=14225
<14226=14227
<14227=14229,14228
<14229=14233,14230
<14230=14232,14231
<14234=14235
<14235=14249,14236
<14236=14247,14245,14241,14237
<14237=14238
<14238=14240,14239
<14241=14242
<14242=14244,14243
<14245=14246
<14247=14248
<14249=14250
<14250=14252,14251
<14252=14256,14253
<14253=14255,14254
<14257=14258
<14258=14265,14264,14259
<14259=14263,14260
<14260=14262,14261
<14266=14267
<14267=14274,14273,14268
<14268=14272,14269
<14269=14271,14270
<14275=14276
<14276=14283,14282,14277
<14277=14281,14278
<14278=14280,14279
<14284=14285
<14285=14292,14291,14286
<14286=14290,14287
<14287=14289,14288
<14293=14294
<14295=14296
<14296=14327,14326,14325,14297
<14297=14324,14298
<14298=14312,14300,14299
<14300=14302,14301
<14302=14310,14303
<14303=14306,14304
<14304=14305
<14306=14307
<14307=14309,14308
<14310=14311
<14312=14314,14313
<14314=14322,14315
<14315=14318,14316
<14316=14317
<14318=14319
<14319=14321,14320
<14322=14323
<14328=14329
<14329=14360,14359,14358,14330
<14330=14357,14331
<14331=14345,14333,14332
<14333=14335,14334
<14335=14343,14336
<14336=14339,14337
<14337=14338
<14339=14340
<14340=14342,14341
<14343=14344
<14345=14347,14346
<14347=14355,14348
<14348=14351,14349
<14349=14350
<14351=14352
<14352=14354,14353
<14355=14356
<14361=14362
<14362=14373,14372,14363
<14363=14371,14364
<14364=14366,14365
<14366=14368,14367
<14368=14370,14369
<14374=14375
<14375=14386,14385,14376
<14376=14384,14377
<14377=14379,14378
<14379=14381,14380
<14381=14383,14382
<14387=14389,14388
<14390=14391
<14391=14393,14392
<14394=14395
<14395=14396
<14396=14401,14400,14397
<14397=14399,14398
<14402=14403
<14403=14430,14429,14428,14404
<14404=14427,14405
<14405=14420,14419,14418,14417,14410,14409,14408,14407,14406
<14410=14416,14411
<14411=14413,14412
<14413=14415,14414
<14420=14426,14421
<14421=14423,14422
<14423=14425,14424
<14431=14432
<14432=14459,14458,14457,14433
<14433=14456,14434
<14434=14449,14448,14447,14446,14439,14438,14437,14436,14435
<14439=14445,14440
<14440=14442,14441
<14442=14444,14443
<14449=14455,14450
<14450=14452,14451
<14452=14454,14453
<14460=14461
<14461=14471,14462
<14462=14464,14463
<14464=14466,14465
<14466=14468,14467
<14468=14470,14469
<14471=14473,14472
<14473=14475,14474
<14475=14477,14476
<14478=14479
<14479=14481,14480
<14481=14483,14482
<14483=14485,14484
<14486=14487
<14487=14505,14488
<14488=14499,14495,14489
<14489=14490
<14490=14492,14491
<14492=14494,14493
<14495=14496
<14496=14498,14497
<14499=14500
<14500=14502,14501
<14502=14504,14503
<14505=14506
<14507=14508
<14508=14526,14509
<14509=14520,14516,14510
<14510=14511
<14511=14513,14512
<14513=14515,14514
<14516=14517
<14517=14519,14518
<14520=14521
<14521=14523,14522
<14523=14525,14524
<14526=14527
<14528=14529
<14529=14539,14530
<14530=14532,14531
<14532=14534,14533
<14534=14536,14535
<14536=14538,14537
<14539=14541,14540
<14541=14543,14542
<14543=14545,14544
<14546=14547
<14547=14549,14548
<14549=14551,14550
<14551=14553,14552
<14554=14555
<14555=14575,14556
<14556=14569,14563,14557
<14557=14558
<14558=14560,14559
<14560=14562,14561
<14563=14564
<14564=14566,14565
<14566=14568,14567
<14569=14570
<14570=14572,14571
<14572=14574,14573
<14575=14576
<14577=14578
<14578=14598,14579
<14579=14592,14586,14580
<14580=14581
<14581=14583,14582
<14583=14585,14584
<14586=14587
<14587=14589,14588
<14589=14591,14590
<14592=14593
<14593=14595,14594
<14595=14597,14596
<14598=14599
<14600=14601
<14601=14608,14607,14602
<14602=14606,14603
<14603=14605,14604
<14609=14610
<14610=14622,14611
<14611=14620,14618,14612
<14612=14613
<14613=14615,14614
<14615=14617,14616
<14618=14619
<14620=14621
<14622=14623
<14624=14625
<14625=14637,14626
<14626=14635,14633,14627
<14627=14628
<14628=14630,14629
<14630=14632,14631
<14633=14634
<14635=14636
<14637=14638
<14639=14640
<14640=14642,14641
<14643=14644
<14644=14646,14645
<14647=14648
<14648=14651,14650,14649
<14652=14653
<14654=14655
<14655=14671,14656
<14656=14669,14663,14657
<14657=14658
<14658=14660,14659
<14660=14662,14661
<14663=14664
<14664=14666,14665
<14666=14668,14667
<14669=14670
<14671=14672
<14673=14674
<14678=14679
<14679=14722,14680
<14680=14720,14681
<14681=14718,14716,14714,14712,14710,14708,14706,14704,14702,14700,14698,14696,14694,14692,14690,14688,14686,14682
<14682=14683
<14683=14685,14684
<14686=14687
<14688=14689
<14690=14691
<14692=14693
<14694=14695
<14696=14697
<14698=14699
<14700=14701
<14702=14703
<14704=14705
<14706=14707
<14708=14709
<14710=14711
<14712=14713
<14714=14715
<14716=14717
<14718=14719
<14720=14721
<14723=14724
<14724=14726,14725
<14727=14728
<14728=14739,14738,14729
<14729=14737,14730
<14730=14736,14731
<14731=14735,14732
<14732=14734,14733
<14740=14741
<14741=14749,14748,14742
<14742=14747,14743
<14743=14745,14744
<14745=14746
<14750=14751
<14751=14773,14752
<14752=14771,14769,14767,14765,14763,14761,14759,14757,14755,14753
<14753=14754
<14755=14756
<14757=14758
<14759=14760
<14761=14762
<14763=14764
<14765=14766
<14767=14768
<14769=14770
<14771=14772
<14773=14774
<14775=14776
<14776=14799,14777
<14777=14798,14778
<14778=14796,14779
<14779=14794,14792,14790,14788,14786,14784,14782,14780
<14780=14781
<14782=14783
<14784=14785
<14786=14787
<14788=14789
<14790=14791
<14792=14793
<14794=14795
<14796=14797
<14800=14807,14801
<14801=14806,14805,14802
<14802=14804,14803
<14807=14812,14811,14808
<14808=14810,14809
<14825=14826
<14826=14828,14827
<14828=14830,14829
<14831=14832
<14832=14834,14833
<14834=14836,14835
<14837=14838
<14838=14846,14839
<14839=14844,14842,14840
<14840=14841
<14842=14843
<14844=14845
<14846=14847
<14848=14849
<14849=14851,14850
<14852=14853
<14853=14855,14854
<14856=14860,14857
<14857=14859,14858
<14860=14862,14861
<14863=14864
<14864=14869,14868,14865
<14865=14867,14866
<14870=14885,14877,14871
<14871=14876,14875,14872
<14872=14874,14873
<14877=14884,14883,14878
<14878=14882,14879
<14879=14881,14880
<14885=14892,14891,14886
<14886=14890,14887
<14887=14889,14888
<14893=14894
<14894=14912,14895
<14895=14910,14908,14906,14904,14902,14900,14898,14896
<14896=14897
<14898=14899
<14900=14901
<14902=14903
<14904=14905
<14906=14907
<14908=14909
<14910=14911
<14912=14913
<14914=14915
<14915=14920,14919,14916
<14916=14918,14917
<14921=14922
<14922=14924,14923
<14925=14926
<14926=14931,14930,14927
<14927=14929,14928
<14932=14933
<14933=14938,14937,14934
<14934=14936,14935
<14939=14940
<14940=14952,14951,14941
<14941=14950,14942
<14942=14949,14943
<14943=14945,14944
<14945=14946
<14946=14948,14947
<14953=14954
<14954=14959,14958,14955
<14955=14957,14956
<14960=14986,14975,14972,14961
<14961=14962
<14962=14963
<14963=14967,14964
<14964=14966,14965
<14967=14969,14968
<14969=14971,14970
<14972=14974,14973
<14975=14976
<14976=14985,14977
<14977=14984,14978
<14978=14980,14979
<14980=14981
<14981=14983,14982
<14986=14987
<14987=14988
<14988=14993,14992,14989
<14989=14991,14990
<14994=14995
<14995=15000,14999,14996
<14996=14998,14997
<15001=15002
<15002=15007,15006,15003
<15003=15005,15004
<15008=15009
<15009=15017,15016,15010
<15010=15015,15011
<15011=15013,15012
<15013=15014
<15018=15019
<15019=15025,15020
<15020=15023,15021
<15021=15022
<15023=15024
<15025=15026
<15027=15028
<15028=15034,15029
<15029=15032,15030
<15030=15031
<15032=15033
<15034=15035
<15036=15037
<15037=15047,15046,15038
<15038=15045,15039
<15039=15043,15040
<15040=15041
<15041=15042
<15043=15044
<15048=15049
<15049=15051,15050
<15052=15053
<15053=15055,15054
<15055=15056
<15057=15058
<15058=15060,15059
<15060=15061
<15062=15063
<15063=15065,15064
<15065=15066
<15067=15068
<15068=15070,15069
<15070=15071
<15072=15073
<15073=15081,15080,15074
<15074=15079,15075
<15075=15077,15076
<15077=15078
<15254=15296,15295,15255
<15255=15292,15289,15286,15283,15280,15277,15274,15271,15268,15265,15262,15259,15256
<15256=15258,15257
<15259=15261,15260
<15262=15264,15263
<15265=15267,15266
<15268=15270,15269
<15271=15273,15272
<15274=15276,15275
<15277=15279,15278
<15280=15282,15281
<15283=15285,15284
<15286=15288,15287
<15289=15291,15290
<15292=15294,15293
<15296=16021,16014,16007,15992,15977,15973,15948,15941,15924,15323,15322,15321,15320,15319,15318,15317,15316,15315,15314,15313,15312,15311,15310,15309,15308,15307,15306,15304,15303,15302,15301,15299,15297
<15297=15298
<15299=15300
<15304=15305
<15323=15922,15324
<15324=15913,15888,15882,15875,15868,15861,15854,15850,15843,15679,15668,15645,15634,15621,15612,15519,15504,15495,15484,15473,15466,15384,15383,15382,15381,15379,15378,15377,15376,15374,15373,15372,15371,15369,15365,15361,15355,15351,15347,15341,15337,15325
<15325=15333,15326
<15326=15327
<15327=15328
<15328=15330,15329
<15330=15332,15331
<15333=15334
<15334=15336,15335
<15337=15338
<15338=15340,15339
<15341=15343,15342
<15343=15344
<15344=15346,15345
<15347=15348
<15348=15350,15349
<15351=15352
<15352=15354,15353
<15355=15357,15356
<15357=15358
<15358=15360,15359
<15361=15362
<15362=15364,15363
<15365=15366
<15366=15368,15367
<15369=15370
<15374=15375
<15379=15380
<15384=15458,15454,15451,15385
<15385=15438,15431,15416,15407,15386
<15386=15387
<15387=15405,15388
<15388=15403,15399,15397,15395,15389
<15389=15390
<15390=15394,15391
<15391=15393,15392
<15395=15396
<15397=15398
<15399=15400
<15400=15402,15401
<15403=15404
<15405=15406
<15407=15408
<15408=15415,15414,15409
<15409=15413,15410
<15410=15412,15411
<15416=15421,15417
<15417=15418
<15418=15420,15419
<15421=15422
<15422=15428,15423
<15423=15425,15424
<15425=15427,15426
<15428=15430,15429
<15431=15432
<15432=15437,15436,15433
<15433=15435,15434
<15438=15439
<15439=15450,15449,15440
<15440=15448,15441
<15441=15447,15442
<15442=15444,15443
<15444=15446,15445
<15451=15453,15452
<15454=15455
<15455=15457,15456
<15458=15459
<15459=15460
<15460=15465,15464,15461
<15461=15463,15462
<15466=15467
<15467=15472,15471,15468
<15468=15470,15469
<15473=15474
<15474=15483,15482,15475
<15475=15481,15476
<15476=15478,15477
<15478=15480,15479
<15484=15485
<15485=15494,15493,15486
<15486=15492,15487
<15487=15491,15488
<15488=15490,15489
<15495=15496
<15496=15503,15502,15497
<15497=15501,15498
<15498=15500,15499
<15504=15505
<15505=15517,15506
<15506=15515,15513,15509,15507
<15507=15508
<15509=15510
<15510=15512,15511
<15513=15514
<15515=15516
<15517=15518
<15519=15604,15600,15597,15520
<15520=15521
<15521=15591,15559,15522
<15522=15523
<15523=15524
<15524=15555,15538,15525
<15525=15526
<15526=15537,15536,15535,15534,15533,15532,15531,15530,15529,15528,15527
<15538=15554,15553,15552,15551,15550,15549,15548,15547,15546,15545,15544,15543,15542,15541,15540,15539
<15555=15556
<15556=15558,15557
<15559=15580,15572,15564,15560
<15560=15561
<15561=15563,15562
<15564=15565
<15565=15569,15566
<15566=15568,15567
<15569=15571,15570
<15572=15573
<15573=15577,15574
<15574=15576,15575
<15577=15579,15578
<15580=15581
<15581=15587,15582
<15582=15583
<15583=15584
<15584=15586,15585
<15587=15588
<15588=15590,15589
<15591=15592
<15592=15594,15593
<15594=15596,15595
<15597=15599,15598
<15600=15601
<15601=15603,15602
<15604=15605
<15605=15606
<15606=15611,15610,15607
<15607=15609,15608
<15612=15613
<15613=15619,15614
<15614=15617,15615
<15615=15616
<15617=15618
<15619=15620
<15621=15622
<15622=15633,15623
<15623=15631,15624
<15624=15629,15627,15625
<15625=15626
<15627=15628
<15629=15630
<15631=15632
<15634=15635
<15635=15644,15643,15636
<15636=15642,15637
<15637=15641,15638
<15638=15640,15639
<15645=15646
<15646=15667,15666,15647
<15647=15665,15648
<15648=15663,15649
<15649=15661,15652,15650
<15650=15651
<15652=15653
<15653=15659,15654
<15654=15655
<15655=15656
<15656=15658,15657
<15659=15660
<15661=15662
<15663=15664
<15668=15669
<15669=15677,15670
<15670=15675,15671
<15671=15672
<15672=15674,15673
<15675=15676
<15677=15678
<15679=15835,15831,15828,15680
<15680=15804,15751,15730,15709,15691,15685,15681
<15681=15682
<15682=15684,15683
<15685=15686
<15686=15688,15687
<15688=15690,15689
<15691=15692
<15692=15708,15707,15693
<15693=15706,15694
<15694=15704,15695
<15695=15696
<15696=15697
<15697=15701,15698
<15698=15700,15699
<15701=15703,15702
<15704=15705
<15709=15710
<15710=15729,15728,15711
<15711=15727,15712
<15712=15721,15713
<15713=15719,15714
<15714=15715
<15715=15716
<15716=15718,15717
<15719=15720
<15721=15725,15722
<15722=15723
<15723=15724
<15725=15726
<15730=15731
<15731=15750,15749,15732
<15732=15748,15733
<15733=15742,15734
<15734=15740,15735
<15735=15736
<15736=15737
<15737=15739,15738
<15740=15741
<15742=15746,15743
<15743=15744
<15744=15745
<15746=15747
<15751=15802,15752
<15752=15790,15778,15753
<15753=15754
<15754=15774,15755
<15755=15772,15770,15763,15756
<15756=15757
<15757=15761,15758
<15758=15759
<15759=15760
<15761=15762
<15763=15764
<15764=15768,15765
<15765=15766
<15766=15767
<15768=15769
<15770=15771
<15772=15773
<15774=15775
<15775=15777,15776
<15778=15779
<15779=15789,15788,15780
<15780=15787,15781
<15781=15785,15782
<15782=15783
<15783=15784
<15785=15786
<15790=15791
<15791=15801,15800,15792
<15792=15799,15793
<15793=15797,15794
<15794=15795
<15795=15796
<15797=15798
<15802=15803
<15804=15805
<15805=15827,15826,15806
<15806=15825,15807
<15807=15823,15808
<15808=15821,15817,15815,15809
<15809=15810
<15810=15813,15812,15811
<15813=15814
<15815=15816
<15817=15818
<15818=15820,15819
<15821=15822
<15823=15824
<15828=15830,15829
<15831=15832
<15832=15834,15833
<15835=15836
<15836=15837
<15837=15842,15841,15838
<15838=15840,15839
<15843=15844
<15844=15849,15848,15845
<15845=15847,15846
<15850=15851
<15851=15853,15852
<15854=15855
<15855=15860,15859,15856
<15856=15858,15857
<15861=15862
<15862=15867,15866,15863
<15863=15865,15864
<15868=15869
<15869=15874,15873,15870
<15870=15872,15871
<15875=15876
<15876=15881,15880,15877
<15877=15879,15878
<15882=15884,15883
<15884=15885
<15885=15887,15886
<15888=15889
<15889=15911,15890
<15890=15909,15907,15905,15903,15897,15891
<15891=15892
<15892=15895,15894,15893
<15895=15896
<15897=15898
<15898=15901,15900,15899
<15901=15902
<15903=15904
<15905=15906
<15907=15908
<15909=15910
<15911=15912
<15913=15914
<15914=15920,15915
<15915=15918,15916
<15916=15917
<15918=15919
<15920=15921
<15922=15923
<15924=15925
<15925=15939,15926
<15926=15937,15935,15933,15931,15929,15927
<15927=15928
<15929=15930
<15931=15932
<15933=15934
<15935=15936
<15937=15938
<15939=15940
<15941=15942
<15942=15947,15946,15943
<15943=15945,15944
<15948=15965,15961,15958,15949
<15949=15950
<15950=15954,15951
<15951=15952
<15952=15953
<15954=15955
<15955=15957,15956
<15958=15960,15959
<15961=15962
<15962=15964,15963
<15965=15966
<15966=15967
<15967=15972,15971,15968
<15968=15970,15969
<15973=15974
<15974=15976,15975
<15977=15978
<15978=15990,15979
<15979=15988,15986,15980
<15980=15981
<15981=15985,15982
<15982=15984,15983
<15986=15987
<15988=15989
<15990=15991
<15992=15993
<15993=16005,15994
<15994=16003,16001,15995
<15995=15996
<15996=16000,15997
<15997=15999,15998
<16001=16002
<16003=16004
<16005=16006
<16007=16008
<16008=16013,16012,16009
<16009=16011,16010
<16014=16015
<16015=16020,16019,16016
<16016=16018,16017
<16021=16022
<16022=16027,16026,16023
<16023=16025,16024
<16093=16120,16119,16094
<16094=16116,16113,16110,16107,16104,16101,16098,16095
<16095=16097,16096
<16098=16100,16099
<16101=16103,16102
<16104=16106,16105
<16107=16109,16108
<16110=16112,16111
<16113=16115,16114
<16116=16118,16117
<16120=16678,16130,16121
<16121=16122
<16122=16128,16123
<16123=16124
<16124=16125
<16125=16127,16126
<16128=16129
<16130=16670,16666,16663,16131
<16131=16654,16636,16630,16623,16614,16605,16255,16248,16223,16199,16178,16157,16147,16146,16145,16144,16142,16141,16140,16139,16137,16136,16135,16134,16132
<16132=16133
<16137=16138
<16142=16143
<16147=16148
<16148=16156,16149
<16149=16153,16150
<16150=16152,16151
<16153=16155,16154
<16157=16158
<16158=16177,16176,16159
<16159=16175,16160
<16160=16169,16161
<16161=16167,16162
<16162=16163
<16163=16164
<16164=16166,16165
<16167=16168
<16169=16173,16170
<16170=16171
<16171=16172
<16173=16174
<16178=16179
<16179=16198,16197,16180
<16180=16196,16181
<16181=16190,16182
<16182=16188,16183
<16183=16184
<16184=16185
<16185=16187,16186
<16188=16189
<16190=16194,16191
<16191=16192
<16192=16193
<16194=16195
<16199=16200
<16200=16222,16221,16201
<16201=16220,16202
<16202=16218,16203
<16203=16216,16212,16210,16204
<16204=16205
<16205=16208,16207,16206
<16208=16209
<16210=16211
<16212=16213
<16213=16215,16214
<16216=16217
<16218=16219
<16223=16224
<16224=16245,16225
<16225=16243,16226
<16226=16239,16237,16235,16233,16231,16227
<16227=16228
<16228=16230,16229
<16231=16232
<16233=16234
<16235=16236
<16237=16238
<16239=16240
<16240=16242,16241
<16243=16244
<16245=16247,16246
<16248=16249
<16249=16254,16253,16250
<16250=16252,16251
<16255=16597,16593,16590,16256
<16256=16583,16330,16309,16282,16257
<16257=16258
<16258=16280,16259
<16259=16278,16276,16270,16266,16260
<16260=16261
<16261=16265,16262
<16262=16264,16263
<16266=16267
<16267=16269,16268
<16270=16271
<16271=16275,16272
<16272=16274,16273
<16276=16277
<16278=16279
<16280=16281
<16282=16283
<16283=16307,16284
<16284=16305,16303,16301,16299,16295,16291,16285
<16285=16286
<16286=16290,16287
<16287=16289,16288
<16291=16292
<16292=16294,16293
<16295=16296
<16296=16298,16297
<16299=16300
<16301=16302
<16303=16304
<16305=16306
<16307=16308
<16309=16310
<16310=16328,16311
<16311=16322,16318,16312
<16312=16313
<16313=16317,16314
<16314=16316,16315
<16318=16319
<16319=16321,16320
<16322=16323
<16323=16327,16324
<16324=16326,16325
<16328=16329
<16330=16577,16434,16331
<16331=16332
<16332=16409,16400,16389,16378,16373,16354,16337,16333
<16333=16334
<16334=16336,16335
<16337=16338
<16338=16351,16339
<16339=16349,16340
<16340=16345,16341
<16341=16342
<16342=16344,16343
<16345=16346
<16346=16348,16347
<16349=16350
<16351=16353,16352
<16354=16355
<16355=16371,16356
<16356=16369,16367,16365,16363,16361,16359,16357
<16357=16358
<16359=16360
<16361=16362
<16363=16364
<16365=16366
<16367=16368
<16369=16370
<16371=16372
<16373=16374
<16374=16377,16376,16375
<16378=16379
<16379=16387,16380
<16380=16385,16383,16381
<16381=16382
<16383=16384
<16385=16386
<16387=16388
<16389=16390
<16390=16398,16391
<16391=16394,16392
<16392=16393
<16394=16395
<16395=16397,16396
<16398=16399
<16400=16405,16401
<16401=16404,16403,16402
<16405=16408,16407,16406
<16409=16410
<16410=16433,16432,16431,16411
<16411=16430,16412
<16412=16422,16414,16413
<16414=16420,16415
<16415=16416
<16416=16417
<16417=16419,16418
<16420=16421
<16422=16428,16423
<16423=16424
<16424=16425
<16425=16427,16426
<16428=16429
<16434=16564,16555,16542,16528,16513,16504,16493,16482,16477,16458,16441,16435
<16435=16436
<16436=16440,16437
<16437=16439,16438
<16441=16442
<16442=16455,16443
<16443=16453,16444
<16444=16449,16445
<16445=16446
<16446=16448,16447
<16449=16450
<16450=16452,16451
<16453=16454
<16455=16457,16456
<16458=16459
<16459=16475,16460
<16460=16473,16471,16469,16467,16465,16463,16461
<16461=16462
<16463=16464
<16465=16466
<16467=16468
<16469=16470
<16471=16472
<16473=16474
<16475=16476
<16477=16478
<16478=16481,16480,16479
<16482=16483
<16483=16491,16484
<16484=16489,16487,16485
<16485=16486
<16487=16488
<16489=16490
<16491=16492
<16493=16494
<16494=16502,16495
<16495=16498,16496
<16496=16497
<16498=16499
<16499=16501,16500
<16502=16503
<16504=16509,16505
<16505=16508,16507,16506
<16509=16512,16511,16510
<16513=16514
<16514=16527,16526,16525,16515
<16515=16524,16516
<16516=16521,16518,16517
<16518=16520,16519
<16521=16523,16522
<16528=16529
<16529=16541,16540,16530
<16530=16539,16531
<16531=16537,16532
<16532=16535,16533
<16533=16534
<16535=16536
<16537=16538
<16542=16543
<16543=16554,16553,16544
<16544=16552,16545
<16545=16547,16546
<16547=16549,16548
<16549=16551,16550
<16555=16556
<16556=16563,16562,16557
<16557=16561,16558
<16558=16560,16559
<16564=16565
<16565=16576,16575,16566
<16566=16574,16567
<16567=16569,16568
<16569=16571,16570
<16571=16573,16572
<16577=16578
<16578=16582,16579
<16579=16581,16580
<16583=16584
<16584=16589,16588,16585
<16585=16587,16586
<16590=16592,16591
<16593=16594
<16594=16596,16595
<16597=16598
<16598=16599
<16599=16604,16603,16600
<16600=16602,16601
<16605=16606
<16606=16613,16612,16607
<16607=16611,16608
<16608=16610,16609
<16614=16615
<16615=16622,16621,16616
<16616=16620,16617
<16617=16619,16618
<16623=16624
<16624=16629,16628,16625
<16625=16627,16626
<16630=16632,16631
<16632=16633
<16633=16635,16634
<16636=16637
<16637=16653,16652,16638
<16638=16651,16639
<16639=16641,16640
<16641=16650,16642
<16642=16644,16643
<16644=16645
<16645=16647,16646
<16647=16649,16648
<16654=16655
<16655=16662,16661,16656
<16656=16660,16657
<16657=16659,16658
<16663=16665,16664
<16666=16667
<16667=16669,16668
<16670=16671
<16671=16672
<16672=16677,16676,16673
<16673=16675,16674
<16678=16679
<16679=16684,16683,16680
<16680=16682,16681
<16750=16783,16782,16751
<16751=16779,16776,16773,16770,16767,16764,16761,16758,16755,16752
<16752=16754,16753
<16755=16757,16756
<16758=16760,16759
<16761=16763,16762
<16764=16766,16765
<16767=16769,16768
<16770=16772,16771
<16773=16775,16774
<16776=16778,16777
<16779=16781,16780
<16783=17173,17169,17165,17161,17136,17129,17122,17115,17108,17093,17078,17063,16801,16800,16799,16798,16796,16795,16794,16793,16791,16790,16789,16788,16786,16784
<16784=16785
<16786=16787
<16791=16792
<16796=16797
<16801=16804,16802
<16802=16803
<16804=17059,16975,16805
<16805=16973,16841,16806
<16806=16807
<16807=16808
<16808=16809
<16809=16839,16810
<16810=16837,16835,16833,16831,16829,16827,16825,16821,16819,16817,16815,16813,16811
<16811=16812
<16813=16814
<16815=16816
<16817=16818
<16819=16820
<16821=16822
<16822=16824,16823
<16825=16826
<16827=16828
<16829=16830
<16831=16832
<16833=16834
<16835=16836
<16837=16838
<16839=16840
<16841=16969,16934,16922,16918,16842
<16842=16914,16843
<16843=16910,16852,16848,16844
<16844=16845
<16845=16847,16846
<16848=16849
<16849=16851,16850
<16852=16902,16898,16895,16853
<16853=16885,16875,16865,16854
<16854=16855
<16855=16861,16856
<16856=16857
<16857=16858
<16858=16860,16859
<16861=16862
<16862=16864,16863
<16865=16866
<16866=16872,16867
<16867=16871,16868
<16868=16870,16869
<16872=16874,16873
<16875=16876
<16876=16882,16877
<16877=16881,16878
<16878=16880,16879
<16882=16884,16883
<16885=16886
<16886=16892,16887
<16887=16891,16888
<16888=16890,16889
<16892=16894,16893
<16895=16897,16896
<16898=16899
<16899=16901,16900
<16902=16903
<16903=16904
<16904=16909,16908,16905
<16905=16907,16906
<16910=16911
<16911=16913,16912
<16914=16915
<16915=16917,16916
<16918=16919
<16919=16921,16920
<16922=16923
<16923=16933,16932,16924
<16924=16931,16925
<16925=16927,16926
<16927=16928
<16928=16930,16929
<16934=16935
<16935=16968,16936
<16936=16966,16937
<16937=16964,16962,16960,16958,16956,16954,16952,16948,16946,16944,16942,16940,16938
<16938=16939
<16940=16941
<16942=16943
<16944=16945
<16946=16947
<16948=16949
<16949=16951,16950
<16952=16953
<16954=16955
<16956=16957
<16958=16959
<16960=16961
<16962=16963
<16964=16965
<16966=16967
<16969=16970
<16970=16972,16971
<16973=16974
<16975=17052,17017,16994,16993,16992,16991,16990,16989,16988,16987,16986,16980,16976
<16976=16977
<16977=16979,16978
<16980=16981
<16981=16985,16982
<16982=16984,16983
<16994=16995
<16995=17016,16996
<16996=17014,16997
<16997=17012,17010,17008,17006,17004,17002,17000,16998
<16998=16999
<17000=17001
<17002=17003
<17004=17005
<17006=17007
<17008=17009
<17010=17011
<17012=17013
<17014=17015
<17017=17018
<17018=17050,17019
<17019=17048,17046,17044,17042,17040,17038,17034,17030,17028,17026,17024,17022,17020
<17020=17021
<17022=17023
<17024=17025
<17026=17027
<17028=17029
<17030=17031
<17031=17033,17032
<17034=17035
<17035=17037,17036
<17038=17039
<17040=17041
<17042=17043
<17044=17045
<17046=17047
<17048=17049
<17050=17051
<17052=17053
<17053=17058,17057,17054
<17054=17056,17055
<17059=17060
<17060=17062,17061
<17063=17064
<17064=17076,17065
<17065=17074,17072,17066
<17066=17067
<17067=17069,17068
<17069=17071,17070
<17072=17073
<17074=17075
<17076=17077
<17078=17079
<17079=17091,17080
<17080=17089,17087,17081
<17081=17082
<17082=17084,17083
<17084=17086,17085
<17087=17088
<17089=17090
<17091=17092
<17093=17094
<17094=17106,17095
<17095=17104,17102,17096
<17096=17097
<17097=17099,17098
<17099=17101,17100
<17102=17103
<17104=17105
<17106=17107
<17108=17109
<17109=17114,17113,17110
<17110=17112,17111
<17115=17116
<17116=17121,17120,17117
<17117=17119,17118
<17122=17123
<17123=17128,17127,17124
<17124=17126,17125
<17129=17130
<17130=17135,17134,17131
<17131=17133,17132
<17136=17153,17149,17146,17137
<17137=17138
<17138=17142,17139
<17139=17140
<17140=17141
<17142=17143
<17143=17145,17144
<17146=17148,17147
<17149=17150
<17150=17152,17151
<17153=17154
<17154=17155
<17155=17160,17159,17156
<17156=17158,17157
<17161=17162
<17162=17164,17163
<17165=17166
<17166=17168,17167
<17169=17170
<17170=17172,17171
<17173=17174
<17174=17179,17178,17175
<17175=17177,17176
<17227=17266,17265,17228
<17228=17262,17259,17256,17253,17250,17247,17244,17241,17238,17235,17232,17229
<17229=17231,17230
<17232=17234,17233
<17235=17237,17236
<17238=17240,17239
<17241=17243,17242
<17244=17246,17245
<17247=17249,17248
<17250=17252,17251
<17253=17255,17254
<17256=17258,17257
<17259=17261,17260
<17262=17264,17263
<17266=17896,17887,17862,17845,17831,17814,17795,17776,17757,17742,17729,17710,17703,17692,17685,17674,17663,17656,17649,17605,17598,17353,17337,17322,17307,17292,17283,17269,17267
<17267=17268
<17269=17270
<17270=17280,17271
<17271=17277,17272
<17272=17274,17273
<17274=17276,17275
<17277=17279,17278
<17280=17282,17281
<17283=17284
<17284=17290,17285
<17285=17288,17286
<17286=17287
<17288=17289
<17290=17291
<17292=17293
<17293=17305,17294
<17294=17303,17301,17295
<17295=17296
<17296=17298,17297
<17298=17300,17299
<17301=17302
<17303=17304
<17305=17306
<17307=17308
<17308=17320,17309
<17309=17318,17316,17310
<17310=17311
<17311=17313,17312
<17313=17315,17314
<17316=17317
<17318=17319
<17320=17321
<17322=17323
<17323=17335,17324
<17324=17333,17331,17325
<17325=17326
<17326=17328,17327
<17328=17330,17329
<17331=17332
<17333=17334
<17335=17336
<17337=17347,17338
<17338=17346,17345,17344,17343,17342,17341,17339
<17339=17340
<17347=17348
<17348=17352,17349
<17349=17351,17350
<17353=17590,17586,17583,17354
<17354=17550,17541,17522,17511,17485,17428,17419,17405,17366,17355
<17355=17360,17356
<17356=17357
<17357=17359,17358
<17360=17361
<17361=17363,17362
<17363=17365,17364
<17366=17401,17391,17367
<17367=17368
<17368=17390,17389,17388,17387,17386,17385,17384,17383,17382,17381,17380,17379,17378,17369
<17369=17370
<17370=17374,17371
<17371=17372
<17372=17373
<17374=17375
<17375=17377,17376
<17391=17392
<17392=17393
<17393=17397,17394
<17394=17395
<17395=17396
<17397=17398
<17398=17400,17399
<17401=17402
<17402=17404,17403
<17405=17415,17406
<17406=17407
<17407=17411,17408
<17408=17409
<17409=17410
<17411=17412
<17412=17414,17413
<17415=17416
<17416=17418,17417
<17419=17420
<17420=17427,17421
<17421=17425,17422
<17422=17423
<17423=17424
<17425=17426
<17428=17429
<17429=17484,17483,17430
<17430=17482,17431
<17431=17457,17432
<17432=17445,17433
<17433=17442,17434
<17434=17440,17435
<17435=17436
<17436=17437
<17437=17439,17438
<17440=17441
<17442=17444,17443
<17445=17454,17446
<17446=17452,17447
<17447=17448
<17448=17449
<17449=17451,17450
<17452=17453
<17454=17456,17455
<17457=17470,17458
<17458=17467,17459
<17459=17465,17460
<17460=17461
<17461=17462
<17462=17464,17463
<17465=17466
<17467=17469,17468
<17470=17479,17471
<17471=17477,17472
<17472=17473
<17473=17474
<17474=17476,17475
<17477=17478
<17479=17481,17480
<17485=17486
<17486=17510,17509,17508,17487
<17487=17507,17488
<17488=17498,17489
<17489=17493,17490
<17490=17492,17491
<17493=17497,17494
<17494=17496,17495
<17498=17502,17499
<17499=17501,17500
<17502=17506,17503
<17503=17505,17504
<17511=17512
<17512=17520,17513
<17513=17518,17516,17514
<17514=17515
<17516=17517
<17518=17519
<17520=17521
<17522=17523
<17523=17539,17524
<17524=17537,17535,17533,17531,17529,17527,17525
<17525=17526
<17527=17528
<17529=17530
<17531=17532
<17533=17534
<17535=17536
<17537=17538
<17539=17540
<17541=17546,17542
<17542=17545,17544,17543
<17546=17549,17548,17547
<17550=17551
<17551=17582,17581,17580,17552
<17552=17579,17553
<17553=17571,17563,17555,17554
<17555=17561,17556
<17556=17557
<17557=17558
<17558=17560,17559
<17561=17562
<17563=17569,17564
<17564=17565
<17565=17566
<17566=17568,17567
<17569=17570
<17571=17577,17572
<17572=17573
<17573=17574
<17574=17576,17575
<17577=17578
<17583=17585,17584
<17586=17587
<17587=17589,17588
<17590=17591
<17591=17592
<17592=17597,17596,17593
<17593=17595,17594
<17598=17599
<17599=17604,17603,17600
<17600=17602,17601
<17605=17606
<17606=17648,17647,17646,17607
<17607=17645,17608
<17608=17642,17639,17636,17633,17630,17627,17624,17621,17618,17615,17612,17609
<17609=17611,17610
<17612=17614,17613
<17615=17617,17616
<17618=17620,17619
<17621=17623,17622
<17624=17626,17625
<17627=17629,17628
<17630=17632,17631
<17633=17635,17634
<17636=17638,17637
<17639=17641,17640
<17642=17644,17643
<17649=17650
<17650=17654,17651
<17651=17652
<17652=17653
<17654=17655
<17656=17657
<17657=17661,17658
<17658=17659
<17659=17660
<17661=17662
<17663=17664
<17664=17672,17665
<17665=17670,17668,17666
<17666=17667
<17668=17669
<17670=17671
<17672=17673
<17674=17675
<17675=17683,17676
<17676=17681,17679,17677
<17677=17678
<17679=17680
<17681=17682
<17683=17684
<17685=17686
<17686=17690,17687
<17687=17688
<17688=17689
<17690=17691
<17692=17693
<17693=17701,17694
<17694=17699,17697,17695
<17695=17696
<17697=17698
<17699=17700
<17701=17702
<17703=17704
<17704=17708,17705
<17705=17706
<17706=17707
<17708=17709
<17710=17711
<17711=17727,17712
<17712=17725,17723,17721,17715,17713
<17713=17714
<17715=17716
<17716=17720,17717
<17717=17719,17718
<17721=17722
<17723=17724
<17725=17726
<17727=17728
<17729=17730
<17730=17740,17731
<17731=17738,17736,17734,17732
<17732=17733
<17734=17735
<17736=17737
<17738=17739
<17740=17741
<17742=17743
<17743=17755,17744
<17744=17753,17751,17749,17747,17745
<17745=17746
<17747=17748
<17749=17750
<17751=17752
<17753=17754
<17755=17756
<17757=17758
<17758=17774,17759
<17759=17770,17766,17760
<17760=17761
<17761=17765,17762
<17762=17764,17763
<17766=17767
<17767=17769,17768
<17770=17771
<17771=17773,17772
<17774=17775
<17776=17777
<17777=17793,17778
<17778=17789,17785,17779
<17779=17780
<17780=17784,17781
<17781=17783,17782
<17785=17786
<17786=17788,17787
<17789=17790
<17790=17792,17791
<17793=17794
<17795=17796
<17796=17812,17797
<17797=17808,17804,17798
<17798=17799
<17799=17803,17800
<17800=17802,17801
<17804=17805
<17805=17807,17806
<17808=17809
<17809=17811,17810
<17812=17813
<17814=17827,17823,17819,17815
<17815=17818,17817,17816
<17819=17822,17821,17820
<17823=17826,17825,17824
<17827=17830,17829,17828
<17831=17841,17832
<17832=17840,17839,17838,17837,17836,17835,17833
<17833=17834
<17841=17842
<17842=17844,17843
<17845=17856,17846
<17846=17849,17847
<17847=17848
<17849=17850
<17850=17854,17851
<17851=17852
<17852=17853
<17854=17855
<17856=17857
<17857=17861,17858
<17858=17860,17859
<17862=17883,17863
<17863=17864
<17864=17865
<17865=17882,17866
<17866=17880,17867
<17867=17878,17876,17874,17872,17870,17868
<17868=17869
<17870=17871
<17872=17873
<17874=17875
<17876=17877
<17878=17879
<17880=17881
<17883=17884
<17884=17886,17885
<17887=17888
<17888=17895,17894,17889
<17889=17893,17890
<17890=17892,17891
<17896=17897
<17897=17900,17899,17898
<17949=17988,17987,17950
<17950=17984,17981,17978,17975,17972,17969,17966,17963,17960,17957,17954,17951
<17951=17953,17952
<17954=17956,17955
<17957=17959,17958
<17960=17962,17961
<17963=17965,17964
<17966=17968,17967
<17969=17971,17970
<17972=17974,17973
<17975=17977,17976
<17978=17980,17979
<17981=17983,17982
<17984=17986,17985
<17988=19252,19241,19228,19221,19214,19198,19191,19184,19177,19170,19163,19162,19161,19160,19159,19158,19157,19148,19134,18932,18868,18861,18854,18841,18831,18795,18731,18727,18718,18455,18448,18441,18427,18420,18413,17989,17991,17999,18006,18021,18031,18033,18034,18035,18036,18038,18039,18040,18041,18043,18044,18045,18046,18048,18049,18050,18051,18053,18054,18055,18056,18058,18059,18060,18061,18063,18064,18065,18066,18068,18069,18070,18071,18073,18074,18075,18076,18083,18145,18156,18249,18321,18392,18399,18406
<17989=17990
<17991=17992
<17992=17994,17993
<17994=17996,17995
<17996=17998,17997
<17999=18000
<18000=18002,18001
<18002=18003
<18003=18005,18004
<18006=18007
<18007=18019,18008
<18008=18017,18009
<18009=18010
<18010=18012,18011
<18012=18016,18013
<18013=18015,18014
<18017=18018
<18019=18020
<18021=18022
<18022=18030,18029,18023
<18023=18028,18024
<18024=18026,18025
<18026=18027
<18031=18032
<18036=18037
<18041=18042
<18046=18047
<18051=18052
<18056=18057
<18061=18062
<18066=18067
<18071=18072
<18076=18077
<18077=18081,18078
<18078=18079
<18079=18080
<18081=18082
<18083=18137,18133,18130,18084
<18084=18121,18107,18085
<18085=18086
<18086=18099,18087
<18087=18088
<18088=18089
<18089=18097,18090
<18090=18095,18091
<18091=18092
<18092=18094,18093
<18095=18096
<18097=18098
<18099=18100
<18100=18102,18101
<18102=18106,18103
<18103=18105,18104
<18107=18108
<18108=18112,18109
<18109=18111,18110
<18112=18114,18113
<18114=18118,18115
<18115=18117,18116
<18118=18120,18119
<18121=18122
<18122=18129,18128,18123
<18123=18127,18124
<18124=18126,18125
<18130=18132,18131
<18133=18134
<18134=18136,18135
<18137=18138
<18138=18139
<18139=18144,18143,18140
<18140=18142,18141
<18145=18146
<18146=18155,18147
<18147=18154,18148
<18148=18150,18149
<18150=18151
<18151=18153,18152
<18156=18225,18157
<18157=18218,18209,18208,18207,18206,18204,18203,18202,18201,18199,18198,18197,18196,18194,18193,18192,18191,18189,18188,18187,18186,18184,18183,18182,18181,18179,18178,18177,18176,18174,18173,18172,18171,18169,18168,18167,18166,18164,18160,18158
<18158=18159
<18160=18161
<18161=18163,18162
<18164=18165
<18169=18170
<18174=18175
<18179=18180
<18184=18185
<18189=18190
<18194=18195
<18199=18200
<18204=18205
<18209=18216,18210
<18210=18211
<18211=18213,18212
<18213=18215,18214
<18216=18217
<18218=18219
<18219=18223,18220
<18220=18221
<18221=18222
<18223=18224
<18225=18226
<18226=18239,18227
<18227=18236,18228
<18228=18235,18229
<18229=18231,18230
<18231=18232
<18232=18234,18233
<18236=18238,18237
<18239=18241,18240
<18241=18248,18242
<18242=18244,18243
<18244=18245
<18245=18247,18246
<18249=18319,18289,18250
<18250=18251
<18251=18252
<18252=18253
<18253=18288,18254
<18254=18286,18255
<18255=18284,18282,18280,18278,18276,18272,18270,18266,18264,18262,18260,18258,18256
<18256=18257
<18258=18259
<18260=18261
<18262=18263
<18264=18265
<18266=18267
<18267=18269,18268
<18270=18271
<18272=18273
<18273=18275,18274
<18276=18277
<18278=18279
<18280=18281
<18282=18283
<18284=18285
<18286=18287
<18289=18290
<18290=18291
<18291=18318,18292
<18292=18316,18293
<18293=18314,18312,18310,18308,18306,18304,18302,18300,18296,18294
<18294=18295
<18296=18297
<18297=18299,18298
<18300=18301
<18302=18303
<18304=18305
<18306=18307
<18308=18309
<18310=18311
<18312=18313
<18314=18315
<18316=18317
<18319=18320
<18321=18384,18380,18377,18322
<18322=18367,18343,18333,18323
<18323=18324
<18324=18330,18325
<18325=18329,18326
<18326=18328,18327
<18330=18332,18331
<18333=18334
<18334=18340,18335
<18335=18339,18336
<18336=18338,18337
<18340=18342,18341
<18343=18365,18355,18344
<18344=18345
<18345=18346
<18346=18352,18347
<18347=18351,18348
<18348=18350,18349
<18352=18354,18353
<18355=18356
<18356=18362,18357
<18357=18361,18358
<18358=18360,18359
<18362=18364,18363
<18365=18366
<18367=18368
<18368=18374,18369
<18369=18373,18370
<18370=18372,18371
<18374=18376,18375
<18377=18379,18378
<18380=18381
<18381=18383,18382
<18384=18385
<18385=18386
<18386=18391,18390,18387
<18387=18389,18388
<18392=18393
<18393=18398,18397,18394
<18394=18396,18395
<18399=18400
<18400=18405,18404,18401
<18401=18403,18402
<18406=18407
<18407=18412,18411,18408
<18408=18410,18409
<18413=18414
<18414=18419,18418,18415
<18415=18417,18416
<18420=18421
<18421=18426,18425,18422
<18422=18424,18423
<18427=18428
<18428=18440,18439,18429
<18429=18438,18430
<18430=18437,18431
<18431=18433,18432
<18433=18434
<18434=18436,18435
<18441=18442
<18442=18446,18443
<18443=18444
<18444=18445
<18446=18447
<18448=18449
<18449=18453,18450
<18450=18451
<18451=18452
<18453=18454
<18455=18716,18464,18456
<18456=18457
<18457=18463,18462,18461,18460,18459,18458
<18464=18699,18678,18657,18644,18465
<18465=18642,18635,18466
<18466=18467
<18467=18468
<18468=18633,18499,18469
<18469=18470
<18470=18471
<18471=18495,18487,18472
<18472=18473
<18473=18474
<18474=18484,18475
<18475=18483,18476
<18476=18480,18477
<18477=18479,18478
<18480=18482,18481
<18484=18486,18485
<18487=18488
<18488=18492,18489
<18489=18491,18490
<18492=18494,18493
<18495=18496
<18496=18498,18497
<18499=18500
<18500=18629,18517,18501
<18501=18502
<18502=18503
<18503=18504
<18504=18514,18505
<18505=18513,18506
<18506=18510,18507
<18507=18509,18508
<18510=18512,18511
<18514=18516,18515
<18517=18625,18616,18601,18600,18599,18598,18597,18596,18595,18594,18593,18575,18518
<18518=18569,18544,18519
<18519=18520
<18520=18543,18542,18541,18540,18539,18538,18537,18536,18535,18521
<18521=18522
<18522=18532,18523
<18523=18531,18524
<18524=18528,18525
<18525=18527,18526
<18528=18530,18529
<18532=18534,18533
<18544=18561,18545
<18545=18559,18546
<18546=18547
<18547=18557,18548
<18548=18553,18549
<18549=18550
<18550=18552,18551
<18553=18554
<18554=18556,18555
<18557=18558
<18559=18560
<18561=18562
<18562=18566,18563
<18563=18565,18564
<18566=18568,18567
<18569=18570
<18570=18572,18571
<18572=18574,18573
<18575=18589,18583,18576
<18576=18577
<18577=18578
<18578=18582,18579
<18579=18581,18580
<18583=18584
<18584=18588,18585
<18585=18587,18586
<18589=18590
<18590=18592,18591
<18601=18602
<18602=18615,18614,18603
<18603=18613,18604
<18604=18612,18605
<18605=18609,18606
<18606=18608,18607
<18609=18611,18610
<18616=18617
<18617=18624,18623,18618
<18618=18622,18619
<18619=18621,18620
<18625=18626
<18626=18628,18627
<18629=18630
<18630=18632,18631
<18633=18634
<18635=18636
<18636=18637
<18637=18639,18638
<18639=18641,18640
<18642=18643
<18644=18645
<18645=18655,18646
<18646=18651,18647
<18647=18648
<18648=18650,18649
<18651=18652
<18652=18654,18653
<18655=18656
<18657=18658
<18658=18676,18659
<18659=18674,18672,18668,18664,18660
<18660=18661
<18661=18663,18662
<18664=18665
<18665=18667,18666
<18668=18669
<18669=18671,18670
<18672=18673
<18674=18675
<18676=18677
<18678=18679
<18679=18697,18680
<18680=18695,18693,18691,18689,18687,18685,18681
<18681=18682
<18682=18684,18683
<18685=18686
<18687=18688
<18689=18690
<18691=18692
<18693=18694
<18695=18696
<18697=18698
<18699=18700
<18700=18714,18701
<18701=18710,18708,18702
<18702=18703
<18703=18707,18704
<18704=18706,18705
<18708=18709
<18710=18711
<18711=18713,18712
<18714=18715
<18716=18717
<18718=18719
<18719=18725,18720
<18720=18723,18721
<18721=18722
<18723=18724
<18725=18726
<18727=18728
<18728=18730,18729
<18731=18791,18732
<18732=18784,18773,18769,18768,18767,18766,18764,18763,18762,18761,18759,18758,18757,18756,18754,18753,18752,18751,18749,18748,18747,18746,18744,18735,18733
<18733=18734
<18735=18736
<18736=18738,18737
<18738=18739
<18739=18741,18740
<18741=18743,18742
<18744=18745
<18749=18750
<18754=18755
<18759=18760
<18764=18765
<18769=18770
<18770=18772,18771
<18773=18780,18774
<18774=18775
<18775=18777,18776
<18777=18779,18778
<18780=18781
<18781=18783,18782
<18784=18785
<18785=18789,18786
<18786=18787
<18787=18788
<18789=18790
<18791=18792
<18792=18794,18793
<18795=18796
<18796=18830,18829,18797
<18797=18828,18798
<18798=18826,18799
<18799=18824,18822,18820,18818,18816,18814,18812,18810,18806,18804,18802,18800
<18800=18801
<18802=18803
<18804=18805
<18806=18807
<18807=18809,18808
<18810=18811
<18812=18813
<18814=18815
<18816=18817
<18818=18819
<18820=18821
<18822=18823
<18824=18825
<18826=18827
<18831=18838,18835,18832
<18832=18834,18833
<18835=18837,18836
<18838=18840,18839
<18841=18850,18846,18842
<18842=18845,18844,18843
<18846=18849,18848,18847
<18850=18853,18852,18851
<18854=18855
<18855=18859,18856
<18856=18857
<18857=18858
<18859=18860
<18861=18862
<18862=18866,18863
<18863=18864
<18864=18865
<18866=18867
<18868=18928,18869
<18869=18921,18910,18906,18905,18904,18903,18901,18900,18899,18898,18896,18895,18894,18893,18891,18890,18889,18888,18886,18885,18884,18883,18881,18872,18870
<18870=18871
<18872=18873
<18873=18875,18874
<18875=18876
<18876=18878,18877
<18878=18880,18879
<18881=18882
<18886=18887
<18891=18892
<18896=18897
<18901=18902
<18906=18907
<18907=18909,18908
<18910=18917,18911
<18911=18912
<18912=18914,18913
<18914=18916,18915
<18917=18918
<18918=18920,18919
<18921=18922
<18922=18926,18923
<18923=18924
<18924=18925
<18926=18927
<18928=18929
<18929=18931,18930
<18932=19126,19122,19119,18933
<18933=19110,19100,19089,19074,19063,19055,18950,18944,18938,18934
<18934=18935
<18935=18937,18936
<18938=18939
<18939=18941,18940
<18941=18943,18942
<18944=18945
<18945=18947,18946
<18947=18949,18948
<18950=19053,18978,18951
<18951=18952
<18952=18953
<18953=18954
<18954=18975,18955
<18955=18973,18956
<18956=18965,18957
<18957=18958
<18958=18960,18959
<18960=18962,18961
<18962=18964,18963
<18965=18966
<18966=18968,18967
<18968=18970,18969
<18970=18972,18971
<18973=18974
<18975=18977,18976
<18978=19040,19027,19020,19005,18992,18979
<18979=18980
<18980=18989,18981
<18981=18987,18982
<18982=18985,18983
<18983=18984
<18985=18986
<18987=18988
<18989=18991,18990
<18992=18993
<18993=19002,18994
<18994=19000,18995
<18995=18998,18996
<18996=18997
<18998=18999
<19000=19001
<19002=19004,19003
<19005=19006
<19006=19016,19007
<19007=19014,19012,19010,19008
<19008=19009
<19010=19011
<19012=19013
<19014=19015
<19016=19017
<19017=19019,19018
<19020=19024,19021
<19021=19023,19022
<19024=19026,19025
<19027=19028
<19028=19039,19038,19029
<19029=19037,19030
<19030=19032,19031
<19032=19034,19033
<19034=19036,19035
<19040=19041
<19041=19052,19051,19042
<19042=19050,19043
<19043=19045,19044
<19045=19047,19046
<19047=19049,19048
<19053=19054
<19055=19056
<19056=19060,19057
<19057=19059,19058
<19060=19062,19061
<19063=19064
<19064=19073,19072,19065
<19065=19071,19066
<19066=19068,19067
<19068=19070,19069
<19074=19076,19075
<19076=19077
<19077=19079,19078
<19079=19088,19080
<19080=19082,19081
<19082=19083
<19083=19085,19084
<19085=19087,19086
<19089=19090
<19090=19099,19098,19091
<19091=19097,19092
<19092=19094,19093
<19094=19096,19095
<19100=19102,19101
<19102=19103
<19103=19105,19104
<19105=19107,19106
<19107=19109,19108
<19110=19111
<19111=19118,19117,19112
<19112=19116,19113
<19113=19115,19114
<19119=19121,19120
<19122=19123
<19123=19125,19124
<19126=19127
<19127=19128
<19128=19133,19132,19129
<19129=19131,19130
<19134=19135
<19135=19147,19146,19136
<19136=19145,19137
<19137=19144,19138
<19138=19140,19139
<19140=19141
<19141=19143,19142
<19148=19149
<19149=19156,19155,19150
<19150=19154,19151
<19151=19153,19152
<19163=19164
<19164=19169,19168,19165
<19165=19167,19166
<19170=19171
<19171=19176,19175,19172
<19172=19174,19173
<19177=19178
<19178=19183,19182,19179
<19179=19181,19180
<19184=19185
<19185=19190,19189,19186
<19186=19188,19187
<19191=19192
<19192=19197,19196,19193
<19193=19195,19194
<19198=19199
<19199=19213,19212,19200
<19200=19211,19201
<19201=19210,19202
<19202=19204,19203
<19204=19205
<19205=19207,19206
<19207=19209,19208
<19214=19215
<19215=19220,19219,19216
<19216=19218,19217
<19221=19222
<19222=19226,19223
<19223=19224
<19224=19225
<19226=19227
<19228=19229
<19229=19237,19230
<19230=19235,19231
<19231=19232
<19232=19234,19233
<19235=19236
<19237=19238
<19238=19240,19239
<19241=19248,19242
<19242=19243
<19243=19245,19244
<19245=19247,19246
<19248=19249
<19249=19251,19250
<19252=19253
<19253=19261,19260,19254
<19254=19259,19255
<19255=19257,19256
<19257=19258
<19397=19427,19426,19398
<19398=19423,19420,19417,19414,19411,19408,19405,19402,19399
<19399=19401,19400
<19402=19404,19403
<19405=19407,19406
<19408=19410,19409
<19411=19413,19412
<19414=19416,19415
<19417=19419,19418
<19420=19422,19421
<19423=19425,19424
<19427=20970,20961,20954,20947,20935,20928,20921,20914,20907,20900,20878,20871,20847,20846,20845,20844,20843,20842,20841,20353,20346,20345,20344,20343,20341,20340,20339,20338,20336,20323,20313,19428,19459,19466,19468,19469,19470,19471,19473,19474,19475,19476,19478,19479,19480,19481,19483,19484,19485,19486,19504,19716,19729,19736,20251,20252,20253,20254,20255,20256,20257,20258,20259,20260,20261,20262,20263,20264,20265,20266,20267,20268,20269,20270,20271,20272,20273,20274,20275,20276,20277
<19428=19455,19429
<19429=19430
<19430=19431
<19431=19453,19432
<19432=19451,19447,19445,19443,19441,19439,19437,19435,19433
<19433=19434
<19435=19436
<19437=19438
<19439=19440
<19441=19442
<19443=19444
<19445=19446
<19447=19448
<19448=19450,19449
<19451=19452
<19453=19454
<19455=19456
<19456=19458,19457
<19459=19460
<19460=19464,19461
<19461=19462
<19462=19463
<19464=19465
<19466=19467
<19471=19472
<19476=19477
<19481=19482
<19486=19487
<19487=19497,19488
<19488=19490,19489
<19490=19492,19491
<19492=19494,19493
<19494=19496,19495
<19497=19499,19498
<19499=19501,19500
<19501=19503,19502
<19504=19714,19705,19505
<19505=19506
<19506=19507
<19507=19703,19559,19508
<19508=19509
<19509=19553,19540,19510
<19510=19511
<19511=19512
<19512=19534,19521,19513
<19513=19514
<19514=19520,19519,19518,19517,19516,19515
<19521=19522
<19522=19523
<19523=19529,19524
<19524=19526,19525
<19526=19528,19527
<19529=19531,19530
<19531=19533,19532
<19534=19535
<19535=19539,19536
<19536=19538,19537
<19540=19541
<19541=19542
<19542=19548,19543
<19543=19545,19544
<19545=19547,19546
<19548=19550,19549
<19550=19552,19551
<19553=19554
<19554=19556,19555
<19556=19558,19557
<19559=19560
<19560=19697,19579,19561
<19561=19562
<19562=19563
<19563=19564
<19564=19574,19565
<19565=19573,19566
<19566=19570,19567
<19567=19569,19568
<19570=19572,19571
<19574=19576,19575
<19576=19578,19577
<19579=19693,19682,19667,19666,19665,19664,19663,19662,19661,19660,19659,19641,19580
<19580=19635,19608,19581
<19581=19582
<19582=19607,19606,19605,19604,19603,19602,19601,19600,19599,19583
<19583=19584
<19584=19594,19585
<19585=19593,19586
<19586=19590,19587
<19587=19589,19588
<19590=19592,19591
<19594=19596,19595
<19596=19598,19597
<19608=19627,19609
<19609=19625,19610
<19610=19611
<19611=19623,19612
<19612=19617,19613
<19613=19614
<19614=19616,19615
<19617=19618
<19618=19622,19619
<19619=19621,19620
<19623=19624
<19625=19626
<19627=19628
<19628=19630,19629
<19630=19632,19631
<19632=19634,19633
<19635=19636
<19636=19638,19637
<19638=19640,19639
<19641=19655,19649,19642
<19642=19643
<19643=19644
<19644=19648,19645
<19645=19647,19646
<19649=19650
<19650=19654,19651
<19651=19653,19652
<19655=19656
<19656=19658,19657
<19667=19668
<19668=19681,19680,19669
<19669=19679,19670
<19670=19678,19671
<19671=19675,19672
<19672=19674,19673
<19675=19677,19676
<19682=19683
<19683=19692,19691,19684
<19684=19690,19685
<19685=19687,19686
<19687=19689,19688
<19693=19694
<19694=19696,19695
<19697=19698
<19698=19700,19699
<19700=19702,19701
<19703=19704
<19705=19706
<19706=19707
<19707=19709,19708
<19709=19711,19710
<19711=19713,19712
<19714=19715
<19716=19717
<19717=19727,19718
<19718=19723,19719
<19719=19720
<19720=19722,19721
<19723=19724
<19724=19726,19725
<19727=19728
<19729=19730
<19730=19734,19731
<19731=19732
<19732=19733
<19734=19735
<19736=20249,19801,19737
<19737=19738
<19738=19739
<19739=19795,19748,19740
<19740=19741
<19741=19747,19746,19745,19744,19743,19742
<19748=19772,19749
<19749=19750
<19750=19770,19751
<19751=19764,19758,19752
<19752=19753
<19753=19757,19754
<19754=19756,19755
<19758=19759
<19759=19761,19760
<19761=19763,19762
<19764=19765
<19765=19767,19766
<19767=19769,19768
<19770=19771
<19772=19773
<19773=19793,19774
<19774=19787,19781,19775
<19775=19776
<19776=19780,19777
<19777=19779,19778
<19781=19782
<19782=19784,19783
<19784=19786,19785
<19787=19788
<19788=19790,19789
<19790=19792,19791
<19793=19794
<19795=19796
<19796=19800,19797
<19797=19799,19798
<19801=20235,19982,19969,19964,19953,19934,19911,19886,19872,19802
<19802=19864,19860,19857,19803
<19803=19846,19835,19822,19804
<19804=19805
<19805=19816,19806
<19806=19807
<19807=19808
<19808=19814,19809
<19809=19812,19810
<19810=19811
<19812=19813
<19814=19815
<19816=19817
<19817=19819,19818
<19819=19821,19820
<19822=19823
<19823=19825,19824
<19825=19827,19826
<19827=19833,19828
<19828=19831,19829
<19829=19830
<19831=19832
<19833=19834
<19835=19836
<19836=19845,19844,19837
<19837=19843,19838
<19838=19842,19839
<19839=19841,19840
<19846=19847
<19847=19856,19855,19848
<19848=19854,19849
<19849=19853,19850
<19850=19852,19851
<19857=19859,19858
<19860=19861
<19861=19863,19862
<19864=19865
<19865=19866
<19866=19871,19870,19867
<19867=19869,19868
<19872=19873
<19873=19885,19884,19874
<19874=19883,19875
<19875=19882,19876
<19876=19878,19877
<19878=19879
<19879=19881,19880
<19886=19887
<19887=19909,19888
<19888=19907,19905,19899,19895,19889
<19889=19890
<19890=19892,19891
<19892=19894,19893
<19895=19896
<19896=19898,19897
<19899=19900
<19900=19902,19901
<19902=19904,19903
<19905=19906
<19907=19908
<19909=19910
<19911=19912
<19912=19932,19913
<19913=19930,19928,19926,19924,19922,19920,19914
<19914=19915
<19915=19917,19916
<19917=19919,19918
<19920=19921
<19922=19923
<19924=19925
<19926=19927
<19928=19929
<19930=19931
<19932=19933
<19934=19935
<19935=19951,19936
<19936=19945,19943,19937
<19937=19938
<19938=19942,19939
<19939=19941,19940
<19943=19944
<19945=19946
<19946=19948,19947
<19948=19950,19949
<19951=19952
<19953=19954
<19954=19962,19955
<19955=19960,19958,19956
<19956=19957
<19958=19959
<19960=19961
<19962=19963
<19964=19965
<19965=19968,19967,19966
<19969=19970
<19970=19980,19971
<19971=19976,19972
<19972=19973
<19973=19975,19974
<19976=19977
<19977=19979,19978
<19980=19981
<19982=20231,19983
<19983=20224,20217,20210,20203,20146,20133,20123,20092,20078,20004,20003,20002,20001,19999,19998,19997,19996,19994,19993,19992,19991,19989,19988,19987,19986,19984
<19984=19985
<19989=19990
<19994=19995
<19999=20000
<20004=20072,20005
<20005=20071,20070,20069,20068,20067,20066,20065,20064,20063,20062,20061,20060,20059,20058,20057,20006
<20006=20049,20038,20035,20007
<20007=20026,20017,20008
<20008=20009
<20009=20013,20010
<20010=20011
<20011=20012
<20013=20014
<20014=20016,20015
<20017=20018
<20018=20025,20024,20019
<20019=20023,20020
<20020=20022,20021
<20026=20027
<20027=20034,20033,20028
<20028=20032,20029
<20029=20031,20030
<20035=20037,20036
<20038=20039
<20039=20048,20040
<20040=20047,20041
<20041=20043,20042
<20043=20044
<20044=20046,20045
<20049=20050
<20050=20051
<20051=20056,20055,20052
<20052=20054,20053
<20072=20073
<20073=20077,20074
<20074=20076,20075
<20078=20079
<20079=20091,20090,20080
<20080=20089,20081
<20081=20088,20082
<20082=20084,20083
<20084=20085
<20085=20087,20086
<20092=20093
<20093=20121,20094
<20094=20119,20117,20115,20113,20111,20109,20107,20105,20101,20099,20097,20095
<20095=20096
<20097=20098
<20099=20100
<20101=20102
<20102=20104,20103
<20105=20106
<20107=20108
<20109=20110
<20111=20112
<20113=20114
<20115=20116
<20117=20118
<20119=20120
<20121=20122
<20123=20130,20127,20124
<20124=20126,20125
<20127=20129,20128
<20130=20132,20131
<20133=20142,20138,20134
<20134=20137,20136,20135
<20138=20141,20140,20139
<20142=20145,20144,20143
<20146=20195,20191,20188,20147
<20147=20178,20168,20158,20148
<20148=20149
<20149=20155,20150
<20150=20154,20151
<20151=20153,20152
<20155=20157,20156
<20158=20159
<20159=20165,20160
<20160=20164,20161
<20161=20163,20162
<20165=20167,20166
<20168=20169
<20169=20175,20170
<20170=20174,20171
<20171=20173,20172
<20175=20177,20176
<20178=20179
<20179=20185,20180
<20180=20184,20181
<20181=20183,20182
<20185=20187,20186
<20188=20190,20189
<20191=20192
<20192=20194,20193
<20195=20196
<20196=20197
<20197=20202,20201,20198
<20198=20200,20199
<20203=20204
<20204=20209,20208,20205
<20205=20207,20206
<20210=20211
<20211=20216,20215,20212
<20212=20214,20213
<20217=20218
<20218=20223,20222,20219
<20219=20221,20220
<20224=20225
<20225=20230,20229,20226
<20226=20228,20227
<20231=20232
<20232=20234,20233
<20235=20236
<20236=20248,20247,20237
<20237=20246,20238
<20238=20245,20239
<20239=20241,20240
<20241=20242
<20242=20244,20243
<20249=20250
<20277=20278
<20278=20312,20311,20279
<20279=20310,20280
<20280=20308,20281
<20281=20306,20304,20302,20300,20298,20296,20294,20292,20288,20286,20284,20282
<20282=20283
<20284=20285
<20286=20287
<20288=20289
<20289=20291,20290
<20292=20293
<20294=20295
<20296=20297
<20298=20299
<20300=20301
<20302=20303
<20304=20305
<20306=20307
<20308=20309
<20313=20320,20317,20314
<20314=20316,20315
<20317=20319,20318
<20320=20322,20321
<20323=20332,20328,20324
<20324=20327,20326,20325
<20328=20331,20330,20329
<20332=20335,20334,20333
<20336=20337
<20341=20342
<20346=20347
<20347=20351,20348
<20348=20349
<20349=20350
<20351=20352
<20353=20833,20829,20826,20354
<20354=20817,20803,20789,20775,20761,20752,20730,20364,20355
<20355=20356
<20356=20360,20357
<20357=20358
<20358=20359
<20360=20361
<20361=20363,20362
<20364=20722,20713,20710,20365
<20365=20699,20688,20681,20657,20366
<20366=20644,20587,20367
<20367=20368
<20368=20571,20562,20556,20535,20534,20533,20532,20531,20530,20529,20528,20527,20526,20525,20524,20523,20522,20521,20515,20507,20401,20395,20389,20385,20369
<20369=20381,20370
<20370=20380,20379,20378,20377,20376,20375,20374,20373,20372,20371
<20381=20382
<20382=20384,20383
<20385=20386
<20386=20388,20387
<20389=20390
<20390=20392,20391
<20392=20394,20393
<20395=20396
<20396=20398,20397
<20398=20400,20399
<20401=20505,20435,20402
<20402=20403
<20403=20404
<20404=20405
<20405=20432,20406
<20406=20430,20407
<20407=20419,20408
<20408=20409
<20409=20411,20410
<20411=20417,20412
<20412=20415,20413
<20413=20414
<20415=20416
<20417=20418
<20419=20420
<20420=20422,20421
<20422=20428,20423
<20423=20426,20424
<20424=20425
<20426=20427
<20428=20429
<20430=20431
<20432=20434,20433
<20435=20489,20473,20466,20449,20436
<20436=20437
<20437=20446,20438
<20438=20444,20439
<20439=20442,20440
<20440=20441
<20442=20443
<20444=20445
<20446=20448,20447
<20449=20450
<20450=20460,20451
<20451=20458,20456,20454,20452
<20452=20453
<20454=20455
<20456=20457
<20458=20459
<20460=20461
<20461=20463,20462
<20463=20465,20464
<20466=20470,20467
<20467=20469,20468
<20470=20472,20471
<20473=20474
<20474=20488,20487,20475
<20475=20486,20476
<20476=20478,20477
<20478=20484,20479
<20479=20482,20480
<20480=20481
<20482=20483
<20484=20485
<20489=20490
<20490=20504,20503,20491
<20491=20502,20492
<20492=20494,20493
<20494=20500,20495
<20495=20498,20496
<20496=20497
<20498=20499
<20500=20501
<20505=20506
<20507=20508
<20508=20512,20509
<20509=20511,20510
<20512=20514,20513
<20515=20516
<20516=20518,20517
<20518=20520,20519
<20535=20548,20536
<20536=20537
<20537=20538
<20538=20546,20539
<20539=20544,20542,20540
<20540=20541
<20542=20543
<20544=20545
<20546=20547
<20548=20549
<20549=20553,20550
<20550=20552,20551
<20553=20555,20554
<20556=20557
<20557=20559,20558
<20559=20561,20560
<20562=20565,20563
<20563=20564
<20565=20566
<20566=20568,20567
<20568=20570,20569
<20571=20572
<20572=20586,20585,20573
<20573=20584,20574
<20574=20576,20575
<20576=20582,20577
<20577=20580,20578
<20578=20579
<20580=20581
<20582=20583
<20587=20589,20588
<20589=20629,20628,20590
<20590=20591
<20591=20613,20612,20592
<20592=20593
<20593=20594
<20594=20595
<20595=20610,20596
<20596=20608,20597
<20597=20598
<20598=20600,20599
<20600=20606,20601
<20601=20604,20602
<20602=20603
<20604=20605
<20606=20607
<20608=20609
<20610=20611
<20613=20614
<20614=20618,20615
<20615=20617,20616
<20618=20620,20619
<20620=20626,20621
<20621=20624,20622
<20622=20623
<20624=20625
<20626=20627
<20629=20630
<20630=20634,20631
<20631=20633,20632
<20634=20636,20635
<20636=20642,20637
<20637=20640,20638
<20638=20639
<20640=20641
<20642=20643
<20644=20645
<20645=20647,20646
<20647=20649,20648
<20649=20655,20650
<20650=20653,20651
<20651=20652
<20653=20654
<20655=20656
<20657=20677,20668,20658
<20658=20659
<20659=20664,20660
<20660=20661
<20661=20663,20662
<20664=20665
<20665=20667,20666
<20668=20673,20669
<20669=20670
<20670=20672,20671
<20673=20674
<20674=20676,20675
<20677=20678
<20678=20680,20679
<20681=20685,20682
<20682=20684,20683
<20685=20687,20686
<20688=20689
<20689=20698,20697,20690
<20690=20696,20691
<20691=20693,20692
<20693=20695,20694
<20699=20700
<20700=20709,20708,20701
<20701=20707,20702
<20702=20704,20703
<20704=20706,20705
<20710=20712,20711
<20713=20714
<20714=20721,20715
<20715=20717,20716
<20717=20718
<20718=20720,20719
<20722=20723
<20723=20724
<20724=20729,20728,20725
<20725=20727,20726
<20730=20731
<20731=20750,20732
<20732=20748,20746,20744,20733
<20733=20734
<20734=20743,20735
<20735=20739,20736
<20736=20737
<20737=20738
<20739=20740
<20740=20742,20741
<20744=20745
<20746=20747
<20748=20749
<20750=20751
<20752=20753
<20753=20759,20754
<20754=20757,20755
<20755=20756
<20757=20758
<20759=20760
<20761=20762
<20762=20774,20773,20763
<20763=20772,20764
<20764=20768,20765
<20765=20766
<20766=20767
<20768=20769
<20769=20771,20770
<20775=20776
<20776=20788,20787,20777
<20777=20786,20778
<20778=20784,20779
<20779=20782,20780
<20780=20781
<20782=20783
<20784=20785
<20789=20790
<20790=20802,20801,20791
<20791=20800,20792
<20792=20798,20793
<20793=20796,20794
<20794=20795
<20796=20797
<20798=20799
<20803=20804
<20804=20816,20815,20805
<20805=20814,20806
<20806=20812,20807
<20807=20810,20808
<20808=20809
<20810=20811
<20812=20813
<20817=20818
<20818=20825,20824,20819
<20819=20823,20820
<20820=20822,20821
<20826=20828,20827
<20829=20830
<20830=20832,20831
<20833=20834
<20834=20835
<20835=20840,20839,20836
<20836=20838,20837
<20847=20863,20859,20856,20848
<20848=20849
<20849=20853,20850
<20850=20852,20851
<20853=20855,20854
<20856=20858,20857
<20859=20860
<20860=20862,20861
<20863=20864
<20864=20865
<20865=20870,20869,20866
<20866=20868,20867
<20871=20872
<20872=20877,20876,20873
<20873=20875,20874
<20878=20892,20888,20885,20879
<20879=20880
<20880=20882,20881
<20882=20884,20883
<20885=20887,20886
<20888=20889
<20889=20891,20890
<20892=20893
<20893=20894
<20894=20899,20898,20895
<20895=20897,20896
<20900=20901
<20901=20906,20905,20902
<20902=20904,20903
<20907=20908
<20908=20913,20912,20909
<20909=20911,20910
<20914=20915
<20915=20920,20919,20916
<20916=20918,20917
<20921=20922
<20922=20927,20926,20923
<20923=20925,20924
<20928=20929
<20929=20934,20933,20930
<20930=20932,20931
<20935=20936
<20936=20946,20945,20937
<20937=20944,20938
<20938=20942,20939
<20939=20940
<20940=20941
<20942=20943
<20947=20948
<20948=20953,20952,20949
<20949=20951,20950
<20954=20955
<20955=20959,20956
<20956=20957
<20957=20958
<20959=20960
<20961=20962
<20962=20964,20963
<20964=20965
<20965=20967,20966
<20967=20969,20968
<20970=20971
<20971=20979,20972
<20972=20977,20973
<20973=20974
<20974=20976,20975
<20977=20978
<20979=20980
<20980=20982,20981
<20982=20984,20983
<21125=21134,21133,21126
<21126=21130,21127
<21127=21129,21128
<21130=21132,21131
<21134=21393,21382,21376,21370,21364,21358,21352,21346,21332,21212,21149,21142,21135
<21135=21136
<21136=21138,21137
<21138=21139
<21139=21141,21140
<21142=21143
<21143=21145,21144
<21145=21146
<21146=21148,21147
<21149=21206,21161,21150
<21150=21151
<21151=21152
<21152=21153
<21153=21159,21154
<21154=21157,21155
<21155=21156
<21157=21158
<21159=21160
<21161=21201,21188,21171,21162
<21162=21163
<21163=21169,21164
<21164=21167,21165
<21165=21166
<21167=21168
<21169=21170
<21171=21172
<21172=21186,21173
<21173=21182,21180,21174
<21174=21175
<21175=21179,21176
<21176=21178,21177
<21180=21181
<21182=21183
<21183=21185,21184
<21186=21187
<21188=21189
<21189=21193,21190
<21190=21191
<21191=21192
<21193=21194
<21194=21196,21195
<21196=21198,21197
<21198=21200,21199
<21201=21202
<21202=21205,21204,21203
<21206=21207
<21207=21211,21208
<21208=21210,21209
<21212=21314,21213
<21213=21298,21224,21215,21214
<21215=21216
<21216=21220,21217
<21217=21218
<21218=21219
<21220=21221
<21221=21223,21222
<21224=21290,21286,21283,21225
<21225=21272,21261,21256,21243,21226
<21226=21227
<21227=21241,21228
<21228=21239,21237,21233,21229
<21229=21230
<21230=21232,21231
<21233=21234
<21234=21236,21235
<21237=21238
<21239=21240
<21241=21242
<21243=21244
<21244=21250,21245
<21245=21248,21246
<21246=21247
<21248=21249
<21250=21251
<21251=21253,21252
<21253=21255,21254
<21256=21257
<21257=21260,21259,21258
<21261=21262
<21262=21271,21270,21263
<21263=21269,21264
<21264=21266,21265
<21266=21268,21267
<21272=21273
<21273=21282,21281,21274
<21274=21280,21275
<21275=21277,21276
<21277=21279,21278
<21283=21285,21284
<21286=21287
<21287=21289,21288
<21290=21291
<21291=21292
<21292=21297,21296,21293
<21293=21295,21294
<21298=21299
<21299=21313,21312,21300
<21300=21311,21301
<21301=21310,21302
<21302=21304,21303
<21304=21305
<21305=21307,21306
<21307=21309,21308
<21314=21315
<21315=21326,21316
<21316=21322,21317
<21317=21320,21318
<21318=21319
<21320=21321
<21322=21323
<21323=21325,21324
<21326=21328,21327
<21328=21329
<21329=21331,21330
<21332=21333
<21333=21345,21344,21334
<21334=21343,21335
<21335=21342,21336
<21336=21338,21337
<21338=21339
<21339=21341,21340
<21346=21347
<21347=21349,21348
<21349=21351,21350
<21352=21353
<21353=21355,21354
<21355=21357,21356
<21358=21359
<21359=21361,21360
<21361=21363,21362
<21364=21365
<21365=21367,21366
<21367=21369,21368
<21370=21371
<21371=21373,21372
<21373=21375,21374
<21376=21377
<21377=21379,21378
<21379=21381,21380
<21382=21383
<21383=21390,21384
<21384=21388,21385
<21385=21386
<21386=21387
<21388=21389
<21390=21392,21391
<21393=21394
<21394=21396,21395
<21439=21445,21444,21440
<21440=21441
<21441=21443,21442
<21445=21673,21663,21446
<21446=21652,21447
<21447=21648,21635,21629,21615,21448
<21448=21597,21587,21449
<21449=21450
<21450=21574,21451
<21451=21567,21560,21546,21532,21468,21461,21452
<21452=21453
<21453=21457,21454
<21454=21455
<21455=21456
<21457=21458
<21458=21460,21459
<21461=21462
<21462=21464,21463
<21464=21465
<21465=21467,21466
<21468=21524,21520,21517,21469
<21469=21470
<21470=21505,21471
<21471=21492,21472
<21472=21473
<21473=21484,21474
<21474=21475
<21475=21476
<21476=21482,21477
<21477=21480,21478
<21478=21479
<21480=21481
<21482=21483
<21484=21485
<21485=21487,21486
<21487=21489,21488
<21489=21491,21490
<21492=21493
<21493=21504,21503,21494
<21494=21502,21495
<21495=21497,21496
<21497=21499,21498
<21499=21501,21500
<21505=21506
<21506=21510,21507
<21507=21509,21508
<21510=21512,21511
<21512=21514,21513
<21514=21516,21515
<21517=21519,21518
<21520=21521
<21521=21523,21522
<21524=21525
<21525=21526
<21526=21531,21530,21527
<21527=21529,21528
<21532=21533
<21533=21545,21544,21534
<21534=21543,21535
<21535=21542,21536
<21536=21538,21537
<21538=21539
<21539=21541,21540
<21546=21547
<21547=21559,21558,21548
<21548=21557,21549
<21549=21551,21550
<21551=21552
<21552=21554,21553
<21554=21556,21555
<21560=21561
<21561=21563,21562
<21563=21564
<21564=21566,21565
<21567=21568
<21568=21570,21569
<21570=21571
<21571=21573,21572
<21574=21575
<21575=21584,21576
<21576=21582,21577
<21577=21580,21578
<21578=21579
<21580=21581
<21582=21583
<21584=21586,21585
<21587=21588
<21588=21589
<21589=21593,21590
<21590=21591
<21591=21592
<21593=21594
<21594=21596,21595
<21597=21598
<21598=21609,21599
<21599=21605,21600
<21600=21603,21601
<21601=21602
<21603=21604
<21605=21606
<21606=21608,21607
<21609=21611,21610
<21611=21612
<21612=21614,21613
<21615=21616
<21616=21628,21627,21617
<21617=21626,21618
<21618=21625,21619
<21619=21621,21620
<21621=21622
<21622=21624,21623
<21629=21630
<21630=21632,21631
<21632=21634,21633
<21635=21636
<21636=21644,21637
<21637=21642,21640,21638
<21638=21639
<21640=21641
<21642=21643
<21644=21645
<21645=21647,21646
<21648=21649
<21649=21651,21650
<21652=21653
<21653=21661,21654
<21654=21659,21657,21655
<21655=21656
<21657=21658
<21659=21660
<21661=21662
<21663=21669,21664
<21664=21665
<21665=21667,21666
<21667=21668
<21669=21670
<21670=21672,21671
<21673=21674
<21674=21677,21676,21675
<21710=21716,21715,21711
<21711=21712
<21712=21714,21713
<21716=21824,21820,21813,21719,21717
<21717=21718
<21719=21805,21801,21798,21720
<21720=21787,21780,21748,21732,21721
<21721=21722
<21722=21731,21723
<21723=21730,21724
<21724=21726,21725
<21726=21727
<21727=21729,21728
<21732=21744,21733
<21733=21734
<21734=21740,21735
<21735=21736
<21736=21737
<21737=21739,21738
<21740=21741
<21741=21743,21742
<21744=21745
<21745=21747,21746
<21748=21772,21768,21765,21749
<21749=21750
<21750=21757,21751
<21751=21753,21752
<21753=21754
<21754=21756,21755
<21757=21758
<21758=21760,21759
<21760=21762,21761
<21762=21764,21763
<21765=21767,21766
<21768=21769
<21769=21771,21770
<21772=21773
<21773=21774
<21774=21779,21778,21775
<21775=21777,21776
<21780=21781
<21781=21786,21785,21782
<21782=21784,21783
<21787=21788
<21788=21797,21796,21789
<21789=21795,21790
<21790=21792,21791
<21792=21794,21793
<21798=21800,21799
<21801=21802
<21802=21804,21803
<21805=21806
<21806=21807
<21807=21812,21811,21808
<21808=21810,21809
<21813=21814
<21814=21819,21818,21815
<21815=21817,21816
<21820=21821
<21821=21823,21822
<21824=21825
<21825=21837,21836,21826
<21826=21835,21827
<21827=21834,21828
<21828=21830,21829
<21830=21831
<21831=21833,21832
<21859=21868,21867,21860
<21860=21864,21861
<21861=21863,21862
<21864=21866,21865
<21868=24399,24386,24363,24353,24346,24330,24323,24316,24309,24302,24274,22910,22903,22902,22901,22900,22899,22898,21869,21871,21888,21898,21900,21901,21902,21903,21905,21906,21907,21908,21910,21911,21912,21913,21915,21916,21917,21918,21920,21921,21922,21923,21925,21926,21927,21928,21930,21931,22406,22407,22408,22409,22413,22427,22462,22466,22503,22510,22517,22531,22556,22812,22819,22855,22865,22878,22885,22896
<21869=21870
<21871=21872
<21872=21886,21873
<21873=21884,21874
<21874=21875
<21875=21879,21876
<21876=21878,21877
<21879=21883,21880
<21880=21882,21881
<21884=21885
<21886=21887
<21888=21889
<21889=21897,21896,21890
<21890=21895,21891
<21891=21893,21892
<21893=21894
<21898=21899
<21903=21904
<21908=21909
<21913=21914
<21918=21919
<21923=21924
<21928=21929
<21931=22400,22389,21932
<21932=21933
<21933=22385,21934
<21934=22378,22367,22360,22347,22340,22327,22320,22313,22233,22222,22214,22193,22181,22169,22157,22144,22134,22125,22111,22082,21939,21935
<21935=21936
<21936=21938,21937
<21939=22074,22070,22067,21940
<21940=22054,22041,22028,22023,22006,21973,21963,21952,21941
<21941=21942
<21942=21946,21943
<21943=21944
<21944=21945
<21946=21947
<21947=21949,21948
<21949=21951,21950
<21952=21953
<21953=21957,21954
<21954=21955
<21955=21956
<21957=21958
<21958=21960,21959
<21960=21962,21961
<21963=21964
<21964=21966,21965
<21966=21968,21967
<21968=21970,21969
<21970=21972,21971
<21973=21974
<21974=22004,21975
<21975=22002,22000,21996,21992,21984,21976
<21976=21977
<21977=21979,21978
<21979=21981,21980
<21981=21983,21982
<21984=21985
<21985=21987,21986
<21987=21989,21988
<21989=21991,21990
<21992=21993
<21993=21995,21994
<21996=21997
<21997=21999,21998
<22000=22001
<22002=22003
<22004=22005
<22006=22007
<22007=22017,22008
<22008=22011,22009
<22009=22010
<22011=22012
<22012=22014,22013
<22014=22016,22015
<22017=22018
<22018=22020,22019
<22020=22022,22021
<22023=22024
<22024=22027,22026,22025
<22028=22029
<22029=22039,22030
<22030=22037,22035,22033,22031
<22031=22032
<22033=22034
<22035=22036
<22037=22038
<22039=22040
<22041=22042
<22042=22053,22052,22043
<22043=22051,22044
<22044=22050,22045
<22045=22049,22046
<22046=22048,22047
<22054=22055
<22055=22066,22065,22056
<22056=22064,22057
<22057=22063,22058
<22058=22062,22059
<22059=22061,22060
<22067=22069,22068
<22070=22071
<22071=22073,22072
<22074=22075
<22075=22076
<22076=22081,22080,22077
<22077=22079,22078
<22082=22103,22099,22096,22083
<22083=22084
<22084=22085
<22085=22089,22086
<22086=22088,22087
<22089=22091,22090
<22091=22093,22092
<22093=22095,22094
<22096=22098,22097
<22099=22100
<22100=22102,22101
<22103=22104
<22104=22105
<22105=22110,22109,22106
<22106=22108,22107
<22111=22112
<22112=22124,22123,22113
<22113=22122,22114
<22114=22121,22115
<22115=22117,22116
<22117=22118
<22118=22120,22119
<22125=22126
<22126=22128,22127
<22128=22129
<22129=22131,22130
<22131=22133,22132
<22134=22135
<22135=22139,22136
<22136=22138,22137
<22139=22141,22140
<22141=22143,22142
<22144=22145
<22145=22151,22146
<22146=22147
<22147=22148
<22148=22150,22149
<22151=22152
<22152=22154,22153
<22154=22156,22155
<22157=22158
<22158=22164,22159
<22159=22161,22160
<22161=22163,22162
<22164=22166,22165
<22166=22168,22167
<22169=22170
<22170=22176,22171
<22171=22173,22172
<22173=22175,22174
<22176=22178,22177
<22178=22180,22179
<22181=22182
<22182=22188,22183
<22183=22185,22184
<22185=22187,22186
<22188=22190,22189
<22190=22192,22191
<22193=22194
<22194=22212,22195
<22195=22206,22202,22196
<22196=22197
<22197=22201,22198
<22198=22200,22199
<22202=22203
<22203=22205,22204
<22206=22207
<22207=22209,22208
<22209=22211,22210
<22212=22213
<22214=22215
<22215=22217,22216
<22217=22219,22218
<22219=22221,22220
<22222=22223
<22223=22231,22224
<22224=22227,22225
<22225=22226
<22227=22228
<22228=22230,22229
<22231=22232
<22233=22305,22301,22298,22234
<22234=22235
<22235=22236
<22236=22296,22237
<22237=22292,22269,22246,22244,22242,22240,22238
<22238=22239
<22240=22241
<22242=22243
<22244=22245
<22246=22247
<22247=22267,22248
<22248=22249
<22249=22250
<22250=22259,22251
<22251=22258,22252
<22252=22254,22253
<22254=22255
<22255=22257,22256
<22259=22265,22260
<22260=22261
<22261=22262
<22262=22264,22263
<22265=22266
<22267=22268
<22269=22270
<22270=22290,22271
<22271=22272
<22272=22273
<22273=22282,22274
<22274=22281,22275
<22275=22277,22276
<22277=22278
<22278=22280,22279
<22282=22288,22283
<22283=22284
<22284=22285
<22285=22287,22286
<22288=22289
<22290=22291
<22292=22293
<22293=22295,22294
<22296=22297
<22298=22300,22299
<22301=22302
<22302=22304,22303
<22305=22306
<22306=22307
<22307=22312,22311,22308
<22308=22310,22309
<22313=22314
<22314=22316,22315
<22316=22317
<22317=22319,22318
<22320=22321
<22321=22325,22322
<22322=22323
<22323=22324
<22325=22326
<22327=22328
<22328=22338,22329
<22329=22336,22334,22330
<22330=22331
<22331=22333,22332
<22334=22335
<22336=22337
<22338=22339
<22340=22341
<22341=22345,22342
<22342=22343
<22343=22344
<22345=22346
<22347=22348
<22348=22358,22349
<22349=22356,22354,22350
<22350=22351
<22351=22353,22352
<22354=22355
<22356=22357
<22358=22359
<22360=22361
<22361=22365,22362
<22362=22363
<22363=22364
<22365=22366
<22367=22368
<22368=22376,22369
<22369=22374,22370
<22370=22371
<22371=22373,22372
<22374=22375
<22376=22377
<22378=22379
<22379=22383,22380
<22380=22381
<22381=22382
<22383=22384
<22385=22386
<22386=22388,22387
<22389=22399,22398,22397,22396,22395,22394,22393,22392,22391,22390
<22400=22401
<22401=22405,22402
<22402=22404,22403
<22409=22410
<22410=22412,22411
<22413=22414
<22414=22426,22425,22415
<22415=22424,22416
<22416=22423,22417
<22417=22419,22418
<22419=22420
<22420=22422,22421
<22427=22428
<22428=22461,22429
<22429=22459,22430
<22430=22457,22455,22453,22451,22449,22447,22445,22441,22439,22437,22435,22433,22431
<22431=22432
<22433=22434
<22435=22436
<22437=22438
<22439=22440
<22441=22442
<22442=22444,22443
<22445=22446
<22447=22448
<22449=22450
<22451=22452
<22453=22454
<22455=22456
<22457=22458
<22459=22460
<22462=22463
<22463=22465,22464
<22466=22495,22491,22488,22467
<22467=22478,22468
<22468=22469
<22469=22475,22470
<22470=22474,22471
<22471=22473,22472
<22475=22477,22476
<22478=22479
<22479=22485,22480
<22480=22484,22481
<22481=22483,22482
<22485=22487,22486
<22488=22490,22489
<22491=22492
<22492=22494,22493
<22495=22496
<22496=22497
<22497=22502,22501,22498
<22498=22500,22499
<22503=22504
<22504=22509,22508,22505
<22505=22507,22506
<22510=22511
<22511=22516,22515,22512
<22512=22514,22513
<22517=22518
<22518=22530,22529,22519
<22519=22528,22520
<22520=22527,22521
<22521=22523,22522
<22523=22524
<22524=22526,22525
<22531=22532
<22532=22554,22533
<22533=22552,22543,22534
<22534=22535
<22535=22542,22536
<22536=22538,22537
<22538=22539
<22539=22541,22540
<22543=22544
<22544=22551,22545
<22545=22547,22546
<22547=22548
<22548=22550,22549
<22552=22553
<22554=22555
<22556=22810,22584,22557
<22557=22558
<22558=22583,22581,22580,22579,22578,22576,22575,22574,22573,22571,22570,22569,22568,22566,22565,22564,22563,22561,22559
<22559=22560
<22561=22562
<22566=22567
<22571=22572
<22576=22577
<22581=22582
<22584=22793,22772,22751,22585
<22585=22749,22742,22586
<22586=22587
<22587=22588
<22588=22740,22612,22589
<22589=22590
<22590=22608,22599,22591
<22591=22592
<22592=22593
<22593=22594
<22594=22596,22595
<22596=22598,22597
<22599=22600
<22600=22601
<22601=22605,22602
<22602=22604,22603
<22605=22607,22606
<22608=22609
<22609=22611,22610
<22612=22613
<22613=22736,22630,22614
<22614=22615
<22615=22616
<22616=22617
<22617=22627,22618
<22618=22626,22619
<22619=22623,22620
<22620=22622,22621
<22623=22625,22624
<22627=22629,22628
<22630=22732,22723,22708,22707,22706,22705,22704,22703,22702,22701,22700,22682,22631
<22631=22676,22657,22632
<22632=22633
<22633=22656,22655,22654,22653,22652,22651,22650,22649,22648,22634
<22634=22635
<22635=22645,22636
<22636=22644,22637
<22637=22641,22638
<22638=22640,22639
<22641=22643,22642
<22645=22647,22646
<22657=22670,22658
<22658=22668,22659
<22659=22660
<22660=22666,22661
<22661=22664,22662
<22662=22663
<22664=22665
<22666=22667
<22668=22669
<22670=22671
<22671=22673,22672
<22673=22675,22674
<22676=22677
<22677=22679,22678
<22679=22681,22680
<22682=22696,22690,22683
<22683=22684
<22684=22685
<22685=22689,22686
<22686=22688,22687
<22690=22691
<22691=22695,22692
<22692=22694,22693
<22696=22697
<22697=22699,22698
<22708=22709
<22709=22722,22721,22710
<22710=22720,22711
<22711=22719,22712
<22712=22716,22713
<22713=22715,22714
<22716=22718,22717
<22723=22724
<22724=22731,22730,22725
<22725=22729,22726
<22726=22728,22727
<22732=22733
<22733=22735,22734
<22736=22737
<22737=22739,22738
<22740=22741
<22742=22743
<22743=22744
<22744=22746,22745
<22746=22748,22747
<22749=22750
<22751=22752
<22752=22770,22753
<22753=22768,22766,22762,22758,22754
<22754=22755
<22755=22757,22756
<22758=22759
<22759=22761,22760
<22762=22763
<22763=22765,22764
<22766=22767
<22768=22769
<22770=22771
<22772=22773
<22773=22791,22774
<22774=22789,22787,22785,22783,22781,22779,22775
<22775=22776
<22776=22778,22777
<22779=22780
<22781=22782
<22783=22784
<22785=22786
<22787=22788
<22789=22790
<22791=22792
<22793=22794
<22794=22808,22795
<22795=22804,22802,22796
<22796=22797
<22797=22801,22798
<22798=22800,22799
<22802=22803
<22804=22805
<22805=22807,22806
<22808=22809
<22810=22811
<22812=22813
<22813=22817,22814
<22814=22815
<22815=22816
<22817=22818
<22819=22820
<22820=22854,22853,22821
<22821=22852,22822
<22822=22850,22823
<22823=22848,22846,22844,22842,22840,22838,22836,22834,22830,22828,22826,22824
<22824=22825
<22826=22827
<22828=22829
<22830=22831
<22831=22833,22832
<22834=22835
<22836=22837
<22838=22839
<22840=22841
<22842=22843
<22844=22845
<22846=22847
<22848=22849
<22850=22851
<22855=22862,22859,22856
<22856=22858,22857
<22859=22861,22860
<22862=22864,22863
<22865=22874,22870,22866
<22866=22869,22868,22867
<22870=22873,22872,22871
<22874=22877,22876,22875
<22878=22879
<22879=22883,22880
<22880=22881
<22881=22882
<22883=22884
<22885=22886
<22886=22894,22887
<22887=22892,22888
<22888=22889
<22889=22891,22890
<22892=22893
<22894=22895
<22896=22897
<22903=22904
<22904=22908,22905
<22905=22906
<22906=22907
<22908=22909
<22910=24272,23173,22911
<22911=22912
<22912=23157,23148,23137,23128,23127,23126,23125,23123,23122,23121,23120,23118,23117,23116,23115,23113,23112,23111,23110,23108,23104,23100,23096,23092,22913
<22913=23084,23080,23077,22914
<22914=23066,23055,23046,23019,22927,22921,22915
<22915=22916
<22916=22918,22917
<22918=22920,22919
<22921=22922
<22922=22924,22923
<22924=22926,22925
<22927=23017,22955,22928
<22928=22929
<22929=22930
<22930=22931
<22931=22952,22932
<22932=22950,22933
<22933=22942,22934
<22934=22935
<22935=22937,22936
<22937=22939,22938
<22939=22941,22940
<22942=22943
<22943=22945,22944
<22945=22947,22946
<22947=22949,22948
<22950=22951
<22952=22954,22953
<22955=23004,22991,22984,22969,22956
<22956=22957
<22957=22966,22958
<22958=22964,22959
<22959=22962,22960
<22960=22961
<22962=22963
<22964=22965
<22966=22968,22967
<22969=22970
<22970=22980,22971
<22971=22978,22976,22974,22972
<22972=22973
<22974=22975
<22976=22977
<22978=22979
<22980=22981
<22981=22983,22982
<22984=22988,22985
<22985=22987,22986
<22988=22990,22989
<22991=22992
<22992=23003,23002,22993
<22993=23001,22994
<22994=22996,22995
<22996=22998,22997
<22998=23000,22999
<23004=23005
<23005=23016,23015,23006
<23006=23014,23007
<23007=23009,23008
<23009=23011,23010
<23011=23013,23012
<23017=23018
<23019=23020
<23020=23043,23021
<23021=23041,23022
<23022=23035,23029,23023
<23023=23024
<23024=23026,23025
<23026=23028,23027
<23029=23030
<23030=23032,23031
<23032=23034,23033
<23035=23036
<23036=23038,23037
<23038=23040,23039
<23041=23042
<23043=23045,23044
<23046=23047
<23047=23054,23053,23048
<23048=23052,23049
<23049=23051,23050
<23055=23056
<23056=23065,23064,23057
<23057=23063,23058
<23058=23060,23059
<23060=23062,23061
<23066=23067
<23067=23076,23075,23068
<23068=23074,23069
<23069=23071,23070
<23071=23073,23072
<23077=23079,23078
<23080=23081
<23081=23083,23082
<23084=23085
<23085=23086
<23086=23091,23090,23087
<23087=23089,23088
<23092=23093
<23093=23095,23094
<23096=23097
<23097=23099,23098
<23100=23101
<23101=23103,23102
<23104=23105
<23105=23107,23106
<23108=23109
<23113=23114
<23118=23119
<23123=23124
<23128=23129
<23129=23135,23130
<23130=23133,23131
<23131=23132
<23133=23134
<23135=23136
<23137=23138
<23138=23147,23139
<23139=23146,23140
<23140=23142,23141
<23142=23143
<23143=23145,23144
<23148=23149
<23149=23156,23150
<23150=23154,23151
<23151=23152
<23152=23153
<23154=23155
<23157=23158
<23158=23172,23171,23159
<23159=23170,23160
<23160=23168,23161
<23161=23164,23162
<23162=23163
<23164=23165
<23165=23167,23166
<23168=23169
<23173=24262,24261,24260,24259,24254,24226,24221,24195,24178,24171,24065,24058,23899,23892,23888,23884,23536,23522,23515,23492,23491,23490,23489,23488,23487,23486,23189,23182,23181,23180,23179,23177,23176,23174
<23174=23175
<23177=23178
<23182=23183
<23183=23187,23184
<23184=23185
<23185=23186
<23187=23188
<23189=23478,23474,23471,23190
<23190=23457,23191
<23191=23449,23436,23433,23192
<23192=23420,23407,23193
<23193=23394,23392,23194
<23194=23195
<23195=23376,23368,23362,23361,23360,23359,23358,23357,23356,23355,23354,23353,23352,23351,23350,23349,23348,23338,23327,23306,23212,23206,23200,23196
<23196=23197
<23197=23199,23198
<23200=23201
<23201=23203,23202
<23203=23205,23204
<23206=23207
<23207=23209,23208
<23209=23211,23210
<23212=23304,23240,23213
<23213=23214
<23214=23215
<23215=23216
<23216=23237,23217
<23217=23235,23218
<23218=23227,23219
<23219=23220
<23220=23222,23221
<23222=23224,23223
<23224=23226,23225
<23227=23228
<23228=23230,23229
<23230=23232,23231
<23232=23234,23233
<23235=23236
<23237=23239,23238
<23240=23291,23278,23271,23254,23241
<23241=23242
<23242=23251,23243
<23243=23249,23244
<23244=23247,23245
<23245=23246
<23247=23248
<23249=23250
<23251=23253,23252
<23254=23255
<23255=23265,23256
<23256=23263,23261,23259,23257
<23257=23258
<23259=23260
<23261=23262
<23263=23264
<23265=23266
<23266=23268,23267
<23268=23270,23269
<23271=23275,23272
<23272=23274,23273
<23275=23277,23276
<23278=23279
<23279=23290,23289,23280
<23280=23288,23281
<23281=23283,23282
<23283=23285,23284
<23285=23287,23286
<23291=23292
<23292=23303,23302,23293
<23293=23301,23294
<23294=23296,23295
<23296=23298,23297
<23298=23300,23299
<23304=23305
<23306=23307
<23307=23324,23308
<23308=23322,23309
<23309=23318,23314,23310
<23310=23311
<23311=23313,23312
<23314=23315
<23315=23317,23316
<23318=23319
<23319=23321,23320
<23322=23323
<23324=23326,23325
<23327=23328
<23328=23337,23336,23329
<23329=23335,23330
<23330=23332,23331
<23332=23334,23333
<23338=23339
<23339=23341,23340
<23341=23343,23342
<23343=23345,23344
<23345=23347,23346
<23362=23363
<23363=23365,23364
<23365=23367,23366
<23368=23370,23369
<23370=23371
<23371=23373,23372
<23373=23375,23374
<23376=23377
<23377=23391,23390,23378
<23378=23389,23379
<23379=23381,23380
<23381=23387,23382
<23382=23385,23383
<23383=23384
<23385=23386
<23387=23388
<23392=23393
<23394=23395
<23395=23397,23396
<23397=23399,23398
<23399=23405,23400
<23400=23403,23401
<23401=23402
<23403=23404
<23405=23406
<23407=23408
<23408=23419,23418,23409
<23409=23417,23410
<23410=23412,23411
<23412=23414,23413
<23414=23416,23415
<23420=23421
<23421=23432,23431,23422
<23422=23430,23423
<23423=23425,23424
<23425=23427,23426
<23427=23429,23428
<23433=23435,23434
<23436=23437
<23437=23448,23438
<23438=23447,23439
<23439=23441,23440
<23441=23442
<23442=23444,23443
<23444=23446,23445
<23449=23450
<23450=23451
<23451=23456,23455,23452
<23452=23454,23453
<23457=23458
<23458=23470,23469,23459
<23459=23468,23460
<23460=23466,23461
<23461=23462
<23462=23463
<23463=23465,23464
<23466=23467
<23471=23473,23472
<23474=23475
<23475=23477,23476
<23478=23479
<23479=23480
<23480=23485,23484,23481
<23481=23483,23482
<23492=23507,23503,23500,23493
<23493=23494
<23494=23495
<23495=23497,23496
<23497=23499,23498
<23500=23502,23501
<23503=23504
<23504=23506,23505
<23507=23508
<23508=23509
<23509=23514,23513,23510
<23510=23512,23511
<23515=23516
<23516=23521,23520,23517
<23517=23519,23518
<23522=23523
<23523=23535,23534,23524
<23524=23533,23525
<23525=23532,23526
<23526=23528,23527
<23528=23529
<23529=23531,23530
<23536=23876,23872,23869,23537
<23537=23855,23854,23853,23852,23851,23850,23849,23848,23847,23843,23822,23818,23797,23771,23767,23700,23696,23680,23671,23655,23650,23622,23608,23588,23584,23554,23545,23538
<23538=23539
<23539=23543,23540
<23540=23541
<23541=23542
<23543=23544
<23545=23546
<23546=23550,23547
<23547=23548
<23548=23549
<23550=23551
<23551=23553,23552
<23554=23576,23572,23569,23555
<23555=23556
<23556=23557
<23557=23565,23558
<23558=23559
<23559=23560
<23560=23564,23561
<23561=23563,23562
<23565=23566
<23566=23568,23567
<23569=23571,23570
<23572=23573
<23573=23575,23574
<23576=23577
<23577=23578
<23578=23583,23582,23579
<23579=23581,23580
<23584=23585
<23585=23587,23586
<23588=23589
<23589=23606,23590
<23590=23604,23602,23600,23591
<23591=23592
<23592=23599,23593
<23593=23595,23594
<23595=23596
<23596=23598,23597
<23600=23601
<23602=23603
<23604=23605
<23606=23607
<23608=23609
<23609=23621,23620,23610
<23610=23619,23611
<23611=23618,23612
<23612=23614,23613
<23614=23615
<23615=23617,23616
<23622=23623
<23623=23649,23648,23624
<23624=23647,23625
<23625=23645,23626
<23626=23641,23635,23633,23631,23629,23627
<23627=23628
<23629=23630
<23631=23632
<23633=23634
<23635=23636
<23636=23638,23637
<23638=23640,23639
<23641=23642
<23642=23644,23643
<23645=23646
<23650=23651
<23651=23654,23653,23652
<23655=23656
<23656=23669,23657
<23657=23667,23658
<23658=23659
<23659=23666,23660
<23660=23662,23661
<23662=23663
<23663=23665,23664
<23667=23668
<23669=23670
<23671=23672
<23672=23679,23673
<23673=23677,23674
<23674=23675
<23675=23676
<23677=23678
<23680=23681
<23681=23694,23682
<23682=23692,23683
<23683=23684
<23684=23691,23685
<23685=23687,23686
<23687=23688
<23688=23690,23689
<23692=23693
<23694=23695
<23696=23697
<23697=23699,23698
<23700=23759,23748,23745,23701
<23701=23734,23723,23713,23702
<23702=23703
<23703=23709,23704
<23704=23705
<23705=23706
<23706=23708,23707
<23709=23710
<23710=23712,23711
<23713=23715,23714
<23715=23716
<23716=23718,23717
<23718=23720,23719
<23720=23722,23721
<23723=23724
<23724=23733,23732,23725
<23725=23731,23726
<23726=23728,23727
<23728=23730,23729
<23734=23735
<23735=23744,23743,23736
<23736=23742,23737
<23737=23739,23738
<23739=23741,23740
<23745=23747,23746
<23748=23749
<23749=23758,23750
<23750=23757,23751
<23751=23753,23752
<23753=23754
<23754=23756,23755
<23759=23760
<23760=23761
<23761=23766,23765,23762
<23762=23764,23763
<23767=23768
<23768=23770,23769
<23771=23779,23772
<23772=23773
<23773=23777,23774
<23774=23775
<23775=23776
<23777=23778
<23779=23780
<23780=23791,23781
<23781=23783,23782
<23783=23784
<23784=23786,23785
<23786=23788,23787
<23788=23790,23789
<23791=23793,23792
<23793=23794
<23794=23796,23795
<23797=23798
<23798=23817,23799
<23799=23815,23800
<23800=23809,23805,23803,23801
<23801=23802
<23803=23804
<23805=23806
<23806=23808,23807
<23809=23810
<23810=23812,23811
<23812=23814,23813
<23815=23816
<23818=23819
<23819=23821,23820
<23822=23823
<23823=23842,23824
<23824=23840,23825
<23825=23836,23830,23828,23826
<23826=23827
<23828=23829
<23830=23831
<23831=23833,23832
<23833=23835,23834
<23836=23837
<23837=23839,23838
<23840=23841
<23843=23844
<23844=23846,23845
<23855=23856
<23856=23868,23867,23857
<23857=23866,23858
<23858=23864,23859
<23859=23860
<23860=23861
<23861=23863,23862
<23864=23865
<23869=23871,23870
<23872=23873
<23873=23875,23874
<23876=23877
<23877=23878
<23878=23883,23882,23879
<23879=23881,23880
<23884=23885
<23885=23887,23886
<23888=23889
<23889=23891,23890
<23892=23893
<23893=23897,23894
<23894=23895
<23895=23896
<23897=23898
<23899=24050,24046,24043,23900
<23900=24029,24013,23901
<23901=24005,24001,23998,23902
<23902=23985,23969,23903
<23903=23961,23957,23954,23904
<23904=23939,23905
<23905=23935,23906
<23906=23920,23907
<23907=23908
<23908=23910,23909
<23910=23912,23911
<23912=23918,23913
<23913=23916,23914
<23914=23915
<23916=23917
<23918=23919
<23920=23921
<23921=23934,23933,23922
<23922=23932,23923
<23923=23925,23924
<23925=23927,23926
<23927=23929,23928
<23929=23931,23930
<23935=23936
<23936=23938,23937
<23939=23940
<23940=23953,23952,23941
<23941=23951,23942
<23942=23944,23943
<23944=23946,23945
<23946=23948,23947
<23948=23950,23949
<23954=23956,23955
<23957=23958
<23958=23960,23959
<23961=23962
<23962=23963
<23963=23968,23967,23964
<23964=23966,23965
<23969=23970
<23970=23984,23983,23971
<23971=23982,23972
<23972=23974,23973
<23974=23975
<23975=23977,23976
<23977=23979,23978
<23979=23981,23980
<23985=23986
<23986=23997,23996,23987
<23987=23995,23988
<23988=23990,23989
<23990=23992,23991
<23992=23994,23993
<23998=24000,23999
<24001=24002
<24002=24004,24003
<24005=24006
<24006=24007
<24007=24012,24011,24008
<24008=24010,24009
<24013=24014
<24014=24028,24027,24015
<24015=24026,24016
<24016=24018,24017
<24018=24019
<24019=24021,24020
<24021=24023,24022
<24023=24025,24024
<24029=24030
<24030=24042,24041,24031
<24031=24040,24032
<24032=24038,24033
<24033=24034
<24034=24035
<24035=24037,24036
<24038=24039
<24043=24045,24044
<24046=24047
<24047=24049,24048
<24050=24051
<24051=24052
<24052=24057,24056,24053
<24053=24055,24054
<24058=24059
<24059=24063,24060
<24060=24061
<24061=24062
<24063=24064
<24065=24163,24159,24156,24066
<24066=24142,24131,24116,24098,24067
<24067=24090,24086,24083,24068
<24068=24069
<24069=24070
<24070=24074,24071
<24071=24073,24072
<24074=24076,24075
<24076=24078,24077
<24078=24080,24079
<24080=24082,24081
<24083=24085,24084
<24086=24087
<24087=24089,24088
<24090=24091
<24091=24092
<24092=24097,24096,24093
<24093=24095,24094
<24098=24099
<24099=24115,24114,24100
<24100=24113,24101
<24101=24112,24102
<24102=24104,24103
<24104=24105
<24105=24107,24106
<24107=24109,24108
<24109=24111,24110
<24116=24117
<24117=24125,24118
<24118=24123,24119
<24119=24120
<24120=24122,24121
<24123=24124
<24125=24126
<24126=24128,24127
<24128=24130,24129
<24131=24132
<24132=24140,24133
<24133=24138,24136,24134
<24134=24135
<24136=24137
<24138=24139
<24140=24141
<24142=24143
<24143=24155,24154,24144
<24144=24153,24145
<24145=24151,24146
<24146=24147
<24147=24148
<24148=24150,24149
<24151=24152
<24156=24158,24157
<24159=24160
<24160=24162,24161
<24163=24164
<24164=24165
<24165=24170,24169,24166
<24166=24168,24167
<24171=24172
<24172=24176,24173
<24173=24174
<24174=24175
<24176=24177
<24178=24179
<24179=24191,24180
<24180=24189,24187,24185,24183,24181
<24181=24182
<24183=24184
<24185=24186
<24187=24188
<24189=24190
<24191=24192
<24192=24194,24193
<24195=24196
<24196=24220,24219,24218,24197
<24197=24217,24198
<24198=24211,24205,24199
<24199=24203,24200
<24200=24201
<24201=24202
<24203=24204
<24205=24209,24206
<24206=24207
<24207=24208
<24209=24210
<24211=24215,24212
<24212=24213
<24213=24214
<24215=24216
<24221=24222
<24222=24225,24224,24223
<24226=24227
<24227=24253,24252,24228
<24228=24251,24229
<24229=24249,24230
<24230=24243,24237,24231
<24231=24232
<24232=24234,24233
<24234=24236,24235
<24237=24238
<24238=24240,24239
<24240=24242,24241
<24243=24244
<24244=24246,24245
<24246=24248,24247
<24249=24250
<24254=24255
<24255=24258,24257,24256
<24262=24263
<24263=24271,24270,24264
<24264=24269,24265
<24265=24267,24266
<24267=24268
<24272=24273
<24274=24294,24290,24287,24275
<24275=24276
<24276=24280,24277
<24277=24279,24278
<24280=24282,24281
<24282=24284,24283
<24284=24286,24285
<24287=24289,24288
<24290=24291
<24291=24293,24292
<24294=24295
<24295=24296
<24296=24301,24300,24297
<24297=24299,24298
<24302=24303
<24303=24308,24307,24304
<24304=24306,24305
<24309=24310
<24310=24315,24314,24311
<24311=24313,24312
<24316=24317
<24317=24322,24321,24318
<24318=24320,24319
<24323=24324
<24324=24329,24328,24325
<24325=24327,24326
<24330=24331
<24331=24345,24344,24332
<24332=24343,24333
<24333=24342,24334
<24334=24336,24335
<24336=24337
<24337=24339,24338
<24339=24341,24340
<24346=24347
<24347=24352,24351,24348
<24348=24350,24349
<24353=24354
<24354=24362,24361,24355
<24355=24360,24356
<24356=24358,24357
<24358=24359
<24363=24373,24364
<24364=24372,24371,24370,24369,24368,24367,24365
<24365=24366
<24373=24374
<24374=24376,24375
<24376=24385,24377
<24377=24379,24378
<24379=24380
<24380=24382,24381
<24382=24384,24383
<24386=24387
<24387=24395,24388
<24388=24393,24389
<24389=24390
<24390=24392,24391
<24393=24394
<24395=24396
<24396=24398,24397
<24399=24400
<24400=24418,24401
<24401=24416,24409,24402
<24402=24403
<24403=24405,24404
<24405=24406
<24406=24408,24407
<24409=24410
<24410=24412,24411
<24412=24413
<24413=24415,24414
<24416=24417
<24418=24419
<24624=24648,24647,24625
<24625=24644,24641,24638,24635,24632,24629,24626
<24626=24628,24627
<24629=24631,24630
<24632=24634,24633
<24635=24637,24636
<24638=24640,24639
<24641=24643,24642
<24644=24646,24645
<24648=25101,24660,24651,24649
<24649=24650
<24651=24652
<24652=24658,24653
<24653=24656,24654
<24654=24655
<24656=24657
<24658=24659
<24660=25093,25089,25086,24661
<24661=25075,25059,25053,25046,24800,24662
<24662=24789,24663
<24663=24788,24787,24786,24785,24784,24783,24782,24781,24780,24779,24778,24777,24776,24716,24707,24668,24664
<24664=24665
<24665=24667,24666
<24668=24703,24669
<24669=24692,24681,24670
<24670=24671
<24671=24673,24672
<24673=24679,24674
<24674=24675
<24675=24676
<24676=24678,24677
<24679=24680
<24681=24682
<24682=24684,24683
<24684=24690,24685
<24685=24686
<24686=24687
<24687=24689,24688
<24690=24691
<24692=24693
<24693=24695,24694
<24695=24701,24696
<24696=24697
<24697=24698
<24698=24700,24699
<24701=24702
<24703=24704
<24704=24706,24705
<24707=24708
<24708=24710,24709
<24710=24711
<24711=24713,24712
<24713=24715,24714
<24716=24768,24764,24761,24717
<24717=24748,24735,24718
<24718=24719
<24719=24723,24720
<24720=24722,24721
<24723=24725,24724
<24725=24733,24726
<24726=24729,24727
<24727=24728
<24729=24730
<24730=24732,24731
<24733=24734
<24735=24736
<24736=24747,24746,24737
<24737=24745,24738
<24738=24740,24739
<24740=24742,24741
<24742=24744,24743
<24748=24749
<24749=24760,24759,24750
<24750=24758,24751
<24751=24753,24752
<24753=24755,24754
<24755=24757,24756
<24761=24763,24762
<24764=24765
<24765=24767,24766
<24768=24769
<24769=24770
<24770=24775,24774,24771
<24771=24773,24772
<24789=24790
<24790=24794,24791
<24791=24793,24792
<24794=24798,24795
<24795=24796
<24796=24797
<24798=24799
<24800=25038,25034,25031,24801
<24801=25018,25013,24990,24974,24957,24802
<24802=24947,24943,24940,24803
<24803=24927,24922,24899,24883,24866,24862,24841,24814,24804
<24804=24810,24805
<24805=24806
<24806=24807
<24807=24809,24808
<24810=24811
<24811=24813,24812
<24814=24815
<24815=24840,24839,24816
<24816=24838,24817
<24817=24836,24818
<24818=24819
<24819=24820
<24820=24834,24821
<24821=24832,24826,24822
<24822=24823
<24823=24825,24824
<24826=24827
<24827=24829,24828
<24829=24831,24830
<24832=24833
<24834=24835
<24836=24837
<24841=24842
<24842=24860,24843
<24843=24858,24856,24854,24852,24850,24848,24844
<24844=24845
<24845=24847,24846
<24848=24849
<24850=24851
<24852=24853
<24854=24855
<24856=24857
<24858=24859
<24860=24861
<24862=24863
<24863=24865,24864
<24866=24867
<24867=24881,24868
<24868=24879,24877,24875,24871,24869
<24869=24870
<24871=24872
<24872=24874,24873
<24875=24876
<24877=24878
<24879=24880
<24881=24882
<24883=24884
<24884=24898,24897,24885
<24885=24896,24886
<24886=24894,24887
<24887=24892,24890,24888
<24888=24889
<24890=24891
<24892=24893
<24894=24895
<24899=24900
<24900=24920,24901
<24901=24918,24916,24914,24912,24910,24904,24902
<24902=24903
<24904=24905
<24905=24907,24906
<24907=24909,24908
<24910=24911
<24912=24913
<24914=24915
<24916=24917
<24918=24919
<24920=24921
<24922=24923
<24923=24926,24925,24924
<24927=24928
<24928=24939,24938,24929
<24929=24937,24930
<24930=24932,24931
<24932=24934,24933
<24934=24936,24935
<24940=24942,24941
<24943=24944
<24944=24946,24945
<24947=24948
<24948=24949
<24949=24956,24955,24950
<24950=24954,24951
<24951=24953,24952
<24957=24958
<24958=24972,24959
<24959=24970,24968,24966,24962,24960
<24960=24961
<24962=24963
<24963=24965,24964
<24966=24967
<24968=24969
<24970=24971
<24972=24973
<24974=24975
<24975=24989,24988,24976
<24976=24987,24977
<24977=24985,24978
<24978=24983,24981,24979
<24979=24980
<24981=24982
<24983=24984
<24985=24986
<24990=24991
<24991=25011,24992
<24992=25009,25007,25005,25003,25001,24995,24993
<24993=24994
<24995=24996
<24996=24998,24997
<24998=25000,24999
<25001=25002
<25003=25004
<25005=25006
<25007=25008
<25009=25010
<25011=25012
<25013=25014
<25014=25017,25016,25015
<25018=25019
<25019=25030,25029,25020
<25020=25028,25021
<25021=25023,25022
<25023=25025,25024
<25025=25027,25026
<25031=25033,25032
<25034=25035
<25035=25037,25036
<25038=25039
<25039=25040
<25040=25045,25044,25041
<25041=25043,25042
<25046=25047
<25047=25052,25051,25048
<25048=25050,25049
<25053=25055,25054
<25055=25056
<25056=25058,25057
<25059=25060
<25060=25074,25073,25061
<25061=25072,25062
<25062=25071,25063
<25063=25065,25064
<25065=25066
<25066=25068,25067
<25068=25070,25069
<25075=25076
<25076=25085,25084,25077
<25077=25083,25078
<25078=25080,25079
<25080=25082,25081
<25086=25088,25087
<25089=25090
<25090=25092,25091
<25093=25094
<25094=25095
<25095=25100,25099,25096
<25096=25098,25097
<25101=25102
<25102=25107,25106,25103
<25103=25105,25104
