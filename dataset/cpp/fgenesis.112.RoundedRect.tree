>5	FunctionDef	RoundedRect 
>6	ParameterList	 
>7	CompoundStatement	 
>8	ExpressionStatement	 
>9	AssignmentExpr	followCamera = 1
>10	PrimaryExpression	1
>11	Identifier	followCamera
>12	ExpressionStatement	 
>13	AssignmentExpr	moving = 0
>14	PrimaryExpression	0
>15	Identifier	moving
>16	ExpressionStatement	 
>17	AssignmentExpr	canMove = false
>18	Identifier	false
>19	Identifier	canMove
>20	ExpressionStatement	 
>21	AssignmentExpr	cull = false
>22	Identifier	false
>23	Identifier	cull
>24	ExpressionStatement	 
>25	AssignmentExpr	radius = 20
>26	PrimaryExpression	20
>27	Identifier	radius
>28	ExpressionStatement	 
>29	AssignmentExpr	height = 100
>30	PrimaryExpression	100
>31	Identifier	height
>32	ExpressionStatement	 
>33	AssignmentExpr	width = 100
>34	PrimaryExpression	100
>35	Identifier	width
>36	ExpressionStatement	 
>37	AssignmentExpr	color = 0
>38	PrimaryExpression	0
>39	Identifier	color
>40	ExpressionStatement	 
>41	AssignmentExpr	alphaMod = 0.75
>42	PrimaryExpression	0.75
>43	Identifier	alphaMod
>57	FunctionDef	RoundedRect 
>58	ParameterList	int w , int h , int radius
>59	Parameter	 
>60	Identifier	radius
>61	ParameterType	int
>62	Parameter	 
>63	Identifier	h
>64	ParameterType	int
>65	Parameter	 
>66	Identifier	w
>67	ParameterType	int
>68	ReturnType	void
>69	CompoundStatement	 
>70	ExpressionStatement	 
>71	AssignmentExpr	height = h - radius * 2
>72	AdditiveExpression	h - radius * 2
>73	MultiplicativeExpression	radius * 2
>74	PrimaryExpression	2
>75	Identifier	radius
>76	Identifier	h
>77	Identifier	height
>78	ExpressionStatement	 
>79	AssignmentExpr	width = w - radius * 2
>80	AdditiveExpression	w - radius * 2
>81	MultiplicativeExpression	radius * 2
>82	PrimaryExpression	2
>83	Identifier	radius
>84	Identifier	w
>85	Identifier	width
>86	ExpressionStatement	 
>87	AssignmentExpr	this -> radius = radius
>88	Identifier	radius
>89	PtrMemberAccess	this -> radius
>90	Identifier	radius
>91	Identifier	this
>103	FunctionDef	RoundedRect 
>104	ParameterList	bool on
>105	Parameter	 
>106	Identifier	on
>107	ParameterType	bool
>108	ReturnType	void
>109	CompoundStatement	 
>110	ExpressionStatement	 
>111	AssignmentExpr	canMove = on
>112	Identifier	on
>113	Identifier	canMove
>119	FunctionDef	RoundedRect 
>120	ParameterList	float dt
>121	Parameter	 
>122	Identifier	dt
>123	ParameterType	float
>124	ReturnType	void
>125	CompoundStatement	 
>126	IfStatement	if ( canMove )
>127	CompoundStatement	 
>128	IfStatement	if ( core -> mouse . buttons . left )
>129	ElseStatement	else
>130	CompoundStatement	 
>131	IfStatement	if ( moving == this )
>132	CompoundStatement	 
>133	ExpressionStatement	 
>134	AssignmentExpr	moving = 0
>135	PrimaryExpression	0
>136	Identifier	moving
>137	Condition	 
>138	EqualityExpression	moving == this
>139	Identifier	this
>140	Identifier	moving
>141	CompoundStatement	 
>142	IfStatement	if ( moving == this )
>143	ElseStatement	else
>144	IfStatement	if ( moving == 0 )
>145	CompoundStatement	 
>146	IfStatement	if ( ( p . x >= ( position . x - ( width / 2 + radius ) ) ) && ( p . y >= ( position . y - ( height / 2 + radius ) ) ) && ( \
>147	CompoundStatement	 
>148	ExpressionStatement	 
>149	AssignmentExpr	moving = this
>150	Identifier	this
>151	Identifier	moving
>152	ExpressionStatement	 
>153	AssignmentExpr	d = position - core -> mouse . position
>154	AdditiveExpression	position - core -> mouse . position
>155	MemberAccess	core -> mouse . position
>156	Identifier	position
>157	PtrMemberAccess	core -> mouse
>158	Identifier	mouse
>159	Identifier	core
>160	Identifier	position
>161	Identifier	d
>162	Condition	 
>163	AndExpression	( p . x >= ( position . x - ( width / 2 + radius ) ) ) && ( p . y >= ( position . y - ( height / 2 + \
>164	AndExpression	( p . y >= ( position . y - ( height / 2 + radius ) ) ) && ( p . x <= ( position . x + ( width / 2 + \
>165	AndExpression	p . x <= ( position . x + ( width / 2 + radius ) ) && ( p . y <= ( position . y - height / 2 ) )
>166	RelationalExpression	p . y <= ( position . y - height / 2 )
>167	AdditiveExpression	position . y - height / 2
>168	MultiplicativeExpression	height / 2
>169	PrimaryExpression	2
>170	Identifier	height
>171	MemberAccess	position . y
>172	Identifier	y
>173	Identifier	position
>174	MemberAccess	p . y
>175	Identifier	y
>176	Identifier	p
>177	RelationalExpression	p . x <= ( position . x + ( width / 2 + radius ) )
>178	AdditiveExpression	position . x + ( width / 2 + radius )
>179	AdditiveExpression	width / 2 + radius
>180	Identifier	radius
>181	MultiplicativeExpression	width / 2
>182	PrimaryExpression	2
>183	Identifier	width
>184	MemberAccess	position . x
>185	Identifier	x
>186	Identifier	position
>187	MemberAccess	p . x
>188	Identifier	x
>189	Identifier	p
>190	RelationalExpression	p . y >= ( position . y - ( height / 2 + radius ) )
>191	AdditiveExpression	position . y - ( height / 2 + radius )
>192	AdditiveExpression	height / 2 + radius
>193	Identifier	radius
>194	MultiplicativeExpression	height / 2
>195	PrimaryExpression	2
>196	Identifier	height
>197	MemberAccess	position . y
>198	Identifier	y
>199	Identifier	position
>200	MemberAccess	p . y
>201	Identifier	y
>202	Identifier	p
>203	RelationalExpression	p . x >= ( position . x - ( width / 2 + radius ) )
>204	AdditiveExpression	position . x - ( width / 2 + radius )
>205	AdditiveExpression	width / 2 + radius
>206	Identifier	radius
>207	MultiplicativeExpression	width / 2
>208	PrimaryExpression	2
>209	Identifier	width
>210	MemberAccess	position . x
>211	Identifier	x
>212	Identifier	position
>213	MemberAccess	p . x
>214	Identifier	x
>215	Identifier	p
>216	IdentifierDeclStatement	 
>217	IdentifierDecl	p = core -> mouse . position
>218	AssignmentExpr	p = core -> mouse . position
>219	MemberAccess	core -> mouse . position
>220	Identifier	position
>221	PtrMemberAccess	core -> mouse
>222	Identifier	mouse
>223	Identifier	core
>224	Identifier	p
>225	Identifier	p
>226	IdentifierDeclType	Vector
>227	Condition	 
>228	EqualityExpression	moving == 0
>229	PrimaryExpression	0
>230	Identifier	moving
>231	CompoundStatement	 
>232	IfStatement	if ( position . y - ( ( height / 2 ) + radius ) < 0 - core -> getVirtualOffY ( ) )
>233	ExpressionStatement	 
>234	AssignmentExpr	position . y = - core -> getVirtualOffY ( ) + ( ( height / 2 ) + radius )
>235	AdditiveExpression	- core -> getVirtualOffY ( ) + ( ( height / 2 ) + radius )
>236	AdditiveExpression	( height / 2 ) + radius
>237	Identifier	radius
>238	MultiplicativeExpression	height / 2
>239	PrimaryExpression	2
>240	Identifier	height
>241	UnaryOp	- core -> getVirtualOffY ( )
>242	CallExpression	core -> getVirtualOffY ( )
>243	ArgumentList	 
>244	Callee	core -> getVirtualOffY
>245	PtrMemberAccess	core -> getVirtualOffY
>246	Identifier	getVirtualOffY
>247	Identifier	core
>248	UnaryOperator	-
>249	MemberAccess	position . y
>250	Identifier	y
>251	Identifier	position
>252	Condition	 
>253	RelationalExpression	position . y - ( ( height / 2 ) + radius ) < 0 - core -> getVirtualOffY ( )
>254	AdditiveExpression	0 - core -> getVirtualOffY ( )
>255	CallExpression	core -> getVirtualOffY ( )
>256	ArgumentList	 
>257	Callee	core -> getVirtualOffY
>258	PtrMemberAccess	core -> getVirtualOffY
>259	Identifier	getVirtualOffY
>260	Identifier	core
>261	PrimaryExpression	0
>262	AdditiveExpression	position . y - ( ( height / 2 ) + radius )
>263	AdditiveExpression	( height / 2 ) + radius
>264	Identifier	radius
>265	MultiplicativeExpression	height / 2
>266	PrimaryExpression	2
>267	Identifier	height
>268	MemberAccess	position . y
>269	Identifier	y
>270	Identifier	position
>271	IfStatement	if ( position . x - ( ( width / 2 ) + radius ) < 0 - core -> getVirtualOffX ( ) )
>272	ExpressionStatement	 
>273	AssignmentExpr	position . x = - core -> getVirtualOffX ( ) + ( ( width / 2 ) + radius )
>274	AdditiveExpression	- core -> getVirtualOffX ( ) + ( ( width / 2 ) + radius )
>275	AdditiveExpression	( width / 2 ) + radius
>276	Identifier	radius
>277	MultiplicativeExpression	width / 2
>278	PrimaryExpression	2
>279	Identifier	width
>280	UnaryOp	- core -> getVirtualOffX ( )
>281	CallExpression	core -> getVirtualOffX ( )
>282	ArgumentList	 
>283	Callee	core -> getVirtualOffX
>284	PtrMemberAccess	core -> getVirtualOffX
>285	Identifier	getVirtualOffX
>286	Identifier	core
>287	UnaryOperator	-
>288	MemberAccess	position . x
>289	Identifier	x
>290	Identifier	position
>291	Condition	 
>292	RelationalExpression	position . x - ( ( width / 2 ) + radius ) < 0 - core -> getVirtualOffX ( )
>293	AdditiveExpression	0 - core -> getVirtualOffX ( )
>294	CallExpression	core -> getVirtualOffX ( )
>295	ArgumentList	 
>296	Callee	core -> getVirtualOffX
>297	PtrMemberAccess	core -> getVirtualOffX
>298	Identifier	getVirtualOffX
>299	Identifier	core
>300	PrimaryExpression	0
>301	AdditiveExpression	position . x - ( ( width / 2 ) + radius )
>302	AdditiveExpression	( width / 2 ) + radius
>303	Identifier	radius
>304	MultiplicativeExpression	width / 2
>305	PrimaryExpression	2
>306	Identifier	width
>307	MemberAccess	position . x
>308	Identifier	x
>309	Identifier	position
>310	IfStatement	if ( position . y + ( ( height / 2 ) + radius ) > core -> getVirtualHeight ( ) )
>311	ExpressionStatement	 
>312	AssignmentExpr	position . y = core -> getVirtualHeight ( ) - ( ( height / 2 ) + radius )
>313	AdditiveExpression	core -> getVirtualHeight ( ) - ( ( height / 2 ) + radius )
>314	AdditiveExpression	( height / 2 ) + radius
>315	Identifier	radius
>316	MultiplicativeExpression	height / 2
>317	PrimaryExpression	2
>318	Identifier	height
>319	CallExpression	core -> getVirtualHeight ( )
>320	ArgumentList	 
>321	Callee	core -> getVirtualHeight
>322	PtrMemberAccess	core -> getVirtualHeight
>323	Identifier	getVirtualHeight
>324	Identifier	core
>325	MemberAccess	position . y
>326	Identifier	y
>327	Identifier	position
>328	Condition	 
>329	RelationalExpression	position . y + ( ( height / 2 ) + radius ) > core -> getVirtualHeight ( )
>330	CallExpression	core -> getVirtualHeight ( )
>331	ArgumentList	 
>332	Callee	core -> getVirtualHeight
>333	PtrMemberAccess	core -> getVirtualHeight
>334	Identifier	getVirtualHeight
>335	Identifier	core
>336	AdditiveExpression	position . y + ( ( height / 2 ) + radius )
>337	AdditiveExpression	( height / 2 ) + radius
>338	Identifier	radius
>339	MultiplicativeExpression	height / 2
>340	PrimaryExpression	2
>341	Identifier	height
>342	MemberAccess	position . y
>343	Identifier	y
>344	Identifier	position
>345	IfStatement	if ( position . x + ( ( width / 2 ) + radius ) > ( core -> getVirtualWidth ( ) - core -> getVirtualOffX ( ) ) )
>346	ExpressionStatement	 
>347	AssignmentExpr	position . x = ( core -> getVirtualWidth ( ) - core -> getVirtualOffX ( ) ) - ( ( width / 2 ) + radius )
>348	AdditiveExpression	( core -> getVirtualWidth ( ) - core -> getVirtualOffX ( ) ) - ( ( width / 2 ) + radius )
>349	AdditiveExpression	( width / 2 ) + radius
>350	Identifier	radius
>351	MultiplicativeExpression	width / 2
>352	PrimaryExpression	2
>353	Identifier	width
>354	AdditiveExpression	core -> getVirtualWidth ( ) - core -> getVirtualOffX ( )
>355	CallExpression	core -> getVirtualOffX ( )
>356	ArgumentList	 
>357	Callee	core -> getVirtualOffX
>358	PtrMemberAccess	core -> getVirtualOffX
>359	Identifier	getVirtualOffX
>360	Identifier	core
>361	CallExpression	core -> getVirtualWidth ( )
>362	ArgumentList	 
>363	Callee	core -> getVirtualWidth
>364	PtrMemberAccess	core -> getVirtualWidth
>365	Identifier	getVirtualWidth
>366	Identifier	core
>367	MemberAccess	position . x
>368	Identifier	x
>369	Identifier	position
>370	Condition	 
>371	RelationalExpression	position . x + ( ( width / 2 ) + radius ) > ( core -> getVirtualWidth ( ) - core -> getVirtualOffX ( ) )
>372	AdditiveExpression	core -> getVirtualWidth ( ) - core -> getVirtualOffX ( )
>373	CallExpression	core -> getVirtualOffX ( )
>374	ArgumentList	 
>375	Callee	core -> getVirtualOffX
>376	PtrMemberAccess	core -> getVirtualOffX
>377	Identifier	getVirtualOffX
>378	Identifier	core
>379	CallExpression	core -> getVirtualWidth ( )
>380	ArgumentList	 
>381	Callee	core -> getVirtualWidth
>382	PtrMemberAccess	core -> getVirtualWidth
>383	Identifier	getVirtualWidth
>384	Identifier	core
>385	AdditiveExpression	position . x + ( ( width / 2 ) + radius )
>386	AdditiveExpression	( width / 2 ) + radius
>387	Identifier	radius
>388	MultiplicativeExpression	width / 2
>389	PrimaryExpression	2
>390	Identifier	width
>391	MemberAccess	position . x
>392	Identifier	x
>393	Identifier	position
>394	ExpressionStatement	 
>395	AssignmentExpr	position = core -> mouse . position + d
>396	AdditiveExpression	core -> mouse . position + d
>397	Identifier	d
>398	MemberAccess	core -> mouse . position
>399	Identifier	position
>400	PtrMemberAccess	core -> mouse
>401	Identifier	mouse
>402	Identifier	core
>403	Identifier	position
>404	Condition	 
>405	EqualityExpression	moving == this
>406	Identifier	this
>407	Identifier	moving
>408	Condition	 
>409	MemberAccess	core -> mouse . buttons . left
>410	Identifier	left
>411	MemberAccess	core -> mouse . buttons
>412	Identifier	buttons
>413	PtrMemberAccess	core -> mouse
>414	Identifier	mouse
>415	Identifier	core
>416	Condition	 
>417	Identifier	canMove
>418	ExpressionStatement	 
>419	CallExpression	RenderObject 
>420	ArgumentList	dt
>421	Argument	dt
>422	Identifier	dt
>423	Callee	RenderObject 
>424	Identifier	RenderObject 
>452	FunctionDef	RoundedRect 
>453	ParameterList	 
>454	ReturnType	void
>455	CompoundStatement	 
>456	ExpressionStatement	 
>457	CallExpression	glEnd ( )
>458	ArgumentList	 
>459	Callee	glEnd
>460	Identifier	glEnd
>461	ExpressionStatement	 
>462	CallExpression	glVertex3f ( w2 + radius , h2 , 0 )
>463	ArgumentList	w2 + radius
>464	Argument	0
>465	PrimaryExpression	0
>466	Argument	h2
>467	Identifier	h2
>468	Argument	w2 + radius
>469	AdditiveExpression	w2 + radius
>470	Identifier	radius
>471	Identifier	w2
>472	Callee	glVertex3f
>473	Identifier	glVertex3f
>474	ExpressionStatement	 
>475	CallExpression	glVertex3f ( w2 , h2 , 0 )
>476	ArgumentList	w2
>477	Argument	0
>478	PrimaryExpression	0
>479	Argument	h2
>480	Identifier	h2
>481	Argument	w2
>482	Identifier	w2
>483	Callee	glVertex3f
>484	Identifier	glVertex3f
>485	ExpressionStatement	 
>486	CallExpression	glVertex3f ( w2 , - h2 , 0 )
>487	ArgumentList	w2
>488	Argument	0
>489	PrimaryExpression	0
>490	Argument	- h2
>491	UnaryOp	- h2
>492	Identifier	h2
>493	UnaryOperator	-
>494	Argument	w2
>495	Identifier	w2
>496	Callee	glVertex3f
>497	Identifier	glVertex3f
>498	ExpressionStatement	 
>499	CallExpression	glVertex3f ( w2 + radius , - h2 , 0 )
>500	ArgumentList	w2 + radius
>501	Argument	0
>502	PrimaryExpression	0
>503	Argument	- h2
>504	UnaryOp	- h2
>505	Identifier	h2
>506	UnaryOperator	-
>507	Argument	w2 + radius
>508	AdditiveExpression	w2 + radius
>509	Identifier	radius
>510	Identifier	w2
>511	Callee	glVertex3f
>512	Identifier	glVertex3f
>513	ExpressionStatement	 
>514	CallExpression	glVertex3f ( - w2 - radius , h2 , 0 )
>515	ArgumentList	- w2 - radius
>516	Argument	0
>517	PrimaryExpression	0
>518	Argument	h2
>519	Identifier	h2
>520	Argument	- w2 - radius
>521	AdditiveExpression	- w2 - radius
>522	Identifier	radius
>523	UnaryOp	- w2
>524	Identifier	w2
>525	UnaryOperator	-
>526	Callee	glVertex3f
>527	Identifier	glVertex3f
>528	ExpressionStatement	 
>529	CallExpression	glVertex3f ( - w2 , h2 , 0 )
>530	ArgumentList	- w2
>531	Argument	0
>532	PrimaryExpression	0
>533	Argument	h2
>534	Identifier	h2
>535	Argument	- w2
>536	UnaryOp	- w2
>537	Identifier	w2
>538	UnaryOperator	-
>539	Callee	glVertex3f
>540	Identifier	glVertex3f
>541	ExpressionStatement	 
>542	CallExpression	glVertex3f ( - w2 , - h2 , 0 )
>543	ArgumentList	- w2
>544	Argument	0
>545	PrimaryExpression	0
>546	Argument	- h2
>547	UnaryOp	- h2
>548	Identifier	h2
>549	UnaryOperator	-
>550	Argument	- w2
>551	UnaryOp	- w2
>552	Identifier	w2
>553	UnaryOperator	-
>554	Callee	glVertex3f
>555	Identifier	glVertex3f
>556	ExpressionStatement	 
>557	CallExpression	glVertex3f ( - w2 - radius , - h2 , 0 )
>558	ArgumentList	- w2 - radius
>559	Argument	0
>560	PrimaryExpression	0
>561	Argument	- h2
>562	UnaryOp	- h2
>563	Identifier	h2
>564	UnaryOperator	-
>565	Argument	- w2 - radius
>566	AdditiveExpression	- w2 - radius
>567	Identifier	radius
>568	UnaryOp	- w2
>569	Identifier	w2
>570	UnaryOperator	-
>571	Callee	glVertex3f
>572	Identifier	glVertex3f
>573	ExpressionStatement	 
>574	CallExpression	glVertex3f ( - w2 , h2 + radius , 0 )
>575	ArgumentList	- w2
>576	Argument	0
>577	PrimaryExpression	0
>578	Argument	h2 + radius
>579	AdditiveExpression	h2 + radius
>580	Identifier	radius
>581	Identifier	h2
>582	Argument	- w2
>583	UnaryOp	- w2
>584	Identifier	w2
>585	UnaryOperator	-
>586	Callee	glVertex3f
>587	Identifier	glVertex3f
>588	ExpressionStatement	 
>589	CallExpression	glVertex3f ( w2 , h2 + radius , 0 )
>590	ArgumentList	w2
>591	Argument	0
>592	PrimaryExpression	0
>593	Argument	h2 + radius
>594	AdditiveExpression	h2 + radius
>595	Identifier	radius
>596	Identifier	h2
>597	Argument	w2
>598	Identifier	w2
>599	Callee	glVertex3f
>600	Identifier	glVertex3f
>601	ExpressionStatement	 
>602	CallExpression	glVertex3f ( w2 , - h2 - radius , 0 )
>603	ArgumentList	w2
>604	Argument	0
>605	PrimaryExpression	0
>606	Argument	- h2 - radius
>607	AdditiveExpression	- h2 - radius
>608	Identifier	radius
>609	UnaryOp	- h2
>610	Identifier	h2
>611	UnaryOperator	-
>612	Argument	w2
>613	Identifier	w2
>614	Callee	glVertex3f
>615	Identifier	glVertex3f
>616	ExpressionStatement	 
>617	CallExpression	glVertex3f ( - w2 , - h2 - radius , 0 )
>618	ArgumentList	- w2
>619	Argument	0
>620	PrimaryExpression	0
>621	Argument	- h2 - radius
>622	AdditiveExpression	- h2 - radius
>623	Identifier	radius
>624	UnaryOp	- h2
>625	Identifier	h2
>626	UnaryOperator	-
>627	Argument	- w2
>628	UnaryOp	- w2
>629	Identifier	w2
>630	UnaryOperator	-
>631	Callee	glVertex3f
>632	Identifier	glVertex3f
>633	ForStatement	for ( float angle = 0 ; angle < PI_HALF - iter ; angle += iter )
>634	CompoundStatement	 
>635	CompoundStatement	 
>636	ExpressionStatement	 
>637	CallExpression	glVertex3f ( - w2 + x1 , h2 + 0 , 0 )
>638	ArgumentList	- w2 + x1
>639	Argument	0
>640	PrimaryExpression	0
>641	Argument	h2 + 0
>642	AdditiveExpression	h2 + 0
>643	PrimaryExpression	0
>644	Identifier	h2
>645	Argument	- w2 + x1
>646	AdditiveExpression	- w2 + x1
>647	Identifier	x1
>648	UnaryOp	- w2
>649	Identifier	w2
>650	UnaryOperator	-
>651	Callee	glVertex3f
>652	Identifier	glVertex3f
>653	ExpressionStatement	 
>654	CallExpression	glVertex3f ( - w2 + x2 , h2 + 0 , 0 )
>655	ArgumentList	- w2 + x2
>656	Argument	0
>657	PrimaryExpression	0
>658	Argument	h2 + 0
>659	AdditiveExpression	h2 + 0
>660	PrimaryExpression	0
>661	Identifier	h2
>662	Argument	- w2 + x2
>663	AdditiveExpression	- w2 + x2
>664	Identifier	x2
>665	UnaryOp	- w2
>666	Identifier	w2
>667	UnaryOperator	-
>668	Callee	glVertex3f
>669	Identifier	glVertex3f
>670	ExpressionStatement	 
>671	CallExpression	glVertex3f ( - w2 + x2 , h2 + y2 , 0 )
>672	ArgumentList	- w2 + x2
>673	Argument	0
>674	PrimaryExpression	0
>675	Argument	h2 + y2
>676	AdditiveExpression	h2 + y2
>677	Identifier	y2
>678	Identifier	h2
>679	Argument	- w2 + x2
>680	AdditiveExpression	- w2 + x2
>681	Identifier	x2
>682	UnaryOp	- w2
>683	Identifier	w2
>684	UnaryOperator	-
>685	Callee	glVertex3f
>686	Identifier	glVertex3f
>687	ExpressionStatement	 
>688	CallExpression	glVertex3f ( - w2 + x1 , h2 + y1 , 0 )
>689	ArgumentList	- w2 + x1
>690	Argument	0
>691	PrimaryExpression	0
>692	Argument	h2 + y1
>693	AdditiveExpression	h2 + y1
>694	Identifier	y1
>695	Identifier	h2
>696	Argument	- w2 + x1
>697	AdditiveExpression	- w2 + x1
>698	Identifier	x1
>699	UnaryOp	- w2
>700	Identifier	w2
>701	UnaryOperator	-
>702	Callee	glVertex3f
>703	Identifier	glVertex3f
>704	IdentifierDeclStatement	 
>705	IdentifierDecl	y2 = cosf ( angle + iter ) * radius
>706	AssignmentExpr	y2 = cosf ( angle + iter ) * radius
>707	MultiplicativeExpression	cosf ( angle + iter ) * radius
>708	Identifier	radius
>709	CallExpression	cosf ( angle + iter )
>710	ArgumentList	angle + iter
>711	Argument	angle + iter
>712	AdditiveExpression	angle + iter
>713	Identifier	iter
>714	Identifier	angle
>715	Callee	cosf
>716	Identifier	cosf
>717	Identifier	y2
>718	Identifier	y2
>719	IdentifierDeclType	float
>720	IdentifierDecl	x2 = - sinf ( angle + iter ) * radius
>721	AssignmentExpr	x2 = - sinf ( angle + iter ) * radius
>722	MultiplicativeExpression	- sinf ( angle + iter ) * radius
>723	Identifier	radius
>724	UnaryOp	- sinf ( angle + iter )
>725	CallExpression	sinf ( angle + iter )
>726	ArgumentList	angle + iter
>727	Argument	angle + iter
>728	AdditiveExpression	angle + iter
>729	Identifier	iter
>730	Identifier	angle
>731	Callee	sinf
>732	Identifier	sinf
>733	UnaryOperator	-
>734	Identifier	x2
>735	Identifier	x2
>736	IdentifierDeclType	float
>737	IdentifierDeclStatement	 
>738	IdentifierDecl	y1 = cosf ( angle ) * radius
>739	AssignmentExpr	y1 = cosf ( angle ) * radius
>740	MultiplicativeExpression	cosf ( angle ) * radius
>741	Identifier	radius
>742	CallExpression	cosf ( angle )
>743	ArgumentList	angle
>744	Argument	angle
>745	Identifier	angle
>746	Callee	cosf
>747	Identifier	cosf
>748	Identifier	y1
>749	Identifier	y1
>750	IdentifierDeclType	float
>751	IdentifierDecl	x1 = - sinf ( angle ) * radius
>752	AssignmentExpr	x1 = - sinf ( angle ) * radius
>753	MultiplicativeExpression	- sinf ( angle ) * radius
>754	Identifier	radius
>755	UnaryOp	- sinf ( angle )
>756	CallExpression	sinf ( angle )
>757	ArgumentList	angle
>758	Argument	angle
>759	Identifier	angle
>760	Callee	sinf
>761	Identifier	sinf
>762	UnaryOperator	-
>763	Identifier	x1
>764	Identifier	x1
>765	IdentifierDeclType	float
>766	CompoundStatement	 
>767	ExpressionStatement	 
>768	CallExpression	glVertex3f ( w2 + x1 , h2 + 0 , 0 )
>769	ArgumentList	w2 + x1
>770	Argument	0
>771	PrimaryExpression	0
>772	Argument	h2 + 0
>773	AdditiveExpression	h2 + 0
>774	PrimaryExpression	0
>775	Identifier	h2
>776	Argument	w2 + x1
>777	AdditiveExpression	w2 + x1
>778	Identifier	x1
>779	Identifier	w2
>780	Callee	glVertex3f
>781	Identifier	glVertex3f
>782	ExpressionStatement	 
>783	CallExpression	glVertex3f ( w2 + x2 , h2 + 0 , 0 )
>784	ArgumentList	w2 + x2
>785	Argument	0
>786	PrimaryExpression	0
>787	Argument	h2 + 0
>788	AdditiveExpression	h2 + 0
>789	PrimaryExpression	0
>790	Identifier	h2
>791	Argument	w2 + x2
>792	AdditiveExpression	w2 + x2
>793	Identifier	x2
>794	Identifier	w2
>795	Callee	glVertex3f
>796	Identifier	glVertex3f
>797	ExpressionStatement	 
>798	CallExpression	glVertex3f ( w2 + x2 , h2 + y2 , 0 )
>799	ArgumentList	w2 + x2
>800	Argument	0
>801	PrimaryExpression	0
>802	Argument	h2 + y2
>803	AdditiveExpression	h2 + y2
>804	Identifier	y2
>805	Identifier	h2
>806	Argument	w2 + x2
>807	AdditiveExpression	w2 + x2
>808	Identifier	x2
>809	Identifier	w2
>810	Callee	glVertex3f
>811	Identifier	glVertex3f
>812	ExpressionStatement	 
>813	CallExpression	glVertex3f ( w2 + x1 , h2 + y1 , 0 )
>814	ArgumentList	w2 + x1
>815	Argument	0
>816	PrimaryExpression	0
>817	Argument	h2 + y1
>818	AdditiveExpression	h2 + y1
>819	Identifier	y1
>820	Identifier	h2
>821	Argument	w2 + x1
>822	AdditiveExpression	w2 + x1
>823	Identifier	x1
>824	Identifier	w2
>825	Callee	glVertex3f
>826	Identifier	glVertex3f
>827	IdentifierDeclStatement	 
>828	IdentifierDecl	y2 = cosf ( angle + iter ) * radius
>829	AssignmentExpr	y2 = cosf ( angle + iter ) * radius
>830	MultiplicativeExpression	cosf ( angle + iter ) * radius
>831	Identifier	radius
>832	CallExpression	cosf ( angle + iter )
>833	ArgumentList	angle + iter
>834	Argument	angle + iter
>835	AdditiveExpression	angle + iter
>836	Identifier	iter
>837	Identifier	angle
>838	Callee	cosf
>839	Identifier	cosf
>840	Identifier	y2
>841	Identifier	y2
>842	IdentifierDeclType	float
>843	IdentifierDecl	x2 = sinf ( angle + iter ) * radius
>844	AssignmentExpr	x2 = sinf ( angle + iter ) * radius
>845	MultiplicativeExpression	sinf ( angle + iter ) * radius
>846	Identifier	radius
>847	CallExpression	sinf ( angle + iter )
>848	ArgumentList	angle + iter
>849	Argument	angle + iter
>850	AdditiveExpression	angle + iter
>851	Identifier	iter
>852	Identifier	angle
>853	Callee	sinf
>854	Identifier	sinf
>855	Identifier	x2
>856	Identifier	x2
>857	IdentifierDeclType	float
>858	IdentifierDeclStatement	 
>859	IdentifierDecl	y1 = cosf ( angle ) * radius
>860	AssignmentExpr	y1 = cosf ( angle ) * radius
>861	MultiplicativeExpression	cosf ( angle ) * radius
>862	Identifier	radius
>863	CallExpression	cosf ( angle )
>864	ArgumentList	angle
>865	Argument	angle
>866	Identifier	angle
>867	Callee	cosf
>868	Identifier	cosf
>869	Identifier	y1
>870	Identifier	y1
>871	IdentifierDeclType	float
>872	IdentifierDecl	x1 = sinf ( angle ) * radius
>873	AssignmentExpr	x1 = sinf ( angle ) * radius
>874	MultiplicativeExpression	sinf ( angle ) * radius
>875	Identifier	radius
>876	CallExpression	sinf ( angle )
>877	ArgumentList	angle
>878	Argument	angle
>879	Identifier	angle
>880	Callee	sinf
>881	Identifier	sinf
>882	Identifier	x1
>883	Identifier	x1
>884	IdentifierDeclType	float
>885	CompoundStatement	 
>886	ExpressionStatement	 
>887	CallExpression	glVertex3f ( - w2 + x1 , - h2 + 0 , 0 )
>888	ArgumentList	- w2 + x1
>889	Argument	0
>890	PrimaryExpression	0
>891	Argument	- h2 + 0
>892	AdditiveExpression	- h2 + 0
>893	PrimaryExpression	0
>894	UnaryOp	- h2
>895	Identifier	h2
>896	UnaryOperator	-
>897	Argument	- w2 + x1
>898	AdditiveExpression	- w2 + x1
>899	Identifier	x1
>900	UnaryOp	- w2
>901	Identifier	w2
>902	UnaryOperator	-
>903	Callee	glVertex3f
>904	Identifier	glVertex3f
>905	ExpressionStatement	 
>906	CallExpression	glVertex3f ( - w2 + x2 , - h2 + 0 , 0 )
>907	ArgumentList	- w2 + x2
>908	Argument	0
>909	PrimaryExpression	0
>910	Argument	- h2 + 0
>911	AdditiveExpression	- h2 + 0
>912	PrimaryExpression	0
>913	UnaryOp	- h2
>914	Identifier	h2
>915	UnaryOperator	-
>916	Argument	- w2 + x2
>917	AdditiveExpression	- w2 + x2
>918	Identifier	x2
>919	UnaryOp	- w2
>920	Identifier	w2
>921	UnaryOperator	-
>922	Callee	glVertex3f
>923	Identifier	glVertex3f
>924	ExpressionStatement	 
>925	CallExpression	glVertex3f ( - w2 + x2 , - h2 + y2 , 0 )
>926	ArgumentList	- w2 + x2
>927	Argument	0
>928	PrimaryExpression	0
>929	Argument	- h2 + y2
>930	AdditiveExpression	- h2 + y2
>931	Identifier	y2
>932	UnaryOp	- h2
>933	Identifier	h2
>934	UnaryOperator	-
>935	Argument	- w2 + x2
>936	AdditiveExpression	- w2 + x2
>937	Identifier	x2
>938	UnaryOp	- w2
>939	Identifier	w2
>940	UnaryOperator	-
>941	Callee	glVertex3f
>942	Identifier	glVertex3f
>943	ExpressionStatement	 
>944	CallExpression	glVertex3f ( - w2 + x1 , - h2 + y1 , 0 )
>945	ArgumentList	- w2 + x1
>946	Argument	0
>947	PrimaryExpression	0
>948	Argument	- h2 + y1
>949	AdditiveExpression	- h2 + y1
>950	Identifier	y1
>951	UnaryOp	- h2
>952	Identifier	h2
>953	UnaryOperator	-
>954	Argument	- w2 + x1
>955	AdditiveExpression	- w2 + x1
>956	Identifier	x1
>957	UnaryOp	- w2
>958	Identifier	w2
>959	UnaryOperator	-
>960	Callee	glVertex3f
>961	Identifier	glVertex3f
>962	IdentifierDeclStatement	 
>963	IdentifierDecl	y2 = - cosf ( angle + iter ) * radius
>964	AssignmentExpr	y2 = - cosf ( angle + iter ) * radius
>965	MultiplicativeExpression	- cosf ( angle + iter ) * radius
>966	Identifier	radius
>967	UnaryOp	- cosf ( angle + iter )
>968	CallExpression	cosf ( angle + iter )
>969	ArgumentList	angle + iter
>970	Argument	angle + iter
>971	AdditiveExpression	angle + iter
>972	Identifier	iter
>973	Identifier	angle
>974	Callee	cosf
>975	Identifier	cosf
>976	UnaryOperator	-
>977	Identifier	y2
>978	Identifier	y2
>979	IdentifierDeclType	float
>980	IdentifierDecl	x2 = - sinf ( angle + iter ) * radius
>981	AssignmentExpr	x2 = - sinf ( angle + iter ) * radius
>982	MultiplicativeExpression	- sinf ( angle + iter ) * radius
>983	Identifier	radius
>984	UnaryOp	- sinf ( angle + iter )
>985	CallExpression	sinf ( angle + iter )
>986	ArgumentList	angle + iter
>987	Argument	angle + iter
>988	AdditiveExpression	angle + iter
>989	Identifier	iter
>990	Identifier	angle
>991	Callee	sinf
>992	Identifier	sinf
>993	UnaryOperator	-
>994	Identifier	x2
>995	Identifier	x2
>996	IdentifierDeclType	float
>997	IdentifierDeclStatement	 
>998	IdentifierDecl	y1 = - cosf ( angle ) * radius
>999	AssignmentExpr	y1 = - cosf ( angle ) * radius
>1000	MultiplicativeExpression	- cosf ( angle ) * radius
>1001	Identifier	radius
>1002	UnaryOp	- cosf ( angle )
>1003	CallExpression	cosf ( angle )
>1004	ArgumentList	angle
>1005	Argument	angle
>1006	Identifier	angle
>1007	Callee	cosf
>1008	Identifier	cosf
>1009	UnaryOperator	-
>1010	Identifier	y1
>1011	Identifier	y1
>1012	IdentifierDeclType	float
>1013	IdentifierDecl	x1 = - sinf ( angle ) * radius
>1014	AssignmentExpr	x1 = - sinf ( angle ) * radius
>1015	MultiplicativeExpression	- sinf ( angle ) * radius
>1016	Identifier	radius
>1017	UnaryOp	- sinf ( angle )
>1018	CallExpression	sinf ( angle )
>1019	ArgumentList	angle
>1020	Argument	angle
>1021	Identifier	angle
>1022	Callee	sinf
>1023	Identifier	sinf
>1024	UnaryOperator	-
>1025	Identifier	x1
>1026	Identifier	x1
>1027	IdentifierDeclType	float
>1028	CompoundStatement	 
>1029	ExpressionStatement	 
>1030	CallExpression	glVertex3f ( w2 + x1 , - h2 + 0 , 0 )
>1031	ArgumentList	w2 + x1
>1032	Argument	0
>1033	PrimaryExpression	0
>1034	Argument	- h2 + 0
>1035	AdditiveExpression	- h2 + 0
>1036	PrimaryExpression	0
>1037	UnaryOp	- h2
>1038	Identifier	h2
>1039	UnaryOperator	-
>1040	Argument	w2 + x1
>1041	AdditiveExpression	w2 + x1
>1042	Identifier	x1
>1043	Identifier	w2
>1044	Callee	glVertex3f
>1045	Identifier	glVertex3f
>1046	ExpressionStatement	 
>1047	CallExpression	glVertex3f ( w2 + x2 , - h2 + 0 , 0 )
>1048	ArgumentList	w2 + x2
>1049	Argument	0
>1050	PrimaryExpression	0
>1051	Argument	- h2 + 0
>1052	AdditiveExpression	- h2 + 0
>1053	PrimaryExpression	0
>1054	UnaryOp	- h2
>1055	Identifier	h2
>1056	UnaryOperator	-
>1057	Argument	w2 + x2
>1058	AdditiveExpression	w2 + x2
>1059	Identifier	x2
>1060	Identifier	w2
>1061	Callee	glVertex3f
>1062	Identifier	glVertex3f
>1063	ExpressionStatement	 
>1064	CallExpression	glVertex3f ( w2 + x2 , - h2 + y2 , 0 )
>1065	ArgumentList	w2 + x2
>1066	Argument	0
>1067	PrimaryExpression	0
>1068	Argument	- h2 + y2
>1069	AdditiveExpression	- h2 + y2
>1070	Identifier	y2
>1071	UnaryOp	- h2
>1072	Identifier	h2
>1073	UnaryOperator	-
>1074	Argument	w2 + x2
>1075	AdditiveExpression	w2 + x2
>1076	Identifier	x2
>1077	Identifier	w2
>1078	Callee	glVertex3f
>1079	Identifier	glVertex3f
>1080	ExpressionStatement	 
>1081	CallExpression	glVertex3f ( w2 + x1 , - h2 + y1 , 0 )
>1082	ArgumentList	w2 + x1
>1083	Argument	0
>1084	PrimaryExpression	0
>1085	Argument	- h2 + y1
>1086	AdditiveExpression	- h2 + y1
>1087	Identifier	y1
>1088	UnaryOp	- h2
>1089	Identifier	h2
>1090	UnaryOperator	-
>1091	Argument	w2 + x1
>1092	AdditiveExpression	w2 + x1
>1093	Identifier	x1
>1094	Identifier	w2
>1095	Callee	glVertex3f
>1096	Identifier	glVertex3f
>1097	IdentifierDeclStatement	 
>1098	IdentifierDecl	y2 = - cosf ( angle + iter ) * radius
>1099	AssignmentExpr	y2 = - cosf ( angle + iter ) * radius
>1100	MultiplicativeExpression	- cosf ( angle + iter ) * radius
>1101	Identifier	radius
>1102	UnaryOp	- cosf ( angle + iter )
>1103	CallExpression	cosf ( angle + iter )
>1104	ArgumentList	angle + iter
>1105	Argument	angle + iter
>1106	AdditiveExpression	angle + iter
>1107	Identifier	iter
>1108	Identifier	angle
>1109	Callee	cosf
>1110	Identifier	cosf
>1111	UnaryOperator	-
>1112	Identifier	y2
>1113	Identifier	y2
>1114	IdentifierDeclType	float
>1115	IdentifierDecl	x2 = sinf ( angle + iter ) * radius
>1116	AssignmentExpr	x2 = sinf ( angle + iter ) * radius
>1117	MultiplicativeExpression	sinf ( angle + iter ) * radius
>1118	Identifier	radius
>1119	CallExpression	sinf ( angle + iter )
>1120	ArgumentList	angle + iter
>1121	Argument	angle + iter
>1122	AdditiveExpression	angle + iter
>1123	Identifier	iter
>1124	Identifier	angle
>1125	Callee	sinf
>1126	Identifier	sinf
>1127	Identifier	x2
>1128	Identifier	x2
>1129	IdentifierDeclType	float
>1130	IdentifierDeclStatement	 
>1131	IdentifierDecl	y1 = - cosf ( angle ) * radius
>1132	AssignmentExpr	y1 = - cosf ( angle ) * radius
>1133	MultiplicativeExpression	- cosf ( angle ) * radius
>1134	Identifier	radius
>1135	UnaryOp	- cosf ( angle )
>1136	CallExpression	cosf ( angle )
>1137	ArgumentList	angle
>1138	Argument	angle
>1139	Identifier	angle
>1140	Callee	cosf
>1141	Identifier	cosf
>1142	UnaryOperator	-
>1143	Identifier	y1
>1144	Identifier	y1
>1145	IdentifierDeclType	float
>1146	IdentifierDecl	x1 = sinf ( angle ) * radius
>1147	AssignmentExpr	x1 = sinf ( angle ) * radius
>1148	MultiplicativeExpression	sinf ( angle ) * radius
>1149	Identifier	radius
>1150	CallExpression	sinf ( angle )
>1151	ArgumentList	angle
>1152	Argument	angle
>1153	Identifier	angle
>1154	Callee	sinf
>1155	Identifier	sinf
>1156	Identifier	x1
>1157	Identifier	x1
>1158	IdentifierDeclType	float
>1159	AssignmentExpr	 
>1160	Identifier	iter
>1161	Identifier	angle
>1162	Condition	 
>1163	RelationalExpression	angle < PI_HALF - iter
>1164	AdditiveExpression	PI_HALF - iter
>1165	Identifier	iter
>1166	Identifier	PI_HALF
>1167	Identifier	angle
>1168	ForInit	 
>1169	IdentifierDeclStatement	float angle = 0 ;
>1170	IdentifierDecl	angle = 0
>1171	AssignmentExpr	angle = 0
>1172	PrimaryExpression	0
>1173	Identifier	angle
>1174	Identifier	angle
>1175	IdentifierDeclType	float
>1176	ExpressionStatement	 
>1177	CallExpression	glBegin ( GL_QUADS )
>1178	ArgumentList	GL_QUADS
>1179	Argument	GL_QUADS
>1180	Identifier	GL_QUADS
>1181	Callee	glBegin
>1182	Identifier	glBegin
>1183	IdentifierDeclStatement	 
>1184	IdentifierDecl	iter = 0.1f
>1185	AssignmentExpr	iter = 0.1f
>1186	PrimaryExpression	0.1f
>1187	Identifier	iter
>1188	Identifier	iter
>1189	IdentifierDeclType	float
>1190	IdentifierDeclStatement	 
>1191	IdentifierDecl	h2 = height / 2
>1192	AssignmentExpr	h2 = height / 2
>1193	MultiplicativeExpression	height / 2
>1194	PrimaryExpression	2
>1195	Identifier	height
>1196	Identifier	h2
>1197	Identifier	h2
>1198	IdentifierDeclType	int
>1199	IdentifierDeclStatement	 
>1200	IdentifierDecl	w2 = width / 2
>1201	AssignmentExpr	w2 = width / 2
>1202	MultiplicativeExpression	width / 2
>1203	PrimaryExpression	2
>1204	Identifier	width
>1205	Identifier	w2
>1206	Identifier	w2
>1207	IdentifierDeclType	int
>1226	FunctionDef	RoundedRect 
>1227	ParameterList	 
>1228	ReturnType	void
>1229	CompoundStatement	 
>1230	IfStatement	if ( alpha . x == 0 )
>1231	CompoundStatement	 
>1232	ExpressionStatement	 
>1233	CallExpression	scale . interpolateTo ( Vector ( 1 , 1 ) , t )
>1234	ArgumentList	Vector ( 1 , 1 )
>1235	Argument	t
>1236	Identifier	t
>1237	Argument	Vector ( 1 , 1 )
>1238	CallExpression	Vector ( 1 , 1 )
>1239	ArgumentList	1
>1240	Argument	1
>1241	PrimaryExpression	1
>1242	Argument	1
>1243	PrimaryExpression	1
>1244	Callee	Vector
>1245	Identifier	Vector
>1246	Callee	scale . interpolateTo
>1247	MemberAccess	scale . interpolateTo
>1248	Identifier	interpolateTo
>1249	Identifier	scale
>1250	ExpressionStatement	 
>1251	AssignmentExpr	scale = Vector ( 0.5 , 0.5 )
>1252	CallExpression	Vector ( 0.5 , 0.5 )
>1253	ArgumentList	0.5
>1254	Argument	0.5
>1255	PrimaryExpression	0.5
>1256	Argument	0.5
>1257	PrimaryExpression	0.5
>1258	Callee	Vector
>1259	Identifier	Vector
>1260	Identifier	scale
>1261	ExpressionStatement	 
>1262	CallExpression	alpha . interpolateTo ( 1 , t )
>1263	ArgumentList	1
>1264	Argument	t
>1265	Identifier	t
>1266	Argument	1
>1267	PrimaryExpression	1
>1268	Callee	alpha . interpolateTo
>1269	MemberAccess	alpha . interpolateTo
>1270	Identifier	interpolateTo
>1271	Identifier	alpha
>1272	ExpressionStatement	 
>1273	AssignmentExpr	alpha = 0
>1274	PrimaryExpression	0
>1275	Identifier	alpha
>1276	IdentifierDeclStatement	 
>1277	IdentifierDecl	t = 0.1
>1278	AssignmentExpr	t = 0.1
>1279	PrimaryExpression	0.1
>1280	Identifier	t
>1281	Identifier	t
>1282	IdentifierDeclType	const float
>1283	Condition	 
>1284	EqualityExpression	alpha . x == 0
>1285	PrimaryExpression	0
>1286	MemberAccess	alpha . x
>1287	Identifier	x
>1288	Identifier	alpha
>1297	FunctionDef	RoundedRect 
>1298	ParameterList	 
>1299	ReturnType	void
>1300	CompoundStatement	 
>1301	ExpressionStatement	 
>1302	CallExpression	scale . interpolateTo ( Vector ( 0.5 , 0.5 ) , t )
>1303	ArgumentList	Vector ( 0.5 , 0.5 )
>1304	Argument	t
>1305	Identifier	t
>1306	Argument	Vector ( 0.5 , 0.5 )
>1307	CallExpression	Vector ( 0.5 , 0.5 )
>1308	ArgumentList	0.5
>1309	Argument	0.5
>1310	PrimaryExpression	0.5
>1311	Argument	0.5
>1312	PrimaryExpression	0.5
>1313	Callee	Vector
>1314	Identifier	Vector
>1315	Callee	scale . interpolateTo
>1316	MemberAccess	scale . interpolateTo
>1317	Identifier	interpolateTo
>1318	Identifier	scale
>1319	ExpressionStatement	 
>1320	AssignmentExpr	scale = Vector ( 1 , 1 )
>1321	CallExpression	Vector ( 1 , 1 )
>1322	ArgumentList	1
>1323	Argument	1
>1324	PrimaryExpression	1
>1325	Argument	1
>1326	PrimaryExpression	1
>1327	Callee	Vector
>1328	Identifier	Vector
>1329	Identifier	scale
>1330	ExpressionStatement	 
>1331	CallExpression	alpha . interpolateTo ( 0 , t )
>1332	ArgumentList	0
>1333	Argument	t
>1334	Identifier	t
>1335	Argument	0
>1336	PrimaryExpression	0
>1337	Callee	alpha . interpolateTo
>1338	MemberAccess	alpha . interpolateTo
>1339	Identifier	interpolateTo
>1340	Identifier	alpha
>1341	ExpressionStatement	 
>1342	AssignmentExpr	alpha = 1.0
>1343	PrimaryExpression	1.0
>1344	Identifier	alpha
>1345	IdentifierDeclStatement	 
>1346	IdentifierDecl	t = 0.1
>1347	AssignmentExpr	t = 0.1
>1348	PrimaryExpression	0.1
>1349	Identifier	t
>1350	Identifier	t
>1351	IdentifierDeclType	const float
>1359	FunctionDef	RoundButton 
>1360	ParameterList	const std 
>1361	Parameter	 
>1362	Identifier	font
>1363	ParameterType	TTFFont *
>1364	Parameter	 
>1365	Identifier	labelText
>1366	ParameterType	const std 
>1367	CompoundStatement	 
>1368	ExpressionStatement	 
>1369	AssignmentExpr	noNested = true
>1370	Identifier	true
>1371	Identifier	noNested
>1372	ExpressionStatement	 
>1373	AssignmentExpr	mbd = false
>1374	Identifier	false
>1375	Identifier	mbd
>1376	ExpressionStatement	 
>1377	AssignmentExpr	height = 20
>1378	PrimaryExpression	20
>1379	Identifier	height
>1380	ExpressionStatement	 
>1381	AssignmentExpr	width = 80
>1382	PrimaryExpression	80
>1383	Identifier	width
>1384	ExpressionStatement	 
>1385	CallExpression	addChild ( label , PM_POINTER )
>1386	ArgumentList	label
>1387	Argument	PM_POINTER
>1388	Identifier	PM_POINTER
>1389	Argument	label
>1390	Identifier	label
>1391	Callee	addChild
>1392	Identifier	addChild
>1393	ExpressionStatement	 
>1394	CallExpression	label -> setText ( labelText )
>1395	ArgumentList	labelText
>1396	Argument	labelText
>1397	Identifier	labelText
>1398	Callee	label -> setText
>1399	PtrMemberAccess	label -> setText
>1400	Identifier	setText
>1401	Identifier	label
>1402	ExpressionStatement	 
>1403	AssignmentExpr	label -> offset += Vector ( 0 , 3 )
>1404	CallExpression	Vector ( 0 , 3 )
>1405	ArgumentList	0
>1406	Argument	3
>1407	PrimaryExpression	3
>1408	Argument	0
>1409	PrimaryExpression	0
>1410	Callee	Vector
>1411	Identifier	Vector
>1412	PtrMemberAccess	label -> offset
>1413	Identifier	offset
>1414	Identifier	label
>1415	ExpressionStatement	 
>1416	CallExpression	label -> setAlign ( ALIGN_CENTER )
>1417	ArgumentList	ALIGN_CENTER
>1418	Argument	ALIGN_CENTER
>1419	Identifier	ALIGN_CENTER
>1420	Callee	label -> setAlign
>1421	PtrMemberAccess	label -> setAlign
>1422	Identifier	setAlign
>1423	Identifier	label
>1424	ExpressionStatement	 
>1425	AssignmentExpr	label = new TTFText ( font )
>1426	Identifier	font
>1427	Identifier	label
>1445	FunctionDef	RoundButton 
>1446	ParameterList	int w , int h , int radius
>1447	Parameter	 
>1448	Identifier	radius
>1449	ParameterType	int
>1450	Parameter	 
>1451	Identifier	h
>1452	ParameterType	int
>1453	Parameter	 
>1454	Identifier	w
>1455	ParameterType	int
>1456	ReturnType	void
>1457	CompoundStatement	 
>1458	ExpressionStatement	 
>1459	AssignmentExpr	height = h
>1460	Identifier	h
>1461	Identifier	height
>1462	ExpressionStatement	 
>1463	AssignmentExpr	width = w
>1464	Identifier	w
>1465	Identifier	width
>1474	FunctionDef	RoundButton 
>1475	ParameterList	float dt
>1476	Parameter	 
>1477	Identifier	dt
>1478	ParameterType	float
>1479	ReturnType	void
>1480	CompoundStatement	 
>1481	IfStatement	if ( alpha . x == 1 && top -> alpha . x == 1 )
>1482	ElseStatement	else
>1483	CompoundStatement	 
>1484	ExpressionStatement	 
>1485	AssignmentExpr	mbd = false
>1486	Identifier	false
>1487	Identifier	mbd
>1488	CompoundStatement	 
>1489	IfStatement	if ( ! core -> mouse . buttons . left && mbd )
>1490	CompoundStatement	 
>1491	ExpressionStatement	 
>1492	AssignmentExpr	mbd = false
>1493	Identifier	false
>1494	Identifier	mbd
>1495	Condition	 
>1496	AndExpression	! core -> mouse . buttons . left && mbd
>1497	Identifier	mbd
>1498	UnaryOp	! core -> mouse . buttons . left
>1499	MemberAccess	core -> mouse . buttons . left
>1500	Identifier	left
>1501	MemberAccess	core -> mouse . buttons
>1502	Identifier	buttons
>1503	PtrMemberAccess	core -> mouse
>1504	Identifier	mouse
>1505	Identifier	core
>1506	UnaryOperator	!
>1507	IfStatement	if ( ( p . x > ( c . x - w2 ) ) && ( p . x < ( c . x + w2 ) ) && ( p . y > ( c . y - h2 ) ) && ( p . y < ( c . y + \
>1508	ElseStatement	else
>1509	CompoundStatement	 
>1510	ExpressionStatement	 
>1511	AssignmentExpr	mbd = false
>1512	Identifier	false
>1513	Identifier	mbd
>1514	CompoundStatement	 
>1515	IfStatement	if ( core -> mouse . buttons . left && ! mbd )
>1516	ElseStatement	else
>1517	IfStatement	if ( ! core -> mouse . buttons . left && mbd )
>1518	CompoundStatement	 
>1519	ExpressionStatement	 
>1520	CallExpression	event . call ( )
>1521	ArgumentList	 
>1522	Callee	event . call
>1523	MemberAccess	event . call
>1524	Identifier	call
>1525	Identifier	event
>1526	ExpressionStatement	 
>1527	AssignmentExpr	mbd = false
>1528	Identifier	false
>1529	Identifier	mbd
>1530	Condition	 
>1531	AndExpression	! core -> mouse . buttons . left && mbd
>1532	Identifier	mbd
>1533	UnaryOp	! core -> mouse . buttons . left
>1534	MemberAccess	core -> mouse . buttons . left
>1535	Identifier	left
>1536	MemberAccess	core -> mouse . buttons
>1537	Identifier	buttons
>1538	PtrMemberAccess	core -> mouse
>1539	Identifier	mouse
>1540	Identifier	core
>1541	UnaryOperator	!
>1542	CompoundStatement	 
>1543	ExpressionStatement	 
>1544	AssignmentExpr	mbd = true
>1545	Identifier	true
>1546	Identifier	mbd
>1547	Condition	 
>1548	AndExpression	core -> mouse . buttons . left && ! mbd
>1549	UnaryOp	! mbd
>1550	Identifier	mbd
>1551	UnaryOperator	!
>1552	MemberAccess	core -> mouse . buttons . left
>1553	Identifier	left
>1554	MemberAccess	core -> mouse . buttons
>1555	Identifier	buttons
>1556	PtrMemberAccess	core -> mouse
>1557	Identifier	mouse
>1558	Identifier	core
>1559	Condition	 
>1560	AndExpression	( p . x > ( c . x - w2 ) ) && ( p . x < ( c . x + w2 ) ) && ( p . y > ( c . y - h2 ) ) && ( p . y < ( \
>1561	AndExpression	( p . x < ( c . x + w2 ) ) && ( p . y > ( c . y - h2 ) ) && ( p . y < ( c . y + h2 ) )
>1562	AndExpression	( p . y > ( c . y - h2 ) ) && ( p . y < ( c . y + h2 ) )
>1563	RelationalExpression	p . y < ( c . y + h2 )
>1564	AdditiveExpression	c . y + h2
>1565	Identifier	h2
>1566	MemberAccess	c . y
>1567	Identifier	y
>1568	Identifier	c
>1569	MemberAccess	p . y
>1570	Identifier	y
>1571	Identifier	p
>1572	RelationalExpression	p . y > ( c . y - h2 )
>1573	AdditiveExpression	c . y - h2
>1574	Identifier	h2
>1575	MemberAccess	c . y
>1576	Identifier	y
>1577	Identifier	c
>1578	MemberAccess	p . y
>1579	Identifier	y
>1580	Identifier	p
>1581	RelationalExpression	p . x < ( c . x + w2 )
>1582	AdditiveExpression	c . x + w2
>1583	Identifier	w2
>1584	MemberAccess	c . x
>1585	Identifier	x
>1586	Identifier	c
>1587	MemberAccess	p . x
>1588	Identifier	x
>1589	Identifier	p
>1590	RelationalExpression	p . x > ( c . x - w2 )
>1591	AdditiveExpression	c . x - w2
>1592	Identifier	w2
>1593	MemberAccess	c . x
>1594	Identifier	x
>1595	Identifier	c
>1596	MemberAccess	p . x
>1597	Identifier	x
>1598	Identifier	p
>1599	IdentifierDeclStatement	 
>1600	IdentifierDecl	h2 = height / 2
>1601	AssignmentExpr	h2 = height / 2
>1602	MultiplicativeExpression	height / 2
>1603	PrimaryExpression	2
>1604	Identifier	height
>1605	Identifier	h2
>1606	Identifier	h2
>1607	IdentifierDeclType	int
>1608	IdentifierDeclStatement	 
>1609	IdentifierDecl	w2 = width / 2
>1610	AssignmentExpr	w2 = width / 2
>1611	MultiplicativeExpression	width / 2
>1612	PrimaryExpression	2
>1613	Identifier	width
>1614	Identifier	w2
>1615	Identifier	w2
>1616	IdentifierDeclType	int
>1617	IdentifierDeclStatement	 
>1618	IdentifierDecl	c = getWorldPosition ( )
>1619	AssignmentExpr	c = getWorldPosition ( )
>1620	CallExpression	getWorldPosition ( )
>1621	ArgumentList	 
>1622	Callee	getWorldPosition
>1623	Identifier	getWorldPosition
>1624	Identifier	c
>1625	Identifier	c
>1626	IdentifierDeclType	Vector
>1627	IdentifierDeclStatement	 
>1628	IdentifierDecl	p = core -> mouse . position
>1629	AssignmentExpr	p = core -> mouse . position
>1630	MemberAccess	core -> mouse . position
>1631	Identifier	position
>1632	PtrMemberAccess	core -> mouse
>1633	Identifier	mouse
>1634	Identifier	core
>1635	Identifier	p
>1636	Identifier	p
>1637	IdentifierDeclType	Vector
>1638	Condition	 
>1639	AndExpression	alpha . x == 1 && top -> alpha . x == 1
>1640	EqualityExpression	top -> alpha . x == 1
>1641	PrimaryExpression	1
>1642	MemberAccess	top -> alpha . x
>1643	Identifier	x
>1644	PtrMemberAccess	top -> alpha
>1645	Identifier	alpha
>1646	Identifier	top
>1647	EqualityExpression	alpha . x == 1
>1648	PrimaryExpression	1
>1649	MemberAccess	alpha . x
>1650	Identifier	x
>1651	Identifier	alpha
>1652	IdentifierDeclStatement	 
>1653	IdentifierDecl	* top = getTopParent ( )
>1654	AssignmentExpr	* top = getTopParent ( )
>1655	CallExpression	getTopParent ( )
>1656	ArgumentList	 
>1657	Callee	getTopParent
>1658	Identifier	getTopParent
>1659	Identifier	top
>1660	Identifier	top
>1661	IdentifierDeclType	RenderObject *
>1662	ExpressionStatement	 
>1663	CallExpression	RenderObject 
>1664	ArgumentList	dt
>1665	Argument	dt
>1666	Identifier	dt
>1667	Callee	RenderObject 
>1668	Identifier	RenderObject 
>1669	IfStatement	if ( noNested && core -> isNested ( ) )
>1670	ReturnStatement	 
>1671	Condition	 
>1672	AndExpression	noNested && core -> isNested ( )
>1673	CallExpression	core -> isNested ( )
>1674	ArgumentList	 
>1675	Callee	core -> isNested
>1676	PtrMemberAccess	core -> isNested
>1677	Identifier	isNested
>1678	Identifier	core
>1679	Identifier	noNested
>1714	FunctionDef	RoundButton 
>1715	ParameterList	 
>1716	ReturnType	void
>1717	CompoundStatement	 
>1718	IfStatement	if ( mbd )
>1719	CompoundStatement	 
>1720	ExpressionStatement	 
>1721	CallExpression	glEnd ( )
>1722	ArgumentList	 
>1723	Callee	glEnd
>1724	Identifier	glEnd
>1725	ExpressionStatement	 
>1726	CallExpression	glVertex3f ( - w2 , - h2 , 0 )
>1727	ArgumentList	- w2
>1728	Argument	0
>1729	PrimaryExpression	0
>1730	Argument	- h2
>1731	UnaryOp	- h2
>1732	Identifier	h2
>1733	UnaryOperator	-
>1734	Argument	- w2
>1735	UnaryOp	- w2
>1736	Identifier	w2
>1737	UnaryOperator	-
>1738	Callee	glVertex3f
>1739	Identifier	glVertex3f
>1740	ExpressionStatement	 
>1741	CallExpression	glVertex3f ( w2 , - h2 , 0 )
>1742	ArgumentList	w2
>1743	Argument	0
>1744	PrimaryExpression	0
>1745	Argument	- h2
>1746	UnaryOp	- h2
>1747	Identifier	h2
>1748	UnaryOperator	-
>1749	Argument	w2
>1750	Identifier	w2
>1751	Callee	glVertex3f
>1752	Identifier	glVertex3f
>1753	ExpressionStatement	 
>1754	CallExpression	glVertex3f ( w2 , h2 , 0 )
>1755	ArgumentList	w2
>1756	Argument	0
>1757	PrimaryExpression	0
>1758	Argument	h2
>1759	Identifier	h2
>1760	Argument	w2
>1761	Identifier	w2
>1762	Callee	glVertex3f
>1763	Identifier	glVertex3f
>1764	ExpressionStatement	 
>1765	CallExpression	glVertex3f ( - w2 , h2 , 0 )
>1766	ArgumentList	- w2
>1767	Argument	0
>1768	PrimaryExpression	0
>1769	Argument	h2
>1770	Identifier	h2
>1771	Argument	- w2
>1772	UnaryOp	- w2
>1773	Identifier	w2
>1774	UnaryOperator	-
>1775	Callee	glVertex3f
>1776	Identifier	glVertex3f
>1777	ExpressionStatement	 
>1778	CallExpression	glBegin ( GL_QUADS )
>1779	ArgumentList	GL_QUADS
>1780	Argument	GL_QUADS
>1781	Identifier	GL_QUADS
>1782	Callee	glBegin
>1783	Identifier	glBegin
>1784	ExpressionStatement	 
>1785	CallExpression	glColor4f ( 1 , 1 , 1 , 0.5 )
>1786	ArgumentList	1
>1787	Argument	0.5
>1788	PrimaryExpression	0.5
>1789	Argument	1
>1790	PrimaryExpression	1
>1791	Argument	1
>1792	PrimaryExpression	1
>1793	Argument	1
>1794	PrimaryExpression	1
>1795	Callee	glColor4f
>1796	Identifier	glColor4f
>1797	Condition	 
>1798	Identifier	mbd
>1799	ExpressionStatement	 
>1800	CallExpression	glEnd ( )
>1801	ArgumentList	 
>1802	Callee	glEnd
>1803	Identifier	glEnd
>1804	ExpressionStatement	 
>1805	CallExpression	glVertex3f ( - w2 , - h2 , 0 )
>1806	ArgumentList	- w2
>1807	Argument	0
>1808	PrimaryExpression	0
>1809	Argument	- h2
>1810	UnaryOp	- h2
>1811	Identifier	h2
>1812	UnaryOperator	-
>1813	Argument	- w2
>1814	UnaryOp	- w2
>1815	Identifier	w2
>1816	UnaryOperator	-
>1817	Callee	glVertex3f
>1818	Identifier	glVertex3f
>1819	ExpressionStatement	 
>1820	CallExpression	glVertex3f ( - w2 , h2 , 0 )
>1821	ArgumentList	- w2
>1822	Argument	0
>1823	PrimaryExpression	0
>1824	Argument	h2
>1825	Identifier	h2
>1826	Argument	- w2
>1827	UnaryOp	- w2
>1828	Identifier	w2
>1829	UnaryOperator	-
>1830	Callee	glVertex3f
>1831	Identifier	glVertex3f
>1832	ExpressionStatement	 
>1833	CallExpression	glVertex3f ( - w2 , h2 , 0 )
>1834	ArgumentList	- w2
>1835	Argument	0
>1836	PrimaryExpression	0
>1837	Argument	h2
>1838	Identifier	h2
>1839	Argument	- w2
>1840	UnaryOp	- w2
>1841	Identifier	w2
>1842	UnaryOperator	-
>1843	Callee	glVertex3f
>1844	Identifier	glVertex3f
>1845	ExpressionStatement	 
>1846	CallExpression	glVertex3f ( w2 , h2 , 0 )
>1847	ArgumentList	w2
>1848	Argument	0
>1849	PrimaryExpression	0
>1850	Argument	h2
>1851	Identifier	h2
>1852	Argument	w2
>1853	Identifier	w2
>1854	Callee	glVertex3f
>1855	Identifier	glVertex3f
>1856	ExpressionStatement	 
>1857	CallExpression	glVertex3f ( w2 , h2 , 0 )
>1858	ArgumentList	w2
>1859	Argument	0
>1860	PrimaryExpression	0
>1861	Argument	h2
>1862	Identifier	h2
>1863	Argument	w2
>1864	Identifier	w2
>1865	Callee	glVertex3f
>1866	Identifier	glVertex3f
>1867	ExpressionStatement	 
>1868	CallExpression	glVertex3f ( w2 , - h2 , 0 )
>1869	ArgumentList	w2
>1870	Argument	0
>1871	PrimaryExpression	0
>1872	Argument	- h2
>1873	UnaryOp	- h2
>1874	Identifier	h2
>1875	UnaryOperator	-
>1876	Argument	w2
>1877	Identifier	w2
>1878	Callee	glVertex3f
>1879	Identifier	glVertex3f
>1880	ExpressionStatement	 
>1881	CallExpression	glVertex3f ( w2 , - h2 , 0 )
>1882	ArgumentList	w2
>1883	Argument	0
>1884	PrimaryExpression	0
>1885	Argument	- h2
>1886	UnaryOp	- h2
>1887	Identifier	h2
>1888	UnaryOperator	-
>1889	Argument	w2
>1890	Identifier	w2
>1891	Callee	glVertex3f
>1892	Identifier	glVertex3f
>1893	ExpressionStatement	 
>1894	CallExpression	glVertex3f ( - w2 , - h2 , 0 )
>1895	ArgumentList	- w2
>1896	Argument	0
>1897	PrimaryExpression	0
>1898	Argument	- h2
>1899	UnaryOp	- h2
>1900	Identifier	h2
>1901	UnaryOperator	-
>1902	Argument	- w2
>1903	UnaryOp	- w2
>1904	Identifier	w2
>1905	UnaryOperator	-
>1906	Callee	glVertex3f
>1907	Identifier	glVertex3f
>1908	ExpressionStatement	 
>1909	CallExpression	glBegin ( GL_LINES )
>1910	ArgumentList	GL_LINES
>1911	Argument	GL_LINES
>1912	Identifier	GL_LINES
>1913	Callee	glBegin
>1914	Identifier	glBegin
>1915	ExpressionStatement	 
>1916	CallExpression	glLineWidth ( 1 )
>1917	ArgumentList	1
>1918	Argument	1
>1919	PrimaryExpression	1
>1920	Callee	glLineWidth
>1921	Identifier	glLineWidth
>1922	IdentifierDeclStatement	 
>1923	IdentifierDecl	h2 = height / 2
>1924	AssignmentExpr	h2 = height / 2
>1925	MultiplicativeExpression	height / 2
>1926	PrimaryExpression	2
>1927	Identifier	height
>1928	Identifier	h2
>1929	Identifier	h2
>1930	IdentifierDeclType	int
>1931	IdentifierDecl	w2 = width / 2
>1932	AssignmentExpr	w2 = width / 2
>1933	MultiplicativeExpression	width / 2
>1934	PrimaryExpression	2
>1935	Identifier	width
>1936	Identifier	w2
>1937	Identifier	w2
>1938	IdentifierDeclType	int
<5=7,6
<7=40,36,32,28,24,20,16,12,8
<8=9
<9=11,10
<12=13
<13=15,14
<16=17
<17=19,18
<20=21
<21=23,22
<24=25
<25=27,26
<28=29
<29=31,30
<32=33
<33=35,34
<36=37
<37=39,38
<40=41
<41=43,42
<57=69,68,58
<58=65,62,59
<59=61,60
<62=64,63
<65=67,66
<69=86,78,70
<70=71
<71=77,72
<72=76,73
<73=75,74
<78=79
<79=85,80
<80=84,81
<81=83,82
<86=87
<87=89,88
<89=91,90
<103=109,108,104
<104=105
<105=107,106
<109=110
<110=111
<111=113,112
<119=125,124,120
<120=121
<121=123,122
<125=418,126
<126=416,127
<127=128
<128=408,141,129
<129=130
<130=131
<131=137,132
<132=133
<133=134
<134=136,135
<137=138
<138=140,139
<141=142
<142=404,231,143
<143=144
<144=227,145
<145=216,146
<146=162,147
<147=152,148
<148=149
<149=151,150
<152=153
<153=161,154
<154=160,155
<155=157,156
<157=159,158
<162=163
<163=203,164
<164=190,165
<165=177,166
<166=174,167
<167=171,168
<168=170,169
<171=173,172
<174=176,175
<177=187,178
<178=184,179
<179=181,180
<181=183,182
<184=186,185
<187=189,188
<190=200,191
<191=197,192
<192=194,193
<194=196,195
<197=199,198
<200=202,201
<203=213,204
<204=210,205
<205=207,206
<207=209,208
<210=212,211
<213=215,214
<216=217
<217=226,225,218
<218=224,219
<219=221,220
<221=223,222
<227=228
<228=230,229
<231=394,345,310,271,232
<232=252,233
<233=234
<234=249,235
<235=241,236
<236=238,237
<238=240,239
<241=248,242
<242=244,243
<244=245
<245=247,246
<249=251,250
<252=253
<253=262,254
<254=261,255
<255=257,256
<257=258
<258=260,259
<262=268,263
<263=265,264
<265=267,266
<268=270,269
<271=291,272
<272=273
<273=288,274
<274=280,275
<275=277,276
<277=279,278
<280=287,281
<281=283,282
<283=284
<284=286,285
<288=290,289
<291=292
<292=301,293
<293=300,294
<294=296,295
<296=297
<297=299,298
<301=307,302
<302=304,303
<304=306,305
<307=309,308
<310=328,311
<311=312
<312=325,313
<313=319,314
<314=316,315
<316=318,317
<319=321,320
<321=322
<322=324,323
<325=327,326
<328=329
<329=336,330
<330=332,331
<332=333
<333=335,334
<336=342,337
<337=339,338
<339=341,340
<342=344,343
<345=370,346
<346=347
<347=367,348
<348=354,349
<349=351,350
<351=353,352
<354=361,355
<355=357,356
<357=358
<358=360,359
<361=363,362
<363=364
<364=366,365
<367=369,368
<370=371
<371=385,372
<372=379,373
<373=375,374
<375=376
<376=378,377
<379=381,380
<381=382
<382=384,383
<385=391,386
<386=388,387
<388=390,389
<391=393,392
<394=395
<395=403,396
<396=398,397
<398=400,399
<400=402,401
<404=405
<405=407,406
<408=409
<409=411,410
<411=413,412
<413=415,414
<416=417
<418=419
<419=423,420
<420=421
<421=422
<423=424
<452=455,454,453
<455=1199,1190,1183,1176,633,616,601,588,573,556,541,528,513,498,485,474,461,456
<456=457
<457=459,458
<459=460
<461=462
<462=472,463
<463=468,466,464
<464=465
<466=467
<468=469
<469=471,470
<472=473
<474=475
<475=483,476
<476=481,479,477
<477=478
<479=480
<481=482
<483=484
<485=486
<486=496,487
<487=494,490,488
<488=489
<490=491
<491=493,492
<494=495
<496=497
<498=499
<499=511,500
<500=507,503,501
<501=502
<503=504
<504=506,505
<507=508
<508=510,509
<511=512
<513=514
<514=526,515
<515=520,518,516
<516=517
<518=519
<520=521
<521=523,522
<523=525,524
<526=527
<528=529
<529=539,530
<530=535,533,531
<531=532
<533=534
<535=536
<536=538,537
<539=540
<541=542
<542=554,543
<543=550,546,544
<544=545
<546=547
<547=549,548
<550=551
<551=553,552
<554=555
<556=557
<557=571,558
<558=565,561,559
<559=560
<561=562
<562=564,563
<565=566
<566=568,567
<568=570,569
<571=572
<573=574
<574=586,575
<575=582,578,576
<576=577
<578=579
<579=581,580
<582=583
<583=585,584
<586=587
<588=589
<589=599,590
<590=597,593,591
<591=592
<593=594
<594=596,595
<597=598
<599=600
<601=602
<602=614,603
<603=612,606,604
<604=605
<606=607
<607=609,608
<609=611,610
<612=613
<614=615
<616=617
<617=631,618
<618=627,621,619
<619=620
<621=622
<622=624,623
<624=626,625
<627=628
<628=630,629
<631=632
<633=1168,1162,1159,634
<634=1028,885,766,635
<635=737,704,687,670,653,636
<636=637
<637=651,638
<638=645,641,639
<639=640
<641=642
<642=644,643
<645=646
<646=648,647
<648=650,649
<651=652
<653=654
<654=668,655
<655=662,658,656
<656=657
<658=659
<659=661,660
<662=663
<663=665,664
<665=667,666
<668=669
<670=671
<671=685,672
<672=679,675,673
<673=674
<675=676
<676=678,677
<679=680
<680=682,681
<682=684,683
<685=686
<687=688
<688=702,689
<689=696,692,690
<690=691
<692=693
<693=695,694
<696=697
<697=699,698
<699=701,700
<702=703
<704=720,705
<705=719,718,706
<706=717,707
<707=709,708
<709=715,710
<710=711
<711=712
<712=714,713
<715=716
<720=736,735,721
<721=734,722
<722=724,723
<724=733,725
<725=731,726
<726=727
<727=728
<728=730,729
<731=732
<737=751,738
<738=750,749,739
<739=748,740
<740=742,741
<742=746,743
<743=744
<744=745
<746=747
<751=765,764,752
<752=763,753
<753=755,754
<755=762,756
<756=760,757
<757=758
<758=759
<760=761
<766=858,827,812,797,782,767
<767=768
<768=780,769
<769=776,772,770
<770=771
<772=773
<773=775,774
<776=777
<777=779,778
<780=781
<782=783
<783=795,784
<784=791,787,785
<785=786
<787=788
<788=790,789
<791=792
<792=794,793
<795=796
<797=798
<798=810,799
<799=806,802,800
<800=801
<802=803
<803=805,804
<806=807
<807=809,808
<810=811
<812=813
<813=825,814
<814=821,817,815
<815=816
<817=818
<818=820,819
<821=822
<822=824,823
<825=826
<827=843,828
<828=842,841,829
<829=840,830
<830=832,831
<832=838,833
<833=834
<834=835
<835=837,836
<838=839
<843=857,856,844
<844=855,845
<845=847,846
<847=853,848
<848=849
<849=850
<850=852,851
<853=854
<858=872,859
<859=871,870,860
<860=869,861
<861=863,862
<863=867,864
<864=865
<865=866
<867=868
<872=884,883,873
<873=882,874
<874=876,875
<876=880,877
<877=878
<878=879
<880=881
<885=997,962,943,924,905,886
<886=887
<887=903,888
<888=897,891,889
<889=890
<891=892
<892=894,893
<894=896,895
<897=898
<898=900,899
<900=902,901
<903=904
<905=906
<906=922,907
<907=916,910,908
<908=909
<910=911
<911=913,912
<913=915,914
<916=917
<917=919,918
<919=921,920
<922=923
<924=925
<925=941,926
<926=935,929,927
<927=928
<929=930
<930=932,931
<932=934,933
<935=936
<936=938,937
<938=940,939
<941=942
<943=944
<944=960,945
<945=954,948,946
<946=947
<948=949
<949=951,950
<951=953,952
<954=955
<955=957,956
<957=959,958
<960=961
<962=980,963
<963=979,978,964
<964=977,965
<965=967,966
<967=976,968
<968=974,969
<969=970
<970=971
<971=973,972
<974=975
<980=996,995,981
<981=994,982
<982=984,983
<984=993,985
<985=991,986
<986=987
<987=988
<988=990,989
<991=992
<997=1013,998
<998=1012,1011,999
<999=1010,1000
<1000=1002,1001
<1002=1009,1003
<1003=1007,1004
<1004=1005
<1005=1006
<1007=1008
<1013=1027,1026,1014
<1014=1025,1015
<1015=1017,1016
<1017=1024,1018
<1018=1022,1019
<1019=1020
<1020=1021
<1022=1023
<1028=1130,1097,1080,1063,1046,1029
<1029=1030
<1030=1044,1031
<1031=1040,1034,1032
<1032=1033
<1034=1035
<1035=1037,1036
<1037=1039,1038
<1040=1041
<1041=1043,1042
<1044=1045
<1046=1047
<1047=1061,1048
<1048=1057,1051,1049
<1049=1050
<1051=1052
<1052=1054,1053
<1054=1056,1055
<1057=1058
<1058=1060,1059
<1061=1062
<1063=1064
<1064=1078,1065
<1065=1074,1068,1066
<1066=1067
<1068=1069
<1069=1071,1070
<1071=1073,1072
<1074=1075
<1075=1077,1076
<1078=1079
<1080=1081
<1081=1095,1082
<1082=1091,1085,1083
<1083=1084
<1085=1086
<1086=1088,1087
<1088=1090,1089
<1091=1092
<1092=1094,1093
<1095=1096
<1097=1115,1098
<1098=1114,1113,1099
<1099=1112,1100
<1100=1102,1101
<1102=1111,1103
<1103=1109,1104
<1104=1105
<1105=1106
<1106=1108,1107
<1109=1110
<1115=1129,1128,1116
<1116=1127,1117
<1117=1119,1118
<1119=1125,1120
<1120=1121
<1121=1122
<1122=1124,1123
<1125=1126
<1130=1146,1131
<1131=1145,1144,1132
<1132=1143,1133
<1133=1135,1134
<1135=1142,1136
<1136=1140,1137
<1137=1138
<1138=1139
<1140=1141
<1146=1158,1157,1147
<1147=1156,1148
<1148=1150,1149
<1150=1154,1151
<1151=1152
<1152=1153
<1154=1155
<1159=1161,1160
<1162=1163
<1163=1167,1164
<1164=1166,1165
<1168=1169
<1169=1170
<1170=1175,1174,1171
<1171=1173,1172
<1176=1177
<1177=1181,1178
<1178=1179
<1179=1180
<1181=1182
<1183=1184
<1184=1189,1188,1185
<1185=1187,1186
<1190=1191
<1191=1198,1197,1192
<1192=1196,1193
<1193=1195,1194
<1199=1200
<1200=1207,1206,1201
<1201=1205,1202
<1202=1204,1203
<1226=1229,1228,1227
<1229=1230
<1230=1283,1231
<1231=1276,1272,1261,1250,1232
<1232=1233
<1233=1246,1234
<1234=1237,1235
<1235=1236
<1237=1238
<1238=1244,1239
<1239=1242,1240
<1240=1241
<1242=1243
<1244=1245
<1246=1247
<1247=1249,1248
<1250=1251
<1251=1260,1252
<1252=1258,1253
<1253=1256,1254
<1254=1255
<1256=1257
<1258=1259
<1261=1262
<1262=1268,1263
<1263=1266,1264
<1264=1265
<1266=1267
<1268=1269
<1269=1271,1270
<1272=1273
<1273=1275,1274
<1276=1277
<1277=1282,1281,1278
<1278=1280,1279
<1283=1284
<1284=1286,1285
<1286=1288,1287
<1297=1300,1299,1298
<1300=1345,1341,1330,1319,1301
<1301=1302
<1302=1315,1303
<1303=1306,1304
<1304=1305
<1306=1307
<1307=1313,1308
<1308=1311,1309
<1309=1310
<1311=1312
<1313=1314
<1315=1316
<1316=1318,1317
<1319=1320
<1320=1329,1321
<1321=1327,1322
<1322=1325,1323
<1323=1324
<1325=1326
<1327=1328
<1330=1331
<1331=1337,1332
<1332=1335,1333
<1333=1334
<1335=1336
<1337=1338
<1338=1340,1339
<1341=1342
<1342=1344,1343
<1345=1346
<1346=1351,1350,1347
<1347=1349,1348
<1359=1367,1360
<1360=1364,1361
<1361=1363,1362
<1364=1366,1365
<1367=1424,1415,1402,1393,1384,1380,1376,1372,1368
<1368=1369
<1369=1371,1370
<1372=1373
<1373=1375,1374
<1376=1377
<1377=1379,1378
<1380=1381
<1381=1383,1382
<1384=1385
<1385=1391,1386
<1386=1389,1387
<1387=1388
<1389=1390
<1391=1392
<1393=1394
<1394=1398,1395
<1395=1396
<1396=1397
<1398=1399
<1399=1401,1400
<1402=1403
<1403=1412,1404
<1404=1410,1405
<1405=1408,1406
<1406=1407
<1408=1409
<1410=1411
<1412=1414,1413
<1415=1416
<1416=1420,1417
<1417=1418
<1418=1419
<1420=1421
<1421=1423,1422
<1424=1425
<1425=1427,1426
<1445=1457,1456,1446
<1446=1453,1450,1447
<1447=1449,1448
<1450=1452,1451
<1453=1455,1454
<1457=1462,1458
<1458=1459
<1459=1461,1460
<1462=1463
<1463=1465,1464
<1474=1480,1479,1475
<1475=1476
<1476=1478,1477
<1480=1669,1662,1652,1481
<1481=1638,1488,1482
<1482=1483
<1483=1484
<1484=1485
<1485=1487,1486
<1488=1627,1617,1608,1599,1507,1489
<1489=1495,1490
<1490=1491
<1491=1492
<1492=1494,1493
<1495=1496
<1496=1498,1497
<1498=1506,1499
<1499=1501,1500
<1501=1503,1502
<1503=1505,1504
<1507=1559,1514,1508
<1508=1509
<1509=1510
<1510=1511
<1511=1513,1512
<1514=1515
<1515=1547,1542,1516
<1516=1517
<1517=1530,1518
<1518=1526,1519
<1519=1520
<1520=1522,1521
<1522=1523
<1523=1525,1524
<1526=1527
<1527=1529,1528
<1530=1531
<1531=1533,1532
<1533=1541,1534
<1534=1536,1535
<1536=1538,1537
<1538=1540,1539
<1542=1543
<1543=1544
<1544=1546,1545
<1547=1548
<1548=1552,1549
<1549=1551,1550
<1552=1554,1553
<1554=1556,1555
<1556=1558,1557
<1559=1560
<1560=1590,1561
<1561=1581,1562
<1562=1572,1563
<1563=1569,1564
<1564=1566,1565
<1566=1568,1567
<1569=1571,1570
<1572=1578,1573
<1573=1575,1574
<1575=1577,1576
<1578=1580,1579
<1581=1587,1582
<1582=1584,1583
<1584=1586,1585
<1587=1589,1588
<1590=1596,1591
<1591=1593,1592
<1593=1595,1594
<1596=1598,1597
<1599=1600
<1600=1607,1606,1601
<1601=1605,1602
<1602=1604,1603
<1608=1609
<1609=1616,1615,1610
<1610=1614,1611
<1611=1613,1612
<1617=1618
<1618=1626,1625,1619
<1619=1624,1620
<1620=1622,1621
<1622=1623
<1627=1628
<1628=1637,1636,1629
<1629=1635,1630
<1630=1632,1631
<1632=1634,1633
<1638=1639
<1639=1647,1640
<1640=1642,1641
<1642=1644,1643
<1644=1646,1645
<1647=1649,1648
<1649=1651,1650
<1652=1653
<1653=1661,1660,1654
<1654=1659,1655
<1655=1657,1656
<1657=1658
<1662=1663
<1663=1667,1664
<1664=1665
<1665=1666
<1667=1668
<1669=1671,1670
<1671=1672
<1672=1679,1673
<1673=1675,1674
<1675=1676
<1676=1678,1677
<1714=1717,1716,1715
<1717=1922,1915,1908,1893,1880,1867,1856,1845,1832,1819,1804,1799,1718
<1718=1797,1719
<1719=1784,1777,1764,1753,1740,1725,1720
<1720=1721
<1721=1723,1722
<1723=1724
<1725=1726
<1726=1738,1727
<1727=1734,1730,1728
<1728=1729
<1730=1731
<1731=1733,1732
<1734=1735
<1735=1737,1736
<1738=1739
<1740=1741
<1741=1751,1742
<1742=1749,1745,1743
<1743=1744
<1745=1746
<1746=1748,1747
<1749=1750
<1751=1752
<1753=1754
<1754=1762,1755
<1755=1760,1758,1756
<1756=1757
<1758=1759
<1760=1761
<1762=1763
<1764=1765
<1765=1775,1766
<1766=1771,1769,1767
<1767=1768
<1769=1770
<1771=1772
<1772=1774,1773
<1775=1776
<1777=1778
<1778=1782,1779
<1779=1780
<1780=1781
<1782=1783
<1784=1785
<1785=1795,1786
<1786=1793,1791,1789,1787
<1787=1788
<1789=1790
<1791=1792
<1793=1794
<1795=1796
<1797=1798
<1799=1800
<1800=1802,1801
<1802=1803
<1804=1805
<1805=1817,1806
<1806=1813,1809,1807
<1807=1808
<1809=1810
<1810=1812,1811
<1813=1814
<1814=1816,1815
<1817=1818
<1819=1820
<1820=1830,1821
<1821=1826,1824,1822
<1822=1823
<1824=1825
<1826=1827
<1827=1829,1828
<1830=1831
<1832=1833
<1833=1843,1834
<1834=1839,1837,1835
<1835=1836
<1837=1838
<1839=1840
<1840=1842,1841
<1843=1844
<1845=1846
<1846=1854,1847
<1847=1852,1850,1848
<1848=1849
<1850=1851
<1852=1853
<1854=1855
<1856=1857
<1857=1865,1858
<1858=1863,1861,1859
<1859=1860
<1861=1862
<1863=1864
<1865=1866
<1867=1868
<1868=1878,1869
<1869=1876,1872,1870
<1870=1871
<1872=1873
<1873=1875,1874
<1876=1877
<1878=1879
<1880=1881
<1881=1891,1882
<1882=1889,1885,1883
<1883=1884
<1885=1886
<1886=1888,1887
<1889=1890
<1891=1892
<1893=1894
<1894=1906,1895
<1895=1902,1898,1896
<1896=1897
<1898=1899
<1899=1901,1900
<1902=1903
<1903=1905,1904
<1906=1907
<1908=1909
<1909=1913,1910
<1910=1911
<1911=1912
<1913=1914
<1915=1916
<1916=1920,1917
<1917=1918
<1918=1919
<1920=1921
<1922=1931,1923
<1923=1930,1929,1924
<1924=1928,1925
<1925=1927,1926
<1931=1938,1937,1932
<1932=1936,1933
<1933=1935,1934
