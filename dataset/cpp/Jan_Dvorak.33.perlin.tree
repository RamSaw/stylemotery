>3	FunctionDef	Perlin 
>4	ParameterList	float arg
>5	Parameter	 
>6	Identifier	arg
>7	ParameterType	float
>8	ReturnType	float
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	CallExpression	lerp ( sx , u , v )
>12	ArgumentList	sx
>13	Argument	v
>14	Identifier	v
>15	Argument	u
>16	Identifier	u
>17	Argument	sx
>18	Identifier	sx
>19	Callee	lerp
>20	Identifier	lerp
>21	ExpressionStatement	 
>22	AssignmentExpr	v = rx1 * g1 [ p [ bx1 ] ]
>23	MultiplicativeExpression	rx1 * g1 [ p [ bx1 ] ]
>24	ArrayIndexing	g1 [ p [ bx1 ] ]
>25	ArrayIndexing	p [ bx1 ]
>26	Identifier	bx1
>27	Identifier	p
>28	Identifier	g1
>29	Identifier	rx1
>30	Identifier	v
>31	ExpressionStatement	 
>32	AssignmentExpr	u = rx0 * g1 [ p [ bx0 ] ]
>33	MultiplicativeExpression	rx0 * g1 [ p [ bx0 ] ]
>34	ArrayIndexing	g1 [ p [ bx0 ] ]
>35	ArrayIndexing	p [ bx0 ]
>36	Identifier	bx0
>37	Identifier	p
>38	Identifier	g1
>39	Identifier	rx0
>40	Identifier	u
>41	ExpressionStatement	 
>42	AssignmentExpr	sx = s_curve ( rx0 )
>43	CallExpression	s_curve ( rx0 )
>44	ArgumentList	rx0
>45	Argument	rx0
>46	Identifier	rx0
>47	Callee	s_curve
>48	Identifier	s_curve
>49	Identifier	sx
>50	ExpressionStatement	 
>51	CallExpression	setup ( 0 , bx0 , bx1 , rx0 , rx1 )
>52	ArgumentList	0
>53	Argument	rx1
>54	Identifier	rx1
>55	Argument	rx0
>56	Identifier	rx0
>57	Argument	bx1
>58	Identifier	bx1
>59	Argument	bx0
>60	Identifier	bx0
>61	Argument	0
>62	PrimaryExpression	0
>63	Callee	setup
>64	Identifier	setup
>65	IfStatement	if ( mStart )
>66	CompoundStatement	 
>67	ExpressionStatement	 
>68	CallExpression	init ( )
>69	ArgumentList	 
>70	Callee	init
>71	Identifier	init
>72	ExpressionStatement	 
>73	AssignmentExpr	mStart = false
>74	Identifier	false
>75	Identifier	mStart
>76	ExpressionStatement	 
>77	CallExpression	srand ( mSeed )
>78	ArgumentList	mSeed
>79	Argument	mSeed
>80	Identifier	mSeed
>81	Callee	srand
>82	Identifier	srand
>83	Condition	 
>84	Identifier	mStart
>85	ExpressionStatement	 
>86	AssignmentExpr	vec [ 0 ] = arg
>87	Identifier	arg
>88	ArrayIndexing	vec [ 0 ]
>89	PrimaryExpression	0
>90	Identifier	vec
>91	IdentifierDeclStatement	 
>92	IdentifierDecl	vec [ 1 ]
>93	PrimaryExpression	1
>94	Identifier	vec
>95	IdentifierDeclType	float [ 1 ]
>96	IdentifierDecl	v
>97	Identifier	v
>98	IdentifierDeclType	float
>99	IdentifierDecl	u
>100	Identifier	u
>101	IdentifierDeclType	float
>102	IdentifierDecl	t
>103	Identifier	t
>104	IdentifierDeclType	float
>105	IdentifierDecl	sx
>106	Identifier	sx
>107	IdentifierDeclType	float
>108	IdentifierDecl	rx1
>109	Identifier	rx1
>110	IdentifierDeclType	float
>111	IdentifierDecl	rx0
>112	Identifier	rx0
>113	IdentifierDeclType	float
>114	IdentifierDeclStatement	 
>115	IdentifierDecl	bx1
>116	Identifier	bx1
>117	IdentifierDeclType	int
>118	IdentifierDecl	bx0
>119	Identifier	bx0
>120	IdentifierDeclType	int
>149	FunctionDef	Perlin 
>150	ParameterList	float vec [ 2 ]
>151	Parameter	 
>152	Identifier	vec
>153	ParameterType	float [ 2 ]
>154	ReturnType	float
>155	CompoundStatement	 
>156	ReturnStatement	 
>157	CallExpression	lerp ( sy , a , b )
>158	ArgumentList	sy
>159	Argument	b
>160	Identifier	b
>161	Argument	a
>162	Identifier	a
>163	Argument	sy
>164	Identifier	sy
>165	Callee	lerp
>166	Identifier	lerp
>167	ExpressionStatement	 
>168	AssignmentExpr	b = lerp ( sx , u , v )
>169	CallExpression	lerp ( sx , u , v )
>170	ArgumentList	sx
>171	Argument	v
>172	Identifier	v
>173	Argument	u
>174	Identifier	u
>175	Argument	sx
>176	Identifier	sx
>177	Callee	lerp
>178	Identifier	lerp
>179	Identifier	b
>180	ExpressionStatement	 
>181	AssignmentExpr	v = at2 ( rx1 , ry1 )
>182	CallExpression	at2 ( rx1 , ry1 )
>183	ArgumentList	rx1
>184	Argument	ry1
>185	Identifier	ry1
>186	Argument	rx1
>187	Identifier	rx1
>188	Callee	at2
>189	Identifier	at2
>190	Identifier	v
>191	ExpressionStatement	 
>192	AssignmentExpr	q = g2 [ b11 ]
>193	ArrayIndexing	g2 [ b11 ]
>194	Identifier	b11
>195	Identifier	g2
>196	Identifier	q
>197	ExpressionStatement	 
>198	AssignmentExpr	u = at2 ( rx0 , ry1 )
>199	CallExpression	at2 ( rx0 , ry1 )
>200	ArgumentList	rx0
>201	Argument	ry1
>202	Identifier	ry1
>203	Argument	rx0
>204	Identifier	rx0
>205	Callee	at2
>206	Identifier	at2
>207	Identifier	u
>208	ExpressionStatement	 
>209	AssignmentExpr	q = g2 [ b01 ]
>210	ArrayIndexing	g2 [ b01 ]
>211	Identifier	b01
>212	Identifier	g2
>213	Identifier	q
>214	ExpressionStatement	 
>215	AssignmentExpr	a = lerp ( sx , u , v )
>216	CallExpression	lerp ( sx , u , v )
>217	ArgumentList	sx
>218	Argument	v
>219	Identifier	v
>220	Argument	u
>221	Identifier	u
>222	Argument	sx
>223	Identifier	sx
>224	Callee	lerp
>225	Identifier	lerp
>226	Identifier	a
>227	ExpressionStatement	 
>228	AssignmentExpr	v = at2 ( rx1 , ry0 )
>229	CallExpression	at2 ( rx1 , ry0 )
>230	ArgumentList	rx1
>231	Argument	ry0
>232	Identifier	ry0
>233	Argument	rx1
>234	Identifier	rx1
>235	Callee	at2
>236	Identifier	at2
>237	Identifier	v
>238	ExpressionStatement	 
>239	AssignmentExpr	q = g2 [ b10 ]
>240	ArrayIndexing	g2 [ b10 ]
>241	Identifier	b10
>242	Identifier	g2
>243	Identifier	q
>244	ExpressionStatement	 
>245	AssignmentExpr	u = at2 ( rx0 , ry0 )
>246	CallExpression	at2 ( rx0 , ry0 )
>247	ArgumentList	rx0
>248	Argument	ry0
>249	Identifier	ry0
>250	Argument	rx0
>251	Identifier	rx0
>252	Callee	at2
>253	Identifier	at2
>254	Identifier	u
>255	ExpressionStatement	 
>256	AssignmentExpr	q = g2 [ b00 ]
>257	ArrayIndexing	g2 [ b00 ]
>258	Identifier	b00
>259	Identifier	g2
>260	Identifier	q
>261	Statement	 
>262	Statement	 
>263	Statement	 
>264	Statement	 
>265	Statement	 
>266	Statement	 
>267	Statement	 
>268	Statement	 
>269	Statement	 
>270	Statement	 
>271	Statement	 
>272	Statement	 
>273	Statement	 
>274	Statement	 
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	ExpressionStatement	 
>284	AssignmentExpr	sy = s_curve ( ry0 )
>285	CallExpression	s_curve ( ry0 )
>286	ArgumentList	ry0
>287	Argument	ry0
>288	Identifier	ry0
>289	Callee	s_curve
>290	Identifier	s_curve
>291	Identifier	sy
>292	ExpressionStatement	 
>293	AssignmentExpr	sx = s_curve ( rx0 )
>294	CallExpression	s_curve ( rx0 )
>295	ArgumentList	rx0
>296	Argument	rx0
>297	Identifier	rx0
>298	Callee	s_curve
>299	Identifier	s_curve
>300	Identifier	sx
>301	ExpressionStatement	 
>302	AssignmentExpr	b11 = p [ j + by1 ]
>303	ArrayIndexing	p [ j + by1 ]
>304	AdditiveExpression	j + by1
>305	Identifier	by1
>306	Identifier	j
>307	Identifier	p
>308	Identifier	b11
>309	ExpressionStatement	 
>310	AssignmentExpr	b01 = p [ i + by1 ]
>311	ArrayIndexing	p [ i + by1 ]
>312	AdditiveExpression	i + by1
>313	Identifier	by1
>314	Identifier	i
>315	Identifier	p
>316	Identifier	b01
>317	ExpressionStatement	 
>318	AssignmentExpr	b10 = p [ j + by0 ]
>319	ArrayIndexing	p [ j + by0 ]
>320	AdditiveExpression	j + by0
>321	Identifier	by0
>322	Identifier	j
>323	Identifier	p
>324	Identifier	b10
>325	ExpressionStatement	 
>326	AssignmentExpr	b00 = p [ i + by0 ]
>327	ArrayIndexing	p [ i + by0 ]
>328	AdditiveExpression	i + by0
>329	Identifier	by0
>330	Identifier	i
>331	Identifier	p
>332	Identifier	b00
>333	ExpressionStatement	 
>334	AssignmentExpr	j = p [ bx1 ]
>335	ArrayIndexing	p [ bx1 ]
>336	Identifier	bx1
>337	Identifier	p
>338	Identifier	j
>339	ExpressionStatement	 
>340	AssignmentExpr	i = p [ bx0 ]
>341	ArrayIndexing	p [ bx0 ]
>342	Identifier	bx0
>343	Identifier	p
>344	Identifier	i
>345	ExpressionStatement	 
>346	CallExpression	setup ( 1 , by0 , by1 , ry0 , ry1 )
>347	ArgumentList	1
>348	Argument	ry1
>349	Identifier	ry1
>350	Argument	ry0
>351	Identifier	ry0
>352	Argument	by1
>353	Identifier	by1
>354	Argument	by0
>355	Identifier	by0
>356	Argument	1
>357	PrimaryExpression	1
>358	Callee	setup
>359	Identifier	setup
>360	ExpressionStatement	 
>361	CallExpression	setup ( 0 , bx0 , bx1 , rx0 , rx1 )
>362	ArgumentList	0
>363	Argument	rx1
>364	Identifier	rx1
>365	Argument	rx0
>366	Identifier	rx0
>367	Argument	bx1
>368	Identifier	bx1
>369	Argument	bx0
>370	Identifier	bx0
>371	Argument	0
>372	PrimaryExpression	0
>373	Callee	setup
>374	Identifier	setup
>375	IfStatement	if ( mStart )
>376	CompoundStatement	 
>377	ExpressionStatement	 
>378	CallExpression	init ( )
>379	ArgumentList	 
>380	Callee	init
>381	Identifier	init
>382	ExpressionStatement	 
>383	AssignmentExpr	mStart = false
>384	Identifier	false
>385	Identifier	mStart
>386	ExpressionStatement	 
>387	CallExpression	srand ( mSeed )
>388	ArgumentList	mSeed
>389	Argument	mSeed
>390	Identifier	mSeed
>391	Callee	srand
>392	Identifier	srand
>393	Condition	 
>394	Identifier	mStart
>395	IdentifierDeclStatement	 
>396	IdentifierDecl	j
>397	Identifier	j
>398	IdentifierDeclType	int
>399	IdentifierDecl	i
>400	Identifier	i
>401	IdentifierDeclType	int
>402	IdentifierDeclStatement	 
>403	IdentifierDecl	v
>404	Identifier	v
>405	IdentifierDeclType	float
>406	IdentifierDecl	u
>407	Identifier	u
>408	IdentifierDeclType	float
>409	IdentifierDecl	t
>410	Identifier	t
>411	IdentifierDeclType	float
>412	IdentifierDecl	b
>413	Identifier	b
>414	IdentifierDeclType	float
>415	IdentifierDecl	a
>416	Identifier	a
>417	IdentifierDeclType	float
>418	IdentifierDecl	sy
>419	Identifier	sy
>420	IdentifierDeclType	float
>421	IdentifierDecl	sx
>422	Identifier	sx
>423	IdentifierDeclType	float
>424	IdentifierDecl	* q
>425	Identifier	q
>426	IdentifierDeclType	float *
>427	IdentifierDecl	ry1
>428	Identifier	ry1
>429	IdentifierDeclType	float
>430	IdentifierDecl	ry0
>431	Identifier	ry0
>432	IdentifierDeclType	float
>433	IdentifierDecl	rx1
>434	Identifier	rx1
>435	IdentifierDeclType	float
>436	IdentifierDecl	rx0
>437	Identifier	rx0
>438	IdentifierDeclType	float
>439	IdentifierDeclStatement	 
>440	IdentifierDecl	b11
>441	Identifier	b11
>442	IdentifierDeclType	int
>443	IdentifierDecl	b01
>444	Identifier	b01
>445	IdentifierDeclType	int
>446	IdentifierDecl	b10
>447	Identifier	b10
>448	IdentifierDeclType	int
>449	IdentifierDecl	b00
>450	Identifier	b00
>451	IdentifierDeclType	int
>452	IdentifierDecl	by1
>453	Identifier	by1
>454	IdentifierDeclType	int
>455	IdentifierDecl	by0
>456	Identifier	by0
>457	IdentifierDeclType	int
>458	IdentifierDecl	bx1
>459	Identifier	bx1
>460	IdentifierDeclType	int
>461	IdentifierDecl	bx0
>462	Identifier	bx0
>463	IdentifierDeclType	int
>510	FunctionDef	Perlin 
>511	ParameterList	float vec [ 3 ]
>512	Parameter	 
>513	Identifier	vec
>514	ParameterType	float [ 3 ]
>515	ReturnType	float
>516	CompoundStatement	 
>517	ReturnStatement	 
>518	CallExpression	lerp ( sz , c , d )
>519	ArgumentList	sz
>520	Argument	d
>521	Identifier	d
>522	Argument	c
>523	Identifier	c
>524	Argument	sz
>525	Identifier	sz
>526	Callee	lerp
>527	Identifier	lerp
>528	ExpressionStatement	 
>529	AssignmentExpr	d = lerp ( sy , a , b )
>530	CallExpression	lerp ( sy , a , b )
>531	ArgumentList	sy
>532	Argument	b
>533	Identifier	b
>534	Argument	a
>535	Identifier	a
>536	Argument	sy
>537	Identifier	sy
>538	Callee	lerp
>539	Identifier	lerp
>540	Identifier	d
>541	ExpressionStatement	 
>542	AssignmentExpr	b = lerp ( t , u , v )
>543	CallExpression	lerp ( t , u , v )
>544	ArgumentList	t
>545	Argument	v
>546	Identifier	v
>547	Argument	u
>548	Identifier	u
>549	Argument	t
>550	Identifier	t
>551	Callee	lerp
>552	Identifier	lerp
>553	Identifier	b
>554	ExpressionStatement	 
>555	AssignmentExpr	v = at3 ( rx1 , ry1 , rz1 )
>556	CallExpression	at3 ( rx1 , ry1 , rz1 )
>557	ArgumentList	rx1
>558	Argument	rz1
>559	Identifier	rz1
>560	Argument	ry1
>561	Identifier	ry1
>562	Argument	rx1
>563	Identifier	rx1
>564	Callee	at3
>565	Identifier	at3
>566	Identifier	v
>567	ExpressionStatement	 
>568	AssignmentExpr	q = g3 [ b11 + bz1 ]
>569	ArrayIndexing	g3 [ b11 + bz1 ]
>570	AdditiveExpression	b11 + bz1
>571	Identifier	bz1
>572	Identifier	b11
>573	Identifier	g3
>574	Identifier	q
>575	ExpressionStatement	 
>576	AssignmentExpr	u = at3 ( rx0 , ry1 , rz1 )
>577	CallExpression	at3 ( rx0 , ry1 , rz1 )
>578	ArgumentList	rx0
>579	Argument	rz1
>580	Identifier	rz1
>581	Argument	ry1
>582	Identifier	ry1
>583	Argument	rx0
>584	Identifier	rx0
>585	Callee	at3
>586	Identifier	at3
>587	Identifier	u
>588	ExpressionStatement	 
>589	AssignmentExpr	q = g3 [ b01 + bz1 ]
>590	ArrayIndexing	g3 [ b01 + bz1 ]
>591	AdditiveExpression	b01 + bz1
>592	Identifier	bz1
>593	Identifier	b01
>594	Identifier	g3
>595	Identifier	q
>596	ExpressionStatement	 
>597	AssignmentExpr	a = lerp ( t , u , v )
>598	CallExpression	lerp ( t , u , v )
>599	ArgumentList	t
>600	Argument	v
>601	Identifier	v
>602	Argument	u
>603	Identifier	u
>604	Argument	t
>605	Identifier	t
>606	Callee	lerp
>607	Identifier	lerp
>608	Identifier	a
>609	ExpressionStatement	 
>610	AssignmentExpr	v = at3 ( rx1 , ry0 , rz1 )
>611	CallExpression	at3 ( rx1 , ry0 , rz1 )
>612	ArgumentList	rx1
>613	Argument	rz1
>614	Identifier	rz1
>615	Argument	ry0
>616	Identifier	ry0
>617	Argument	rx1
>618	Identifier	rx1
>619	Callee	at3
>620	Identifier	at3
>621	Identifier	v
>622	ExpressionStatement	 
>623	AssignmentExpr	q = g3 [ b10 + bz1 ]
>624	ArrayIndexing	g3 [ b10 + bz1 ]
>625	AdditiveExpression	b10 + bz1
>626	Identifier	bz1
>627	Identifier	b10
>628	Identifier	g3
>629	Identifier	q
>630	ExpressionStatement	 
>631	AssignmentExpr	u = at3 ( rx0 , ry0 , rz1 )
>632	CallExpression	at3 ( rx0 , ry0 , rz1 )
>633	ArgumentList	rx0
>634	Argument	rz1
>635	Identifier	rz1
>636	Argument	ry0
>637	Identifier	ry0
>638	Argument	rx0
>639	Identifier	rx0
>640	Callee	at3
>641	Identifier	at3
>642	Identifier	u
>643	ExpressionStatement	 
>644	AssignmentExpr	q = g3 [ b00 + bz1 ]
>645	ArrayIndexing	g3 [ b00 + bz1 ]
>646	AdditiveExpression	b00 + bz1
>647	Identifier	bz1
>648	Identifier	b00
>649	Identifier	g3
>650	Identifier	q
>651	ExpressionStatement	 
>652	AssignmentExpr	c = lerp ( sy , a , b )
>653	CallExpression	lerp ( sy , a , b )
>654	ArgumentList	sy
>655	Argument	b
>656	Identifier	b
>657	Argument	a
>658	Identifier	a
>659	Argument	sy
>660	Identifier	sy
>661	Callee	lerp
>662	Identifier	lerp
>663	Identifier	c
>664	ExpressionStatement	 
>665	AssignmentExpr	b = lerp ( t , u , v )
>666	CallExpression	lerp ( t , u , v )
>667	ArgumentList	t
>668	Argument	v
>669	Identifier	v
>670	Argument	u
>671	Identifier	u
>672	Argument	t
>673	Identifier	t
>674	Callee	lerp
>675	Identifier	lerp
>676	Identifier	b
>677	ExpressionStatement	 
>678	AssignmentExpr	v = at3 ( rx1 , ry1 , rz0 )
>679	CallExpression	at3 ( rx1 , ry1 , rz0 )
>680	ArgumentList	rx1
>681	Argument	rz0
>682	Identifier	rz0
>683	Argument	ry1
>684	Identifier	ry1
>685	Argument	rx1
>686	Identifier	rx1
>687	Callee	at3
>688	Identifier	at3
>689	Identifier	v
>690	ExpressionStatement	 
>691	AssignmentExpr	q = g3 [ b11 + bz0 ]
>692	ArrayIndexing	g3 [ b11 + bz0 ]
>693	AdditiveExpression	b11 + bz0
>694	Identifier	bz0
>695	Identifier	b11
>696	Identifier	g3
>697	Identifier	q
>698	ExpressionStatement	 
>699	AssignmentExpr	u = at3 ( rx0 , ry1 , rz0 )
>700	CallExpression	at3 ( rx0 , ry1 , rz0 )
>701	ArgumentList	rx0
>702	Argument	rz0
>703	Identifier	rz0
>704	Argument	ry1
>705	Identifier	ry1
>706	Argument	rx0
>707	Identifier	rx0
>708	Callee	at3
>709	Identifier	at3
>710	Identifier	u
>711	ExpressionStatement	 
>712	AssignmentExpr	q = g3 [ b01 + bz0 ]
>713	ArrayIndexing	g3 [ b01 + bz0 ]
>714	AdditiveExpression	b01 + bz0
>715	Identifier	bz0
>716	Identifier	b01
>717	Identifier	g3
>718	Identifier	q
>719	ExpressionStatement	 
>720	AssignmentExpr	a = lerp ( t , u , v )
>721	CallExpression	lerp ( t , u , v )
>722	ArgumentList	t
>723	Argument	v
>724	Identifier	v
>725	Argument	u
>726	Identifier	u
>727	Argument	t
>728	Identifier	t
>729	Callee	lerp
>730	Identifier	lerp
>731	Identifier	a
>732	ExpressionStatement	 
>733	AssignmentExpr	v = at3 ( rx1 , ry0 , rz0 )
>734	CallExpression	at3 ( rx1 , ry0 , rz0 )
>735	ArgumentList	rx1
>736	Argument	rz0
>737	Identifier	rz0
>738	Argument	ry0
>739	Identifier	ry0
>740	Argument	rx1
>741	Identifier	rx1
>742	Callee	at3
>743	Identifier	at3
>744	Identifier	v
>745	ExpressionStatement	 
>746	AssignmentExpr	q = g3 [ b10 + bz0 ]
>747	ArrayIndexing	g3 [ b10 + bz0 ]
>748	AdditiveExpression	b10 + bz0
>749	Identifier	bz0
>750	Identifier	b10
>751	Identifier	g3
>752	Identifier	q
>753	ExpressionStatement	 
>754	AssignmentExpr	u = at3 ( rx0 , ry0 , rz0 )
>755	CallExpression	at3 ( rx0 , ry0 , rz0 )
>756	ArgumentList	rx0
>757	Argument	rz0
>758	Identifier	rz0
>759	Argument	ry0
>760	Identifier	ry0
>761	Argument	rx0
>762	Identifier	rx0
>763	Callee	at3
>764	Identifier	at3
>765	Identifier	u
>766	ExpressionStatement	 
>767	AssignmentExpr	q = g3 [ b00 + bz0 ]
>768	ArrayIndexing	g3 [ b00 + bz0 ]
>769	AdditiveExpression	b00 + bz0
>770	Identifier	bz0
>771	Identifier	b00
>772	Identifier	g3
>773	Identifier	q
>774	Statement	 
>775	Statement	 
>776	Statement	 
>777	Statement	 
>778	Statement	 
>779	Statement	 
>780	Statement	 
>781	Statement	 
>782	Statement	 
>783	Statement	 
>784	Statement	 
>785	Statement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	Statement	 
>794	Statement	 
>795	Statement	 
>796	Statement	 
>797	Statement	 
>798	Statement	 
>799	Statement	 
>800	Statement	 
>801	Statement	 
>802	Statement	 
>803	Statement	 
>804	Statement	 
>805	ExpressionStatement	 
>806	AssignmentExpr	sz = s_curve ( rz0 )
>807	CallExpression	s_curve ( rz0 )
>808	ArgumentList	rz0
>809	Argument	rz0
>810	Identifier	rz0
>811	Callee	s_curve
>812	Identifier	s_curve
>813	Identifier	sz
>814	ExpressionStatement	 
>815	AssignmentExpr	sy = s_curve ( ry0 )
>816	CallExpression	s_curve ( ry0 )
>817	ArgumentList	ry0
>818	Argument	ry0
>819	Identifier	ry0
>820	Callee	s_curve
>821	Identifier	s_curve
>822	Identifier	sy
>823	ExpressionStatement	 
>824	AssignmentExpr	t = s_curve ( rx0 )
>825	CallExpression	s_curve ( rx0 )
>826	ArgumentList	rx0
>827	Argument	rx0
>828	Identifier	rx0
>829	Callee	s_curve
>830	Identifier	s_curve
>831	Identifier	t
>832	ExpressionStatement	 
>833	AssignmentExpr	b11 = p [ j + by1 ]
>834	ArrayIndexing	p [ j + by1 ]
>835	AdditiveExpression	j + by1
>836	Identifier	by1
>837	Identifier	j
>838	Identifier	p
>839	Identifier	b11
>840	ExpressionStatement	 
>841	AssignmentExpr	b01 = p [ i + by1 ]
>842	ArrayIndexing	p [ i + by1 ]
>843	AdditiveExpression	i + by1
>844	Identifier	by1
>845	Identifier	i
>846	Identifier	p
>847	Identifier	b01
>848	ExpressionStatement	 
>849	AssignmentExpr	b10 = p [ j + by0 ]
>850	ArrayIndexing	p [ j + by0 ]
>851	AdditiveExpression	j + by0
>852	Identifier	by0
>853	Identifier	j
>854	Identifier	p
>855	Identifier	b10
>856	ExpressionStatement	 
>857	AssignmentExpr	b00 = p [ i + by0 ]
>858	ArrayIndexing	p [ i + by0 ]
>859	AdditiveExpression	i + by0
>860	Identifier	by0
>861	Identifier	i
>862	Identifier	p
>863	Identifier	b00
>864	ExpressionStatement	 
>865	AssignmentExpr	j = p [ bx1 ]
>866	ArrayIndexing	p [ bx1 ]
>867	Identifier	bx1
>868	Identifier	p
>869	Identifier	j
>870	ExpressionStatement	 
>871	AssignmentExpr	i = p [ bx0 ]
>872	ArrayIndexing	p [ bx0 ]
>873	Identifier	bx0
>874	Identifier	p
>875	Identifier	i
>876	ExpressionStatement	 
>877	CallExpression	setup ( 2 , bz0 , bz1 , rz0 , rz1 )
>878	ArgumentList	2
>879	Argument	rz1
>880	Identifier	rz1
>881	Argument	rz0
>882	Identifier	rz0
>883	Argument	bz1
>884	Identifier	bz1
>885	Argument	bz0
>886	Identifier	bz0
>887	Argument	2
>888	PrimaryExpression	2
>889	Callee	setup
>890	Identifier	setup
>891	ExpressionStatement	 
>892	CallExpression	setup ( 1 , by0 , by1 , ry0 , ry1 )
>893	ArgumentList	1
>894	Argument	ry1
>895	Identifier	ry1
>896	Argument	ry0
>897	Identifier	ry0
>898	Argument	by1
>899	Identifier	by1
>900	Argument	by0
>901	Identifier	by0
>902	Argument	1
>903	PrimaryExpression	1
>904	Callee	setup
>905	Identifier	setup
>906	ExpressionStatement	 
>907	CallExpression	setup ( 0 , bx0 , bx1 , rx0 , rx1 )
>908	ArgumentList	0
>909	Argument	rx1
>910	Identifier	rx1
>911	Argument	rx0
>912	Identifier	rx0
>913	Argument	bx1
>914	Identifier	bx1
>915	Argument	bx0
>916	Identifier	bx0
>917	Argument	0
>918	PrimaryExpression	0
>919	Callee	setup
>920	Identifier	setup
>921	IfStatement	if ( mStart )
>922	CompoundStatement	 
>923	ExpressionStatement	 
>924	CallExpression	init ( )
>925	ArgumentList	 
>926	Callee	init
>927	Identifier	init
>928	ExpressionStatement	 
>929	AssignmentExpr	mStart = false
>930	Identifier	false
>931	Identifier	mStart
>932	ExpressionStatement	 
>933	CallExpression	srand ( mSeed )
>934	ArgumentList	mSeed
>935	Argument	mSeed
>936	Identifier	mSeed
>937	Callee	srand
>938	Identifier	srand
>939	Condition	 
>940	Identifier	mStart
>941	IdentifierDeclStatement	 
>942	IdentifierDecl	j
>943	Identifier	j
>944	IdentifierDeclType	int
>945	IdentifierDecl	i
>946	Identifier	i
>947	IdentifierDeclType	int
>948	IdentifierDeclStatement	 
>949	IdentifierDecl	v
>950	Identifier	v
>951	IdentifierDeclType	float
>952	IdentifierDecl	u
>953	Identifier	u
>954	IdentifierDeclType	float
>955	IdentifierDecl	t
>956	Identifier	t
>957	IdentifierDeclType	float
>958	IdentifierDecl	d
>959	Identifier	d
>960	IdentifierDeclType	float
>961	IdentifierDecl	c
>962	Identifier	c
>963	IdentifierDeclType	float
>964	IdentifierDecl	b
>965	Identifier	b
>966	IdentifierDeclType	float
>967	IdentifierDecl	a
>968	Identifier	a
>969	IdentifierDeclType	float
>970	IdentifierDecl	sz
>971	Identifier	sz
>972	IdentifierDeclType	float
>973	IdentifierDecl	sy
>974	Identifier	sy
>975	IdentifierDeclType	float
>976	IdentifierDecl	* q
>977	Identifier	q
>978	IdentifierDeclType	float *
>979	IdentifierDecl	rz1
>980	Identifier	rz1
>981	IdentifierDeclType	float
>982	IdentifierDecl	rz0
>983	Identifier	rz0
>984	IdentifierDeclType	float
>985	IdentifierDecl	ry1
>986	Identifier	ry1
>987	IdentifierDeclType	float
>988	IdentifierDecl	ry0
>989	Identifier	ry0
>990	IdentifierDeclType	float
>991	IdentifierDecl	rx1
>992	Identifier	rx1
>993	IdentifierDeclType	float
>994	IdentifierDecl	rx0
>995	Identifier	rx0
>996	IdentifierDeclType	float
>997	IdentifierDeclStatement	 
>998	IdentifierDecl	b11
>999	Identifier	b11
>1000	IdentifierDeclType	int
>1001	IdentifierDecl	b01
>1002	Identifier	b01
>1003	IdentifierDeclType	int
>1004	IdentifierDecl	b10
>1005	Identifier	b10
>1006	IdentifierDeclType	int
>1007	IdentifierDecl	b00
>1008	Identifier	b00
>1009	IdentifierDeclType	int
>1010	IdentifierDecl	bz1
>1011	Identifier	bz1
>1012	IdentifierDeclType	int
>1013	IdentifierDecl	bz0
>1014	Identifier	bz0
>1015	IdentifierDeclType	int
>1016	IdentifierDecl	by1
>1017	Identifier	by1
>1018	IdentifierDeclType	int
>1019	IdentifierDecl	by0
>1020	Identifier	by0
>1021	IdentifierDeclType	int
>1022	IdentifierDecl	bx1
>1023	Identifier	bx1
>1024	IdentifierDeclType	int
>1025	IdentifierDecl	bx0
>1026	Identifier	bx0
>1027	IdentifierDeclType	int
>1082	FunctionDef	Perlin 
>1083	ParameterList	float v [ 2 ]
>1084	Parameter	 
>1085	Identifier	v
>1086	ParameterType	float [ 2 ]
>1087	ReturnType	void
>1088	CompoundStatement	 
>1089	ExpressionStatement	 
>1090	AssignmentExpr	v [ 1 ] = v [ 1 ] * s
>1091	MultiplicativeExpression	v [ 1 ] * s
>1092	Identifier	s
>1093	ArrayIndexing	v [ 1 ]
>1094	PrimaryExpression	1
>1095	Identifier	v
>1096	ArrayIndexing	v [ 1 ]
>1097	PrimaryExpression	1
>1098	Identifier	v
>1099	ExpressionStatement	 
>1100	AssignmentExpr	v [ 0 ] = v [ 0 ] * s
>1101	MultiplicativeExpression	v [ 0 ] * s
>1102	Identifier	s
>1103	ArrayIndexing	v [ 0 ]
>1104	PrimaryExpression	0
>1105	Identifier	v
>1106	ArrayIndexing	v [ 0 ]
>1107	PrimaryExpression	0
>1108	Identifier	v
>1109	ExpressionStatement	 
>1110	AssignmentExpr	s = 1.0f / s
>1111	MultiplicativeExpression	1.0f / s
>1112	Identifier	s
>1113	PrimaryExpression	1.0f
>1114	Identifier	s
>1115	ExpressionStatement	 
>1116	AssignmentExpr	s = ( float ) sqrt ( v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ] )
>1117	CastExpression	( float ) sqrt ( v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ] )
>1118	CallExpression	sqrt ( v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ] )
>1119	ArgumentList	v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ]
>1120	Argument	v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ]
>1121	AdditiveExpression	v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ]
>1122	MultiplicativeExpression	v [ 1 ] * v [ 1 ]
>1123	ArrayIndexing	v [ 1 ]
>1124	PrimaryExpression	1
>1125	Identifier	v
>1126	ArrayIndexing	v [ 1 ]
>1127	PrimaryExpression	1
>1128	Identifier	v
>1129	MultiplicativeExpression	v [ 0 ] * v [ 0 ]
>1130	ArrayIndexing	v [ 0 ]
>1131	PrimaryExpression	0
>1132	Identifier	v
>1133	ArrayIndexing	v [ 0 ]
>1134	PrimaryExpression	0
>1135	Identifier	v
>1136	Callee	sqrt
>1137	Identifier	sqrt
>1138	CastTarget	float
>1139	Identifier	s
>1140	IdentifierDeclStatement	 
>1141	IdentifierDecl	s
>1142	Identifier	s
>1143	IdentifierDeclType	float
>1151	FunctionDef	Perlin 
>1152	ParameterList	float v [ 3 ]
>1153	Parameter	 
>1154	Identifier	v
>1155	ParameterType	float [ 3 ]
>1156	ReturnType	void
>1157	CompoundStatement	 
>1158	ExpressionStatement	 
>1159	AssignmentExpr	v [ 2 ] = v [ 2 ] * s
>1160	MultiplicativeExpression	v [ 2 ] * s
>1161	Identifier	s
>1162	ArrayIndexing	v [ 2 ]
>1163	PrimaryExpression	2
>1164	Identifier	v
>1165	ArrayIndexing	v [ 2 ]
>1166	PrimaryExpression	2
>1167	Identifier	v
>1168	ExpressionStatement	 
>1169	AssignmentExpr	v [ 1 ] = v [ 1 ] * s
>1170	MultiplicativeExpression	v [ 1 ] * s
>1171	Identifier	s
>1172	ArrayIndexing	v [ 1 ]
>1173	PrimaryExpression	1
>1174	Identifier	v
>1175	ArrayIndexing	v [ 1 ]
>1176	PrimaryExpression	1
>1177	Identifier	v
>1178	ExpressionStatement	 
>1179	AssignmentExpr	v [ 0 ] = v [ 0 ] * s
>1180	MultiplicativeExpression	v [ 0 ] * s
>1181	Identifier	s
>1182	ArrayIndexing	v [ 0 ]
>1183	PrimaryExpression	0
>1184	Identifier	v
>1185	ArrayIndexing	v [ 0 ]
>1186	PrimaryExpression	0
>1187	Identifier	v
>1188	ExpressionStatement	 
>1189	AssignmentExpr	s = 1.0f / s
>1190	MultiplicativeExpression	1.0f / s
>1191	Identifier	s
>1192	PrimaryExpression	1.0f
>1193	Identifier	s
>1194	ExpressionStatement	 
>1195	AssignmentExpr	s = ( float ) sqrt ( v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ] + v [ 2 ] * v [ 2 ] )
>1196	CastExpression	( float ) sqrt ( v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ] + v [ 2 ] * v [ 2 ] )
>1197	CallExpression	sqrt ( v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ] + v [ 2 ] * v [ 2 ] )
>1198	ArgumentList	v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ] + v [ 2 ] * v [ 2 ]
>1199	Argument	v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ] + v [ 2 ] * v [ 2 ]
>1200	AdditiveExpression	v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ] + v [ 2 ] * v [ 2 ]
>1201	AdditiveExpression	v [ 1 ] * v [ 1 ] + v [ 2 ] * v [ 2 ]
>1202	MultiplicativeExpression	v [ 2 ] * v [ 2 ]
>1203	ArrayIndexing	v [ 2 ]
>1204	PrimaryExpression	2
>1205	Identifier	v
>1206	ArrayIndexing	v [ 2 ]
>1207	PrimaryExpression	2
>1208	Identifier	v
>1209	MultiplicativeExpression	v [ 1 ] * v [ 1 ]
>1210	ArrayIndexing	v [ 1 ]
>1211	PrimaryExpression	1
>1212	Identifier	v
>1213	ArrayIndexing	v [ 1 ]
>1214	PrimaryExpression	1
>1215	Identifier	v
>1216	MultiplicativeExpression	v [ 0 ] * v [ 0 ]
>1217	ArrayIndexing	v [ 0 ]
>1218	PrimaryExpression	0
>1219	Identifier	v
>1220	ArrayIndexing	v [ 0 ]
>1221	PrimaryExpression	0
>1222	Identifier	v
>1223	Callee	sqrt
>1224	Identifier	sqrt
>1225	CastTarget	float
>1226	Identifier	s
>1227	IdentifierDeclStatement	 
>1228	IdentifierDecl	s
>1229	Identifier	s
>1230	IdentifierDeclType	float
>1238	FunctionDef	Perlin 
>1239	ParameterList	 
>1240	ReturnType	void
>1241	CompoundStatement	 
>1242	ForStatement	for ( i = 0 ; i < B + 2 ; i ++ )
>1243	CompoundStatement	 
>1244	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>1245	ExpressionStatement	 
>1246	AssignmentExpr	g3 [ B + i ] [ j ] = g3 [ i ] [ j ]
>1247	ArrayIndexing	g3 [ i ] [ j ]
>1248	Identifier	j
>1249	ArrayIndexing	g3 [ i ]
>1250	Identifier	i
>1251	Identifier	g3
>1252	ArrayIndexing	g3 [ B + i ] [ j ]
>1253	Identifier	j
>1254	ArrayIndexing	g3 [ B + i ]
>1255	AdditiveExpression	B + i
>1256	Identifier	i
>1257	Identifier	B
>1258	Identifier	g3
>1259	IncDecOp	 
>1260	IncDec	++
>1261	Identifier	j
>1262	Condition	 
>1263	RelationalExpression	j < 3
>1264	PrimaryExpression	3
>1265	Identifier	j
>1266	ForInit	 
>1267	AssignmentExpr	j = 0
>1268	PrimaryExpression	0
>1269	Identifier	j
>1270	ForStatement	for ( j = 0 ; j < 2 ; j ++ )
>1271	ExpressionStatement	 
>1272	AssignmentExpr	g2 [ B + i ] [ j ] = g2 [ i ] [ j ]
>1273	ArrayIndexing	g2 [ i ] [ j ]
>1274	Identifier	j
>1275	ArrayIndexing	g2 [ i ]
>1276	Identifier	i
>1277	Identifier	g2
>1278	ArrayIndexing	g2 [ B + i ] [ j ]
>1279	Identifier	j
>1280	ArrayIndexing	g2 [ B + i ]
>1281	AdditiveExpression	B + i
>1282	Identifier	i
>1283	Identifier	B
>1284	Identifier	g2
>1285	IncDecOp	 
>1286	IncDec	++
>1287	Identifier	j
>1288	Condition	 
>1289	RelationalExpression	j < 2
>1290	PrimaryExpression	2
>1291	Identifier	j
>1292	ForInit	 
>1293	AssignmentExpr	j = 0
>1294	PrimaryExpression	0
>1295	Identifier	j
>1296	ExpressionStatement	 
>1297	AssignmentExpr	g1 [ B + i ] = g1 [ i ]
>1298	ArrayIndexing	g1 [ i ]
>1299	Identifier	i
>1300	Identifier	g1
>1301	ArrayIndexing	g1 [ B + i ]
>1302	AdditiveExpression	B + i
>1303	Identifier	i
>1304	Identifier	B
>1305	Identifier	g1
>1306	ExpressionStatement	 
>1307	AssignmentExpr	p [ B + i ] = p [ i ]
>1308	ArrayIndexing	p [ i ]
>1309	Identifier	i
>1310	Identifier	p
>1311	ArrayIndexing	p [ B + i ]
>1312	AdditiveExpression	B + i
>1313	Identifier	i
>1314	Identifier	B
>1315	Identifier	p
>1316	IncDecOp	 
>1317	IncDec	++
>1318	Identifier	i
>1319	Condition	 
>1320	RelationalExpression	i < B + 2
>1321	AdditiveExpression	B + 2
>1322	PrimaryExpression	2
>1323	Identifier	B
>1324	Identifier	i
>1325	ForInit	 
>1326	AssignmentExpr	i = 0
>1327	PrimaryExpression	0
>1328	Identifier	i
>1329	WhileStatement	while ( -- i )
>1330	CompoundStatement	 
>1331	ExpressionStatement	 
>1332	AssignmentExpr	p [ j ] = k
>1333	Identifier	k
>1334	ArrayIndexing	p [ j ]
>1335	Identifier	j
>1336	Identifier	p
>1337	ExpressionStatement	 
>1338	AssignmentExpr	p [ i ] = p [ j = rand ( ) % B ]
>1339	ArrayIndexing	p [ j = rand ( ) % B ]
>1340	AssignmentExpr	j = rand ( ) % B
>1341	MultiplicativeExpression	rand ( ) % B
>1342	Identifier	B
>1343	CallExpression	rand ( )
>1344	ArgumentList	 
>1345	Callee	rand
>1346	Identifier	rand
>1347	Identifier	j
>1348	Identifier	p
>1349	ArrayIndexing	p [ i ]
>1350	Identifier	i
>1351	Identifier	p
>1352	ExpressionStatement	 
>1353	AssignmentExpr	k = p [ i ]
>1354	ArrayIndexing	p [ i ]
>1355	Identifier	i
>1356	Identifier	p
>1357	Identifier	k
>1358	Condition	 
>1359	UnaryExpression	-- i
>1360	Identifier	i
>1361	IncDec	--
>1362	ForStatement	for ( i = 0 ; i < B ; i ++ )
>1363	CompoundStatement	 
>1364	ExpressionStatement	 
>1365	CallExpression	normalize3 ( g3 [ i ] )
>1366	ArgumentList	g3 [ i ]
>1367	Argument	g3 [ i ]
>1368	ArrayIndexing	g3 [ i ]
>1369	Identifier	i
>1370	Identifier	g3
>1371	Callee	normalize3
>1372	Identifier	normalize3
>1373	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>1374	ExpressionStatement	 
>1375	AssignmentExpr	g3 [ i ] [ j ] = ( float ) ( ( rand ( ) % ( B + B ) ) - B ) / B
>1376	MultiplicativeExpression	( float ) ( ( rand ( ) % ( B + B ) ) - B ) / B
>1377	Identifier	B
>1378	CastExpression	( float ) ( ( rand ( ) % ( B + B ) ) - B )
>1379	AdditiveExpression	( rand ( ) % ( B + B ) ) - B
>1380	Identifier	B
>1381	MultiplicativeExpression	rand ( ) % ( B + B )
>1382	AdditiveExpression	B + B
>1383	Identifier	B
>1384	Identifier	B
>1385	CallExpression	rand ( )
>1386	ArgumentList	 
>1387	Callee	rand
>1388	Identifier	rand
>1389	CastTarget	float
>1390	ArrayIndexing	g3 [ i ] [ j ]
>1391	Identifier	j
>1392	ArrayIndexing	g3 [ i ]
>1393	Identifier	i
>1394	Identifier	g3
>1395	IncDecOp	 
>1396	IncDec	++
>1397	Identifier	j
>1398	Condition	 
>1399	RelationalExpression	j < 3
>1400	PrimaryExpression	3
>1401	Identifier	j
>1402	ForInit	 
>1403	AssignmentExpr	j = 0
>1404	PrimaryExpression	0
>1405	Identifier	j
>1406	ExpressionStatement	 
>1407	CallExpression	normalize2 ( g2 [ i ] )
>1408	ArgumentList	g2 [ i ]
>1409	Argument	g2 [ i ]
>1410	ArrayIndexing	g2 [ i ]
>1411	Identifier	i
>1412	Identifier	g2
>1413	Callee	normalize2
>1414	Identifier	normalize2
>1415	ForStatement	for ( j = 0 ; j < 2 ; j ++ )
>1416	ExpressionStatement	 
>1417	AssignmentExpr	g2 [ i ] [ j ] = ( float ) ( ( rand ( ) % ( B + B ) ) - B ) / B
>1418	MultiplicativeExpression	( float ) ( ( rand ( ) % ( B + B ) ) - B ) / B
>1419	Identifier	B
>1420	CastExpression	( float ) ( ( rand ( ) % ( B + B ) ) - B )
>1421	AdditiveExpression	( rand ( ) % ( B + B ) ) - B
>1422	Identifier	B
>1423	MultiplicativeExpression	rand ( ) % ( B + B )
>1424	AdditiveExpression	B + B
>1425	Identifier	B
>1426	Identifier	B
>1427	CallExpression	rand ( )
>1428	ArgumentList	 
>1429	Callee	rand
>1430	Identifier	rand
>1431	CastTarget	float
>1432	ArrayIndexing	g2 [ i ] [ j ]
>1433	Identifier	j
>1434	ArrayIndexing	g2 [ i ]
>1435	Identifier	i
>1436	Identifier	g2
>1437	IncDecOp	 
>1438	IncDec	++
>1439	Identifier	j
>1440	Condition	 
>1441	RelationalExpression	j < 2
>1442	PrimaryExpression	2
>1443	Identifier	j
>1444	ForInit	 
>1445	AssignmentExpr	j = 0
>1446	PrimaryExpression	0
>1447	Identifier	j
>1448	ExpressionStatement	 
>1449	AssignmentExpr	g1 [ i ] = ( float ) ( ( rand ( ) % ( B + B ) ) - B ) / B
>1450	MultiplicativeExpression	( float ) ( ( rand ( ) % ( B + B ) ) - B ) / B
>1451	Identifier	B
>1452	CastExpression	( float ) ( ( rand ( ) % ( B + B ) ) - B )
>1453	AdditiveExpression	( rand ( ) % ( B + B ) ) - B
>1454	Identifier	B
>1455	MultiplicativeExpression	rand ( ) % ( B + B )
>1456	AdditiveExpression	B + B
>1457	Identifier	B
>1458	Identifier	B
>1459	CallExpression	rand ( )
>1460	ArgumentList	 
>1461	Callee	rand
>1462	Identifier	rand
>1463	CastTarget	float
>1464	ArrayIndexing	g1 [ i ]
>1465	Identifier	i
>1466	Identifier	g1
>1467	ExpressionStatement	 
>1468	AssignmentExpr	p [ i ] = i
>1469	Identifier	i
>1470	ArrayIndexing	p [ i ]
>1471	Identifier	i
>1472	Identifier	p
>1473	IncDecOp	 
>1474	IncDec	++
>1475	Identifier	i
>1476	Condition	 
>1477	RelationalExpression	i < B
>1478	Identifier	B
>1479	Identifier	i
>1480	ForInit	 
>1481	AssignmentExpr	i = 0
>1482	PrimaryExpression	0
>1483	Identifier	i
>1484	IdentifierDeclStatement	 
>1485	IdentifierDecl	k
>1486	Identifier	k
>1487	IdentifierDeclType	int
>1488	IdentifierDecl	j
>1489	Identifier	j
>1490	IdentifierDeclType	int
>1491	IdentifierDecl	i
>1492	Identifier	i
>1493	IdentifierDeclType	int
>1518	FunctionDef	Perlin 
>1519	ParameterList	float vec [ 2 ]
>1520	Parameter	 
>1521	Identifier	vec
>1522	ParameterType	float [ 2 ]
>1523	ReturnType	float
>1524	CompoundStatement	 
>1525	ReturnStatement	 
>1526	Identifier	result
>1527	ForStatement	for ( int i = 0 ; i < terms ; i ++ )
>1528	CompoundStatement	 
>1529	ExpressionStatement	 
>1530	AssignmentExpr	amp *= 0.5f
>1531	PrimaryExpression	0.5f
>1532	Identifier	amp
>1533	ExpressionStatement	 
>1534	AssignmentExpr	vec [ 1 ] *= 2.0f
>1535	PrimaryExpression	2.0f
>1536	ArrayIndexing	vec [ 1 ]
>1537	PrimaryExpression	1
>1538	Identifier	vec
>1539	ExpressionStatement	 
>1540	AssignmentExpr	vec [ 0 ] *= 2.0f
>1541	PrimaryExpression	2.0f
>1542	ArrayIndexing	vec [ 0 ]
>1543	PrimaryExpression	0
>1544	Identifier	vec
>1545	ExpressionStatement	 
>1546	AssignmentExpr	result += noise2 ( vec ) * amp
>1547	MultiplicativeExpression	noise2 ( vec ) * amp
>1548	Identifier	amp
>1549	CallExpression	noise2 ( vec )
>1550	ArgumentList	vec
>1551	Argument	vec
>1552	Identifier	vec
>1553	Callee	noise2
>1554	Identifier	noise2
>1555	Identifier	result
>1556	IncDecOp	 
>1557	IncDec	++
>1558	Identifier	i
>1559	Condition	 
>1560	RelationalExpression	i < terms
>1561	Identifier	terms
>1562	Identifier	i
>1563	ForInit	 
>1564	IdentifierDeclStatement	int i = 0 ;
>1565	IdentifierDecl	i = 0
>1566	AssignmentExpr	i = 0
>1567	PrimaryExpression	0
>1568	Identifier	i
>1569	Identifier	i
>1570	IdentifierDeclType	int
>1571	ExpressionStatement	 
>1572	AssignmentExpr	vec [ 1 ] *= freq
>1573	Identifier	freq
>1574	ArrayIndexing	vec [ 1 ]
>1575	PrimaryExpression	1
>1576	Identifier	vec
>1577	ExpressionStatement	 
>1578	AssignmentExpr	vec [ 0 ] *= freq
>1579	Identifier	freq
>1580	ArrayIndexing	vec [ 0 ]
>1581	PrimaryExpression	0
>1582	Identifier	vec
>1583	IdentifierDeclStatement	 
>1584	IdentifierDecl	amp = mAmplitude
>1585	AssignmentExpr	amp = mAmplitude
>1586	Identifier	mAmplitude
>1587	Identifier	mAmplitude
>1588	Identifier	amp
>1589	IdentifierDeclType	float
>1590	IdentifierDeclStatement	 
>1591	IdentifierDecl	result = 0.0f
>1592	AssignmentExpr	result = 0.0f
>1593	PrimaryExpression	0.0f
>1594	Identifier	result
>1595	Identifier	result
>1596	IdentifierDeclType	float
>1597	IdentifierDeclStatement	 
>1598	IdentifierDecl	freq = mFrequency
>1599	AssignmentExpr	freq = mFrequency
>1600	Identifier	mFrequency
>1601	Identifier	mFrequency
>1602	Identifier	freq
>1603	IdentifierDeclType	float
>1604	IdentifierDeclStatement	 
>1605	IdentifierDecl	terms = mOctaves
>1606	AssignmentExpr	terms = mOctaves
>1607	Identifier	mOctaves
>1608	Identifier	mOctaves
>1609	Identifier	terms
>1610	IdentifierDeclType	int
>1625	FunctionDef	Perlin 
>1626	ParameterList	int octaves , float freq , float amp , int seed
>1627	Parameter	 
>1628	Identifier	seed
>1629	ParameterType	int
>1630	Parameter	 
>1631	Identifier	amp
>1632	ParameterType	float
>1633	Parameter	 
>1634	Identifier	freq
>1635	ParameterType	float
>1636	Parameter	 
>1637	Identifier	octaves
>1638	ParameterType	int
>1639	CompoundStatement	 
>1640	ExpressionStatement	 
>1641	AssignmentExpr	mStart = true
>1642	Identifier	true
>1643	Identifier	mStart
>1644	ExpressionStatement	 
>1645	AssignmentExpr	mSeed = seed
>1646	Identifier	seed
>1647	Identifier	mSeed
>1648	ExpressionStatement	 
>1649	AssignmentExpr	mAmplitude = amp
>1650	Identifier	amp
>1651	Identifier	mAmplitude
>1652	ExpressionStatement	 
>1653	AssignmentExpr	mFrequency = freq
>1654	Identifier	freq
>1655	Identifier	mFrequency
>1656	ExpressionStatement	 
>1657	AssignmentExpr	mOctaves = octaves
>1658	Identifier	octaves
>1659	Identifier	mOctaves
>1673	FunctionDef	Perlin 
>1674	ParameterList	 
>1675	CompoundStatement	 
>1676	ExpressionStatement	 
>1677	CallExpression	srand ( time ( NULL ) )
>1678	ArgumentList	time ( NULL )
>1679	Argument	time ( NULL )
>1680	CallExpression	time ( NULL )
>1681	ArgumentList	NULL
>1682	Argument	NULL
>1683	Identifier	NULL
>1684	Callee	time
>1685	Identifier	time
>1686	Callee	srand
>1687	Identifier	srand
<3=9,8,4
<4=5
<5=7,6
<9=114,91,85,65,50,41,31,21,10
<10=11
<11=19,12
<12=17,15,13
<13=14
<15=16
<17=18
<19=20
<21=22
<22=30,23
<23=29,24
<24=28,25
<25=27,26
<31=32
<32=40,33
<33=39,34
<34=38,35
<35=37,36
<41=42
<42=49,43
<43=47,44
<44=45
<45=46
<47=48
<50=51
<51=63,52
<52=61,59,57,55,53
<53=54
<55=56
<57=58
<59=60
<61=62
<63=64
<65=83,66
<66=76,72,67
<67=68
<68=70,69
<70=71
<72=73
<73=75,74
<76=77
<77=81,78
<78=79
<79=80
<81=82
<83=84
<85=86
<86=88,87
<88=90,89
<91=111,108,105,102,99,96,92
<92=95,94,93
<96=98,97
<99=101,100
<102=104,103
<105=107,106
<108=110,109
<111=113,112
<114=118,115
<115=117,116
<118=120,119
<149=155,154,150
<150=151
<151=153,152
<155=439,402,395,375,360,345,339,333,325,317,309,301,292,283,282,281,280,279,278,277,276,275,274,273,272,271,270,269,268,267,266,265,264,263,262,261,255,244,238,227,214,208,197,191,180,167,156
<156=157
<157=165,158
<158=163,161,159
<159=160
<161=162
<163=164
<165=166
<167=168
<168=179,169
<169=177,170
<170=175,173,171
<171=172
<173=174
<175=176
<177=178
<180=181
<181=190,182
<182=188,183
<183=186,184
<184=185
<186=187
<188=189
<191=192
<192=196,193
<193=195,194
<197=198
<198=207,199
<199=205,200
<200=203,201
<201=202
<203=204
<205=206
<208=209
<209=213,210
<210=212,211
<214=215
<215=226,216
<216=224,217
<217=222,220,218
<218=219
<220=221
<222=223
<224=225
<227=228
<228=237,229
<229=235,230
<230=233,231
<231=232
<233=234
<235=236
<238=239
<239=243,240
<240=242,241
<244=245
<245=254,246
<246=252,247
<247=250,248
<248=249
<250=251
<252=253
<255=256
<256=260,257
<257=259,258
<283=284
<284=291,285
<285=289,286
<286=287
<287=288
<289=290
<292=293
<293=300,294
<294=298,295
<295=296
<296=297
<298=299
<301=302
<302=308,303
<303=307,304
<304=306,305
<309=310
<310=316,311
<311=315,312
<312=314,313
<317=318
<318=324,319
<319=323,320
<320=322,321
<325=326
<326=332,327
<327=331,328
<328=330,329
<333=334
<334=338,335
<335=337,336
<339=340
<340=344,341
<341=343,342
<345=346
<346=358,347
<347=356,354,352,350,348
<348=349
<350=351
<352=353
<354=355
<356=357
<358=359
<360=361
<361=373,362
<362=371,369,367,365,363
<363=364
<365=366
<367=368
<369=370
<371=372
<373=374
<375=393,376
<376=386,382,377
<377=378
<378=380,379
<380=381
<382=383
<383=385,384
<386=387
<387=391,388
<388=389
<389=390
<391=392
<393=394
<395=399,396
<396=398,397
<399=401,400
<402=436,433,430,427,424,421,418,415,412,409,406,403
<403=405,404
<406=408,407
<409=411,410
<412=414,413
<415=417,416
<418=420,419
<421=423,422
<424=426,425
<427=429,428
<430=432,431
<433=435,434
<436=438,437
<439=461,458,455,452,449,446,443,440
<440=442,441
<443=445,444
<446=448,447
<449=451,450
<452=454,453
<455=457,456
<458=460,459
<461=463,462
<510=516,515,511
<511=512
<512=514,513
<516=997,948,941,921,906,891,876,870,864,856,848,840,832,823,814,805,804,803,802,801,517,528,541,554,567,575,588,596,609,622,630,643,651,664,677,690,698,711,719,732,745,753,766,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800
<517=518
<518=526,519
<519=524,522,520
<520=521
<522=523
<524=525
<526=527
<528=529
<529=540,530
<530=538,531
<531=536,534,532
<532=533
<534=535
<536=537
<538=539
<541=542
<542=553,543
<543=551,544
<544=549,547,545
<545=546
<547=548
<549=550
<551=552
<554=555
<555=566,556
<556=564,557
<557=562,560,558
<558=559
<560=561
<562=563
<564=565
<567=568
<568=574,569
<569=573,570
<570=572,571
<575=576
<576=587,577
<577=585,578
<578=583,581,579
<579=580
<581=582
<583=584
<585=586
<588=589
<589=595,590
<590=594,591
<591=593,592
<596=597
<597=608,598
<598=606,599
<599=604,602,600
<600=601
<602=603
<604=605
<606=607
<609=610
<610=621,611
<611=619,612
<612=617,615,613
<613=614
<615=616
<617=618
<619=620
<622=623
<623=629,624
<624=628,625
<625=627,626
<630=631
<631=642,632
<632=640,633
<633=638,636,634
<634=635
<636=637
<638=639
<640=641
<643=644
<644=650,645
<645=649,646
<646=648,647
<651=652
<652=663,653
<653=661,654
<654=659,657,655
<655=656
<657=658
<659=660
<661=662
<664=665
<665=676,666
<666=674,667
<667=672,670,668
<668=669
<670=671
<672=673
<674=675
<677=678
<678=689,679
<679=687,680
<680=685,683,681
<681=682
<683=684
<685=686
<687=688
<690=691
<691=697,692
<692=696,693
<693=695,694
<698=699
<699=710,700
<700=708,701
<701=706,704,702
<702=703
<704=705
<706=707
<708=709
<711=712
<712=718,713
<713=717,714
<714=716,715
<719=720
<720=731,721
<721=729,722
<722=727,725,723
<723=724
<725=726
<727=728
<729=730
<732=733
<733=744,734
<734=742,735
<735=740,738,736
<736=737
<738=739
<740=741
<742=743
<745=746
<746=752,747
<747=751,748
<748=750,749
<753=754
<754=765,755
<755=763,756
<756=761,759,757
<757=758
<759=760
<761=762
<763=764
<766=767
<767=773,768
<768=772,769
<769=771,770
<805=806
<806=813,807
<807=811,808
<808=809
<809=810
<811=812
<814=815
<815=822,816
<816=820,817
<817=818
<818=819
<820=821
<823=824
<824=831,825
<825=829,826
<826=827
<827=828
<829=830
<832=833
<833=839,834
<834=838,835
<835=837,836
<840=841
<841=847,842
<842=846,843
<843=845,844
<848=849
<849=855,850
<850=854,851
<851=853,852
<856=857
<857=863,858
<858=862,859
<859=861,860
<864=865
<865=869,866
<866=868,867
<870=871
<871=875,872
<872=874,873
<876=877
<877=889,878
<878=887,885,883,881,879
<879=880
<881=882
<883=884
<885=886
<887=888
<889=890
<891=892
<892=904,893
<893=902,900,898,896,894
<894=895
<896=897
<898=899
<900=901
<902=903
<904=905
<906=907
<907=919,908
<908=917,915,913,911,909
<909=910
<911=912
<913=914
<915=916
<917=918
<919=920
<921=939,922
<922=932,928,923
<923=924
<924=926,925
<926=927
<928=929
<929=931,930
<932=933
<933=937,934
<934=935
<935=936
<937=938
<939=940
<941=945,942
<942=944,943
<945=947,946
<948=949,952,955,958,961,964,967,970,973,976,979,982,985,988,991,994
<949=951,950
<952=954,953
<955=957,956
<958=960,959
<961=963,962
<964=966,965
<967=969,968
<970=972,971
<973=975,974
<976=978,977
<979=981,980
<982=984,983
<985=987,986
<988=990,989
<991=993,992
<994=996,995
<997=1025,1022,1019,1016,1013,1010,1007,1004,1001,998
<998=1000,999
<1001=1003,1002
<1004=1006,1005
<1007=1009,1008
<1010=1012,1011
<1013=1015,1014
<1016=1018,1017
<1019=1021,1020
<1022=1024,1023
<1025=1027,1026
<1082=1088,1087,1083
<1083=1084
<1084=1086,1085
<1088=1140,1115,1109,1099,1089
<1089=1090
<1090=1096,1091
<1091=1093,1092
<1093=1095,1094
<1096=1098,1097
<1099=1100
<1100=1106,1101
<1101=1103,1102
<1103=1105,1104
<1106=1108,1107
<1109=1110
<1110=1114,1111
<1111=1113,1112
<1115=1116
<1116=1139,1117
<1117=1138,1118
<1118=1136,1119
<1119=1120
<1120=1121
<1121=1129,1122
<1122=1126,1123
<1123=1125,1124
<1126=1128,1127
<1129=1133,1130
<1130=1132,1131
<1133=1135,1134
<1136=1137
<1140=1141
<1141=1143,1142
<1151=1157,1156,1152
<1152=1153
<1153=1155,1154
<1157=1227,1194,1188,1178,1168,1158
<1158=1159
<1159=1165,1160
<1160=1162,1161
<1162=1164,1163
<1165=1167,1166
<1168=1169
<1169=1175,1170
<1170=1172,1171
<1172=1174,1173
<1175=1177,1176
<1178=1179
<1179=1185,1180
<1180=1182,1181
<1182=1184,1183
<1185=1187,1186
<1188=1189
<1189=1193,1190
<1190=1192,1191
<1194=1195
<1195=1226,1196
<1196=1225,1197
<1197=1223,1198
<1198=1199
<1199=1200
<1200=1216,1201
<1201=1209,1202
<1202=1206,1203
<1203=1205,1204
<1206=1208,1207
<1209=1213,1210
<1210=1212,1211
<1213=1215,1214
<1216=1220,1217
<1217=1219,1218
<1220=1222,1221
<1223=1224
<1227=1228
<1228=1230,1229
<1238=1241,1240,1239
<1241=1484,1362,1329,1242
<1242=1325,1319,1316,1243
<1243=1306,1296,1270,1244
<1244=1266,1262,1259,1245
<1245=1246
<1246=1252,1247
<1247=1249,1248
<1249=1251,1250
<1252=1254,1253
<1254=1258,1255
<1255=1257,1256
<1259=1261,1260
<1262=1263
<1263=1265,1264
<1266=1267
<1267=1269,1268
<1270=1292,1288,1285,1271
<1271=1272
<1272=1278,1273
<1273=1275,1274
<1275=1277,1276
<1278=1280,1279
<1280=1284,1281
<1281=1283,1282
<1285=1287,1286
<1288=1289
<1289=1291,1290
<1292=1293
<1293=1295,1294
<1296=1297
<1297=1301,1298
<1298=1300,1299
<1301=1305,1302
<1302=1304,1303
<1306=1307
<1307=1311,1308
<1308=1310,1309
<1311=1315,1312
<1312=1314,1313
<1316=1318,1317
<1319=1320
<1320=1324,1321
<1321=1323,1322
<1325=1326
<1326=1328,1327
<1329=1358,1330
<1330=1352,1337,1331
<1331=1332
<1332=1334,1333
<1334=1336,1335
<1337=1338
<1338=1349,1339
<1339=1348,1340
<1340=1347,1341
<1341=1343,1342
<1343=1345,1344
<1345=1346
<1349=1351,1350
<1352=1353
<1353=1357,1354
<1354=1356,1355
<1358=1359
<1359=1361,1360
<1362=1480,1476,1473,1363
<1363=1467,1448,1415,1406,1373,1364
<1364=1365
<1365=1371,1366
<1366=1367
<1367=1368
<1368=1370,1369
<1371=1372
<1373=1402,1398,1395,1374
<1374=1375
<1375=1390,1376
<1376=1378,1377
<1378=1389,1379
<1379=1381,1380
<1381=1385,1382
<1382=1384,1383
<1385=1387,1386
<1387=1388
<1390=1392,1391
<1392=1394,1393
<1395=1397,1396
<1398=1399
<1399=1401,1400
<1402=1403
<1403=1405,1404
<1406=1407
<1407=1413,1408
<1408=1409
<1409=1410
<1410=1412,1411
<1413=1414
<1415=1444,1440,1437,1416
<1416=1417
<1417=1432,1418
<1418=1420,1419
<1420=1431,1421
<1421=1423,1422
<1423=1427,1424
<1424=1426,1425
<1427=1429,1428
<1429=1430
<1432=1434,1433
<1434=1436,1435
<1437=1439,1438
<1440=1441
<1441=1443,1442
<1444=1445
<1445=1447,1446
<1448=1449
<1449=1464,1450
<1450=1452,1451
<1452=1463,1453
<1453=1455,1454
<1455=1459,1456
<1456=1458,1457
<1459=1461,1460
<1461=1462
<1464=1466,1465
<1467=1468
<1468=1470,1469
<1470=1472,1471
<1473=1475,1474
<1476=1477
<1477=1479,1478
<1480=1481
<1481=1483,1482
<1484=1491,1488,1485
<1485=1487,1486
<1488=1490,1489
<1491=1493,1492
<1518=1524,1523,1519
<1519=1520
<1520=1522,1521
<1524=1604,1597,1590,1583,1577,1571,1527,1525
<1525=1526
<1527=1563,1559,1556,1528
<1528=1545,1539,1533,1529
<1529=1530
<1530=1532,1531
<1533=1534
<1534=1536,1535
<1536=1538,1537
<1539=1540
<1540=1542,1541
<1542=1544,1543
<1545=1546
<1546=1555,1547
<1547=1549,1548
<1549=1553,1550
<1550=1551
<1551=1552
<1553=1554
<1556=1558,1557
<1559=1560
<1560=1562,1561
<1563=1564
<1564=1565
<1565=1570,1569,1566
<1566=1568,1567
<1571=1572
<1572=1574,1573
<1574=1576,1575
<1577=1578
<1578=1580,1579
<1580=1582,1581
<1583=1584
<1584=1589,1588,1585
<1585=1587,1586
<1590=1591
<1591=1596,1595,1592
<1592=1594,1593
<1597=1598
<1598=1603,1602,1599
<1599=1601,1600
<1604=1605
<1605=1610,1609,1606
<1606=1608,1607
<1625=1639,1626
<1626=1636,1633,1630,1627
<1627=1629,1628
<1630=1632,1631
<1633=1635,1634
<1636=1638,1637
<1639=1656,1652,1648,1644,1640
<1640=1641
<1641=1643,1642
<1644=1645
<1645=1647,1646
<1648=1649
<1649=1651,1650
<1652=1653
<1653=1655,1654
<1656=1657
<1657=1659,1658
<1673=1675,1674
<1675=1676
<1676=1677
<1677=1686,1678
<1678=1679
<1679=1680
<1680=1684,1681
<1681=1682
<1682=1683
<1684=1685
<1686=1687
