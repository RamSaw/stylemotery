>3	FunctionDef	compare_doubles (const void * d1 , const void * d2)
>4	ParameterList	const void * d1 , const void * d2
>5	Parameter	 
>6	Identifier	d2
>7	ParameterType	const void *
>8	Parameter	 
>9	Identifier	d1
>10	ParameterType	const void *
>11	ReturnType	static int
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	PrimaryExpression	0
>15	IfStatement	if ( a > b )
>16	ReturnStatement	 
>17	PrimaryExpression	1
>18	Condition	 
>19	RelationalExpression	a > b
>20	Identifier	b
>21	Identifier	a
>22	IfStatement	if ( a < b )
>23	ReturnStatement	 
>24	UnaryOp	- 1
>25	PrimaryExpression	1
>26	UnaryOperator	-
>27	Condition	 
>28	RelationalExpression	a < b
>29	Identifier	b
>30	Identifier	a
>31	IdentifierDeclStatement	 
>32	IdentifierDecl	b = * ( double * ) d2
>33	AssignmentExpr	b = * ( double * ) d2
>34	UnaryOp	* ( double * ) d2
>35	CastExpression	( double * ) d2
>36	Identifier	d2
>37	CastTarget	double *
>38	UnaryOperator	*
>39	Identifier	b
>40	Identifier	b
>41	IdentifierDeclType	double
>42	IdentifierDeclStatement	 
>43	IdentifierDecl	a = * ( double * ) d1
>44	AssignmentExpr	a = * ( double * ) d1
>45	UnaryOp	* ( double * ) d1
>46	CastExpression	( double * ) d1
>47	Identifier	d1
>48	CastTarget	double *
>49	UnaryOperator	*
>50	Identifier	a
>51	Identifier	a
>52	IdentifierDeclType	double
>64	FunctionDef	aa2rot (double const * x , double * R)
>65	ParameterList	double const * x , double * R
>66	Parameter	 
>67	Identifier	R
>68	ParameterType	double *
>69	Parameter	 
>70	Identifier	x
>71	ParameterType	double const *
>72	ReturnType	static void
>73	CompoundStatement	 
>74	ExpressionStatement	 
>75	AssignmentExpr	R [ 8 ] = costheta + wz * wz * ( 1 - costheta )
>76	AdditiveExpression	costheta + wz * wz * ( 1 - costheta )
>77	MultiplicativeExpression	wz * wz * ( 1 - costheta )
>78	MultiplicativeExpression	wz * ( 1 - costheta )
>79	AdditiveExpression	1 - costheta
>80	Identifier	costheta
>81	PrimaryExpression	1
>82	Identifier	wz
>83	Identifier	wz
>84	Identifier	costheta
>85	ArrayIndexing	R [ 8 ]
>86	PrimaryExpression	8
>87	Identifier	R
>88	ExpressionStatement	 
>89	AssignmentExpr	R [ 7 ] = - wx * sintheta + wy * wz * ( 1 - costheta )
>90	AdditiveExpression	- wx * sintheta + wy * wz * ( 1 - costheta )
>91	MultiplicativeExpression	wy * wz * ( 1 - costheta )
>92	MultiplicativeExpression	wz * ( 1 - costheta )
>93	AdditiveExpression	1 - costheta
>94	Identifier	costheta
>95	PrimaryExpression	1
>96	Identifier	wz
>97	Identifier	wy
>98	MultiplicativeExpression	- wx * sintheta
>99	Identifier	sintheta
>100	UnaryOp	- wx
>101	Identifier	wx
>102	UnaryOperator	-
>103	ArrayIndexing	R [ 7 ]
>104	PrimaryExpression	7
>105	Identifier	R
>106	ExpressionStatement	 
>107	AssignmentExpr	R [ 6 ] = wy * sintheta + wx * wz * ( 1 - costheta )
>108	AdditiveExpression	wy * sintheta + wx * wz * ( 1 - costheta )
>109	MultiplicativeExpression	wx * wz * ( 1 - costheta )
>110	MultiplicativeExpression	wz * ( 1 - costheta )
>111	AdditiveExpression	1 - costheta
>112	Identifier	costheta
>113	PrimaryExpression	1
>114	Identifier	wz
>115	Identifier	wx
>116	MultiplicativeExpression	wy * sintheta
>117	Identifier	sintheta
>118	Identifier	wy
>119	ArrayIndexing	R [ 6 ]
>120	PrimaryExpression	6
>121	Identifier	R
>122	ExpressionStatement	 
>123	AssignmentExpr	R [ 5 ] = wx * sintheta + wy * wz * ( 1 - costheta )
>124	AdditiveExpression	wx * sintheta + wy * wz * ( 1 - costheta )
>125	MultiplicativeExpression	wy * wz * ( 1 - costheta )
>126	MultiplicativeExpression	wz * ( 1 - costheta )
>127	AdditiveExpression	1 - costheta
>128	Identifier	costheta
>129	PrimaryExpression	1
>130	Identifier	wz
>131	Identifier	wy
>132	MultiplicativeExpression	wx * sintheta
>133	Identifier	sintheta
>134	Identifier	wx
>135	ArrayIndexing	R [ 5 ]
>136	PrimaryExpression	5
>137	Identifier	R
>138	ExpressionStatement	 
>139	AssignmentExpr	R [ 4 ] = costheta + wy * wy * ( 1 - costheta )
>140	AdditiveExpression	costheta + wy * wy * ( 1 - costheta )
>141	MultiplicativeExpression	wy * wy * ( 1 - costheta )
>142	MultiplicativeExpression	wy * ( 1 - costheta )
>143	AdditiveExpression	1 - costheta
>144	Identifier	costheta
>145	PrimaryExpression	1
>146	Identifier	wy
>147	Identifier	wy
>148	Identifier	costheta
>149	ArrayIndexing	R [ 4 ]
>150	PrimaryExpression	4
>151	Identifier	R
>152	ExpressionStatement	 
>153	AssignmentExpr	R [ 3 ] = wx * wy * ( 1 - costheta ) - wz * sintheta
>154	AdditiveExpression	wx * wy * ( 1 - costheta ) - wz * sintheta
>155	MultiplicativeExpression	wz * sintheta
>156	Identifier	sintheta
>157	Identifier	wz
>158	MultiplicativeExpression	wx * wy * ( 1 - costheta )
>159	MultiplicativeExpression	wy * ( 1 - costheta )
>160	AdditiveExpression	1 - costheta
>161	Identifier	costheta
>162	PrimaryExpression	1
>163	Identifier	wy
>164	Identifier	wx
>165	ArrayIndexing	R [ 3 ]
>166	PrimaryExpression	3
>167	Identifier	R
>168	ExpressionStatement	 
>169	AssignmentExpr	R [ 2 ] = - wy * sintheta + wx * wz * ( 1 - costheta )
>170	AdditiveExpression	- wy * sintheta + wx * wz * ( 1 - costheta )
>171	MultiplicativeExpression	wx * wz * ( 1 - costheta )
>172	MultiplicativeExpression	wz * ( 1 - costheta )
>173	AdditiveExpression	1 - costheta
>174	Identifier	costheta
>175	PrimaryExpression	1
>176	Identifier	wz
>177	Identifier	wx
>178	MultiplicativeExpression	- wy * sintheta
>179	Identifier	sintheta
>180	UnaryOp	- wy
>181	Identifier	wy
>182	UnaryOperator	-
>183	ArrayIndexing	R [ 2 ]
>184	PrimaryExpression	2
>185	Identifier	R
>186	ExpressionStatement	 
>187	AssignmentExpr	R [ 1 ] = wz * sintheta + wx * wy * ( 1 - costheta )
>188	AdditiveExpression	wz * sintheta + wx * wy * ( 1 - costheta )
>189	MultiplicativeExpression	wx * wy * ( 1 - costheta )
>190	MultiplicativeExpression	wy * ( 1 - costheta )
>191	AdditiveExpression	1 - costheta
>192	Identifier	costheta
>193	PrimaryExpression	1
>194	Identifier	wy
>195	Identifier	wx
>196	MultiplicativeExpression	wz * sintheta
>197	Identifier	sintheta
>198	Identifier	wz
>199	ArrayIndexing	R [ 1 ]
>200	PrimaryExpression	1
>201	Identifier	R
>202	ExpressionStatement	 
>203	AssignmentExpr	R [ 0 ] = costheta + wx * wx * ( 1 - costheta )
>204	AdditiveExpression	costheta + wx * wx * ( 1 - costheta )
>205	MultiplicativeExpression	wx * wx * ( 1 - costheta )
>206	MultiplicativeExpression	wx * ( 1 - costheta )
>207	AdditiveExpression	1 - costheta
>208	Identifier	costheta
>209	PrimaryExpression	1
>210	Identifier	wx
>211	Identifier	wx
>212	Identifier	costheta
>213	ArrayIndexing	R [ 0 ]
>214	PrimaryExpression	0
>215	Identifier	R
>216	IdentifierDeclStatement	 
>217	IdentifierDecl	sintheta = sin ( theta )
>218	AssignmentExpr	sintheta = sin ( theta )
>219	CallExpression	sin ( theta )
>220	ArgumentList	theta
>221	Argument	theta
>222	Identifier	theta
>223	Callee	sin
>224	Identifier	sin
>225	Identifier	sintheta
>226	Identifier	sintheta
>227	IdentifierDeclType	double
>228	IdentifierDeclStatement	 
>229	IdentifierDecl	costheta = cos ( theta )
>230	AssignmentExpr	costheta = cos ( theta )
>231	CallExpression	cos ( theta )
>232	ArgumentList	theta
>233	Argument	theta
>234	Identifier	theta
>235	Callee	cos
>236	Identifier	cos
>237	Identifier	costheta
>238	Identifier	costheta
>239	IdentifierDeclType	double
>240	IdentifierDeclStatement	 
>241	IdentifierDecl	wz = x [ 2 ] / ( theta + epsilon )
>242	AssignmentExpr	wz = x [ 2 ] / ( theta + epsilon )
>243	MultiplicativeExpression	x [ 2 ] / ( theta + epsilon )
>244	AdditiveExpression	theta + epsilon
>245	Identifier	epsilon
>246	Identifier	theta
>247	ArrayIndexing	x [ 2 ]
>248	PrimaryExpression	2
>249	Identifier	x
>250	Identifier	wz
>251	Identifier	wz
>252	IdentifierDeclType	double
>253	IdentifierDeclStatement	 
>254	IdentifierDecl	wy = x [ 1 ] / ( theta + epsilon )
>255	AssignmentExpr	wy = x [ 1 ] / ( theta + epsilon )
>256	MultiplicativeExpression	x [ 1 ] / ( theta + epsilon )
>257	AdditiveExpression	theta + epsilon
>258	Identifier	epsilon
>259	Identifier	theta
>260	ArrayIndexing	x [ 1 ]
>261	PrimaryExpression	1
>262	Identifier	x
>263	Identifier	wy
>264	Identifier	wy
>265	IdentifierDeclType	double
>266	IdentifierDeclStatement	 
>267	IdentifierDecl	wx = x [ 0 ] / ( theta + epsilon )
>268	AssignmentExpr	wx = x [ 0 ] / ( theta + epsilon )
>269	MultiplicativeExpression	x [ 0 ] / ( theta + epsilon )
>270	AdditiveExpression	theta + epsilon
>271	Identifier	epsilon
>272	Identifier	theta
>273	ArrayIndexing	x [ 0 ]
>274	PrimaryExpression	0
>275	Identifier	x
>276	Identifier	wx
>277	Identifier	wx
>278	IdentifierDeclType	double
>279	IdentifierDeclStatement	 
>280	IdentifierDecl	theta = sqrt ( x [ 0 ] * x [ 0 ] + x [ 1 ] * x [ 1 ] + x [ 2 ] * x [ 2 ] )
>281	AssignmentExpr	theta = sqrt ( x [ 0 ] * x [ 0 ] + x [ 1 ] * x [ 1 ] + x [ 2 ] * x [ 2 ] )
>282	CallExpression	sqrt ( x [ 0 ] * x [ 0 ] + x [ 1 ] * x [ 1 ] + x [ 2 ] * x [ 2 ] )
>283	ArgumentList	x [ 0 ] * x [ 0 ] + x [ 1 ] * x [ 1 ] + x [ 2 ] * x [ 2 ]
>284	Argument	x [ 0 ] * x [ 0 ] + x [ 1 ] * x [ 1 ] + x [ 2 ] * x [ 2 ]
>285	AdditiveExpression	x [ 0 ] * x [ 0 ] + x [ 1 ] * x [ 1 ] + x [ 2 ] * x [ 2 ]
>286	AdditiveExpression	x [ 1 ] * x [ 1 ] + x [ 2 ] * x [ 2 ]
>287	MultiplicativeExpression	x [ 2 ] * x [ 2 ]
>288	ArrayIndexing	x [ 2 ]
>289	PrimaryExpression	2
>290	Identifier	x
>291	ArrayIndexing	x [ 2 ]
>292	PrimaryExpression	2
>293	Identifier	x
>294	MultiplicativeExpression	x [ 1 ] * x [ 1 ]
>295	ArrayIndexing	x [ 1 ]
>296	PrimaryExpression	1
>297	Identifier	x
>298	ArrayIndexing	x [ 1 ]
>299	PrimaryExpression	1
>300	Identifier	x
>301	MultiplicativeExpression	x [ 0 ] * x [ 0 ]
>302	ArrayIndexing	x [ 0 ]
>303	PrimaryExpression	0
>304	Identifier	x
>305	ArrayIndexing	x [ 0 ]
>306	PrimaryExpression	0
>307	Identifier	x
>308	Callee	sqrt
>309	Identifier	sqrt
>310	Identifier	theta
>311	Identifier	theta
>312	IdentifierDeclType	double
>313	IdentifierDeclStatement	 
>314	IdentifierDecl	epsilon = 1e-18
>315	AssignmentExpr	epsilon = 1e-18
>316	PrimaryExpression	1e-18
>317	Identifier	epsilon
>318	Identifier	epsilon
>319	IdentifierDeclType	const double
>337	FunctionDef	rot2aa (double * R , double * aa)
>338	ParameterList	double * R , double * aa
>339	Parameter	 
>340	Identifier	aa
>341	ParameterType	double *
>342	Parameter	 
>343	Identifier	R
>344	ParameterType	double *
>345	ReturnType	static void
>346	CompoundStatement	 
>347	ExpressionStatement	 
>348	AssignmentExpr	aa [ 2 ] = factor * ( R [ 3 ] - R [ 1 ] )
>349	MultiplicativeExpression	factor * ( R [ 3 ] - R [ 1 ] )
>350	AdditiveExpression	R [ 3 ] - R [ 1 ]
>351	ArrayIndexing	R [ 1 ]
>352	PrimaryExpression	1
>353	Identifier	R
>354	ArrayIndexing	R [ 3 ]
>355	PrimaryExpression	3
>356	Identifier	R
>357	Identifier	factor
>358	ArrayIndexing	aa [ 2 ]
>359	PrimaryExpression	2
>360	Identifier	aa
>361	ExpressionStatement	 
>362	AssignmentExpr	aa [ 1 ] = factor * ( R [ 2 ] - R [ 6 ] )
>363	MultiplicativeExpression	factor * ( R [ 2 ] - R [ 6 ] )
>364	AdditiveExpression	R [ 2 ] - R [ 6 ]
>365	ArrayIndexing	R [ 6 ]
>366	PrimaryExpression	6
>367	Identifier	R
>368	ArrayIndexing	R [ 2 ]
>369	PrimaryExpression	2
>370	Identifier	R
>371	Identifier	factor
>372	ArrayIndexing	aa [ 1 ]
>373	PrimaryExpression	1
>374	Identifier	aa
>375	ExpressionStatement	 
>376	AssignmentExpr	aa [ 0 ] = factor * ( R [ 7 ] - R [ 5 ] )
>377	MultiplicativeExpression	factor * ( R [ 7 ] - R [ 5 ] )
>378	AdditiveExpression	R [ 7 ] - R [ 5 ]
>379	ArrayIndexing	R [ 5 ]
>380	PrimaryExpression	5
>381	Identifier	R
>382	ArrayIndexing	R [ 7 ]
>383	PrimaryExpression	7
>384	Identifier	R
>385	Identifier	factor
>386	ArrayIndexing	aa [ 0 ]
>387	PrimaryExpression	0
>388	Identifier	aa
>389	IdentifierDeclStatement	 
>390	IdentifierDecl	factor = theta / ( 2.0 * sintheta + 1.0e-10 )
>391	AssignmentExpr	factor = theta / ( 2.0 * sintheta + 1.0e-10 )
>392	MultiplicativeExpression	theta / ( 2.0 * sintheta + 1.0e-10 )
>393	AdditiveExpression	2.0 * sintheta + 1.0e-10
>394	PrimaryExpression	1.0e-10
>395	MultiplicativeExpression	2.0 * sintheta
>396	Identifier	sintheta
>397	PrimaryExpression	2.0
>398	Identifier	theta
>399	Identifier	factor
>400	Identifier	factor
>401	IdentifierDeclType	double
>402	IdentifierDeclStatement	 
>403	IdentifierDecl	theta = atan2 ( sintheta , costheta )
>404	AssignmentExpr	theta = atan2 ( sintheta , costheta )
>405	CallExpression	atan2 ( sintheta , costheta )
>406	ArgumentList	sintheta
>407	Argument	costheta
>408	Identifier	costheta
>409	Argument	sintheta
>410	Identifier	sintheta
>411	Callee	atan2
>412	Identifier	atan2
>413	Identifier	theta
>414	Identifier	theta
>415	IdentifierDeclType	double
>416	IdentifierDeclStatement	 
>417	IdentifierDecl	sintheta = matrix_norm ( 3 , 3 , RRT ) / sqrt ( 8.0 )
>418	AssignmentExpr	sintheta = matrix_norm ( 3 , 3 , RRT ) / sqrt ( 8.0 )
>419	MultiplicativeExpression	matrix_norm ( 3 , 3 , RRT ) / sqrt ( 8.0 )
>420	CallExpression	sqrt ( 8.0 )
>421	ArgumentList	8.0
>422	Argument	8.0
>423	PrimaryExpression	8.0
>424	Callee	sqrt
>425	Identifier	sqrt
>426	CallExpression	matrix_norm ( 3 , 3 , RRT )
>427	ArgumentList	3
>428	Argument	RRT
>429	Identifier	RRT
>430	Argument	3
>431	PrimaryExpression	3
>432	Argument	3
>433	PrimaryExpression	3
>434	Callee	matrix_norm
>435	Identifier	matrix_norm
>436	Identifier	sintheta
>437	Identifier	sintheta
>438	IdentifierDeclType	double
>439	ExpressionStatement	 
>440	CallExpression	matrix_diff ( 3 , 3 , 3 , 3 , R , RT , RRT )
>441	ArgumentList	3
>442	Argument	RRT
>443	Identifier	RRT
>444	Argument	RT
>445	Identifier	RT
>446	Argument	R
>447	Identifier	R
>448	Argument	3
>449	PrimaryExpression	3
>450	Argument	3
>451	PrimaryExpression	3
>452	Argument	3
>453	PrimaryExpression	3
>454	Argument	3
>455	PrimaryExpression	3
>456	Callee	matrix_diff
>457	Identifier	matrix_diff
>458	ExpressionStatement	 
>459	CallExpression	matrix_transpose ( 3 , 3 , R , RT )
>460	ArgumentList	3
>461	Argument	RT
>462	Identifier	RT
>463	Argument	R
>464	Identifier	R
>465	Argument	3
>466	PrimaryExpression	3
>467	Argument	3
>468	PrimaryExpression	3
>469	Callee	matrix_transpose
>470	Identifier	matrix_transpose
>471	IdentifierDeclStatement	 
>472	IdentifierDecl	RRT [ 9 ]
>473	PrimaryExpression	9
>474	Identifier	RRT
>475	IdentifierDeclType	double [ 9 ]
>476	IdentifierDecl	RT [ 9 ]
>477	PrimaryExpression	9
>478	Identifier	RT
>479	IdentifierDeclType	double [ 9 ]
>480	IdentifierDeclStatement	 
>481	IdentifierDecl	costheta = CLAMP ( 0.5 * ( tr - 1.0 ) , - 1 , 1 )
>482	AssignmentExpr	costheta = CLAMP ( 0.5 * ( tr - 1.0 ) , - 1 , 1 )
>483	CallExpression	CLAMP ( 0.5 * ( tr - 1.0 ) , - 1 , 1 )
>484	ArgumentList	0.5 * ( tr - 1.0 )
>485	Argument	1
>486	PrimaryExpression	1
>487	Argument	- 1
>488	UnaryOp	- 1
>489	PrimaryExpression	1
>490	UnaryOperator	-
>491	Argument	0.5 * ( tr - 1.0 )
>492	MultiplicativeExpression	0.5 * ( tr - 1.0 )
>493	AdditiveExpression	tr - 1.0
>494	PrimaryExpression	1.0
>495	Identifier	tr
>496	PrimaryExpression	0.5
>497	Callee	CLAMP
>498	Identifier	CLAMP
>499	Identifier	costheta
>500	Identifier	costheta
>501	IdentifierDeclType	double
>502	IdentifierDeclStatement	 
>503	IdentifierDecl	tr = R [ 0 ] + R [ 4 ] + R [ 8 ]
>504	AssignmentExpr	tr = R [ 0 ] + R [ 4 ] + R [ 8 ]
>505	AdditiveExpression	R [ 0 ] + R [ 4 ] + R [ 8 ]
>506	AdditiveExpression	R [ 4 ] + R [ 8 ]
>507	ArrayIndexing	R [ 8 ]
>508	PrimaryExpression	8
>509	Identifier	R
>510	ArrayIndexing	R [ 4 ]
>511	PrimaryExpression	4
>512	Identifier	R
>513	ArrayIndexing	R [ 0 ]
>514	PrimaryExpression	0
>515	Identifier	R
>516	Identifier	tr
>517	Identifier	tr
>518	IdentifierDeclType	double
>538	FunctionDef	PriorError (int prior_index , double prior_value , double prior_scale)
>539	ParameterList	int prior_index , double prior_value , double prior_scale
>540	Parameter	 
>541	Identifier	prior_scale
>542	ParameterType	double
>543	Parameter	 
>544	Identifier	prior_value
>545	ParameterType	double
>546	Parameter	 
>547	Identifier	prior_index
>548	ParameterType	int
>549	CompoundStatement	 
>562	FunctionDef	BundlerApp 
>563	ParameterList	int num_pts , int num_cameras , int start_camera , bool fix_points , camera_params_t * init_camera_params , v3_t * \
>564	Parameter	 
>565	Identifier	write_intermediate
>566	ParameterType	bool
>567	Parameter	 
>568	Identifier	final_bundle
>569	ParameterType	bool
>570	Parameter	 
>571	Identifier	remove_outliers
>572	ParameterType	bool
>573	Parameter	 
>574	Identifier	W
>575	ParameterType	double *
>576	Parameter	 
>577	Identifier	V
>578	ParameterType	double *
>579	Parameter	 
>580	Identifier	U
>581	ParameterType	double *
>582	Parameter	 
>583	Identifier	S
>584	ParameterType	double *
>585	Parameter	 
>586	Identifier	eps2
>587	ParameterType	double
>588	Parameter	 
>589	Identifier	verbosity
>590	ParameterType	int
>591	Parameter	 
>592	Identifier	max_iter2
>593	ParameterType	int
>594	Parameter	 
>595	Identifier	max_iter
>596	ParameterType	int
>597	Parameter	 
>598	Identifier	pt_views
>599	ParameterType	std 
>600	Parameter	 
>601	Identifier	colors
>602	ParameterType	v3_t *
>603	Parameter	 
>604	Identifier	added_order
>605	ParameterType	int *
>606	Parameter	 
>607	Identifier	init_pts
>608	ParameterType	v3_t *
>609	Parameter	 
>610	Identifier	init_camera_params
>611	ParameterType	camera_params_t *
>612	Parameter	 
>613	Identifier	fix_points
>614	ParameterType	bool
>615	Parameter	 
>616	Identifier	start_camera
>617	ParameterType	int
>618	Parameter	 
>619	Identifier	num_cameras
>620	ParameterType	int
>621	Parameter	 
>622	Identifier	num_pts
>623	ParameterType	int
>624	ReturnType	double
>625	CompoundStatement	 
>626	ReturnStatement	 
>627	MultiplicativeExpression	dist_total / num_dists
>628	Identifier	num_dists
>629	Identifier	dist_total
>630	ExpressionStatement	 
>631	Identifier	nz_pts
>632	Statement	 
>633	Statement	 
>634	Statement	 
>635	ExpressionStatement	 
>636	Identifier	remap
>637	Statement	 
>638	Statement	 
>639	Statement	 
>640	ExpressionStatement	 
>641	CallExpression	printf ( \"[RunSFM] Structure from motion with outlier removal took %d s\n\" , ( int ) time_all )
>642	ArgumentList	\"[RunSFM] Structure from motion with outlier removal took %d s\n\"
>643	Argument	( int ) time_all
>644	CastExpression	( int ) time_all
>645	Identifier	time_all
>646	CastTarget	int
>647	Argument	\"[RunSFM] Structure from motion with outlier removal took %d s\n\"
>648	PrimaryExpression	\"[RunSFM] Structure from motion with outlier removal took %d s\n\"
>649	Callee	printf
>650	Identifier	printf
>651	IdentifierDeclStatement	 
>652	IdentifierDecl	time_all = stop_all . tv_sec - start_all . tv_sec
>653	AssignmentExpr	time_all = stop_all . tv_sec - start_all . tv_sec
>654	AdditiveExpression	stop_all . tv_sec - start_all . tv_sec
>655	MemberAccess	start_all . tv_sec
>656	Identifier	tv_sec
>657	Identifier	start_all
>658	MemberAccess	stop_all . tv_sec
>659	Identifier	tv_sec
>660	Identifier	stop_all
>661	Identifier	time_all
>662	Identifier	time_all
>663	IdentifierDeclType	time_t
>664	ExpressionStatement	 
>665	CallExpression	gettimeofday ( & stop_all , NULL )
>666	ArgumentList	& stop_all
>667	Argument	NULL
>668	Identifier	NULL
>669	Argument	& stop_all
>670	UnaryOp	& stop_all
>671	Identifier	stop_all
>672	UnaryOperator	&
>673	Callee	gettimeofday
>674	Identifier	gettimeofday
>675	DoStatement	do
>676	Condition	 
>677	RelationalExpression	num_outliers > MIN_OUTLIERS
>678	Identifier	MIN_OUTLIERS
>679	Identifier	num_outliers
>680	CompoundStatement	 
>681	ExpressionStatement	 
>682	CallExpression	fflush ( stderr )
>683	ArgumentList	stderr
>684	Argument	stderr
>685	Identifier	stderr
>686	Callee	fflush
>687	Identifier	fflush
>688	ExpressionStatement	 
>689	CallExpression	fflush ( stdout )
>690	ArgumentList	stdout
>691	Argument	stdout
>692	Identifier	stdout
>693	Callee	fflush
>694	Identifier	fflush
>695	ExpressionStatement	 
>696	IncDecOp	round ++
>697	IncDec	++
>698	Identifier	round
>699	ExpressionStatement	 
>700	CallExpression	printf ( \"[RunSFM] Round %d took %d s\n\" , round , ( int ) time_iter )
>701	ArgumentList	\"[RunSFM] Round %d took %d s\n\"
>702	Argument	( int ) time_iter
>703	CastExpression	( int ) time_iter
>704	Identifier	time_iter
>705	CastTarget	int
>706	Argument	round
>707	Identifier	round
>708	Argument	\"[RunSFM] Round %d took %d s\n\"
>709	PrimaryExpression	\"[RunSFM] Round %d took %d s\n\"
>710	Callee	printf
>711	Identifier	printf
>712	IdentifierDeclStatement	 
>713	IdentifierDecl	time_iter = stop_iter . tv_sec - start_iter . tv_sec
>714	AssignmentExpr	time_iter = stop_iter . tv_sec - start_iter . tv_sec
>715	AdditiveExpression	stop_iter . tv_sec - start_iter . tv_sec
>716	MemberAccess	start_iter . tv_sec
>717	Identifier	tv_sec
>718	Identifier	start_iter
>719	MemberAccess	stop_iter . tv_sec
>720	Identifier	tv_sec
>721	Identifier	stop_iter
>722	Identifier	time_iter
>723	Identifier	time_iter
>724	IdentifierDeclType	time_t
>725	ExpressionStatement	 
>726	CallExpression	gettimeofday ( & stop_iter , NULL )
>727	ArgumentList	& stop_iter
>728	Argument	NULL
>729	Identifier	NULL
>730	Argument	& stop_iter
>731	UnaryOp	& stop_iter
>732	Identifier	stop_iter
>733	UnaryOperator	&
>734	Callee	gettimeofday
>735	Identifier	gettimeofday
>736	IfStatement	if ( write_intermediate )
>737	CompoundStatement	 
>738	ExpressionStatement	 
>739	CallExpression	DumpOutputFile ( m_output_directory , buf , GetNumImages ( ) , num_cameras , num_pts , added_order , init_camera_\
>740	ArgumentList	m_output_directory
>741	Argument	pt_views
>742	Identifier	pt_views
>743	Argument	colors
>744	Identifier	colors
>745	Argument	init_pts
>746	Identifier	init_pts
>747	Argument	init_camera_params
>748	Identifier	init_camera_params
>749	Argument	added_order
>750	Identifier	added_order
>751	Argument	num_pts
>752	Identifier	num_pts
>753	Argument	num_cameras
>754	Identifier	num_cameras
>755	Argument	GetNumImages ( )
>756	CallExpression	GetNumImages ( )
>757	ArgumentList	 
>758	Callee	GetNumImages
>759	Identifier	GetNumImages
>760	Argument	buf
>761	Identifier	buf
>762	Argument	m_output_directory
>763	Identifier	m_output_directory
>764	Callee	DumpOutputFile
>765	Identifier	DumpOutputFile
>766	ExpressionStatement	 
>767	CallExpression	sprintf ( buf , \"%sBA.%d.out\" , m_bundle_output_base , round )
>768	ArgumentList	buf
>769	Argument	round
>770	Identifier	round
>771	Argument	m_bundle_output_base
>772	Identifier	m_bundle_output_base
>773	Argument	\"%sBA.%d.out\"
>774	PrimaryExpression	\"%sBA.%d.out\"
>775	Argument	buf
>776	Identifier	buf
>777	Callee	sprintf
>778	Identifier	sprintf
>779	IdentifierDeclStatement	 
>780	IdentifierDecl	buf [ 256 ]
>781	PrimaryExpression	256
>782	Identifier	buf
>783	IdentifierDeclType	char [ 256 ]
>784	Condition	 
>785	Identifier	write_intermediate
>786	IfStatement	if ( ! remove_outliers )
>787	BreakStatement	 
>788	Condition	 
>789	UnaryOp	! remove_outliers
>790	Identifier	remove_outliers
>791	UnaryOperator	!
>792	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>793	CompoundStatement	 
>794	IfStatement	if ( remap [ i ] != - 1 )
>795	CompoundStatement	 
>796	ExpressionStatement	 
>797	AssignmentExpr	init_pts [ i ] = nz_pts [ remap [ i ] ]
>798	ArrayIndexing	nz_pts [ remap [ i ] ]
>799	ArrayIndexing	remap [ i ]
>800	Identifier	i
>801	Identifier	remap
>802	Identifier	nz_pts
>803	ArrayIndexing	init_pts [ i ]
>804	Identifier	i
>805	Identifier	init_pts
>806	Condition	 
>807	EqualityExpression	remap [ i ] != - 1
>808	UnaryOp	- 1
>809	PrimaryExpression	1
>810	UnaryOperator	-
>811	ArrayIndexing	remap [ i ]
>812	Identifier	i
>813	Identifier	remap
>814	IncDecOp	 
>815	IncDec	++
>816	Identifier	i
>817	Condition	 
>818	RelationalExpression	i < num_pts
>819	Identifier	num_pts
>820	Identifier	i
>821	ForInit	 
>822	IdentifierDeclStatement	int i = 0 ;
>823	IdentifierDecl	i = 0
>824	AssignmentExpr	i = 0
>825	PrimaryExpression	0
>826	Identifier	i
>827	Identifier	i
>828	IdentifierDeclType	int
>829	ExpressionStatement	 
>830	Identifier	num_vis
>831	Statement	 
>832	Statement	 
>833	Statement	 
>834	ExpressionStatement	 
>835	Identifier	pidx
>836	Statement	 
>837	Statement	 
>838	Statement	 
>839	ExpressionStatement	 
>840	Identifier	cidx
>841	Statement	 
>842	Statement	 
>843	Statement	 
>844	ExpressionStatement	 
>845	Identifier	init_x
>846	Statement	 
>847	Statement	 
>848	Statement	 
>849	ExpressionStatement	 
>850	Identifier	projections
>851	Statement	 
>852	Statement	 
>853	Statement	 
>854	IfStatement	if ( ( ! final_bundle || round > 0 ) && remove_outliers )
>855	ElseStatement	else
>856	IfStatement	if ( round == 0 )
>857	CompoundStatement	 
>858	ExpressionStatement	 
>859	AssignmentExpr	num_outliers = MIN_OUTLIERS + 1
>860	AdditiveExpression	MIN_OUTLIERS + 1
>861	PrimaryExpression	1
>862	Identifier	MIN_OUTLIERS
>863	Identifier	num_outliers
>864	ExpressionStatement	 
>865	CallExpression	RemoveBadPointsAndCameras ( num_pts , num_cameras , added_order , init_camera_params , init_pts , colors , pt_views )
>866	ArgumentList	num_pts
>867	Argument	pt_views
>868	Identifier	pt_views
>869	Argument	colors
>870	Identifier	colors
>871	Argument	init_pts
>872	Identifier	init_pts
>873	Argument	init_camera_params
>874	Identifier	init_camera_params
>875	Argument	added_order
>876	Identifier	added_order
>877	Argument	num_cameras
>878	Identifier	num_cameras
>879	Argument	num_pts
>880	Identifier	num_pts
>881	Callee	RemoveBadPointsAndCameras
>882	Identifier	RemoveBadPointsAndCameras
>883	Condition	 
>884	EqualityExpression	round == 0
>885	PrimaryExpression	0
>886	Identifier	round
>887	CompoundStatement	 
>888	ExpressionStatement	 
>889	CallExpression	RemoveBadPointsAndCameras ( num_pts , num_cameras , added_order , init_camera_params , init_pts , colors , pt_views )
>890	ArgumentList	num_pts
>891	Argument	pt_views
>892	Identifier	pt_views
>893	Argument	colors
>894	Identifier	colors
>895	Argument	init_pts
>896	Identifier	init_pts
>897	Argument	init_camera_params
>898	Identifier	init_camera_params
>899	Argument	added_order
>900	Identifier	added_order
>901	Argument	num_cameras
>902	Identifier	num_cameras
>903	Argument	num_pts
>904	Identifier	num_pts
>905	Callee	RemoveBadPointsAndCameras
>906	Identifier	RemoveBadPointsAndCameras
>907	ExpressionStatement	 
>908	CallExpression	printf ( \"[RunSFM] %d points completely removed\n\" , num_dead )
>909	ArgumentList	\"[RunSFM] %d points completely removed\n\"
>910	Argument	num_dead
>911	Identifier	num_dead
>912	Argument	\"[RunSFM] %d points completely removed\n\"
>913	PrimaryExpression	\"[RunSFM] %d points completely removed\n\"
>914	Callee	printf
>915	Identifier	printf
>916	ExpressionStatement	 
>917	CallExpression	printf ( \"[RunSFM] Removing %d outlier views\n\" , ( int ) outliers . size ( ) )
>918	ArgumentList	\"[RunSFM] Removing %d outlier views\n\"
>919	Argument	( int ) outliers . size ( )
>920	CastExpression	( int ) outliers . size ( )
>921	CallExpression	outliers . size ( )
>922	ArgumentList	 
>923	Callee	outliers . size
>924	MemberAccess	outliers . size
>925	Identifier	size
>926	Identifier	outliers
>927	CastTarget	int
>928	Argument	\"[RunSFM] Removing %d outlier views\n\"
>929	PrimaryExpression	\"[RunSFM] Removing %d outlier views\n\"
>930	Callee	printf
>931	Identifier	printf
>932	ExpressionStatement	 
>933	CallExpression	printf ( \"[RunSFM] outlier removal took %0.3fs\n\" , ( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC )
>934	ArgumentList	\"[RunSFM] outlier removal took %0.3fs\n\"
>935	Argument	( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC
>936	MultiplicativeExpression	( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC
>937	CastExpression	( double ) CLOCKS_PER_SEC
>938	Identifier	CLOCKS_PER_SEC
>939	CastTarget	double
>940	CastExpression	( double ) ( end - start )
>941	AdditiveExpression	end - start
>942	Identifier	start
>943	Identifier	end
>944	CastTarget	double
>945	Argument	\"[RunSFM] outlier removal took %0.3fs\n\"
>946	PrimaryExpression	\"[RunSFM] outlier removal took %0.3fs\n\"
>947	Callee	printf
>948	Identifier	printf
>949	ExpressionStatement	 
>950	AssignmentExpr	end = clock ( )
>951	CallExpression	clock ( )
>952	ArgumentList	 
>953	Callee	clock
>954	Identifier	clock
>955	Identifier	end
>956	ExpressionStatement	 
>957	AssignmentExpr	total_outliers += num_outliers
>958	Identifier	num_outliers
>959	Identifier	total_outliers
>960	ExpressionStatement	 
>961	AssignmentExpr	num_outliers = outliers . size ( )
>962	CallExpression	outliers . size ( )
>963	ArgumentList	 
>964	Callee	outliers . size
>965	MemberAccess	outliers . size
>966	Identifier	size
>967	Identifier	outliers
>968	Identifier	num_outliers
>969	ForStatement	for ( int i = 0 ; i < ( int ) outliers . size ( ) ; i ++ )
>970	CompoundStatement	 
>971	ExpressionStatement	 
>972	CallExpression	pt_views [ idx ] . clear ( )
>973	ArgumentList	 
>974	Callee	pt_views [ idx ] . clear
>975	MemberAccess	pt_views [ idx ] . clear
>976	Identifier	clear
>977	ArrayIndexing	pt_views [ idx ]
>978	Identifier	idx
>979	Identifier	pt_views
>980	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>981	CompoundStatement	 
>982	ExpressionStatement	 
>983	AssignmentExpr	GetKey ( added_order [ v ] , k ) . m_extra = - 2
>984	UnaryOp	- 2
>985	PrimaryExpression	2
>986	UnaryOperator	-
>987	MemberAccess	GetKey ( added_order [ v ] , k ) . m_extra
>988	Identifier	m_extra
>989	CallExpression	GetKey ( added_order [ v ] , k )
>990	ArgumentList	added_order [ v ]
>991	Argument	k
>992	Identifier	k
>993	Argument	added_order [ v ]
>994	ArrayIndexing	added_order [ v ]
>995	Identifier	v
>996	Identifier	added_order
>997	Callee	GetKey
>998	Identifier	GetKey
>999	ExpressionStatement	 
>1000	Statement	 
>1001	Statement	 
>1002	Statement	 
>1003	Statement	 
>1004	Statement	 
>1005	Statement	 
>1006	Statement	 
>1007	Statement	 
>1008	Statement	 
>1009	Statement	 
>1010	Statement	 
>1011	Statement	 
>1012	Statement	 
>1013	Statement	 
>1014	Statement	 
>1015	Statement	 
>1016	Statement	 
>1017	Statement	 
>1018	Statement	 
>1019	Statement	 
>1020	Statement	 
>1021	Statement	 
>1022	Statement	 
>1023	Statement	 
>1024	Statement	 
>1025	IfStatement	if ( GetKey ( added_order [ v ] , k ) . m_extra != idx )
>1026	Statement	 
>1027	Condition	 
>1028	EqualityExpression	GetKey ( added_order [ v ] , k ) . m_extra != idx
>1029	Identifier	idx
>1030	MemberAccess	GetKey ( added_order [ v ] , k ) . m_extra
>1031	Identifier	m_extra
>1032	CallExpression	GetKey ( added_order [ v ] , k )
>1033	ArgumentList	added_order [ v ]
>1034	Argument	k
>1035	Identifier	k
>1036	Argument	added_order [ v ]
>1037	ArrayIndexing	added_order [ v ]
>1038	Identifier	v
>1039	Identifier	added_order
>1040	Callee	GetKey
>1041	Identifier	GetKey
>1042	IdentifierDeclStatement	 
>1043	IdentifierDecl	k = pt_views [ idx ] [ j ] . second
>1044	AssignmentExpr	k = pt_views [ idx ] [ j ] . second
>1045	MemberAccess	pt_views [ idx ] [ j ] . second
>1046	Identifier	second
>1047	ArrayIndexing	pt_views [ idx ] [ j ]
>1048	Identifier	j
>1049	ArrayIndexing	pt_views [ idx ]
>1050	Identifier	idx
>1051	Identifier	pt_views
>1052	Identifier	k
>1053	Identifier	k
>1054	IdentifierDeclType	int
>1055	IdentifierDeclStatement	 
>1056	IdentifierDecl	v = pt_views [ idx ] [ j ] . first
>1057	AssignmentExpr	v = pt_views [ idx ] [ j ] . first
>1058	MemberAccess	pt_views [ idx ] [ j ] . first
>1059	Identifier	first
>1060	ArrayIndexing	pt_views [ idx ] [ j ]
>1061	Identifier	j
>1062	ArrayIndexing	pt_views [ idx ]
>1063	Identifier	idx
>1064	Identifier	pt_views
>1065	Identifier	v
>1066	Identifier	v
>1067	IdentifierDeclType	int
>1068	IncDecOp	 
>1069	IncDec	++
>1070	Identifier	j
>1071	Condition	 
>1072	RelationalExpression	j < num_views
>1073	Identifier	num_views
>1074	Identifier	j
>1075	ForInit	 
>1076	IdentifierDeclStatement	int j = 0 ;
>1077	IdentifierDecl	j = 0
>1078	AssignmentExpr	j = 0
>1079	PrimaryExpression	0
>1080	Identifier	j
>1081	Identifier	j
>1082	IdentifierDeclType	int
>1083	IdentifierDeclStatement	 
>1084	IdentifierDecl	rem_idx = - 1
>1085	AssignmentExpr	rem_idx = - 1
>1086	UnaryOp	- 1
>1087	PrimaryExpression	1
>1088	UnaryOperator	-
>1089	Identifier	rem_idx
>1090	Identifier	rem_idx
>1091	IdentifierDeclType	int
>1092	IdentifierDeclStatement	 
>1093	IdentifierDecl	num_views = ( int ) pt_views [ idx ] . size ( )
>1094	AssignmentExpr	num_views = ( int ) pt_views [ idx ] . size ( )
>1095	CastExpression	( int ) pt_views [ idx ] . size ( )
>1096	CallExpression	pt_views [ idx ] . size ( )
>1097	ArgumentList	 
>1098	Callee	pt_views [ idx ] . size
>1099	MemberAccess	pt_views [ idx ] . size
>1100	Identifier	size
>1101	ArrayIndexing	pt_views [ idx ]
>1102	Identifier	idx
>1103	Identifier	pt_views
>1104	CastTarget	int
>1105	Identifier	num_views
>1106	Identifier	num_views
>1107	IdentifierDeclType	int
>1108	ExpressionStatement	 
>1109	Statement	 
>1110	Statement	 
>1111	Statement	 
>1112	Statement	 
>1113	Statement	 
>1114	Statement	 
>1115	Statement	 
>1116	Statement	 
>1117	Statement	 
>1118	Statement	 
>1119	Statement	 
>1120	Statement	 
>1121	IdentifierDeclStatement	 
>1122	IdentifierDecl	img_idx = outlier_views [ i ]
>1123	AssignmentExpr	img_idx = outlier_views [ i ]
>1124	ArrayIndexing	outlier_views [ i ]
>1125	Identifier	i
>1126	Identifier	outlier_views
>1127	Identifier	img_idx
>1128	Identifier	img_idx
>1129	IdentifierDeclType	int
>1130	IdentifierDeclStatement	 
>1131	IdentifierDecl	idx = outliers [ i ]
>1132	AssignmentExpr	idx = outliers [ i ]
>1133	ArrayIndexing	outliers [ i ]
>1134	Identifier	i
>1135	Identifier	outliers
>1136	Identifier	idx
>1137	Identifier	idx
>1138	IdentifierDeclType	int
>1139	IncDecOp	 
>1140	IncDec	++
>1141	Identifier	i
>1142	Condition	 
>1143	RelationalExpression	i < ( int ) outliers . size ( )
>1144	CastExpression	( int ) outliers . size ( )
>1145	CallExpression	outliers . size ( )
>1146	ArgumentList	 
>1147	Callee	outliers . size
>1148	MemberAccess	outliers . size
>1149	Identifier	size
>1150	Identifier	outliers
>1151	CastTarget	int
>1152	Identifier	i
>1153	ForInit	 
>1154	IdentifierDeclStatement	int i = 0 ;
>1155	IdentifierDecl	i = 0
>1156	AssignmentExpr	i = 0
>1157	PrimaryExpression	0
>1158	Identifier	i
>1159	Identifier	i
>1160	IdentifierDeclType	int
>1161	IdentifierDeclStatement	 
>1162	IdentifierDecl	num_dead = 0
>1163	AssignmentExpr	num_dead = 0
>1164	PrimaryExpression	0
>1165	Identifier	num_dead
>1166	Identifier	num_dead
>1167	IdentifierDeclType	int
>1168	Condition	 
>1169	AndExpression	( ! final_bundle || round > 0 ) && remove_outliers
>1170	Identifier	remove_outliers
>1171	OrExpression	! final_bundle || round > 0
>1172	RelationalExpression	round > 0
>1173	PrimaryExpression	0
>1174	Identifier	round
>1175	UnaryOp	! final_bundle
>1176	Identifier	final_bundle
>1177	UnaryOperator	!
>1178	ExpressionStatement	 
>1179	Statement	 
>1180	Statement	 
>1181	Statement	 
>1182	Statement	 
>1183	Statement	 
>1184	Statement	 
>1185	Statement	 
>1186	Statement	 
>1187	Statement	 
>1188	Statement	 
>1189	Statement	 
>1190	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>1191	CompoundStatement	 
>1192	ExpressionStatement	 
>1193	Identifier	dists
>1194	Statement	 
>1195	Statement	 
>1196	Statement	 
>1197	ForStatement	for ( int i = 0 ; i < NUM_ERROR_BINS ; i ++ )
>1198	CompoundStatement	 
>1199	ExpressionStatement	 
>1200	CallExpression	printf ( \"   E[%0.3e--%0.3e]
>1201	ArgumentList	\"   E[%0.3e--%0.3e]
>1202	Argument	bin_size / ( double ) num_pts_proj
>1203	MultiplicativeExpression	bin_size / ( double ) num_pts_proj
>1204	CastExpression	( double ) num_pts_proj
>1205	Identifier	num_pts_proj
>1206	CastTarget	double
>1207	Identifier	bin_size
>1208	Argument	bin_size
>1209	Identifier	bin_size
>1210	Argument	max
>1211	Identifier	max
>1212	Argument	max - pr_step
>1213	AdditiveExpression	max - pr_step
>1214	Identifier	pr_step
>1215	Identifier	max
>1216	Argument	\"   E[%0.3e--%0.3e]
>1217	PrimaryExpression	\"   E[%0.3e--%0.3e]
>1218	Callee	printf
>1219	Identifier	printf
>1220	IdentifierDeclStatement	 
>1221	IdentifierDecl	bin_size = idx_count - start
>1222	AssignmentExpr	bin_size = idx_count - start
>1223	AdditiveExpression	idx_count - start
>1224	Identifier	start
>1225	Identifier	idx_count
>1226	Identifier	bin_size
>1227	Identifier	bin_size
>1228	IdentifierDeclType	int
>1229	WhileStatement	while ( idx_count < num_pts_proj && dists [ idx_count ] <= max )
>1230	ExpressionStatement	 
>1231	IncDecOp	idx_count ++
>1232	IncDec	++
>1233	Identifier	idx_count
>1234	Condition	 
>1235	AndExpression	idx_count < num_pts_proj && dists [ idx_count ] <= max
>1236	RelationalExpression	dists [ idx_count ] <= max
>1237	Identifier	max
>1238	ArrayIndexing	dists [ idx_count ]
>1239	Identifier	idx_count
>1240	Identifier	dists
>1241	RelationalExpression	idx_count < num_pts_proj
>1242	Identifier	num_pts_proj
>1243	Identifier	idx_count
>1244	IdentifierDeclStatement	 
>1245	IdentifierDecl	start = idx_count
>1246	AssignmentExpr	start = idx_count
>1247	Identifier	idx_count
>1248	Identifier	idx_count
>1249	Identifier	start
>1250	IdentifierDeclType	int
>1251	IdentifierDeclStatement	 
>1252	IdentifierDecl	max = pr_min + ( i + 1 ) * pr_step
>1253	AssignmentExpr	max = pr_min + ( i + 1 ) * pr_step
>1254	AdditiveExpression	pr_min + ( i + 1 ) * pr_step
>1255	MultiplicativeExpression	( i + 1 ) * pr_step
>1256	Identifier	pr_step
>1257	AdditiveExpression	i + 1
>1258	PrimaryExpression	1
>1259	Identifier	i
>1260	Identifier	pr_min
>1261	Identifier	max
>1262	Identifier	max
>1263	IdentifierDeclType	double
>1264	IncDecOp	 
>1265	IncDec	++
>1266	Identifier	i
>1267	Condition	 
>1268	RelationalExpression	i < NUM_ERROR_BINS
>1269	Identifier	NUM_ERROR_BINS
>1270	Identifier	i
>1271	ForInit	 
>1272	IdentifierDeclStatement	int i = 0 ;
>1273	IdentifierDecl	i = 0
>1274	AssignmentExpr	i = 0
>1275	PrimaryExpression	0
>1276	Identifier	i
>1277	Identifier	i
>1278	IdentifierDeclType	int
>1279	IdentifierDeclStatement	 
>1280	IdentifierDecl	idx_count = 0
>1281	AssignmentExpr	idx_count = 0
>1282	PrimaryExpression	0
>1283	Identifier	idx_count
>1284	Identifier	idx_count
>1285	IdentifierDeclType	int
>1286	IdentifierDeclStatement	 
>1287	IdentifierDecl	pr_step = ( pr_max - pr_min ) / NUM_ERROR_BINS
>1288	AssignmentExpr	pr_step = ( pr_max - pr_min ) / NUM_ERROR_BINS
>1289	MultiplicativeExpression	( pr_max - pr_min ) / NUM_ERROR_BINS
>1290	Identifier	NUM_ERROR_BINS
>1291	AdditiveExpression	pr_max - pr_min
>1292	Identifier	pr_min
>1293	Identifier	pr_max
>1294	Identifier	pr_step
>1295	Identifier	pr_step
>1296	IdentifierDeclType	double
>1297	IdentifierDeclStatement	 
>1298	IdentifierDecl	pr_max = dists [ num_pts_proj - 1 ]
>1299	AssignmentExpr	pr_max = dists [ num_pts_proj - 1 ]
>1300	ArrayIndexing	dists [ num_pts_proj - 1 ]
>1301	AdditiveExpression	num_pts_proj - 1
>1302	PrimaryExpression	1
>1303	Identifier	num_pts_proj
>1304	Identifier	dists
>1305	Identifier	pr_max
>1306	Identifier	pr_max
>1307	IdentifierDeclType	double
>1308	IdentifierDeclStatement	 
>1309	IdentifierDecl	pr_min = dists [ 0 ]
>1310	AssignmentExpr	pr_min = dists [ 0 ]
>1311	ArrayIndexing	dists [ 0 ]
>1312	PrimaryExpression	0
>1313	Identifier	dists
>1314	Identifier	pr_min
>1315	Identifier	pr_min
>1316	IdentifierDeclType	double
>1317	ExpressionStatement	 
>1318	CallExpression	qsort ( dists , num_pts_proj , sizeof ( double ) , compare_doubles )
>1319	ArgumentList	dists
>1320	Argument	compare_doubles
>1321	Identifier	compare_doubles
>1322	Argument	sizeof ( double )
>1323	SizeofExpr	sizeof ( double )
>1324	SizeofOperand	double
>1325	Sizeof	sizeof
>1326	Argument	num_pts_proj
>1327	Identifier	num_pts_proj
>1328	Argument	dists
>1329	Identifier	dists
>1330	Callee	qsort
>1331	Identifier	qsort
>1332	Statement	 
>1333	Statement	 
>1334	Statement	 
>1335	Statement	 
>1336	Statement	 
>1337	ForStatement	for ( int j = 0 ; j < num_keys ; j ++ )
>1338	CompoundStatement	 
>1339	ExpressionStatement	 
>1340	IncDecOp	pt_count ++
>1341	IncDec	++
>1342	Identifier	pt_count
>1343	IfStatement	if ( dists [ pt_count ] > thresh || in_back [ pt_count ] )
>1344	CompoundStatement	 
>1345	IfStatement	if ( ! found )
>1346	CompoundStatement	 
>1347	ExpressionStatement	 
>1348	CallExpression	reproj_errors . push_back ( dists [ pt_count ] )
>1349	ArgumentList	dists [ pt_count ]
>1350	Argument	dists [ pt_count ]
>1351	ArrayIndexing	dists [ pt_count ]
>1352	Identifier	pt_count
>1353	Identifier	dists
>1354	Callee	reproj_errors . push_back
>1355	MemberAccess	reproj_errors . push_back
>1356	Identifier	push_back
>1357	Identifier	reproj_errors
>1358	ExpressionStatement	 
>1359	CallExpression	outlier_views . push_back ( i )
>1360	ArgumentList	i
>1361	Argument	i
>1362	Identifier	i
>1363	Callee	outlier_views . push_back
>1364	MemberAccess	outlier_views . push_back
>1365	Identifier	push_back
>1366	Identifier	outlier_views
>1367	ExpressionStatement	 
>1368	CallExpression	outliers . push_back ( pt_idx )
>1369	ArgumentList	pt_idx
>1370	Argument	pt_idx
>1371	Identifier	pt_idx
>1372	Callee	outliers . push_back
>1373	MemberAccess	outliers . push_back
>1374	Identifier	push_back
>1375	Identifier	outliers
>1376	Condition	 
>1377	UnaryOp	! found
>1378	Identifier	found
>1379	UnaryOperator	!
>1380	ForStatement	for ( int k = 0 ; k < ( int ) outliers . size ( ) ; k ++ )
>1381	CompoundStatement	 
>1382	IfStatement	if ( outliers [ k ] == pt_idx )
>1383	CompoundStatement	 
>1384	BreakStatement	 
>1385	ExpressionStatement	 
>1386	AssignmentExpr	found = true
>1387	Identifier	true
>1388	Identifier	found
>1389	Condition	 
>1390	EqualityExpression	outliers [ k ] == pt_idx
>1391	Identifier	pt_idx
>1392	ArrayIndexing	outliers [ k ]
>1393	Identifier	k
>1394	Identifier	outliers
>1395	IncDecOp	 
>1396	IncDec	++
>1397	Identifier	k
>1398	Condition	 
>1399	RelationalExpression	k < ( int ) outliers . size ( )
>1400	CastExpression	( int ) outliers . size ( )
>1401	CallExpression	outliers . size ( )
>1402	ArgumentList	 
>1403	Callee	outliers . size
>1404	MemberAccess	outliers . size
>1405	Identifier	size
>1406	Identifier	outliers
>1407	CastTarget	int
>1408	Identifier	k
>1409	ForInit	 
>1410	IdentifierDeclStatement	int k = 0 ;
>1411	IdentifierDecl	k = 0
>1412	AssignmentExpr	k = 0
>1413	PrimaryExpression	0
>1414	Identifier	k
>1415	Identifier	k
>1416	IdentifierDeclType	int
>1417	IdentifierDeclStatement	 
>1418	IdentifierDecl	found = false
>1419	AssignmentExpr	found = false
>1420	Identifier	false
>1421	Identifier	false
>1422	Identifier	found
>1423	IdentifierDeclType	bool
>1424	Statement	 
>1425	Statement	 
>1426	Condition	 
>1427	OrExpression	dists [ pt_count ] > thresh || in_back [ pt_count ]
>1428	ArrayIndexing	in_back [ pt_count ]
>1429	Identifier	pt_count
>1430	Identifier	in_back
>1431	RelationalExpression	dists [ pt_count ] > thresh
>1432	Identifier	thresh
>1433	ArrayIndexing	dists [ pt_count ]
>1434	Identifier	pt_count
>1435	Identifier	dists
>1436	IfStatement	if ( m_use_point_constraints && Vx ( m_point_constraints [ pt_idx ] ) != 0.0 )
>1437	CompoundStatement	 
>1438	ContinueStatement	 
>1439	ExpressionStatement	 
>1440	IncDecOp	pt_count ++
>1441	IncDec	++
>1442	Identifier	pt_count
>1443	Condition	 
>1444	AndExpression	m_use_point_constraints && Vx ( m_point_constraints [ pt_idx ] ) != 0.0
>1445	EqualityExpression	Vx ( m_point_constraints [ pt_idx ] ) != 0.0
>1446	PrimaryExpression	0.0
>1447	CallExpression	Vx ( m_point_constraints [ pt_idx ] )
>1448	ArgumentList	m_point_constraints [ pt_idx ]
>1449	Argument	m_point_constraints [ pt_idx ]
>1450	ArrayIndexing	m_point_constraints [ pt_idx ]
>1451	Identifier	pt_idx
>1452	Identifier	m_point_constraints
>1453	Callee	Vx
>1454	Identifier	Vx
>1455	Identifier	m_use_point_constraints
>1456	IfStatement	if ( pt_idx < 0 )
>1457	ContinueStatement	 
>1458	Condition	 
>1459	RelationalExpression	pt_idx < 0
>1460	PrimaryExpression	0
>1461	Identifier	pt_idx
>1462	IdentifierDeclStatement	 
>1463	IdentifierDecl	pt_idx = GetKey ( added_order [ i ] , j ) . m_extra
>1464	AssignmentExpr	pt_idx = GetKey ( added_order [ i ] , j ) . m_extra
>1465	MemberAccess	GetKey ( added_order [ i ] , j ) . m_extra
>1466	Identifier	m_extra
>1467	CallExpression	GetKey ( added_order [ i ] , j )
>1468	ArgumentList	added_order [ i ]
>1469	Argument	j
>1470	Identifier	j
>1471	Argument	added_order [ i ]
>1472	ArrayIndexing	added_order [ i ]
>1473	Identifier	i
>1474	Identifier	added_order
>1475	Callee	GetKey
>1476	Identifier	GetKey
>1477	Identifier	pt_idx
>1478	Identifier	pt_idx
>1479	IdentifierDeclType	int
>1480	IncDecOp	 
>1481	IncDec	++
>1482	Identifier	j
>1483	Condition	 
>1484	RelationalExpression	j < num_keys
>1485	Identifier	num_keys
>1486	Identifier	j
>1487	ForInit	 
>1488	IdentifierDeclStatement	int j = 0 ;
>1489	IdentifierDecl	j = 0
>1490	AssignmentExpr	j = 0
>1491	PrimaryExpression	0
>1492	Identifier	j
>1493	Identifier	j
>1494	IdentifierDeclType	int
>1495	ExpressionStatement	 
>1496	AssignmentExpr	pt_count = 0
>1497	PrimaryExpression	0
>1498	Identifier	pt_count
>1499	ExpressionStatement	 
>1500	AssignmentExpr	global_num_observations += num_pts_proj
>1501	Identifier	num_pts_proj
>1502	Identifier	global_num_observations
>1503	ExpressionStatement	 
>1504	AssignmentExpr	global_reprojection_error += sum
>1505	Identifier	sum
>1506	Identifier	global_reprojection_error
>1507	ExpressionStatement	 
>1508	Statement	 
>1509	Statement	 
>1510	Statement	 
>1511	Statement	 
>1512	Statement	 
>1513	Statement	 
>1514	Statement	 
>1515	Statement	 
>1516	Statement	 
>1517	Statement	 
>1518	Statement	 
>1519	Statement	 
>1520	Statement	 
>1521	Statement	 
>1522	Statement	 
>1523	Statement	 
>1524	Statement	 
>1525	Statement	 
>1526	Statement	 
>1527	Statement	 
>1528	Statement	 
>1529	Statement	 
>1530	Statement	 
>1531	Statement	 
>1532	Statement	 
>1533	Statement	 
>1534	Statement	 
>1535	Statement	 
>1536	Statement	 
>1537	Statement	 
>1538	Statement	 
>1539	Statement	 
>1540	IdentifierDeclStatement	 
>1541	IdentifierDecl	avg = sum / num_pts_proj
>1542	AssignmentExpr	avg = sum / num_pts_proj
>1543	MultiplicativeExpression	sum / num_pts_proj
>1544	Identifier	num_pts_proj
>1545	Identifier	sum
>1546	Identifier	avg
>1547	Identifier	avg
>1548	IdentifierDeclType	double
>1549	ForStatement	for ( int j = 0 ; j < num_pts_proj ; j ++ )
>1550	CompoundStatement	 
>1551	ExpressionStatement	 
>1552	AssignmentExpr	sum += dists [ j ]
>1553	ArrayIndexing	dists [ j ]
>1554	Identifier	j
>1555	Identifier	dists
>1556	Identifier	sum
>1557	IncDecOp	 
>1558	IncDec	++
>1559	Identifier	j
>1560	Condition	 
>1561	RelationalExpression	j < num_pts_proj
>1562	Identifier	num_pts_proj
>1563	Identifier	j
>1564	ForInit	 
>1565	IdentifierDeclStatement	int j = 0 ;
>1566	IdentifierDecl	j = 0
>1567	AssignmentExpr	j = 0
>1568	PrimaryExpression	0
>1569	Identifier	j
>1570	Identifier	j
>1571	IdentifierDeclType	int
>1572	IdentifierDeclStatement	 
>1573	IdentifierDecl	sum = 0.0
>1574	AssignmentExpr	sum = 0.0
>1575	PrimaryExpression	0.0
>1576	Identifier	sum
>1577	Identifier	sum
>1578	IdentifierDeclType	double
>1579	ExpressionStatement	 
>1580	AssignmentExpr	thresh = CLAMP ( thresh , m_min_proj_error_threshold , m_max_proj_error_threshold )
>1581	CallExpression	CLAMP ( thresh , m_min_proj_error_threshold , m_max_proj_error_threshold )
>1582	ArgumentList	thresh
>1583	Argument	m_max_proj_error_threshold
>1584	Identifier	m_max_proj_error_threshold
>1585	Argument	m_min_proj_error_threshold
>1586	Identifier	m_min_proj_error_threshold
>1587	Argument	thresh
>1588	Identifier	thresh
>1589	Callee	CLAMP
>1590	Identifier	CLAMP
>1591	Identifier	thresh
>1592	IdentifierDeclStatement	 
>1593	IdentifierDecl	thresh = 1.2 * NUM_STDDEV * med
>1594	AssignmentExpr	thresh = 1.2 * NUM_STDDEV * med
>1595	MultiplicativeExpression	1.2 * NUM_STDDEV * med
>1596	MultiplicativeExpression	NUM_STDDEV * med
>1597	Identifier	med
>1598	Identifier	NUM_STDDEV
>1599	PrimaryExpression	1.2
>1600	Identifier	thresh
>1601	Identifier	thresh
>1602	IdentifierDeclType	double
>1603	Statement	 
>1604	Statement	 
>1605	Statement	 
>1606	ExpressionStatement	 
>1607	CallExpression	median_copy ( num_pts_proj , dists )
>1608	ArgumentList	num_pts_proj
>1609	Argument	dists
>1610	Identifier	dists
>1611	Argument	num_pts_proj
>1612	Identifier	num_pts_proj
>1613	Callee	median_copy
>1614	Identifier	median_copy
>1615	IdentifierDeclStatement	 
>1616	IdentifierDecl	med = kth_element_copy ( num_pts_proj , iround ( 0.8 * num_pts_proj ) , dists )
>1617	AssignmentExpr	med = kth_element_copy ( num_pts_proj , iround ( 0.8 * num_pts_proj ) , dists )
>1618	CallExpression	kth_element_copy ( num_pts_proj , iround ( 0.8 * num_pts_proj ) , dists )
>1619	ArgumentList	num_pts_proj
>1620	Argument	dists
>1621	Identifier	dists
>1622	Argument	iround ( 0.8 * num_pts_proj )
>1623	CallExpression	iround ( 0.8 * num_pts_proj )
>1624	ArgumentList	0.8 * num_pts_proj
>1625	Argument	0.8 * num_pts_proj
>1626	MultiplicativeExpression	0.8 * num_pts_proj
>1627	Identifier	num_pts_proj
>1628	PrimaryExpression	0.8
>1629	Callee	iround
>1630	Identifier	iround
>1631	Argument	num_pts_proj
>1632	Identifier	num_pts_proj
>1633	Callee	kth_element_copy
>1634	Identifier	kth_element_copy
>1635	Identifier	med
>1636	Identifier	med
>1637	IdentifierDeclType	double
>1638	IfStatement	if ( num_pts_proj == 0 )
>1639	ContinueStatement	 
>1640	Condition	 
>1641	EqualityExpression	num_pts_proj == 0
>1642	PrimaryExpression	0
>1643	Identifier	num_pts_proj
>1644	ForStatement	for ( iter = m_image_data [ added_order [ i ] ] . m_keys . begin ( ) ; iter != m_image_data [ added_order [ i ] ] \
>1645	CompoundStatement	 
>1646	IfStatement	if ( key . m_extra >= 0 )
>1647	CompoundStatement	 
>1648	ExpressionStatement	 
>1649	IncDecOp	pt_count ++
>1650	IncDec	++
>1651	Identifier	pt_count
>1652	ExpressionStatement	 
>1653	AssignmentExpr	dists [ pt_count ] = dist
>1654	Identifier	dist
>1655	ArrayIndexing	dists [ pt_count ]
>1656	Identifier	pt_count
>1657	Identifier	dists
>1658	ExpressionStatement	 
>1659	IncDecOp	num_dists ++
>1660	IncDec	++
>1661	Identifier	num_dists
>1662	ExpressionStatement	 
>1663	AssignmentExpr	dist_total += dist
>1664	Identifier	dist
>1665	Identifier	dist_total
>1666	ExpressionStatement	 
>1667	AssignmentExpr	dist = sqrt ( dx * dx + dy * dy )
>1668	CallExpression	sqrt ( dx * dx + dy * dy )
>1669	ArgumentList	dx * dx + dy * dy
>1670	Argument	dx * dx + dy * dy
>1671	AdditiveExpression	dx * dx + dy * dy
>1672	MultiplicativeExpression	dy * dy
>1673	Identifier	dy
>1674	Identifier	dy
>1675	MultiplicativeExpression	dx * dx
>1676	Identifier	dx
>1677	Identifier	dx
>1678	Callee	sqrt
>1679	Identifier	sqrt
>1680	Identifier	dist
>1681	ExpressionStatement	 
>1682	AssignmentExpr	dy = pr [ 1 ] - key . m_y
>1683	AdditiveExpression	pr [ 1 ] - key . m_y
>1684	MemberAccess	key . m_y
>1685	Identifier	m_y
>1686	Identifier	key
>1687	ArrayIndexing	pr [ 1 ]
>1688	PrimaryExpression	1
>1689	Identifier	pr
>1690	Identifier	dy
>1691	ExpressionStatement	 
>1692	AssignmentExpr	dx = pr [ 0 ] - key . m_x
>1693	AdditiveExpression	pr [ 0 ] - key . m_x
>1694	MemberAccess	key . m_x
>1695	Identifier	m_x
>1696	Identifier	key
>1697	ArrayIndexing	pr [ 0 ]
>1698	PrimaryExpression	0
>1699	Identifier	pr
>1700	Identifier	dx
>1701	IfStatement	if ( m_optimize_for_fisheye )
>1702	CompoundStatement	 
>1703	ExpressionStatement	 
>1704	CallExpression	m_image_data [ added_order [ i ] ] . DistortPoint ( x , y , pr [ 0 ] , pr [ 1 ] )
>1705	ArgumentList	x
>1706	Argument	pr [ 1 ]
>1707	ArrayIndexing	pr [ 1 ]
>1708	PrimaryExpression	1
>1709	Identifier	pr
>1710	Argument	pr [ 0 ]
>1711	ArrayIndexing	pr [ 0 ]
>1712	PrimaryExpression	0
>1713	Identifier	pr
>1714	Argument	y
>1715	Identifier	y
>1716	Argument	x
>1717	Identifier	x
>1718	Callee	m_image_data [ added_order [ i ] ] . DistortPoint
>1719	MemberAccess	m_image_data [ added_order [ i ] ] . DistortPoint
>1720	Identifier	DistortPoint
>1721	ArrayIndexing	m_image_data [ added_order [ i ] ]
>1722	ArrayIndexing	added_order [ i ]
>1723	Identifier	i
>1724	Identifier	added_order
>1725	Identifier	m_image_data
>1726	IdentifierDeclStatement	 
>1727	IdentifierDecl	y = pr [ 1 ]
>1728	AssignmentExpr	y = pr [ 1 ]
>1729	ArrayIndexing	pr [ 1 ]
>1730	PrimaryExpression	1
>1731	Identifier	pr
>1732	Identifier	y
>1733	Identifier	y
>1734	IdentifierDeclType	double
>1735	IdentifierDecl	x = pr [ 0 ]
>1736	AssignmentExpr	x = pr [ 0 ]
>1737	ArrayIndexing	pr [ 0 ]
>1738	PrimaryExpression	0
>1739	Identifier	pr
>1740	Identifier	x
>1741	Identifier	x
>1742	IdentifierDeclType	double
>1743	Condition	 
>1744	Identifier	m_optimize_for_fisheye
>1745	IfStatement	if ( ! in_front )
>1746	CompoundStatement	 
>1747	ExpressionStatement	 
>1748	AssignmentExpr	in_back [ pt_count ] = true
>1749	Identifier	true
>1750	ArrayIndexing	in_back [ pt_count ]
>1751	Identifier	pt_count
>1752	Identifier	in_back
>1753	ExpressionStatement	 
>1754	CallExpression	printf ( \"[RunSFM] Cheirality violation...\n\" )
>1755	ArgumentList	\"[RunSFM] Cheirality violation...\n\"
>1756	Argument	\"[RunSFM] Cheirality violation...\n\"
>1757	PrimaryExpression	\"[RunSFM] Cheirality violation...\n\"
>1758	Callee	printf
>1759	Identifier	printf
>1760	Condition	 
>1761	UnaryOp	! in_front
>1762	Identifier	in_front
>1763	UnaryOperator	!
>1764	IdentifierDeclStatement	 
>1765	IdentifierDecl	in_front = sfm_project_rd ( & ( init_camera_params [ i ] ) , K , init_camera_params [ i ] . k , init_camera_params [ \
>1766	AssignmentExpr	in_front = sfm_project_rd ( & ( init_camera_params [ i ] ) , K , init_camera_params [ i ] . k , init_\
>1767	CallExpression	sfm_project_rd ( & ( init_camera_params [ i ] ) , K , init_camera_params [ i ] . k , init_camera_params [ i ] . \
>1768	ArgumentList	& ( init_camera_params [ i ] )
>1769	Argument	true
>1770	Identifier	true
>1771	Argument	m_estimate_distortion
>1772	Identifier	m_estimate_distortion
>1773	Argument	pr
>1774	Identifier	pr
>1775	Argument	b
>1776	Identifier	b
>1777	Argument	dt
>1778	Identifier	dt
>1779	Argument	init_camera_params [ i ] . R
>1780	MemberAccess	init_camera_params [ i ] . R
>1781	Identifier	R
>1782	ArrayIndexing	init_camera_params [ i ]
>1783	Identifier	i
>1784	Identifier	init_camera_params
>1785	Argument	init_camera_params [ i ] . k
>1786	MemberAccess	init_camera_params [ i ] . k
>1787	Identifier	k
>1788	ArrayIndexing	init_camera_params [ i ]
>1789	Identifier	i
>1790	Identifier	init_camera_params
>1791	Argument	K
>1792	Identifier	K
>1793	Argument	& ( init_camera_params [ i ] )
>1794	UnaryOp	& ( init_camera_params [ i ] )
>1795	ArrayIndexing	init_camera_params [ i ]
>1796	Identifier	i
>1797	Identifier	init_camera_params
>1798	UnaryOperator	&
>1799	Callee	sfm_project_rd
>1800	Identifier	sfm_project_rd
>1801	Identifier	in_front
>1802	Identifier	in_front
>1803	IdentifierDeclType	int
>1804	ExpressionStatement	 
>1805	AssignmentExpr	b [ 2 ] = Vz ( nz_pts [ remap [ pt_idx ] ] )
>1806	CallExpression	Vz ( nz_pts [ remap [ pt_idx ] ] )
>1807	ArgumentList	nz_pts [ remap [ pt_idx ] ]
>1808	Argument	nz_pts [ remap [ pt_idx ] ]
>1809	ArrayIndexing	nz_pts [ remap [ pt_idx ] ]
>1810	ArrayIndexing	remap [ pt_idx ]
>1811	Identifier	pt_idx
>1812	Identifier	remap
>1813	Identifier	nz_pts
>1814	Callee	Vz
>1815	Identifier	Vz
>1816	ArrayIndexing	b [ 2 ]
>1817	PrimaryExpression	2
>1818	Identifier	b
>1819	ExpressionStatement	 
>1820	AssignmentExpr	b [ 1 ] = Vy ( nz_pts [ remap [ pt_idx ] ] )
>1821	CallExpression	Vy ( nz_pts [ remap [ pt_idx ] ] )
>1822	ArgumentList	nz_pts [ remap [ pt_idx ] ]
>1823	Argument	nz_pts [ remap [ pt_idx ] ]
>1824	ArrayIndexing	nz_pts [ remap [ pt_idx ] ]
>1825	ArrayIndexing	remap [ pt_idx ]
>1826	Identifier	pt_idx
>1827	Identifier	remap
>1828	Identifier	nz_pts
>1829	Callee	Vy
>1830	Identifier	Vy
>1831	ArrayIndexing	b [ 1 ]
>1832	PrimaryExpression	1
>1833	Identifier	b
>1834	ExpressionStatement	 
>1835	AssignmentExpr	b [ 0 ] = Vx ( nz_pts [ remap [ pt_idx ] ] )
>1836	CallExpression	Vx ( nz_pts [ remap [ pt_idx ] ] )
>1837	ArgumentList	nz_pts [ remap [ pt_idx ] ]
>1838	Argument	nz_pts [ remap [ pt_idx ] ]
>1839	ArrayIndexing	nz_pts [ remap [ pt_idx ] ]
>1840	ArrayIndexing	remap [ pt_idx ]
>1841	Identifier	pt_idx
>1842	Identifier	remap
>1843	Identifier	nz_pts
>1844	Callee	Vx
>1845	Identifier	Vx
>1846	ArrayIndexing	b [ 0 ]
>1847	PrimaryExpression	0
>1848	Identifier	b
>1849	IdentifierDeclStatement	 
>1850	IdentifierDecl	pt_idx = key . m_extra
>1851	AssignmentExpr	pt_idx = key . m_extra
>1852	MemberAccess	key . m_extra
>1853	Identifier	m_extra
>1854	Identifier	key
>1855	Identifier	pt_idx
>1856	Identifier	pt_idx
>1857	IdentifierDeclType	int
>1858	IdentifierDeclStatement	 
>1859	IdentifierDecl	dist
>1860	Identifier	dist
>1861	IdentifierDeclType	double
>1862	IdentifierDecl	dy
>1863	Identifier	dy
>1864	IdentifierDeclType	double
>1865	IdentifierDecl	dx
>1866	Identifier	dx
>1867	IdentifierDeclType	double
>1868	IdentifierDeclStatement	 
>1869	IdentifierDecl	pr [ 2 ]
>1870	PrimaryExpression	2
>1871	Identifier	pr
>1872	IdentifierDeclType	double [ 2 ]
>1873	IdentifierDecl	b [ 3 ]
>1874	PrimaryExpression	3
>1875	Identifier	b
>1876	IdentifierDeclType	double [ 3 ]
>1877	Condition	 
>1878	RelationalExpression	key . m_extra >= 0
>1879	PrimaryExpression	0
>1880	MemberAccess	key . m_extra
>1881	Identifier	m_extra
>1882	Identifier	key
>1883	IdentifierDeclStatement	 
>1884	IdentifierDecl	& key = * iter
>1885	AssignmentExpr	& key = * iter
>1886	UnaryOp	* iter
>1887	Identifier	iter
>1888	UnaryOperator	*
>1889	Identifier	key
>1890	Identifier	key
>1891	IdentifierDeclType	const Keypoint &
>1892	IncDecOp	 
>1893	IncDec	++
>1894	Identifier	iter
>1895	Condition	 
>1896	EqualityExpression	iter != m_image_data [ added_order [ i ] ] . m_keys . end ( )
>1897	CallExpression	m_image_data [ added_order [ i ] ] . m_keys . end ( )
>1898	ArgumentList	 
>1899	Callee	m_image_data [ added_order [ i ] ] . m_keys . end
>1900	MemberAccess	m_image_data [ added_order [ i ] ] . m_keys . end
>1901	Identifier	end
>1902	MemberAccess	m_image_data [ added_order [ i ] ] . m_keys
>1903	Identifier	m_keys
>1904	ArrayIndexing	m_image_data [ added_order [ i ] ]
>1905	ArrayIndexing	added_order [ i ]
>1906	Identifier	i
>1907	Identifier	added_order
>1908	Identifier	m_image_data
>1909	Identifier	iter
>1910	ForInit	 
>1911	AssignmentExpr	iter = m_image_data [ added_order [ i ] ] . m_keys . begin ( )
>1912	CallExpression	m_image_data [ added_order [ i ] ] . m_keys . begin ( )
>1913	ArgumentList	 
>1914	Callee	m_image_data [ added_order [ i ] ] . m_keys . begin
>1915	MemberAccess	m_image_data [ added_order [ i ] ] . m_keys . begin
>1916	Identifier	begin
>1917	MemberAccess	m_image_data [ added_order [ i ] ] . m_keys
>1918	Identifier	m_keys
>1919	ArrayIndexing	m_image_data [ added_order [ i ] ]
>1920	ArrayIndexing	added_order [ i ]
>1921	Identifier	i
>1922	Identifier	added_order
>1923	Identifier	m_image_data
>1924	Identifier	iter
>1925	IdentifierDeclStatement	 
>1926	IdentifierDecl	iter
>1927	Identifier	iter
>1928	IdentifierDeclType	std 
>1929	IdentifierDeclStatement	 
>1930	IdentifierDecl	pt_count = 0
>1931	AssignmentExpr	pt_count = 0
>1932	PrimaryExpression	0
>1933	Identifier	pt_count
>1934	Identifier	pt_count
>1935	IdentifierDeclType	int
>1936	ExpressionStatement	 
>1937	CallExpression	in_back . resize ( num_pts_proj )
>1938	ArgumentList	num_pts_proj
>1939	Argument	num_pts_proj
>1940	Identifier	num_pts_proj
>1941	Callee	in_back . resize
>1942	MemberAccess	in_back . resize
>1943	Identifier	resize
>1944	Identifier	in_back
>1945	IdentifierDeclStatement	 
>1946	IdentifierDecl	in_back
>1947	Identifier	in_back
>1948	IdentifierDeclType	std 
>1949	IdentifierDeclStatement	 
>1950	IdentifierDecl	* dists = new double [ num_pts_proj ]
>1951	AssignmentExpr	* dists = new double [ num_pts_proj ]
>1952	Identifier	num_pts_proj
>1953	Identifier	num_pts_proj
>1954	Identifier	dists
>1955	IdentifierDeclType	double *
>1956	ForStatement	for ( int j = 0 ; j < num_keys ; j ++ )
>1957	CompoundStatement	 
>1958	IfStatement	if ( GetKey ( added_order [ i ] , j ) . m_extra >= 0 )
>1959	CompoundStatement	 
>1960	ExpressionStatement	 
>1961	IncDecOp	num_pts_proj ++
>1962	IncDec	++
>1963	Identifier	num_pts_proj
>1964	Condition	 
>1965	RelationalExpression	GetKey ( added_order [ i ] , j ) . m_extra >= 0
>1966	PrimaryExpression	0
>1967	MemberAccess	GetKey ( added_order [ i ] , j ) . m_extra
>1968	Identifier	m_extra
>1969	CallExpression	GetKey ( added_order [ i ] , j )
>1970	ArgumentList	added_order [ i ]
>1971	Argument	j
>1972	Identifier	j
>1973	Argument	added_order [ i ]
>1974	ArrayIndexing	added_order [ i ]
>1975	Identifier	i
>1976	Identifier	added_order
>1977	Callee	GetKey
>1978	Identifier	GetKey
>1979	IncDecOp	 
>1980	IncDec	++
>1981	Identifier	j
>1982	Condition	 
>1983	RelationalExpression	j < num_keys
>1984	Identifier	num_keys
>1985	Identifier	j
>1986	ForInit	 
>1987	IdentifierDeclStatement	int j = 0 ;
>1988	IdentifierDecl	j = 0
>1989	AssignmentExpr	j = 0
>1990	PrimaryExpression	0
>1991	Identifier	j
>1992	Identifier	j
>1993	IdentifierDeclType	int
>1994	IdentifierDeclStatement	 
>1995	IdentifierDecl	num_pts_proj = 0
>1996	AssignmentExpr	num_pts_proj = 0
>1997	PrimaryExpression	0
>1998	Identifier	num_pts_proj
>1999	Identifier	num_pts_proj
>2000	IdentifierDeclType	int
>2001	IdentifierDeclStatement	 
>2002	IdentifierDecl	num_keys = GetNumKeys ( added_order [ i ] )
>2003	AssignmentExpr	num_keys = GetNumKeys ( added_order [ i ] )
>2004	CallExpression	GetNumKeys ( added_order [ i ] )
>2005	ArgumentList	added_order [ i ]
>2006	Argument	added_order [ i ]
>2007	ArrayIndexing	added_order [ i ]
>2008	Identifier	i
>2009	Identifier	added_order
>2010	Callee	GetNumKeys
>2011	Identifier	GetNumKeys
>2012	Identifier	num_keys
>2013	Identifier	num_keys
>2014	IdentifierDeclType	int
>2015	IfStatement	if ( data . m_known_intrinsics )
>2016	CompoundStatement	 
>2017	ExpressionStatement	 
>2018	CallExpression	InvertDistortion ( 8 , 6 , 0.0 , max_radius , k_dist , init_camera_params [ i ] . k_inv )
>2019	ArgumentList	8
>2020	Argument	init_camera_params [ i ] . k_inv
>2021	MemberAccess	init_camera_params [ i ] . k_inv
>2022	Identifier	k_inv
>2023	ArrayIndexing	init_camera_params [ i ]
>2024	Identifier	i
>2025	Identifier	init_camera_params
>2026	Argument	k_dist
>2027	Identifier	k_dist
>2028	Argument	max_radius
>2029	Identifier	max_radius
>2030	Argument	0.0
>2031	PrimaryExpression	0.0
>2032	Argument	6
>2033	PrimaryExpression	6
>2034	Argument	8
>2035	PrimaryExpression	8
>2036	Callee	InvertDistortion
>2037	Identifier	InvertDistortion
>2038	IdentifierDeclStatement	 
>2039	IdentifierDecl	max_radius = sqrt ( w_2 * w_2 + h_2 * h_2 ) / init_camera_params [ i ] . K_known [ 0 ]
>2040	AssignmentExpr	max_radius = sqrt ( w_2 * w_2 + h_2 * h_2 ) / init_camera_params [ i ] . K_known [ 0 ]
>2041	MultiplicativeExpression	sqrt ( w_2 * w_2 + h_2 * h_2 ) / init_camera_params [ i ] . K_known [ 0 ]
>2042	ArrayIndexing	init_camera_params [ i ] . K_known [ 0 ]
>2043	PrimaryExpression	0
>2044	MemberAccess	init_camera_params [ i ] . K_known
>2045	Identifier	K_known
>2046	ArrayIndexing	init_camera_params [ i ]
>2047	Identifier	i
>2048	Identifier	init_camera_params
>2049	CallExpression	sqrt ( w_2 * w_2 + h_2 * h_2 )
>2050	ArgumentList	w_2 * w_2 + h_2 * h_2
>2051	Argument	w_2 * w_2 + h_2 * h_2
>2052	AdditiveExpression	w_2 * w_2 + h_2 * h_2
>2053	MultiplicativeExpression	h_2 * h_2
>2054	Identifier	h_2
>2055	Identifier	h_2
>2056	MultiplicativeExpression	w_2 * w_2
>2057	Identifier	w_2
>2058	Identifier	w_2
>2059	Callee	sqrt
>2060	Identifier	sqrt
>2061	Identifier	max_radius
>2062	Identifier	max_radius
>2063	IdentifierDeclType	double
>2064	IdentifierDeclStatement	 
>2065	IdentifierDecl	h_2 = 0.5 * data . GetHeight ( )
>2066	AssignmentExpr	h_2 = 0.5 * data . GetHeight ( )
>2067	MultiplicativeExpression	0.5 * data . GetHeight ( )
>2068	CallExpression	data . GetHeight ( )
>2069	ArgumentList	 
>2070	Callee	data . GetHeight
>2071	MemberAccess	data . GetHeight
>2072	Identifier	GetHeight
>2073	Identifier	data
>2074	PrimaryExpression	0.5
>2075	Identifier	h_2
>2076	Identifier	h_2
>2077	IdentifierDeclType	double
>2078	IdentifierDeclStatement	 
>2079	IdentifierDecl	w_2 = 0.5 * data . GetWidth ( )
>2080	AssignmentExpr	w_2 = 0.5 * data . GetWidth ( )
>2081	MultiplicativeExpression	0.5 * data . GetWidth ( )
>2082	CallExpression	data . GetWidth ( )
>2083	ArgumentList	 
>2084	Callee	data . GetWidth
>2085	MemberAccess	data . GetWidth
>2086	Identifier	GetWidth
>2087	Identifier	data
>2088	PrimaryExpression	0.5
>2089	Identifier	w_2
>2090	Identifier	w_2
>2091	IdentifierDeclType	double
>2092	IdentifierDeclStatement	 
>2093	IdentifierDecl	k_dist [ 8 ] = { 0.0 , 1.0 , 0.0 , k [ 0 ] , 0.0 , k [ 1 ] , 0.0 , k [ 4 ] }
>2094	AssignmentExpr	k_dist [ 8 ] = { 0.0 , 1.0 , 0.0 , k [ 0 ] , 0.0 , k [ 1 ] , 0.0 , k [ 4 ] }
>2095	InitializerList	0.0
>2096	ArrayIndexing	k [ 4 ]
>2097	PrimaryExpression	4
>2098	Identifier	k
>2099	PrimaryExpression	0.0
>2100	ArrayIndexing	k [ 1 ]
>2101	PrimaryExpression	1
>2102	Identifier	k
>2103	PrimaryExpression	0.0
>2104	ArrayIndexing	k [ 0 ]
>2105	PrimaryExpression	0
>2106	Identifier	k
>2107	PrimaryExpression	0.0
>2108	PrimaryExpression	1.0
>2109	PrimaryExpression	0.0
>2110	Identifier	k_dist
>2111	PrimaryExpression	8
>2112	Identifier	k_dist
>2113	IdentifierDeclType	double [ 8 ]
>2114	IdentifierDeclStatement	 
>2115	IdentifierDecl	* k = init_camera_params [ i ] . k_known
>2116	AssignmentExpr	* k = init_camera_params [ i ] . k_known
>2117	MemberAccess	init_camera_params [ i ] . k_known
>2118	Identifier	k_known
>2119	ArrayIndexing	init_camera_params [ i ]
>2120	Identifier	i
>2121	Identifier	init_camera_params
>2122	Identifier	k
>2123	Identifier	k
>2124	IdentifierDeclType	double *
>2125	Condition	 
>2126	MemberAccess	data . m_known_intrinsics
>2127	Identifier	m_known_intrinsics
>2128	Identifier	data
>2129	IfStatement	if ( m_estimate_distortion )
>2130	CompoundStatement	 
>2131	ExpressionStatement	 
>2132	CallExpression	InvertDistortion ( 6 , 6 , 0.0 , max_radius , k_dist , init_camera_params [ i ] . k_inv )
>2133	ArgumentList	6
>2134	Argument	init_camera_params [ i ] . k_inv
>2135	MemberAccess	init_camera_params [ i ] . k_inv
>2136	Identifier	k_inv
>2137	ArrayIndexing	init_camera_params [ i ]
>2138	Identifier	i
>2139	Identifier	init_camera_params
>2140	Argument	k_dist
>2141	Identifier	k_dist
>2142	Argument	max_radius
>2143	Identifier	max_radius
>2144	Argument	0.0
>2145	PrimaryExpression	0.0
>2146	Argument	6
>2147	PrimaryExpression	6
>2148	Argument	6
>2149	PrimaryExpression	6
>2150	Callee	InvertDistortion
>2151	Identifier	InvertDistortion
>2152	IdentifierDeclStatement	 
>2153	IdentifierDecl	max_radius = sqrt ( w_2 * w_2 + h_2 * h_2 ) / init_camera_params [ i ] . f
>2154	AssignmentExpr	max_radius = sqrt ( w_2 * w_2 + h_2 * h_2 ) / init_camera_params [ i ] . f
>2155	MultiplicativeExpression	sqrt ( w_2 * w_2 + h_2 * h_2 ) / init_camera_params [ i ] . f
>2156	MemberAccess	init_camera_params [ i ] . f
>2157	Identifier	f
>2158	ArrayIndexing	init_camera_params [ i ]
>2159	Identifier	i
>2160	Identifier	init_camera_params
>2161	CallExpression	sqrt ( w_2 * w_2 + h_2 * h_2 )
>2162	ArgumentList	w_2 * w_2 + h_2 * h_2
>2163	Argument	w_2 * w_2 + h_2 * h_2
>2164	AdditiveExpression	w_2 * w_2 + h_2 * h_2
>2165	MultiplicativeExpression	h_2 * h_2
>2166	Identifier	h_2
>2167	Identifier	h_2
>2168	MultiplicativeExpression	w_2 * w_2
>2169	Identifier	w_2
>2170	Identifier	w_2
>2171	Callee	sqrt
>2172	Identifier	sqrt
>2173	Identifier	max_radius
>2174	Identifier	max_radius
>2175	IdentifierDeclType	double
>2176	IdentifierDeclStatement	 
>2177	IdentifierDecl	h_2 = 0.5 * data . GetHeight ( )
>2178	AssignmentExpr	h_2 = 0.5 * data . GetHeight ( )
>2179	MultiplicativeExpression	0.5 * data . GetHeight ( )
>2180	CallExpression	data . GetHeight ( )
>2181	ArgumentList	 
>2182	Callee	data . GetHeight
>2183	MemberAccess	data . GetHeight
>2184	Identifier	GetHeight
>2185	Identifier	data
>2186	PrimaryExpression	0.5
>2187	Identifier	h_2
>2188	Identifier	h_2
>2189	IdentifierDeclType	double
>2190	IdentifierDeclStatement	 
>2191	IdentifierDecl	w_2 = 0.5 * data . GetWidth ( )
>2192	AssignmentExpr	w_2 = 0.5 * data . GetWidth ( )
>2193	MultiplicativeExpression	0.5 * data . GetWidth ( )
>2194	CallExpression	data . GetWidth ( )
>2195	ArgumentList	 
>2196	Callee	data . GetWidth
>2197	MemberAccess	data . GetWidth
>2198	Identifier	GetWidth
>2199	Identifier	data
>2200	PrimaryExpression	0.5
>2201	Identifier	w_2
>2202	Identifier	w_2
>2203	IdentifierDeclType	double
>2204	IdentifierDeclStatement	 
>2205	IdentifierDecl	k_dist [ 6 ] = { 0.0 , 1.0 , 0.0 , k [ 0 ] , 0.0 , k [ 1 ] }
>2206	AssignmentExpr	k_dist [ 6 ] = { 0.0 , 1.0 , 0.0 , k [ 0 ] , 0.0 , k [ 1 ] }
>2207	InitializerList	0.0
>2208	ArrayIndexing	k [ 1 ]
>2209	PrimaryExpression	1
>2210	Identifier	k
>2211	PrimaryExpression	0.0
>2212	ArrayIndexing	k [ 0 ]
>2213	PrimaryExpression	0
>2214	Identifier	k
>2215	PrimaryExpression	0.0
>2216	PrimaryExpression	1.0
>2217	PrimaryExpression	0.0
>2218	Identifier	k_dist
>2219	PrimaryExpression	6
>2220	Identifier	k_dist
>2221	IdentifierDeclType	double [ 6 ]
>2222	IdentifierDeclStatement	 
>2223	IdentifierDecl	* k = init_camera_params [ i ] . k
>2224	AssignmentExpr	* k = init_camera_params [ i ] . k
>2225	MemberAccess	init_camera_params [ i ] . k
>2226	Identifier	k
>2227	ArrayIndexing	init_camera_params [ i ]
>2228	Identifier	i
>2229	Identifier	init_camera_params
>2230	Identifier	k
>2231	Identifier	k
>2232	IdentifierDeclType	double *
>2233	Condition	 
>2234	Identifier	m_estimate_distortion
>2235	IdentifierDeclStatement	 
>2236	IdentifierDecl	dt [ 3 ] = { init_camera_params [ i ] . t [ 0 ] , init_camera_params [ i ] . t [ 1 ] , init_camera_params [ i ] \
>2237	AssignmentExpr	dt [ 3 ] = { init_camera_params [ i ] . t [ 0 ] , init_camera_params [ i ] . t [ 1 ] , init_camera_params [ \
>2238	InitializerList	init_camera_params [ i ] . t [ 0 ]
>2239	ArrayIndexing	init_camera_params [ i ] . t [ 2 ]
>2240	PrimaryExpression	2
>2241	MemberAccess	init_camera_params [ i ] . t
>2242	Identifier	t
>2243	ArrayIndexing	init_camera_params [ i ]
>2244	Identifier	i
>2245	Identifier	init_camera_params
>2246	ArrayIndexing	init_camera_params [ i ] . t [ 1 ]
>2247	PrimaryExpression	1
>2248	MemberAccess	init_camera_params [ i ] . t
>2249	Identifier	t
>2250	ArrayIndexing	init_camera_params [ i ]
>2251	Identifier	i
>2252	Identifier	init_camera_params
>2253	ArrayIndexing	init_camera_params [ i ] . t [ 0 ]
>2254	PrimaryExpression	0
>2255	MemberAccess	init_camera_params [ i ] . t
>2256	Identifier	t
>2257	ArrayIndexing	init_camera_params [ i ]
>2258	Identifier	i
>2259	Identifier	init_camera_params
>2260	Identifier	dt
>2261	PrimaryExpression	3
>2262	Identifier	dt
>2263	IdentifierDeclType	double [ 3 ]
>2264	IdentifierDeclStatement	 
>2265	IdentifierDecl	K [ 9 ] = { init_camera_params [ i ] . f , 0.0 , 0.0 , 0.0 , init_camera_params [ i ] . f , 0.0 , 0.0 , 0.0 , 1.0 }
>2266	AssignmentExpr	K [ 9 ] = { init_camera_params [ i ] . f , 0.0 , 0.0 , 0.0 , init_camera_params [ i ] . f , 0.0 , 0.0 , \
>2267	InitializerList	init_camera_params [ i ] . f
>2268	PrimaryExpression	1.0
>2269	PrimaryExpression	0.0
>2270	PrimaryExpression	0.0
>2271	PrimaryExpression	0.0
>2272	MemberAccess	init_camera_params [ i ] . f
>2273	Identifier	f
>2274	ArrayIndexing	init_camera_params [ i ]
>2275	Identifier	i
>2276	Identifier	init_camera_params
>2277	PrimaryExpression	0.0
>2278	PrimaryExpression	0.0
>2279	PrimaryExpression	0.0
>2280	MemberAccess	init_camera_params [ i ] . f
>2281	Identifier	f
>2282	ArrayIndexing	init_camera_params [ i ]
>2283	Identifier	i
>2284	Identifier	init_camera_params
>2285	Identifier	K
>2286	PrimaryExpression	9
>2287	Identifier	K
>2288	IdentifierDeclType	double [ 9 ]
>2289	IdentifierDeclStatement	 
>2290	IdentifierDecl	& data = m_image_data [ added_order [ i ] ]
>2291	AssignmentExpr	& data = m_image_data [ added_order [ i ] ]
>2292	ArrayIndexing	m_image_data [ added_order [ i ] ]
>2293	ArrayIndexing	added_order [ i ]
>2294	Identifier	i
>2295	Identifier	added_order
>2296	Identifier	m_image_data
>2297	Identifier	data
>2298	Identifier	data
>2299	IdentifierDeclType	ImageData &
>2300	IncDecOp	 
>2301	IncDec	++
>2302	Identifier	i
>2303	Condition	 
>2304	RelationalExpression	i < num_cameras
>2305	Identifier	num_cameras
>2306	Identifier	i
>2307	ForInit	 
>2308	IdentifierDeclStatement	int i = 0 ;
>2309	IdentifierDecl	i = 0
>2310	AssignmentExpr	i = 0
>2311	PrimaryExpression	0
>2312	Identifier	i
>2313	Identifier	i
>2314	IdentifierDeclType	int
>2315	IdentifierDeclStatement	 
>2316	IdentifierDecl	reproj_errors
>2317	Identifier	reproj_errors
>2318	IdentifierDeclType	std 
>2319	IdentifierDeclStatement	 
>2320	IdentifierDecl	outlier_views
>2321	Identifier	outlier_views
>2322	IdentifierDeclType	std 
>2323	IdentifierDeclStatement	 
>2324	IdentifierDecl	outliers
>2325	Identifier	outliers
>2326	IdentifierDeclType	std 
>2327	IdentifierDeclStatement	 
>2328	IdentifierDecl	global_num_observations = 0
>2329	AssignmentExpr	global_num_observations = 0
>2330	PrimaryExpression	0
>2331	Identifier	global_num_observations
>2332	Identifier	global_num_observations
>2333	IdentifierDeclType	int
>2334	IdentifierDeclStatement	 
>2335	IdentifierDecl	global_reprojection_error = 0
>2336	AssignmentExpr	global_reprojection_error = 0
>2337	PrimaryExpression	0
>2338	Identifier	global_reprojection_error
>2339	Identifier	global_reprojection_error
>2340	IdentifierDeclType	double
>2341	ExpressionStatement	 
>2342	AssignmentExpr	start = clock ( )
>2343	CallExpression	clock ( )
>2344	ArgumentList	 
>2345	Callee	clock
>2346	Identifier	clock
>2347	Identifier	start
>2348	ExpressionStatement	 
>2349	CallExpression	printf ( \"[RunSFM] run_sfm took %0.3fs\n\" , ( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC )
>2350	ArgumentList	\"[RunSFM] run_sfm took %0.3fs\n\"
>2351	Argument	( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC
>2352	MultiplicativeExpression	( double ) ( end - start ) / ( double ) CLOCKS_PER_SEC
>2353	CastExpression	( double ) CLOCKS_PER_SEC
>2354	Identifier	CLOCKS_PER_SEC
>2355	CastTarget	double
>2356	CastExpression	( double ) ( end - start )
>2357	AdditiveExpression	end - start
>2358	Identifier	start
>2359	Identifier	end
>2360	CastTarget	double
>2361	Argument	\"[RunSFM] run_sfm took %0.3fs\n\"
>2362	PrimaryExpression	\"[RunSFM] run_sfm took %0.3fs\n\"
>2363	Callee	printf
>2364	Identifier	printf
>2365	IdentifierDeclStatement	 
>2366	IdentifierDecl	end = clock ( )
>2367	AssignmentExpr	end = clock ( )
>2368	CallExpression	clock ( )
>2369	ArgumentList	 
>2370	Callee	clock
>2371	Identifier	clock
>2372	Identifier	end
>2373	Identifier	end
>2374	IdentifierDeclType	clock_t
>2375	ExpressionStatement	 
>2376	CallExpression	assert ( ptr == final_x + num_parameters )
>2377	ArgumentList	ptr == final_x + num_parameters
>2378	Argument	ptr == final_x + num_parameters
>2379	EqualityExpression	ptr == final_x + num_parameters
>2380	AdditiveExpression	final_x + num_parameters
>2381	Identifier	num_parameters
>2382	Identifier	final_x
>2383	Identifier	ptr
>2384	Callee	assert
>2385	Identifier	assert
>2386	ForStatement	for ( int i = 0 ; i < num_nz_points ; i ++ )
>2387	CompoundStatement	 
>2388	ExpressionStatement	 
>2389	IncDecOp	ptr ++
>2390	IncDec	++
>2391	Identifier	ptr
>2392	ExpressionStatement	 
>2393	AssignmentExpr	Vz ( nz_pts [ i ] ) = * ptr
>2394	UnaryOp	* ptr
>2395	Identifier	ptr
>2396	UnaryOperator	*
>2397	CallExpression	Vz ( nz_pts [ i ] )
>2398	ArgumentList	nz_pts [ i ]
>2399	Argument	nz_pts [ i ]
>2400	ArrayIndexing	nz_pts [ i ]
>2401	Identifier	i
>2402	Identifier	nz_pts
>2403	Callee	Vz
>2404	Identifier	Vz
>2405	ExpressionStatement	 
>2406	IncDecOp	ptr ++
>2407	IncDec	++
>2408	Identifier	ptr
>2409	ExpressionStatement	 
>2410	AssignmentExpr	Vy ( nz_pts [ i ] ) = * ptr
>2411	UnaryOp	* ptr
>2412	Identifier	ptr
>2413	UnaryOperator	*
>2414	CallExpression	Vy ( nz_pts [ i ] )
>2415	ArgumentList	nz_pts [ i ]
>2416	Argument	nz_pts [ i ]
>2417	ArrayIndexing	nz_pts [ i ]
>2418	Identifier	i
>2419	Identifier	nz_pts
>2420	Callee	Vy
>2421	Identifier	Vy
>2422	ExpressionStatement	 
>2423	IncDecOp	ptr ++
>2424	IncDec	++
>2425	Identifier	ptr
>2426	ExpressionStatement	 
>2427	AssignmentExpr	Vx ( nz_pts [ i ] ) = * ptr
>2428	UnaryOp	* ptr
>2429	Identifier	ptr
>2430	UnaryOperator	*
>2431	CallExpression	Vx ( nz_pts [ i ] )
>2432	ArgumentList	nz_pts [ i ]
>2433	Argument	nz_pts [ i ]
>2434	ArrayIndexing	nz_pts [ i ]
>2435	Identifier	i
>2436	Identifier	nz_pts
>2437	Callee	Vx
>2438	Identifier	Vx
>2439	IncDecOp	 
>2440	IncDec	++
>2441	Identifier	i
>2442	Condition	 
>2443	RelationalExpression	i < num_nz_points
>2444	Identifier	num_nz_points
>2445	Identifier	i
>2446	ForInit	 
>2447	IdentifierDeclStatement	int i = 0 ;
>2448	IdentifierDecl	i = 0
>2449	AssignmentExpr	i = 0
>2450	PrimaryExpression	0
>2451	Identifier	i
>2452	Identifier	i
>2453	IdentifierDeclType	int
>2454	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>2455	CompoundStatement	 
>2456	IfStatement	if ( m_estimate_distortion )
>2457	CompoundStatement	 
>2458	ExpressionStatement	 
>2459	IncDecOp	ptr ++
>2460	IncDec	++
>2461	Identifier	ptr
>2462	ExpressionStatement	 
>2463	AssignmentExpr	init_camera_params [ i ] . k [ 1 ] = * ptr
>2464	UnaryOp	* ptr
>2465	Identifier	ptr
>2466	UnaryOperator	*
>2467	ArrayIndexing	init_camera_params [ i ] . k [ 1 ]
>2468	PrimaryExpression	1
>2469	MemberAccess	init_camera_params [ i ] . k
>2470	Identifier	k
>2471	ArrayIndexing	init_camera_params [ i ]
>2472	Identifier	i
>2473	Identifier	init_camera_params
>2474	ExpressionStatement	 
>2475	IncDecOp	ptr ++
>2476	IncDec	++
>2477	Identifier	ptr
>2478	ExpressionStatement	 
>2479	AssignmentExpr	init_camera_params [ i ] . k [ 0 ] = * ptr
>2480	UnaryOp	* ptr
>2481	Identifier	ptr
>2482	UnaryOperator	*
>2483	ArrayIndexing	init_camera_params [ i ] . k [ 0 ]
>2484	PrimaryExpression	0
>2485	MemberAccess	init_camera_params [ i ] . k
>2486	Identifier	k
>2487	ArrayIndexing	init_camera_params [ i ]
>2488	Identifier	i
>2489	Identifier	init_camera_params
>2490	Condition	 
>2491	Identifier	m_estimate_distortion
>2492	ExpressionStatement	 
>2493	IncDecOp	ptr ++
>2494	IncDec	++
>2495	Identifier	ptr
>2496	IdentifierDeclStatement	 
>2497	IdentifierDecl	f = init_camera_params [ i ] . f = * ptr
>2498	AssignmentExpr	f = init_camera_params [ i ] . f = * ptr
>2499	AssignmentExpr	init_camera_params [ i ] . f = * ptr
>2500	UnaryOp	* ptr
>2501	Identifier	ptr
>2502	UnaryOperator	*
>2503	MemberAccess	init_camera_params [ i ] . f
>2504	Identifier	f
>2505	ArrayIndexing	init_camera_params [ i ]
>2506	Identifier	i
>2507	Identifier	init_camera_params
>2508	Identifier	f
>2509	Identifier	f
>2510	IdentifierDeclType	double
>2511	ExpressionStatement	 
>2512	CallExpression	matrix_scale ( 3 , 1 , c , - 1.0 , c )
>2513	ArgumentList	3
>2514	Argument	c
>2515	Identifier	c
>2516	Argument	- 1.0
>2517	UnaryOp	- 1.0
>2518	PrimaryExpression	1.0
>2519	UnaryOperator	-
>2520	Argument	c
>2521	Identifier	c
>2522	Argument	1
>2523	PrimaryExpression	1
>2524	Argument	3
>2525	PrimaryExpression	3
>2526	Callee	matrix_scale
>2527	Identifier	matrix_scale
>2528	ExpressionStatement	 
>2529	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , init_camera_params [ i ] . R , t , c )
>2530	ArgumentList	3
>2531	Argument	c
>2532	Identifier	c
>2533	Argument	t
>2534	Identifier	t
>2535	Argument	init_camera_params [ i ] . R
>2536	MemberAccess	init_camera_params [ i ] . R
>2537	Identifier	R
>2538	ArrayIndexing	init_camera_params [ i ]
>2539	Identifier	i
>2540	Identifier	init_camera_params
>2541	Argument	1
>2542	PrimaryExpression	1
>2543	Argument	3
>2544	PrimaryExpression	3
>2545	Argument	3
>2546	PrimaryExpression	3
>2547	Argument	3
>2548	PrimaryExpression	3
>2549	Callee	matrix_transpose_product
>2550	Identifier	matrix_transpose_product
>2551	ExpressionStatement	 
>2552	IncDecOp	ptr ++
>2553	IncDec	++
>2554	Identifier	ptr
>2555	ExpressionStatement	 
>2556	AssignmentExpr	t [ 2 ] = * ptr
>2557	UnaryOp	* ptr
>2558	Identifier	ptr
>2559	UnaryOperator	*
>2560	ArrayIndexing	t [ 2 ]
>2561	PrimaryExpression	2
>2562	Identifier	t
>2563	ExpressionStatement	 
>2564	IncDecOp	ptr ++
>2565	IncDec	++
>2566	Identifier	ptr
>2567	ExpressionStatement	 
>2568	AssignmentExpr	t [ 1 ] = * ptr
>2569	UnaryOp	* ptr
>2570	Identifier	ptr
>2571	UnaryOperator	*
>2572	ArrayIndexing	t [ 1 ]
>2573	PrimaryExpression	1
>2574	Identifier	t
>2575	ExpressionStatement	 
>2576	IncDecOp	ptr ++
>2577	IncDec	++
>2578	Identifier	ptr
>2579	ExpressionStatement	 
>2580	AssignmentExpr	t [ 0 ] = * ptr
>2581	UnaryOp	* ptr
>2582	Identifier	ptr
>2583	UnaryOperator	*
>2584	ArrayIndexing	t [ 0 ]
>2585	PrimaryExpression	0
>2586	Identifier	t
>2587	IdentifierDeclStatement	 
>2588	IdentifierDecl	* c = init_camera_params [ i ] . t
>2589	AssignmentExpr	* c = init_camera_params [ i ] . t
>2590	MemberAccess	init_camera_params [ i ] . t
>2591	Identifier	t
>2592	ArrayIndexing	init_camera_params [ i ]
>2593	Identifier	i
>2594	Identifier	init_camera_params
>2595	Identifier	c
>2596	Identifier	c
>2597	IdentifierDeclType	double *
>2598	IdentifierDeclStatement	 
>2599	IdentifierDecl	t [ 3 ]
>2600	PrimaryExpression	3
>2601	Identifier	t
>2602	IdentifierDeclType	double [ 3 ]
>2603	ExpressionStatement	 
>2604	CallExpression	matrix_transpose ( 3 , 3 , RT , init_camera_params [ i ] . R )
>2605	ArgumentList	3
>2606	Argument	init_camera_params [ i ] . R
>2607	MemberAccess	init_camera_params [ i ] . R
>2608	Identifier	R
>2609	ArrayIndexing	init_camera_params [ i ]
>2610	Identifier	i
>2611	Identifier	init_camera_params
>2612	Argument	RT
>2613	Identifier	RT
>2614	Argument	3
>2615	PrimaryExpression	3
>2616	Argument	3
>2617	PrimaryExpression	3
>2618	Callee	matrix_transpose
>2619	Identifier	matrix_transpose
>2620	ExpressionStatement	 
>2621	CallExpression	aa2rot ( axis , RT )
>2622	ArgumentList	axis
>2623	Argument	RT
>2624	Identifier	RT
>2625	Argument	axis
>2626	Identifier	axis
>2627	Callee	aa2rot
>2628	Identifier	aa2rot
>2629	IdentifierDeclStatement	 
>2630	IdentifierDecl	RT [ 9 ]
>2631	PrimaryExpression	9
>2632	Identifier	RT
>2633	IdentifierDeclType	double [ 9 ]
>2634	ExpressionStatement	 
>2635	IncDecOp	ptr ++
>2636	IncDec	++
>2637	Identifier	ptr
>2638	ExpressionStatement	 
>2639	AssignmentExpr	axis [ 2 ] = * ptr
>2640	UnaryOp	* ptr
>2641	Identifier	ptr
>2642	UnaryOperator	*
>2643	ArrayIndexing	axis [ 2 ]
>2644	PrimaryExpression	2
>2645	Identifier	axis
>2646	ExpressionStatement	 
>2647	IncDecOp	ptr ++
>2648	IncDec	++
>2649	Identifier	ptr
>2650	ExpressionStatement	 
>2651	AssignmentExpr	axis [ 1 ] = * ptr
>2652	UnaryOp	* ptr
>2653	Identifier	ptr
>2654	UnaryOperator	*
>2655	ArrayIndexing	axis [ 1 ]
>2656	PrimaryExpression	1
>2657	Identifier	axis
>2658	ExpressionStatement	 
>2659	IncDecOp	ptr ++
>2660	IncDec	++
>2661	Identifier	ptr
>2662	ExpressionStatement	 
>2663	AssignmentExpr	axis [ 0 ] = * ptr
>2664	UnaryOp	* ptr
>2665	Identifier	ptr
>2666	UnaryOperator	*
>2667	ArrayIndexing	axis [ 0 ]
>2668	PrimaryExpression	0
>2669	Identifier	axis
>2670	IdentifierDeclStatement	 
>2671	IdentifierDecl	angle
>2672	Identifier	angle
>2673	IdentifierDeclType	double
>2674	IdentifierDecl	axis [ 3 ]
>2675	PrimaryExpression	3
>2676	Identifier	axis
>2677	IdentifierDeclType	double [ 3 ]
>2678	IncDecOp	 
>2679	IncDec	++
>2680	Identifier	i
>2681	Condition	 
>2682	RelationalExpression	i < num_cameras
>2683	Identifier	num_cameras
>2684	Identifier	i
>2685	ForInit	 
>2686	IdentifierDeclStatement	int i = 0 ;
>2687	IdentifierDecl	i = 0
>2688	AssignmentExpr	i = 0
>2689	PrimaryExpression	0
>2690	Identifier	i
>2691	Identifier	i
>2692	IdentifierDeclType	int
>2693	ExpressionStatement	 
>2694	AssignmentExpr	ptr = final_x
>2695	Identifier	final_x
>2696	Identifier	ptr
>2697	ExpressionStatement	 
>2698	AssignmentExpr	final_x = init_x
>2699	Identifier	init_x
>2700	Identifier	final_x
>2701	IfStatement	if ( round == 0 )
>2702	CompoundStatement	 
>2703	ExpressionStatement	 
>2704	CallExpression	fclose ( f )
>2705	ArgumentList	f
>2706	Argument	f
>2707	Identifier	f
>2708	Callee	fclose
>2709	Identifier	fclose
>2710	ForStatement	for ( int i = 0 ; i < num_parameters ; i ++ )
>2711	CompoundStatement	 
>2712	ExpressionStatement	 
>2713	CallExpression	fprintf ( f , \"%0.16e\n\" , init_x [ i ] )
>2714	ArgumentList	f
>2715	Argument	init_x [ i ]
>2716	ArrayIndexing	init_x [ i ]
>2717	Identifier	i
>2718	Identifier	init_x
>2719	Argument	\"%0.16e\n\"
>2720	PrimaryExpression	\"%0.16e\n\"
>2721	Argument	f
>2722	Identifier	f
>2723	Callee	fprintf
>2724	Identifier	fprintf
>2725	IncDecOp	 
>2726	IncDec	++
>2727	Identifier	i
>2728	Condition	 
>2729	RelationalExpression	i < num_parameters
>2730	Identifier	num_parameters
>2731	Identifier	i
>2732	ForInit	 
>2733	IdentifierDeclStatement	int i = 0 ;
>2734	IdentifierDecl	i = 0
>2735	AssignmentExpr	i = 0
>2736	PrimaryExpression	0
>2737	Identifier	i
>2738	Identifier	i
>2739	IdentifierDeclType	int
>2740	ForStatement	for ( int i = 0 ; i < num_projections ; i ++ )
>2741	CompoundStatement	 
>2742	ExpressionStatement	 
>2743	CallExpression	fprintf ( f , \"%d %d     %0.6e %0.6e\n\" , cidx [ i ] , pidx [ i ] , projections [ 2 * i ] , projections [ 2 * i + \
>2744	ArgumentList	f
>2745	Argument	projections [ 2 * i + 1 ]
>2746	ArrayIndexing	projections [ 2 * i + 1 ]
>2747	AdditiveExpression	2 * i + 1
>2748	PrimaryExpression	1
>2749	MultiplicativeExpression	2 * i
>2750	Identifier	i
>2751	PrimaryExpression	2
>2752	Identifier	projections
>2753	Argument	projections [ 2 * i ]
>2754	ArrayIndexing	projections [ 2 * i ]
>2755	MultiplicativeExpression	2 * i
>2756	Identifier	i
>2757	PrimaryExpression	2
>2758	Identifier	projections
>2759	Argument	pidx [ i ]
>2760	ArrayIndexing	pidx [ i ]
>2761	Identifier	i
>2762	Identifier	pidx
>2763	Argument	cidx [ i ]
>2764	ArrayIndexing	cidx [ i ]
>2765	Identifier	i
>2766	Identifier	cidx
>2767	Argument	\"%d %d     %0.6e %0.6e\n\"
>2768	PrimaryExpression	\"%d %d     %0.6e %0.6e\n\"
>2769	Argument	f
>2770	Identifier	f
>2771	Callee	fprintf
>2772	Identifier	fprintf
>2773	IncDecOp	 
>2774	IncDec	++
>2775	Identifier	i
>2776	Condition	 
>2777	RelationalExpression	i < num_projections
>2778	Identifier	num_projections
>2779	Identifier	i
>2780	ForInit	 
>2781	IdentifierDeclStatement	int i = 0 ;
>2782	IdentifierDecl	i = 0
>2783	AssignmentExpr	i = 0
>2784	PrimaryExpression	0
>2785	Identifier	i
>2786	Identifier	i
>2787	IdentifierDeclType	int
>2788	ExpressionStatement	 
>2789	CallExpression	fprintf ( f , \"%d %d %d\n\" , num_cameras , num_nz_points , num_projections )
>2790	ArgumentList	f
>2791	Argument	num_projections
>2792	Identifier	num_projections
>2793	Argument	num_nz_points
>2794	Identifier	num_nz_points
>2795	Argument	num_cameras
>2796	Identifier	num_cameras
>2797	Argument	\"%d %d %d\n\"
>2798	PrimaryExpression	\"%d %d %d\n\"
>2799	Argument	f
>2800	Identifier	f
>2801	Callee	fprintf
>2802	Identifier	fprintf
>2803	IdentifierDeclStatement	 
>2804	IdentifierDecl	* f = fopen ( problem_file , \"w\" )
>2805	AssignmentExpr	* f = fopen ( problem_file , \"w\" )
>2806	CallExpression	fopen ( problem_file , \"w\" )
>2807	ArgumentList	problem_file
>2808	Argument	\"w\"
>2809	PrimaryExpression	\"w\"
>2810	Argument	problem_file
>2811	Identifier	problem_file
>2812	Callee	fopen
>2813	Identifier	fopen
>2814	Identifier	f
>2815	Identifier	f
>2816	IdentifierDeclType	FILE *
>2817	ExpressionStatement	 
>2818	CallExpression	sprintf ( problem_file , \"problem-%d-%d-post%d.txt\" , num_cameras , num_nz_points , round )
>2819	ArgumentList	problem_file
>2820	Argument	round
>2821	Identifier	round
>2822	Argument	num_nz_points
>2823	Identifier	num_nz_points
>2824	Argument	num_cameras
>2825	Identifier	num_cameras
>2826	Argument	\"problem-%d-%d-post%d.txt\"
>2827	PrimaryExpression	\"problem-%d-%d-post%d.txt\"
>2828	Argument	problem_file
>2829	Identifier	problem_file
>2830	Callee	sprintf
>2831	Identifier	sprintf
>2832	IdentifierDeclStatement	 
>2833	IdentifierDecl	problem_file [ 256 ]
>2834	PrimaryExpression	256
>2835	Identifier	problem_file
>2836	IdentifierDeclType	char [ 256 ]
>2837	Condition	 
>2838	EqualityExpression	round == 0
>2839	PrimaryExpression	0
>2840	Identifier	round
>2841	IfStatement	if ( summary . preprocessor_time_in_seconds >= 20 )
>2842	CompoundStatement	 
>2843	ExpressionStatement	 
>2844	AssignmentExpr	use_dense = false
>2845	Identifier	false
>2846	Identifier	use_dense
>2847	Condition	 
>2848	RelationalExpression	summary . preprocessor_time_in_seconds >= 20
>2849	PrimaryExpression	20
>2850	MemberAccess	summary . preprocessor_time_in_seconds
>2851	Identifier	preprocessor_time_in_seconds
>2852	Identifier	summary
>2853	ExpressionStatement	 
>2854	CallExpression	fflush ( stderr )
>2855	ArgumentList	stderr
>2856	Argument	stderr
>2857	Identifier	stderr
>2858	Callee	fflush
>2859	Identifier	fflush
>2860	ExpressionStatement	 
>2861	CallExpression	fflush ( stdout )
>2862	ArgumentList	stdout
>2863	Argument	stdout
>2864	Identifier	stdout
>2865	Callee	fflush
>2866	Identifier	fflush
>2867	ExpressionStatement	 
>2868	ShiftExpression	std 
>2869	ShiftExpression	summary . FullReport ( ) << \"\n\"
>2870	PrimaryExpression	\"\n\"
>2871	CallExpression	summary . FullReport ( )
>2872	ArgumentList	 
>2873	Callee	summary . FullReport
>2874	MemberAccess	summary . FullReport
>2875	Identifier	FullReport
>2876	Identifier	summary
>2877	Identifier	std 
>2878	ExpressionStatement	 
>2879	CallExpression	ceres 
>2880	ArgumentList	options
>2881	Argument	& summary
>2882	UnaryOp	& summary
>2883	Identifier	summary
>2884	UnaryOperator	&
>2885	Argument	& problem
>2886	UnaryOp	& problem
>2887	Identifier	problem
>2888	UnaryOperator	&
>2889	Argument	options
>2890	Identifier	options
>2891	Callee	ceres 
>2892	Identifier	ceres 
>2893	IdentifierDeclStatement	 
>2894	IdentifierDecl	summary
>2895	Identifier	summary
>2896	IdentifierDeclType	ceres 
>2897	ExpressionStatement	 
>2898	AssignmentExpr	options . num_linear_solver_threads = omp_get_max_threads ( )
>2899	CallExpression	omp_get_max_threads ( )
>2900	ArgumentList	 
>2901	Callee	omp_get_max_threads
>2902	Identifier	omp_get_max_threads
>2903	MemberAccess	options . num_linear_solver_threads
>2904	Identifier	num_linear_solver_threads
>2905	Identifier	options
>2906	ExpressionStatement	 
>2907	AssignmentExpr	options . num_threads = omp_get_max_threads ( )
>2908	CallExpression	omp_get_max_threads ( )
>2909	ArgumentList	 
>2910	Callee	omp_get_max_threads
>2911	Identifier	omp_get_max_threads
>2912	MemberAccess	options . num_threads
>2913	Identifier	num_threads
>2914	Identifier	options
>2915	IfStatement	if ( iterative )
>2916	CompoundStatement	 
>2917	Condition	 
>2918	Identifier	iterative
>2919	ExpressionStatement	 
>2920	AssignmentExpr	options . minimizer_progress_to_stdout = true
>2921	Identifier	true
>2922	MemberAccess	options . minimizer_progress_to_stdout
>2923	Identifier	minimizer_progress_to_stdout
>2924	Identifier	options
>2925	IfStatement	if ( max_iter == 0 )
>2926	ElseStatement	else
>2927	CompoundStatement	 
>2928	IfStatement	if ( round == 0 || max_iter2 == 0 )
>2929	ElseStatement	else
>2930	ExpressionStatement	 
>2931	AssignmentExpr	options . max_num_iterations = max_iter2
>2932	Identifier	max_iter2
>2933	MemberAccess	options . max_num_iterations
>2934	Identifier	max_num_iterations
>2935	Identifier	options
>2936	ExpressionStatement	 
>2937	AssignmentExpr	options . max_num_iterations = max_iter
>2938	Identifier	max_iter
>2939	MemberAccess	options . max_num_iterations
>2940	Identifier	max_num_iterations
>2941	Identifier	options
>2942	Condition	 
>2943	OrExpression	round == 0 || max_iter2 == 0
>2944	EqualityExpression	max_iter2 == 0
>2945	PrimaryExpression	0
>2946	Identifier	max_iter2
>2947	EqualityExpression	round == 0
>2948	PrimaryExpression	0
>2949	Identifier	round
>2950	CompoundStatement	 
>2951	IfStatement	if ( round > 0 )
>2952	CompoundStatement	 
>2953	IfStatement	if ( ! iterative )
>2954	ElseStatement	else
>2955	ExpressionStatement	 
>2956	AssignmentExpr	options . max_num_iterations = 20
>2957	PrimaryExpression	20
>2958	MemberAccess	options . max_num_iterations
>2959	Identifier	max_num_iterations
>2960	Identifier	options
>2961	ExpressionStatement	 
>2962	AssignmentExpr	options . max_num_iterations = 10
>2963	PrimaryExpression	10
>2964	MemberAccess	options . max_num_iterations
>2965	Identifier	max_num_iterations
>2966	Identifier	options
>2967	Condition	 
>2968	UnaryOp	! iterative
>2969	Identifier	iterative
>2970	UnaryOperator	!
>2971	Condition	 
>2972	RelationalExpression	round > 0
>2973	PrimaryExpression	0
>2974	Identifier	round
>2975	ExpressionStatement	 
>2976	AssignmentExpr	options . max_num_iterations = ( ( final_bundle ) ? 60 
>2977	ConditionalExpression	( final_bundle ) ? 60 
>2978	PrimaryExpression	25
>2979	PrimaryExpression	60
>2980	Condition	final_bundle
>2981	Identifier	final_bundle
>2982	MemberAccess	options . max_num_iterations
>2983	Identifier	max_num_iterations
>2984	Identifier	options
>2985	Condition	 
>2986	EqualityExpression	max_iter == 0
>2987	PrimaryExpression	0
>2988	Identifier	max_iter
>2989	ExpressionStatement	 
>2990	AssignmentExpr	options . function_tolerance = 1e-4
>2991	PrimaryExpression	1e-4
>2992	MemberAccess	options . function_tolerance
>2993	Identifier	function_tolerance
>2994	Identifier	options
>2995	ExpressionStatement	 
>2996	AssignmentExpr	options . parameter_tolerance = 1e-8
>2997	PrimaryExpression	1e-8
>2998	MemberAccess	options . parameter_tolerance
>2999	Identifier	parameter_tolerance
>3000	Identifier	options
>3001	IfStatement	if ( use_dense && ! final_bundle )
>3002	ElseStatement	else
>3003	CompoundStatement	 
>3004	ExpressionStatement	 
>3005	AssignmentExpr	iterative = true
>3006	Identifier	true
>3007	Identifier	iterative
>3008	ExpressionStatement	 
>3009	AssignmentExpr	options . preconditioner_type = ceres 
>3010	Identifier	ceres 
>3011	MemberAccess	options . preconditioner_type
>3012	Identifier	preconditioner_type
>3013	Identifier	options
>3014	ExpressionStatement	 
>3015	AssignmentExpr	options . linear_solver_type = ceres 
>3016	Identifier	ceres 
>3017	MemberAccess	options . linear_solver_type
>3018	Identifier	linear_solver_type
>3019	Identifier	options
>3020	ExpressionStatement	 
>3021	CallExpression	printf ( \"[Ceres] Using CG\n\" )
>3022	ArgumentList	\"[Ceres] Using CG\n\"
>3023	Argument	\"[Ceres] Using CG\n\"
>3024	PrimaryExpression	\"[Ceres] Using CG\n\"
>3025	Callee	printf
>3026	Identifier	printf
>3027	CompoundStatement	 
>3028	ExpressionStatement	 
>3029	AssignmentExpr	options . linear_solver_type = ceres 
>3030	Identifier	ceres 
>3031	MemberAccess	options . linear_solver_type
>3032	Identifier	linear_solver_type
>3033	Identifier	options
>3034	ExpressionStatement	 
>3035	CallExpression	printf ( \"[Ceres] Using CHOLMOD\n\" )
>3036	ArgumentList	\"[Ceres] Using CHOLMOD\n\"
>3037	Argument	\"[Ceres] Using CHOLMOD\n\"
>3038	PrimaryExpression	\"[Ceres] Using CHOLMOD\n\"
>3039	Callee	printf
>3040	Identifier	printf
>3041	Condition	 
>3042	AndExpression	use_dense && ! final_bundle
>3043	UnaryOp	! final_bundle
>3044	Identifier	final_bundle
>3045	UnaryOperator	!
>3046	Identifier	use_dense
>3047	IdentifierDeclStatement	 
>3048	IdentifierDecl	iterative = false
>3049	AssignmentExpr	iterative = false
>3050	Identifier	false
>3051	Identifier	false
>3052	Identifier	iterative
>3053	IdentifierDeclType	bool
>3054	IdentifierDeclStatement	 
>3055	IdentifierDecl	options
>3056	Identifier	options
>3057	IdentifierDeclType	ceres 
>3058	IdentifierDeclStatement	 
>3059	IdentifierDecl	* final_x = NULL
>3060	AssignmentExpr	* final_x = NULL
>3061	Identifier	NULL
>3062	Identifier	NULL
>3063	Identifier	final_x
>3064	IdentifierDeclType	double *
>3065	IfStatement	if ( true )
>3066	CompoundStatement	 
>3067	ExpressionStatement	 
>3068	CallExpression	fclose ( f )
>3069	ArgumentList	f
>3070	Argument	f
>3071	Identifier	f
>3072	Callee	fclose
>3073	Identifier	fclose
>3074	ForStatement	for ( unsigned int i = 0 ; i < num_parameters ; i ++ )
>3075	CompoundStatement	 
>3076	ExpressionStatement	 
>3077	CallExpression	fprintf ( f , \"%0.16e\n\" , init_x [ i ] )
>3078	ArgumentList	f
>3079	Argument	init_x [ i ]
>3080	ArrayIndexing	init_x [ i ]
>3081	Identifier	i
>3082	Identifier	init_x
>3083	Argument	\"%0.16e\n\"
>3084	PrimaryExpression	\"%0.16e\n\"
>3085	Argument	f
>3086	Identifier	f
>3087	Callee	fprintf
>3088	Identifier	fprintf
>3089	IncDecOp	 
>3090	IncDec	++
>3091	Identifier	i
>3092	Condition	 
>3093	RelationalExpression	i < num_parameters
>3094	Identifier	num_parameters
>3095	Identifier	i
>3096	ForInit	 
>3097	IdentifierDeclStatement	unsigned int i = 0 ;
>3098	IdentifierDecl	i = 0
>3099	AssignmentExpr	i = 0
>3100	PrimaryExpression	0
>3101	Identifier	i
>3102	Identifier	i
>3103	IdentifierDeclType	unsigned int
>3104	ForStatement	for ( int i = 0 ; i < num_projections ; i ++ )
>3105	CompoundStatement	 
>3106	ExpressionStatement	 
>3107	CallExpression	fprintf ( f , \"%d %d     %0.6e %0.6e\n\" , cidx [ i ] , pidx [ i ] , projections [ 2 * i ] , projections [ 2 * i + \
>3108	ArgumentList	f
>3109	Argument	projections [ 2 * i + 1 ]
>3110	ArrayIndexing	projections [ 2 * i + 1 ]
>3111	AdditiveExpression	2 * i + 1
>3112	PrimaryExpression	1
>3113	MultiplicativeExpression	2 * i
>3114	Identifier	i
>3115	PrimaryExpression	2
>3116	Identifier	projections
>3117	Argument	projections [ 2 * i ]
>3118	ArrayIndexing	projections [ 2 * i ]
>3119	MultiplicativeExpression	2 * i
>3120	Identifier	i
>3121	PrimaryExpression	2
>3122	Identifier	projections
>3123	Argument	pidx [ i ]
>3124	ArrayIndexing	pidx [ i ]
>3125	Identifier	i
>3126	Identifier	pidx
>3127	Argument	cidx [ i ]
>3128	ArrayIndexing	cidx [ i ]
>3129	Identifier	i
>3130	Identifier	cidx
>3131	Argument	\"%d %d     %0.6e %0.6e\n\"
>3132	PrimaryExpression	\"%d %d     %0.6e %0.6e\n\"
>3133	Argument	f
>3134	Identifier	f
>3135	Callee	fprintf
>3136	Identifier	fprintf
>3137	IncDecOp	 
>3138	IncDec	++
>3139	Identifier	i
>3140	Condition	 
>3141	RelationalExpression	i < num_projections
>3142	Identifier	num_projections
>3143	Identifier	i
>3144	ForInit	 
>3145	IdentifierDeclStatement	int i = 0 ;
>3146	IdentifierDecl	i = 0
>3147	AssignmentExpr	i = 0
>3148	PrimaryExpression	0
>3149	Identifier	i
>3150	Identifier	i
>3151	IdentifierDeclType	int
>3152	ExpressionStatement	 
>3153	CallExpression	fprintf ( f , \"%d %d %d\n\" , num_cameras , num_nz_points , num_projections )
>3154	ArgumentList	f
>3155	Argument	num_projections
>3156	Identifier	num_projections
>3157	Argument	num_nz_points
>3158	Identifier	num_nz_points
>3159	Argument	num_cameras
>3160	Identifier	num_cameras
>3161	Argument	\"%d %d %d\n\"
>3162	PrimaryExpression	\"%d %d %d\n\"
>3163	Argument	f
>3164	Identifier	f
>3165	Callee	fprintf
>3166	Identifier	fprintf
>3167	IdentifierDeclStatement	 
>3168	IdentifierDecl	* f = fopen ( problem_file , \"w\" )
>3169	AssignmentExpr	* f = fopen ( problem_file , \"w\" )
>3170	CallExpression	fopen ( problem_file , \"w\" )
>3171	ArgumentList	problem_file
>3172	Argument	\"w\"
>3173	PrimaryExpression	\"w\"
>3174	Argument	problem_file
>3175	Identifier	problem_file
>3176	Callee	fopen
>3177	Identifier	fopen
>3178	Identifier	f
>3179	Identifier	f
>3180	IdentifierDeclType	FILE *
>3181	ExpressionStatement	 
>3182	CallExpression	sprintf ( problem_file , \"problem-%d-%d-pre%d.txt\" , num_cameras , num_nz_points , round )
>3183	ArgumentList	problem_file
>3184	Argument	round
>3185	Identifier	round
>3186	Argument	num_nz_points
>3187	Identifier	num_nz_points
>3188	Argument	num_cameras
>3189	Identifier	num_cameras
>3190	Argument	\"problem-%d-%d-pre%d.txt\"
>3191	PrimaryExpression	\"problem-%d-%d-pre%d.txt\"
>3192	Argument	problem_file
>3193	Identifier	problem_file
>3194	Callee	sprintf
>3195	Identifier	sprintf
>3196	IdentifierDeclStatement	 
>3197	IdentifierDecl	problem_file [ 256 ]
>3198	PrimaryExpression	256
>3199	Identifier	problem_file
>3200	IdentifierDeclType	char [ 256 ]
>3201	Condition	 
>3202	Identifier	true
>3203	ExpressionStatement	 
>3204	CallExpression	fflush ( stderr )
>3205	ArgumentList	stderr
>3206	Argument	stderr
>3207	Identifier	stderr
>3208	Callee	fflush
>3209	Identifier	fflush
>3210	ExpressionStatement	 
>3211	CallExpression	fflush ( stdout )
>3212	ArgumentList	stdout
>3213	Argument	stdout
>3214	Identifier	stdout
>3215	Callee	fflush
>3216	Identifier	fflush
>3217	ExpressionStatement	 
>3218	CallExpression	printf ( \"[Ceres] num_projections = %d\n\" , num_projections )
>3219	ArgumentList	\"[Ceres] num_projections = %d\n\"
>3220	Argument	num_projections
>3221	Identifier	num_projections
>3222	Argument	\"[Ceres] num_projections = %d\n\"
>3223	PrimaryExpression	\"[Ceres] num_projections = %d\n\"
>3224	Callee	printf
>3225	Identifier	printf
>3226	ExpressionStatement	 
>3227	CallExpression	printf ( \"[Ceres] num_params = %d\n\" , num_parameters )
>3228	ArgumentList	\"[Ceres] num_params = %d\n\"
>3229	Argument	num_parameters
>3230	Identifier	num_parameters
>3231	Argument	\"[Ceres] num_params = %d\n\"
>3232	PrimaryExpression	\"[Ceres] num_params = %d\n\"
>3233	Callee	printf
>3234	Identifier	printf
>3235	ExpressionStatement	 
>3236	CallExpression	printf ( \"[Ceres] num_cameras = %d\n\" , num_cameras )
>3237	ArgumentList	\"[Ceres] num_cameras = %d\n\"
>3238	Argument	num_cameras
>3239	Identifier	num_cameras
>3240	Argument	\"[Ceres] num_cameras = %d\n\"
>3241	PrimaryExpression	\"[Ceres] num_cameras = %d\n\"
>3242	Callee	printf
>3243	Identifier	printf
>3244	ExpressionStatement	 
>3245	CallExpression	printf ( \"[Ceres] num_points = %d\n\" , num_nz_points )
>3246	ArgumentList	\"[Ceres] num_points = %d\n\"
>3247	Argument	num_nz_points
>3248	Identifier	num_nz_points
>3249	Argument	\"[Ceres] num_points = %d\n\"
>3250	PrimaryExpression	\"[Ceres] num_points = %d\n\"
>3251	Callee	printf
>3252	Identifier	printf
>3253	IdentifierDeclStatement	 
>3254	IdentifierDecl	start = clock ( )
>3255	AssignmentExpr	start = clock ( )
>3256	CallExpression	clock ( )
>3257	ArgumentList	 
>3258	Callee	clock
>3259	Identifier	clock
>3260	Identifier	start
>3261	Identifier	start
>3262	IdentifierDeclType	clock_t
>3263	ExpressionStatement	 
>3264	AssignmentExpr	num_dists = 0
>3265	PrimaryExpression	0
>3266	Identifier	num_dists
>3267	ExpressionStatement	 
>3268	AssignmentExpr	dist_total = 0.0
>3269	PrimaryExpression	0.0
>3270	Identifier	dist_total
>3271	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>3272	CompoundStatement	 
>3273	ExpressionStatement	 
>3274	CallExpression	problem . AddResidualBlock ( prior_cost_function , NULL , cameras + cnp * i )
>3275	ArgumentList	prior_cost_function
>3276	Argument	cameras + cnp * i
>3277	AdditiveExpression	cameras + cnp * i
>3278	MultiplicativeExpression	cnp * i
>3279	Identifier	i
>3280	Identifier	cnp
>3281	Identifier	cameras
>3282	Argument	NULL
>3283	Identifier	NULL
>3284	Argument	prior_cost_function
>3285	Identifier	prior_cost_function
>3286	Callee	problem . AddResidualBlock
>3287	MemberAccess	problem . AddResidualBlock
>3288	Identifier	AddResidualBlock
>3289	Identifier	problem
>3290	ExpressionStatement	 
>3291	AssignmentExpr	prior_cost_function = new ceres 
>3292	Expression	8 , 0.0 , 0.0001 * m_distortion_weight * num_vis [ i ]
>3293	Expression	0.0 , 0.0001 * m_distortion_weight * num_vis [ i ]
>3294	MultiplicativeExpression	0.0001 * m_distortion_weight * num_vis [ i ]
>3295	MultiplicativeExpression	m_distortion_weight * num_vis [ i ]
>3296	ArrayIndexing	num_vis [ i ]
>3297	Identifier	i
>3298	Identifier	num_vis
>3299	Identifier	m_distortion_weight
>3300	PrimaryExpression	0.0001
>3301	PrimaryExpression	0.0
>3302	PrimaryExpression	8
>3303	Identifier	prior_cost_function
>3304	ExpressionStatement	 
>3305	CallExpression	problem . AddResidualBlock ( prior_cost_function , NULL , cameras + cnp * i )
>3306	ArgumentList	prior_cost_function
>3307	Argument	cameras + cnp * i
>3308	AdditiveExpression	cameras + cnp * i
>3309	MultiplicativeExpression	cnp * i
>3310	Identifier	i
>3311	Identifier	cnp
>3312	Identifier	cameras
>3313	Argument	NULL
>3314	Identifier	NULL
>3315	Argument	prior_cost_function
>3316	Identifier	prior_cost_function
>3317	Callee	problem . AddResidualBlock
>3318	MemberAccess	problem . AddResidualBlock
>3319	Identifier	AddResidualBlock
>3320	Identifier	problem
>3321	ExpressionStatement	 
>3322	AssignmentExpr	prior_cost_function = new ceres 
>3323	Expression	7 , 0.0 , 0.0001 * m_distortion_weight * num_vis [ i ]
>3324	Expression	0.0 , 0.0001 * m_distortion_weight * num_vis [ i ]
>3325	MultiplicativeExpression	0.0001 * m_distortion_weight * num_vis [ i ]
>3326	MultiplicativeExpression	m_distortion_weight * num_vis [ i ]
>3327	ArrayIndexing	num_vis [ i ]
>3328	Identifier	i
>3329	Identifier	num_vis
>3330	Identifier	m_distortion_weight
>3331	PrimaryExpression	0.0001
>3332	PrimaryExpression	0.0
>3333	PrimaryExpression	7
>3334	Identifier	prior_cost_function
>3335	IfStatement	if ( init_camera_params [ i ] . constrained [ 6 ] )
>3336	CompoundStatement	 
>3337	ExpressionStatement	 
>3338	CallExpression	problem . AddResidualBlock ( prior_cost_function , NULL , cameras + cnp * i )
>3339	ArgumentList	prior_cost_function
>3340	Argument	cameras + cnp * i
>3341	AdditiveExpression	cameras + cnp * i
>3342	MultiplicativeExpression	cnp * i
>3343	Identifier	i
>3344	Identifier	cnp
>3345	Identifier	cameras
>3346	Argument	NULL
>3347	Identifier	NULL
>3348	Argument	prior_cost_function
>3349	Identifier	prior_cost_function
>3350	Callee	problem . AddResidualBlock
>3351	MemberAccess	problem . AddResidualBlock
>3352	Identifier	AddResidualBlock
>3353	Identifier	problem
>3354	ExpressionStatement	 
>3355	AssignmentExpr	prior_cost_function = new ceres 
>3356	Expression	6 , init_camera_params [ i ] . constraints [ 6 ] , init_camera_params [ i ] . weights [ 6 ] * num_vis [ i ]
>3357	Expression	init_camera_params [ i ] . constraints [ 6 ] , init_camera_params [ i ] . weights [ 6 ] * num_vis [ i ]
>3358	MultiplicativeExpression	init_camera_params [ i ] . weights [ 6 ] * num_vis [ i ]
>3359	ArrayIndexing	num_vis [ i ]
>3360	Identifier	i
>3361	Identifier	num_vis
>3362	ArrayIndexing	init_camera_params [ i ] . weights [ 6 ]
>3363	PrimaryExpression	6
>3364	MemberAccess	init_camera_params [ i ] . weights
>3365	Identifier	weights
>3366	ArrayIndexing	init_camera_params [ i ]
>3367	Identifier	i
>3368	Identifier	init_camera_params
>3369	ArrayIndexing	init_camera_params [ i ] . constraints [ 6 ]
>3370	PrimaryExpression	6
>3371	MemberAccess	init_camera_params [ i ] . constraints
>3372	Identifier	constraints
>3373	ArrayIndexing	init_camera_params [ i ]
>3374	Identifier	i
>3375	Identifier	init_camera_params
>3376	PrimaryExpression	6
>3377	Identifier	prior_cost_function
>3378	Condition	 
>3379	ArrayIndexing	init_camera_params [ i ] . constrained [ 6 ]
>3380	PrimaryExpression	6
>3381	MemberAccess	init_camera_params [ i ] . constrained
>3382	Identifier	constrained
>3383	ArrayIndexing	init_camera_params [ i ]
>3384	Identifier	i
>3385	Identifier	init_camera_params
>3386	IdentifierDeclStatement	 
>3387	IdentifierDecl	* prior_cost_function
>3388	Identifier	prior_cost_function
>3389	IdentifierDeclType	ceres 
>3390	IncDecOp	 
>3391	IncDec	++
>3392	Identifier	i
>3393	Condition	 
>3394	RelationalExpression	i < num_cameras
>3395	Identifier	num_cameras
>3396	Identifier	i
>3397	ForInit	 
>3398	IdentifierDeclStatement	int i = 0 ;
>3399	IdentifierDecl	i = 0
>3400	AssignmentExpr	i = 0
>3401	PrimaryExpression	0
>3402	Identifier	i
>3403	Identifier	i
>3404	IdentifierDeclType	int
>3405	ForStatement	for ( int i = 0 ; i < num_projections ; ++ i )
>3406	CompoundStatement	 
>3407	ExpressionStatement	 
>3408	CallExpression	problem . AddResidualBlock ( cost_function , loss_function , camera , point )
>3409	ArgumentList	cost_function
>3410	Argument	point
>3411	Identifier	point
>3412	Argument	camera
>3413	Identifier	camera
>3414	Argument	loss_function
>3415	Identifier	loss_function
>3416	Argument	cost_function
>3417	Identifier	cost_function
>3418	Callee	problem . AddResidualBlock
>3419	MemberAccess	problem . AddResidualBlock
>3420	Identifier	AddResidualBlock
>3421	Identifier	problem
>3422	IdentifierDeclStatement	 
>3423	IdentifierDecl	* point = points + pnp * pidx [ i ]
>3424	AssignmentExpr	* point = points + pnp * pidx [ i ]
>3425	AdditiveExpression	points + pnp * pidx [ i ]
>3426	MultiplicativeExpression	pnp * pidx [ i ]
>3427	ArrayIndexing	pidx [ i ]
>3428	Identifier	i
>3429	Identifier	pidx
>3430	Identifier	pnp
>3431	Identifier	points
>3432	Identifier	point
>3433	Identifier	point
>3434	IdentifierDeclType	double *
>3435	IdentifierDeclStatement	 
>3436	IdentifierDecl	* camera = cameras + cnp * cidx [ i ]
>3437	AssignmentExpr	* camera = cameras + cnp * cidx [ i ]
>3438	AdditiveExpression	cameras + cnp * cidx [ i ]
>3439	MultiplicativeExpression	cnp * cidx [ i ]
>3440	ArrayIndexing	cidx [ i ]
>3441	Identifier	i
>3442	Identifier	cidx
>3443	Identifier	cnp
>3444	Identifier	cameras
>3445	Identifier	camera
>3446	Identifier	camera
>3447	IdentifierDeclType	double *
>3448	ExpressionStatement	 
>3449	AssignmentExpr	loss_function = new ceres 
>3450	Identifier	HUBER_PARAM
>3451	Identifier	loss_function
>3452	IdentifierDeclStatement	 
>3453	IdentifierDecl	* loss_function = NULL
>3454	AssignmentExpr	* loss_function = NULL
>3455	Identifier	NULL
>3456	Identifier	NULL
>3457	Identifier	loss_function
>3458	IdentifierDeclType	ceres 
>3459	ExpressionStatement	 
>3460	AssignmentExpr	cost_function = new ceres 
>3461	Expression	projections [ 2 * i + 0 ] , projections [ 2 * i + 1 ]
>3462	ArrayIndexing	projections [ 2 * i + 1 ]
>3463	AdditiveExpression	2 * i + 1
>3464	PrimaryExpression	1
>3465	MultiplicativeExpression	2 * i
>3466	Identifier	i
>3467	PrimaryExpression	2
>3468	Identifier	projections
>3469	ArrayIndexing	projections [ 2 * i + 0 ]
>3470	AdditiveExpression	2 * i + 0
>3471	PrimaryExpression	0
>3472	MultiplicativeExpression	2 * i
>3473	Identifier	i
>3474	PrimaryExpression	2
>3475	Identifier	projections
>3476	Identifier	cost_function
>3477	IdentifierDeclStatement	 
>3478	IdentifierDecl	* cost_function
>3479	Identifier	cost_function
>3480	IdentifierDeclType	ceres 
>3481	UnaryExpression	 
>3482	Identifier	i
>3483	IncDec	++
>3484	Condition	 
>3485	RelationalExpression	i < num_projections
>3486	Identifier	num_projections
>3487	Identifier	i
>3488	ForInit	 
>3489	IdentifierDeclStatement	int i = 0 ;
>3490	IdentifierDecl	i = 0
>3491	AssignmentExpr	i = 0
>3492	PrimaryExpression	0
>3493	Identifier	i
>3494	Identifier	i
>3495	IdentifierDeclType	int
>3496	ExpressionStatement	 
>3497	CallExpression	assert ( idx == ( int ) num_parameters )
>3498	ArgumentList	idx == ( int ) num_parameters
>3499	Argument	idx == ( int ) num_parameters
>3500	EqualityExpression	idx == ( int ) num_parameters
>3501	CastExpression	( int ) num_parameters
>3502	Identifier	num_parameters
>3503	CastTarget	int
>3504	Identifier	idx
>3505	Callee	assert
>3506	Identifier	assert
>3507	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>3508	CompoundStatement	 
>3509	IfStatement	if ( num_views > 0 )
>3510	CompoundStatement	 
>3511	ExpressionStatement	 
>3512	IncDecOp	idx ++
>3513	IncDec	++
>3514	Identifier	idx
>3515	ExpressionStatement	 
>3516	AssignmentExpr	ptr [ idx ] = Vz ( init_pts [ i ] )
>3517	CallExpression	Vz ( init_pts [ i ] )
>3518	ArgumentList	init_pts [ i ]
>3519	Argument	init_pts [ i ]
>3520	ArrayIndexing	init_pts [ i ]
>3521	Identifier	i
>3522	Identifier	init_pts
>3523	Callee	Vz
>3524	Identifier	Vz
>3525	ArrayIndexing	ptr [ idx ]
>3526	Identifier	idx
>3527	Identifier	ptr
>3528	ExpressionStatement	 
>3529	IncDecOp	idx ++
>3530	IncDec	++
>3531	Identifier	idx
>3532	ExpressionStatement	 
>3533	AssignmentExpr	ptr [ idx ] = Vy ( init_pts [ i ] )
>3534	CallExpression	Vy ( init_pts [ i ] )
>3535	ArgumentList	init_pts [ i ]
>3536	Argument	init_pts [ i ]
>3537	ArrayIndexing	init_pts [ i ]
>3538	Identifier	i
>3539	Identifier	init_pts
>3540	Callee	Vy
>3541	Identifier	Vy
>3542	ArrayIndexing	ptr [ idx ]
>3543	Identifier	idx
>3544	Identifier	ptr
>3545	ExpressionStatement	 
>3546	IncDecOp	idx ++
>3547	IncDec	++
>3548	Identifier	idx
>3549	ExpressionStatement	 
>3550	AssignmentExpr	ptr [ idx ] = Vx ( init_pts [ i ] )
>3551	CallExpression	Vx ( init_pts [ i ] )
>3552	ArgumentList	init_pts [ i ]
>3553	Argument	init_pts [ i ]
>3554	ArrayIndexing	init_pts [ i ]
>3555	Identifier	i
>3556	Identifier	init_pts
>3557	Callee	Vx
>3558	Identifier	Vx
>3559	ArrayIndexing	ptr [ idx ]
>3560	Identifier	idx
>3561	Identifier	ptr
>3562	Condition	 
>3563	RelationalExpression	num_views > 0
>3564	PrimaryExpression	0
>3565	Identifier	num_views
>3566	IdentifierDeclStatement	 
>3567	IdentifierDecl	num_views = ( int ) pt_views [ i ] . size ( )
>3568	AssignmentExpr	num_views = ( int ) pt_views [ i ] . size ( )
>3569	CastExpression	( int ) pt_views [ i ] . size ( )
>3570	CallExpression	pt_views [ i ] . size ( )
>3571	ArgumentList	 
>3572	Callee	pt_views [ i ] . size
>3573	MemberAccess	pt_views [ i ] . size
>3574	Identifier	size
>3575	ArrayIndexing	pt_views [ i ]
>3576	Identifier	i
>3577	Identifier	pt_views
>3578	CastTarget	int
>3579	Identifier	num_views
>3580	Identifier	num_views
>3581	IdentifierDeclType	int
>3582	IncDecOp	 
>3583	IncDec	++
>3584	Identifier	i
>3585	Condition	 
>3586	RelationalExpression	i < num_pts
>3587	Identifier	num_pts
>3588	Identifier	i
>3589	ForInit	 
>3590	IdentifierDeclStatement	int i = 0 ;
>3591	IdentifierDecl	i = 0
>3592	AssignmentExpr	i = 0
>3593	PrimaryExpression	0
>3594	Identifier	i
>3595	Identifier	i
>3596	IdentifierDeclType	int
>3597	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>3598	CompoundStatement	 
>3599	ExpressionStatement	 
>3600	IncDecOp	idx ++
>3601	IncDec	++
>3602	Identifier	idx
>3603	ExpressionStatement	 
>3604	AssignmentExpr	ptr [ idx ] = k2
>3605	Identifier	k2
>3606	ArrayIndexing	ptr [ idx ]
>3607	Identifier	idx
>3608	Identifier	ptr
>3609	ExpressionStatement	 
>3610	IncDecOp	idx ++
>3611	IncDec	++
>3612	Identifier	idx
>3613	ExpressionStatement	 
>3614	AssignmentExpr	ptr [ idx ] = k1
>3615	Identifier	k1
>3616	ArrayIndexing	ptr [ idx ]
>3617	Identifier	idx
>3618	Identifier	ptr
>3619	ExpressionStatement	 
>3620	IncDecOp	idx ++
>3621	IncDec	++
>3622	Identifier	idx
>3623	ExpressionStatement	 
>3624	AssignmentExpr	ptr [ idx ] = f
>3625	Identifier	f
>3626	ArrayIndexing	ptr [ idx ]
>3627	Identifier	idx
>3628	Identifier	ptr
>3629	ExpressionStatement	 
>3630	IncDecOp	idx ++
>3631	IncDec	++
>3632	Identifier	idx
>3633	ExpressionStatement	 
>3634	AssignmentExpr	ptr [ idx ] = t [ 2 ]
>3635	ArrayIndexing	t [ 2 ]
>3636	PrimaryExpression	2
>3637	Identifier	t
>3638	ArrayIndexing	ptr [ idx ]
>3639	Identifier	idx
>3640	Identifier	ptr
>3641	ExpressionStatement	 
>3642	IncDecOp	idx ++
>3643	IncDec	++
>3644	Identifier	idx
>3645	ExpressionStatement	 
>3646	AssignmentExpr	ptr [ idx ] = t [ 1 ]
>3647	ArrayIndexing	t [ 1 ]
>3648	PrimaryExpression	1
>3649	Identifier	t
>3650	ArrayIndexing	ptr [ idx ]
>3651	Identifier	idx
>3652	Identifier	ptr
>3653	ExpressionStatement	 
>3654	IncDecOp	idx ++
>3655	IncDec	++
>3656	Identifier	idx
>3657	ExpressionStatement	 
>3658	AssignmentExpr	ptr [ idx ] = t [ 0 ]
>3659	ArrayIndexing	t [ 0 ]
>3660	PrimaryExpression	0
>3661	Identifier	t
>3662	ArrayIndexing	ptr [ idx ]
>3663	Identifier	idx
>3664	Identifier	ptr
>3665	ExpressionStatement	 
>3666	IncDecOp	idx ++
>3667	IncDec	++
>3668	Identifier	idx
>3669	ExpressionStatement	 
>3670	AssignmentExpr	ptr [ idx ] = axis [ 2 ]
>3671	ArrayIndexing	axis [ 2 ]
>3672	PrimaryExpression	2
>3673	Identifier	axis
>3674	ArrayIndexing	ptr [ idx ]
>3675	Identifier	idx
>3676	Identifier	ptr
>3677	ExpressionStatement	 
>3678	IncDecOp	idx ++
>3679	IncDec	++
>3680	Identifier	idx
>3681	ExpressionStatement	 
>3682	AssignmentExpr	ptr [ idx ] = axis [ 1 ]
>3683	ArrayIndexing	axis [ 1 ]
>3684	PrimaryExpression	1
>3685	Identifier	axis
>3686	ArrayIndexing	ptr [ idx ]
>3687	Identifier	idx
>3688	Identifier	ptr
>3689	ExpressionStatement	 
>3690	IncDecOp	idx ++
>3691	IncDec	++
>3692	Identifier	idx
>3693	ExpressionStatement	 
>3694	AssignmentExpr	ptr [ idx ] = axis [ 0 ]
>3695	ArrayIndexing	axis [ 0 ]
>3696	PrimaryExpression	0
>3697	Identifier	axis
>3698	ArrayIndexing	ptr [ idx ]
>3699	Identifier	idx
>3700	Identifier	ptr
>3701	IdentifierDeclStatement	 
>3702	IdentifierDecl	k2 = init_camera_params [ i ] . k [ 1 ]
>3703	AssignmentExpr	k2 = init_camera_params [ i ] . k [ 1 ]
>3704	ArrayIndexing	init_camera_params [ i ] . k [ 1 ]
>3705	PrimaryExpression	1
>3706	MemberAccess	init_camera_params [ i ] . k
>3707	Identifier	k
>3708	ArrayIndexing	init_camera_params [ i ]
>3709	Identifier	i
>3710	Identifier	init_camera_params
>3711	Identifier	k2
>3712	Identifier	k2
>3713	IdentifierDeclType	double
>3714	IdentifierDeclStatement	 
>3715	IdentifierDecl	k1 = init_camera_params [ i ] . k [ 0 ]
>3716	AssignmentExpr	k1 = init_camera_params [ i ] . k [ 0 ]
>3717	ArrayIndexing	init_camera_params [ i ] . k [ 0 ]
>3718	PrimaryExpression	0
>3719	MemberAccess	init_camera_params [ i ] . k
>3720	Identifier	k
>3721	ArrayIndexing	init_camera_params [ i ]
>3722	Identifier	i
>3723	Identifier	init_camera_params
>3724	Identifier	k1
>3725	Identifier	k1
>3726	IdentifierDeclType	double
>3727	IdentifierDeclStatement	 
>3728	IdentifierDecl	f = init_camera_params [ i ] . f
>3729	AssignmentExpr	f = init_camera_params [ i ] . f
>3730	MemberAccess	init_camera_params [ i ] . f
>3731	Identifier	f
>3732	ArrayIndexing	init_camera_params [ i ]
>3733	Identifier	i
>3734	Identifier	init_camera_params
>3735	Identifier	f
>3736	Identifier	f
>3737	IdentifierDeclType	double
>3738	ExpressionStatement	 
>3739	CallExpression	matrix_scale ( 3 , 1 , t , - 1.0 , t )
>3740	ArgumentList	3
>3741	Argument	t
>3742	Identifier	t
>3743	Argument	- 1.0
>3744	UnaryOp	- 1.0
>3745	PrimaryExpression	1.0
>3746	UnaryOperator	-
>3747	Argument	t
>3748	Identifier	t
>3749	Argument	1
>3750	PrimaryExpression	1
>3751	Argument	3
>3752	PrimaryExpression	3
>3753	Callee	matrix_scale
>3754	Identifier	matrix_scale
>3755	ExpressionStatement	 
>3756	CallExpression	matrix_product331 ( init_camera_params [ i ] . R , c , t )
>3757	ArgumentList	init_camera_params [ i ] . R
>3758	Argument	t
>3759	Identifier	t
>3760	Argument	c
>3761	Identifier	c
>3762	Argument	init_camera_params [ i ] . R
>3763	MemberAccess	init_camera_params [ i ] . R
>3764	Identifier	R
>3765	ArrayIndexing	init_camera_params [ i ]
>3766	Identifier	i
>3767	Identifier	init_camera_params
>3768	Callee	matrix_product331
>3769	Identifier	matrix_product331
>3770	IdentifierDeclStatement	 
>3771	IdentifierDecl	t [ 3 ]
>3772	PrimaryExpression	3
>3773	Identifier	t
>3774	IdentifierDeclType	double [ 3 ]
>3775	IdentifierDeclStatement	 
>3776	IdentifierDecl	* c = init_camera_params [ i ] . t
>3777	AssignmentExpr	* c = init_camera_params [ i ] . t
>3778	MemberAccess	init_camera_params [ i ] . t
>3779	Identifier	t
>3780	ArrayIndexing	init_camera_params [ i ]
>3781	Identifier	i
>3782	Identifier	init_camera_params
>3783	Identifier	c
>3784	Identifier	c
>3785	IdentifierDeclType	double *
>3786	ExpressionStatement	 
>3787	CallExpression	rot2aa ( init_camera_params [ i ] . R , axis )
>3788	ArgumentList	init_camera_params [ i ] . R
>3789	Argument	axis
>3790	Identifier	axis
>3791	Argument	init_camera_params [ i ] . R
>3792	MemberAccess	init_camera_params [ i ] . R
>3793	Identifier	R
>3794	ArrayIndexing	init_camera_params [ i ]
>3795	Identifier	i
>3796	Identifier	init_camera_params
>3797	Callee	rot2aa
>3798	Identifier	rot2aa
>3799	IdentifierDeclStatement	 
>3800	IdentifierDecl	axis [ 3 ]
>3801	PrimaryExpression	3
>3802	Identifier	axis
>3803	IdentifierDeclType	double [ 3 ]
>3804	IncDecOp	 
>3805	IncDec	++
>3806	Identifier	i
>3807	Condition	 
>3808	RelationalExpression	i < num_cameras
>3809	Identifier	num_cameras
>3810	Identifier	i
>3811	ForInit	 
>3812	IdentifierDeclStatement	int i = 0 ;
>3813	IdentifierDecl	i = 0
>3814	AssignmentExpr	i = 0
>3815	PrimaryExpression	0
>3816	Identifier	i
>3817	Identifier	i
>3818	IdentifierDeclType	int
>3819	IdentifierDeclStatement	 
>3820	IdentifierDecl	idx = 0
>3821	AssignmentExpr	idx = 0
>3822	PrimaryExpression	0
>3823	Identifier	idx
>3824	Identifier	idx
>3825	IdentifierDeclType	int
>3826	IdentifierDeclStatement	 
>3827	IdentifierDecl	* ptr = init_x
>3828	AssignmentExpr	* ptr = init_x
>3829	Identifier	init_x
>3830	Identifier	init_x
>3831	Identifier	ptr
>3832	IdentifierDeclType	double *
>3833	IdentifierDeclStatement	 
>3834	IdentifierDecl	* points = init_x + cnp * num_cameras
>3835	AssignmentExpr	* points = init_x + cnp * num_cameras
>3836	AdditiveExpression	init_x + cnp * num_cameras
>3837	MultiplicativeExpression	cnp * num_cameras
>3838	Identifier	num_cameras
>3839	Identifier	cnp
>3840	Identifier	init_x
>3841	Identifier	points
>3842	Identifier	points
>3843	IdentifierDeclType	double *
>3844	IdentifierDeclStatement	 
>3845	IdentifierDecl	* cameras = init_x
>3846	AssignmentExpr	* cameras = init_x
>3847	Identifier	init_x
>3848	Identifier	init_x
>3849	Identifier	cameras
>3850	IdentifierDeclType	double *
>3851	ExpressionStatement	 
>3852	AssignmentExpr	init_x = new double [ num_parameters ]
>3853	Identifier	num_parameters
>3854	Identifier	init_x
>3855	IdentifierDeclStatement	 
>3856	IdentifierDecl	num_parameters = pnp * num_nz_points + cnp * num_cameras
>3857	AssignmentExpr	num_parameters = pnp * num_nz_points + cnp * num_cameras
>3858	AdditiveExpression	pnp * num_nz_points + cnp * num_cameras
>3859	MultiplicativeExpression	cnp * num_cameras
>3860	Identifier	num_cameras
>3861	Identifier	cnp
>3862	MultiplicativeExpression	pnp * num_nz_points
>3863	Identifier	num_nz_points
>3864	Identifier	pnp
>3865	Identifier	num_parameters
>3866	Identifier	num_parameters
>3867	IdentifierDeclType	unsigned int
>3868	IdentifierDeclStatement	 
>3869	IdentifierDecl	pnp = 3
>3870	AssignmentExpr	pnp = 3
>3871	PrimaryExpression	3
>3872	Identifier	pnp
>3873	Identifier	pnp
>3874	IdentifierDeclType	int
>3875	IfStatement	if ( ! m_estimate_distortion )
>3876	ElseStatement	else
>3877	ExpressionStatement	 
>3878	AssignmentExpr	cnp = 9
>3879	PrimaryExpression	9
>3880	Identifier	cnp
>3881	ExpressionStatement	 
>3882	AssignmentExpr	cnp = 7
>3883	PrimaryExpression	7
>3884	Identifier	cnp
>3885	Condition	 
>3886	UnaryOp	! m_estimate_distortion
>3887	Identifier	m_estimate_distortion
>3888	UnaryOperator	!
>3889	IdentifierDeclStatement	 
>3890	IdentifierDecl	cnp = 0
>3891	AssignmentExpr	cnp = 0
>3892	PrimaryExpression	0
>3893	Identifier	cnp
>3894	Identifier	cnp
>3895	IdentifierDeclType	int
>3896	IdentifierDeclStatement	 
>3897	IdentifierDecl	* init_x = NULL
>3898	AssignmentExpr	* init_x = NULL
>3899	Identifier	NULL
>3900	Identifier	NULL
>3901	Identifier	init_x
>3902	IdentifierDeclType	double *
>3903	IdentifierDeclStatement	 
>3904	IdentifierDecl	num_nz_points = nz_count
>3905	AssignmentExpr	num_nz_points = nz_count
>3906	Identifier	nz_count
>3907	Identifier	nz_count
>3908	Identifier	num_nz_points
>3909	IdentifierDeclType	int
>3910	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>3911	CompoundStatement	 
>3912	IfStatement	if ( num_views > 0 )
>3913	ElseStatement	else
>3914	CompoundStatement	 
>3915	ExpressionStatement	 
>3916	AssignmentExpr	remap [ i ] = - 1
>3917	UnaryOp	- 1
>3918	PrimaryExpression	1
>3919	UnaryOperator	-
>3920	ArrayIndexing	remap [ i ]
>3921	Identifier	i
>3922	Identifier	remap
>3923	CompoundStatement	 
>3924	ExpressionStatement	 
>3925	IncDecOp	nz_count ++
>3926	IncDec	++
>3927	Identifier	nz_count
>3928	ExpressionStatement	 
>3929	AssignmentExpr	nz_pts [ nz_count ] = init_pts [ i ]
>3930	ArrayIndexing	init_pts [ i ]
>3931	Identifier	i
>3932	Identifier	init_pts
>3933	ArrayIndexing	nz_pts [ nz_count ]
>3934	Identifier	nz_count
>3935	Identifier	nz_pts
>3936	ExpressionStatement	 
>3937	AssignmentExpr	remap [ i ] = nz_count
>3938	Identifier	nz_count
>3939	ArrayIndexing	remap [ i ]
>3940	Identifier	i
>3941	Identifier	remap
>3942	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>3943	CompoundStatement	 
>3944	ExpressionStatement	 
>3945	IncDecOp	arr_idx ++
>3946	IncDec	++
>3947	Identifier	arr_idx
>3948	ExpressionStatement	 
>3949	IncDecOp	num_vis [ c ] ++
>3950	IncDec	++
>3951	ArrayIndexing	num_vis [ c ]
>3952	Identifier	c
>3953	Identifier	num_vis
>3954	ExpressionStatement	 
>3955	AssignmentExpr	cidx [ arr_idx ] = c
>3956	Identifier	c
>3957	ArrayIndexing	cidx [ arr_idx ]
>3958	Identifier	arr_idx
>3959	Identifier	cidx
>3960	ExpressionStatement	 
>3961	AssignmentExpr	pidx [ arr_idx ] = nz_count
>3962	Identifier	nz_count
>3963	ArrayIndexing	pidx [ arr_idx ]
>3964	Identifier	arr_idx
>3965	Identifier	pidx
>3966	ExpressionStatement	 
>3967	AssignmentExpr	projections [ 2 * arr_idx + 1 ] = GetKey ( v , k ) . m_y
>3968	MemberAccess	GetKey ( v , k ) . m_y
>3969	Identifier	m_y
>3970	CallExpression	GetKey ( v , k )
>3971	ArgumentList	v
>3972	Argument	k
>3973	Identifier	k
>3974	Argument	v
>3975	Identifier	v
>3976	Callee	GetKey
>3977	Identifier	GetKey
>3978	ArrayIndexing	projections [ 2 * arr_idx + 1 ]
>3979	AdditiveExpression	2 * arr_idx + 1
>3980	PrimaryExpression	1
>3981	MultiplicativeExpression	2 * arr_idx
>3982	Identifier	arr_idx
>3983	PrimaryExpression	2
>3984	Identifier	projections
>3985	ExpressionStatement	 
>3986	AssignmentExpr	projections [ 2 * arr_idx + 0 ] = GetKey ( v , k ) . m_x
>3987	MemberAccess	GetKey ( v , k ) . m_x
>3988	Identifier	m_x
>3989	CallExpression	GetKey ( v , k )
>3990	ArgumentList	v
>3991	Argument	k
>3992	Identifier	k
>3993	Argument	v
>3994	Identifier	v
>3995	Callee	GetKey
>3996	Identifier	GetKey
>3997	ArrayIndexing	projections [ 2 * arr_idx + 0 ]
>3998	AdditiveExpression	2 * arr_idx + 0
>3999	PrimaryExpression	0
>4000	MultiplicativeExpression	2 * arr_idx
>4001	Identifier	arr_idx
>4002	PrimaryExpression	2
>4003	Identifier	projections
>4004	IdentifierDeclStatement	 
>4005	IdentifierDecl	k = pt_views [ i ] [ j ] . second
>4006	AssignmentExpr	k = pt_views [ i ] [ j ] . second
>4007	MemberAccess	pt_views [ i ] [ j ] . second
>4008	Identifier	second
>4009	ArrayIndexing	pt_views [ i ] [ j ]
>4010	Identifier	j
>4011	ArrayIndexing	pt_views [ i ]
>4012	Identifier	i
>4013	Identifier	pt_views
>4014	Identifier	k
>4015	Identifier	k
>4016	IdentifierDeclType	int
>4017	IdentifierDeclStatement	 
>4018	IdentifierDecl	v = added_order [ c ]
>4019	AssignmentExpr	v = added_order [ c ]
>4020	ArrayIndexing	added_order [ c ]
>4021	Identifier	c
>4022	Identifier	added_order
>4023	Identifier	v
>4024	Identifier	v
>4025	IdentifierDeclType	int
>4026	IdentifierDeclStatement	 
>4027	IdentifierDecl	c = pt_views [ i ] [ j ] . first
>4028	AssignmentExpr	c = pt_views [ i ] [ j ] . first
>4029	MemberAccess	pt_views [ i ] [ j ] . first
>4030	Identifier	first
>4031	ArrayIndexing	pt_views [ i ] [ j ]
>4032	Identifier	j
>4033	ArrayIndexing	pt_views [ i ]
>4034	Identifier	i
>4035	Identifier	pt_views
>4036	Identifier	c
>4037	Identifier	c
>4038	IdentifierDeclType	int
>4039	IncDecOp	 
>4040	IncDec	++
>4041	Identifier	j
>4042	Condition	 
>4043	RelationalExpression	j < num_views
>4044	Identifier	num_views
>4045	Identifier	j
>4046	ForInit	 
>4047	IdentifierDeclStatement	int j = 0 ;
>4048	IdentifierDecl	j = 0
>4049	AssignmentExpr	j = 0
>4050	PrimaryExpression	0
>4051	Identifier	j
>4052	Identifier	j
>4053	IdentifierDeclType	int
>4054	Condition	 
>4055	RelationalExpression	num_views > 0
>4056	PrimaryExpression	0
>4057	Identifier	num_views
>4058	IdentifierDeclStatement	 
>4059	IdentifierDecl	num_views = ( int ) pt_views [ i ] . size ( )
>4060	AssignmentExpr	num_views = ( int ) pt_views [ i ] . size ( )
>4061	CastExpression	( int ) pt_views [ i ] . size ( )
>4062	CallExpression	pt_views [ i ] . size ( )
>4063	ArgumentList	 
>4064	Callee	pt_views [ i ] . size
>4065	MemberAccess	pt_views [ i ] . size
>4066	Identifier	size
>4067	ArrayIndexing	pt_views [ i ]
>4068	Identifier	i
>4069	Identifier	pt_views
>4070	CastTarget	int
>4071	Identifier	num_views
>4072	Identifier	num_views
>4073	IdentifierDeclType	int
>4074	IncDecOp	 
>4075	IncDec	++
>4076	Identifier	i
>4077	Condition	 
>4078	RelationalExpression	i < num_pts
>4079	Identifier	num_pts
>4080	Identifier	i
>4081	ForInit	 
>4082	IdentifierDeclStatement	int i = 0 ;
>4083	IdentifierDecl	i = 0
>4084	AssignmentExpr	i = 0
>4085	PrimaryExpression	0
>4086	Identifier	i
>4087	Identifier	i
>4088	IdentifierDeclType	int
>4089	IdentifierDeclStatement	 
>4090	IdentifierDecl	nz_count = 0
>4091	AssignmentExpr	nz_count = 0
>4092	PrimaryExpression	0
>4093	Identifier	nz_count
>4094	Identifier	nz_count
>4095	IdentifierDeclType	int
>4096	IdentifierDeclStatement	 
>4097	IdentifierDecl	arr_idx = 0
>4098	AssignmentExpr	arr_idx = 0
>4099	PrimaryExpression	0
>4100	Identifier	arr_idx
>4101	Identifier	arr_idx
>4102	IdentifierDeclType	int
>4103	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>4104	ExpressionStatement	 
>4105	AssignmentExpr	num_vis [ i ] = 0
>4106	PrimaryExpression	0
>4107	ArrayIndexing	num_vis [ i ]
>4108	Identifier	i
>4109	Identifier	num_vis
>4110	IncDecOp	 
>4111	IncDec	++
>4112	Identifier	i
>4113	Condition	 
>4114	RelationalExpression	i < num_cameras
>4115	Identifier	num_cameras
>4116	Identifier	i
>4117	ForInit	 
>4118	IdentifierDeclStatement	int i = 0 ;
>4119	IdentifierDecl	i = 0
>4120	AssignmentExpr	i = 0
>4121	PrimaryExpression	0
>4122	Identifier	i
>4123	Identifier	i
>4124	IdentifierDeclType	int
>4125	ExpressionStatement	 
>4126	AssignmentExpr	num_vis = new unsigned int [ num_cameras ]
>4127	Identifier	num_cameras
>4128	Identifier	num_vis
>4129	ExpressionStatement	 
>4130	AssignmentExpr	cidx = new int [ num_projections ]
>4131	Identifier	num_projections
>4132	Identifier	cidx
>4133	ExpressionStatement	 
>4134	AssignmentExpr	pidx = new int [ num_projections ]
>4135	Identifier	num_projections
>4136	Identifier	pidx
>4137	ExpressionStatement	 
>4138	AssignmentExpr	projections = new double [ 2 * num_projections ]
>4139	MultiplicativeExpression	2 * num_projections
>4140	Identifier	num_projections
>4141	PrimaryExpression	2
>4142	Identifier	projections
>4143	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>4144	CompoundStatement	 
>4145	ExpressionStatement	 
>4146	AssignmentExpr	num_projections += ( int ) pt_views [ i ] . size ( )
>4147	CastExpression	( int ) pt_views [ i ] . size ( )
>4148	CallExpression	pt_views [ i ] . size ( )
>4149	ArgumentList	 
>4150	Callee	pt_views [ i ] . size
>4151	MemberAccess	pt_views [ i ] . size
>4152	Identifier	size
>4153	ArrayIndexing	pt_views [ i ]
>4154	Identifier	i
>4155	Identifier	pt_views
>4156	CastTarget	int
>4157	Identifier	num_projections
>4158	IncDecOp	 
>4159	IncDec	++
>4160	Identifier	i
>4161	Condition	 
>4162	RelationalExpression	i < num_pts
>4163	Identifier	num_pts
>4164	Identifier	i
>4165	ForInit	 
>4166	IdentifierDeclStatement	int i = 0 ;
>4167	IdentifierDecl	i = 0
>4168	AssignmentExpr	i = 0
>4169	PrimaryExpression	0
>4170	Identifier	i
>4171	Identifier	i
>4172	IdentifierDeclType	int
>4173	IdentifierDeclStatement	 
>4174	IdentifierDecl	num_projections = 0
>4175	AssignmentExpr	num_projections = 0
>4176	PrimaryExpression	0
>4177	Identifier	num_projections
>4178	Identifier	num_projections
>4179	IdentifierDeclType	int
>4180	IdentifierDeclStatement	 
>4181	IdentifierDecl	* num_vis = NULL
>4182	AssignmentExpr	* num_vis = NULL
>4183	Identifier	NULL
>4184	Identifier	NULL
>4185	Identifier	num_vis
>4186	IdentifierDeclType	unsigned int *
>4187	IdentifierDeclStatement	 
>4188	IdentifierDecl	* cidx = NULL
>4189	AssignmentExpr	* cidx = NULL
>4190	Identifier	NULL
>4191	Identifier	NULL
>4192	Identifier	cidx
>4193	IdentifierDeclType	int *
>4194	IdentifierDeclStatement	 
>4195	IdentifierDecl	* pidx = NULL
>4196	AssignmentExpr	* pidx = NULL
>4197	Identifier	NULL
>4198	Identifier	NULL
>4199	Identifier	pidx
>4200	IdentifierDeclType	int *
>4201	IdentifierDeclStatement	 
>4202	IdentifierDecl	* projections = NULL
>4203	AssignmentExpr	* projections = NULL
>4204	Identifier	NULL
>4205	Identifier	NULL
>4206	Identifier	projections
>4207	IdentifierDeclType	double *
>4208	IfStatement	if ( num_pts - total_outliers < MIN_POINTS )
>4209	CompoundStatement	 
>4210	BreakStatement	 
>4211	ExpressionStatement	 
>4212	AssignmentExpr	dist_total = DBL_MAX
>4213	Identifier	DBL_MAX
>4214	Identifier	dist_total
>4215	ExpressionStatement	 
>4216	CallExpression	fflush ( stdout )
>4217	ArgumentList	stdout
>4218	Argument	stdout
>4219	Identifier	stdout
>4220	Callee	fflush
>4221	Identifier	fflush
>4222	ExpressionStatement	 
>4223	CallExpression	printf ( \"[RunSFM] Too few points remaining, exiting!\n\" )
>4224	ArgumentList	\"[RunSFM] Too few points remaining, exiting!\n\"
>4225	Argument	\"[RunSFM] Too few points remaining, exiting!\n\"
>4226	PrimaryExpression	\"[RunSFM] Too few points remaining, exiting!\n\"
>4227	Callee	printf
>4228	Identifier	printf
>4229	Condition	 
>4230	RelationalExpression	num_pts - total_outliers < MIN_POINTS
>4231	Identifier	MIN_POINTS
>4232	AdditiveExpression	num_pts - total_outliers
>4233	Identifier	total_outliers
>4234	Identifier	num_pts
>4235	ExpressionStatement	 
>4236	CallExpression	gettimeofday ( & start_iter , NULL )
>4237	ArgumentList	& start_iter
>4238	Argument	NULL
>4239	Identifier	NULL
>4240	Argument	& start_iter
>4241	UnaryOp	& start_iter
>4242	Identifier	start_iter
>4243	UnaryOperator	&
>4244	Callee	gettimeofday
>4245	Identifier	gettimeofday
>4246	IdentifierDeclStatement	 
>4247	IdentifierDecl	stop_iter
>4248	Identifier	stop_iter
>4249	IdentifierDeclType	timeval
>4250	IdentifierDecl	start_iter
>4251	Identifier	start_iter
>4252	IdentifierDeclType	timeval
>4253	IdentifierDeclStatement	 
>4254	IdentifierDecl	problem
>4255	Identifier	problem
>4256	IdentifierDeclType	ceres 
>4257	IfStatement	if ( num_cameras > 200 )
>4258	ExpressionStatement	 
>4259	AssignmentExpr	use_dense = false
>4260	Identifier	false
>4261	Identifier	use_dense
>4262	Condition	 
>4263	RelationalExpression	num_cameras > 200
>4264	PrimaryExpression	200
>4265	Identifier	num_cameras
>4266	IdentifierDeclStatement	 
>4267	IdentifierDecl	use_dense = true
>4268	AssignmentExpr	use_dense = true
>4269	Identifier	true
>4270	Identifier	true
>4271	Identifier	use_dense
>4272	IdentifierDeclType	bool
>4273	ExpressionStatement	 
>4274	CallExpression	assert ( m_estimate_distortion )
>4275	ArgumentList	m_estimate_distortion
>4276	Argument	m_estimate_distortion
>4277	Identifier	m_estimate_distortion
>4278	Callee	assert
>4279	Identifier	assert
>4280	ExpressionStatement	 
>4281	CallExpression	gettimeofday ( & start_all , NULL )
>4282	ArgumentList	& start_all
>4283	Argument	NULL
>4284	Identifier	NULL
>4285	Argument	& start_all
>4286	UnaryOp	& start_all
>4287	Identifier	start_all
>4288	UnaryOperator	&
>4289	Callee	gettimeofday
>4290	Identifier	gettimeofday
>4291	IdentifierDeclStatement	 
>4292	IdentifierDecl	stop_all
>4293	Identifier	stop_all
>4294	IdentifierDeclType	timeval
>4295	IdentifierDecl	start_all
>4296	Identifier	start_all
>4297	IdentifierDeclType	timeval
>4298	IdentifierDeclStatement	 
>4299	IdentifierDecl	HUBER_PARAM = 25.0
>4300	AssignmentExpr	HUBER_PARAM = 25.0
>4301	PrimaryExpression	25.0
>4302	Identifier	HUBER_PARAM
>4303	Identifier	HUBER_PARAM
>4304	IdentifierDeclType	const double
>4305	IdentifierDeclStatement	 
>4306	IdentifierDecl	MIN_OUTLIERS = 40
>4307	AssignmentExpr	MIN_OUTLIERS = 40
>4308	PrimaryExpression	40
>4309	Identifier	MIN_OUTLIERS
>4310	Identifier	MIN_OUTLIERS
>4311	IdentifierDeclType	const int
>4312	IdentifierDeclStatement	 
>4313	IdentifierDecl	round = 0
>4314	AssignmentExpr	round = 0
>4315	PrimaryExpression	0
>4316	Identifier	round
>4317	Identifier	round
>4318	IdentifierDeclType	int
>4319	IdentifierDeclStatement	 
>4320	IdentifierDecl	* nz_pts = new v3_t [ num_pts ]
>4321	AssignmentExpr	* nz_pts = new v3_t [ num_pts ]
>4322	Identifier	num_pts
>4323	Identifier	num_pts
>4324	Identifier	nz_pts
>4325	IdentifierDeclType	v3_t *
>4326	IdentifierDeclStatement	 
>4327	IdentifierDecl	* remap = new int [ num_pts ]
>4328	AssignmentExpr	* remap = new int [ num_pts ]
>4329	Identifier	num_pts
>4330	Identifier	num_pts
>4331	Identifier	remap
>4332	IdentifierDeclType	int *
>4333	IdentifierDeclStatement	 
>4334	IdentifierDecl	num_dists = 0
>4335	AssignmentExpr	num_dists = 0
>4336	PrimaryExpression	0
>4337	Identifier	num_dists
>4338	Identifier	num_dists
>4339	IdentifierDeclType	int
>4340	IdentifierDeclStatement	 
>4341	IdentifierDecl	dist_total = 0.0
>4342	AssignmentExpr	dist_total = 0.0
>4343	PrimaryExpression	0.0
>4344	Identifier	dist_total
>4345	Identifier	dist_total
>4346	IdentifierDeclType	double
>4347	IdentifierDeclStatement	 
>4348	IdentifierDecl	total_outliers = 0
>4349	AssignmentExpr	total_outliers = 0
>4350	PrimaryExpression	0
>4351	Identifier	total_outliers
>4352	Identifier	total_outliers
>4353	IdentifierDeclType	int
>4354	IdentifierDeclStatement	 
>4355	IdentifierDecl	num_outliers = 0
>4356	AssignmentExpr	num_outliers = 0
>4357	PrimaryExpression	0
>4358	Identifier	num_outliers
>4359	Identifier	num_outliers
>4360	IdentifierDeclType	int
>4361	Statement	 
>4362	Statement	 
>4363	Statement	 
>4364	ExpressionStatement	 
>4365	CallExpression	CheckPointKeyConsistency ( pt_views , added_order )
>4366	ArgumentList	pt_views
>4367	Argument	added_order
>4368	Identifier	added_order
>4369	Argument	pt_views
>4370	Identifier	pt_views
>4371	Callee	CheckPointKeyConsistency
>4372	Identifier	CheckPointKeyConsistency
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=42,31,22,15,13
<13=14
<15=18,16
<16=17
<18=19
<19=21,20
<22=27,23
<23=24
<24=26,25
<27=28
<28=30,29
<31=32
<32=41,40,33
<33=39,34
<34=38,35
<35=37,36
<42=43
<43=52,51,44
<44=50,45
<45=49,46
<46=48,47
<64=73,72,65
<65=69,66
<66=68,67
<69=71,70
<73=313,279,266,253,240,228,216,202,186,168,152,138,122,106,88,74
<74=75
<75=85,76
<76=84,77
<77=83,78
<78=82,79
<79=81,80
<85=87,86
<88=89
<89=103,90
<90=98,91
<91=97,92
<92=96,93
<93=95,94
<98=100,99
<100=102,101
<103=105,104
<106=107
<107=119,108
<108=116,109
<109=115,110
<110=114,111
<111=113,112
<116=118,117
<119=121,120
<122=123
<123=135,124
<124=132,125
<125=131,126
<126=130,127
<127=129,128
<132=134,133
<135=137,136
<138=139
<139=149,140
<140=148,141
<141=147,142
<142=146,143
<143=145,144
<149=151,150
<152=153
<153=165,154
<154=158,155
<155=157,156
<158=164,159
<159=163,160
<160=162,161
<165=167,166
<168=169
<169=183,170
<170=178,171
<171=177,172
<172=176,173
<173=175,174
<178=180,179
<180=182,181
<183=185,184
<186=187
<187=199,188
<188=196,189
<189=195,190
<190=194,191
<191=193,192
<196=198,197
<199=201,200
<202=203
<203=213,204
<204=212,205
<205=211,206
<206=210,207
<207=209,208
<213=215,214
<216=217
<217=227,226,218
<218=225,219
<219=223,220
<220=221
<221=222
<223=224
<228=229
<229=239,238,230
<230=237,231
<231=235,232
<232=233
<233=234
<235=236
<240=241
<241=252,251,242
<242=250,243
<243=247,244
<244=246,245
<247=249,248
<253=254
<254=265,264,255
<255=263,256
<256=260,257
<257=259,258
<260=262,261
<266=267
<267=278,277,268
<268=276,269
<269=273,270
<270=272,271
<273=275,274
<279=280
<280=312,311,281
<281=310,282
<282=308,283
<283=284
<284=285
<285=301,286
<286=294,287
<287=291,288
<288=290,289
<291=293,292
<294=298,295
<295=297,296
<298=300,299
<301=305,302
<302=304,303
<305=307,306
<308=309
<313=314
<314=319,318,315
<315=317,316
<337=346,345,338
<338=342,339
<339=341,340
<342=344,343
<346=502,480,471,458,439,416,402,389,375,361,347
<347=348
<348=358,349
<349=357,350
<350=354,351
<351=353,352
<354=356,355
<358=360,359
<361=362
<362=372,363
<363=371,364
<364=368,365
<365=367,366
<368=370,369
<372=374,373
<375=376
<376=386,377
<377=385,378
<378=382,379
<379=381,380
<382=384,383
<386=388,387
<389=390
<390=401,400,391
<391=399,392
<392=398,393
<393=395,394
<395=397,396
<402=403
<403=415,414,404
<404=413,405
<405=411,406
<406=409,407
<407=408
<409=410
<411=412
<416=417
<417=438,437,418
<418=436,419
<419=426,420
<420=424,421
<421=422
<422=423
<424=425
<426=434,427
<427=432,430,428
<428=429
<430=431
<432=433
<434=435
<439=440
<440=456,441
<441=454,452,450,448,446,444,442
<442=443
<444=445
<446=447
<448=449
<450=451
<452=453
<454=455
<456=457
<458=459
<459=469,460
<460=467,465,463,461
<461=462
<463=464
<465=466
<467=468
<469=470
<471=476,472
<472=475,474,473
<476=479,478,477
<480=481
<481=501,500,482
<482=499,483
<483=497,484
<484=491,487,485
<485=486
<487=488
<488=490,489
<491=492
<492=496,493
<493=495,494
<497=498
<502=503
<503=518,517,504
<504=516,505
<505=513,506
<506=510,507
<507=509,508
<510=512,511
<513=515,514
<538=549,539
<539=546,543,540
<540=542,541
<543=545,544
<546=548,547
<562=625,624,563
<563=621,618,615,612,609,606,603,600,597,594,591,588,585,582,579,576,573,570,567,564
<564=566,565
<567=569,568
<570=572,571
<573=575,574
<576=578,577
<579=581,580
<582=584,583
<585=587,586
<588=590,589
<591=593,592
<594=596,595
<597=599,598
<600=602,601
<603=605,604
<606=608,607
<609=611,610
<612=614,613
<615=617,616
<618=620,619
<621=623,622
<625=4364,4363,4362,4361,4354,4347,4340,4333,4326,4319,4312,4305,4298,4291,4280,4273,4266,4257,675,664,651,640,639,638,637,635,634,633,632,630,626
<626=627
<627=629,628
<630=631
<635=636
<640=641
<641=649,642
<642=647,643
<643=644
<644=646,645
<647=648
<649=650
<651=652
<652=663,662,653
<653=661,654
<654=658,655
<655=657,656
<658=660,659
<664=665
<665=673,666
<666=669,667
<667=668
<669=670
<670=672,671
<673=674
<675=680,676
<676=677
<677=679,678
<680=4253,4246,4235,4208,4201,4194,4187,4180,4173,4143,4137,4133,4129,4125,4103,4096,4089,3910,3903,3896,3889,3875,3868,3855,3851,3844,3833,3826,3819,3597,3507,3496,3405,3271,3267,3263,3253,3244,3235,3226,3217,3210,3203,3065,3058,3054,3047,3001,2995,2989,2925,2919,2915,2906,2897,2893,2878,2867,2860,2853,2841,2701,2697,2693,2454,2386,2375,2365,681,688,695,699,712,725,736,786,792,829,831,832,833,834,836,837,838,839,841,842,843,844,846,847,848,849,851,852,853,854,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,2315,2319,2323,2327,2334,2341,2348
<681=682
<682=686,683
<683=684
<684=685
<686=687
<688=689
<689=693,690
<690=691
<691=692
<693=694
<695=696
<696=698,697
<699=700
<700=710,701
<701=708,706,702
<702=703
<703=705,704
<706=707
<708=709
<710=711
<712=713
<713=724,723,714
<714=722,715
<715=719,716
<716=718,717
<719=721,720
<725=726
<726=734,727
<727=730,728
<728=729
<730=731
<731=733,732
<734=735
<736=784,737
<737=779,766,738
<738=739
<739=764,740
<740=762,760,755,753,751,749,747,745,743,741
<741=742
<743=744
<745=746
<747=748
<749=750
<751=752
<753=754
<755=756
<756=758,757
<758=759
<760=761
<762=763
<764=765
<766=767
<767=777,768
<768=775,773,771,769
<769=770
<771=772
<773=774
<775=776
<777=778
<779=780
<780=783,782,781
<784=785
<786=788,787
<788=789
<789=791,790
<792=821,817,814,793
<793=794
<794=806,795
<795=796
<796=797
<797=803,798
<798=802,799
<799=801,800
<803=805,804
<806=807
<807=811,808
<808=810,809
<811=813,812
<814=816,815
<817=818
<818=820,819
<821=822
<822=823
<823=828,827,824
<824=826,825
<829=830
<834=835
<839=840
<844=845
<849=850
<854=1168,887,855
<855=856
<856=883,857
<857=864,858
<858=859
<859=863,860
<860=862,861
<864=865
<865=881,866
<866=879,877,875,873,871,869,867
<867=868
<869=870
<871=872
<873=874
<875=876
<877=878
<879=880
<881=882
<883=884
<884=886,885
<887=1161,969,960,956,949,932,916,907,888
<888=889
<889=905,890
<890=903,901,899,897,895,893,891
<891=892
<893=894
<895=896
<897=898
<899=900
<901=902
<903=904
<905=906
<907=908
<908=914,909
<909=912,910
<910=911
<912=913
<914=915
<916=917
<917=930,918
<918=928,919
<919=920
<920=927,921
<921=923,922
<923=924
<924=926,925
<928=929
<930=931
<932=933
<933=947,934
<934=945,935
<935=936
<936=940,937
<937=939,938
<940=944,941
<941=943,942
<945=946
<947=948
<949=950
<950=955,951
<951=953,952
<953=954
<956=957
<957=959,958
<960=961
<961=968,962
<962=964,963
<964=965
<965=967,966
<969=1153,1142,1139,970
<970=1130,1121,1120,1119,1118,1117,1116,1115,1114,1113,1112,1111,1110,1109,1108,1092,1083,980,971
<971=972
<972=974,973
<974=975
<975=977,976
<977=979,978
<980=1075,1071,1068,981
<981=1055,1042,1025,1024,1023,1022,1021,1020,1019,1018,1017,1016,1015,1014,1013,1012,1011,1010,1009,1008,1007,1006,1005,1004,1003,1002,1001,1000,999,982
<982=983
<983=987,984
<984=986,985
<987=989,988
<989=997,990
<990=993,991
<991=992
<993=994
<994=996,995
<997=998
<1025=1027,1026
<1027=1028
<1028=1030,1029
<1030=1032,1031
<1032=1040,1033
<1033=1036,1034
<1034=1035
<1036=1037
<1037=1039,1038
<1040=1041
<1042=1043
<1043=1054,1053,1044
<1044=1052,1045
<1045=1047,1046
<1047=1049,1048
<1049=1051,1050
<1055=1056
<1056=1067,1066,1057
<1057=1065,1058
<1058=1060,1059
<1060=1062,1061
<1062=1064,1063
<1068=1070,1069
<1071=1072
<1072=1074,1073
<1075=1076
<1076=1077
<1077=1082,1081,1078
<1078=1080,1079
<1083=1084
<1084=1091,1090,1085
<1085=1089,1086
<1086=1088,1087
<1092=1093
<1093=1107,1106,1094
<1094=1105,1095
<1095=1104,1096
<1096=1098,1097
<1098=1099
<1099=1101,1100
<1101=1103,1102
<1121=1122
<1122=1129,1128,1123
<1123=1127,1124
<1124=1126,1125
<1130=1131
<1131=1138,1137,1132
<1132=1136,1133
<1133=1135,1134
<1139=1141,1140
<1142=1143
<1143=1152,1144
<1144=1151,1145
<1145=1147,1146
<1147=1148
<1148=1150,1149
<1153=1154
<1154=1155
<1155=1160,1159,1156
<1156=1158,1157
<1161=1162
<1162=1167,1166,1163
<1163=1165,1164
<1168=1169
<1169=1171,1170
<1171=1175,1172
<1172=1174,1173
<1175=1177,1176
<1190=2307,2303,2300,1191
<1191=2289,2264,2235,2129,2015,2001,1994,1956,1949,1945,1936,1929,1925,1644,1638,1615,1606,1605,1604,1603,1592,1579,1572,1549,1540,1539,1538,1192,1194,1195,1196,1197,1279,1286,1297,1308,1317,1332,1333,1334,1335,1336,1337,1495,1499,1503,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537
<1192=1193
<1197=1271,1267,1264,1198
<1198=1251,1244,1229,1220,1199
<1199=1200
<1200=1218,1201
<1201=1216,1212,1210,1208,1202
<1202=1203
<1203=1207,1204
<1204=1206,1205
<1208=1209
<1210=1211
<1212=1213
<1213=1215,1214
<1216=1217
<1218=1219
<1220=1221
<1221=1228,1227,1222
<1222=1226,1223
<1223=1225,1224
<1229=1234,1230
<1230=1231
<1231=1233,1232
<1234=1235
<1235=1241,1236
<1236=1238,1237
<1238=1240,1239
<1241=1243,1242
<1244=1245
<1245=1250,1249,1246
<1246=1248,1247
<1251=1252
<1252=1263,1262,1253
<1253=1261,1254
<1254=1260,1255
<1255=1257,1256
<1257=1259,1258
<1264=1266,1265
<1267=1268
<1268=1270,1269
<1271=1272
<1272=1273
<1273=1278,1277,1274
<1274=1276,1275
<1279=1280
<1280=1285,1284,1281
<1281=1283,1282
<1286=1287
<1287=1296,1295,1288
<1288=1294,1289
<1289=1291,1290
<1291=1293,1292
<1297=1298
<1298=1307,1306,1299
<1299=1305,1300
<1300=1304,1301
<1301=1303,1302
<1308=1309
<1309=1316,1315,1310
<1310=1314,1311
<1311=1313,1312
<1317=1318
<1318=1330,1319
<1319=1328,1326,1322,1320
<1320=1321
<1322=1323
<1323=1325,1324
<1326=1327
<1328=1329
<1330=1331
<1337=1487,1483,1480,1338
<1338=1462,1456,1436,1343,1339
<1339=1340
<1340=1342,1341
<1343=1426,1344
<1344=1425,1424,1417,1380,1345
<1345=1376,1346
<1346=1367,1358,1347
<1347=1348
<1348=1354,1349
<1349=1350
<1350=1351
<1351=1353,1352
<1354=1355
<1355=1357,1356
<1358=1359
<1359=1363,1360
<1360=1361
<1361=1362
<1363=1364
<1364=1366,1365
<1367=1368
<1368=1372,1369
<1369=1370
<1370=1371
<1372=1373
<1373=1375,1374
<1376=1377
<1377=1379,1378
<1380=1409,1398,1395,1381
<1381=1382
<1382=1389,1383
<1383=1385,1384
<1385=1386
<1386=1388,1387
<1389=1390
<1390=1392,1391
<1392=1394,1393
<1395=1397,1396
<1398=1399
<1399=1408,1400
<1400=1407,1401
<1401=1403,1402
<1403=1404
<1404=1406,1405
<1409=1410
<1410=1411
<1411=1416,1415,1412
<1412=1414,1413
<1417=1418
<1418=1423,1422,1419
<1419=1421,1420
<1426=1427
<1427=1431,1428
<1428=1430,1429
<1431=1433,1432
<1433=1435,1434
<1436=1443,1437
<1437=1439,1438
<1439=1440
<1440=1442,1441
<1443=1444
<1444=1455,1445
<1445=1447,1446
<1447=1453,1448
<1448=1449
<1449=1450
<1450=1452,1451
<1453=1454
<1456=1458,1457
<1458=1459
<1459=1461,1460
<1462=1463
<1463=1479,1478,1464
<1464=1477,1465
<1465=1467,1466
<1467=1475,1468
<1468=1471,1469
<1469=1470
<1471=1472
<1472=1474,1473
<1475=1476
<1480=1482,1481
<1483=1484
<1484=1486,1485
<1487=1488
<1488=1489
<1489=1494,1493,1490
<1490=1492,1491
<1495=1496
<1496=1498,1497
<1499=1500
<1500=1502,1501
<1503=1504
<1504=1506,1505
<1540=1541
<1541=1548,1547,1542
<1542=1546,1543
<1543=1545,1544
<1549=1564,1560,1557,1550
<1550=1551
<1551=1552
<1552=1556,1553
<1553=1555,1554
<1557=1559,1558
<1560=1561
<1561=1563,1562
<1564=1565
<1565=1566
<1566=1571,1570,1567
<1567=1569,1568
<1572=1573
<1573=1578,1577,1574
<1574=1576,1575
<1579=1580
<1580=1591,1581
<1581=1589,1582
<1582=1587,1585,1583
<1583=1584
<1585=1586
<1587=1588
<1589=1590
<1592=1593
<1593=1602,1601,1594
<1594=1600,1595
<1595=1599,1596
<1596=1598,1597
<1606=1607
<1607=1613,1608
<1608=1611,1609
<1609=1610
<1611=1612
<1613=1614
<1615=1616
<1616=1637,1636,1617
<1617=1635,1618
<1618=1633,1619
<1619=1631,1622,1620
<1620=1621
<1622=1623
<1623=1629,1624
<1624=1625
<1625=1626
<1626=1628,1627
<1629=1630
<1631=1632
<1633=1634
<1638=1640,1639
<1640=1641
<1641=1643,1642
<1644=1910,1895,1892,1645
<1645=1883,1646
<1646=1877,1647
<1647=1868,1858,1849,1834,1819,1804,1764,1745,1701,1691,1681,1666,1662,1658,1652,1648
<1648=1649
<1649=1651,1650
<1652=1653
<1653=1655,1654
<1655=1657,1656
<1658=1659
<1659=1661,1660
<1662=1663
<1663=1665,1664
<1666=1667
<1667=1680,1668
<1668=1678,1669
<1669=1670
<1670=1671
<1671=1675,1672
<1672=1674,1673
<1675=1677,1676
<1678=1679
<1681=1682
<1682=1690,1683
<1683=1687,1684
<1684=1686,1685
<1687=1689,1688
<1691=1692
<1692=1700,1693
<1693=1697,1694
<1694=1696,1695
<1697=1699,1698
<1701=1743,1702
<1702=1726,1703
<1703=1704
<1704=1718,1705
<1705=1716,1714,1710,1706
<1706=1707
<1707=1709,1708
<1710=1711
<1711=1713,1712
<1714=1715
<1716=1717
<1718=1719
<1719=1721,1720
<1721=1725,1722
<1722=1724,1723
<1726=1735,1727
<1727=1734,1733,1728
<1728=1732,1729
<1729=1731,1730
<1735=1742,1741,1736
<1736=1740,1737
<1737=1739,1738
<1743=1744
<1745=1760,1746
<1746=1753,1747
<1747=1748
<1748=1750,1749
<1750=1752,1751
<1753=1754
<1754=1758,1755
<1755=1756
<1756=1757
<1758=1759
<1760=1761
<1761=1763,1762
<1764=1765
<1765=1803,1802,1766
<1766=1801,1767
<1767=1799,1768
<1768=1793,1791,1785,1779,1777,1775,1773,1771,1769
<1769=1770
<1771=1772
<1773=1774
<1775=1776
<1777=1778
<1779=1780
<1780=1782,1781
<1782=1784,1783
<1785=1786
<1786=1788,1787
<1788=1790,1789
<1791=1792
<1793=1794
<1794=1798,1795
<1795=1797,1796
<1799=1800
<1804=1805
<1805=1816,1806
<1806=1814,1807
<1807=1808
<1808=1809
<1809=1813,1810
<1810=1812,1811
<1814=1815
<1816=1818,1817
<1819=1820
<1820=1831,1821
<1821=1829,1822
<1822=1823
<1823=1824
<1824=1828,1825
<1825=1827,1826
<1829=1830
<1831=1833,1832
<1834=1835
<1835=1846,1836
<1836=1844,1837
<1837=1838
<1838=1839
<1839=1843,1840
<1840=1842,1841
<1844=1845
<1846=1848,1847
<1849=1850
<1850=1857,1856,1851
<1851=1855,1852
<1852=1854,1853
<1858=1865,1862,1859
<1859=1861,1860
<1862=1864,1863
<1865=1867,1866
<1868=1873,1869
<1869=1872,1871,1870
<1873=1876,1875,1874
<1877=1878
<1878=1880,1879
<1880=1882,1881
<1883=1884
<1884=1891,1890,1885
<1885=1889,1886
<1886=1888,1887
<1892=1894,1893
<1895=1896
<1896=1909,1897
<1897=1899,1898
<1899=1900
<1900=1902,1901
<1902=1904,1903
<1904=1908,1905
<1905=1907,1906
<1910=1911
<1911=1924,1912
<1912=1914,1913
<1914=1915
<1915=1917,1916
<1917=1919,1918
<1919=1923,1920
<1920=1922,1921
<1925=1926
<1926=1928,1927
<1929=1930
<1930=1935,1934,1931
<1931=1933,1932
<1936=1937
<1937=1941,1938
<1938=1939
<1939=1940
<1941=1942
<1942=1944,1943
<1945=1946
<1946=1948,1947
<1949=1950
<1950=1955,1954,1951
<1951=1953,1952
<1956=1986,1982,1979,1957
<1957=1958
<1958=1964,1959
<1959=1960
<1960=1961
<1961=1963,1962
<1964=1965
<1965=1967,1966
<1967=1969,1968
<1969=1977,1970
<1970=1973,1971
<1971=1972
<1973=1974
<1974=1976,1975
<1977=1978
<1979=1981,1980
<1982=1983
<1983=1985,1984
<1986=1987
<1987=1988
<1988=1993,1992,1989
<1989=1991,1990
<1994=1995
<1995=2000,1999,1996
<1996=1998,1997
<2001=2002
<2002=2014,2013,2003
<2003=2012,2004
<2004=2010,2005
<2005=2006
<2006=2007
<2007=2009,2008
<2010=2011
<2015=2125,2016
<2016=2114,2092,2078,2064,2038,2017
<2017=2018
<2018=2036,2019
<2019=2034,2032,2030,2028,2026,2020
<2020=2021
<2021=2023,2022
<2023=2025,2024
<2026=2027
<2028=2029
<2030=2031
<2032=2033
<2034=2035
<2036=2037
<2038=2039
<2039=2063,2062,2040
<2040=2061,2041
<2041=2049,2042
<2042=2044,2043
<2044=2046,2045
<2046=2048,2047
<2049=2059,2050
<2050=2051
<2051=2052
<2052=2056,2053
<2053=2055,2054
<2056=2058,2057
<2059=2060
<2064=2065
<2065=2077,2076,2066
<2066=2075,2067
<2067=2074,2068
<2068=2070,2069
<2070=2071
<2071=2073,2072
<2078=2079
<2079=2091,2090,2080
<2080=2089,2081
<2081=2088,2082
<2082=2084,2083
<2084=2085
<2085=2087,2086
<2092=2093
<2093=2113,2112,2111,2094
<2094=2110,2095
<2095=2109,2108,2107,2104,2103,2100,2099,2096
<2096=2098,2097
<2100=2102,2101
<2104=2106,2105
<2114=2115
<2115=2124,2123,2116
<2116=2122,2117
<2117=2119,2118
<2119=2121,2120
<2125=2126
<2126=2128,2127
<2129=2233,2130
<2130=2222,2204,2190,2176,2152,2131
<2131=2132
<2132=2150,2133
<2133=2148,2146,2144,2142,2140,2134
<2134=2135
<2135=2137,2136
<2137=2139,2138
<2140=2141
<2142=2143
<2144=2145
<2146=2147
<2148=2149
<2150=2151
<2152=2153
<2153=2175,2174,2154
<2154=2173,2155
<2155=2161,2156
<2156=2158,2157
<2158=2160,2159
<2161=2171,2162
<2162=2163
<2163=2164
<2164=2168,2165
<2165=2167,2166
<2168=2170,2169
<2171=2172
<2176=2177
<2177=2189,2188,2178
<2178=2187,2179
<2179=2186,2180
<2180=2182,2181
<2182=2183
<2183=2185,2184
<2190=2191
<2191=2203,2202,2192
<2192=2201,2193
<2193=2200,2194
<2194=2196,2195
<2196=2197
<2197=2199,2198
<2204=2205
<2205=2221,2220,2219,2206
<2206=2218,2207
<2207=2217,2216,2215,2212,2211,2208
<2208=2210,2209
<2212=2214,2213
<2222=2223
<2223=2232,2231,2224
<2224=2230,2225
<2225=2227,2226
<2227=2229,2228
<2233=2234
<2235=2236
<2236=2263,2262,2261,2237
<2237=2260,2238
<2238=2253,2246,2239
<2239=2241,2240
<2241=2243,2242
<2243=2245,2244
<2246=2248,2247
<2248=2250,2249
<2250=2252,2251
<2253=2255,2254
<2255=2257,2256
<2257=2259,2258
<2264=2265
<2265=2288,2287,2286,2266
<2266=2285,2267
<2267=2280,2279,2278,2277,2272,2271,2270,2269,2268
<2272=2274,2273
<2274=2276,2275
<2280=2282,2281
<2282=2284,2283
<2289=2290
<2290=2299,2298,2291
<2291=2297,2292
<2292=2296,2293
<2293=2295,2294
<2300=2302,2301
<2303=2304
<2304=2306,2305
<2307=2308
<2308=2309
<2309=2314,2313,2310
<2310=2312,2311
<2315=2316
<2316=2318,2317
<2319=2320
<2320=2322,2321
<2323=2324
<2324=2326,2325
<2327=2328
<2328=2333,2332,2329
<2329=2331,2330
<2334=2335
<2335=2340,2339,2336
<2336=2338,2337
<2341=2342
<2342=2347,2343
<2343=2345,2344
<2345=2346
<2348=2349
<2349=2363,2350
<2350=2361,2351
<2351=2352
<2352=2356,2353
<2353=2355,2354
<2356=2360,2357
<2357=2359,2358
<2361=2362
<2363=2364
<2365=2366
<2366=2374,2373,2367
<2367=2372,2368
<2368=2370,2369
<2370=2371
<2375=2376
<2376=2384,2377
<2377=2378
<2378=2379
<2379=2383,2380
<2380=2382,2381
<2384=2385
<2386=2446,2442,2439,2387
<2387=2426,2422,2409,2405,2392,2388
<2388=2389
<2389=2391,2390
<2392=2393
<2393=2397,2394
<2394=2396,2395
<2397=2403,2398
<2398=2399
<2399=2400
<2400=2402,2401
<2403=2404
<2405=2406
<2406=2408,2407
<2409=2410
<2410=2414,2411
<2411=2413,2412
<2414=2420,2415
<2415=2416
<2416=2417
<2417=2419,2418
<2420=2421
<2422=2423
<2423=2425,2424
<2426=2427
<2427=2431,2428
<2428=2430,2429
<2431=2437,2432
<2432=2433
<2433=2434
<2434=2436,2435
<2437=2438
<2439=2441,2440
<2442=2443
<2443=2445,2444
<2446=2447
<2447=2448
<2448=2453,2452,2449
<2449=2451,2450
<2454=2685,2681,2678,2455
<2455=2670,2662,2658,2650,2646,2638,2634,2629,2620,2603,2598,2587,2579,2575,2567,2563,2555,2551,2528,2511,2496,2492,2456
<2456=2490,2457
<2457=2478,2474,2462,2458
<2458=2459
<2459=2461,2460
<2462=2463
<2463=2467,2464
<2464=2466,2465
<2467=2469,2468
<2469=2471,2470
<2471=2473,2472
<2474=2475
<2475=2477,2476
<2478=2479
<2479=2483,2480
<2480=2482,2481
<2483=2485,2484
<2485=2487,2486
<2487=2489,2488
<2490=2491
<2492=2493
<2493=2495,2494
<2496=2497
<2497=2510,2509,2498
<2498=2508,2499
<2499=2503,2500
<2500=2502,2501
<2503=2505,2504
<2505=2507,2506
<2511=2512
<2512=2526,2513
<2513=2524,2522,2520,2516,2514
<2514=2515
<2516=2517
<2517=2519,2518
<2520=2521
<2522=2523
<2524=2525
<2526=2527
<2528=2529
<2529=2549,2530
<2530=2547,2545,2543,2541,2535,2533,2531
<2531=2532
<2533=2534
<2535=2536
<2536=2538,2537
<2538=2540,2539
<2541=2542
<2543=2544
<2545=2546
<2547=2548
<2549=2550
<2551=2552
<2552=2554,2553
<2555=2556
<2556=2560,2557
<2557=2559,2558
<2560=2562,2561
<2563=2564
<2564=2566,2565
<2567=2568
<2568=2572,2569
<2569=2571,2570
<2572=2574,2573
<2575=2576
<2576=2578,2577
<2579=2580
<2580=2584,2581
<2581=2583,2582
<2584=2586,2585
<2587=2588
<2588=2597,2596,2589
<2589=2595,2590
<2590=2592,2591
<2592=2594,2593
<2598=2599
<2599=2602,2601,2600
<2603=2604
<2604=2618,2605
<2605=2616,2614,2612,2606
<2606=2607
<2607=2609,2608
<2609=2611,2610
<2612=2613
<2614=2615
<2616=2617
<2618=2619
<2620=2621
<2621=2627,2622
<2622=2625,2623
<2623=2624
<2625=2626
<2627=2628
<2629=2630
<2630=2633,2632,2631
<2634=2635
<2635=2637,2636
<2638=2639
<2639=2643,2640
<2640=2642,2641
<2643=2645,2644
<2646=2647
<2647=2649,2648
<2650=2651
<2651=2655,2652
<2652=2654,2653
<2655=2657,2656
<2658=2659
<2659=2661,2660
<2662=2663
<2663=2667,2664
<2664=2666,2665
<2667=2669,2668
<2670=2674,2671
<2671=2673,2672
<2674=2677,2676,2675
<2678=2680,2679
<2681=2682
<2682=2684,2683
<2685=2686
<2686=2687
<2687=2692,2691,2688
<2688=2690,2689
<2693=2694
<2694=2696,2695
<2697=2698
<2698=2700,2699
<2701=2837,2702
<2702=2832,2817,2803,2788,2740,2710,2703
<2703=2704
<2704=2708,2705
<2705=2706
<2706=2707
<2708=2709
<2710=2732,2728,2725,2711
<2711=2712
<2712=2713
<2713=2723,2714
<2714=2721,2719,2715
<2715=2716
<2716=2718,2717
<2719=2720
<2721=2722
<2723=2724
<2725=2727,2726
<2728=2729
<2729=2731,2730
<2732=2733
<2733=2734
<2734=2739,2738,2735
<2735=2737,2736
<2740=2780,2776,2773,2741
<2741=2742
<2742=2743
<2743=2771,2744
<2744=2769,2767,2763,2759,2753,2745
<2745=2746
<2746=2752,2747
<2747=2749,2748
<2749=2751,2750
<2753=2754
<2754=2758,2755
<2755=2757,2756
<2759=2760
<2760=2762,2761
<2763=2764
<2764=2766,2765
<2767=2768
<2769=2770
<2771=2772
<2773=2775,2774
<2776=2777
<2777=2779,2778
<2780=2781
<2781=2782
<2782=2787,2786,2783
<2783=2785,2784
<2788=2789
<2789=2801,2790
<2790=2799,2797,2795,2793,2791
<2791=2792
<2793=2794
<2795=2796
<2797=2798
<2799=2800
<2801=2802
<2803=2804
<2804=2816,2815,2805
<2805=2814,2806
<2806=2812,2807
<2807=2810,2808
<2808=2809
<2810=2811
<2812=2813
<2817=2818
<2818=2830,2819
<2819=2828,2826,2824,2822,2820
<2820=2821
<2822=2823
<2824=2825
<2826=2827
<2828=2829
<2830=2831
<2832=2833
<2833=2836,2835,2834
<2837=2838
<2838=2840,2839
<2841=2847,2842
<2842=2843
<2843=2844
<2844=2846,2845
<2847=2848
<2848=2850,2849
<2850=2852,2851
<2853=2854
<2854=2858,2855
<2855=2856
<2856=2857
<2858=2859
<2860=2861
<2861=2865,2862
<2862=2863
<2863=2864
<2865=2866
<2867=2868
<2868=2877,2869
<2869=2871,2870
<2871=2873,2872
<2873=2874
<2874=2876,2875
<2878=2879
<2879=2891,2880
<2880=2889,2885,2881
<2881=2882
<2882=2884,2883
<2885=2886
<2886=2888,2887
<2889=2890
<2891=2892
<2893=2894
<2894=2896,2895
<2897=2898
<2898=2903,2899
<2899=2901,2900
<2901=2902
<2903=2905,2904
<2906=2907
<2907=2912,2908
<2908=2910,2909
<2910=2911
<2912=2914,2913
<2915=2917,2916
<2917=2918
<2919=2920
<2920=2922,2921
<2922=2924,2923
<2925=2985,2950,2926
<2926=2927
<2927=2928
<2928=2942,2936,2929
<2929=2930
<2930=2931
<2931=2933,2932
<2933=2935,2934
<2936=2937
<2937=2939,2938
<2939=2941,2940
<2942=2943
<2943=2947,2944
<2944=2946,2945
<2947=2949,2948
<2950=2975,2951
<2951=2971,2952
<2952=2953
<2953=2967,2961,2954
<2954=2955
<2955=2956
<2956=2958,2957
<2958=2960,2959
<2961=2962
<2962=2964,2963
<2964=2966,2965
<2967=2968
<2968=2970,2969
<2971=2972
<2972=2974,2973
<2975=2976
<2976=2982,2977
<2977=2980,2979,2978
<2980=2981
<2982=2984,2983
<2985=2986
<2986=2988,2987
<2989=2990
<2990=2992,2991
<2992=2994,2993
<2995=2996
<2996=2998,2997
<2998=3000,2999
<3001=3041,3027,3002
<3002=3003
<3003=3020,3014,3008,3004
<3004=3005
<3005=3007,3006
<3008=3009
<3009=3011,3010
<3011=3013,3012
<3014=3015
<3015=3017,3016
<3017=3019,3018
<3020=3021
<3021=3025,3022
<3022=3023
<3023=3024
<3025=3026
<3027=3034,3028
<3028=3029
<3029=3031,3030
<3031=3033,3032
<3034=3035
<3035=3039,3036
<3036=3037
<3037=3038
<3039=3040
<3041=3042
<3042=3046,3043
<3043=3045,3044
<3047=3048
<3048=3053,3052,3049
<3049=3051,3050
<3054=3055
<3055=3057,3056
<3058=3059
<3059=3064,3063,3060
<3060=3062,3061
<3065=3201,3066
<3066=3196,3181,3167,3152,3104,3074,3067
<3067=3068
<3068=3072,3069
<3069=3070
<3070=3071
<3072=3073
<3074=3096,3092,3089,3075
<3075=3076
<3076=3077
<3077=3087,3078
<3078=3085,3083,3079
<3079=3080
<3080=3082,3081
<3083=3084
<3085=3086
<3087=3088
<3089=3091,3090
<3092=3093
<3093=3095,3094
<3096=3097
<3097=3098
<3098=3103,3102,3099
<3099=3101,3100
<3104=3144,3140,3137,3105
<3105=3106
<3106=3107
<3107=3135,3108
<3108=3133,3131,3127,3123,3117,3109
<3109=3110
<3110=3116,3111
<3111=3113,3112
<3113=3115,3114
<3117=3118
<3118=3122,3119
<3119=3121,3120
<3123=3124
<3124=3126,3125
<3127=3128
<3128=3130,3129
<3131=3132
<3133=3134
<3135=3136
<3137=3139,3138
<3140=3141
<3141=3143,3142
<3144=3145
<3145=3146
<3146=3151,3150,3147
<3147=3149,3148
<3152=3153
<3153=3165,3154
<3154=3163,3161,3159,3157,3155
<3155=3156
<3157=3158
<3159=3160
<3161=3162
<3163=3164
<3165=3166
<3167=3168
<3168=3180,3179,3169
<3169=3178,3170
<3170=3176,3171
<3171=3174,3172
<3172=3173
<3174=3175
<3176=3177
<3181=3182
<3182=3194,3183
<3183=3192,3190,3188,3186,3184
<3184=3185
<3186=3187
<3188=3189
<3190=3191
<3192=3193
<3194=3195
<3196=3197
<3197=3200,3199,3198
<3201=3202
<3203=3204
<3204=3208,3205
<3205=3206
<3206=3207
<3208=3209
<3210=3211
<3211=3215,3212
<3212=3213
<3213=3214
<3215=3216
<3217=3218
<3218=3224,3219
<3219=3222,3220
<3220=3221
<3222=3223
<3224=3225
<3226=3227
<3227=3233,3228
<3228=3231,3229
<3229=3230
<3231=3232
<3233=3234
<3235=3236
<3236=3242,3237
<3237=3240,3238
<3238=3239
<3240=3241
<3242=3243
<3244=3245
<3245=3251,3246
<3246=3249,3247
<3247=3248
<3249=3250
<3251=3252
<3253=3254
<3254=3262,3261,3255
<3255=3260,3256
<3256=3258,3257
<3258=3259
<3263=3264
<3264=3266,3265
<3267=3268
<3268=3270,3269
<3271=3397,3393,3390,3272
<3272=3386,3335,3321,3304,3290,3273
<3273=3274
<3274=3286,3275
<3275=3284,3282,3276
<3276=3277
<3277=3281,3278
<3278=3280,3279
<3282=3283
<3284=3285
<3286=3287
<3287=3289,3288
<3290=3291
<3291=3303,3292
<3292=3302,3293
<3293=3301,3294
<3294=3300,3295
<3295=3299,3296
<3296=3298,3297
<3304=3305
<3305=3317,3306
<3306=3315,3313,3307
<3307=3308
<3308=3312,3309
<3309=3311,3310
<3313=3314
<3315=3316
<3317=3318
<3318=3320,3319
<3321=3322
<3322=3334,3323
<3323=3333,3324
<3324=3332,3325
<3325=3331,3326
<3326=3330,3327
<3327=3329,3328
<3335=3378,3336
<3336=3354,3337
<3337=3338
<3338=3350,3339
<3339=3348,3346,3340
<3340=3341
<3341=3345,3342
<3342=3344,3343
<3346=3347
<3348=3349
<3350=3351
<3351=3353,3352
<3354=3355
<3355=3377,3356
<3356=3376,3357
<3357=3369,3358
<3358=3362,3359
<3359=3361,3360
<3362=3364,3363
<3364=3366,3365
<3366=3368,3367
<3369=3371,3370
<3371=3373,3372
<3373=3375,3374
<3378=3379
<3379=3381,3380
<3381=3383,3382
<3383=3385,3384
<3386=3387
<3387=3389,3388
<3390=3392,3391
<3393=3394
<3394=3396,3395
<3397=3398
<3398=3399
<3399=3404,3403,3400
<3400=3402,3401
<3405=3488,3484,3481,3406
<3406=3477,3459,3452,3448,3435,3422,3407
<3407=3408
<3408=3418,3409
<3409=3416,3414,3412,3410
<3410=3411
<3412=3413
<3414=3415
<3416=3417
<3418=3419
<3419=3421,3420
<3422=3423
<3423=3434,3433,3424
<3424=3432,3425
<3425=3431,3426
<3426=3430,3427
<3427=3429,3428
<3435=3436
<3436=3447,3446,3437
<3437=3445,3438
<3438=3444,3439
<3439=3443,3440
<3440=3442,3441
<3448=3449
<3449=3451,3450
<3452=3453
<3453=3458,3457,3454
<3454=3456,3455
<3459=3460
<3460=3476,3461
<3461=3469,3462
<3462=3468,3463
<3463=3465,3464
<3465=3467,3466
<3469=3475,3470
<3470=3472,3471
<3472=3474,3473
<3477=3478
<3478=3480,3479
<3481=3483,3482
<3484=3485
<3485=3487,3486
<3488=3489
<3489=3490
<3490=3495,3494,3491
<3491=3493,3492
<3496=3497
<3497=3505,3498
<3498=3499
<3499=3500
<3500=3504,3501
<3501=3503,3502
<3505=3506
<3507=3589,3585,3582,3508
<3508=3566,3509
<3509=3562,3510
<3510=3549,3545,3532,3528,3515,3511
<3511=3512
<3512=3514,3513
<3515=3516
<3516=3525,3517
<3517=3523,3518
<3518=3519
<3519=3520
<3520=3522,3521
<3523=3524
<3525=3527,3526
<3528=3529
<3529=3531,3530
<3532=3533
<3533=3542,3534
<3534=3540,3535
<3535=3536
<3536=3537
<3537=3539,3538
<3540=3541
<3542=3544,3543
<3545=3546
<3546=3548,3547
<3549=3550
<3550=3559,3551
<3551=3557,3552
<3552=3553
<3553=3554
<3554=3556,3555
<3557=3558
<3559=3561,3560
<3562=3563
<3563=3565,3564
<3566=3567
<3567=3581,3580,3568
<3568=3579,3569
<3569=3578,3570
<3570=3572,3571
<3572=3573
<3573=3575,3574
<3575=3577,3576
<3582=3584,3583
<3585=3586
<3586=3588,3587
<3589=3590
<3590=3591
<3591=3596,3595,3592
<3592=3594,3593
<3597=3811,3807,3804,3598
<3598=3799,3786,3775,3770,3755,3738,3727,3714,3701,3693,3689,3681,3677,3669,3665,3657,3653,3645,3641,3633,3629,3623,3619,3613,3609,3603,3599
<3599=3600
<3600=3602,3601
<3603=3604
<3604=3606,3605
<3606=3608,3607
<3609=3610
<3610=3612,3611
<3613=3614
<3614=3616,3615
<3616=3618,3617
<3619=3620
<3620=3622,3621
<3623=3624
<3624=3626,3625
<3626=3628,3627
<3629=3630
<3630=3632,3631
<3633=3634
<3634=3638,3635
<3635=3637,3636
<3638=3640,3639
<3641=3642
<3642=3644,3643
<3645=3646
<3646=3650,3647
<3647=3649,3648
<3650=3652,3651
<3653=3654
<3654=3656,3655
<3657=3658
<3658=3662,3659
<3659=3661,3660
<3662=3664,3663
<3665=3666
<3666=3668,3667
<3669=3670
<3670=3674,3671
<3671=3673,3672
<3674=3676,3675
<3677=3678
<3678=3680,3679
<3681=3682
<3682=3686,3683
<3683=3685,3684
<3686=3688,3687
<3689=3690
<3690=3692,3691
<3693=3694
<3694=3698,3695
<3695=3697,3696
<3698=3700,3699
<3701=3702
<3702=3713,3712,3703
<3703=3711,3704
<3704=3706,3705
<3706=3708,3707
<3708=3710,3709
<3714=3715
<3715=3726,3725,3716
<3716=3724,3717
<3717=3719,3718
<3719=3721,3720
<3721=3723,3722
<3727=3728
<3728=3737,3736,3729
<3729=3735,3730
<3730=3732,3731
<3732=3734,3733
<3738=3739
<3739=3753,3740
<3740=3751,3749,3747,3743,3741
<3741=3742
<3743=3744
<3744=3746,3745
<3747=3748
<3749=3750
<3751=3752
<3753=3754
<3755=3756
<3756=3768,3757
<3757=3762,3760,3758
<3758=3759
<3760=3761
<3762=3763
<3763=3765,3764
<3765=3767,3766
<3768=3769
<3770=3771
<3771=3774,3773,3772
<3775=3776
<3776=3785,3784,3777
<3777=3783,3778
<3778=3780,3779
<3780=3782,3781
<3786=3787
<3787=3797,3788
<3788=3791,3789
<3789=3790
<3791=3792
<3792=3794,3793
<3794=3796,3795
<3797=3798
<3799=3800
<3800=3803,3802,3801
<3804=3806,3805
<3807=3808
<3808=3810,3809
<3811=3812
<3812=3813
<3813=3818,3817,3814
<3814=3816,3815
<3819=3820
<3820=3825,3824,3821
<3821=3823,3822
<3826=3827
<3827=3832,3831,3828
<3828=3830,3829
<3833=3834
<3834=3843,3842,3835
<3835=3841,3836
<3836=3840,3837
<3837=3839,3838
<3844=3845
<3845=3850,3849,3846
<3846=3848,3847
<3851=3852
<3852=3854,3853
<3855=3856
<3856=3867,3866,3857
<3857=3865,3858
<3858=3862,3859
<3859=3861,3860
<3862=3864,3863
<3868=3869
<3869=3874,3873,3870
<3870=3872,3871
<3875=3885,3881,3876
<3876=3877
<3877=3878
<3878=3880,3879
<3881=3882
<3882=3884,3883
<3885=3886
<3886=3888,3887
<3889=3890
<3890=3895,3894,3891
<3891=3893,3892
<3896=3897
<3897=3902,3901,3898
<3898=3900,3899
<3903=3904
<3904=3909,3908,3905
<3905=3907,3906
<3910=4081,4077,4074,3911
<3911=4058,3912
<3912=4054,3923,3913
<3913=3914
<3914=3915
<3915=3916
<3916=3920,3917
<3917=3919,3918
<3920=3922,3921
<3923=3942,3936,3928,3924
<3924=3925
<3925=3927,3926
<3928=3929
<3929=3933,3930
<3930=3932,3931
<3933=3935,3934
<3936=3937
<3937=3939,3938
<3939=3941,3940
<3942=4046,4042,4039,3943
<3943=4026,4017,4004,3985,3966,3960,3954,3948,3944
<3944=3945
<3945=3947,3946
<3948=3949
<3949=3951,3950
<3951=3953,3952
<3954=3955
<3955=3957,3956
<3957=3959,3958
<3960=3961
<3961=3963,3962
<3963=3965,3964
<3966=3967
<3967=3978,3968
<3968=3970,3969
<3970=3976,3971
<3971=3974,3972
<3972=3973
<3974=3975
<3976=3977
<3978=3984,3979
<3979=3981,3980
<3981=3983,3982
<3985=3986
<3986=3997,3987
<3987=3989,3988
<3989=3995,3990
<3990=3993,3991
<3991=3992
<3993=3994
<3995=3996
<3997=4003,3998
<3998=4000,3999
<4000=4002,4001
<4004=4005
<4005=4016,4015,4006
<4006=4014,4007
<4007=4009,4008
<4009=4011,4010
<4011=4013,4012
<4017=4018
<4018=4025,4024,4019
<4019=4023,4020
<4020=4022,4021
<4026=4027
<4027=4038,4037,4028
<4028=4036,4029
<4029=4031,4030
<4031=4033,4032
<4033=4035,4034
<4039=4041,4040
<4042=4043
<4043=4045,4044
<4046=4047
<4047=4048
<4048=4053,4052,4049
<4049=4051,4050
<4054=4055
<4055=4057,4056
<4058=4059
<4059=4073,4072,4060
<4060=4071,4061
<4061=4070,4062
<4062=4064,4063
<4064=4065
<4065=4067,4066
<4067=4069,4068
<4074=4076,4075
<4077=4078
<4078=4080,4079
<4081=4082
<4082=4083
<4083=4088,4087,4084
<4084=4086,4085
<4089=4090
<4090=4095,4094,4091
<4091=4093,4092
<4096=4097
<4097=4102,4101,4098
<4098=4100,4099
<4103=4117,4113,4110,4104
<4104=4105
<4105=4107,4106
<4107=4109,4108
<4110=4112,4111
<4113=4114
<4114=4116,4115
<4117=4118
<4118=4119
<4119=4124,4123,4120
<4120=4122,4121
<4125=4126
<4126=4128,4127
<4129=4130
<4130=4132,4131
<4133=4134
<4134=4136,4135
<4137=4138
<4138=4142,4139
<4139=4141,4140
<4143=4165,4161,4158,4144
<4144=4145
<4145=4146
<4146=4157,4147
<4147=4156,4148
<4148=4150,4149
<4150=4151
<4151=4153,4152
<4153=4155,4154
<4158=4160,4159
<4161=4162
<4162=4164,4163
<4165=4166
<4166=4167
<4167=4172,4171,4168
<4168=4170,4169
<4173=4174
<4174=4179,4178,4175
<4175=4177,4176
<4180=4181
<4181=4186,4185,4182
<4182=4184,4183
<4187=4188
<4188=4193,4192,4189
<4189=4191,4190
<4194=4195
<4195=4200,4199,4196
<4196=4198,4197
<4201=4202
<4202=4207,4206,4203
<4203=4205,4204
<4208=4229,4209
<4209=4222,4215,4211,4210
<4211=4212
<4212=4214,4213
<4215=4216
<4216=4220,4217
<4217=4218
<4218=4219
<4220=4221
<4222=4223
<4223=4227,4224
<4224=4225
<4225=4226
<4227=4228
<4229=4230
<4230=4232,4231
<4232=4234,4233
<4235=4236
<4236=4244,4237
<4237=4240,4238
<4238=4239
<4240=4241
<4241=4243,4242
<4244=4245
<4246=4250,4247
<4247=4249,4248
<4250=4252,4251
<4253=4254
<4254=4256,4255
<4257=4262,4258
<4258=4259
<4259=4261,4260
<4262=4263
<4263=4265,4264
<4266=4267
<4267=4272,4271,4268
<4268=4270,4269
<4273=4274
<4274=4278,4275
<4275=4276
<4276=4277
<4278=4279
<4280=4281
<4281=4289,4282
<4282=4285,4283
<4283=4284
<4285=4286
<4286=4288,4287
<4289=4290
<4291=4295,4292
<4292=4294,4293
<4295=4297,4296
<4298=4299
<4299=4304,4303,4300
<4300=4302,4301
<4305=4306
<4306=4311,4310,4307
<4307=4309,4308
<4312=4313
<4313=4318,4317,4314
<4314=4316,4315
<4319=4320
<4320=4325,4324,4321
<4321=4323,4322
<4326=4327
<4327=4332,4331,4328
<4328=4330,4329
<4333=4334
<4334=4339,4338,4335
<4335=4337,4336
<4340=4341
<4341=4346,4345,4342
<4342=4344,4343
<4347=4348
<4348=4353,4352,4349
<4349=4351,4350
<4354=4355
<4355=4360,4359,4356
<4356=4358,4357
<4364=4365
<4365=4371,4366
<4366=4369,4367
<4367=4368
<4369=4370
<4371=4372
