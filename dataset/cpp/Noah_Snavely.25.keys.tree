>3	FunctionDef	GetNumberOfKeysNormal (FILE * fp)
>4	ParameterList	FILE * fp
>5	Parameter	 
>6	Identifier	fp
>7	ParameterType	FILE *
>8	ReturnType	int
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	Identifier	num
>12	ExpressionStatement	 
>13	AssignmentExpr	num = MIN ( num , 65536 )
>14	CallExpression	MIN ( num , 65536 )
>15	ArgumentList	num
>16	Argument	65536
>17	PrimaryExpression	65536
>18	Argument	num
>19	Identifier	num
>20	Callee	MIN
>21	Identifier	MIN
>22	Identifier	num
>23	IfStatement	if ( fscanf ( fp , \"%d %d\" , & num , & len ) != 2 )
>24	CompoundStatement	 
>25	ReturnStatement	 
>26	PrimaryExpression	0
>27	ExpressionStatement	 
>28	CallExpression	printf ( \"Invalid keypoint file.\n\" )
>29	ArgumentList	\"Invalid keypoint file.\n\"
>30	Argument	\"Invalid keypoint file.\n\"
>31	PrimaryExpression	\"Invalid keypoint file.\n\"
>32	Callee	printf
>33	Identifier	printf
>34	Condition	 
>35	EqualityExpression	fscanf ( fp , \"%d %d\" , & num , & len ) != 2
>36	PrimaryExpression	2
>37	CallExpression	fscanf ( fp , \"%d %d\" , & num , & len )
>38	ArgumentList	fp
>39	Argument	& len
>40	UnaryOp	& len
>41	Identifier	len
>42	UnaryOperator	&
>43	Argument	& num
>44	UnaryOp	& num
>45	Identifier	num
>46	UnaryOperator	&
>47	Argument	\"%d %d\"
>48	PrimaryExpression	\"%d %d\"
>49	Argument	fp
>50	Identifier	fp
>51	Callee	fscanf
>52	Identifier	fscanf
>53	IdentifierDeclStatement	 
>54	IdentifierDecl	len
>55	Identifier	len
>56	IdentifierDeclType	int
>57	IdentifierDecl	num
>58	Identifier	num
>59	IdentifierDeclType	int
>70	FunctionDef	GetNumberOfKeysGzip (gzFile fp)
>71	ParameterList	gzFile fp
>72	Parameter	 
>73	Identifier	fp
>74	ParameterType	gzFile
>75	ReturnType	int
>76	CompoundStatement	 
>77	ReturnStatement	 
>78	Identifier	num
>79	ExpressionStatement	 
>80	AssignmentExpr	num = MIN ( num , 65536 )
>81	CallExpression	MIN ( num , 65536 )
>82	ArgumentList	num
>83	Argument	65536
>84	PrimaryExpression	65536
>85	Argument	num
>86	Identifier	num
>87	Callee	MIN
>88	Identifier	MIN
>89	Identifier	num
>90	IfStatement	if ( sscanf ( header , \"%d %d\" , & num , & len ) != 2 )
>91	CompoundStatement	 
>92	ReturnStatement	 
>93	PrimaryExpression	0
>94	ExpressionStatement	 
>95	CallExpression	printf ( \"Invalid keypoint file.\n\" )
>96	ArgumentList	\"Invalid keypoint file.\n\"
>97	Argument	\"Invalid keypoint file.\n\"
>98	PrimaryExpression	\"Invalid keypoint file.\n\"
>99	Callee	printf
>100	Identifier	printf
>101	Condition	 
>102	EqualityExpression	sscanf ( header , \"%d %d\" , & num , & len ) != 2
>103	PrimaryExpression	2
>104	CallExpression	sscanf ( header , \"%d %d\" , & num , & len )
>105	ArgumentList	header
>106	Argument	& len
>107	UnaryOp	& len
>108	Identifier	len
>109	UnaryOperator	&
>110	Argument	& num
>111	UnaryOp	& num
>112	Identifier	num
>113	UnaryOperator	&
>114	Argument	\"%d %d\"
>115	PrimaryExpression	\"%d %d\"
>116	Argument	header
>117	Identifier	header
>118	Callee	sscanf
>119	Identifier	sscanf
>120	ExpressionStatement	 
>121	CallExpression	gzgets ( fp , header , 256 )
>122	ArgumentList	fp
>123	Argument	256
>124	PrimaryExpression	256
>125	Argument	header
>126	Identifier	header
>127	Argument	fp
>128	Identifier	fp
>129	Callee	gzgets
>130	Identifier	gzgets
>131	IdentifierDeclStatement	 
>132	IdentifierDecl	header [ 256 ]
>133	PrimaryExpression	256
>134	Identifier	header
>135	IdentifierDeclType	char [ 256 ]
>136	IdentifierDeclStatement	 
>137	IdentifierDecl	len
>138	Identifier	len
>139	IdentifierDeclType	int
>140	IdentifierDecl	num
>141	Identifier	num
>142	IdentifierDeclType	int
>154	FunctionDef	GetNumberOfKeysBin (FILE * f)
>155	ParameterList	FILE * f
>156	Parameter	 
>157	Identifier	f
>158	ParameterType	FILE *
>159	ReturnType	int
>160	CompoundStatement	 
>161	ReturnStatement	 
>162	Identifier	num
>163	ExpressionStatement	 
>164	AssignmentExpr	num = MIN ( num , 65536 )
>165	CallExpression	MIN ( num , 65536 )
>166	ArgumentList	num
>167	Argument	65536
>168	PrimaryExpression	65536
>169	Argument	num
>170	Identifier	num
>171	Callee	MIN
>172	Identifier	MIN
>173	Identifier	num
>174	ExpressionStatement	 
>175	CallExpression	fread ( & num , sizeof ( int ) , 1 , f )
>176	ArgumentList	& num
>177	Argument	f
>178	Identifier	f
>179	Argument	1
>180	PrimaryExpression	1
>181	Argument	sizeof ( int )
>182	SizeofExpr	sizeof ( int )
>183	SizeofOperand	int
>184	Sizeof	sizeof
>185	Argument	& num
>186	UnaryOp	& num
>187	Identifier	num
>188	UnaryOperator	&
>189	Callee	fread
>190	Identifier	fread
>191	IdentifierDeclStatement	 
>192	IdentifierDecl	num
>193	Identifier	num
>194	IdentifierDeclType	int
>202	FunctionDef	GetNumberOfKeysBinGzip (gzFile gzf)
>203	ParameterList	gzFile gzf
>204	Parameter	 
>205	Identifier	gzf
>206	ParameterType	gzFile
>207	ReturnType	int
>208	CompoundStatement	 
>209	ReturnStatement	 
>210	Identifier	num
>211	ExpressionStatement	 
>212	AssignmentExpr	num = MIN ( num , 65536 )
>213	CallExpression	MIN ( num , 65536 )
>214	ArgumentList	num
>215	Argument	65536
>216	PrimaryExpression	65536
>217	Argument	num
>218	Identifier	num
>219	Callee	MIN
>220	Identifier	MIN
>221	Identifier	num
>222	ExpressionStatement	 
>223	CallExpression	gzread ( gzf , & num , sizeof ( int ) )
>224	ArgumentList	gzf
>225	Argument	sizeof ( int )
>226	SizeofExpr	sizeof ( int )
>227	SizeofOperand	int
>228	Sizeof	sizeof
>229	Argument	& num
>230	UnaryOp	& num
>231	Identifier	num
>232	UnaryOperator	&
>233	Argument	gzf
>234	Identifier	gzf
>235	Callee	gzread
>236	Identifier	gzread
>237	IdentifierDeclStatement	 
>238	IdentifierDecl	num
>239	Identifier	num
>240	IdentifierDeclType	int
>248	FunctionDef	GetNumberOfKeys (const char * filename)
>249	ParameterList	const char * filename
>250	Parameter	 
>251	Identifier	filename
>252	ParameterType	const char *
>253	ReturnType	int
>254	CompoundStatement	 
>255	IfStatement	if ( ! file )
>256	ElseStatement	else
>257	CompoundStatement	 
>258	ReturnStatement	 
>259	Identifier	n
>260	ExpressionStatement	 
>261	CallExpression	fclose ( file )
>262	ArgumentList	file
>263	Argument	file
>264	Identifier	file
>265	Callee	fclose
>266	Identifier	fclose
>267	IdentifierDeclStatement	 
>268	IdentifierDecl	n = GetNumberOfKeysNormal ( file )
>269	AssignmentExpr	n = GetNumberOfKeysNormal ( file )
>270	CallExpression	GetNumberOfKeysNormal ( file )
>271	ArgumentList	file
>272	Argument	file
>273	Identifier	file
>274	Callee	GetNumberOfKeysNormal
>275	Identifier	GetNumberOfKeysNormal
>276	Identifier	n
>277	Identifier	n
>278	IdentifierDeclType	int
>279	CompoundStatement	 
>280	IfStatement	if ( gzf == NULL )
>281	ElseStatement	else
>282	CompoundStatement	 
>283	ReturnStatement	 
>284	Identifier	n
>285	ExpressionStatement	 
>286	CallExpression	gzclose ( gzf )
>287	ArgumentList	gzf
>288	Argument	gzf
>289	Identifier	gzf
>290	Callee	gzclose
>291	Identifier	gzclose
>292	IdentifierDeclStatement	 
>293	IdentifierDecl	n = GetNumberOfKeysGzip ( gzf )
>294	AssignmentExpr	n = GetNumberOfKeysGzip ( gzf )
>295	CallExpression	GetNumberOfKeysGzip ( gzf )
>296	ArgumentList	gzf
>297	Argument	gzf
>298	Identifier	gzf
>299	Callee	GetNumberOfKeysGzip
>300	Identifier	GetNumberOfKeysGzip
>301	Identifier	n
>302	Identifier	n
>303	IdentifierDeclType	int
>304	CompoundStatement	 
>305	IfStatement	if ( file == NULL )
>306	ElseStatement	else
>307	CompoundStatement	 
>308	ReturnStatement	 
>309	Identifier	n
>310	ExpressionStatement	 
>311	CallExpression	fclose ( file )
>312	ArgumentList	file
>313	Argument	file
>314	Identifier	file
>315	Callee	fclose
>316	Identifier	fclose
>317	IdentifierDeclStatement	 
>318	IdentifierDecl	n = GetNumberOfKeysBin ( file )
>319	AssignmentExpr	n = GetNumberOfKeysBin ( file )
>320	CallExpression	GetNumberOfKeysBin ( file )
>321	ArgumentList	file
>322	Argument	file
>323	Identifier	file
>324	Callee	GetNumberOfKeysBin
>325	Identifier	GetNumberOfKeysBin
>326	Identifier	n
>327	Identifier	n
>328	IdentifierDeclType	int
>329	CompoundStatement	 
>330	IfStatement	if ( gzf == NULL )
>331	ElseStatement	else
>332	CompoundStatement	 
>333	ReturnStatement	 
>334	Identifier	n
>335	ExpressionStatement	 
>336	CallExpression	gzclose ( gzf )
>337	ArgumentList	gzf
>338	Argument	gzf
>339	Identifier	gzf
>340	Callee	gzclose
>341	Identifier	gzclose
>342	IdentifierDeclStatement	 
>343	IdentifierDecl	n = GetNumberOfKeysBinGzip ( gzf )
>344	AssignmentExpr	n = GetNumberOfKeysBinGzip ( gzf )
>345	CallExpression	GetNumberOfKeysBinGzip ( gzf )
>346	ArgumentList	gzf
>347	Argument	gzf
>348	Identifier	gzf
>349	Callee	GetNumberOfKeysBinGzip
>350	Identifier	GetNumberOfKeysBinGzip
>351	Identifier	n
>352	Identifier	n
>353	IdentifierDeclType	int
>354	CompoundStatement	 
>355	ReturnStatement	 
>356	PrimaryExpression	0
>357	ExpressionStatement	 
>358	CallExpression	printf ( \"Could not open file
>359	ArgumentList	\"Could not open file
>360	Argument	filename
>361	Identifier	filename
>362	Argument	\"Could not open file
>363	PrimaryExpression	\"Could not open file
>364	Callee	printf
>365	Identifier	printf
>366	Condition	 
>367	EqualityExpression	gzf == NULL
>368	Identifier	NULL
>369	Identifier	gzf
>370	ExpressionStatement	 
>371	AssignmentExpr	gzf = gzopen ( buf , \"rb\" )
>372	CallExpression	gzopen ( buf , \"rb\" )
>373	ArgumentList	buf
>374	Argument	\"rb\"
>375	PrimaryExpression	\"rb\"
>376	Argument	buf
>377	Identifier	buf
>378	Callee	gzopen
>379	Identifier	gzopen
>380	Identifier	gzf
>381	ExpressionStatement	 
>382	CallExpression	sprintf ( buf , \"%s.bin.gz\" , filename )
>383	ArgumentList	buf
>384	Argument	filename
>385	Identifier	filename
>386	Argument	\"%s.bin.gz\"
>387	PrimaryExpression	\"%s.bin.gz\"
>388	Argument	buf
>389	Identifier	buf
>390	Callee	sprintf
>391	Identifier	sprintf
>392	Condition	 
>393	EqualityExpression	file == NULL
>394	Identifier	NULL
>395	Identifier	file
>396	ExpressionStatement	 
>397	AssignmentExpr	file = fopen ( buf , \"rb\" )
>398	CallExpression	fopen ( buf , \"rb\" )
>399	ArgumentList	buf
>400	Argument	\"rb\"
>401	PrimaryExpression	\"rb\"
>402	Argument	buf
>403	Identifier	buf
>404	Callee	fopen
>405	Identifier	fopen
>406	Identifier	file
>407	ExpressionStatement	 
>408	CallExpression	sprintf ( buf , \"%s.bin\" , filename )
>409	ArgumentList	buf
>410	Argument	filename
>411	Identifier	filename
>412	Argument	\"%s.bin\"
>413	PrimaryExpression	\"%s.bin\"
>414	Argument	buf
>415	Identifier	buf
>416	Callee	sprintf
>417	Identifier	sprintf
>418	Condition	 
>419	EqualityExpression	gzf == NULL
>420	Identifier	NULL
>421	Identifier	gzf
>422	IdentifierDeclStatement	 
>423	IdentifierDecl	gzf = gzopen ( buf , \"rb\" )
>424	AssignmentExpr	gzf = gzopen ( buf , \"rb\" )
>425	CallExpression	gzopen ( buf , \"rb\" )
>426	ArgumentList	buf
>427	Argument	\"rb\"
>428	PrimaryExpression	\"rb\"
>429	Argument	buf
>430	Identifier	buf
>431	Callee	gzopen
>432	Identifier	gzopen
>433	Identifier	gzf
>434	Identifier	gzf
>435	IdentifierDeclType	gzFile
>436	ExpressionStatement	 
>437	CallExpression	sprintf ( buf , \"%s.gz\" , filename )
>438	ArgumentList	buf
>439	Argument	filename
>440	Identifier	filename
>441	Argument	\"%s.gz\"
>442	PrimaryExpression	\"%s.gz\"
>443	Argument	buf
>444	Identifier	buf
>445	Callee	sprintf
>446	Identifier	sprintf
>447	IdentifierDeclStatement	 
>448	IdentifierDecl	buf [ 1024 ]
>449	PrimaryExpression	1024
>450	Identifier	buf
>451	IdentifierDeclType	char [ 1024 ]
>452	Condition	 
>453	UnaryOp	! file
>454	Identifier	file
>455	UnaryOperator	!
>456	ExpressionStatement	 
>457	AssignmentExpr	file = fopen ( filename , \"r\" )
>458	CallExpression	fopen ( filename , \"r\" )
>459	ArgumentList	filename
>460	Argument	\"r\"
>461	PrimaryExpression	\"r\"
>462	Argument	filename
>463	Identifier	filename
>464	Callee	fopen
>465	Identifier	fopen
>466	Identifier	file
>467	IdentifierDeclStatement	 
>468	IdentifierDecl	* file
>469	Identifier	file
>470	IdentifierDeclType	FILE *
>486	FunctionDef	ReadKeyFileWithDesc (const char * filename , bool descriptor)
>487	ParameterList	const char * filename , bool descriptor
>488	Parameter	 
>489	Identifier	descriptor
>490	ParameterType	bool
>491	Parameter	 
>492	Identifier	filename
>493	ParameterType	const char *
>494	ReturnType	std 
>495	CompoundStatement	 
>496	IfStatement	if ( ! file )
>497	ElseStatement	else
>498	CompoundStatement	 
>499	ReturnStatement	 
>500	Identifier	kps_desc
>501	ExpressionStatement	 
>502	CallExpression	fclose ( file )
>503	ArgumentList	file
>504	Argument	file
>505	Identifier	file
>506	Callee	fclose
>507	Identifier	fclose
>508	IdentifierDeclStatement	 
>509	IdentifierDecl	kps_desc = ReadKeysFast ( file , descriptor )
>510	AssignmentExpr	kps_desc = ReadKeysFast ( file , descriptor )
>511	CallExpression	ReadKeysFast ( file , descriptor )
>512	ArgumentList	file
>513	Argument	descriptor
>514	Identifier	descriptor
>515	Argument	file
>516	Identifier	file
>517	Callee	ReadKeysFast
>518	Identifier	ReadKeysFast
>519	Identifier	kps_desc
>520	Identifier	kps_desc
>521	IdentifierDeclType	std 
>522	CompoundStatement	 
>523	IfStatement	if ( gzf == NULL )
>524	ElseStatement	else
>525	CompoundStatement	 
>526	ReturnStatement	 
>527	Identifier	kps_desc
>528	ExpressionStatement	 
>529	CallExpression	gzclose ( gzf )
>530	ArgumentList	gzf
>531	Argument	gzf
>532	Identifier	gzf
>533	Callee	gzclose
>534	Identifier	gzclose
>535	IdentifierDeclStatement	 
>536	IdentifierDecl	kps_desc = ReadKeysFastGzip ( gzf , descriptor )
>537	AssignmentExpr	kps_desc = ReadKeysFastGzip ( gzf , descriptor )
>538	CallExpression	ReadKeysFastGzip ( gzf , descriptor )
>539	ArgumentList	gzf
>540	Argument	descriptor
>541	Identifier	descriptor
>542	Argument	gzf
>543	Identifier	gzf
>544	Callee	ReadKeysFastGzip
>545	Identifier	ReadKeysFastGzip
>546	Identifier	kps_desc
>547	Identifier	kps_desc
>548	IdentifierDeclType	std 
>549	CompoundStatement	 
>550	IfStatement	if ( file == NULL )
>551	ElseStatement	else
>552	CompoundStatement	 
>553	ReturnStatement	 
>554	Identifier	kps_desc
>555	ExpressionStatement	 
>556	CallExpression	fclose ( file )
>557	ArgumentList	file
>558	Argument	file
>559	Identifier	file
>560	Callee	fclose
>561	Identifier	fclose
>562	IdentifierDeclStatement	 
>563	IdentifierDecl	kps_desc = ReadKeysFastBin ( file , descriptor )
>564	AssignmentExpr	kps_desc = ReadKeysFastBin ( file , descriptor )
>565	CallExpression	ReadKeysFastBin ( file , descriptor )
>566	ArgumentList	file
>567	Argument	descriptor
>568	Identifier	descriptor
>569	Argument	file
>570	Identifier	file
>571	Callee	ReadKeysFastBin
>572	Identifier	ReadKeysFastBin
>573	Identifier	kps_desc
>574	Identifier	kps_desc
>575	IdentifierDeclType	std 
>576	CompoundStatement	 
>577	IfStatement	if ( gzf == NULL )
>578	ElseStatement	else
>579	CompoundStatement	 
>580	ReturnStatement	 
>581	Identifier	kps_desc
>582	ExpressionStatement	 
>583	CallExpression	gzclose ( gzf )
>584	ArgumentList	gzf
>585	Argument	gzf
>586	Identifier	gzf
>587	Callee	gzclose
>588	Identifier	gzclose
>589	IdentifierDeclStatement	 
>590	IdentifierDecl	kps_desc = ReadKeysFastBinGzip ( gzf , descriptor )
>591	AssignmentExpr	kps_desc = ReadKeysFastBinGzip ( gzf , descriptor )
>592	CallExpression	ReadKeysFastBinGzip ( gzf , descriptor )
>593	ArgumentList	gzf
>594	Argument	descriptor
>595	Identifier	descriptor
>596	Argument	gzf
>597	Identifier	gzf
>598	Callee	ReadKeysFastBinGzip
>599	Identifier	ReadKeysFastBinGzip
>600	Identifier	kps_desc
>601	Identifier	kps_desc
>602	IdentifierDeclType	std 
>603	CompoundStatement	 
>604	ReturnStatement	 
>605	Identifier	empty
>606	ExpressionStatement	 
>607	CallExpression	printf ( \"Could not open file
>608	ArgumentList	\"Could not open file
>609	Argument	filename
>610	Identifier	filename
>611	Argument	\"Could not open file
>612	PrimaryExpression	\"Could not open file
>613	Callee	printf
>614	Identifier	printf
>615	IdentifierDeclStatement	 
>616	IdentifierDecl	empty
>617	Identifier	empty
>618	IdentifierDeclType	std 
>619	Condition	 
>620	EqualityExpression	gzf == NULL
>621	Identifier	NULL
>622	Identifier	gzf
>623	ExpressionStatement	 
>624	AssignmentExpr	gzf = gzopen ( buf , \"rb\" )
>625	CallExpression	gzopen ( buf , \"rb\" )
>626	ArgumentList	buf
>627	Argument	\"rb\"
>628	PrimaryExpression	\"rb\"
>629	Argument	buf
>630	Identifier	buf
>631	Callee	gzopen
>632	Identifier	gzopen
>633	Identifier	gzf
>634	ExpressionStatement	 
>635	CallExpression	sprintf ( buf , \"%s.bin.gz\" , filename )
>636	ArgumentList	buf
>637	Argument	filename
>638	Identifier	filename
>639	Argument	\"%s.bin.gz\"
>640	PrimaryExpression	\"%s.bin.gz\"
>641	Argument	buf
>642	Identifier	buf
>643	Callee	sprintf
>644	Identifier	sprintf
>645	Condition	 
>646	EqualityExpression	file == NULL
>647	Identifier	NULL
>648	Identifier	file
>649	ExpressionStatement	 
>650	AssignmentExpr	file = fopen ( buf , \"rb\" )
>651	CallExpression	fopen ( buf , \"rb\" )
>652	ArgumentList	buf
>653	Argument	\"rb\"
>654	PrimaryExpression	\"rb\"
>655	Argument	buf
>656	Identifier	buf
>657	Callee	fopen
>658	Identifier	fopen
>659	Identifier	file
>660	ExpressionStatement	 
>661	CallExpression	sprintf ( buf , \"%s.bin\" , filename )
>662	ArgumentList	buf
>663	Argument	filename
>664	Identifier	filename
>665	Argument	\"%s.bin\"
>666	PrimaryExpression	\"%s.bin\"
>667	Argument	buf
>668	Identifier	buf
>669	Callee	sprintf
>670	Identifier	sprintf
>671	Condition	 
>672	EqualityExpression	gzf == NULL
>673	Identifier	NULL
>674	Identifier	gzf
>675	IdentifierDeclStatement	 
>676	IdentifierDecl	gzf = gzopen ( buf , \"rb\" )
>677	AssignmentExpr	gzf = gzopen ( buf , \"rb\" )
>678	CallExpression	gzopen ( buf , \"rb\" )
>679	ArgumentList	buf
>680	Argument	\"rb\"
>681	PrimaryExpression	\"rb\"
>682	Argument	buf
>683	Identifier	buf
>684	Callee	gzopen
>685	Identifier	gzopen
>686	Identifier	gzf
>687	Identifier	gzf
>688	IdentifierDeclType	gzFile
>689	ExpressionStatement	 
>690	CallExpression	sprintf ( buf , \"%s.gz\" , filename )
>691	ArgumentList	buf
>692	Argument	filename
>693	Identifier	filename
>694	Argument	\"%s.gz\"
>695	PrimaryExpression	\"%s.gz\"
>696	Argument	buf
>697	Identifier	buf
>698	Callee	sprintf
>699	Identifier	sprintf
>700	IdentifierDeclStatement	 
>701	IdentifierDecl	buf [ 1024 ]
>702	PrimaryExpression	1024
>703	Identifier	buf
>704	IdentifierDeclType	char [ 1024 ]
>705	Condition	 
>706	UnaryOp	! file
>707	Identifier	file
>708	UnaryOperator	!
>709	ExpressionStatement	 
>710	AssignmentExpr	file = fopen ( filename , \"r\" )
>711	CallExpression	fopen ( filename , \"r\" )
>712	ArgumentList	filename
>713	Argument	\"r\"
>714	PrimaryExpression	\"r\"
>715	Argument	filename
>716	Identifier	filename
>717	Callee	fopen
>718	Identifier	fopen
>719	Identifier	file
>720	IdentifierDeclStatement	 
>721	IdentifierDecl	* file
>722	Identifier	file
>723	IdentifierDeclType	FILE *
>741	FunctionDef	ReadKeyFile (const char * filename)
>742	ParameterList	const char * filename
>743	Parameter	 
>744	Identifier	filename
>745	ParameterType	const char *
>746	ReturnType	std 
>747	CompoundStatement	 
>748	ReturnStatement	 
>749	Identifier	kps
>750	ExpressionStatement	 
>751	CallExpression	kps_d . clear ( )
>752	ArgumentList	 
>753	Callee	kps_d . clear
>754	MemberAccess	kps_d . clear
>755	Identifier	clear
>756	Identifier	kps_d
>757	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>758	CompoundStatement	 
>759	ExpressionStatement	 
>760	AssignmentExpr	kps [ i ] . m_y = kps_d [ i ] . m_y
>761	MemberAccess	kps_d [ i ] . m_y
>762	Identifier	m_y
>763	ArrayIndexing	kps_d [ i ]
>764	Identifier	i
>765	Identifier	kps_d
>766	MemberAccess	kps [ i ] . m_y
>767	Identifier	m_y
>768	ArrayIndexing	kps [ i ]
>769	Identifier	i
>770	Identifier	kps
>771	ExpressionStatement	 
>772	AssignmentExpr	kps [ i ] . m_x = kps_d [ i ] . m_x
>773	MemberAccess	kps_d [ i ] . m_x
>774	Identifier	m_x
>775	ArrayIndexing	kps_d [ i ]
>776	Identifier	i
>777	Identifier	kps_d
>778	MemberAccess	kps [ i ] . m_x
>779	Identifier	m_x
>780	ArrayIndexing	kps [ i ]
>781	Identifier	i
>782	Identifier	kps
>783	IncDecOp	 
>784	IncDec	++
>785	Identifier	i
>786	Condition	 
>787	RelationalExpression	i < num_keys
>788	Identifier	num_keys
>789	Identifier	i
>790	ForInit	 
>791	IdentifierDeclStatement	int i = 0 ;
>792	IdentifierDecl	i = 0
>793	AssignmentExpr	i = 0
>794	PrimaryExpression	0
>795	Identifier	i
>796	Identifier	i
>797	IdentifierDeclType	int
>798	ExpressionStatement	 
>799	CallExpression	kps . resize ( num_keys )
>800	ArgumentList	num_keys
>801	Argument	num_keys
>802	Identifier	num_keys
>803	Callee	kps . resize
>804	MemberAccess	kps . resize
>805	Identifier	resize
>806	Identifier	kps
>807	IdentifierDeclStatement	 
>808	IdentifierDecl	num_keys = ( int ) kps_d . size ( )
>809	AssignmentExpr	num_keys = ( int ) kps_d . size ( )
>810	CastExpression	( int ) kps_d . size ( )
>811	CallExpression	kps_d . size ( )
>812	ArgumentList	 
>813	Callee	kps_d . size
>814	MemberAccess	kps_d . size
>815	Identifier	size
>816	Identifier	kps_d
>817	CastTarget	int
>818	Identifier	num_keys
>819	Identifier	num_keys
>820	IdentifierDeclType	int
>821	IdentifierDeclStatement	 
>822	IdentifierDecl	kps
>823	Identifier	kps
>824	IdentifierDeclType	std 
>825	IdentifierDeclStatement	 
>826	IdentifierDecl	kps_d = ReadKeyFileWithDesc ( filename , false )
>827	AssignmentExpr	kps_d = ReadKeyFileWithDesc ( filename , false )
>828	CallExpression	ReadKeyFileWithDesc ( filename , false )
>829	ArgumentList	filename
>830	Argument	false
>831	Identifier	false
>832	Argument	filename
>833	Identifier	filename
>834	Callee	ReadKeyFileWithDesc
>835	Identifier	ReadKeyFileWithDesc
>836	Identifier	kps_d
>837	Identifier	kps_d
>838	IdentifierDeclType	std 
>857	FunctionDef	ReadKeyFileWithScaleRot (const char * filename , bool descriptor)
>858	ParameterList	const char * filename , bool descriptor
>859	Parameter	 
>860	Identifier	descriptor
>861	ParameterType	bool
>862	Parameter	 
>863	Identifier	filename
>864	ParameterType	const char *
>865	ReturnType	std 
>866	CompoundStatement	 
>867	ReturnStatement	 
>868	Identifier	kps_w
>869	ExpressionStatement	 
>870	Identifier	orient
>871	Statement	 
>872	Statement	 
>873	IfStatement	if ( scale != NULL )
>874	Statement	 
>875	Condition	 
>876	EqualityExpression	scale != NULL
>877	Identifier	NULL
>878	Identifier	scale
>879	ExpressionStatement	 
>880	Identifier	scale
>881	Statement	 
>882	Statement	 
>883	IfStatement	if ( scale != NULL )
>884	Statement	 
>885	Condition	 
>886	EqualityExpression	scale != NULL
>887	Identifier	NULL
>888	Identifier	scale
>889	ExpressionStatement	 
>890	CallExpression	kps . clear ( )
>891	ArgumentList	 
>892	Callee	kps . clear
>893	MemberAccess	kps . clear
>894	Identifier	clear
>895	Identifier	kps
>896	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>897	CompoundStatement	 
>898	ExpressionStatement	 
>899	AssignmentExpr	kps_w [ i ] . m_orient = orient [ i ]
>900	ArrayIndexing	orient [ i ]
>901	Identifier	i
>902	Identifier	orient
>903	MemberAccess	kps_w [ i ] . m_orient
>904	Identifier	m_orient
>905	ArrayIndexing	kps_w [ i ]
>906	Identifier	i
>907	Identifier	kps_w
>908	ExpressionStatement	 
>909	AssignmentExpr	kps_w [ i ] . m_scale = scale [ i ]
>910	ArrayIndexing	scale [ i ]
>911	Identifier	i
>912	Identifier	scale
>913	MemberAccess	kps_w [ i ] . m_scale
>914	Identifier	m_scale
>915	ArrayIndexing	kps_w [ i ]
>916	Identifier	i
>917	Identifier	kps_w
>918	ExpressionStatement	 
>919	AssignmentExpr	kps_w [ i ] . m_d = kps [ i ] . m_d
>920	MemberAccess	kps [ i ] . m_d
>921	Identifier	m_d
>922	ArrayIndexing	kps [ i ]
>923	Identifier	i
>924	Identifier	kps
>925	MemberAccess	kps_w [ i ] . m_d
>926	Identifier	m_d
>927	ArrayIndexing	kps_w [ i ]
>928	Identifier	i
>929	Identifier	kps_w
>930	ExpressionStatement	 
>931	AssignmentExpr	kps_w [ i ] . m_y = kps [ i ] . m_y
>932	MemberAccess	kps [ i ] . m_y
>933	Identifier	m_y
>934	ArrayIndexing	kps [ i ]
>935	Identifier	i
>936	Identifier	kps
>937	MemberAccess	kps_w [ i ] . m_y
>938	Identifier	m_y
>939	ArrayIndexing	kps_w [ i ]
>940	Identifier	i
>941	Identifier	kps_w
>942	ExpressionStatement	 
>943	AssignmentExpr	kps_w [ i ] . m_x = kps [ i ] . m_x
>944	MemberAccess	kps [ i ] . m_x
>945	Identifier	m_x
>946	ArrayIndexing	kps [ i ]
>947	Identifier	i
>948	Identifier	kps
>949	MemberAccess	kps_w [ i ] . m_x
>950	Identifier	m_x
>951	ArrayIndexing	kps_w [ i ]
>952	Identifier	i
>953	Identifier	kps_w
>954	IncDecOp	 
>955	IncDec	++
>956	Identifier	i
>957	Condition	 
>958	RelationalExpression	i < num_keys
>959	Identifier	num_keys
>960	Identifier	i
>961	ForInit	 
>962	IdentifierDeclStatement	int i = 0 ;
>963	IdentifierDecl	i = 0
>964	AssignmentExpr	i = 0
>965	PrimaryExpression	0
>966	Identifier	i
>967	Identifier	i
>968	IdentifierDeclType	int
>969	ExpressionStatement	 
>970	CallExpression	kps_w . resize ( num_keys )
>971	ArgumentList	num_keys
>972	Argument	num_keys
>973	Identifier	num_keys
>974	Callee	kps_w . resize
>975	MemberAccess	kps_w . resize
>976	Identifier	resize
>977	Identifier	kps_w
>978	IdentifierDeclStatement	 
>979	IdentifierDecl	num_keys = ( int ) kps . size ( )
>980	AssignmentExpr	num_keys = ( int ) kps . size ( )
>981	CastExpression	( int ) kps . size ( )
>982	CallExpression	kps . size ( )
>983	ArgumentList	 
>984	Callee	kps . size
>985	MemberAccess	kps . size
>986	Identifier	size
>987	Identifier	kps
>988	CastTarget	int
>989	Identifier	num_keys
>990	Identifier	num_keys
>991	IdentifierDeclType	int
>992	IdentifierDeclStatement	 
>993	IdentifierDecl	kps_w
>994	Identifier	kps_w
>995	IdentifierDeclType	std 
>996	IfStatement	if ( ! file )
>997	ElseStatement	else
>998	CompoundStatement	 
>999	ExpressionStatement	 
>1000	CallExpression	fclose ( file )
>1001	ArgumentList	file
>1002	Argument	file
>1003	Identifier	file
>1004	Callee	fclose
>1005	Identifier	fclose
>1006	ExpressionStatement	 
>1007	AssignmentExpr	kps = ReadKeysFast ( file , descriptor , & scale , & orient )
>1008	CallExpression	ReadKeysFast ( file , descriptor , & scale , & orient )
>1009	ArgumentList	file
>1010	Argument	& orient
>1011	UnaryOp	& orient
>1012	Identifier	orient
>1013	UnaryOperator	&
>1014	Argument	& scale
>1015	UnaryOp	& scale
>1016	Identifier	scale
>1017	UnaryOperator	&
>1018	Argument	descriptor
>1019	Identifier	descriptor
>1020	Argument	file
>1021	Identifier	file
>1022	Callee	ReadKeysFast
>1023	Identifier	ReadKeysFast
>1024	Identifier	kps
>1025	CompoundStatement	 
>1026	IfStatement	if ( gzf == NULL )
>1027	ElseStatement	else
>1028	CompoundStatement	 
>1029	ExpressionStatement	 
>1030	CallExpression	gzclose ( gzf )
>1031	ArgumentList	gzf
>1032	Argument	gzf
>1033	Identifier	gzf
>1034	Callee	gzclose
>1035	Identifier	gzclose
>1036	ExpressionStatement	 
>1037	AssignmentExpr	kps = ReadKeysFastGzip ( gzf , descriptor , & scale , & orient )
>1038	CallExpression	ReadKeysFastGzip ( gzf , descriptor , & scale , & orient )
>1039	ArgumentList	gzf
>1040	Argument	& orient
>1041	UnaryOp	& orient
>1042	Identifier	orient
>1043	UnaryOperator	&
>1044	Argument	& scale
>1045	UnaryOp	& scale
>1046	Identifier	scale
>1047	UnaryOperator	&
>1048	Argument	descriptor
>1049	Identifier	descriptor
>1050	Argument	gzf
>1051	Identifier	gzf
>1052	Callee	ReadKeysFastGzip
>1053	Identifier	ReadKeysFastGzip
>1054	Identifier	kps
>1055	CompoundStatement	 
>1056	IfStatement	if ( file == NULL )
>1057	ElseStatement	else
>1058	CompoundStatement	 
>1059	ExpressionStatement	 
>1060	CallExpression	fclose ( file )
>1061	ArgumentList	file
>1062	Argument	file
>1063	Identifier	file
>1064	Callee	fclose
>1065	Identifier	fclose
>1066	ExpressionStatement	 
>1067	AssignmentExpr	kps = ReadKeysFastBin ( file , descriptor , & scale , & orient )
>1068	CallExpression	ReadKeysFastBin ( file , descriptor , & scale , & orient )
>1069	ArgumentList	file
>1070	Argument	& orient
>1071	UnaryOp	& orient
>1072	Identifier	orient
>1073	UnaryOperator	&
>1074	Argument	& scale
>1075	UnaryOp	& scale
>1076	Identifier	scale
>1077	UnaryOperator	&
>1078	Argument	descriptor
>1079	Identifier	descriptor
>1080	Argument	file
>1081	Identifier	file
>1082	Callee	ReadKeysFastBin
>1083	Identifier	ReadKeysFastBin
>1084	Identifier	kps
>1085	CompoundStatement	 
>1086	IfStatement	if ( gzf == NULL )
>1087	ElseStatement	else
>1088	CompoundStatement	 
>1089	ExpressionStatement	 
>1090	CallExpression	gzclose ( gzf )
>1091	ArgumentList	gzf
>1092	Argument	gzf
>1093	Identifier	gzf
>1094	Callee	gzclose
>1095	Identifier	gzclose
>1096	ExpressionStatement	 
>1097	AssignmentExpr	kps = ReadKeysFastBinGzip ( gzf , descriptor , & scale , & orient )
>1098	CallExpression	ReadKeysFastBinGzip ( gzf , descriptor , & scale , & orient )
>1099	ArgumentList	gzf
>1100	Argument	& orient
>1101	UnaryOp	& orient
>1102	Identifier	orient
>1103	UnaryOperator	&
>1104	Argument	& scale
>1105	UnaryOp	& scale
>1106	Identifier	scale
>1107	UnaryOperator	&
>1108	Argument	descriptor
>1109	Identifier	descriptor
>1110	Argument	gzf
>1111	Identifier	gzf
>1112	Callee	ReadKeysFastBinGzip
>1113	Identifier	ReadKeysFastBinGzip
>1114	Identifier	kps
>1115	CompoundStatement	 
>1116	ReturnStatement	 
>1117	Identifier	empty
>1118	ExpressionStatement	 
>1119	CallExpression	printf ( \"Could not open file
>1120	ArgumentList	\"Could not open file
>1121	Argument	filename
>1122	Identifier	filename
>1123	Argument	\"Could not open file
>1124	PrimaryExpression	\"Could not open file
>1125	Callee	printf
>1126	Identifier	printf
>1127	IdentifierDeclStatement	 
>1128	IdentifierDecl	empty
>1129	Identifier	empty
>1130	IdentifierDeclType	std 
>1131	Condition	 
>1132	EqualityExpression	gzf == NULL
>1133	Identifier	NULL
>1134	Identifier	gzf
>1135	ExpressionStatement	 
>1136	AssignmentExpr	gzf = gzopen ( buf , \"rb\" )
>1137	CallExpression	gzopen ( buf , \"rb\" )
>1138	ArgumentList	buf
>1139	Argument	\"rb\"
>1140	PrimaryExpression	\"rb\"
>1141	Argument	buf
>1142	Identifier	buf
>1143	Callee	gzopen
>1144	Identifier	gzopen
>1145	Identifier	gzf
>1146	ExpressionStatement	 
>1147	CallExpression	sprintf ( buf , \"%s.bin.gz\" , filename )
>1148	ArgumentList	buf
>1149	Argument	filename
>1150	Identifier	filename
>1151	Argument	\"%s.bin.gz\"
>1152	PrimaryExpression	\"%s.bin.gz\"
>1153	Argument	buf
>1154	Identifier	buf
>1155	Callee	sprintf
>1156	Identifier	sprintf
>1157	Condition	 
>1158	EqualityExpression	file == NULL
>1159	Identifier	NULL
>1160	Identifier	file
>1161	ExpressionStatement	 
>1162	AssignmentExpr	file = fopen ( buf , \"rb\" )
>1163	CallExpression	fopen ( buf , \"rb\" )
>1164	ArgumentList	buf
>1165	Argument	\"rb\"
>1166	PrimaryExpression	\"rb\"
>1167	Argument	buf
>1168	Identifier	buf
>1169	Callee	fopen
>1170	Identifier	fopen
>1171	Identifier	file
>1172	ExpressionStatement	 
>1173	CallExpression	sprintf ( buf , \"%s.bin\" , filename )
>1174	ArgumentList	buf
>1175	Argument	filename
>1176	Identifier	filename
>1177	Argument	\"%s.bin\"
>1178	PrimaryExpression	\"%s.bin\"
>1179	Argument	buf
>1180	Identifier	buf
>1181	Callee	sprintf
>1182	Identifier	sprintf
>1183	Condition	 
>1184	EqualityExpression	gzf == NULL
>1185	Identifier	NULL
>1186	Identifier	gzf
>1187	IdentifierDeclStatement	 
>1188	IdentifierDecl	gzf = gzopen ( buf , \"rb\" )
>1189	AssignmentExpr	gzf = gzopen ( buf , \"rb\" )
>1190	CallExpression	gzopen ( buf , \"rb\" )
>1191	ArgumentList	buf
>1192	Argument	\"rb\"
>1193	PrimaryExpression	\"rb\"
>1194	Argument	buf
>1195	Identifier	buf
>1196	Callee	gzopen
>1197	Identifier	gzopen
>1198	Identifier	gzf
>1199	Identifier	gzf
>1200	IdentifierDeclType	gzFile
>1201	ExpressionStatement	 
>1202	CallExpression	sprintf ( buf , \"%s.gz\" , filename )
>1203	ArgumentList	buf
>1204	Argument	filename
>1205	Identifier	filename
>1206	Argument	\"%s.gz\"
>1207	PrimaryExpression	\"%s.gz\"
>1208	Argument	buf
>1209	Identifier	buf
>1210	Callee	sprintf
>1211	Identifier	sprintf
>1212	IdentifierDeclStatement	 
>1213	IdentifierDecl	buf [ 1024 ]
>1214	PrimaryExpression	1024
>1215	Identifier	buf
>1216	IdentifierDeclType	char [ 1024 ]
>1217	Condition	 
>1218	UnaryOp	! file
>1219	Identifier	file
>1220	UnaryOperator	!
>1221	ExpressionStatement	 
>1222	AssignmentExpr	file = fopen ( filename , \"r\" )
>1223	CallExpression	fopen ( filename , \"r\" )
>1224	ArgumentList	filename
>1225	Argument	\"r\"
>1226	PrimaryExpression	\"r\"
>1227	Argument	filename
>1228	Identifier	filename
>1229	Callee	fopen
>1230	Identifier	fopen
>1231	Identifier	file
>1232	IdentifierDeclStatement	 
>1233	IdentifierDecl	* orient = NULL
>1234	AssignmentExpr	* orient = NULL
>1235	Identifier	NULL
>1236	Identifier	NULL
>1237	Identifier	orient
>1238	IdentifierDeclType	float *
>1239	IdentifierDecl	* scale = NULL
>1240	AssignmentExpr	* scale = NULL
>1241	Identifier	NULL
>1242	Identifier	NULL
>1243	Identifier	scale
>1244	IdentifierDeclType	float *
>1245	IdentifierDeclStatement	 
>1246	IdentifierDecl	kps
>1247	Identifier	kps
>1248	IdentifierDeclType	std 
>1249	IdentifierDeclStatement	 
>1250	IdentifierDecl	* file
>1251	Identifier	file
>1252	IdentifierDeclType	FILE *
>1291	FunctionDef	strchrn (char * str , int c , int n)
>1292	ParameterList	char * str , int c , int n
>1293	Parameter	 
>1294	Identifier	n
>1295	ParameterType	int
>1296	Parameter	 
>1297	Identifier	c
>1298	ParameterType	int
>1299	Parameter	 
>1300	Identifier	str
>1301	ParameterType	char *
>1302	ReturnType	static char *
>1303	CompoundStatement	 
>1304	ReturnStatement	 
>1305	AdditiveExpression	str - 1
>1306	PrimaryExpression	1
>1307	Identifier	str
>1308	ForStatement	for ( int i = 0 ; i < n ; i ++ )
>1309	CompoundStatement	 
>1310	IfStatement	if ( str == NULL )
>1311	ReturnStatement	 
>1312	Identifier	NULL
>1313	Condition	 
>1314	EqualityExpression	str == NULL
>1315	Identifier	NULL
>1316	Identifier	str
>1317	ExpressionStatement	 
>1318	AssignmentExpr	str = strchr ( str , c ) + 1
>1319	AdditiveExpression	strchr ( str , c ) + 1
>1320	PrimaryExpression	1
>1321	CallExpression	strchr ( str , c )
>1322	ArgumentList	str
>1323	Argument	c
>1324	Identifier	c
>1325	Argument	str
>1326	Identifier	str
>1327	Callee	strchr
>1328	Identifier	strchr
>1329	Identifier	str
>1330	IncDecOp	 
>1331	IncDec	++
>1332	Identifier	i
>1333	Condition	 
>1334	RelationalExpression	i < n
>1335	Identifier	n
>1336	Identifier	i
>1337	ForInit	 
>1338	IdentifierDeclStatement	int i = 0 ;
>1339	IdentifierDecl	i = 0
>1340	AssignmentExpr	i = 0
>1341	PrimaryExpression	0
>1342	Identifier	i
>1343	Identifier	i
>1344	IdentifierDeclType	int
>1354	FunctionDef	ReadKeys (FILE * fp , bool descriptor)
>1355	ParameterList	FILE * fp , bool descriptor
>1356	Parameter	 
>1357	Identifier	descriptor
>1358	ParameterType	bool
>1359	Parameter	 
>1360	Identifier	fp
>1361	ParameterType	FILE *
>1362	ReturnType	std 
>1363	CompoundStatement	 
>1364	ReturnStatement	 
>1365	Identifier	kps
>1366	ForStatement	for ( i = 0 ; i < num ; i ++ )
>1367	CompoundStatement	 
>1368	IfStatement	if ( descriptor )
>1369	ElseStatement	else
>1370	CompoundStatement	 
>1371	ExpressionStatement	 
>1372	CallExpression	kps . push_back ( Keypoint ( x , y ) )
>1373	ArgumentList	Keypoint ( x , y )
>1374	Argument	Keypoint ( x , y )
>1375	CallExpression	Keypoint ( x , y )
>1376	ArgumentList	x
>1377	Argument	y
>1378	Identifier	y
>1379	Argument	x
>1380	Identifier	x
>1381	Callee	Keypoint
>1382	Identifier	Keypoint
>1383	Callee	kps . push_back
>1384	MemberAccess	kps . push_back
>1385	Identifier	push_back
>1386	Identifier	kps
>1387	ExpressionStatement	 
>1388	Identifier	d
>1389	Statement	 
>1390	Statement	 
>1391	Statement	 
>1392	CompoundStatement	 
>1393	ExpressionStatement	 
>1394	CallExpression	kps . push_back ( KeypointWithDesc ( x , y , d ) )
>1395	ArgumentList	KeypointWithDesc ( x , y , d )
>1396	Argument	KeypointWithDesc ( x , y , d )
>1397	CallExpression	KeypointWithDesc ( x , y , d )
>1398	ArgumentList	x
>1399	Argument	d
>1400	Identifier	d
>1401	Argument	y
>1402	Identifier	y
>1403	Argument	x
>1404	Identifier	x
>1405	Callee	KeypointWithDesc
>1406	Identifier	KeypointWithDesc
>1407	Callee	kps . push_back
>1408	MemberAccess	kps . push_back
>1409	Identifier	push_back
>1410	Identifier	kps
>1411	Condition	 
>1412	Identifier	descriptor
>1413	ForStatement	for ( j = 0 ; j < len ; j ++ )
>1414	CompoundStatement	 
>1415	ExpressionStatement	 
>1416	AssignmentExpr	d [ j ] = ( unsigned char ) val
>1417	CastExpression	( unsigned char ) val
>1418	Identifier	val
>1419	CastTarget	unsigned char
>1420	ArrayIndexing	d [ j ]
>1421	Identifier	j
>1422	Identifier	d
>1423	IfStatement	if ( fscanf ( fp , \"%d\" , & val ) != 1 || val < 0 || val > 255 )
>1424	CompoundStatement	 
>1425	ReturnStatement	 
>1426	Identifier	kps
>1427	ExpressionStatement	 
>1428	CallExpression	printf ( \"Invalid keypoint file value.\" )
>1429	ArgumentList	\"Invalid keypoint file value.\"
>1430	Argument	\"Invalid keypoint file value.\"
>1431	PrimaryExpression	\"Invalid keypoint file value.\"
>1432	Callee	printf
>1433	Identifier	printf
>1434	Condition	 
>1435	OrExpression	fscanf ( fp , \"%d\" , & val ) != 1 || val < 0 || val > 255
>1436	OrExpression	val < 0 || val > 255
>1437	RelationalExpression	val > 255
>1438	PrimaryExpression	255
>1439	Identifier	val
>1440	RelationalExpression	val < 0
>1441	PrimaryExpression	0
>1442	Identifier	val
>1443	EqualityExpression	fscanf ( fp , \"%d\" , & val ) != 1
>1444	PrimaryExpression	1
>1445	CallExpression	fscanf ( fp , \"%d\" , & val )
>1446	ArgumentList	fp
>1447	Argument	& val
>1448	UnaryOp	& val
>1449	Identifier	val
>1450	UnaryOperator	&
>1451	Argument	\"%d\"
>1452	PrimaryExpression	\"%d\"
>1453	Argument	fp
>1454	Identifier	fp
>1455	Callee	fscanf
>1456	Identifier	fscanf
>1457	IncDecOp	 
>1458	IncDec	++
>1459	Identifier	j
>1460	Condition	 
>1461	RelationalExpression	j < len
>1462	Identifier	len
>1463	Identifier	j
>1464	ForInit	 
>1465	AssignmentExpr	j = 0
>1466	PrimaryExpression	0
>1467	Identifier	j
>1468	IfStatement	if ( fscanf ( fp , \"%f %f %f %f\" , & y , & x , & scale , & ori ) != 4 )
>1469	CompoundStatement	 
>1470	ReturnStatement	 
>1471	Identifier	kps
>1472	ExpressionStatement	 
>1473	CallExpression	printf ( \"Invalid keypoint file format.\" )
>1474	ArgumentList	\"Invalid keypoint file format.\"
>1475	Argument	\"Invalid keypoint file format.\"
>1476	PrimaryExpression	\"Invalid keypoint file format.\"
>1477	Callee	printf
>1478	Identifier	printf
>1479	Condition	 
>1480	EqualityExpression	fscanf ( fp , \"%f %f %f %f\" , & y , & x , & scale , & ori ) != 4
>1481	PrimaryExpression	4
>1482	CallExpression	fscanf ( fp , \"%f %f %f %f\" , & y , & x , & scale , & ori )
>1483	ArgumentList	fp
>1484	Argument	& ori
>1485	UnaryOp	& ori
>1486	Identifier	ori
>1487	UnaryOperator	&
>1488	Argument	& scale
>1489	UnaryOp	& scale
>1490	Identifier	scale
>1491	UnaryOperator	&
>1492	Argument	& x
>1493	UnaryOp	& x
>1494	Identifier	x
>1495	UnaryOperator	&
>1496	Argument	& y
>1497	UnaryOp	& y
>1498	Identifier	y
>1499	UnaryOperator	&
>1500	Argument	\"%f %f %f %f\"
>1501	PrimaryExpression	\"%f %f %f %f\"
>1502	Argument	fp
>1503	Identifier	fp
>1504	Callee	fscanf
>1505	Identifier	fscanf
>1506	IdentifierDeclStatement	 
>1507	IdentifierDecl	ori
>1508	Identifier	ori
>1509	IdentifierDeclType	float
>1510	IdentifierDecl	scale
>1511	Identifier	scale
>1512	IdentifierDeclType	float
>1513	IdentifierDecl	y
>1514	Identifier	y
>1515	IdentifierDeclType	float
>1516	IdentifierDecl	x
>1517	Identifier	x
>1518	IdentifierDeclType	float
>1519	IdentifierDeclStatement	 
>1520	IdentifierDecl	* d = new unsigned char [ len ]
>1521	AssignmentExpr	* d = new unsigned char [ len ]
>1522	Identifier	len
>1523	Identifier	len
>1524	Identifier	d
>1525	IdentifierDeclType	unsigned char *
>1526	IncDecOp	 
>1527	IncDec	++
>1528	Identifier	i
>1529	Condition	 
>1530	RelationalExpression	i < num
>1531	Identifier	num
>1532	Identifier	i
>1533	ForInit	 
>1534	AssignmentExpr	i = 0
>1535	PrimaryExpression	0
>1536	Identifier	i
>1537	IfStatement	if ( len != 128 )
>1538	CompoundStatement	 
>1539	ReturnStatement	 
>1540	Identifier	kps
>1541	ExpressionStatement	 
>1542	CallExpression	printf ( \"Keypoint descriptor length invalid (should be 128).\" )
>1543	ArgumentList	\"Keypoint descriptor length invalid (should be 128).\"
>1544	Argument	\"Keypoint descriptor length invalid (should be 128).\"
>1545	PrimaryExpression	\"Keypoint descriptor length invalid (should be 128).\"
>1546	Callee	printf
>1547	Identifier	printf
>1548	Condition	 
>1549	EqualityExpression	len != 128
>1550	PrimaryExpression	128
>1551	Identifier	len
>1552	ExpressionStatement	 
>1553	AssignmentExpr	num = MIN ( num , 65536 )
>1554	CallExpression	MIN ( num , 65536 )
>1555	ArgumentList	num
>1556	Argument	65536
>1557	PrimaryExpression	65536
>1558	Argument	num
>1559	Identifier	num
>1560	Callee	MIN
>1561	Identifier	MIN
>1562	Identifier	num
>1563	IfStatement	if ( fscanf ( fp , \"%d %d\" , & num , & len ) != 2 )
>1564	CompoundStatement	 
>1565	ReturnStatement	 
>1566	Identifier	kps
>1567	ExpressionStatement	 
>1568	CallExpression	printf ( \"Invalid keypoint file beginning.\" )
>1569	ArgumentList	\"Invalid keypoint file beginning.\"
>1570	Argument	\"Invalid keypoint file beginning.\"
>1571	PrimaryExpression	\"Invalid keypoint file beginning.\"
>1572	Callee	printf
>1573	Identifier	printf
>1574	Condition	 
>1575	EqualityExpression	fscanf ( fp , \"%d %d\" , & num , & len ) != 2
>1576	PrimaryExpression	2
>1577	CallExpression	fscanf ( fp , \"%d %d\" , & num , & len )
>1578	ArgumentList	fp
>1579	Argument	& len
>1580	UnaryOp	& len
>1581	Identifier	len
>1582	UnaryOperator	&
>1583	Argument	& num
>1584	UnaryOp	& num
>1585	Identifier	num
>1586	UnaryOperator	&
>1587	Argument	\"%d %d\"
>1588	PrimaryExpression	\"%d %d\"
>1589	Argument	fp
>1590	Identifier	fp
>1591	Callee	fscanf
>1592	Identifier	fscanf
>1593	IdentifierDeclStatement	 
>1594	IdentifierDecl	kps
>1595	Identifier	kps
>1596	IdentifierDeclType	std 
>1597	IdentifierDeclStatement	 
>1598	IdentifierDecl	val
>1599	Identifier	val
>1600	IdentifierDeclType	int
>1601	IdentifierDecl	len
>1602	Identifier	len
>1603	IdentifierDeclType	int
>1604	IdentifierDecl	num
>1605	Identifier	num
>1606	IdentifierDeclType	int
>1607	IdentifierDecl	j
>1608	Identifier	j
>1609	IdentifierDeclType	int
>1610	IdentifierDecl	i
>1611	Identifier	i
>1612	IdentifierDeclType	int
>1642	FunctionDef	ReadKeysFast (FILE * fp , bool descriptor , float * * scales , float * * orients)
>1643	ParameterList	FILE * fp , bool descriptor , float * * scales , float * * orients
>1644	Parameter	 
>1645	Identifier	orients
>1646	ParameterType	float * *
>1647	Parameter	 
>1648	Identifier	scales
>1649	ParameterType	float * *
>1650	Parameter	 
>1651	Identifier	descriptor
>1652	ParameterType	bool
>1653	Parameter	 
>1654	Identifier	fp
>1655	ParameterType	FILE *
>1656	ReturnType	std 
>1657	CompoundStatement	 
>1658	ReturnStatement	 
>1659	Identifier	kps
>1660	ForStatement	for ( i = 0 ; i < num ; i ++ )
>1661	CompoundStatement	 
>1662	ExpressionStatement	 
>1663	AssignmentExpr	kps [ i ] = KeypointWithDesc ( x , y , d )
>1664	CallExpression	KeypointWithDesc ( x , y , d )
>1665	ArgumentList	x
>1666	Argument	d
>1667	Identifier	d
>1668	Argument	y
>1669	Identifier	y
>1670	Argument	x
>1671	Identifier	x
>1672	Callee	KeypointWithDesc
>1673	Identifier	KeypointWithDesc
>1674	ArrayIndexing	kps [ i ]
>1675	Identifier	i
>1676	Identifier	kps
>1677	ForStatement	for ( int line = 0 ; line < 7 ; line ++ )
>1678	CompoundStatement	 
>1679	IfStatement	if ( line < 6 )
>1680	ElseStatement	else
>1681	CompoundStatement	 
>1682	ForStatement	for ( j = 0 ; j < 8 ; j ++ )
>1683	ExpressionStatement	 
>1684	AssignmentExpr	d [ start + j ] = p [ j ]
>1685	ArrayIndexing	p [ j ]
>1686	Identifier	j
>1687	Identifier	p
>1688	ArrayIndexing	d [ start + j ]
>1689	AdditiveExpression	start + j
>1690	Identifier	j
>1691	Identifier	start
>1692	Identifier	d
>1693	IncDecOp	 
>1694	IncDec	++
>1695	Identifier	j
>1696	Condition	 
>1697	RelationalExpression	j < 8
>1698	PrimaryExpression	8
>1699	Identifier	j
>1700	ForInit	 
>1701	AssignmentExpr	j = 0
>1702	PrimaryExpression	0
>1703	Identifier	j
>1704	ExpressionStatement	 
>1705	CallExpression	sscanf ( buf , \"%hu %hu %hu %hu %hu %hu %hu %hu\" , p + 0 , p + 1 , p + 2 , p + 3 , p + 4 , p + 5 , p + 6 , p + 7 )
>1706	ArgumentList	buf
>1707	Argument	p + 7
>1708	AdditiveExpression	p + 7
>1709	PrimaryExpression	7
>1710	Identifier	p
>1711	Argument	p + 6
>1712	AdditiveExpression	p + 6
>1713	PrimaryExpression	6
>1714	Identifier	p
>1715	Argument	p + 5
>1716	AdditiveExpression	p + 5
>1717	PrimaryExpression	5
>1718	Identifier	p
>1719	Argument	p + 4
>1720	AdditiveExpression	p + 4
>1721	PrimaryExpression	4
>1722	Identifier	p
>1723	Argument	p + 3
>1724	AdditiveExpression	p + 3
>1725	PrimaryExpression	3
>1726	Identifier	p
>1727	Argument	p + 2
>1728	AdditiveExpression	p + 2
>1729	PrimaryExpression	2
>1730	Identifier	p
>1731	Argument	p + 1
>1732	AdditiveExpression	p + 1
>1733	PrimaryExpression	1
>1734	Identifier	p
>1735	Argument	p + 0
>1736	AdditiveExpression	p + 0
>1737	PrimaryExpression	0
>1738	Identifier	p
>1739	Argument	\"%hu %hu %hu %hu %hu %hu %hu %hu\"
>1740	PrimaryExpression	\"%hu %hu %hu %hu %hu %hu %hu %hu\"
>1741	Argument	buf
>1742	Identifier	buf
>1743	Callee	sscanf
>1744	Identifier	sscanf
>1745	CompoundStatement	 
>1746	ExpressionStatement	 
>1747	AssignmentExpr	start += 20
>1748	PrimaryExpression	20
>1749	Identifier	start
>1750	ForStatement	for ( j = 0 ; j < 20 ; j ++ )
>1751	ExpressionStatement	 
>1752	AssignmentExpr	d [ start + j ] = p [ j ]
>1753	ArrayIndexing	p [ j ]
>1754	Identifier	j
>1755	Identifier	p
>1756	ArrayIndexing	d [ start + j ]
>1757	AdditiveExpression	start + j
>1758	Identifier	j
>1759	Identifier	start
>1760	Identifier	d
>1761	IncDecOp	 
>1762	IncDec	++
>1763	Identifier	j
>1764	Condition	 
>1765	RelationalExpression	j < 20
>1766	PrimaryExpression	20
>1767	Identifier	j
>1768	ForInit	 
>1769	AssignmentExpr	j = 0
>1770	PrimaryExpression	0
>1771	Identifier	j
>1772	ExpressionStatement	 
>1773	Statement	 
>1774	Statement	 
>1775	Statement	 
>1776	Statement	 
>1777	Statement	 
>1778	Statement	 
>1779	Statement	 
>1780	Statement	 
>1781	Statement	 
>1782	Statement	 
>1783	Statement	 
>1784	Statement	 
>1785	Statement	 
>1786	Statement	 
>1787	Statement	 
>1788	Statement	 
>1789	Statement	 
>1790	Statement	 
>1791	Statement	 
>1792	Statement	 
>1793	Statement	 
>1794	Statement	 
>1795	Statement	 
>1796	Statement	 
>1797	Statement	 
>1798	Statement	 
>1799	Statement	 
>1800	Statement	 
>1801	Statement	 
>1802	Statement	 
>1803	Statement	 
>1804	Statement	 
>1805	Statement	 
>1806	Statement	 
>1807	Statement	 
>1808	Statement	 
>1809	Statement	 
>1810	Statement	 
>1811	Statement	 
>1812	Statement	 
>1813	Statement	 
>1814	Statement	 
>1815	Statement	 
>1816	Statement	 
>1817	Statement	 
>1818	Statement	 
>1819	Statement	 
>1820	Statement	 
>1821	Statement	 
>1822	Statement	 
>1823	Statement	 
>1824	Statement	 
>1825	Statement	 
>1826	Statement	 
>1827	Statement	 
>1828	Statement	 
>1829	Statement	 
>1830	Statement	 
>1831	Statement	 
>1832	Statement	 
>1833	Statement	 
>1834	Statement	 
>1835	Statement	 
>1836	Statement	 
>1837	Statement	 
>1838	Statement	 
>1839	Statement	 
>1840	Statement	 
>1841	Statement	 
>1842	Statement	 
>1843	Statement	 
>1844	Statement	 
>1845	Statement	 
>1846	Statement	 
>1847	Statement	 
>1848	Statement	 
>1849	Statement	 
>1850	Statement	 
>1851	Statement	 
>1852	Statement	 
>1853	Statement	 
>1854	Statement	 
>1855	Statement	 
>1856	Statement	 
>1857	Statement	 
>1858	Statement	 
>1859	Statement	 
>1860	Condition	 
>1861	RelationalExpression	line < 6
>1862	PrimaryExpression	6
>1863	Identifier	line
>1864	IdentifierDeclStatement	 
>1865	IdentifierDecl	p [ 20 ]
>1866	PrimaryExpression	20
>1867	Identifier	p
>1868	IdentifierDeclType	short int [ 20 ]
>1869	IfStatement	if ( ! descriptor )
>1870	ContinueStatement	 
>1871	Condition	 
>1872	UnaryOp	! descriptor
>1873	Identifier	descriptor
>1874	UnaryOperator	!
>1875	ExpressionStatement	 
>1876	CallExpression	fgets ( buf , 1024 , fp )
>1877	ArgumentList	buf
>1878	Argument	fp
>1879	Identifier	fp
>1880	Argument	1024
>1881	PrimaryExpression	1024
>1882	Argument	buf
>1883	Identifier	buf
>1884	Callee	fgets
>1885	Identifier	fgets
>1886	IncDecOp	 
>1887	IncDec	++
>1888	Identifier	line
>1889	Condition	 
>1890	RelationalExpression	line < 7
>1891	PrimaryExpression	7
>1892	Identifier	line
>1893	ForInit	 
>1894	IdentifierDeclStatement	int line = 0 ;
>1895	IdentifierDecl	line = 0
>1896	AssignmentExpr	line = 0
>1897	PrimaryExpression	0
>1898	Identifier	line
>1899	Identifier	line
>1900	IdentifierDeclType	int
>1901	IdentifierDeclStatement	 
>1902	IdentifierDecl	start = 0
>1903	AssignmentExpr	start = 0
>1904	PrimaryExpression	0
>1905	Identifier	start
>1906	Identifier	start
>1907	IdentifierDeclType	int
>1908	IfStatement	if ( descriptor )
>1909	ExpressionStatement	 
>1910	AssignmentExpr	d = new unsigned char [ len ]
>1911	Identifier	len
>1912	Identifier	d
>1913	Condition	 
>1914	Identifier	descriptor
>1915	IdentifierDeclStatement	 
>1916	IdentifierDecl	* d = NULL
>1917	AssignmentExpr	* d = NULL
>1918	Identifier	NULL
>1919	Identifier	NULL
>1920	Identifier	d
>1921	IdentifierDeclType	unsigned char *
>1922	IdentifierDeclStatement	 
>1923	IdentifierDecl	buf [ 1024 ]
>1924	PrimaryExpression	1024
>1925	Identifier	buf
>1926	IdentifierDeclType	char [ 1024 ]
>1927	IfStatement	if ( orients != NULL )
>1928	CompoundStatement	 
>1929	ExpressionStatement	 
>1930	AssignmentExpr	( * orients ) [ i ] = ori
>1931	Identifier	ori
>1932	ArrayIndexing	( * orients ) [ i ]
>1933	Identifier	i
>1934	UnaryOp	* orients
>1935	Identifier	orients
>1936	UnaryOperator	*
>1937	Condition	 
>1938	EqualityExpression	orients != NULL
>1939	Identifier	NULL
>1940	Identifier	orients
>1941	IfStatement	if ( scales != NULL )
>1942	CompoundStatement	 
>1943	ExpressionStatement	 
>1944	AssignmentExpr	( * scales ) [ i ] = scale
>1945	Identifier	scale
>1946	ArrayIndexing	( * scales ) [ i ]
>1947	Identifier	i
>1948	UnaryOp	* scales
>1949	Identifier	scales
>1950	UnaryOperator	*
>1951	Condition	 
>1952	EqualityExpression	scales != NULL
>1953	Identifier	NULL
>1954	Identifier	scales
>1955	IfStatement	if ( fscanf ( fp , \"%f %f %f %f\n\" , & y , & x , & scale , & ori ) != 4 )
>1956	CompoundStatement	 
>1957	ReturnStatement	 
>1958	Identifier	kps
>1959	ExpressionStatement	 
>1960	CallExpression	printf ( \"Invalid keypoint file format.\" )
>1961	ArgumentList	\"Invalid keypoint file format.\"
>1962	Argument	\"Invalid keypoint file format.\"
>1963	PrimaryExpression	\"Invalid keypoint file format.\"
>1964	Callee	printf
>1965	Identifier	printf
>1966	Condition	 
>1967	EqualityExpression	fscanf ( fp , \"%f %f %f %f\n\" , & y , & x , & scale , & ori ) != 4
>1968	PrimaryExpression	4
>1969	CallExpression	fscanf ( fp , \"%f %f %f %f\n\" , & y , & x , & scale , & ori )
>1970	ArgumentList	fp
>1971	Argument	& ori
>1972	UnaryOp	& ori
>1973	Identifier	ori
>1974	UnaryOperator	&
>1975	Argument	& scale
>1976	UnaryOp	& scale
>1977	Identifier	scale
>1978	UnaryOperator	&
>1979	Argument	& x
>1980	UnaryOp	& x
>1981	Identifier	x
>1982	UnaryOperator	&
>1983	Argument	& y
>1984	UnaryOp	& y
>1985	Identifier	y
>1986	UnaryOperator	&
>1987	Argument	\"%f %f %f %f\n\"
>1988	PrimaryExpression	\"%f %f %f %f\n\"
>1989	Argument	fp
>1990	Identifier	fp
>1991	Callee	fscanf
>1992	Identifier	fscanf
>1993	IdentifierDeclStatement	 
>1994	IdentifierDecl	ori
>1995	Identifier	ori
>1996	IdentifierDeclType	float
>1997	IdentifierDecl	scale
>1998	Identifier	scale
>1999	IdentifierDeclType	float
>2000	IdentifierDecl	y
>2001	Identifier	y
>2002	IdentifierDeclType	float
>2003	IdentifierDecl	x
>2004	Identifier	x
>2005	IdentifierDeclType	float
>2006	IncDecOp	 
>2007	IncDec	++
>2008	Identifier	i
>2009	Condition	 
>2010	RelationalExpression	i < num
>2011	Identifier	num
>2012	Identifier	i
>2013	ForInit	 
>2014	AssignmentExpr	i = 0
>2015	PrimaryExpression	0
>2016	Identifier	i
>2017	IfStatement	if ( num > 0 && orients != NULL )
>2018	CompoundStatement	 
>2019	ExpressionStatement	 
>2020	AssignmentExpr	* orients = new float [ num ]
>2021	Identifier	num
>2022	UnaryOp	* orients
>2023	Identifier	orients
>2024	UnaryOperator	*
>2025	Condition	 
>2026	AndExpression	num > 0 && orients != NULL
>2027	EqualityExpression	orients != NULL
>2028	Identifier	NULL
>2029	Identifier	orients
>2030	RelationalExpression	num > 0
>2031	PrimaryExpression	0
>2032	Identifier	num
>2033	IfStatement	if ( num > 0 && scales != NULL )
>2034	CompoundStatement	 
>2035	ExpressionStatement	 
>2036	AssignmentExpr	* scales = new float [ num ]
>2037	Identifier	num
>2038	UnaryOp	* scales
>2039	Identifier	scales
>2040	UnaryOperator	*
>2041	Condition	 
>2042	AndExpression	num > 0 && scales != NULL
>2043	EqualityExpression	scales != NULL
>2044	Identifier	NULL
>2045	Identifier	scales
>2046	RelationalExpression	num > 0
>2047	PrimaryExpression	0
>2048	Identifier	num
>2049	ExpressionStatement	 
>2050	CallExpression	kps . resize ( num )
>2051	ArgumentList	num
>2052	Argument	num
>2053	Identifier	num
>2054	Callee	kps . resize
>2055	MemberAccess	kps . resize
>2056	Identifier	resize
>2057	Identifier	kps
>2058	IfStatement	if ( len != 128 )
>2059	CompoundStatement	 
>2060	ReturnStatement	 
>2061	Identifier	kps
>2062	ExpressionStatement	 
>2063	CallExpression	printf ( \"Keypoint descriptor length invalid (should be 128).\" )
>2064	ArgumentList	\"Keypoint descriptor length invalid (should be 128).\"
>2065	Argument	\"Keypoint descriptor length invalid (should be 128).\"
>2066	PrimaryExpression	\"Keypoint descriptor length invalid (should be 128).\"
>2067	Callee	printf
>2068	Identifier	printf
>2069	Condition	 
>2070	EqualityExpression	len != 128
>2071	PrimaryExpression	128
>2072	Identifier	len
>2073	ExpressionStatement	 
>2074	AssignmentExpr	num = MIN ( num , 65536 )
>2075	CallExpression	MIN ( num , 65536 )
>2076	ArgumentList	num
>2077	Argument	65536
>2078	PrimaryExpression	65536
>2079	Argument	num
>2080	Identifier	num
>2081	Callee	MIN
>2082	Identifier	MIN
>2083	Identifier	num
>2084	IfStatement	if ( fscanf ( fp , \"%d %d\" , & num , & len ) != 2 )
>2085	CompoundStatement	 
>2086	ReturnStatement	 
>2087	Identifier	kps
>2088	ExpressionStatement	 
>2089	CallExpression	printf ( \"Invalid keypoint file beginning.\" )
>2090	ArgumentList	\"Invalid keypoint file beginning.\"
>2091	Argument	\"Invalid keypoint file beginning.\"
>2092	PrimaryExpression	\"Invalid keypoint file beginning.\"
>2093	Callee	printf
>2094	Identifier	printf
>2095	Condition	 
>2096	EqualityExpression	fscanf ( fp , \"%d %d\" , & num , & len ) != 2
>2097	PrimaryExpression	2
>2098	CallExpression	fscanf ( fp , \"%d %d\" , & num , & len )
>2099	ArgumentList	fp
>2100	Argument	& len
>2101	UnaryOp	& len
>2102	Identifier	len
>2103	UnaryOperator	&
>2104	Argument	& num
>2105	UnaryOp	& num
>2106	Identifier	num
>2107	UnaryOperator	&
>2108	Argument	\"%d %d\"
>2109	PrimaryExpression	\"%d %d\"
>2110	Argument	fp
>2111	Identifier	fp
>2112	Callee	fscanf
>2113	Identifier	fscanf
>2114	IdentifierDeclStatement	 
>2115	IdentifierDecl	kps
>2116	Identifier	kps
>2117	IdentifierDeclType	std 
>2118	IdentifierDeclStatement	 
>2119	IdentifierDecl	len
>2120	Identifier	len
>2121	IdentifierDeclType	int
>2122	IdentifierDecl	num
>2123	Identifier	num
>2124	IdentifierDeclType	int
>2125	IdentifierDecl	j
>2126	Identifier	j
>2127	IdentifierDeclType	int
>2128	IdentifierDecl	i
>2129	Identifier	i
>2130	IdentifierDeclType	int
>2172	FunctionDef	ReadKeysFastGzip (gzFile fp , bool descriptor , float * * scales , float * * orients)
>2173	ParameterList	gzFile fp , bool descriptor , float * * scales , float * * orients
>2174	Parameter	 
>2175	Identifier	orients
>2176	ParameterType	float * *
>2177	Parameter	 
>2178	Identifier	scales
>2179	ParameterType	float * *
>2180	Parameter	 
>2181	Identifier	descriptor
>2182	ParameterType	bool
>2183	Parameter	 
>2184	Identifier	fp
>2185	ParameterType	gzFile
>2186	ReturnType	std 
>2187	CompoundStatement	 
>2188	ReturnStatement	 
>2189	Identifier	kps
>2190	ForStatement	for ( i = 0 ; i < num ; i ++ )
>2191	CompoundStatement	 
>2192	ExpressionStatement	 
>2193	AssignmentExpr	kps [ i ] = KeypointWithDesc ( x , y , d )
>2194	CallExpression	KeypointWithDesc ( x , y , d )
>2195	ArgumentList	x
>2196	Argument	d
>2197	Identifier	d
>2198	Argument	y
>2199	Identifier	y
>2200	Argument	x
>2201	Identifier	x
>2202	Callee	KeypointWithDesc
>2203	Identifier	KeypointWithDesc
>2204	ArrayIndexing	kps [ i ]
>2205	Identifier	i
>2206	Identifier	kps
>2207	ForStatement	for ( int line = 0 ; line < 7 ; line ++ )
>2208	CompoundStatement	 
>2209	IfStatement	if ( line < 6 )
>2210	ElseStatement	else
>2211	CompoundStatement	 
>2212	ForStatement	for ( j = 0 ; j < 8 ; j ++ )
>2213	ExpressionStatement	 
>2214	AssignmentExpr	d [ start + j ] = p [ j ]
>2215	ArrayIndexing	p [ j ]
>2216	Identifier	j
>2217	Identifier	p
>2218	ArrayIndexing	d [ start + j ]
>2219	AdditiveExpression	start + j
>2220	Identifier	j
>2221	Identifier	start
>2222	Identifier	d
>2223	IncDecOp	 
>2224	IncDec	++
>2225	Identifier	j
>2226	Condition	 
>2227	RelationalExpression	j < 8
>2228	PrimaryExpression	8
>2229	Identifier	j
>2230	ForInit	 
>2231	AssignmentExpr	j = 0
>2232	PrimaryExpression	0
>2233	Identifier	j
>2234	ExpressionStatement	 
>2235	CallExpression	sscanf ( buf , \"%hu %hu %hu %hu %hu %hu %hu %hu\" , p + 0 , p + 1 , p + 2 , p + 3 , p + 4 , p + 5 , p + 6 , p + 7 )
>2236	ArgumentList	buf
>2237	Argument	p + 7
>2238	AdditiveExpression	p + 7
>2239	PrimaryExpression	7
>2240	Identifier	p
>2241	Argument	p + 6
>2242	AdditiveExpression	p + 6
>2243	PrimaryExpression	6
>2244	Identifier	p
>2245	Argument	p + 5
>2246	AdditiveExpression	p + 5
>2247	PrimaryExpression	5
>2248	Identifier	p
>2249	Argument	p + 4
>2250	AdditiveExpression	p + 4
>2251	PrimaryExpression	4
>2252	Identifier	p
>2253	Argument	p + 3
>2254	AdditiveExpression	p + 3
>2255	PrimaryExpression	3
>2256	Identifier	p
>2257	Argument	p + 2
>2258	AdditiveExpression	p + 2
>2259	PrimaryExpression	2
>2260	Identifier	p
>2261	Argument	p + 1
>2262	AdditiveExpression	p + 1
>2263	PrimaryExpression	1
>2264	Identifier	p
>2265	Argument	p + 0
>2266	AdditiveExpression	p + 0
>2267	PrimaryExpression	0
>2268	Identifier	p
>2269	Argument	\"%hu %hu %hu %hu %hu %hu %hu %hu\"
>2270	PrimaryExpression	\"%hu %hu %hu %hu %hu %hu %hu %hu\"
>2271	Argument	buf
>2272	Identifier	buf
>2273	Callee	sscanf
>2274	Identifier	sscanf
>2275	CompoundStatement	 
>2276	ExpressionStatement	 
>2277	AssignmentExpr	start += 20
>2278	PrimaryExpression	20
>2279	Identifier	start
>2280	ForStatement	for ( j = 0 ; j < 20 ; j ++ )
>2281	ExpressionStatement	 
>2282	AssignmentExpr	d [ start + j ] = p [ j ]
>2283	ArrayIndexing	p [ j ]
>2284	Identifier	j
>2285	Identifier	p
>2286	ArrayIndexing	d [ start + j ]
>2287	AdditiveExpression	start + j
>2288	Identifier	j
>2289	Identifier	start
>2290	Identifier	d
>2291	IncDecOp	 
>2292	IncDec	++
>2293	Identifier	j
>2294	Condition	 
>2295	RelationalExpression	j < 20
>2296	PrimaryExpression	20
>2297	Identifier	j
>2298	ForInit	 
>2299	AssignmentExpr	j = 0
>2300	PrimaryExpression	0
>2301	Identifier	j
>2302	ExpressionStatement	 
>2303	Statement	 
>2304	Statement	 
>2305	Statement	 
>2306	Statement	 
>2307	Statement	 
>2308	Statement	 
>2309	Statement	 
>2310	Statement	 
>2311	Statement	 
>2312	Statement	 
>2313	Statement	 
>2314	Statement	 
>2315	Statement	 
>2316	Statement	 
>2317	Statement	 
>2318	Statement	 
>2319	Statement	 
>2320	Statement	 
>2321	Statement	 
>2322	Statement	 
>2323	Statement	 
>2324	Statement	 
>2325	Statement	 
>2326	Statement	 
>2327	Statement	 
>2328	Statement	 
>2329	Statement	 
>2330	Statement	 
>2331	Statement	 
>2332	Statement	 
>2333	Statement	 
>2334	Statement	 
>2335	Statement	 
>2336	Statement	 
>2337	Statement	 
>2338	Statement	 
>2339	Statement	 
>2340	Statement	 
>2341	Statement	 
>2342	Statement	 
>2343	Statement	 
>2344	Statement	 
>2345	Statement	 
>2346	Statement	 
>2347	Statement	 
>2348	Statement	 
>2349	Statement	 
>2350	Statement	 
>2351	Statement	 
>2352	Statement	 
>2353	Statement	 
>2354	Statement	 
>2355	Statement	 
>2356	Statement	 
>2357	Statement	 
>2358	Statement	 
>2359	Statement	 
>2360	Statement	 
>2361	Statement	 
>2362	Statement	 
>2363	Statement	 
>2364	Statement	 
>2365	Statement	 
>2366	Statement	 
>2367	Statement	 
>2368	Statement	 
>2369	Statement	 
>2370	Statement	 
>2371	Statement	 
>2372	Statement	 
>2373	Statement	 
>2374	Statement	 
>2375	Statement	 
>2376	Statement	 
>2377	Statement	 
>2378	Statement	 
>2379	Statement	 
>2380	Statement	 
>2381	Statement	 
>2382	Statement	 
>2383	Statement	 
>2384	Statement	 
>2385	Statement	 
>2386	Statement	 
>2387	Statement	 
>2388	Statement	 
>2389	Statement	 
>2390	Condition	 
>2391	RelationalExpression	line < 6
>2392	PrimaryExpression	6
>2393	Identifier	line
>2394	IdentifierDeclStatement	 
>2395	IdentifierDecl	p [ 20 ]
>2396	PrimaryExpression	20
>2397	Identifier	p
>2398	IdentifierDeclType	short int [ 20 ]
>2399	IfStatement	if ( ! descriptor )
>2400	ContinueStatement	 
>2401	Condition	 
>2402	UnaryOp	! descriptor
>2403	Identifier	descriptor
>2404	UnaryOperator	!
>2405	ExpressionStatement	 
>2406	CallExpression	gzgets ( fp , buf , 1024 )
>2407	ArgumentList	fp
>2408	Argument	1024
>2409	PrimaryExpression	1024
>2410	Argument	buf
>2411	Identifier	buf
>2412	Argument	fp
>2413	Identifier	fp
>2414	Callee	gzgets
>2415	Identifier	gzgets
>2416	IncDecOp	 
>2417	IncDec	++
>2418	Identifier	line
>2419	Condition	 
>2420	RelationalExpression	line < 7
>2421	PrimaryExpression	7
>2422	Identifier	line
>2423	ForInit	 
>2424	IdentifierDeclStatement	int line = 0 ;
>2425	IdentifierDecl	line = 0
>2426	AssignmentExpr	line = 0
>2427	PrimaryExpression	0
>2428	Identifier	line
>2429	Identifier	line
>2430	IdentifierDeclType	int
>2431	IdentifierDeclStatement	 
>2432	IdentifierDecl	start = 0
>2433	AssignmentExpr	start = 0
>2434	PrimaryExpression	0
>2435	Identifier	start
>2436	Identifier	start
>2437	IdentifierDeclType	int
>2438	IfStatement	if ( descriptor )
>2439	ExpressionStatement	 
>2440	AssignmentExpr	d = new unsigned char [ len ]
>2441	Identifier	len
>2442	Identifier	d
>2443	Condition	 
>2444	Identifier	descriptor
>2445	IdentifierDeclStatement	 
>2446	IdentifierDecl	* d = NULL
>2447	AssignmentExpr	* d = NULL
>2448	Identifier	NULL
>2449	Identifier	NULL
>2450	Identifier	d
>2451	IdentifierDeclType	unsigned char *
>2452	IfStatement	if ( orients != NULL )
>2453	CompoundStatement	 
>2454	ExpressionStatement	 
>2455	AssignmentExpr	( * orients ) [ i ] = ori
>2456	Identifier	ori
>2457	ArrayIndexing	( * orients ) [ i ]
>2458	Identifier	i
>2459	UnaryOp	* orients
>2460	Identifier	orients
>2461	UnaryOperator	*
>2462	Condition	 
>2463	EqualityExpression	orients != NULL
>2464	Identifier	NULL
>2465	Identifier	orients
>2466	IfStatement	if ( scales != NULL )
>2467	CompoundStatement	 
>2468	ExpressionStatement	 
>2469	AssignmentExpr	( * scales ) [ i ] = scale
>2470	Identifier	scale
>2471	ArrayIndexing	( * scales ) [ i ]
>2472	Identifier	i
>2473	UnaryOp	* scales
>2474	Identifier	scales
>2475	UnaryOperator	*
>2476	Condition	 
>2477	EqualityExpression	scales != NULL
>2478	Identifier	NULL
>2479	Identifier	scales
>2480	IfStatement	if ( sscanf ( buf , \"%f %f %f %f\n\" , & y , & x , & scale , & ori ) != 4 )
>2481	CompoundStatement	 
>2482	ReturnStatement	 
>2483	Identifier	kps
>2484	ExpressionStatement	 
>2485	CallExpression	printf ( \"Invalid keypoint file format.\" )
>2486	ArgumentList	\"Invalid keypoint file format.\"
>2487	Argument	\"Invalid keypoint file format.\"
>2488	PrimaryExpression	\"Invalid keypoint file format.\"
>2489	Callee	printf
>2490	Identifier	printf
>2491	Condition	 
>2492	EqualityExpression	sscanf ( buf , \"%f %f %f %f\n\" , & y , & x , & scale , & ori ) != 4
>2493	PrimaryExpression	4
>2494	CallExpression	sscanf ( buf , \"%f %f %f %f\n\" , & y , & x , & scale , & ori )
>2495	ArgumentList	buf
>2496	Argument	& ori
>2497	UnaryOp	& ori
>2498	Identifier	ori
>2499	UnaryOperator	&
>2500	Argument	& scale
>2501	UnaryOp	& scale
>2502	Identifier	scale
>2503	UnaryOperator	&
>2504	Argument	& x
>2505	UnaryOp	& x
>2506	Identifier	x
>2507	UnaryOperator	&
>2508	Argument	& y
>2509	UnaryOp	& y
>2510	Identifier	y
>2511	UnaryOperator	&
>2512	Argument	\"%f %f %f %f\n\"
>2513	PrimaryExpression	\"%f %f %f %f\n\"
>2514	Argument	buf
>2515	Identifier	buf
>2516	Callee	sscanf
>2517	Identifier	sscanf
>2518	ExpressionStatement	 
>2519	CallExpression	gzgets ( fp , buf , 1024 )
>2520	ArgumentList	fp
>2521	Argument	1024
>2522	PrimaryExpression	1024
>2523	Argument	buf
>2524	Identifier	buf
>2525	Argument	fp
>2526	Identifier	fp
>2527	Callee	gzgets
>2528	Identifier	gzgets
>2529	IdentifierDeclStatement	 
>2530	IdentifierDecl	buf [ 1024 ]
>2531	PrimaryExpression	1024
>2532	Identifier	buf
>2533	IdentifierDeclType	char [ 1024 ]
>2534	IdentifierDeclStatement	 
>2535	IdentifierDecl	ori
>2536	Identifier	ori
>2537	IdentifierDeclType	float
>2538	IdentifierDecl	scale
>2539	Identifier	scale
>2540	IdentifierDeclType	float
>2541	IdentifierDecl	y
>2542	Identifier	y
>2543	IdentifierDeclType	float
>2544	IdentifierDecl	x
>2545	Identifier	x
>2546	IdentifierDeclType	float
>2547	IncDecOp	 
>2548	IncDec	++
>2549	Identifier	i
>2550	Condition	 
>2551	RelationalExpression	i < num
>2552	Identifier	num
>2553	Identifier	i
>2554	ForInit	 
>2555	AssignmentExpr	i = 0
>2556	PrimaryExpression	0
>2557	Identifier	i
>2558	IfStatement	if ( num > 0 && orients != NULL )
>2559	CompoundStatement	 
>2560	ExpressionStatement	 
>2561	AssignmentExpr	* orients = new float [ num ]
>2562	Identifier	num
>2563	UnaryOp	* orients
>2564	Identifier	orients
>2565	UnaryOperator	*
>2566	Condition	 
>2567	AndExpression	num > 0 && orients != NULL
>2568	EqualityExpression	orients != NULL
>2569	Identifier	NULL
>2570	Identifier	orients
>2571	RelationalExpression	num > 0
>2572	PrimaryExpression	0
>2573	Identifier	num
>2574	IfStatement	if ( num > 0 && scales != NULL )
>2575	CompoundStatement	 
>2576	ExpressionStatement	 
>2577	AssignmentExpr	* scales = new float [ num ]
>2578	Identifier	num
>2579	UnaryOp	* scales
>2580	Identifier	scales
>2581	UnaryOperator	*
>2582	Condition	 
>2583	AndExpression	num > 0 && scales != NULL
>2584	EqualityExpression	scales != NULL
>2585	Identifier	NULL
>2586	Identifier	scales
>2587	RelationalExpression	num > 0
>2588	PrimaryExpression	0
>2589	Identifier	num
>2590	ExpressionStatement	 
>2591	CallExpression	kps . resize ( num )
>2592	ArgumentList	num
>2593	Argument	num
>2594	Identifier	num
>2595	Callee	kps . resize
>2596	MemberAccess	kps . resize
>2597	Identifier	resize
>2598	Identifier	kps
>2599	IfStatement	if ( len != 128 )
>2600	CompoundStatement	 
>2601	ReturnStatement	 
>2602	Identifier	kps
>2603	ExpressionStatement	 
>2604	CallExpression	printf ( \"Keypoint descriptor length invalid (should be 128).\" )
>2605	ArgumentList	\"Keypoint descriptor length invalid (should be 128).\"
>2606	Argument	\"Keypoint descriptor length invalid (should be 128).\"
>2607	PrimaryExpression	\"Keypoint descriptor length invalid (should be 128).\"
>2608	Callee	printf
>2609	Identifier	printf
>2610	Condition	 
>2611	EqualityExpression	len != 128
>2612	PrimaryExpression	128
>2613	Identifier	len
>2614	ExpressionStatement	 
>2615	AssignmentExpr	num = MIN ( num , 65536 )
>2616	CallExpression	MIN ( num , 65536 )
>2617	ArgumentList	num
>2618	Argument	65536
>2619	PrimaryExpression	65536
>2620	Argument	num
>2621	Identifier	num
>2622	Callee	MIN
>2623	Identifier	MIN
>2624	Identifier	num
>2625	IfStatement	if ( sscanf ( header , \"%d %d\" , & num , & len ) != 2 )
>2626	CompoundStatement	 
>2627	ReturnStatement	 
>2628	Identifier	kps
>2629	ExpressionStatement	 
>2630	CallExpression	printf ( \"Invalid keypoint file.\n\" )
>2631	ArgumentList	\"Invalid keypoint file.\n\"
>2632	Argument	\"Invalid keypoint file.\n\"
>2633	PrimaryExpression	\"Invalid keypoint file.\n\"
>2634	Callee	printf
>2635	Identifier	printf
>2636	Condition	 
>2637	EqualityExpression	sscanf ( header , \"%d %d\" , & num , & len ) != 2
>2638	PrimaryExpression	2
>2639	CallExpression	sscanf ( header , \"%d %d\" , & num , & len )
>2640	ArgumentList	header
>2641	Argument	& len
>2642	UnaryOp	& len
>2643	Identifier	len
>2644	UnaryOperator	&
>2645	Argument	& num
>2646	UnaryOp	& num
>2647	Identifier	num
>2648	UnaryOperator	&
>2649	Argument	\"%d %d\"
>2650	PrimaryExpression	\"%d %d\"
>2651	Argument	header
>2652	Identifier	header
>2653	Callee	sscanf
>2654	Identifier	sscanf
>2655	ExpressionStatement	 
>2656	CallExpression	gzgets ( fp , header , 256 )
>2657	ArgumentList	fp
>2658	Argument	256
>2659	PrimaryExpression	256
>2660	Argument	header
>2661	Identifier	header
>2662	Argument	fp
>2663	Identifier	fp
>2664	Callee	gzgets
>2665	Identifier	gzgets
>2666	IdentifierDeclStatement	 
>2667	IdentifierDecl	header [ 256 ]
>2668	PrimaryExpression	256
>2669	Identifier	header
>2670	IdentifierDeclType	char [ 256 ]
>2671	IdentifierDeclStatement	 
>2672	IdentifierDecl	kps
>2673	Identifier	kps
>2674	IdentifierDeclType	std 
>2675	IdentifierDeclStatement	 
>2676	IdentifierDecl	len
>2677	Identifier	len
>2678	IdentifierDeclType	int
>2679	IdentifierDecl	num
>2680	Identifier	num
>2681	IdentifierDeclType	int
>2682	IdentifierDecl	j
>2683	Identifier	j
>2684	IdentifierDeclType	int
>2685	IdentifierDecl	i
>2686	Identifier	i
>2687	IdentifierDeclType	int
>2730	FunctionDef	ReadKeysFastBin (FILE * fp , bool descriptor , float * * scales , float * * orients)
>2731	ParameterList	FILE * fp , bool descriptor , float * * scales , float * * orients
>2732	Parameter	 
>2733	Identifier	orients
>2734	ParameterType	float * *
>2735	Parameter	 
>2736	Identifier	scales
>2737	ParameterType	float * *
>2738	Parameter	 
>2739	Identifier	descriptor
>2740	ParameterType	bool
>2741	Parameter	 
>2742	Identifier	fp
>2743	ParameterType	FILE *
>2744	ReturnType	std 
>2745	CompoundStatement	 
>2746	ReturnStatement	 
>2747	Identifier	keys
>2748	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>2749	CompoundStatement	 
>2750	ExpressionStatement	 
>2751	AssignmentExpr	keys [ i ] . m_d = d + 128 * i
>2752	AdditiveExpression	d + 128 * i
>2753	MultiplicativeExpression	128 * i
>2754	Identifier	i
>2755	PrimaryExpression	128
>2756	Identifier	d
>2757	MemberAccess	keys [ i ] . m_d
>2758	Identifier	m_d
>2759	ArrayIndexing	keys [ i ]
>2760	Identifier	i
>2761	Identifier	keys
>2762	IncDecOp	 
>2763	IncDec	++
>2764	Identifier	i
>2765	Condition	 
>2766	RelationalExpression	i < num_keys
>2767	Identifier	num_keys
>2768	Identifier	i
>2769	ForInit	 
>2770	IdentifierDeclStatement	int i = 0 ;
>2771	IdentifierDecl	i = 0
>2772	AssignmentExpr	i = 0
>2773	PrimaryExpression	0
>2774	Identifier	i
>2775	Identifier	i
>2776	IdentifierDeclType	int
>2777	ExpressionStatement	 
>2778	CallExpression	fread ( d , sizeof ( unsigned char ) , 128 * num_keys , fp )
>2779	ArgumentList	d
>2780	Argument	fp
>2781	Identifier	fp
>2782	Argument	128 * num_keys
>2783	MultiplicativeExpression	128 * num_keys
>2784	Identifier	num_keys
>2785	PrimaryExpression	128
>2786	Argument	sizeof ( unsigned char )
>2787	SizeofExpr	sizeof ( unsigned char )
>2788	SizeofOperand	unsigned char
>2789	Sizeof	sizeof
>2790	Argument	d
>2791	Identifier	d
>2792	Callee	fread
>2793	Identifier	fread
>2794	ExpressionStatement	 
>2795	AssignmentExpr	d = new unsigned char [ 128 * num_keys ]
>2796	MultiplicativeExpression	128 * num_keys
>2797	Identifier	num_keys
>2798	PrimaryExpression	128
>2799	Identifier	d
>2800	IfStatement	if ( ! descriptor )
>2801	ReturnStatement	 
>2802	Identifier	keys
>2803	Condition	 
>2804	UnaryOp	! descriptor
>2805	Identifier	descriptor
>2806	UnaryOperator	!
>2807	ExpressionStatement	 
>2808	Identifier	info
>2809	Statement	 
>2810	Statement	 
>2811	Statement	 
>2812	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>2813	CompoundStatement	 
>2814	IfStatement	if ( orients != NULL )
>2815	ExpressionStatement	 
>2816	AssignmentExpr	( * orients ) [ i ] = info [ i ] . orient
>2817	MemberAccess	info [ i ] . orient
>2818	Identifier	orient
>2819	ArrayIndexing	info [ i ]
>2820	Identifier	i
>2821	Identifier	info
>2822	ArrayIndexing	( * orients ) [ i ]
>2823	Identifier	i
>2824	UnaryOp	* orients
>2825	Identifier	orients
>2826	UnaryOperator	*
>2827	Condition	 
>2828	EqualityExpression	orients != NULL
>2829	Identifier	NULL
>2830	Identifier	orients
>2831	IfStatement	if ( scales != NULL )
>2832	ExpressionStatement	 
>2833	AssignmentExpr	( * scales ) [ i ] = info [ i ] . scale
>2834	MemberAccess	info [ i ] . scale
>2835	Identifier	scale
>2836	ArrayIndexing	info [ i ]
>2837	Identifier	i
>2838	Identifier	info
>2839	ArrayIndexing	( * scales ) [ i ]
>2840	Identifier	i
>2841	UnaryOp	* scales
>2842	Identifier	scales
>2843	UnaryOperator	*
>2844	Condition	 
>2845	EqualityExpression	scales != NULL
>2846	Identifier	NULL
>2847	Identifier	scales
>2848	ExpressionStatement	 
>2849	AssignmentExpr	keys [ i ] . m_y = info [ i ] . y
>2850	MemberAccess	info [ i ] . y
>2851	Identifier	y
>2852	ArrayIndexing	info [ i ]
>2853	Identifier	i
>2854	Identifier	info
>2855	MemberAccess	keys [ i ] . m_y
>2856	Identifier	m_y
>2857	ArrayIndexing	keys [ i ]
>2858	Identifier	i
>2859	Identifier	keys
>2860	ExpressionStatement	 
>2861	AssignmentExpr	keys [ i ] . m_x = info [ i ] . x
>2862	MemberAccess	info [ i ] . x
>2863	Identifier	x
>2864	ArrayIndexing	info [ i ]
>2865	Identifier	i
>2866	Identifier	info
>2867	MemberAccess	keys [ i ] . m_x
>2868	Identifier	m_x
>2869	ArrayIndexing	keys [ i ]
>2870	Identifier	i
>2871	Identifier	keys
>2872	IncDecOp	 
>2873	IncDec	++
>2874	Identifier	i
>2875	Condition	 
>2876	RelationalExpression	i < num_keys
>2877	Identifier	num_keys
>2878	Identifier	i
>2879	ForInit	 
>2880	IdentifierDeclStatement	int i = 0 ;
>2881	IdentifierDecl	i = 0
>2882	AssignmentExpr	i = 0
>2883	PrimaryExpression	0
>2884	Identifier	i
>2885	Identifier	i
>2886	IdentifierDeclType	int
>2887	IfStatement	if ( orients != NULL )
>2888	ExpressionStatement	 
>2889	AssignmentExpr	* orients = new float [ num_keys ]
>2890	Identifier	num_keys
>2891	UnaryOp	* orients
>2892	Identifier	orients
>2893	UnaryOperator	*
>2894	Condition	 
>2895	EqualityExpression	orients != NULL
>2896	Identifier	NULL
>2897	Identifier	orients
>2898	IfStatement	if ( scales != NULL )
>2899	ExpressionStatement	 
>2900	AssignmentExpr	* scales = new float [ num_keys ]
>2901	Identifier	num_keys
>2902	UnaryOp	* scales
>2903	Identifier	scales
>2904	UnaryOperator	*
>2905	Condition	 
>2906	EqualityExpression	scales != NULL
>2907	Identifier	NULL
>2908	Identifier	scales
>2909	ExpressionStatement	 
>2910	CallExpression	fread ( info , sizeof ( keypt_t ) , num_keys , fp )
>2911	ArgumentList	info
>2912	Argument	fp
>2913	Identifier	fp
>2914	Argument	num_keys
>2915	Identifier	num_keys
>2916	Argument	sizeof ( keypt_t )
>2917	SizeofExpr	sizeof ( keypt_t )
>2918	SizeofOperand	keypt_t
>2919	Sizeof	sizeof
>2920	Argument	info
>2921	Identifier	info
>2922	Callee	fread
>2923	Identifier	fread
>2924	ExpressionStatement	 
>2925	AssignmentExpr	info = new keypt_t [ num_keys ]
>2926	Identifier	num_keys
>2927	Identifier	info
>2928	IdentifierDeclStatement	 
>2929	IdentifierDecl	* d
>2930	Identifier	d
>2931	IdentifierDeclType	unsigned char *
>2932	IdentifierDeclStatement	 
>2933	IdentifierDecl	* info
>2934	Identifier	info
>2935	IdentifierDeclType	keypt_t *
>2936	ExpressionStatement	 
>2937	CallExpression	keys . resize ( num_keys )
>2938	ArgumentList	num_keys
>2939	Argument	num_keys
>2940	Identifier	num_keys
>2941	Callee	keys . resize
>2942	MemberAccess	keys . resize
>2943	Identifier	resize
>2944	Identifier	keys
>2945	IdentifierDeclStatement	 
>2946	IdentifierDecl	keys
>2947	Identifier	keys
>2948	IdentifierDeclType	std 
>2949	ExpressionStatement	 
>2950	CallExpression	fread ( & num_keys , sizeof ( int ) , 1 , fp )
>2951	ArgumentList	& num_keys
>2952	Argument	fp
>2953	Identifier	fp
>2954	Argument	1
>2955	PrimaryExpression	1
>2956	Argument	sizeof ( int )
>2957	SizeofExpr	sizeof ( int )
>2958	SizeofOperand	int
>2959	Sizeof	sizeof
>2960	Argument	& num_keys
>2961	UnaryOp	& num_keys
>2962	Identifier	num_keys
>2963	UnaryOperator	&
>2964	Callee	fread
>2965	Identifier	fread
>2966	IdentifierDeclStatement	 
>2967	IdentifierDecl	num_keys
>2968	Identifier	num_keys
>2969	IdentifierDeclType	int
>2998	FunctionDef	ReadKeysFastBinGzip (gzFile fp , bool descriptor , float * * scales , float * * orients)
>2999	ParameterList	gzFile fp , bool descriptor , float * * scales , float * * orients
>3000	Parameter	 
>3001	Identifier	orients
>3002	ParameterType	float * *
>3003	Parameter	 
>3004	Identifier	scales
>3005	ParameterType	float * *
>3006	Parameter	 
>3007	Identifier	descriptor
>3008	ParameterType	bool
>3009	Parameter	 
>3010	Identifier	fp
>3011	ParameterType	gzFile
>3012	ReturnType	std 
>3013	CompoundStatement	 
>3014	ReturnStatement	 
>3015	Identifier	keys
>3016	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>3017	CompoundStatement	 
>3018	ExpressionStatement	 
>3019	AssignmentExpr	keys [ i ] . m_d = d + 128 * i
>3020	AdditiveExpression	d + 128 * i
>3021	MultiplicativeExpression	128 * i
>3022	Identifier	i
>3023	PrimaryExpression	128
>3024	Identifier	d
>3025	MemberAccess	keys [ i ] . m_d
>3026	Identifier	m_d
>3027	ArrayIndexing	keys [ i ]
>3028	Identifier	i
>3029	Identifier	keys
>3030	IncDecOp	 
>3031	IncDec	++
>3032	Identifier	i
>3033	Condition	 
>3034	RelationalExpression	i < num_keys
>3035	Identifier	num_keys
>3036	Identifier	i
>3037	ForInit	 
>3038	IdentifierDeclStatement	int i = 0 ;
>3039	IdentifierDecl	i = 0
>3040	AssignmentExpr	i = 0
>3041	PrimaryExpression	0
>3042	Identifier	i
>3043	Identifier	i
>3044	IdentifierDeclType	int
>3045	ExpressionStatement	 
>3046	CallExpression	gzread ( fp , d , sizeof ( unsigned char ) * 128 * num_keys )
>3047	ArgumentList	fp
>3048	Argument	sizeof ( unsigned char ) * 128 * num_keys
>3049	MultiplicativeExpression	sizeof ( unsigned char ) * 128 * num_keys
>3050	MultiplicativeExpression	128 * num_keys
>3051	Identifier	num_keys
>3052	PrimaryExpression	128
>3053	SizeofExpr	sizeof ( unsigned char )
>3054	SizeofOperand	unsigned char
>3055	Sizeof	sizeof
>3056	Argument	d
>3057	Identifier	d
>3058	Argument	fp
>3059	Identifier	fp
>3060	Callee	gzread
>3061	Identifier	gzread
>3062	ExpressionStatement	 
>3063	AssignmentExpr	d = new unsigned char [ 128 * num_keys ]
>3064	MultiplicativeExpression	128 * num_keys
>3065	Identifier	num_keys
>3066	PrimaryExpression	128
>3067	Identifier	d
>3068	IfStatement	if ( ! descriptor )
>3069	ReturnStatement	 
>3070	Identifier	keys
>3071	Condition	 
>3072	UnaryOp	! descriptor
>3073	Identifier	descriptor
>3074	UnaryOperator	!
>3075	ExpressionStatement	 
>3076	Identifier	info
>3077	Statement	 
>3078	Statement	 
>3079	Statement	 
>3080	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>3081	CompoundStatement	 
>3082	IfStatement	if ( orients != NULL )
>3083	ExpressionStatement	 
>3084	AssignmentExpr	( * orients ) [ i ] = info [ i ] . orient
>3085	MemberAccess	info [ i ] . orient
>3086	Identifier	orient
>3087	ArrayIndexing	info [ i ]
>3088	Identifier	i
>3089	Identifier	info
>3090	ArrayIndexing	( * orients ) [ i ]
>3091	Identifier	i
>3092	UnaryOp	* orients
>3093	Identifier	orients
>3094	UnaryOperator	*
>3095	Condition	 
>3096	EqualityExpression	orients != NULL
>3097	Identifier	NULL
>3098	Identifier	orients
>3099	IfStatement	if ( scales != NULL )
>3100	ExpressionStatement	 
>3101	AssignmentExpr	( * scales ) [ i ] = info [ i ] . scale
>3102	MemberAccess	info [ i ] . scale
>3103	Identifier	scale
>3104	ArrayIndexing	info [ i ]
>3105	Identifier	i
>3106	Identifier	info
>3107	ArrayIndexing	( * scales ) [ i ]
>3108	Identifier	i
>3109	UnaryOp	* scales
>3110	Identifier	scales
>3111	UnaryOperator	*
>3112	Condition	 
>3113	EqualityExpression	scales != NULL
>3114	Identifier	NULL
>3115	Identifier	scales
>3116	ExpressionStatement	 
>3117	AssignmentExpr	keys [ i ] . m_y = info [ i ] . y
>3118	MemberAccess	info [ i ] . y
>3119	Identifier	y
>3120	ArrayIndexing	info [ i ]
>3121	Identifier	i
>3122	Identifier	info
>3123	MemberAccess	keys [ i ] . m_y
>3124	Identifier	m_y
>3125	ArrayIndexing	keys [ i ]
>3126	Identifier	i
>3127	Identifier	keys
>3128	ExpressionStatement	 
>3129	AssignmentExpr	keys [ i ] . m_x = info [ i ] . x
>3130	MemberAccess	info [ i ] . x
>3131	Identifier	x
>3132	ArrayIndexing	info [ i ]
>3133	Identifier	i
>3134	Identifier	info
>3135	MemberAccess	keys [ i ] . m_x
>3136	Identifier	m_x
>3137	ArrayIndexing	keys [ i ]
>3138	Identifier	i
>3139	Identifier	keys
>3140	IncDecOp	 
>3141	IncDec	++
>3142	Identifier	i
>3143	Condition	 
>3144	RelationalExpression	i < num_keys
>3145	Identifier	num_keys
>3146	Identifier	i
>3147	ForInit	 
>3148	IdentifierDeclStatement	int i = 0 ;
>3149	IdentifierDecl	i = 0
>3150	AssignmentExpr	i = 0
>3151	PrimaryExpression	0
>3152	Identifier	i
>3153	Identifier	i
>3154	IdentifierDeclType	int
>3155	IfStatement	if ( orients != NULL )
>3156	ExpressionStatement	 
>3157	AssignmentExpr	* orients = new float [ num_keys ]
>3158	Identifier	num_keys
>3159	UnaryOp	* orients
>3160	Identifier	orients
>3161	UnaryOperator	*
>3162	Condition	 
>3163	EqualityExpression	orients != NULL
>3164	Identifier	NULL
>3165	Identifier	orients
>3166	IfStatement	if ( scales != NULL )
>3167	ExpressionStatement	 
>3168	AssignmentExpr	* scales = new float [ num_keys ]
>3169	Identifier	num_keys
>3170	UnaryOp	* scales
>3171	Identifier	scales
>3172	UnaryOperator	*
>3173	Condition	 
>3174	EqualityExpression	scales != NULL
>3175	Identifier	NULL
>3176	Identifier	scales
>3177	ExpressionStatement	 
>3178	CallExpression	gzread ( fp , info , sizeof ( keypt_t ) * num_keys )
>3179	ArgumentList	fp
>3180	Argument	sizeof ( keypt_t ) * num_keys
>3181	MultiplicativeExpression	sizeof ( keypt_t ) * num_keys
>3182	Identifier	num_keys
>3183	SizeofExpr	sizeof ( keypt_t )
>3184	SizeofOperand	keypt_t
>3185	Sizeof	sizeof
>3186	Argument	info
>3187	Identifier	info
>3188	Argument	fp
>3189	Identifier	fp
>3190	Callee	gzread
>3191	Identifier	gzread
>3192	ExpressionStatement	 
>3193	AssignmentExpr	info = new keypt_t [ num_keys ]
>3194	Identifier	num_keys
>3195	Identifier	info
>3196	IdentifierDeclStatement	 
>3197	IdentifierDecl	* d
>3198	Identifier	d
>3199	IdentifierDeclType	unsigned char *
>3200	IdentifierDeclStatement	 
>3201	IdentifierDecl	* info
>3202	Identifier	info
>3203	IdentifierDeclType	keypt_t *
>3204	ExpressionStatement	 
>3205	CallExpression	keys . resize ( num_keys )
>3206	ArgumentList	num_keys
>3207	Argument	num_keys
>3208	Identifier	num_keys
>3209	Callee	keys . resize
>3210	MemberAccess	keys . resize
>3211	Identifier	resize
>3212	Identifier	keys
>3213	IdentifierDeclStatement	 
>3214	IdentifierDecl	keys
>3215	Identifier	keys
>3216	IdentifierDeclType	std 
>3217	ExpressionStatement	 
>3218	CallExpression	gzread ( fp , & num_keys , sizeof ( int ) )
>3219	ArgumentList	fp
>3220	Argument	sizeof ( int )
>3221	SizeofExpr	sizeof ( int )
>3222	SizeofOperand	int
>3223	Sizeof	sizeof
>3224	Argument	& num_keys
>3225	UnaryOp	& num_keys
>3226	Identifier	num_keys
>3227	UnaryOperator	&
>3228	Argument	fp
>3229	Identifier	fp
>3230	Callee	gzread
>3231	Identifier	gzread
>3232	IdentifierDeclStatement	 
>3233	IdentifierDecl	num_keys
>3234	Identifier	num_keys
>3235	IdentifierDeclType	int
>3264	FunctionDef	CreateSearchTree (const std 
>3265	ParameterList	const std 
>3266	Parameter	 
>3267	Identifier	alpha
>3268	ParameterType	double
>3269	Parameter	 
>3270	Identifier	spatial
>3271	ParameterType	bool
>3272	Parameter	 
>3273	Identifier	k
>3274	ParameterType	const std 
>3275	ReturnType	ANNkd_tree *
>3276	CompoundStatement	 
>3277	ReturnStatement	 
>3278	Identifier	tree
>3279	IdentifierDeclStatement	 
>3280	IdentifierDecl	* tree = new ANNkd_tree ( pts , num_pts , dim , 4 )
>3281	AssignmentExpr	* tree = new ANNkd_tree ( pts , num_pts , dim , 4 )
>3282	Expression	pts , num_pts , dim , 4
>3283	Expression	num_pts , dim , 4
>3284	Expression	dim , 4
>3285	PrimaryExpression	4
>3286	Identifier	dim
>3287	Identifier	num_pts
>3288	Identifier	pts
>3289	Identifier	tree
>3290	Identifier	tree
>3291	IdentifierDeclType	ANNkd_tree *
>3292	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>3293	CompoundStatement	 
>3294	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>3295	ExpressionStatement	 
>3296	AssignmentExpr	pts [ i ] [ j + offset ] = k [ i ] . m_d [ j ]
>3297	ArrayIndexing	k [ i ] . m_d [ j ]
>3298	Identifier	j
>3299	MemberAccess	k [ i ] . m_d
>3300	Identifier	m_d
>3301	ArrayIndexing	k [ i ]
>3302	Identifier	i
>3303	Identifier	k
>3304	ArrayIndexing	pts [ i ] [ j + offset ]
>3305	AdditiveExpression	j + offset
>3306	Identifier	offset
>3307	Identifier	j
>3308	ArrayIndexing	pts [ i ]
>3309	Identifier	i
>3310	Identifier	pts
>3311	IncDecOp	 
>3312	IncDec	++
>3313	Identifier	j
>3314	Condition	 
>3315	RelationalExpression	j < 128
>3316	PrimaryExpression	128
>3317	Identifier	j
>3318	ForInit	 
>3319	AssignmentExpr	j = 0
>3320	PrimaryExpression	0
>3321	Identifier	j
>3322	IfStatement	if ( spatial )
>3323	CompoundStatement	 
>3324	ExpressionStatement	 
>3325	AssignmentExpr	pts [ i ] [ 1 ] = alpha * k [ i ] . m_y
>3326	MultiplicativeExpression	alpha * k [ i ] . m_y
>3327	MemberAccess	k [ i ] . m_y
>3328	Identifier	m_y
>3329	ArrayIndexing	k [ i ]
>3330	Identifier	i
>3331	Identifier	k
>3332	Identifier	alpha
>3333	ArrayIndexing	pts [ i ] [ 1 ]
>3334	PrimaryExpression	1
>3335	ArrayIndexing	pts [ i ]
>3336	Identifier	i
>3337	Identifier	pts
>3338	ExpressionStatement	 
>3339	AssignmentExpr	pts [ i ] [ 0 ] = alpha * k [ i ] . m_x
>3340	MultiplicativeExpression	alpha * k [ i ] . m_x
>3341	MemberAccess	k [ i ] . m_x
>3342	Identifier	m_x
>3343	ArrayIndexing	k [ i ]
>3344	Identifier	i
>3345	Identifier	k
>3346	Identifier	alpha
>3347	ArrayIndexing	pts [ i ] [ 0 ]
>3348	PrimaryExpression	0
>3349	ArrayIndexing	pts [ i ]
>3350	Identifier	i
>3351	Identifier	pts
>3352	Condition	 
>3353	Identifier	spatial
>3354	ExpressionStatement	 
>3355	CallExpression	assert ( k [ i ] . m_d != NULL )
>3356	ArgumentList	k [ i ] . m_d != NULL
>3357	Argument	k [ i ] . m_d != NULL
>3358	EqualityExpression	k [ i ] . m_d != NULL
>3359	Identifier	NULL
>3360	MemberAccess	k [ i ] . m_d
>3361	Identifier	m_d
>3362	ArrayIndexing	k [ i ]
>3363	Identifier	i
>3364	Identifier	k
>3365	Callee	assert
>3366	Identifier	assert
>3367	IdentifierDeclStatement	 
>3368	IdentifierDecl	j
>3369	Identifier	j
>3370	IdentifierDeclType	int
>3371	IncDecOp	 
>3372	IncDec	++
>3373	Identifier	i
>3374	Condition	 
>3375	RelationalExpression	i < num_pts
>3376	Identifier	num_pts
>3377	Identifier	i
>3378	ForInit	 
>3379	IdentifierDeclStatement	int i = 0 ;
>3380	IdentifierDecl	i = 0
>3381	AssignmentExpr	i = 0
>3382	PrimaryExpression	0
>3383	Identifier	i
>3384	Identifier	i
>3385	IdentifierDeclType	int
>3386	IfStatement	if ( spatial )
>3387	ExpressionStatement	 
>3388	AssignmentExpr	offset = 2
>3389	PrimaryExpression	2
>3390	Identifier	offset
>3391	Condition	 
>3392	Identifier	spatial
>3393	IdentifierDeclStatement	 
>3394	IdentifierDecl	offset = 0
>3395	AssignmentExpr	offset = 0
>3396	PrimaryExpression	0
>3397	Identifier	offset
>3398	Identifier	offset
>3399	IdentifierDeclType	int
>3400	IdentifierDeclStatement	 
>3401	IdentifierDecl	pts = annAllocPts ( num_pts , dim )
>3402	AssignmentExpr	pts = annAllocPts ( num_pts , dim )
>3403	CallExpression	annAllocPts ( num_pts , dim )
>3404	ArgumentList	num_pts
>3405	Argument	dim
>3406	Identifier	dim
>3407	Argument	num_pts
>3408	Identifier	num_pts
>3409	Callee	annAllocPts
>3410	Identifier	annAllocPts
>3411	Identifier	pts
>3412	Identifier	pts
>3413	IdentifierDeclType	ANNpointArray
>3414	IfStatement	if ( spatial )
>3415	ExpressionStatement	 
>3416	AssignmentExpr	dim = 130
>3417	PrimaryExpression	130
>3418	Identifier	dim
>3419	Condition	 
>3420	Identifier	spatial
>3421	IdentifierDeclStatement	 
>3422	IdentifierDecl	dim = 128
>3423	AssignmentExpr	dim = 128
>3424	PrimaryExpression	128
>3425	Identifier	dim
>3426	Identifier	dim
>3427	IdentifierDeclType	int
>3428	IdentifierDeclStatement	 
>3429	IdentifierDecl	num_pts = ( int ) k . size ( )
>3430	AssignmentExpr	num_pts = ( int ) k . size ( )
>3431	CastExpression	( int ) k . size ( )
>3432	CallExpression	k . size ( )
>3433	ArgumentList	 
>3434	Callee	k . size
>3435	MemberAccess	k . size
>3436	Identifier	size
>3437	Identifier	k
>3438	CastTarget	int
>3439	Identifier	num_pts
>3440	Identifier	num_pts
>3441	IdentifierDeclType	int
>3470	FunctionDef	CreateSearchTreeChar (const std 
>3471	ParameterList	const std 
>3472	Parameter	 
>3473	Identifier	k
>3474	ParameterType	const std 
>3475	ReturnType	ann_1_1_char 
>3476	CompoundStatement	 
>3477	ReturnStatement	 
>3478	Identifier	tree
>3479	IdentifierDeclStatement	 
>3480	IdentifierDecl	* tree = new ann_1_1_char 
>3481	AssignmentExpr	* tree = new ann_1_1_char 
>3482	Expression	pts , num_pts , dim , 4
>3483	Expression	num_pts , dim , 4
>3484	Expression	dim , 4
>3485	PrimaryExpression	4
>3486	Identifier	dim
>3487	Identifier	num_pts
>3488	Identifier	pts
>3489	Identifier	tree
>3490	Identifier	tree
>3491	IdentifierDeclType	ann_1_1_char 
>3492	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>3493	CompoundStatement	 
>3494	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>3495	ExpressionStatement	 
>3496	AssignmentExpr	pts [ i ] [ j + offset ] = k [ i ] . m_d [ j ]
>3497	ArrayIndexing	k [ i ] . m_d [ j ]
>3498	Identifier	j
>3499	MemberAccess	k [ i ] . m_d
>3500	Identifier	m_d
>3501	ArrayIndexing	k [ i ]
>3502	Identifier	i
>3503	Identifier	k
>3504	ArrayIndexing	pts [ i ] [ j + offset ]
>3505	AdditiveExpression	j + offset
>3506	Identifier	offset
>3507	Identifier	j
>3508	ArrayIndexing	pts [ i ]
>3509	Identifier	i
>3510	Identifier	pts
>3511	IncDecOp	 
>3512	IncDec	++
>3513	Identifier	j
>3514	Condition	 
>3515	RelationalExpression	j < 128
>3516	PrimaryExpression	128
>3517	Identifier	j
>3518	ForInit	 
>3519	AssignmentExpr	j = 0
>3520	PrimaryExpression	0
>3521	Identifier	j
>3522	IdentifierDeclStatement	 
>3523	IdentifierDecl	j
>3524	Identifier	j
>3525	IdentifierDeclType	int
>3526	IncDecOp	 
>3527	IncDec	++
>3528	Identifier	i
>3529	Condition	 
>3530	RelationalExpression	i < num_pts
>3531	Identifier	num_pts
>3532	Identifier	i
>3533	ForInit	 
>3534	IdentifierDeclStatement	int i = 0 ;
>3535	IdentifierDecl	i = 0
>3536	AssignmentExpr	i = 0
>3537	PrimaryExpression	0
>3538	Identifier	i
>3539	Identifier	i
>3540	IdentifierDeclType	int
>3541	IdentifierDeclStatement	 
>3542	IdentifierDecl	offset = 0
>3543	AssignmentExpr	offset = 0
>3544	PrimaryExpression	0
>3545	Identifier	offset
>3546	Identifier	offset
>3547	IdentifierDeclType	int
>3548	IdentifierDeclStatement	 
>3549	IdentifierDecl	pts = ann_1_1_char 
>3550	AssignmentExpr	pts = ann_1_1_char 
>3551	CallExpression	ann_1_1_char 
>3552	ArgumentList	num_pts
>3553	Argument	dim
>3554	Identifier	dim
>3555	Argument	num_pts
>3556	Identifier	num_pts
>3557	Callee	ann_1_1_char 
>3558	Identifier	ann_1_1_char 
>3559	Identifier	pts
>3560	Identifier	pts
>3561	IdentifierDeclType	ann_1_1_char 
>3562	IdentifierDeclStatement	 
>3563	IdentifierDecl	dim = 128
>3564	AssignmentExpr	dim = 128
>3565	PrimaryExpression	128
>3566	Identifier	dim
>3567	Identifier	dim
>3568	IdentifierDeclType	int
>3569	IdentifierDeclStatement	 
>3570	IdentifierDecl	num_pts = ( int ) k . size ( )
>3571	AssignmentExpr	num_pts = ( int ) k . size ( )
>3572	CastExpression	( int ) k . size ( )
>3573	CallExpression	k . size ( )
>3574	ArgumentList	 
>3575	Callee	k . size
>3576	MemberAccess	k . size
>3577	Identifier	size
>3578	Identifier	k
>3579	CastTarget	int
>3580	Identifier	num_pts
>3581	Identifier	num_pts
>3582	IdentifierDeclType	int
>3606	FunctionDef	MatchKeys (const std 
>3607	ParameterList	const std 
>3608	Parameter	 
>3609	Identifier	ratio
>3610	ParameterType	double
>3611	Parameter	 
>3612	Identifier	registered
>3613	ParameterType	bool
>3614	Parameter	 
>3615	Identifier	k2
>3616	ParameterType	const std 
>3617	Parameter	 
>3618	Identifier	k1
>3619	ParameterType	const std 
>3620	ReturnType	std 
>3621	CompoundStatement	 
>3622	ReturnStatement	 
>3623	Identifier	matches
>3624	ExpressionStatement	 
>3625	Identifier	tree
>3626	Statement	 
>3627	ExpressionStatement	 
>3628	CallExpression	ann_1_1_char 
>3629	ArgumentList	query
>3630	Argument	query
>3631	Identifier	query
>3632	Callee	ann_1_1_char 
>3633	Identifier	ann_1_1_char 
>3634	ExpressionStatement	 
>3635	CallExpression	ann_1_1_char 
>3636	ArgumentList	pts
>3637	Argument	pts
>3638	Identifier	pts
>3639	Callee	ann_1_1_char 
>3640	Identifier	ann_1_1_char 
>3641	ExpressionStatement	 
>3642	CallExpression	printf ( \"[MatchKeys] Found %d matches\n\" , num_matches )
>3643	ArgumentList	\"[MatchKeys] Found %d matches\n\"
>3644	Argument	num_matches
>3645	Identifier	num_matches
>3646	Argument	\"[MatchKeys] Found %d matches\n\"
>3647	PrimaryExpression	\"[MatchKeys] Found %d matches\n\"
>3648	Callee	printf
>3649	Identifier	printf
>3650	IdentifierDeclStatement	 
>3651	IdentifierDecl	num_matches = ( int ) matches . size ( )
>3652	AssignmentExpr	num_matches = ( int ) matches . size ( )
>3653	CastExpression	( int ) matches . size ( )
>3654	CallExpression	matches . size ( )
>3655	ArgumentList	 
>3656	Callee	matches . size
>3657	MemberAccess	matches . size
>3658	Identifier	size
>3659	Identifier	matches
>3660	CastTarget	int
>3661	Identifier	num_matches
>3662	Identifier	num_matches
>3663	IdentifierDeclType	int
>3664	ForStatement	for ( int i = 0 ; i < ( int ) k1 . size ( ) ; i ++ )
>3665	CompoundStatement	 
>3666	IfStatement	if ( sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) ) <= ratio )
>3667	CompoundStatement	 
>3668	IfStatement	if ( ! registered )
>3669	ElseStatement	else
>3670	CompoundStatement	 
>3671	ExpressionStatement	 
>3672	CallExpression	matches . push_back ( match )
>3673	ArgumentList	match
>3674	Argument	match
>3675	Identifier	match
>3676	Callee	matches . push_back
>3677	MemberAccess	matches . push_back
>3678	Identifier	push_back
>3679	Identifier	matches
>3680	IdentifierDeclStatement	 
>3681	IdentifierDecl	match = KeypointMatch ( i , registered_idxs [ nn_idx [ 0 ] ] )
>3682	AssignmentExpr	match = KeypointMatch ( i , registered_idxs [ nn_idx [ 0 ] ] )
>3683	CallExpression	KeypointMatch ( i , registered_idxs [ nn_idx [ 0 ] ] )
>3684	ArgumentList	i
>3685	Argument	registered_idxs [ nn_idx [ 0 ] ]
>3686	ArrayIndexing	registered_idxs [ nn_idx [ 0 ] ]
>3687	ArrayIndexing	nn_idx [ 0 ]
>3688	PrimaryExpression	0
>3689	Identifier	nn_idx
>3690	Identifier	registered_idxs
>3691	Argument	i
>3692	Identifier	i
>3693	Callee	KeypointMatch
>3694	Identifier	KeypointMatch
>3695	Identifier	match
>3696	Identifier	match
>3697	IdentifierDeclType	KeypointMatch
>3698	CompoundStatement	 
>3699	ExpressionStatement	 
>3700	CallExpression	matches . push_back ( KeypointMatch ( i , nn_idx [ 0 ] ) )
>3701	ArgumentList	KeypointMatch ( i , nn_idx [ 0 ] )
>3702	Argument	KeypointMatch ( i , nn_idx [ 0 ] )
>3703	CallExpression	KeypointMatch ( i , nn_idx [ 0 ] )
>3704	ArgumentList	i
>3705	Argument	nn_idx [ 0 ]
>3706	ArrayIndexing	nn_idx [ 0 ]
>3707	PrimaryExpression	0
>3708	Identifier	nn_idx
>3709	Argument	i
>3710	Identifier	i
>3711	Callee	KeypointMatch
>3712	Identifier	KeypointMatch
>3713	Callee	matches . push_back
>3714	MemberAccess	matches . push_back
>3715	Identifier	push_back
>3716	Identifier	matches
>3717	Condition	 
>3718	UnaryOp	! registered
>3719	Identifier	registered
>3720	UnaryOperator	!
>3721	Condition	 
>3722	RelationalExpression	sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) ) <= ratio
>3723	Identifier	ratio
>3724	CallExpression	sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) )
>3725	ArgumentList	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>3726	Argument	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>3727	MultiplicativeExpression	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>3728	CastExpression	( double ) dist [ 1 ]
>3729	ArrayIndexing	dist [ 1 ]
>3730	PrimaryExpression	1
>3731	Identifier	dist
>3732	CastTarget	double
>3733	CastExpression	( double ) dist [ 0 ]
>3734	ArrayIndexing	dist [ 0 ]
>3735	PrimaryExpression	0
>3736	Identifier	dist
>3737	CastTarget	double
>3738	Callee	sqrt
>3739	Identifier	sqrt
>3740	ExpressionStatement	 
>3741	CallExpression	tree -> annkPriSearch ( query , 2 , nn_idx , dist , 0.0 )
>3742	ArgumentList	query
>3743	Argument	0.0
>3744	PrimaryExpression	0.0
>3745	Argument	dist
>3746	Identifier	dist
>3747	Argument	nn_idx
>3748	Identifier	nn_idx
>3749	Argument	2
>3750	PrimaryExpression	2
>3751	Argument	query
>3752	Identifier	query
>3753	Callee	tree -> annkPriSearch
>3754	PtrMemberAccess	tree -> annkPriSearch
>3755	Identifier	annkPriSearch
>3756	Identifier	tree
>3757	IdentifierDeclStatement	 
>3758	IdentifierDecl	dist [ 2 ]
>3759	PrimaryExpression	2
>3760	Identifier	dist
>3761	IdentifierDeclType	ann_1_1_char 
>3762	IdentifierDeclStatement	 
>3763	IdentifierDecl	nn_idx [ 2 ]
>3764	PrimaryExpression	2
>3765	Identifier	nn_idx
>3766	IdentifierDeclType	ann_1_1_char 
>3767	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>3768	CompoundStatement	 
>3769	ExpressionStatement	 
>3770	AssignmentExpr	query [ j ] = k1 [ i ] . m_d [ j ]
>3771	ArrayIndexing	k1 [ i ] . m_d [ j ]
>3772	Identifier	j
>3773	MemberAccess	k1 [ i ] . m_d
>3774	Identifier	m_d
>3775	ArrayIndexing	k1 [ i ]
>3776	Identifier	i
>3777	Identifier	k1
>3778	ArrayIndexing	query [ j ]
>3779	Identifier	j
>3780	Identifier	query
>3781	IncDecOp	 
>3782	IncDec	++
>3783	Identifier	j
>3784	Condition	 
>3785	RelationalExpression	j < 128
>3786	PrimaryExpression	128
>3787	Identifier	j
>3788	ForInit	 
>3789	AssignmentExpr	j = 0
>3790	PrimaryExpression	0
>3791	Identifier	j
>3792	IdentifierDeclStatement	 
>3793	IdentifierDecl	j
>3794	Identifier	j
>3795	IdentifierDeclType	int
>3796	IncDecOp	 
>3797	IncDec	++
>3798	Identifier	i
>3799	Condition	 
>3800	RelationalExpression	i < ( int ) k1 . size ( )
>3801	CastExpression	( int ) k1 . size ( )
>3802	CallExpression	k1 . size ( )
>3803	ArgumentList	 
>3804	Callee	k1 . size
>3805	MemberAccess	k1 . size
>3806	Identifier	size
>3807	Identifier	k1
>3808	CastTarget	int
>3809	Identifier	i
>3810	ForInit	 
>3811	IdentifierDeclStatement	int i = 0 ;
>3812	IdentifierDecl	i = 0
>3813	AssignmentExpr	i = 0
>3814	PrimaryExpression	0
>3815	Identifier	i
>3816	Identifier	i
>3817	IdentifierDeclType	int
>3818	IdentifierDeclStatement	 
>3819	IdentifierDecl	query = ann_1_1_char 
>3820	AssignmentExpr	query = ann_1_1_char 
>3821	CallExpression	ann_1_1_char 
>3822	ArgumentList	128
>3823	Argument	128
>3824	PrimaryExpression	128
>3825	Callee	ann_1_1_char 
>3826	Identifier	ann_1_1_char 
>3827	Identifier	query
>3828	Identifier	query
>3829	IdentifierDeclType	ann_1_1_char 
>3830	IdentifierDeclStatement	 
>3831	IdentifierDecl	* tree = new ann_1_1_char 
>3832	AssignmentExpr	* tree = new ann_1_1_char 
>3833	Expression	pts , num_pts , 128 , 4
>3834	Expression	num_pts , 128 , 4
>3835	Expression	128 , 4
>3836	PrimaryExpression	4
>3837	PrimaryExpression	128
>3838	Identifier	num_pts
>3839	Identifier	pts
>3840	Identifier	tree
>3841	Identifier	tree
>3842	IdentifierDeclType	ann_1_1_char 
>3843	IfStatement	if ( ! registered )
>3844	ElseStatement	else
>3845	CompoundStatement	 
>3846	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>3847	CompoundStatement	 
>3848	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>3849	CompoundStatement	 
>3850	ExpressionStatement	 
>3851	AssignmentExpr	pts [ i ] [ j ] = k2 [ idx ] . m_d [ j ]
>3852	ArrayIndexing	k2 [ idx ] . m_d [ j ]
>3853	Identifier	j
>3854	MemberAccess	k2 [ idx ] . m_d
>3855	Identifier	m_d
>3856	ArrayIndexing	k2 [ idx ]
>3857	Identifier	idx
>3858	Identifier	k2
>3859	ArrayIndexing	pts [ i ] [ j ]
>3860	Identifier	j
>3861	ArrayIndexing	pts [ i ]
>3862	Identifier	i
>3863	Identifier	pts
>3864	IncDecOp	 
>3865	IncDec	++
>3866	Identifier	j
>3867	Condition	 
>3868	RelationalExpression	j < 128
>3869	PrimaryExpression	128
>3870	Identifier	j
>3871	ForInit	 
>3872	AssignmentExpr	j = 0
>3873	PrimaryExpression	0
>3874	Identifier	j
>3875	IdentifierDeclStatement	 
>3876	IdentifierDecl	idx = registered_idxs [ i ]
>3877	AssignmentExpr	idx = registered_idxs [ i ]
>3878	ArrayIndexing	registered_idxs [ i ]
>3879	Identifier	i
>3880	Identifier	registered_idxs
>3881	Identifier	idx
>3882	Identifier	idx
>3883	IdentifierDeclType	int
>3884	IdentifierDeclStatement	 
>3885	IdentifierDecl	j
>3886	Identifier	j
>3887	IdentifierDeclType	int
>3888	IncDecOp	 
>3889	IncDec	++
>3890	Identifier	i
>3891	Condition	 
>3892	RelationalExpression	i < num_pts
>3893	Identifier	num_pts
>3894	Identifier	i
>3895	ForInit	 
>3896	IdentifierDeclStatement	int i = 0 ;
>3897	IdentifierDecl	i = 0
>3898	AssignmentExpr	i = 0
>3899	PrimaryExpression	0
>3900	Identifier	i
>3901	Identifier	i
>3902	IdentifierDeclType	int
>3903	CompoundStatement	 
>3904	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>3905	CompoundStatement	 
>3906	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>3907	CompoundStatement	 
>3908	ExpressionStatement	 
>3909	AssignmentExpr	pts [ i ] [ j ] = k2 [ i ] . m_d [ j ]
>3910	ArrayIndexing	k2 [ i ] . m_d [ j ]
>3911	Identifier	j
>3912	MemberAccess	k2 [ i ] . m_d
>3913	Identifier	m_d
>3914	ArrayIndexing	k2 [ i ]
>3915	Identifier	i
>3916	Identifier	k2
>3917	ArrayIndexing	pts [ i ] [ j ]
>3918	Identifier	j
>3919	ArrayIndexing	pts [ i ]
>3920	Identifier	i
>3921	Identifier	pts
>3922	IncDecOp	 
>3923	IncDec	++
>3924	Identifier	j
>3925	Condition	 
>3926	RelationalExpression	j < 128
>3927	PrimaryExpression	128
>3928	Identifier	j
>3929	ForInit	 
>3930	AssignmentExpr	j = 0
>3931	PrimaryExpression	0
>3932	Identifier	j
>3933	IdentifierDeclStatement	 
>3934	IdentifierDecl	j
>3935	Identifier	j
>3936	IdentifierDeclType	int
>3937	IncDecOp	 
>3938	IncDec	++
>3939	Identifier	i
>3940	Condition	 
>3941	RelationalExpression	i < num_pts
>3942	Identifier	num_pts
>3943	Identifier	i
>3944	ForInit	 
>3945	IdentifierDeclStatement	int i = 0 ;
>3946	IdentifierDecl	i = 0
>3947	AssignmentExpr	i = 0
>3948	PrimaryExpression	0
>3949	Identifier	i
>3950	Identifier	i
>3951	IdentifierDeclType	int
>3952	Condition	 
>3953	UnaryOp	! registered
>3954	Identifier	registered
>3955	UnaryOperator	!
>3956	IdentifierDeclStatement	 
>3957	IdentifierDecl	pts = ann_1_1_char 
>3958	AssignmentExpr	pts = ann_1_1_char 
>3959	CallExpression	ann_1_1_char 
>3960	ArgumentList	num_pts
>3961	Argument	128
>3962	PrimaryExpression	128
>3963	Argument	num_pts
>3964	Identifier	num_pts
>3965	Callee	ann_1_1_char 
>3966	Identifier	ann_1_1_char 
>3967	Identifier	pts
>3968	Identifier	pts
>3969	IdentifierDeclType	ann_1_1_char 
>3970	IfStatement	if ( ! registered )
>3971	ElseStatement	else
>3972	CompoundStatement	 
>3973	ForStatement	for ( int i = 0 ; i < ( int ) k2 . size ( ) ; i ++ )
>3974	CompoundStatement	 
>3975	IfStatement	if ( k2 [ i ] . m_extra >= 0 )
>3976	CompoundStatement	 
>3977	ExpressionStatement	 
>3978	IncDecOp	num_pts ++
>3979	IncDec	++
>3980	Identifier	num_pts
>3981	ExpressionStatement	 
>3982	AssignmentExpr	registered_idxs [ num_pts ] = i
>3983	Identifier	i
>3984	ArrayIndexing	registered_idxs [ num_pts ]
>3985	Identifier	num_pts
>3986	Identifier	registered_idxs
>3987	Condition	 
>3988	RelationalExpression	k2 [ i ] . m_extra >= 0
>3989	PrimaryExpression	0
>3990	MemberAccess	k2 [ i ] . m_extra
>3991	Identifier	m_extra
>3992	ArrayIndexing	k2 [ i ]
>3993	Identifier	i
>3994	Identifier	k2
>3995	IncDecOp	 
>3996	IncDec	++
>3997	Identifier	i
>3998	Condition	 
>3999	RelationalExpression	i < ( int ) k2 . size ( )
>4000	CastExpression	( int ) k2 . size ( )
>4001	CallExpression	k2 . size ( )
>4002	ArgumentList	 
>4003	Callee	k2 . size
>4004	MemberAccess	k2 . size
>4005	Identifier	size
>4006	Identifier	k2
>4007	CastTarget	int
>4008	Identifier	i
>4009	ForInit	 
>4010	IdentifierDeclStatement	int i = 0 ;
>4011	IdentifierDecl	i = 0
>4012	AssignmentExpr	i = 0
>4013	PrimaryExpression	0
>4014	Identifier	i
>4015	Identifier	i
>4016	IdentifierDeclType	int
>4017	ExpressionStatement	 
>4018	AssignmentExpr	registered_idxs = new int [ ( int ) k2 . size ( ) ]
>4019	CastExpression	( int ) k2 . size ( )
>4020	CallExpression	k2 . size ( )
>4021	ArgumentList	 
>4022	Callee	k2 . size
>4023	MemberAccess	k2 . size
>4024	Identifier	size
>4025	Identifier	k2
>4026	CastTarget	int
>4027	Identifier	registered_idxs
>4028	CompoundStatement	 
>4029	ExpressionStatement	 
>4030	AssignmentExpr	num_pts = ( int ) k2 . size ( )
>4031	CastExpression	( int ) k2 . size ( )
>4032	CallExpression	k2 . size ( )
>4033	ArgumentList	 
>4034	Callee	k2 . size
>4035	MemberAccess	k2 . size
>4036	Identifier	size
>4037	Identifier	k2
>4038	CastTarget	int
>4039	Identifier	num_pts
>4040	Condition	 
>4041	UnaryOp	! registered
>4042	Identifier	registered
>4043	UnaryOperator	!
>4044	IdentifierDeclStatement	 
>4045	IdentifierDecl	* registered_idxs = NULL
>4046	AssignmentExpr	* registered_idxs = NULL
>4047	Identifier	NULL
>4048	Identifier	NULL
>4049	Identifier	registered_idxs
>4050	IdentifierDeclType	int *
>4051	IdentifierDeclStatement	 
>4052	IdentifierDecl	matches
>4053	Identifier	matches
>4054	IdentifierDeclType	std 
>4055	IdentifierDeclStatement	 
>4056	IdentifierDecl	num_pts = 0
>4057	AssignmentExpr	num_pts = 0
>4058	PrimaryExpression	0
>4059	Identifier	num_pts
>4060	Identifier	num_pts
>4061	IdentifierDeclType	int
>4062	ExpressionStatement	 
>4063	CallExpression	ann_1_1_char 
>4064	ArgumentList	200
>4065	Argument	200
>4066	PrimaryExpression	200
>4067	Callee	ann_1_1_char 
>4068	Identifier	ann_1_1_char 
>4121	FunctionDef	MatchKeysWithScore (const std 
>4122	ParameterList	const std 
>4123	Parameter	 
>4124	Identifier	ratio
>4125	ParameterType	double
>4126	Parameter	 
>4127	Identifier	registered
>4128	ParameterType	bool
>4129	Parameter	 
>4130	Identifier	k2
>4131	ParameterType	const std 
>4132	Parameter	 
>4133	Identifier	k1
>4134	ParameterType	const std 
>4135	ReturnType	std 
>4136	CompoundStatement	 
>4137	ReturnStatement	 
>4138	Identifier	matches
>4139	ExpressionStatement	 
>4140	Identifier	tree
>4141	Statement	 
>4142	ExpressionStatement	 
>4143	CallExpression	ann_1_1_char 
>4144	ArgumentList	query
>4145	Argument	query
>4146	Identifier	query
>4147	Callee	ann_1_1_char 
>4148	Identifier	ann_1_1_char 
>4149	ExpressionStatement	 
>4150	CallExpression	ann_1_1_char 
>4151	ArgumentList	pts
>4152	Argument	pts
>4153	Identifier	pts
>4154	Callee	ann_1_1_char 
>4155	Identifier	ann_1_1_char 
>4156	ExpressionStatement	 
>4157	CallExpression	printf ( \"[MatchKeysWithScore] Found %d matches\n\" , num_matches )
>4158	ArgumentList	\"[MatchKeysWithScore] Found %d matches\n\"
>4159	Argument	num_matches
>4160	Identifier	num_matches
>4161	Argument	\"[MatchKeysWithScore] Found %d matches\n\"
>4162	PrimaryExpression	\"[MatchKeysWithScore] Found %d matches\n\"
>4163	Callee	printf
>4164	Identifier	printf
>4165	IdentifierDeclStatement	 
>4166	IdentifierDecl	num_matches = ( int ) matches . size ( )
>4167	AssignmentExpr	num_matches = ( int ) matches . size ( )
>4168	CastExpression	( int ) matches . size ( )
>4169	CallExpression	matches . size ( )
>4170	ArgumentList	 
>4171	Callee	matches . size
>4172	MemberAccess	matches . size
>4173	Identifier	size
>4174	Identifier	matches
>4175	CastTarget	int
>4176	Identifier	num_matches
>4177	Identifier	num_matches
>4178	IdentifierDeclType	int
>4179	ForStatement	for ( int i = 0 ; i < ( int ) k1 . size ( ) ; i ++ )
>4180	CompoundStatement	 
>4181	IfStatement	if ( sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) ) <= ratio )
>4182	CompoundStatement	 
>4183	IfStatement	if ( ! registered )
>4184	ElseStatement	else
>4185	CompoundStatement	 
>4186	ExpressionStatement	 
>4187	CallExpression	matches . push_back ( match )
>4188	ArgumentList	match
>4189	Argument	match
>4190	Identifier	match
>4191	Callee	matches . push_back
>4192	MemberAccess	matches . push_back
>4193	Identifier	push_back
>4194	Identifier	matches
>4195	IdentifierDeclStatement	 
>4196	IdentifierDecl	match = KeypointMatchWithScore ( i , registered_idxs [ nn_idx [ 0 ] ] , ( float ) dist [ 0 ] )
>4197	AssignmentExpr	match = KeypointMatchWithScore ( i , registered_idxs [ nn_idx [ 0 ] ] , ( float ) dist [ 0 ] )
>4198	CallExpression	KeypointMatchWithScore ( i , registered_idxs [ nn_idx [ 0 ] ] , ( float ) dist [ 0 ] )
>4199	ArgumentList	i
>4200	Argument	( float ) dist [ 0 ]
>4201	CastExpression	( float ) dist [ 0 ]
>4202	ArrayIndexing	dist [ 0 ]
>4203	PrimaryExpression	0
>4204	Identifier	dist
>4205	CastTarget	float
>4206	Argument	registered_idxs [ nn_idx [ 0 ] ]
>4207	ArrayIndexing	registered_idxs [ nn_idx [ 0 ] ]
>4208	ArrayIndexing	nn_idx [ 0 ]
>4209	PrimaryExpression	0
>4210	Identifier	nn_idx
>4211	Identifier	registered_idxs
>4212	Argument	i
>4213	Identifier	i
>4214	Callee	KeypointMatchWithScore
>4215	Identifier	KeypointMatchWithScore
>4216	Identifier	match
>4217	Identifier	match
>4218	IdentifierDeclType	KeypointMatchWithScore
>4219	CompoundStatement	 
>4220	ExpressionStatement	 
>4221	CallExpression	matches . push_back ( match )
>4222	ArgumentList	match
>4223	Argument	match
>4224	Identifier	match
>4225	Callee	matches . push_back
>4226	MemberAccess	matches . push_back
>4227	Identifier	push_back
>4228	Identifier	matches
>4229	IdentifierDeclStatement	 
>4230	IdentifierDecl	match = KeypointMatchWithScore ( i , nn_idx [ 0 ] , ( float ) dist [ 0 ] )
>4231	AssignmentExpr	match = KeypointMatchWithScore ( i , nn_idx [ 0 ] , ( float ) dist [ 0 ] )
>4232	CallExpression	KeypointMatchWithScore ( i , nn_idx [ 0 ] , ( float ) dist [ 0 ] )
>4233	ArgumentList	i
>4234	Argument	( float ) dist [ 0 ]
>4235	CastExpression	( float ) dist [ 0 ]
>4236	ArrayIndexing	dist [ 0 ]
>4237	PrimaryExpression	0
>4238	Identifier	dist
>4239	CastTarget	float
>4240	Argument	nn_idx [ 0 ]
>4241	ArrayIndexing	nn_idx [ 0 ]
>4242	PrimaryExpression	0
>4243	Identifier	nn_idx
>4244	Argument	i
>4245	Identifier	i
>4246	Callee	KeypointMatchWithScore
>4247	Identifier	KeypointMatchWithScore
>4248	Identifier	match
>4249	Identifier	match
>4250	IdentifierDeclType	KeypointMatchWithScore
>4251	Condition	 
>4252	UnaryOp	! registered
>4253	Identifier	registered
>4254	UnaryOperator	!
>4255	Condition	 
>4256	RelationalExpression	sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) ) <= ratio
>4257	Identifier	ratio
>4258	CallExpression	sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) )
>4259	ArgumentList	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>4260	Argument	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>4261	MultiplicativeExpression	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>4262	CastExpression	( double ) dist [ 1 ]
>4263	ArrayIndexing	dist [ 1 ]
>4264	PrimaryExpression	1
>4265	Identifier	dist
>4266	CastTarget	double
>4267	CastExpression	( double ) dist [ 0 ]
>4268	ArrayIndexing	dist [ 0 ]
>4269	PrimaryExpression	0
>4270	Identifier	dist
>4271	CastTarget	double
>4272	Callee	sqrt
>4273	Identifier	sqrt
>4274	ExpressionStatement	 
>4275	CallExpression	tree -> annkPriSearch ( query , 2 , nn_idx , dist , 0.0 )
>4276	ArgumentList	query
>4277	Argument	0.0
>4278	PrimaryExpression	0.0
>4279	Argument	dist
>4280	Identifier	dist
>4281	Argument	nn_idx
>4282	Identifier	nn_idx
>4283	Argument	2
>4284	PrimaryExpression	2
>4285	Argument	query
>4286	Identifier	query
>4287	Callee	tree -> annkPriSearch
>4288	PtrMemberAccess	tree -> annkPriSearch
>4289	Identifier	annkPriSearch
>4290	Identifier	tree
>4291	IdentifierDeclStatement	 
>4292	IdentifierDecl	dist [ 2 ]
>4293	PrimaryExpression	2
>4294	Identifier	dist
>4295	IdentifierDeclType	ann_1_1_char 
>4296	IdentifierDeclStatement	 
>4297	IdentifierDecl	nn_idx [ 2 ]
>4298	PrimaryExpression	2
>4299	Identifier	nn_idx
>4300	IdentifierDeclType	ann_1_1_char 
>4301	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>4302	CompoundStatement	 
>4303	ExpressionStatement	 
>4304	AssignmentExpr	query [ j ] = k1 [ i ] . m_d [ j ]
>4305	ArrayIndexing	k1 [ i ] . m_d [ j ]
>4306	Identifier	j
>4307	MemberAccess	k1 [ i ] . m_d
>4308	Identifier	m_d
>4309	ArrayIndexing	k1 [ i ]
>4310	Identifier	i
>4311	Identifier	k1
>4312	ArrayIndexing	query [ j ]
>4313	Identifier	j
>4314	Identifier	query
>4315	IncDecOp	 
>4316	IncDec	++
>4317	Identifier	j
>4318	Condition	 
>4319	RelationalExpression	j < 128
>4320	PrimaryExpression	128
>4321	Identifier	j
>4322	ForInit	 
>4323	AssignmentExpr	j = 0
>4324	PrimaryExpression	0
>4325	Identifier	j
>4326	IdentifierDeclStatement	 
>4327	IdentifierDecl	j
>4328	Identifier	j
>4329	IdentifierDeclType	int
>4330	IncDecOp	 
>4331	IncDec	++
>4332	Identifier	i
>4333	Condition	 
>4334	RelationalExpression	i < ( int ) k1 . size ( )
>4335	CastExpression	( int ) k1 . size ( )
>4336	CallExpression	k1 . size ( )
>4337	ArgumentList	 
>4338	Callee	k1 . size
>4339	MemberAccess	k1 . size
>4340	Identifier	size
>4341	Identifier	k1
>4342	CastTarget	int
>4343	Identifier	i
>4344	ForInit	 
>4345	IdentifierDeclStatement	int i = 0 ;
>4346	IdentifierDecl	i = 0
>4347	AssignmentExpr	i = 0
>4348	PrimaryExpression	0
>4349	Identifier	i
>4350	Identifier	i
>4351	IdentifierDeclType	int
>4352	IdentifierDeclStatement	 
>4353	IdentifierDecl	query = ann_1_1_char 
>4354	AssignmentExpr	query = ann_1_1_char 
>4355	CallExpression	ann_1_1_char 
>4356	ArgumentList	128
>4357	Argument	128
>4358	PrimaryExpression	128
>4359	Callee	ann_1_1_char 
>4360	Identifier	ann_1_1_char 
>4361	Identifier	query
>4362	Identifier	query
>4363	IdentifierDeclType	ann_1_1_char 
>4364	IdentifierDeclStatement	 
>4365	IdentifierDecl	* tree = new ann_1_1_char 
>4366	AssignmentExpr	* tree = new ann_1_1_char 
>4367	Expression	pts , num_pts , 128 , 4
>4368	Expression	num_pts , 128 , 4
>4369	Expression	128 , 4
>4370	PrimaryExpression	4
>4371	PrimaryExpression	128
>4372	Identifier	num_pts
>4373	Identifier	pts
>4374	Identifier	tree
>4375	Identifier	tree
>4376	IdentifierDeclType	ann_1_1_char 
>4377	IfStatement	if ( ! registered )
>4378	ElseStatement	else
>4379	CompoundStatement	 
>4380	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>4381	CompoundStatement	 
>4382	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>4383	CompoundStatement	 
>4384	ExpressionStatement	 
>4385	AssignmentExpr	pts [ i ] [ j ] = k2 [ idx ] . m_d [ j ]
>4386	ArrayIndexing	k2 [ idx ] . m_d [ j ]
>4387	Identifier	j
>4388	MemberAccess	k2 [ idx ] . m_d
>4389	Identifier	m_d
>4390	ArrayIndexing	k2 [ idx ]
>4391	Identifier	idx
>4392	Identifier	k2
>4393	ArrayIndexing	pts [ i ] [ j ]
>4394	Identifier	j
>4395	ArrayIndexing	pts [ i ]
>4396	Identifier	i
>4397	Identifier	pts
>4398	IncDecOp	 
>4399	IncDec	++
>4400	Identifier	j
>4401	Condition	 
>4402	RelationalExpression	j < 128
>4403	PrimaryExpression	128
>4404	Identifier	j
>4405	ForInit	 
>4406	AssignmentExpr	j = 0
>4407	PrimaryExpression	0
>4408	Identifier	j
>4409	IdentifierDeclStatement	 
>4410	IdentifierDecl	idx = registered_idxs [ i ]
>4411	AssignmentExpr	idx = registered_idxs [ i ]
>4412	ArrayIndexing	registered_idxs [ i ]
>4413	Identifier	i
>4414	Identifier	registered_idxs
>4415	Identifier	idx
>4416	Identifier	idx
>4417	IdentifierDeclType	int
>4418	IdentifierDeclStatement	 
>4419	IdentifierDecl	j
>4420	Identifier	j
>4421	IdentifierDeclType	int
>4422	IncDecOp	 
>4423	IncDec	++
>4424	Identifier	i
>4425	Condition	 
>4426	RelationalExpression	i < num_pts
>4427	Identifier	num_pts
>4428	Identifier	i
>4429	ForInit	 
>4430	IdentifierDeclStatement	int i = 0 ;
>4431	IdentifierDecl	i = 0
>4432	AssignmentExpr	i = 0
>4433	PrimaryExpression	0
>4434	Identifier	i
>4435	Identifier	i
>4436	IdentifierDeclType	int
>4437	CompoundStatement	 
>4438	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>4439	CompoundStatement	 
>4440	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>4441	CompoundStatement	 
>4442	ExpressionStatement	 
>4443	AssignmentExpr	pts [ i ] [ j ] = k2 [ i ] . m_d [ j ]
>4444	ArrayIndexing	k2 [ i ] . m_d [ j ]
>4445	Identifier	j
>4446	MemberAccess	k2 [ i ] . m_d
>4447	Identifier	m_d
>4448	ArrayIndexing	k2 [ i ]
>4449	Identifier	i
>4450	Identifier	k2
>4451	ArrayIndexing	pts [ i ] [ j ]
>4452	Identifier	j
>4453	ArrayIndexing	pts [ i ]
>4454	Identifier	i
>4455	Identifier	pts
>4456	IncDecOp	 
>4457	IncDec	++
>4458	Identifier	j
>4459	Condition	 
>4460	RelationalExpression	j < 128
>4461	PrimaryExpression	128
>4462	Identifier	j
>4463	ForInit	 
>4464	AssignmentExpr	j = 0
>4465	PrimaryExpression	0
>4466	Identifier	j
>4467	IdentifierDeclStatement	 
>4468	IdentifierDecl	j
>4469	Identifier	j
>4470	IdentifierDeclType	int
>4471	IncDecOp	 
>4472	IncDec	++
>4473	Identifier	i
>4474	Condition	 
>4475	RelationalExpression	i < num_pts
>4476	Identifier	num_pts
>4477	Identifier	i
>4478	ForInit	 
>4479	IdentifierDeclStatement	int i = 0 ;
>4480	IdentifierDecl	i = 0
>4481	AssignmentExpr	i = 0
>4482	PrimaryExpression	0
>4483	Identifier	i
>4484	Identifier	i
>4485	IdentifierDeclType	int
>4486	Condition	 
>4487	UnaryOp	! registered
>4488	Identifier	registered
>4489	UnaryOperator	!
>4490	IdentifierDeclStatement	 
>4491	IdentifierDecl	pts = ann_1_1_char 
>4492	AssignmentExpr	pts = ann_1_1_char 
>4493	CallExpression	ann_1_1_char 
>4494	ArgumentList	num_pts
>4495	Argument	128
>4496	PrimaryExpression	128
>4497	Argument	num_pts
>4498	Identifier	num_pts
>4499	Callee	ann_1_1_char 
>4500	Identifier	ann_1_1_char 
>4501	Identifier	pts
>4502	Identifier	pts
>4503	IdentifierDeclType	ann_1_1_char 
>4504	IfStatement	if ( ! registered )
>4505	ElseStatement	else
>4506	CompoundStatement	 
>4507	ForStatement	for ( int i = 0 ; i < ( int ) k2 . size ( ) ; i ++ )
>4508	CompoundStatement	 
>4509	IfStatement	if ( k2 [ i ] . m_extra >= 0 )
>4510	CompoundStatement	 
>4511	ExpressionStatement	 
>4512	IncDecOp	num_pts ++
>4513	IncDec	++
>4514	Identifier	num_pts
>4515	ExpressionStatement	 
>4516	AssignmentExpr	registered_idxs [ num_pts ] = i
>4517	Identifier	i
>4518	ArrayIndexing	registered_idxs [ num_pts ]
>4519	Identifier	num_pts
>4520	Identifier	registered_idxs
>4521	Condition	 
>4522	RelationalExpression	k2 [ i ] . m_extra >= 0
>4523	PrimaryExpression	0
>4524	MemberAccess	k2 [ i ] . m_extra
>4525	Identifier	m_extra
>4526	ArrayIndexing	k2 [ i ]
>4527	Identifier	i
>4528	Identifier	k2
>4529	IncDecOp	 
>4530	IncDec	++
>4531	Identifier	i
>4532	Condition	 
>4533	RelationalExpression	i < ( int ) k2 . size ( )
>4534	CastExpression	( int ) k2 . size ( )
>4535	CallExpression	k2 . size ( )
>4536	ArgumentList	 
>4537	Callee	k2 . size
>4538	MemberAccess	k2 . size
>4539	Identifier	size
>4540	Identifier	k2
>4541	CastTarget	int
>4542	Identifier	i
>4543	ForInit	 
>4544	IdentifierDeclStatement	int i = 0 ;
>4545	IdentifierDecl	i = 0
>4546	AssignmentExpr	i = 0
>4547	PrimaryExpression	0
>4548	Identifier	i
>4549	Identifier	i
>4550	IdentifierDeclType	int
>4551	ExpressionStatement	 
>4552	AssignmentExpr	registered_idxs = new int [ ( int ) k2 . size ( ) ]
>4553	CastExpression	( int ) k2 . size ( )
>4554	CallExpression	k2 . size ( )
>4555	ArgumentList	 
>4556	Callee	k2 . size
>4557	MemberAccess	k2 . size
>4558	Identifier	size
>4559	Identifier	k2
>4560	CastTarget	int
>4561	Identifier	registered_idxs
>4562	CompoundStatement	 
>4563	ExpressionStatement	 
>4564	AssignmentExpr	num_pts = ( int ) k2 . size ( )
>4565	CastExpression	( int ) k2 . size ( )
>4566	CallExpression	k2 . size ( )
>4567	ArgumentList	 
>4568	Callee	k2 . size
>4569	MemberAccess	k2 . size
>4570	Identifier	size
>4571	Identifier	k2
>4572	CastTarget	int
>4573	Identifier	num_pts
>4574	Condition	 
>4575	UnaryOp	! registered
>4576	Identifier	registered
>4577	UnaryOperator	!
>4578	IdentifierDeclStatement	 
>4579	IdentifierDecl	* registered_idxs = NULL
>4580	AssignmentExpr	* registered_idxs = NULL
>4581	Identifier	NULL
>4582	Identifier	NULL
>4583	Identifier	registered_idxs
>4584	IdentifierDeclType	int *
>4585	IdentifierDeclStatement	 
>4586	IdentifierDecl	matches
>4587	Identifier	matches
>4588	IdentifierDeclType	std 
>4589	IdentifierDeclStatement	 
>4590	IdentifierDecl	num_pts = 0
>4591	AssignmentExpr	num_pts = 0
>4592	PrimaryExpression	0
>4593	Identifier	num_pts
>4594	Identifier	num_pts
>4595	IdentifierDeclType	int
>4596	ExpressionStatement	 
>4597	CallExpression	ann_1_1_char 
>4598	ArgumentList	200
>4599	Argument	200
>4600	PrimaryExpression	200
>4601	Callee	ann_1_1_char 
>4602	Identifier	ann_1_1_char 
>4655	FunctionDef	PruneMatchesWithScore (const std 
>4656	ParameterList	const std 
>4657	Parameter	 
>4658	Identifier	matches
>4659	ParameterType	const std 
>4660	ReturnType	std 
>4661	CompoundStatement	 
>4662	ReturnStatement	 
>4663	Identifier	matches_new
>4664	ForStatement	for ( int i = 0 ; i < num_matches ; i ++ )
>4665	CompoundStatement	 
>4666	IfStatement	if ( map [ idx2 ] == idx1 )
>4667	CompoundStatement	 
>4668	ExpressionStatement	 
>4669	CallExpression	matches_new . push_back ( KeypointMatchWithScore ( idx1 , idx2 , key_hash [ idx2 ] ) )
>4670	ArgumentList	KeypointMatchWithScore ( idx1 , idx2 , key_hash [ idx2 ] )
>4671	Argument	KeypointMatchWithScore ( idx1 , idx2 , key_hash [ idx2 ] )
>4672	CallExpression	KeypointMatchWithScore ( idx1 , idx2 , key_hash [ idx2 ] )
>4673	ArgumentList	idx1
>4674	Argument	key_hash [ idx2 ]
>4675	ArrayIndexing	key_hash [ idx2 ]
>4676	Identifier	idx2
>4677	Identifier	key_hash
>4678	Argument	idx2
>4679	Identifier	idx2
>4680	Argument	idx1
>4681	Identifier	idx1
>4682	Callee	KeypointMatchWithScore
>4683	Identifier	KeypointMatchWithScore
>4684	Callee	matches_new . push_back
>4685	MemberAccess	matches_new . push_back
>4686	Identifier	push_back
>4687	Identifier	matches_new
>4688	Condition	 
>4689	EqualityExpression	map [ idx2 ] == idx1
>4690	Identifier	idx1
>4691	ArrayIndexing	map [ idx2 ]
>4692	Identifier	idx2
>4693	Identifier	map
>4694	IdentifierDeclStatement	 
>4695	IdentifierDecl	idx2 = matches [ i ] . m_idx2
>4696	AssignmentExpr	idx2 = matches [ i ] . m_idx2
>4697	MemberAccess	matches [ i ] . m_idx2
>4698	Identifier	m_idx2
>4699	ArrayIndexing	matches [ i ]
>4700	Identifier	i
>4701	Identifier	matches
>4702	Identifier	idx2
>4703	Identifier	idx2
>4704	IdentifierDeclType	int
>4705	IdentifierDeclStatement	 
>4706	IdentifierDecl	idx1 = matches [ i ] . m_idx1
>4707	AssignmentExpr	idx1 = matches [ i ] . m_idx1
>4708	MemberAccess	matches [ i ] . m_idx1
>4709	Identifier	m_idx1
>4710	ArrayIndexing	matches [ i ]
>4711	Identifier	i
>4712	Identifier	matches
>4713	Identifier	idx1
>4714	Identifier	idx1
>4715	IdentifierDeclType	int
>4716	IncDecOp	 
>4717	IncDec	++
>4718	Identifier	i
>4719	Condition	 
>4720	RelationalExpression	i < num_matches
>4721	Identifier	num_matches
>4722	Identifier	i
>4723	ForInit	 
>4724	IdentifierDeclStatement	int i = 0 ;
>4725	IdentifierDecl	i = 0
>4726	AssignmentExpr	i = 0
>4727	PrimaryExpression	0
>4728	Identifier	i
>4729	Identifier	i
>4730	IdentifierDeclType	int
>4731	IdentifierDeclStatement	 
>4732	IdentifierDecl	matches_new
>4733	Identifier	matches_new
>4734	IdentifierDeclType	std 
>4735	ForStatement	for ( int i = 0 ; i < num_matches ; i ++ )
>4736	CompoundStatement	 
>4737	IfStatement	if ( key_hash . find ( idx2 ) == key_hash . end ( ) )
>4738	ElseStatement	else
>4739	CompoundStatement	 
>4740	IfStatement	if ( old > matches [ i ] . m_score )
>4741	CompoundStatement	 
>4742	ExpressionStatement	 
>4743	AssignmentExpr	map [ idx2 ] = idx1
>4744	Identifier	idx1
>4745	ArrayIndexing	map [ idx2 ]
>4746	Identifier	idx2
>4747	Identifier	map
>4748	ExpressionStatement	 
>4749	AssignmentExpr	key_hash [ idx2 ] = matches [ i ] . m_score
>4750	MemberAccess	matches [ i ] . m_score
>4751	Identifier	m_score
>4752	ArrayIndexing	matches [ i ]
>4753	Identifier	i
>4754	Identifier	matches
>4755	ArrayIndexing	key_hash [ idx2 ]
>4756	Identifier	idx2
>4757	Identifier	key_hash
>4758	Condition	 
>4759	RelationalExpression	old > matches [ i ] . m_score
>4760	MemberAccess	matches [ i ] . m_score
>4761	Identifier	m_score
>4762	ArrayIndexing	matches [ i ]
>4763	Identifier	i
>4764	Identifier	matches
>4765	Identifier	old
>4766	IdentifierDeclStatement	 
>4767	IdentifierDecl	old = key_hash [ idx2 ]
>4768	AssignmentExpr	old = key_hash [ idx2 ]
>4769	ArrayIndexing	key_hash [ idx2 ]
>4770	Identifier	idx2
>4771	Identifier	key_hash
>4772	Identifier	old
>4773	Identifier	old
>4774	IdentifierDeclType	float
>4775	CompoundStatement	 
>4776	ExpressionStatement	 
>4777	AssignmentExpr	map [ idx2 ] = idx1
>4778	Identifier	idx1
>4779	ArrayIndexing	map [ idx2 ]
>4780	Identifier	idx2
>4781	Identifier	map
>4782	ExpressionStatement	 
>4783	AssignmentExpr	key_hash [ idx2 ] = matches [ i ] . m_score
>4784	MemberAccess	matches [ i ] . m_score
>4785	Identifier	m_score
>4786	ArrayIndexing	matches [ i ]
>4787	Identifier	i
>4788	Identifier	matches
>4789	ArrayIndexing	key_hash [ idx2 ]
>4790	Identifier	idx2
>4791	Identifier	key_hash
>4792	Condition	 
>4793	EqualityExpression	key_hash . find ( idx2 ) == key_hash . end ( )
>4794	CallExpression	key_hash . end ( )
>4795	ArgumentList	 
>4796	Callee	key_hash . end
>4797	MemberAccess	key_hash . end
>4798	Identifier	end
>4799	Identifier	key_hash
>4800	CallExpression	key_hash . find ( idx2 )
>4801	ArgumentList	idx2
>4802	Argument	idx2
>4803	Identifier	idx2
>4804	Callee	key_hash . find
>4805	MemberAccess	key_hash . find
>4806	Identifier	find
>4807	Identifier	key_hash
>4808	IdentifierDeclStatement	 
>4809	IdentifierDecl	idx2 = matches [ i ] . m_idx2
>4810	AssignmentExpr	idx2 = matches [ i ] . m_idx2
>4811	MemberAccess	matches [ i ] . m_idx2
>4812	Identifier	m_idx2
>4813	ArrayIndexing	matches [ i ]
>4814	Identifier	i
>4815	Identifier	matches
>4816	Identifier	idx2
>4817	Identifier	idx2
>4818	IdentifierDeclType	int
>4819	IdentifierDeclStatement	 
>4820	IdentifierDecl	idx1 = matches [ i ] . m_idx1
>4821	AssignmentExpr	idx1 = matches [ i ] . m_idx1
>4822	MemberAccess	matches [ i ] . m_idx1
>4823	Identifier	m_idx1
>4824	ArrayIndexing	matches [ i ]
>4825	Identifier	i
>4826	Identifier	matches
>4827	Identifier	idx1
>4828	Identifier	idx1
>4829	IdentifierDeclType	int
>4830	IncDecOp	 
>4831	IncDec	++
>4832	Identifier	i
>4833	Condition	 
>4834	RelationalExpression	i < num_matches
>4835	Identifier	num_matches
>4836	Identifier	i
>4837	ForInit	 
>4838	IdentifierDeclStatement	int i = 0 ;
>4839	IdentifierDecl	i = 0
>4840	AssignmentExpr	i = 0
>4841	PrimaryExpression	0
>4842	Identifier	i
>4843	Identifier	i
>4844	IdentifierDeclType	int
>4845	IdentifierDeclStatement	 
>4846	IdentifierDecl	num_matches = ( int ) matches . size ( )
>4847	AssignmentExpr	num_matches = ( int ) matches . size ( )
>4848	CastExpression	( int ) matches . size ( )
>4849	CallExpression	matches . size ( )
>4850	ArgumentList	 
>4851	Callee	matches . size
>4852	MemberAccess	matches . size
>4853	Identifier	size
>4854	Identifier	matches
>4855	CastTarget	int
>4856	Identifier	num_matches
>4857	Identifier	num_matches
>4858	IdentifierDeclType	int
>4859	IdentifierDeclStatement	 
>4860	IdentifierDecl	map
>4861	Identifier	map
>4862	IdentifierDeclType	__gnu_cxx 
>4863	IdentifierDeclStatement	 
>4864	IdentifierDecl	key_hash
>4865	Identifier	key_hash
>4866	IdentifierDeclType	__gnu_cxx 
>4891	FunctionDef	MatchKeysExhaustive (const std 
>4892	ParameterList	const std 
>4893	Parameter	 
>4894	Identifier	ratio
>4895	ParameterType	double
>4896	Parameter	 
>4897	Identifier	registered
>4898	ParameterType	bool
>4899	Parameter	 
>4900	Identifier	k2
>4901	ParameterType	const std 
>4902	Parameter	 
>4903	Identifier	k1
>4904	ParameterType	const std 
>4905	ReturnType	std 
>4906	CompoundStatement	 
>4907	ReturnStatement	 
>4908	Identifier	matches
>4909	ExpressionStatement	 
>4910	Identifier	tree
>4911	Statement	 
>4912	ExpressionStatement	 
>4913	CallExpression	ann_1_1_char 
>4914	ArgumentList	query
>4915	Argument	query
>4916	Identifier	query
>4917	Callee	ann_1_1_char 
>4918	Identifier	ann_1_1_char 
>4919	ExpressionStatement	 
>4920	CallExpression	ann_1_1_char 
>4921	ArgumentList	pts
>4922	Argument	pts
>4923	Identifier	pts
>4924	Callee	ann_1_1_char 
>4925	Identifier	ann_1_1_char 
>4926	ExpressionStatement	 
>4927	CallExpression	printf ( \"[MatchKeys] Found %d matches\n\" , num_matches )
>4928	ArgumentList	\"[MatchKeys] Found %d matches\n\"
>4929	Argument	num_matches
>4930	Identifier	num_matches
>4931	Argument	\"[MatchKeys] Found %d matches\n\"
>4932	PrimaryExpression	\"[MatchKeys] Found %d matches\n\"
>4933	Callee	printf
>4934	Identifier	printf
>4935	IdentifierDeclStatement	 
>4936	IdentifierDecl	num_matches = ( int ) matches . size ( )
>4937	AssignmentExpr	num_matches = ( int ) matches . size ( )
>4938	CastExpression	( int ) matches . size ( )
>4939	CallExpression	matches . size ( )
>4940	ArgumentList	 
>4941	Callee	matches . size
>4942	MemberAccess	matches . size
>4943	Identifier	size
>4944	Identifier	matches
>4945	CastTarget	int
>4946	Identifier	num_matches
>4947	Identifier	num_matches
>4948	IdentifierDeclType	int
>4949	ForStatement	for ( int i = 0 ; i < ( int ) k1 . size ( ) ; i ++ )
>4950	CompoundStatement	 
>4951	IfStatement	if ( sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) ) <= ratio )
>4952	CompoundStatement	 
>4953	IfStatement	if ( ! registered )
>4954	ElseStatement	else
>4955	CompoundStatement	 
>4956	ExpressionStatement	 
>4957	CallExpression	matches . push_back ( match )
>4958	ArgumentList	match
>4959	Argument	match
>4960	Identifier	match
>4961	Callee	matches . push_back
>4962	MemberAccess	matches . push_back
>4963	Identifier	push_back
>4964	Identifier	matches
>4965	IdentifierDeclStatement	 
>4966	IdentifierDecl	match = KeypointMatch ( i , registered_idxs [ nn_idx [ 0 ] ] )
>4967	AssignmentExpr	match = KeypointMatch ( i , registered_idxs [ nn_idx [ 0 ] ] )
>4968	CallExpression	KeypointMatch ( i , registered_idxs [ nn_idx [ 0 ] ] )
>4969	ArgumentList	i
>4970	Argument	registered_idxs [ nn_idx [ 0 ] ]
>4971	ArrayIndexing	registered_idxs [ nn_idx [ 0 ] ]
>4972	ArrayIndexing	nn_idx [ 0 ]
>4973	PrimaryExpression	0
>4974	Identifier	nn_idx
>4975	Identifier	registered_idxs
>4976	Argument	i
>4977	Identifier	i
>4978	Callee	KeypointMatch
>4979	Identifier	KeypointMatch
>4980	Identifier	match
>4981	Identifier	match
>4982	IdentifierDeclType	KeypointMatch
>4983	CompoundStatement	 
>4984	ExpressionStatement	 
>4985	CallExpression	matches . push_back ( KeypointMatch ( i , nn_idx [ 0 ] ) )
>4986	ArgumentList	KeypointMatch ( i , nn_idx [ 0 ] )
>4987	Argument	KeypointMatch ( i , nn_idx [ 0 ] )
>4988	CallExpression	KeypointMatch ( i , nn_idx [ 0 ] )
>4989	ArgumentList	i
>4990	Argument	nn_idx [ 0 ]
>4991	ArrayIndexing	nn_idx [ 0 ]
>4992	PrimaryExpression	0
>4993	Identifier	nn_idx
>4994	Argument	i
>4995	Identifier	i
>4996	Callee	KeypointMatch
>4997	Identifier	KeypointMatch
>4998	Callee	matches . push_back
>4999	MemberAccess	matches . push_back
>5000	Identifier	push_back
>5001	Identifier	matches
>5002	Condition	 
>5003	UnaryOp	! registered
>5004	Identifier	registered
>5005	UnaryOperator	!
>5006	Condition	 
>5007	RelationalExpression	sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) ) <= ratio
>5008	Identifier	ratio
>5009	CallExpression	sqrt ( ( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] ) )
>5010	ArgumentList	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>5011	Argument	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>5012	MultiplicativeExpression	( ( double ) dist [ 0 ] ) / ( ( double ) dist [ 1 ] )
>5013	CastExpression	( double ) dist [ 1 ]
>5014	ArrayIndexing	dist [ 1 ]
>5015	PrimaryExpression	1
>5016	Identifier	dist
>5017	CastTarget	double
>5018	CastExpression	( double ) dist [ 0 ]
>5019	ArrayIndexing	dist [ 0 ]
>5020	PrimaryExpression	0
>5021	Identifier	dist
>5022	CastTarget	double
>5023	Callee	sqrt
>5024	Identifier	sqrt
>5025	ExpressionStatement	 
>5026	CallExpression	tree -> annkSearch ( query , 2 , nn_idx , dist , 0.0 )
>5027	ArgumentList	query
>5028	Argument	0.0
>5029	PrimaryExpression	0.0
>5030	Argument	dist
>5031	Identifier	dist
>5032	Argument	nn_idx
>5033	Identifier	nn_idx
>5034	Argument	2
>5035	PrimaryExpression	2
>5036	Argument	query
>5037	Identifier	query
>5038	Callee	tree -> annkSearch
>5039	PtrMemberAccess	tree -> annkSearch
>5040	Identifier	annkSearch
>5041	Identifier	tree
>5042	IdentifierDeclStatement	 
>5043	IdentifierDecl	dist [ 2 ]
>5044	PrimaryExpression	2
>5045	Identifier	dist
>5046	IdentifierDeclType	ann_1_1_char 
>5047	IdentifierDeclStatement	 
>5048	IdentifierDecl	nn_idx [ 2 ]
>5049	PrimaryExpression	2
>5050	Identifier	nn_idx
>5051	IdentifierDeclType	ann_1_1_char 
>5052	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>5053	CompoundStatement	 
>5054	ExpressionStatement	 
>5055	AssignmentExpr	query [ j ] = k1 [ i ] . m_d [ j ]
>5056	ArrayIndexing	k1 [ i ] . m_d [ j ]
>5057	Identifier	j
>5058	MemberAccess	k1 [ i ] . m_d
>5059	Identifier	m_d
>5060	ArrayIndexing	k1 [ i ]
>5061	Identifier	i
>5062	Identifier	k1
>5063	ArrayIndexing	query [ j ]
>5064	Identifier	j
>5065	Identifier	query
>5066	IncDecOp	 
>5067	IncDec	++
>5068	Identifier	j
>5069	Condition	 
>5070	RelationalExpression	j < 128
>5071	PrimaryExpression	128
>5072	Identifier	j
>5073	ForInit	 
>5074	AssignmentExpr	j = 0
>5075	PrimaryExpression	0
>5076	Identifier	j
>5077	IdentifierDeclStatement	 
>5078	IdentifierDecl	j
>5079	Identifier	j
>5080	IdentifierDeclType	int
>5081	IncDecOp	 
>5082	IncDec	++
>5083	Identifier	i
>5084	Condition	 
>5085	RelationalExpression	i < ( int ) k1 . size ( )
>5086	CastExpression	( int ) k1 . size ( )
>5087	CallExpression	k1 . size ( )
>5088	ArgumentList	 
>5089	Callee	k1 . size
>5090	MemberAccess	k1 . size
>5091	Identifier	size
>5092	Identifier	k1
>5093	CastTarget	int
>5094	Identifier	i
>5095	ForInit	 
>5096	IdentifierDeclStatement	int i = 0 ;
>5097	IdentifierDecl	i = 0
>5098	AssignmentExpr	i = 0
>5099	PrimaryExpression	0
>5100	Identifier	i
>5101	Identifier	i
>5102	IdentifierDeclType	int
>5103	IdentifierDeclStatement	 
>5104	IdentifierDecl	query = ann_1_1_char 
>5105	AssignmentExpr	query = ann_1_1_char 
>5106	CallExpression	ann_1_1_char 
>5107	ArgumentList	128
>5108	Argument	128
>5109	PrimaryExpression	128
>5110	Callee	ann_1_1_char 
>5111	Identifier	ann_1_1_char 
>5112	Identifier	query
>5113	Identifier	query
>5114	IdentifierDeclType	ann_1_1_char 
>5115	IdentifierDeclStatement	 
>5116	IdentifierDecl	* tree = new ann_1_1_char 
>5117	AssignmentExpr	* tree = new ann_1_1_char 
>5118	Expression	pts , num_pts , 128 , 4
>5119	Expression	num_pts , 128 , 4
>5120	Expression	128 , 4
>5121	PrimaryExpression	4
>5122	PrimaryExpression	128
>5123	Identifier	num_pts
>5124	Identifier	pts
>5125	Identifier	tree
>5126	Identifier	tree
>5127	IdentifierDeclType	ann_1_1_char 
>5128	IfStatement	if ( ! registered )
>5129	ElseStatement	else
>5130	CompoundStatement	 
>5131	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>5132	CompoundStatement	 
>5133	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>5134	CompoundStatement	 
>5135	ExpressionStatement	 
>5136	AssignmentExpr	pts [ i ] [ j ] = k2 [ idx ] . m_d [ j ]
>5137	ArrayIndexing	k2 [ idx ] . m_d [ j ]
>5138	Identifier	j
>5139	MemberAccess	k2 [ idx ] . m_d
>5140	Identifier	m_d
>5141	ArrayIndexing	k2 [ idx ]
>5142	Identifier	idx
>5143	Identifier	k2
>5144	ArrayIndexing	pts [ i ] [ j ]
>5145	Identifier	j
>5146	ArrayIndexing	pts [ i ]
>5147	Identifier	i
>5148	Identifier	pts
>5149	IncDecOp	 
>5150	IncDec	++
>5151	Identifier	j
>5152	Condition	 
>5153	RelationalExpression	j < 128
>5154	PrimaryExpression	128
>5155	Identifier	j
>5156	ForInit	 
>5157	AssignmentExpr	j = 0
>5158	PrimaryExpression	0
>5159	Identifier	j
>5160	IdentifierDeclStatement	 
>5161	IdentifierDecl	idx = registered_idxs [ i ]
>5162	AssignmentExpr	idx = registered_idxs [ i ]
>5163	ArrayIndexing	registered_idxs [ i ]
>5164	Identifier	i
>5165	Identifier	registered_idxs
>5166	Identifier	idx
>5167	Identifier	idx
>5168	IdentifierDeclType	int
>5169	IdentifierDeclStatement	 
>5170	IdentifierDecl	j
>5171	Identifier	j
>5172	IdentifierDeclType	int
>5173	IncDecOp	 
>5174	IncDec	++
>5175	Identifier	i
>5176	Condition	 
>5177	RelationalExpression	i < num_pts
>5178	Identifier	num_pts
>5179	Identifier	i
>5180	ForInit	 
>5181	IdentifierDeclStatement	int i = 0 ;
>5182	IdentifierDecl	i = 0
>5183	AssignmentExpr	i = 0
>5184	PrimaryExpression	0
>5185	Identifier	i
>5186	Identifier	i
>5187	IdentifierDeclType	int
>5188	CompoundStatement	 
>5189	ForStatement	for ( int i = 0 ; i < num_pts ; i ++ )
>5190	CompoundStatement	 
>5191	ForStatement	for ( j = 0 ; j < 128 ; j ++ )
>5192	CompoundStatement	 
>5193	ExpressionStatement	 
>5194	AssignmentExpr	pts [ i ] [ j ] = k2 [ i ] . m_d [ j ]
>5195	ArrayIndexing	k2 [ i ] . m_d [ j ]
>5196	Identifier	j
>5197	MemberAccess	k2 [ i ] . m_d
>5198	Identifier	m_d
>5199	ArrayIndexing	k2 [ i ]
>5200	Identifier	i
>5201	Identifier	k2
>5202	ArrayIndexing	pts [ i ] [ j ]
>5203	Identifier	j
>5204	ArrayIndexing	pts [ i ]
>5205	Identifier	i
>5206	Identifier	pts
>5207	IncDecOp	 
>5208	IncDec	++
>5209	Identifier	j
>5210	Condition	 
>5211	RelationalExpression	j < 128
>5212	PrimaryExpression	128
>5213	Identifier	j
>5214	ForInit	 
>5215	AssignmentExpr	j = 0
>5216	PrimaryExpression	0
>5217	Identifier	j
>5218	IdentifierDeclStatement	 
>5219	IdentifierDecl	j
>5220	Identifier	j
>5221	IdentifierDeclType	int
>5222	IncDecOp	 
>5223	IncDec	++
>5224	Identifier	i
>5225	Condition	 
>5226	RelationalExpression	i < num_pts
>5227	Identifier	num_pts
>5228	Identifier	i
>5229	ForInit	 
>5230	IdentifierDeclStatement	int i = 0 ;
>5231	IdentifierDecl	i = 0
>5232	AssignmentExpr	i = 0
>5233	PrimaryExpression	0
>5234	Identifier	i
>5235	Identifier	i
>5236	IdentifierDeclType	int
>5237	Condition	 
>5238	UnaryOp	! registered
>5239	Identifier	registered
>5240	UnaryOperator	!
>5241	IdentifierDeclStatement	 
>5242	IdentifierDecl	pts = ann_1_1_char 
>5243	AssignmentExpr	pts = ann_1_1_char 
>5244	CallExpression	ann_1_1_char 
>5245	ArgumentList	num_pts
>5246	Argument	128
>5247	PrimaryExpression	128
>5248	Argument	num_pts
>5249	Identifier	num_pts
>5250	Callee	ann_1_1_char 
>5251	Identifier	ann_1_1_char 
>5252	Identifier	pts
>5253	Identifier	pts
>5254	IdentifierDeclType	ann_1_1_char 
>5255	IfStatement	if ( ! registered )
>5256	ElseStatement	else
>5257	CompoundStatement	 
>5258	ForStatement	for ( int i = 0 ; i < ( int ) k2 . size ( ) ; i ++ )
>5259	CompoundStatement	 
>5260	IfStatement	if ( k2 [ i ] . m_extra >= 0 )
>5261	CompoundStatement	 
>5262	ExpressionStatement	 
>5263	IncDecOp	num_pts ++
>5264	IncDec	++
>5265	Identifier	num_pts
>5266	ExpressionStatement	 
>5267	AssignmentExpr	registered_idxs [ num_pts ] = i
>5268	Identifier	i
>5269	ArrayIndexing	registered_idxs [ num_pts ]
>5270	Identifier	num_pts
>5271	Identifier	registered_idxs
>5272	Condition	 
>5273	RelationalExpression	k2 [ i ] . m_extra >= 0
>5274	PrimaryExpression	0
>5275	MemberAccess	k2 [ i ] . m_extra
>5276	Identifier	m_extra
>5277	ArrayIndexing	k2 [ i ]
>5278	Identifier	i
>5279	Identifier	k2
>5280	IncDecOp	 
>5281	IncDec	++
>5282	Identifier	i
>5283	Condition	 
>5284	RelationalExpression	i < ( int ) k2 . size ( )
>5285	CastExpression	( int ) k2 . size ( )
>5286	CallExpression	k2 . size ( )
>5287	ArgumentList	 
>5288	Callee	k2 . size
>5289	MemberAccess	k2 . size
>5290	Identifier	size
>5291	Identifier	k2
>5292	CastTarget	int
>5293	Identifier	i
>5294	ForInit	 
>5295	IdentifierDeclStatement	int i = 0 ;
>5296	IdentifierDecl	i = 0
>5297	AssignmentExpr	i = 0
>5298	PrimaryExpression	0
>5299	Identifier	i
>5300	Identifier	i
>5301	IdentifierDeclType	int
>5302	ExpressionStatement	 
>5303	AssignmentExpr	registered_idxs = new int [ ( int ) k2 . size ( ) ]
>5304	CastExpression	( int ) k2 . size ( )
>5305	CallExpression	k2 . size ( )
>5306	ArgumentList	 
>5307	Callee	k2 . size
>5308	MemberAccess	k2 . size
>5309	Identifier	size
>5310	Identifier	k2
>5311	CastTarget	int
>5312	Identifier	registered_idxs
>5313	CompoundStatement	 
>5314	ExpressionStatement	 
>5315	AssignmentExpr	num_pts = ( int ) k2 . size ( )
>5316	CastExpression	( int ) k2 . size ( )
>5317	CallExpression	k2 . size ( )
>5318	ArgumentList	 
>5319	Callee	k2 . size
>5320	MemberAccess	k2 . size
>5321	Identifier	size
>5322	Identifier	k2
>5323	CastTarget	int
>5324	Identifier	num_pts
>5325	Condition	 
>5326	UnaryOp	! registered
>5327	Identifier	registered
>5328	UnaryOperator	!
>5329	IdentifierDeclStatement	 
>5330	IdentifierDecl	* registered_idxs = NULL
>5331	AssignmentExpr	* registered_idxs = NULL
>5332	Identifier	NULL
>5333	Identifier	NULL
>5334	Identifier	registered_idxs
>5335	IdentifierDeclType	int *
>5336	IdentifierDeclStatement	 
>5337	IdentifierDecl	matches
>5338	Identifier	matches
>5339	IdentifierDeclType	std 
>5340	IdentifierDeclStatement	 
>5341	IdentifierDecl	num_pts = 0
>5342	AssignmentExpr	num_pts = 0
>5343	PrimaryExpression	0
>5344	Identifier	num_pts
>5345	Identifier	num_pts
>5346	IdentifierDeclType	int
<3=9,8,4
<4=5
<5=7,6
<9=53,23,12,10
<10=11
<12=13
<13=22,14
<14=20,15
<15=18,16
<16=17
<18=19
<20=21
<23=34,24
<24=27,25
<25=26
<27=28
<28=32,29
<29=30
<30=31
<32=33
<34=35
<35=37,36
<37=51,38
<38=49,47,43,39
<39=40
<40=42,41
<43=44
<44=46,45
<47=48
<49=50
<51=52
<53=57,54
<54=56,55
<57=59,58
<70=76,75,71
<71=72
<72=74,73
<76=136,131,120,90,79,77
<77=78
<79=80
<80=89,81
<81=87,82
<82=85,83
<83=84
<85=86
<87=88
<90=101,91
<91=94,92
<92=93
<94=95
<95=99,96
<96=97
<97=98
<99=100
<101=102
<102=104,103
<104=118,105
<105=116,114,110,106
<106=107
<107=109,108
<110=111
<111=113,112
<114=115
<116=117
<118=119
<120=121
<121=129,122
<122=127,125,123
<123=124
<125=126
<127=128
<129=130
<131=132
<132=135,134,133
<136=140,137
<137=139,138
<140=142,141
<154=160,159,155
<155=156
<156=158,157
<160=191,174,163,161
<161=162
<163=164
<164=173,165
<165=171,166
<166=169,167
<167=168
<169=170
<171=172
<174=175
<175=189,176
<176=185,181,179,177
<177=178
<179=180
<181=182
<182=184,183
<185=186
<186=188,187
<189=190
<191=192
<192=194,193
<202=208,207,203
<203=204
<204=206,205
<208=237,222,211,209
<209=210
<211=212
<212=221,213
<213=219,214
<214=217,215
<215=216
<217=218
<219=220
<222=223
<223=235,224
<224=233,229,225
<225=226
<226=228,227
<229=230
<230=232,231
<233=234
<235=236
<237=238
<238=240,239
<248=254,253,249
<249=250
<250=252,251
<254=467,456,255
<255=452,279,256
<256=257
<257=267,260,258
<258=259
<260=261
<261=265,262
<262=263
<263=264
<265=266
<267=268
<268=278,277,269
<269=276,270
<270=274,271
<271=272
<272=273
<274=275
<279=447,436,422,280
<280=418,304,281
<281=282
<282=292,285,283
<283=284
<285=286
<286=290,287
<287=288
<288=289
<290=291
<292=293
<293=303,302,294
<294=301,295
<295=299,296
<296=297
<297=298
<299=300
<304=407,396,305
<305=392,329,306
<306=307
<307=317,310,308
<308=309
<310=311
<311=315,312
<312=313
<313=314
<315=316
<317=318
<318=328,327,319
<319=326,320
<320=324,321
<321=322
<322=323
<324=325
<329=381,370,330
<330=366,354,331
<331=332
<332=342,335,333
<333=334
<335=336
<336=340,337
<337=338
<338=339
<340=341
<342=343
<343=353,352,344
<344=351,345
<345=349,346
<346=347
<347=348
<349=350
<354=357,355
<355=356
<357=358
<358=364,359
<359=362,360
<360=361
<362=363
<364=365
<366=367
<367=369,368
<370=371
<371=380,372
<372=378,373
<373=376,374
<374=375
<376=377
<378=379
<381=382
<382=390,383
<383=388,386,384
<384=385
<386=387
<388=389
<390=391
<392=393
<393=395,394
<396=397
<397=406,398
<398=404,399
<399=402,400
<400=401
<402=403
<404=405
<407=408
<408=416,409
<409=414,412,410
<410=411
<412=413
<414=415
<416=417
<418=419
<419=421,420
<422=423
<423=435,434,424
<424=433,425
<425=431,426
<426=429,427
<427=428
<429=430
<431=432
<436=437
<437=445,438
<438=443,441,439
<439=440
<441=442
<443=444
<445=446
<447=448
<448=451,450,449
<452=453
<453=455,454
<456=457
<457=466,458
<458=464,459
<459=462,460
<460=461
<462=463
<464=465
<467=468
<468=470,469
<486=495,494,487
<487=491,488
<488=490,489
<491=493,492
<495=720,709,496
<496=705,522,497
<497=498
<498=508,501,499
<499=500
<501=502
<502=506,503
<503=504
<504=505
<506=507
<508=509
<509=521,520,510
<510=519,511
<511=517,512
<512=515,513
<513=514
<515=516
<517=518
<522=700,689,675,523
<523=671,549,524
<524=525
<525=535,528,526
<526=527
<528=529
<529=533,530
<530=531
<531=532
<533=534
<535=536
<536=548,547,537
<537=546,538
<538=544,539
<539=542,540
<540=541
<542=543
<544=545
<549=660,649,550
<550=645,576,551
<551=552
<552=562,555,553
<553=554
<555=556
<556=560,557
<557=558
<558=559
<560=561
<562=563
<563=575,574,564
<564=573,565
<565=571,566
<566=569,567
<567=568
<569=570
<571=572
<576=634,623,577
<577=619,603,578
<578=579
<579=589,582,580
<580=581
<582=583
<583=587,584
<584=585
<585=586
<587=588
<589=590
<590=602,601,591
<591=600,592
<592=598,593
<593=596,594
<594=595
<596=597
<598=599
<603=615,606,604
<604=605
<606=607
<607=613,608
<608=611,609
<609=610
<611=612
<613=614
<615=616
<616=618,617
<619=620
<620=622,621
<623=624
<624=633,625
<625=631,626
<626=629,627
<627=628
<629=630
<631=632
<634=635
<635=643,636
<636=641,639,637
<637=638
<639=640
<641=642
<643=644
<645=646
<646=648,647
<649=650
<650=659,651
<651=657,652
<652=655,653
<653=654
<655=656
<657=658
<660=661
<661=669,662
<662=667,665,663
<663=664
<665=666
<667=668
<669=670
<671=672
<672=674,673
<675=676
<676=688,687,677
<677=686,678
<678=684,679
<679=682,680
<680=681
<682=683
<684=685
<689=690
<690=698,691
<691=696,694,692
<692=693
<694=695
<696=697
<698=699
<700=701
<701=704,703,702
<705=706
<706=708,707
<709=710
<710=719,711
<711=717,712
<712=715,713
<713=714
<715=716
<717=718
<720=721
<721=723,722
<741=747,746,742
<742=743
<743=745,744
<747=825,821,807,798,757,750,748
<748=749
<750=751
<751=753,752
<753=754
<754=756,755
<757=790,786,783,758
<758=771,759
<759=760
<760=766,761
<761=763,762
<763=765,764
<766=768,767
<768=770,769
<771=772
<772=778,773
<773=775,774
<775=777,776
<778=780,779
<780=782,781
<783=785,784
<786=787
<787=789,788
<790=791
<791=792
<792=797,796,793
<793=795,794
<798=799
<799=803,800
<800=801
<801=802
<803=804
<804=806,805
<807=808
<808=820,819,809
<809=818,810
<810=817,811
<811=813,812
<813=814
<814=816,815
<821=822
<822=824,823
<825=826
<826=838,837,827
<827=836,828
<828=834,829
<829=832,830
<830=831
<832=833
<834=835
<857=866,865,858
<858=862,859
<859=861,860
<862=864,863
<866=1249,1245,1232,1221,996,992,978,969,896,889,883,882,881,879,873,872,871,869,867
<867=868
<869=870
<873=875,874
<875=876
<876=878,877
<879=880
<883=885,884
<885=886
<886=888,887
<889=890
<890=892,891
<892=893
<893=895,894
<896=961,957,954,897
<897=942,930,918,908,898
<898=899
<899=903,900
<900=902,901
<903=905,904
<905=907,906
<908=909
<909=913,910
<910=912,911
<913=915,914
<915=917,916
<918=919
<919=925,920
<920=922,921
<922=924,923
<925=927,926
<927=929,928
<930=931
<931=937,932
<932=934,933
<934=936,935
<937=939,938
<939=941,940
<942=943
<943=949,944
<944=946,945
<946=948,947
<949=951,950
<951=953,952
<954=956,955
<957=958
<958=960,959
<961=962
<962=963
<963=968,967,964
<964=966,965
<969=970
<970=974,971
<971=972
<972=973
<974=975
<975=977,976
<978=979
<979=991,990,980
<980=989,981
<981=988,982
<982=984,983
<984=985
<985=987,986
<992=993
<993=995,994
<996=1217,1025,997
<997=998
<998=1006,999
<999=1000
<1000=1004,1001
<1001=1002
<1002=1003
<1004=1005
<1006=1007
<1007=1024,1008
<1008=1022,1009
<1009=1020,1018,1014,1010
<1010=1011
<1011=1013,1012
<1014=1015
<1015=1017,1016
<1018=1019
<1020=1021
<1022=1023
<1025=1212,1201,1187,1026
<1026=1183,1055,1027
<1027=1028
<1028=1036,1029
<1029=1030
<1030=1034,1031
<1031=1032
<1032=1033
<1034=1035
<1036=1037
<1037=1054,1038
<1038=1052,1039
<1039=1050,1048,1044,1040
<1040=1041
<1041=1043,1042
<1044=1045
<1045=1047,1046
<1048=1049
<1050=1051
<1052=1053
<1055=1172,1161,1056
<1056=1157,1085,1057
<1057=1058
<1058=1066,1059
<1059=1060
<1060=1064,1061
<1061=1062
<1062=1063
<1064=1065
<1066=1067
<1067=1084,1068
<1068=1082,1069
<1069=1080,1078,1074,1070
<1070=1071
<1071=1073,1072
<1074=1075
<1075=1077,1076
<1078=1079
<1080=1081
<1082=1083
<1085=1146,1135,1086
<1086=1131,1115,1087
<1087=1088
<1088=1096,1089
<1089=1090
<1090=1094,1091
<1091=1092
<1092=1093
<1094=1095
<1096=1097
<1097=1114,1098
<1098=1112,1099
<1099=1110,1108,1104,1100
<1100=1101
<1101=1103,1102
<1104=1105
<1105=1107,1106
<1108=1109
<1110=1111
<1112=1113
<1115=1127,1118,1116
<1116=1117
<1118=1119
<1119=1125,1120
<1120=1123,1121
<1121=1122
<1123=1124
<1125=1126
<1127=1128
<1128=1130,1129
<1131=1132
<1132=1134,1133
<1135=1136
<1136=1145,1137
<1137=1143,1138
<1138=1141,1139
<1139=1140
<1141=1142
<1143=1144
<1146=1147
<1147=1155,1148
<1148=1153,1151,1149
<1149=1150
<1151=1152
<1153=1154
<1155=1156
<1157=1158
<1158=1160,1159
<1161=1162
<1162=1171,1163
<1163=1169,1164
<1164=1167,1165
<1165=1166
<1167=1168
<1169=1170
<1172=1173
<1173=1181,1174
<1174=1179,1177,1175
<1175=1176
<1177=1178
<1179=1180
<1181=1182
<1183=1184
<1184=1186,1185
<1187=1188
<1188=1200,1199,1189
<1189=1198,1190
<1190=1196,1191
<1191=1194,1192
<1192=1193
<1194=1195
<1196=1197
<1201=1202
<1202=1210,1203
<1203=1208,1206,1204
<1204=1205
<1206=1207
<1208=1209
<1210=1211
<1212=1213
<1213=1216,1215,1214
<1217=1218
<1218=1220,1219
<1221=1222
<1222=1231,1223
<1223=1229,1224
<1224=1227,1225
<1225=1226
<1227=1228
<1229=1230
<1232=1239,1233
<1233=1238,1237,1234
<1234=1236,1235
<1239=1244,1243,1240
<1240=1242,1241
<1245=1246
<1246=1248,1247
<1249=1250
<1250=1252,1251
<1291=1303,1302,1292
<1292=1299,1296,1293
<1293=1295,1294
<1296=1298,1297
<1299=1301,1300
<1303=1308,1304
<1304=1305
<1305=1307,1306
<1308=1337,1333,1330,1309
<1309=1317,1310
<1310=1313,1311
<1311=1312
<1313=1314
<1314=1316,1315
<1317=1318
<1318=1329,1319
<1319=1321,1320
<1321=1327,1322
<1322=1325,1323
<1323=1324
<1325=1326
<1327=1328
<1330=1332,1331
<1333=1334
<1334=1336,1335
<1337=1338
<1338=1339
<1339=1344,1343,1340
<1340=1342,1341
<1354=1363,1362,1355
<1355=1359,1356
<1356=1358,1357
<1359=1361,1360
<1363=1597,1593,1563,1552,1537,1366,1364
<1364=1365
<1366=1533,1529,1526,1367
<1367=1519,1506,1468,1413,1368
<1368=1411,1392,1369
<1369=1370
<1370=1391,1390,1389,1387,1371
<1371=1372
<1372=1383,1373
<1373=1374
<1374=1375
<1375=1381,1376
<1376=1379,1377
<1377=1378
<1379=1380
<1381=1382
<1383=1384
<1384=1386,1385
<1387=1388
<1392=1393
<1393=1394
<1394=1407,1395
<1395=1396
<1396=1397
<1397=1405,1398
<1398=1403,1401,1399
<1399=1400
<1401=1402
<1403=1404
<1405=1406
<1407=1408
<1408=1410,1409
<1411=1412
<1413=1464,1460,1457,1414
<1414=1423,1415
<1415=1416
<1416=1420,1417
<1417=1419,1418
<1420=1422,1421
<1423=1434,1424
<1424=1427,1425
<1425=1426
<1427=1428
<1428=1432,1429
<1429=1430
<1430=1431
<1432=1433
<1434=1435
<1435=1443,1436
<1436=1440,1437
<1437=1439,1438
<1440=1442,1441
<1443=1445,1444
<1445=1455,1446
<1446=1453,1451,1447
<1447=1448
<1448=1450,1449
<1451=1452
<1453=1454
<1455=1456
<1457=1459,1458
<1460=1461
<1461=1463,1462
<1464=1465
<1465=1467,1466
<1468=1479,1469
<1469=1472,1470
<1470=1471
<1472=1473
<1473=1477,1474
<1474=1475
<1475=1476
<1477=1478
<1479=1480
<1480=1482,1481
<1482=1504,1483
<1483=1502,1500,1496,1492,1488,1484
<1484=1485
<1485=1487,1486
<1488=1489
<1489=1491,1490
<1492=1493
<1493=1495,1494
<1496=1497
<1497=1499,1498
<1500=1501
<1502=1503
<1504=1505
<1506=1516,1513,1510,1507
<1507=1509,1508
<1510=1512,1511
<1513=1515,1514
<1516=1518,1517
<1519=1520
<1520=1525,1524,1521
<1521=1523,1522
<1526=1528,1527
<1529=1530
<1530=1532,1531
<1533=1534
<1534=1536,1535
<1537=1548,1538
<1538=1541,1539
<1539=1540
<1541=1542
<1542=1546,1543
<1543=1544
<1544=1545
<1546=1547
<1548=1549
<1549=1551,1550
<1552=1553
<1553=1562,1554
<1554=1560,1555
<1555=1558,1556
<1556=1557
<1558=1559
<1560=1561
<1563=1574,1564
<1564=1567,1565
<1565=1566
<1567=1568
<1568=1572,1569
<1569=1570
<1570=1571
<1572=1573
<1574=1575
<1575=1577,1576
<1577=1591,1578
<1578=1589,1587,1583,1579
<1579=1580
<1580=1582,1581
<1583=1584
<1584=1586,1585
<1587=1588
<1589=1590
<1591=1592
<1593=1594
<1594=1596,1595
<1597=1610,1607,1604,1601,1598
<1598=1600,1599
<1601=1603,1602
<1604=1606,1605
<1607=1609,1608
<1610=1612,1611
<1642=1657,1656,1643
<1643=1653,1650,1647,1644
<1644=1646,1645
<1647=1649,1648
<1650=1652,1651
<1653=1655,1654
<1657=2118,2114,2084,2073,2058,2049,2033,2017,1660,1658
<1658=1659
<1660=2013,2009,2006,1661
<1661=1993,1955,1941,1927,1922,1915,1908,1901,1677,1662
<1662=1663
<1663=1674,1664
<1664=1672,1665
<1665=1670,1668,1666
<1666=1667
<1668=1669
<1670=1671
<1672=1673
<1674=1676,1675
<1677=1893,1889,1886,1678
<1678=1875,1869,1864,1679
<1679=1860,1745,1680
<1680=1681
<1681=1704,1682
<1682=1700,1696,1693,1683
<1683=1684
<1684=1688,1685
<1685=1687,1686
<1688=1692,1689
<1689=1691,1690
<1693=1695,1694
<1696=1697
<1697=1699,1698
<1700=1701
<1701=1703,1702
<1704=1705
<1705=1743,1706
<1706=1741,1739,1735,1731,1727,1723,1719,1715,1711,1707
<1707=1708
<1708=1710,1709
<1711=1712
<1712=1714,1713
<1715=1716
<1716=1718,1717
<1719=1720
<1720=1722,1721
<1723=1724
<1724=1726,1725
<1727=1728
<1728=1730,1729
<1731=1732
<1732=1734,1733
<1735=1736
<1736=1738,1737
<1739=1740
<1741=1742
<1743=1744
<1745=1859,1858,1857,1856,1855,1854,1853,1852,1851,1850,1849,1848,1847,1846,1845,1844,1843,1842,1841,1840,1839,1838,1837,1836,1835,1834,1833,1832,1831,1830,1829,1828,1827,1826,1825,1824,1823,1822,1821,1820,1746,1750,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819
<1746=1747
<1747=1749,1748
<1750=1768,1764,1761,1751
<1751=1752
<1752=1756,1753
<1753=1755,1754
<1756=1760,1757
<1757=1759,1758
<1761=1763,1762
<1764=1765
<1765=1767,1766
<1768=1769
<1769=1771,1770
<1860=1861
<1861=1863,1862
<1864=1865
<1865=1868,1867,1866
<1869=1871,1870
<1871=1872
<1872=1874,1873
<1875=1876
<1876=1884,1877
<1877=1882,1880,1878
<1878=1879
<1880=1881
<1882=1883
<1884=1885
<1886=1888,1887
<1889=1890
<1890=1892,1891
<1893=1894
<1894=1895
<1895=1900,1899,1896
<1896=1898,1897
<1901=1902
<1902=1907,1906,1903
<1903=1905,1904
<1908=1913,1909
<1909=1910
<1910=1912,1911
<1913=1914
<1915=1916
<1916=1921,1920,1917
<1917=1919,1918
<1922=1923
<1923=1926,1925,1924
<1927=1937,1928
<1928=1929
<1929=1930
<1930=1932,1931
<1932=1934,1933
<1934=1936,1935
<1937=1938
<1938=1940,1939
<1941=1951,1942
<1942=1943
<1943=1944
<1944=1946,1945
<1946=1948,1947
<1948=1950,1949
<1951=1952
<1952=1954,1953
<1955=1966,1956
<1956=1959,1957
<1957=1958
<1959=1960
<1960=1964,1961
<1961=1962
<1962=1963
<1964=1965
<1966=1967
<1967=1969,1968
<1969=1991,1970
<1970=1989,1987,1983,1979,1975,1971
<1971=1972
<1972=1974,1973
<1975=1976
<1976=1978,1977
<1979=1980
<1980=1982,1981
<1983=1984
<1984=1986,1985
<1987=1988
<1989=1990
<1991=1992
<1993=2003,2000,1997,1994
<1994=1996,1995
<1997=1999,1998
<2000=2002,2001
<2003=2005,2004
<2006=2008,2007
<2009=2010
<2010=2012,2011
<2013=2014
<2014=2016,2015
<2017=2025,2018
<2018=2019
<2019=2020
<2020=2022,2021
<2022=2024,2023
<2025=2026
<2026=2030,2027
<2027=2029,2028
<2030=2032,2031
<2033=2041,2034
<2034=2035
<2035=2036
<2036=2038,2037
<2038=2040,2039
<2041=2042
<2042=2046,2043
<2043=2045,2044
<2046=2048,2047
<2049=2050
<2050=2054,2051
<2051=2052
<2052=2053
<2054=2055
<2055=2057,2056
<2058=2069,2059
<2059=2062,2060
<2060=2061
<2062=2063
<2063=2067,2064
<2064=2065
<2065=2066
<2067=2068
<2069=2070
<2070=2072,2071
<2073=2074
<2074=2083,2075
<2075=2081,2076
<2076=2079,2077
<2077=2078
<2079=2080
<2081=2082
<2084=2095,2085
<2085=2088,2086
<2086=2087
<2088=2089
<2089=2093,2090
<2090=2091
<2091=2092
<2093=2094
<2095=2096
<2096=2098,2097
<2098=2112,2099
<2099=2110,2108,2104,2100
<2100=2101
<2101=2103,2102
<2104=2105
<2105=2107,2106
<2108=2109
<2110=2111
<2112=2113
<2114=2115
<2115=2117,2116
<2118=2128,2125,2122,2119
<2119=2121,2120
<2122=2124,2123
<2125=2127,2126
<2128=2130,2129
<2172=2187,2186,2173
<2173=2183,2180,2177,2174
<2174=2176,2175
<2177=2179,2178
<2180=2182,2181
<2183=2185,2184
<2187=2675,2671,2666,2655,2625,2614,2599,2590,2574,2558,2190,2188
<2188=2189
<2190=2554,2550,2547,2191
<2191=2534,2529,2518,2480,2466,2452,2445,2438,2431,2207,2192
<2192=2193
<2193=2204,2194
<2194=2202,2195
<2195=2200,2198,2196
<2196=2197
<2198=2199
<2200=2201
<2202=2203
<2204=2206,2205
<2207=2423,2419,2416,2208
<2208=2405,2399,2394,2209
<2209=2390,2275,2210
<2210=2211
<2211=2234,2212
<2212=2230,2226,2223,2213
<2213=2214
<2214=2218,2215
<2215=2217,2216
<2218=2222,2219
<2219=2221,2220
<2223=2225,2224
<2226=2227
<2227=2229,2228
<2230=2231
<2231=2233,2232
<2234=2235
<2235=2273,2236
<2236=2271,2269,2265,2261,2257,2253,2249,2245,2241,2237
<2237=2238
<2238=2240,2239
<2241=2242
<2242=2244,2243
<2245=2246
<2246=2248,2247
<2249=2250
<2250=2252,2251
<2253=2254
<2254=2256,2255
<2257=2258
<2258=2260,2259
<2261=2262
<2262=2264,2263
<2265=2266
<2266=2268,2267
<2269=2270
<2271=2272
<2273=2274
<2275=2389,2388,2387,2386,2385,2384,2383,2382,2381,2380,2379,2378,2377,2376,2375,2374,2373,2372,2371,2370,2369,2368,2367,2366,2365,2364,2363,2362,2361,2360,2359,2358,2357,2356,2355,2354,2353,2352,2351,2350,2276,2280,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349
<2276=2277
<2277=2279,2278
<2280=2298,2294,2291,2281
<2281=2282
<2282=2286,2283
<2283=2285,2284
<2286=2290,2287
<2287=2289,2288
<2291=2293,2292
<2294=2295
<2295=2297,2296
<2298=2299
<2299=2301,2300
<2390=2391
<2391=2393,2392
<2394=2395
<2395=2398,2397,2396
<2399=2401,2400
<2401=2402
<2402=2404,2403
<2405=2406
<2406=2414,2407
<2407=2412,2410,2408
<2408=2409
<2410=2411
<2412=2413
<2414=2415
<2416=2418,2417
<2419=2420
<2420=2422,2421
<2423=2424
<2424=2425
<2425=2430,2429,2426
<2426=2428,2427
<2431=2432
<2432=2437,2436,2433
<2433=2435,2434
<2438=2443,2439
<2439=2440
<2440=2442,2441
<2443=2444
<2445=2446
<2446=2451,2450,2447
<2447=2449,2448
<2452=2462,2453
<2453=2454
<2454=2455
<2455=2457,2456
<2457=2459,2458
<2459=2461,2460
<2462=2463
<2463=2465,2464
<2466=2476,2467
<2467=2468
<2468=2469
<2469=2471,2470
<2471=2473,2472
<2473=2475,2474
<2476=2477
<2477=2479,2478
<2480=2491,2481
<2481=2484,2482
<2482=2483
<2484=2485
<2485=2489,2486
<2486=2487
<2487=2488
<2489=2490
<2491=2492
<2492=2494,2493
<2494=2516,2495
<2495=2514,2512,2508,2504,2500,2496
<2496=2497
<2497=2499,2498
<2500=2501
<2501=2503,2502
<2504=2505
<2505=2507,2506
<2508=2509
<2509=2511,2510
<2512=2513
<2514=2515
<2516=2517
<2518=2519
<2519=2527,2520
<2520=2525,2523,2521
<2521=2522
<2523=2524
<2525=2526
<2527=2528
<2529=2530
<2530=2533,2532,2531
<2534=2544,2541,2538,2535
<2535=2537,2536
<2538=2540,2539
<2541=2543,2542
<2544=2546,2545
<2547=2549,2548
<2550=2551
<2551=2553,2552
<2554=2555
<2555=2557,2556
<2558=2566,2559
<2559=2560
<2560=2561
<2561=2563,2562
<2563=2565,2564
<2566=2567
<2567=2571,2568
<2568=2570,2569
<2571=2573,2572
<2574=2582,2575
<2575=2576
<2576=2577
<2577=2579,2578
<2579=2581,2580
<2582=2583
<2583=2587,2584
<2584=2586,2585
<2587=2589,2588
<2590=2591
<2591=2595,2592
<2592=2593
<2593=2594
<2595=2596
<2596=2598,2597
<2599=2610,2600
<2600=2603,2601
<2601=2602
<2603=2604
<2604=2608,2605
<2605=2606
<2606=2607
<2608=2609
<2610=2611
<2611=2613,2612
<2614=2615
<2615=2624,2616
<2616=2622,2617
<2617=2620,2618
<2618=2619
<2620=2621
<2622=2623
<2625=2636,2626
<2626=2629,2627
<2627=2628
<2629=2630
<2630=2634,2631
<2631=2632
<2632=2633
<2634=2635
<2636=2637
<2637=2639,2638
<2639=2653,2640
<2640=2651,2649,2645,2641
<2641=2642
<2642=2644,2643
<2645=2646
<2646=2648,2647
<2649=2650
<2651=2652
<2653=2654
<2655=2656
<2656=2664,2657
<2657=2662,2660,2658
<2658=2659
<2660=2661
<2662=2663
<2664=2665
<2666=2667
<2667=2670,2669,2668
<2671=2672
<2672=2674,2673
<2675=2685,2682,2679,2676
<2676=2678,2677
<2679=2681,2680
<2682=2684,2683
<2685=2687,2686
<2730=2745,2744,2731
<2731=2741,2738,2735,2732
<2732=2734,2733
<2735=2737,2736
<2738=2740,2739
<2741=2743,2742
<2745=2966,2949,2945,2936,2932,2928,2924,2909,2898,2887,2812,2811,2810,2809,2807,2800,2794,2777,2748,2746
<2746=2747
<2748=2769,2765,2762,2749
<2749=2750
<2750=2751
<2751=2757,2752
<2752=2756,2753
<2753=2755,2754
<2757=2759,2758
<2759=2761,2760
<2762=2764,2763
<2765=2766
<2766=2768,2767
<2769=2770
<2770=2771
<2771=2776,2775,2772
<2772=2774,2773
<2777=2778
<2778=2792,2779
<2779=2790,2786,2782,2780
<2780=2781
<2782=2783
<2783=2785,2784
<2786=2787
<2787=2789,2788
<2790=2791
<2792=2793
<2794=2795
<2795=2799,2796
<2796=2798,2797
<2800=2803,2801
<2801=2802
<2803=2804
<2804=2806,2805
<2807=2808
<2812=2879,2875,2872,2813
<2813=2860,2848,2831,2814
<2814=2827,2815
<2815=2816
<2816=2822,2817
<2817=2819,2818
<2819=2821,2820
<2822=2824,2823
<2824=2826,2825
<2827=2828
<2828=2830,2829
<2831=2844,2832
<2832=2833
<2833=2839,2834
<2834=2836,2835
<2836=2838,2837
<2839=2841,2840
<2841=2843,2842
<2844=2845
<2845=2847,2846
<2848=2849
<2849=2855,2850
<2850=2852,2851
<2852=2854,2853
<2855=2857,2856
<2857=2859,2858
<2860=2861
<2861=2867,2862
<2862=2864,2863
<2864=2866,2865
<2867=2869,2868
<2869=2871,2870
<2872=2874,2873
<2875=2876
<2876=2878,2877
<2879=2880
<2880=2881
<2881=2886,2885,2882
<2882=2884,2883
<2887=2894,2888
<2888=2889
<2889=2891,2890
<2891=2893,2892
<2894=2895
<2895=2897,2896
<2898=2905,2899
<2899=2900
<2900=2902,2901
<2902=2904,2903
<2905=2906
<2906=2908,2907
<2909=2910
<2910=2922,2911
<2911=2920,2916,2914,2912
<2912=2913
<2914=2915
<2916=2917
<2917=2919,2918
<2920=2921
<2922=2923
<2924=2925
<2925=2927,2926
<2928=2929
<2929=2931,2930
<2932=2933
<2933=2935,2934
<2936=2937
<2937=2941,2938
<2938=2939
<2939=2940
<2941=2942
<2942=2944,2943
<2945=2946
<2946=2948,2947
<2949=2950
<2950=2964,2951
<2951=2960,2956,2954,2952
<2952=2953
<2954=2955
<2956=2957
<2957=2959,2958
<2960=2961
<2961=2963,2962
<2964=2965
<2966=2967
<2967=2969,2968
<2998=3013,3012,2999
<2999=3009,3006,3003,3000
<3000=3002,3001
<3003=3005,3004
<3006=3008,3007
<3009=3011,3010
<3013=3232,3217,3213,3204,3200,3196,3192,3177,3166,3155,3080,3079,3078,3077,3075,3068,3062,3045,3016,3014
<3014=3015
<3016=3037,3033,3030,3017
<3017=3018
<3018=3019
<3019=3025,3020
<3020=3024,3021
<3021=3023,3022
<3025=3027,3026
<3027=3029,3028
<3030=3032,3031
<3033=3034
<3034=3036,3035
<3037=3038
<3038=3039
<3039=3044,3043,3040
<3040=3042,3041
<3045=3046
<3046=3060,3047
<3047=3058,3056,3048
<3048=3049
<3049=3053,3050
<3050=3052,3051
<3053=3055,3054
<3056=3057
<3058=3059
<3060=3061
<3062=3063
<3063=3067,3064
<3064=3066,3065
<3068=3071,3069
<3069=3070
<3071=3072
<3072=3074,3073
<3075=3076
<3080=3147,3143,3140,3081
<3081=3128,3116,3099,3082
<3082=3095,3083
<3083=3084
<3084=3090,3085
<3085=3087,3086
<3087=3089,3088
<3090=3092,3091
<3092=3094,3093
<3095=3096
<3096=3098,3097
<3099=3112,3100
<3100=3101
<3101=3107,3102
<3102=3104,3103
<3104=3106,3105
<3107=3109,3108
<3109=3111,3110
<3112=3113
<3113=3115,3114
<3116=3117
<3117=3123,3118
<3118=3120,3119
<3120=3122,3121
<3123=3125,3124
<3125=3127,3126
<3128=3129
<3129=3135,3130
<3130=3132,3131
<3132=3134,3133
<3135=3137,3136
<3137=3139,3138
<3140=3142,3141
<3143=3144
<3144=3146,3145
<3147=3148
<3148=3149
<3149=3154,3153,3150
<3150=3152,3151
<3155=3162,3156
<3156=3157
<3157=3159,3158
<3159=3161,3160
<3162=3163
<3163=3165,3164
<3166=3173,3167
<3167=3168
<3168=3170,3169
<3170=3172,3171
<3173=3174
<3174=3176,3175
<3177=3178
<3178=3190,3179
<3179=3188,3186,3180
<3180=3181
<3181=3183,3182
<3183=3185,3184
<3186=3187
<3188=3189
<3190=3191
<3192=3193
<3193=3195,3194
<3196=3197
<3197=3199,3198
<3200=3201
<3201=3203,3202
<3204=3205
<3205=3209,3206
<3206=3207
<3207=3208
<3209=3210
<3210=3212,3211
<3213=3214
<3214=3216,3215
<3217=3218
<3218=3230,3219
<3219=3228,3224,3220
<3220=3221
<3221=3223,3222
<3224=3225
<3225=3227,3226
<3228=3229
<3230=3231
<3232=3233
<3233=3235,3234
<3264=3276,3275,3265
<3265=3272,3269,3266
<3266=3268,3267
<3269=3271,3270
<3272=3274,3273
<3276=3428,3421,3414,3400,3393,3386,3292,3279,3277
<3277=3278
<3279=3280
<3280=3291,3290,3281
<3281=3289,3282
<3282=3288,3283
<3283=3287,3284
<3284=3286,3285
<3292=3378,3374,3371,3293
<3293=3367,3354,3322,3294
<3294=3318,3314,3311,3295
<3295=3296
<3296=3304,3297
<3297=3299,3298
<3299=3301,3300
<3301=3303,3302
<3304=3308,3305
<3305=3307,3306
<3308=3310,3309
<3311=3313,3312
<3314=3315
<3315=3317,3316
<3318=3319
<3319=3321,3320
<3322=3352,3323
<3323=3338,3324
<3324=3325
<3325=3333,3326
<3326=3332,3327
<3327=3329,3328
<3329=3331,3330
<3333=3335,3334
<3335=3337,3336
<3338=3339
<3339=3347,3340
<3340=3346,3341
<3341=3343,3342
<3343=3345,3344
<3347=3349,3348
<3349=3351,3350
<3352=3353
<3354=3355
<3355=3365,3356
<3356=3357
<3357=3358
<3358=3360,3359
<3360=3362,3361
<3362=3364,3363
<3365=3366
<3367=3368
<3368=3370,3369
<3371=3373,3372
<3374=3375
<3375=3377,3376
<3378=3379
<3379=3380
<3380=3385,3384,3381
<3381=3383,3382
<3386=3391,3387
<3387=3388
<3388=3390,3389
<3391=3392
<3393=3394
<3394=3399,3398,3395
<3395=3397,3396
<3400=3401
<3401=3413,3412,3402
<3402=3411,3403
<3403=3409,3404
<3404=3407,3405
<3405=3406
<3407=3408
<3409=3410
<3414=3419,3415
<3415=3416
<3416=3418,3417
<3419=3420
<3421=3422
<3422=3427,3426,3423
<3423=3425,3424
<3428=3429
<3429=3441,3440,3430
<3430=3439,3431
<3431=3438,3432
<3432=3434,3433
<3434=3435
<3435=3437,3436
<3470=3476,3475,3471
<3471=3472
<3472=3474,3473
<3476=3569,3562,3548,3541,3492,3479,3477
<3477=3478
<3479=3480
<3480=3491,3490,3481
<3481=3489,3482
<3482=3488,3483
<3483=3487,3484
<3484=3486,3485
<3492=3533,3529,3526,3493
<3493=3522,3494
<3494=3518,3514,3511,3495
<3495=3496
<3496=3504,3497
<3497=3499,3498
<3499=3501,3500
<3501=3503,3502
<3504=3508,3505
<3505=3507,3506
<3508=3510,3509
<3511=3513,3512
<3514=3515
<3515=3517,3516
<3518=3519
<3519=3521,3520
<3522=3523
<3523=3525,3524
<3526=3528,3527
<3529=3530
<3530=3532,3531
<3533=3534
<3534=3535
<3535=3540,3539,3536
<3536=3538,3537
<3541=3542
<3542=3547,3546,3543
<3543=3545,3544
<3548=3549
<3549=3561,3560,3550
<3550=3559,3551
<3551=3557,3552
<3552=3555,3553
<3553=3554
<3555=3556
<3557=3558
<3562=3563
<3563=3568,3567,3564
<3564=3566,3565
<3569=3570
<3570=3582,3581,3571
<3571=3580,3572
<3572=3579,3573
<3573=3575,3574
<3575=3576
<3576=3578,3577
<3606=3621,3620,3607
<3607=3617,3614,3611,3608
<3608=3610,3609
<3611=3613,3612
<3614=3616,3615
<3617=3619,3618
<3621=4062,4055,4051,4044,3970,3956,3843,3830,3818,3664,3650,3641,3634,3627,3626,3624,3622
<3622=3623
<3624=3625
<3627=3628
<3628=3632,3629
<3629=3630
<3630=3631
<3632=3633
<3634=3635
<3635=3639,3636
<3636=3637
<3637=3638
<3639=3640
<3641=3642
<3642=3648,3643
<3643=3646,3644
<3644=3645
<3646=3647
<3648=3649
<3650=3651
<3651=3663,3662,3652
<3652=3661,3653
<3653=3660,3654
<3654=3656,3655
<3656=3657
<3657=3659,3658
<3664=3810,3799,3796,3665
<3665=3792,3767,3762,3757,3740,3666
<3666=3721,3667
<3667=3668
<3668=3717,3698,3669
<3669=3670
<3670=3680,3671
<3671=3672
<3672=3676,3673
<3673=3674
<3674=3675
<3676=3677
<3677=3679,3678
<3680=3681
<3681=3697,3696,3682
<3682=3695,3683
<3683=3693,3684
<3684=3691,3685
<3685=3686
<3686=3690,3687
<3687=3689,3688
<3691=3692
<3693=3694
<3698=3699
<3699=3700
<3700=3713,3701
<3701=3702
<3702=3703
<3703=3711,3704
<3704=3709,3705
<3705=3706
<3706=3708,3707
<3709=3710
<3711=3712
<3713=3714
<3714=3716,3715
<3717=3718
<3718=3720,3719
<3721=3722
<3722=3724,3723
<3724=3738,3725
<3725=3726
<3726=3727
<3727=3733,3728
<3728=3732,3729
<3729=3731,3730
<3733=3737,3734
<3734=3736,3735
<3738=3739
<3740=3741
<3741=3753,3742
<3742=3751,3749,3747,3745,3743
<3743=3744
<3745=3746
<3747=3748
<3749=3750
<3751=3752
<3753=3754
<3754=3756,3755
<3757=3758
<3758=3761,3760,3759
<3762=3763
<3763=3766,3765,3764
<3767=3788,3784,3781,3768
<3768=3769
<3769=3770
<3770=3778,3771
<3771=3773,3772
<3773=3775,3774
<3775=3777,3776
<3778=3780,3779
<3781=3783,3782
<3784=3785
<3785=3787,3786
<3788=3789
<3789=3791,3790
<3792=3793
<3793=3795,3794
<3796=3798,3797
<3799=3800
<3800=3809,3801
<3801=3808,3802
<3802=3804,3803
<3804=3805
<3805=3807,3806
<3810=3811
<3811=3812
<3812=3817,3816,3813
<3813=3815,3814
<3818=3819
<3819=3829,3828,3820
<3820=3827,3821
<3821=3825,3822
<3822=3823
<3823=3824
<3825=3826
<3830=3831
<3831=3842,3841,3832
<3832=3840,3833
<3833=3839,3834
<3834=3838,3835
<3835=3837,3836
<3843=3952,3903,3844
<3844=3845
<3845=3846
<3846=3895,3891,3888,3847
<3847=3884,3875,3848
<3848=3871,3867,3864,3849
<3849=3850
<3850=3851
<3851=3859,3852
<3852=3854,3853
<3854=3856,3855
<3856=3858,3857
<3859=3861,3860
<3861=3863,3862
<3864=3866,3865
<3867=3868
<3868=3870,3869
<3871=3872
<3872=3874,3873
<3875=3876
<3876=3883,3882,3877
<3877=3881,3878
<3878=3880,3879
<3884=3885
<3885=3887,3886
<3888=3890,3889
<3891=3892
<3892=3894,3893
<3895=3896
<3896=3897
<3897=3902,3901,3898
<3898=3900,3899
<3903=3904
<3904=3944,3940,3937,3905
<3905=3933,3906
<3906=3929,3925,3922,3907
<3907=3908
<3908=3909
<3909=3917,3910
<3910=3912,3911
<3912=3914,3913
<3914=3916,3915
<3917=3919,3918
<3919=3921,3920
<3922=3924,3923
<3925=3926
<3926=3928,3927
<3929=3930
<3930=3932,3931
<3933=3934
<3934=3936,3935
<3937=3939,3938
<3940=3941
<3941=3943,3942
<3944=3945
<3945=3946
<3946=3951,3950,3947
<3947=3949,3948
<3952=3953
<3953=3955,3954
<3956=3957
<3957=3969,3968,3958
<3958=3967,3959
<3959=3965,3960
<3960=3963,3961
<3961=3962
<3963=3964
<3965=3966
<3970=4040,4028,3971
<3971=3972
<3972=4017,3973
<3973=4009,3998,3995,3974
<3974=3975
<3975=3987,3976
<3976=3981,3977
<3977=3978
<3978=3980,3979
<3981=3982
<3982=3984,3983
<3984=3986,3985
<3987=3988
<3988=3990,3989
<3990=3992,3991
<3992=3994,3993
<3995=3997,3996
<3998=3999
<3999=4008,4000
<4000=4007,4001
<4001=4003,4002
<4003=4004
<4004=4006,4005
<4009=4010
<4010=4011
<4011=4016,4015,4012
<4012=4014,4013
<4017=4018
<4018=4027,4019
<4019=4026,4020
<4020=4022,4021
<4022=4023
<4023=4025,4024
<4028=4029
<4029=4030
<4030=4039,4031
<4031=4038,4032
<4032=4034,4033
<4034=4035
<4035=4037,4036
<4040=4041
<4041=4043,4042
<4044=4045
<4045=4050,4049,4046
<4046=4048,4047
<4051=4052
<4052=4054,4053
<4055=4056
<4056=4061,4060,4057
<4057=4059,4058
<4062=4063
<4063=4067,4064
<4064=4065
<4065=4066
<4067=4068
<4121=4136,4135,4122
<4122=4132,4129,4126,4123
<4123=4125,4124
<4126=4128,4127
<4129=4131,4130
<4132=4134,4133
<4136=4596,4589,4585,4578,4504,4490,4377,4364,4352,4179,4165,4156,4149,4142,4141,4139,4137
<4137=4138
<4139=4140
<4142=4143
<4143=4147,4144
<4144=4145
<4145=4146
<4147=4148
<4149=4150
<4150=4154,4151
<4151=4152
<4152=4153
<4154=4155
<4156=4157
<4157=4163,4158
<4158=4161,4159
<4159=4160
<4161=4162
<4163=4164
<4165=4166
<4166=4178,4177,4167
<4167=4176,4168
<4168=4175,4169
<4169=4171,4170
<4171=4172
<4172=4174,4173
<4179=4344,4333,4330,4180
<4180=4326,4301,4296,4291,4274,4181
<4181=4255,4182
<4182=4183
<4183=4251,4219,4184
<4184=4185
<4185=4195,4186
<4186=4187
<4187=4191,4188
<4188=4189
<4189=4190
<4191=4192
<4192=4194,4193
<4195=4196
<4196=4218,4217,4197
<4197=4216,4198
<4198=4214,4199
<4199=4212,4206,4200
<4200=4201
<4201=4205,4202
<4202=4204,4203
<4206=4207
<4207=4211,4208
<4208=4210,4209
<4212=4213
<4214=4215
<4219=4229,4220
<4220=4221
<4221=4225,4222
<4222=4223
<4223=4224
<4225=4226
<4226=4228,4227
<4229=4230
<4230=4250,4249,4231
<4231=4248,4232
<4232=4246,4233
<4233=4244,4240,4234
<4234=4235
<4235=4239,4236
<4236=4238,4237
<4240=4241
<4241=4243,4242
<4244=4245
<4246=4247
<4251=4252
<4252=4254,4253
<4255=4256
<4256=4258,4257
<4258=4272,4259
<4259=4260
<4260=4261
<4261=4267,4262
<4262=4266,4263
<4263=4265,4264
<4267=4271,4268
<4268=4270,4269
<4272=4273
<4274=4275
<4275=4287,4276
<4276=4285,4283,4281,4279,4277
<4277=4278
<4279=4280
<4281=4282
<4283=4284
<4285=4286
<4287=4288
<4288=4290,4289
<4291=4292
<4292=4295,4294,4293
<4296=4297
<4297=4300,4299,4298
<4301=4322,4318,4315,4302
<4302=4303
<4303=4304
<4304=4312,4305
<4305=4307,4306
<4307=4309,4308
<4309=4311,4310
<4312=4314,4313
<4315=4317,4316
<4318=4319
<4319=4321,4320
<4322=4323
<4323=4325,4324
<4326=4327
<4327=4329,4328
<4330=4332,4331
<4333=4334
<4334=4343,4335
<4335=4342,4336
<4336=4338,4337
<4338=4339
<4339=4341,4340
<4344=4345
<4345=4346
<4346=4351,4350,4347
<4347=4349,4348
<4352=4353
<4353=4363,4362,4354
<4354=4361,4355
<4355=4359,4356
<4356=4357
<4357=4358
<4359=4360
<4364=4365
<4365=4376,4375,4366
<4366=4374,4367
<4367=4373,4368
<4368=4372,4369
<4369=4371,4370
<4377=4486,4437,4378
<4378=4379
<4379=4380
<4380=4429,4425,4422,4381
<4381=4418,4409,4382
<4382=4405,4401,4398,4383
<4383=4384
<4384=4385
<4385=4393,4386
<4386=4388,4387
<4388=4390,4389
<4390=4392,4391
<4393=4395,4394
<4395=4397,4396
<4398=4400,4399
<4401=4402
<4402=4404,4403
<4405=4406
<4406=4408,4407
<4409=4410
<4410=4417,4416,4411
<4411=4415,4412
<4412=4414,4413
<4418=4419
<4419=4421,4420
<4422=4424,4423
<4425=4426
<4426=4428,4427
<4429=4430
<4430=4431
<4431=4436,4435,4432
<4432=4434,4433
<4437=4438
<4438=4478,4474,4471,4439
<4439=4467,4440
<4440=4463,4459,4456,4441
<4441=4442
<4442=4443
<4443=4451,4444
<4444=4446,4445
<4446=4448,4447
<4448=4450,4449
<4451=4453,4452
<4453=4455,4454
<4456=4458,4457
<4459=4460
<4460=4462,4461
<4463=4464
<4464=4466,4465
<4467=4468
<4468=4470,4469
<4471=4473,4472
<4474=4475
<4475=4477,4476
<4478=4479
<4479=4480
<4480=4485,4484,4481
<4481=4483,4482
<4486=4487
<4487=4489,4488
<4490=4491
<4491=4503,4502,4492
<4492=4501,4493
<4493=4499,4494
<4494=4497,4495
<4495=4496
<4497=4498
<4499=4500
<4504=4574,4562,4505
<4505=4506
<4506=4551,4507
<4507=4543,4532,4529,4508
<4508=4509
<4509=4521,4510
<4510=4515,4511
<4511=4512
<4512=4514,4513
<4515=4516
<4516=4518,4517
<4518=4520,4519
<4521=4522
<4522=4524,4523
<4524=4526,4525
<4526=4528,4527
<4529=4531,4530
<4532=4533
<4533=4542,4534
<4534=4541,4535
<4535=4537,4536
<4537=4538
<4538=4540,4539
<4543=4544
<4544=4545
<4545=4550,4549,4546
<4546=4548,4547
<4551=4552
<4552=4561,4553
<4553=4560,4554
<4554=4556,4555
<4556=4557
<4557=4559,4558
<4562=4563
<4563=4564
<4564=4573,4565
<4565=4572,4566
<4566=4568,4567
<4568=4569
<4569=4571,4570
<4574=4575
<4575=4577,4576
<4578=4579
<4579=4584,4583,4580
<4580=4582,4581
<4585=4586
<4586=4588,4587
<4589=4590
<4590=4595,4594,4591
<4591=4593,4592
<4596=4597
<4597=4601,4598
<4598=4599
<4599=4600
<4601=4602
<4655=4661,4660,4656
<4656=4657
<4657=4659,4658
<4661=4863,4859,4845,4735,4731,4664,4662
<4662=4663
<4664=4723,4719,4716,4665
<4665=4705,4694,4666
<4666=4688,4667
<4667=4668
<4668=4669
<4669=4684,4670
<4670=4671
<4671=4672
<4672=4682,4673
<4673=4680,4678,4674
<4674=4675
<4675=4677,4676
<4678=4679
<4680=4681
<4682=4683
<4684=4685
<4685=4687,4686
<4688=4689
<4689=4691,4690
<4691=4693,4692
<4694=4695
<4695=4704,4703,4696
<4696=4702,4697
<4697=4699,4698
<4699=4701,4700
<4705=4706
<4706=4715,4714,4707
<4707=4713,4708
<4708=4710,4709
<4710=4712,4711
<4716=4718,4717
<4719=4720
<4720=4722,4721
<4723=4724
<4724=4725
<4725=4730,4729,4726
<4726=4728,4727
<4731=4732
<4732=4734,4733
<4735=4837,4833,4830,4736
<4736=4819,4808,4737
<4737=4792,4775,4738
<4738=4739
<4739=4766,4740
<4740=4758,4741
<4741=4748,4742
<4742=4743
<4743=4745,4744
<4745=4747,4746
<4748=4749
<4749=4755,4750
<4750=4752,4751
<4752=4754,4753
<4755=4757,4756
<4758=4759
<4759=4765,4760
<4760=4762,4761
<4762=4764,4763
<4766=4767
<4767=4774,4773,4768
<4768=4772,4769
<4769=4771,4770
<4775=4782,4776
<4776=4777
<4777=4779,4778
<4779=4781,4780
<4782=4783
<4783=4789,4784
<4784=4786,4785
<4786=4788,4787
<4789=4791,4790
<4792=4793
<4793=4800,4794
<4794=4796,4795
<4796=4797
<4797=4799,4798
<4800=4804,4801
<4801=4802
<4802=4803
<4804=4805
<4805=4807,4806
<4808=4809
<4809=4818,4817,4810
<4810=4816,4811
<4811=4813,4812
<4813=4815,4814
<4819=4820
<4820=4829,4828,4821
<4821=4827,4822
<4822=4824,4823
<4824=4826,4825
<4830=4832,4831
<4833=4834
<4834=4836,4835
<4837=4838
<4838=4839
<4839=4844,4843,4840
<4840=4842,4841
<4845=4846
<4846=4858,4857,4847
<4847=4856,4848
<4848=4855,4849
<4849=4851,4850
<4851=4852
<4852=4854,4853
<4859=4860
<4860=4862,4861
<4863=4864
<4864=4866,4865
<4891=4906,4905,4892
<4892=4902,4899,4896,4893
<4893=4895,4894
<4896=4898,4897
<4899=4901,4900
<4902=4904,4903
<4906=5340,5336,5329,5255,5241,5128,5115,5103,4949,4935,4926,4919,4912,4911,4909,4907
<4907=4908
<4909=4910
<4912=4913
<4913=4917,4914
<4914=4915
<4915=4916
<4917=4918
<4919=4920
<4920=4924,4921
<4921=4922
<4922=4923
<4924=4925
<4926=4927
<4927=4933,4928
<4928=4931,4929
<4929=4930
<4931=4932
<4933=4934
<4935=4936
<4936=4948,4947,4937
<4937=4946,4938
<4938=4945,4939
<4939=4941,4940
<4941=4942
<4942=4944,4943
<4949=5095,5084,5081,4950
<4950=5077,5052,5047,5042,5025,4951
<4951=5006,4952
<4952=4953
<4953=5002,4983,4954
<4954=4955
<4955=4965,4956
<4956=4957
<4957=4961,4958
<4958=4959
<4959=4960
<4961=4962
<4962=4964,4963
<4965=4966
<4966=4982,4981,4967
<4967=4980,4968
<4968=4978,4969
<4969=4976,4970
<4970=4971
<4971=4975,4972
<4972=4974,4973
<4976=4977
<4978=4979
<4983=4984
<4984=4985
<4985=4998,4986
<4986=4987
<4987=4988
<4988=4996,4989
<4989=4994,4990
<4990=4991
<4991=4993,4992
<4994=4995
<4996=4997
<4998=4999
<4999=5001,5000
<5002=5003
<5003=5005,5004
<5006=5007
<5007=5009,5008
<5009=5023,5010
<5010=5011
<5011=5012
<5012=5018,5013
<5013=5017,5014
<5014=5016,5015
<5018=5022,5019
<5019=5021,5020
<5023=5024
<5025=5026
<5026=5038,5027
<5027=5036,5034,5032,5030,5028
<5028=5029
<5030=5031
<5032=5033
<5034=5035
<5036=5037
<5038=5039
<5039=5041,5040
<5042=5043
<5043=5046,5045,5044
<5047=5048
<5048=5051,5050,5049
<5052=5073,5069,5066,5053
<5053=5054
<5054=5055
<5055=5063,5056
<5056=5058,5057
<5058=5060,5059
<5060=5062,5061
<5063=5065,5064
<5066=5068,5067
<5069=5070
<5070=5072,5071
<5073=5074
<5074=5076,5075
<5077=5078
<5078=5080,5079
<5081=5083,5082
<5084=5085
<5085=5094,5086
<5086=5093,5087
<5087=5089,5088
<5089=5090
<5090=5092,5091
<5095=5096
<5096=5097
<5097=5102,5101,5098
<5098=5100,5099
<5103=5104
<5104=5114,5113,5105
<5105=5112,5106
<5106=5110,5107
<5107=5108
<5108=5109
<5110=5111
<5115=5116
<5116=5127,5126,5117
<5117=5125,5118
<5118=5124,5119
<5119=5123,5120
<5120=5122,5121
<5128=5237,5188,5129
<5129=5130
<5130=5131
<5131=5180,5176,5173,5132
<5132=5169,5160,5133
<5133=5156,5152,5149,5134
<5134=5135
<5135=5136
<5136=5144,5137
<5137=5139,5138
<5139=5141,5140
<5141=5143,5142
<5144=5146,5145
<5146=5148,5147
<5149=5151,5150
<5152=5153
<5153=5155,5154
<5156=5157
<5157=5159,5158
<5160=5161
<5161=5168,5167,5162
<5162=5166,5163
<5163=5165,5164
<5169=5170
<5170=5172,5171
<5173=5175,5174
<5176=5177
<5177=5179,5178
<5180=5181
<5181=5182
<5182=5187,5186,5183
<5183=5185,5184
<5188=5189
<5189=5229,5225,5222,5190
<5190=5218,5191
<5191=5214,5210,5207,5192
<5192=5193
<5193=5194
<5194=5202,5195
<5195=5197,5196
<5197=5199,5198
<5199=5201,5200
<5202=5204,5203
<5204=5206,5205
<5207=5209,5208
<5210=5211
<5211=5213,5212
<5214=5215
<5215=5217,5216
<5218=5219
<5219=5221,5220
<5222=5224,5223
<5225=5226
<5226=5228,5227
<5229=5230
<5230=5231
<5231=5236,5235,5232
<5232=5234,5233
<5237=5238
<5238=5240,5239
<5241=5242
<5242=5254,5253,5243
<5243=5252,5244
<5244=5250,5245
<5245=5248,5246
<5246=5247
<5248=5249
<5250=5251
<5255=5325,5313,5256
<5256=5257
<5257=5302,5258
<5258=5294,5283,5280,5259
<5259=5260
<5260=5272,5261
<5261=5266,5262
<5262=5263
<5263=5265,5264
<5266=5267
<5267=5269,5268
<5269=5271,5270
<5272=5273
<5273=5275,5274
<5275=5277,5276
<5277=5279,5278
<5280=5282,5281
<5283=5284
<5284=5293,5285
<5285=5292,5286
<5286=5288,5287
<5288=5289
<5289=5291,5290
<5294=5295
<5295=5296
<5296=5301,5300,5297
<5297=5299,5298
<5302=5303
<5303=5312,5304
<5304=5311,5305
<5305=5307,5306
<5307=5308
<5308=5310,5309
<5313=5314
<5314=5315
<5315=5324,5316
<5316=5323,5317
<5317=5319,5318
<5319=5320
<5320=5322,5321
<5325=5326
<5326=5328,5327
<5329=5330
<5330=5335,5334,5331
<5331=5333,5332
<5336=5337
<5337=5339,5338
<5340=5341
<5341=5346,5345,5342
<5342=5344,5343
