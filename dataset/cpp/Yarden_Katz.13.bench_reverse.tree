>5	FunctionDef	bench_reverse (const MatrixType & m)
>6	ParameterList	const MatrixType & m
>7	Parameter	 
>8	Identifier	m
>9	ParameterType	const MatrixType &
>10	ReturnType	void
>11	CompoundStatement	 
>12	IfStatement	if ( acc == 123 )
>13	ExpressionStatement	 
>14	ShiftExpression	std 
>15	Identifier	acc
>16	Identifier	std 
>17	Condition	 
>18	EqualityExpression	acc == 123
>19	PrimaryExpression	123
>20	Identifier	acc
>21	ExpressionStatement	 
>22	ShiftExpression	std 
>23	PrimaryExpression	\"\n\"
>24	Identifier	std 
>25	ExpressionStatement	 
>26	ShiftExpression	std 
>27	ShiftExpression	rows << \" x \" << cols << \" \t\" << ( timerB . value ( ) * REPEAT ) / repeats << \"s \" << \"(\" << 1e-6 * \
>28	ShiftExpression	\" x \" << cols << \" \t\" << ( timerB . value ( ) * REPEAT ) / repeats << \"s \" << \"(\" << 1e-6 * size * \
>29	ShiftExpression	cols << \" \t\" << ( timerB . value ( ) * REPEAT ) / repeats << \"s \" << \"(\" << 1e-6 * size * repeats / \
>30	ShiftExpression	\" \t\" << ( timerB . value ( ) * REPEAT ) / repeats << \"s \" << \"(\" << 1e-6 * size * repeats / timerB \
>31	ShiftExpression	( timerB . value ( ) * REPEAT ) / repeats << \"s \" << \"(\" << 1e-6 * size * repeats / timerB . value ( ) << \" \
>32	ShiftExpression	\"s \" << \"(\" << 1e-6 * size * repeats / timerB . value ( ) << \" MFLOPS)\t\"
>33	ShiftExpression	\"(\" << 1e-6 * size * repeats / timerB . value ( ) << \" MFLOPS)\t\"
>34	ShiftExpression	1e-6 * size * repeats / timerB . value ( ) << \" MFLOPS)\t\"
>35	PrimaryExpression	\" MFLOPS)\t\"
>36	MultiplicativeExpression	1e-6 * size * repeats / timerB . value ( )
>37	MultiplicativeExpression	size * repeats / timerB . value ( )
>38	MultiplicativeExpression	repeats / timerB . value ( )
>39	CallExpression	timerB . value ( )
>40	ArgumentList	 
>41	Callee	timerB . value
>42	MemberAccess	timerB . value
>43	Identifier	value
>44	Identifier	timerB
>45	Identifier	repeats
>46	Identifier	size
>47	PrimaryExpression	1e-6
>48	PrimaryExpression	\"(\"
>49	PrimaryExpression	\"s \"
>50	MultiplicativeExpression	( timerB . value ( ) * REPEAT ) / repeats
>51	Identifier	repeats
>52	MultiplicativeExpression	timerB . value ( ) * REPEAT
>53	Identifier	REPEAT
>54	CallExpression	timerB . value ( )
>55	ArgumentList	 
>56	Callee	timerB . value
>57	MemberAccess	timerB . value
>58	Identifier	value
>59	Identifier	timerB
>60	PrimaryExpression	\" \t\"
>61	Identifier	cols
>62	PrimaryExpression	\" x \"
>63	Identifier	rows
>64	Identifier	std 
>65	IfStatement	if ( MatrixType 
>66	ElseStatement	else
>67	ExpressionStatement	 
>68	ShiftExpression	std 
>69	PrimaryExpression	\"fixed \"
>70	Identifier	std 
>71	ExpressionStatement	 
>72	ShiftExpression	std 
>73	PrimaryExpression	\"dyn   \"
>74	Identifier	std 
>75	Condition	 
>76	EqualityExpression	MatrixType 
>77	Identifier	Dynamic
>78	Identifier	MatrixType 
>79	ForStatement	for ( int t = 0 ; t < TRIES ; ++ t )
>80	CompoundStatement	 
>81	ExpressionStatement	 
>82	CallExpression	timerB . stop ( )
>83	ArgumentList	 
>84	Callee	timerB . stop
>85	MemberAccess	timerB . stop
>86	Identifier	stop
>87	Identifier	timerB
>88	ForStatement	for ( int k = 0 ; k < repeats ; ++ k )
>89	CompoundStatement	 
>90	ExpressionStatement	 
>91	AssignmentExpr	acc += b . coeff ( r , c )
>92	CallExpression	b . coeff ( r , c )
>93	ArgumentList	r
>94	Argument	c
>95	Identifier	c
>96	Argument	r
>97	Identifier	r
>98	Callee	b . coeff
>99	MemberAccess	b . coeff
>100	Identifier	coeff
>101	Identifier	b
>102	Identifier	acc
>103	ExpressionStatement	 
>104	CallExpression	asm ( \"#end foo\" )
>105	ArgumentList	\"#end foo\"
>106	Argument	\"#end foo\"
>107	PrimaryExpression	\"#end foo\"
>108	Callee	asm
>109	Identifier	asm
>110	ExpressionStatement	 
>111	AssignmentExpr	b = a . reverse ( )
>112	CallExpression	a . reverse ( )
>113	ArgumentList	 
>114	Callee	a . reverse
>115	MemberAccess	a . reverse
>116	Identifier	reverse
>117	Identifier	a
>118	Identifier	b
>119	ExpressionStatement	 
>120	CallExpression	asm ( \"#begin foo\" )
>121	ArgumentList	\"#begin foo\"
>122	Argument	\"#begin foo\"
>123	PrimaryExpression	\"#begin foo\"
>124	Callee	asm
>125	Identifier	asm
>126	UnaryExpression	 
>127	Identifier	k
>128	IncDec	++
>129	Condition	 
>130	RelationalExpression	k < repeats
>131	Identifier	repeats
>132	Identifier	k
>133	ForInit	 
>134	IdentifierDeclStatement	int k = 0 ;
>135	IdentifierDecl	k = 0
>136	AssignmentExpr	k = 0
>137	PrimaryExpression	0
>138	Identifier	k
>139	Identifier	k
>140	IdentifierDeclType	int
>141	ExpressionStatement	 
>142	CallExpression	timerB . start ( )
>143	ArgumentList	 
>144	Callee	timerB . start
>145	MemberAccess	timerB . start
>146	Identifier	start
>147	Identifier	timerB
>148	UnaryExpression	 
>149	Identifier	t
>150	IncDec	++
>151	Condition	 
>152	RelationalExpression	t < TRIES
>153	Identifier	TRIES
>154	Identifier	t
>155	ForInit	 
>156	IdentifierDeclStatement	int t = 0 ;
>157	IdentifierDecl	t = 0
>158	AssignmentExpr	t = 0
>159	PrimaryExpression	0
>160	Identifier	t
>161	Identifier	t
>162	IdentifierDeclType	int
>163	IdentifierDeclStatement	 
>164	IdentifierDecl	c = internal 
>165	AssignmentExpr	c = internal 
>166	RelationalExpression	internal 
>167	RelationalExpression	int > ( 0 , cols - 1 )
>168	Expression	0 , cols - 1
>169	AdditiveExpression	cols - 1
>170	PrimaryExpression	1
>171	Identifier	cols
>172	PrimaryExpression	0
>173	Identifier	int
>174	Identifier	internal 
>175	Identifier	c
>176	Identifier	c
>177	IdentifierDeclType	int
>178	IdentifierDeclStatement	 
>179	IdentifierDecl	r = internal 
>180	AssignmentExpr	r = internal 
>181	RelationalExpression	internal 
>182	RelationalExpression	int > ( 0 , rows - 1 )
>183	Expression	0 , rows - 1
>184	AdditiveExpression	rows - 1
>185	PrimaryExpression	1
>186	Identifier	rows
>187	PrimaryExpression	0
>188	Identifier	int
>189	Identifier	internal 
>190	Identifier	r
>191	Identifier	r
>192	IdentifierDeclType	int
>193	IdentifierDeclStatement	 
>194	IdentifierDecl	acc = 0
>195	AssignmentExpr	acc = 0
>196	PrimaryExpression	0
>197	Identifier	acc
>198	Identifier	acc
>199	IdentifierDeclType	Scalar
>200	IdentifierDeclStatement	 
>201	IdentifierDecl	timerV
>202	Identifier	timerV
>203	IdentifierDeclType	BenchTimer
>204	IdentifierDecl	timerH
>205	Identifier	timerH
>206	IdentifierDeclType	BenchTimer
>207	IdentifierDecl	timerB
>208	Identifier	timerB
>209	IdentifierDeclType	BenchTimer
>210	IdentifierDeclStatement	 
>211	IdentifierDecl	b = MatrixType 
>212	AssignmentExpr	b = MatrixType 
>213	CallExpression	MatrixType 
>214	ArgumentList	rows
>215	Argument	cols
>216	Identifier	cols
>217	Argument	rows
>218	Identifier	rows
>219	Callee	MatrixType 
>220	Identifier	MatrixType 
>221	Identifier	b
>222	Identifier	b
>223	IdentifierDeclType	MatrixType
>224	IdentifierDeclStatement	 
>225	IdentifierDecl	a = MatrixType 
>226	AssignmentExpr	a = MatrixType 
>227	CallExpression	MatrixType 
>228	ArgumentList	rows
>229	Argument	cols
>230	Identifier	cols
>231	Argument	rows
>232	Identifier	rows
>233	Callee	MatrixType 
>234	Identifier	MatrixType 
>235	Identifier	a
>236	Identifier	a
>237	IdentifierDeclType	MatrixType
>238	IdentifierDeclStatement	 
>239	IdentifierDecl	repeats = ( REPEAT * 1000 ) / size
>240	AssignmentExpr	repeats = ( REPEAT * 1000 ) / size
>241	MultiplicativeExpression	( REPEAT * 1000 ) / size
>242	Identifier	size
>243	MultiplicativeExpression	REPEAT * 1000
>244	PrimaryExpression	1000
>245	Identifier	REPEAT
>246	Identifier	repeats
>247	Identifier	repeats
>248	IdentifierDeclType	int
>249	IdentifierDeclStatement	 
>250	IdentifierDecl	size = m . size ( )
>251	AssignmentExpr	size = m . size ( )
>252	CallExpression	m . size ( )
>253	ArgumentList	 
>254	Callee	m . size
>255	MemberAccess	m . size
>256	Identifier	size
>257	Identifier	m
>258	Identifier	size
>259	Identifier	size
>260	IdentifierDeclType	int
>261	IdentifierDeclStatement	 
>262	IdentifierDecl	cols = m . cols ( )
>263	AssignmentExpr	cols = m . cols ( )
>264	CallExpression	m . cols ( )
>265	ArgumentList	 
>266	Callee	m . cols
>267	MemberAccess	m . cols
>268	Identifier	cols
>269	Identifier	m
>270	Identifier	cols
>271	Identifier	cols
>272	IdentifierDeclType	int
>273	IdentifierDeclStatement	 
>274	IdentifierDecl	rows = m . rows ( )
>275	AssignmentExpr	rows = m . rows ( )
>276	CallExpression	m . rows ( )
>277	ArgumentList	 
>278	Callee	m . rows
>279	MemberAccess	m . rows
>280	Identifier	rows
>281	Identifier	m
>282	Identifier	rows
>283	Identifier	rows
>284	IdentifierDeclType	int
>315	FunctionDef	main (int argc , char * argv [ ])
>316	ParameterList	int argc , char * argv [ ]
>317	Parameter	 
>318	Identifier	argv
>319	ParameterType	char * [ ]
>320	Parameter	 
>321	Identifier	argc
>322	ParameterType	int
>323	ReturnType	int
>324	CompoundStatement	 
>325	ReturnStatement	 
>326	PrimaryExpression	0
>327	ForStatement	for ( uint i = 0 ; dynsizes [ i ] > 0 ; ++ i )
>328	CompoundStatement	 
>329	ExpressionStatement	 
>330	CallExpression	bench_reverse ( Matrix < Scalar , Dynamic , 1 > ( dynsizes [ i ] * dynsizes [ i ] ) )
>331	ArgumentList	Matrix < Scalar
>332	Argument	1 > ( dynsizes [ i ] * dynsizes [ i ] )
>333	RelationalExpression	1 > ( dynsizes [ i ] * dynsizes [ i ] )
>334	MultiplicativeExpression	dynsizes [ i ] * dynsizes [ i ]
>335	ArrayIndexing	dynsizes [ i ]
>336	Identifier	i
>337	Identifier	dynsizes
>338	ArrayIndexing	dynsizes [ i ]
>339	Identifier	i
>340	Identifier	dynsizes
>341	PrimaryExpression	1
>342	Argument	Dynamic
>343	Identifier	Dynamic
>344	Argument	Matrix < Scalar
>345	RelationalExpression	Matrix < Scalar
>346	Identifier	Scalar
>347	Identifier	Matrix
>348	Callee	bench_reverse
>349	Identifier	bench_reverse
>350	ExpressionStatement	 
>351	CallExpression	bench_reverse ( Matrix < Scalar , Dynamic , Dynamic > ( dynsizes [ i ] , dynsizes [ i ] ) )
>352	ArgumentList	Matrix < Scalar
>353	Argument	Dynamic > ( dynsizes [ i ] , dynsizes [ i ] )
>354	RelationalExpression	Dynamic > ( dynsizes [ i ] , dynsizes [ i ] )
>355	Expression	dynsizes [ i ] , dynsizes [ i ]
>356	ArrayIndexing	dynsizes [ i ]
>357	Identifier	i
>358	Identifier	dynsizes
>359	ArrayIndexing	dynsizes [ i ]
>360	Identifier	i
>361	Identifier	dynsizes
>362	Identifier	Dynamic
>363	Argument	Dynamic
>364	Identifier	Dynamic
>365	Argument	Matrix < Scalar
>366	RelationalExpression	Matrix < Scalar
>367	Identifier	Scalar
>368	Identifier	Matrix
>369	Callee	bench_reverse
>370	Identifier	bench_reverse
>371	UnaryExpression	 
>372	Identifier	i
>373	IncDec	++
>374	Condition	 
>375	RelationalExpression	dynsizes [ i ] > 0
>376	PrimaryExpression	0
>377	ArrayIndexing	dynsizes [ i ]
>378	Identifier	i
>379	Identifier	dynsizes
>380	ForInit	 
>381	IdentifierDeclStatement	uint i = 0 ;
>382	IdentifierDecl	i = 0
>383	AssignmentExpr	i = 0
>384	PrimaryExpression	0
>385	Identifier	i
>386	Identifier	i
>387	IdentifierDeclType	uint
>388	ExpressionStatement	 
>389	ShiftExpression	std 
>390	PrimaryExpression	\"\n\"
>391	Identifier	std 
>392	ExpressionStatement	 
>393	ShiftExpression	std 
>394	PrimaryExpression	\"size            no sqrt                           standard\"
>395	Identifier	std 
>396	IdentifierDeclStatement	 
>397	IdentifierDecl	dynsizes [ ] = { 4 , 6 , 8 , 16 , 24 , 32 , 49 , 64 , 128 , 256 , 512 , 900 , 0 }
>398	AssignmentExpr	dynsizes [ ] = { 4 , 6 , 8 , 16 , 24 , 32 , 49 , 64 , 128 , 256 , 512 , 900 , 0 }
>399	InitializerList	4
>400	PrimaryExpression	0
>401	PrimaryExpression	900
>402	PrimaryExpression	512
>403	PrimaryExpression	256
>404	PrimaryExpression	128
>405	PrimaryExpression	64
>406	PrimaryExpression	49
>407	PrimaryExpression	32
>408	PrimaryExpression	24
>409	PrimaryExpression	16
>410	PrimaryExpression	8
>411	PrimaryExpression	6
>412	PrimaryExpression	4
>413	Identifier	dynsizes
>414	Identifier	dynsizes
>415	IdentifierDeclType	const int [ ]
<5=11,10,6
<6=7
<7=9,8
<11=273,261,249,238,224,210,200,193,178,163,79,65,25,21,12
<12=17,13
<13=14
<14=16,15
<17=18
<18=20,19
<21=22
<22=24,23
<25=26
<26=64,27
<27=63,28
<28=62,29
<29=61,30
<30=60,31
<31=50,32
<32=49,33
<33=48,34
<34=36,35
<36=47,37
<37=46,38
<38=45,39
<39=41,40
<41=42
<42=44,43
<50=52,51
<52=54,53
<54=56,55
<56=57
<57=59,58
<65=75,71,66
<66=67
<67=68
<68=70,69
<71=72
<72=74,73
<75=76
<76=78,77
<79=155,151,148,80
<80=141,88,81
<81=82
<82=84,83
<84=85
<85=87,86
<88=133,129,126,89
<89=119,110,103,90
<90=91
<91=102,92
<92=98,93
<93=96,94
<94=95
<96=97
<98=99
<99=101,100
<103=104
<104=108,105
<105=106
<106=107
<108=109
<110=111
<111=118,112
<112=114,113
<114=115
<115=117,116
<119=120
<120=124,121
<121=122
<122=123
<124=125
<126=128,127
<129=130
<130=132,131
<133=134
<134=135
<135=140,139,136
<136=138,137
<141=142
<142=144,143
<144=145
<145=147,146
<148=150,149
<151=152
<152=154,153
<155=156
<156=157
<157=162,161,158
<158=160,159
<163=164
<164=177,176,165
<165=175,166
<166=174,167
<167=173,168
<168=172,169
<169=171,170
<178=179
<179=192,191,180
<180=190,181
<181=189,182
<182=188,183
<183=187,184
<184=186,185
<193=194
<194=199,198,195
<195=197,196
<200=207,204,201
<201=203,202
<204=206,205
<207=209,208
<210=211
<211=223,222,212
<212=221,213
<213=219,214
<214=217,215
<215=216
<217=218
<219=220
<224=225
<225=237,236,226
<226=235,227
<227=233,228
<228=231,229
<229=230
<231=232
<233=234
<238=239
<239=248,247,240
<240=246,241
<241=243,242
<243=245,244
<249=250
<250=260,259,251
<251=258,252
<252=254,253
<254=255
<255=257,256
<261=262
<262=272,271,263
<263=270,264
<264=266,265
<266=267
<267=269,268
<273=274
<274=284,283,275
<275=282,276
<276=278,277
<278=279
<279=281,280
<315=324,323,316
<316=320,317
<317=319,318
<320=322,321
<324=396,392,388,327,325
<325=326
<327=380,374,371,328
<328=350,329
<329=330
<330=348,331
<331=344,342,332
<332=333
<333=341,334
<334=338,335
<335=337,336
<338=340,339
<342=343
<344=345
<345=347,346
<348=349
<350=351
<351=369,352
<352=365,363,353
<353=354
<354=362,355
<355=359,356
<356=358,357
<359=361,360
<363=364
<365=366
<366=368,367
<369=370
<371=373,372
<374=375
<375=377,376
<377=379,378
<380=381
<381=382
<382=387,386,383
<383=385,384
<388=389
<389=391,390
<392=393
<393=395,394
<396=397
<397=415,414,398
<398=413,399
<399=412,411,410,409,408,407,406,405,404,403,402,401,400
