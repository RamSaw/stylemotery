>3	FunctionDef	SyncStateMonitor 
>4	ParameterList	 
>5	CompoundStatement	 
>6	ExpressionStatement	 
>7	CallExpression	mStates -> setType ( Map )
>8	ArgumentList	Map
>9	Argument	Map
>10	Identifier	Map
>11	Callee	mStates -> setType
>12	PtrMemberAccess	mStates -> setType
>13	Identifier	setType
>14	Identifier	mStates
>20	FunctionDef	SyncStateMonitor 
>21	ParameterList	 
>22	CompoundStatement	 
>26	FunctionDef	SyncStateMonitor 
>27	ParameterList	monarch 
>28	Parameter	 
>29	Identifier	stateInfos
>30	ParameterType	monarch 
>31	ReturnType	bool
>32	CompoundStatement	 
>33	ReturnStatement	 
>34	Identifier	rval
>35	ExpressionStatement	 
>36	CallExpression	mLock . unlockExclusive ( )
>37	ArgumentList	 
>38	Callee	mLock . unlockExclusive
>39	MemberAccess	mLock . unlockExclusive
>40	Identifier	unlockExclusive
>41	Identifier	mLock
>42	CompoundStatement	 
>43	IfStatement	if ( rval )
>44	CompoundStatement	 
>45	ExpressionStatement	 
>46	CallExpression	resetStates ( stateInfos )
>47	ArgumentList	stateInfos
>48	Argument	stateInfos
>49	Identifier	stateInfos
>50	Callee	resetStates
>51	Identifier	resetStates
>52	WhileStatement	while ( i -> hasNext ( ) )
>53	CompoundStatement	 
>54	ExpressionStatement	 
>55	AssignmentExpr	mStates [ state ] [ \"info\" ] = stateInfo
>56	Identifier	stateInfo
>57	ArrayIndexing	mStates [ state ] [ \"info\" ]
>58	PrimaryExpression	\"info\"
>59	ArrayIndexing	mStates [ state ]
>60	Identifier	state
>61	Identifier	mStates
>62	IdentifierDeclStatement	 
>63	IdentifierDecl	* state = i -> getName ( )
>64	AssignmentExpr	* state = i -> getName ( )
>65	CallExpression	i -> getName ( )
>66	ArgumentList	 
>67	Callee	i -> getName
>68	PtrMemberAccess	i -> getName
>69	Identifier	getName
>70	Identifier	i
>71	Identifier	state
>72	Identifier	state
>73	IdentifierDeclType	const char *
>74	IdentifierDeclStatement	 
>75	IdentifierDecl	& stateInfo = i -> next ( )
>76	AssignmentExpr	& stateInfo = i -> next ( )
>77	CallExpression	i -> next ( )
>78	ArgumentList	 
>79	Callee	i -> next
>80	PtrMemberAccess	i -> next
>81	Identifier	next
>82	Identifier	i
>83	Identifier	stateInfo
>84	Identifier	stateInfo
>85	IdentifierDeclType	DynamicObject &
>86	Condition	 
>87	CallExpression	i -> hasNext ( )
>88	ArgumentList	 
>89	Callee	i -> hasNext
>90	PtrMemberAccess	i -> hasNext
>91	Identifier	hasNext
>92	Identifier	i
>93	IdentifierDeclStatement	 
>94	IdentifierDecl	i = stateInfos . getIterator ( )
>95	AssignmentExpr	i = stateInfos . getIterator ( )
>96	CallExpression	stateInfos . getIterator ( )
>97	ArgumentList	 
>98	Callee	stateInfos . getIterator
>99	MemberAccess	stateInfos . getIterator
>100	Identifier	getIterator
>101	Identifier	stateInfos
>102	Identifier	i
>103	Identifier	i
>104	IdentifierDeclType	DynamicObjectIterator
>105	Condition	 
>106	Identifier	rval
>107	WhileStatement	while ( rval && i -> hasNext ( ) )
>108	CompoundStatement	 
>109	IfStatement	if ( rval && ! next -> hasMember ( \"init\" ) )
>110	CompoundStatement	 
>111	ExpressionStatement	 
>112	AssignmentExpr	rval = false
>113	Identifier	false
>114	Identifier	rval
>115	ExpressionStatement	 
>116	CallExpression	Exception 
>117	ArgumentList	e
>118	Argument	e
>119	Identifier	e
>120	Callee	Exception 
>121	Identifier	Exception 
>122	ExpressionStatement	 
>123	AssignmentExpr	e -> getDetails ( ) [ \"state\" ] = state
>124	Identifier	state
>125	ArrayIndexing	e -> getDetails ( ) [ \"state\" ]
>126	PrimaryExpression	\"state\"
>127	CallExpression	e -> getDetails ( )
>128	ArgumentList	 
>129	Callee	e -> getDetails
>130	PtrMemberAccess	e -> getDetails
>131	Identifier	getDetails
>132	Identifier	e
>133	IdentifierDeclStatement	 
>134	IdentifierDecl	e = new Exception ( \"StateInfo does not have \\"init\\" value.\" , \"bitmunk.common.BadMonitorStateInfo\" )
>135	AssignmentExpr	e = new Exception ( \"StateInfo does not have \\"init\\" value.\" , \"bitmunk.common.BadMonitorStateInfo\" )
>136	Expression	\"StateInfo does not have \\"init\\" value.\" , \"bitmunk.common.BadMonitorStateInfo\"
>137	PrimaryExpression	\"bitmunk.common.BadMonitorStateInfo\"
>138	PrimaryExpression	\"StateInfo does not have \\"init\\" value.\"
>139	Identifier	e
>140	Identifier	e
>141	IdentifierDeclType	ExceptionRef
>142	Condition	 
>143	AndExpression	rval && ! next -> hasMember ( \"init\" )
>144	UnaryOp	! next -> hasMember ( \"init\" )
>145	CallExpression	next -> hasMember ( \"init\" )
>146	ArgumentList	\"init\"
>147	Argument	\"init\"
>148	PrimaryExpression	\"init\"
>149	Callee	next -> hasMember
>150	PtrMemberAccess	next -> hasMember
>151	Identifier	hasMember
>152	Identifier	next
>153	UnaryOperator	!
>154	Identifier	rval
>155	IfStatement	if ( mStates -> hasMember ( state ) )
>156	CompoundStatement	 
>157	ExpressionStatement	 
>158	AssignmentExpr	rval = false
>159	Identifier	false
>160	Identifier	rval
>161	ExpressionStatement	 
>162	CallExpression	Exception 
>163	ArgumentList	e
>164	Argument	e
>165	Identifier	e
>166	Callee	Exception 
>167	Identifier	Exception 
>168	ExpressionStatement	 
>169	AssignmentExpr	e -> getDetails ( ) [ \"state\" ] = state
>170	Identifier	state
>171	ArrayIndexing	e -> getDetails ( ) [ \"state\" ]
>172	PrimaryExpression	\"state\"
>173	CallExpression	e -> getDetails ( )
>174	ArgumentList	 
>175	Callee	e -> getDetails
>176	PtrMemberAccess	e -> getDetails
>177	Identifier	getDetails
>178	Identifier	e
>179	IdentifierDeclStatement	 
>180	IdentifierDecl	e = new Exception ( \"Attempt to add duplicate StateMonitor state.\" , \"bitmunk.common.DuplicateMonitorState\" )
>181	AssignmentExpr	e = new Exception ( \"Attempt to add duplicate StateMonitor state.\" , \"bitmunk.common.DuplicateMonitorState\" )
>182	Expression	\"Attempt to add duplicate StateMonitor state.\" , \"bitmunk.common.DuplicateMonitorState\"
>183	PrimaryExpression	\"bitmunk.common.DuplicateMonitorState\"
>184	PrimaryExpression	\"Attempt to add duplicate StateMonitor state.\"
>185	Identifier	e
>186	Identifier	e
>187	IdentifierDeclType	ExceptionRef
>188	Condition	 
>189	CallExpression	mStates -> hasMember ( state )
>190	ArgumentList	state
>191	Argument	state
>192	Identifier	state
>193	Callee	mStates -> hasMember
>194	PtrMemberAccess	mStates -> hasMember
>195	Identifier	hasMember
>196	Identifier	mStates
>197	IdentifierDeclStatement	 
>198	IdentifierDecl	* state = i -> getName ( )
>199	AssignmentExpr	* state = i -> getName ( )
>200	CallExpression	i -> getName ( )
>201	ArgumentList	 
>202	Callee	i -> getName
>203	PtrMemberAccess	i -> getName
>204	Identifier	getName
>205	Identifier	i
>206	Identifier	state
>207	Identifier	state
>208	IdentifierDeclType	const char *
>209	IdentifierDeclStatement	 
>210	IdentifierDecl	& next = i -> next ( )
>211	AssignmentExpr	& next = i -> next ( )
>212	CallExpression	i -> next ( )
>213	ArgumentList	 
>214	Callee	i -> next
>215	PtrMemberAccess	i -> next
>216	Identifier	next
>217	Identifier	i
>218	Identifier	next
>219	Identifier	next
>220	IdentifierDeclType	DynamicObject &
>221	Condition	 
>222	AndExpression	rval && i -> hasNext ( )
>223	CallExpression	i -> hasNext ( )
>224	ArgumentList	 
>225	Callee	i -> hasNext
>226	PtrMemberAccess	i -> hasNext
>227	Identifier	hasNext
>228	Identifier	i
>229	Identifier	rval
>230	IdentifierDeclStatement	 
>231	IdentifierDecl	i = stateInfos . getIterator ( )
>232	AssignmentExpr	i = stateInfos . getIterator ( )
>233	CallExpression	stateInfos . getIterator ( )
>234	ArgumentList	 
>235	Callee	stateInfos . getIterator
>236	MemberAccess	stateInfos . getIterator
>237	Identifier	getIterator
>238	Identifier	stateInfos
>239	Identifier	i
>240	Identifier	i
>241	IdentifierDeclType	DynamicObjectIterator
>242	ExpressionStatement	 
>243	CallExpression	mLock . lockExclusive ( )
>244	ArgumentList	 
>245	Callee	mLock . lockExclusive
>246	MemberAccess	mLock . lockExclusive
>247	Identifier	lockExclusive
>248	Identifier	mLock
>249	IdentifierDeclStatement	 
>250	IdentifierDecl	rval = true
>251	AssignmentExpr	rval = true
>252	Identifier	true
>253	Identifier	true
>254	Identifier	rval
>255	IdentifierDeclType	bool
>286	FunctionDef	SyncStateMonitor 
>287	ParameterList	 
>288	ReturnType	void
>289	CompoundStatement	 
>290	ExpressionStatement	 
>291	CallExpression	mLock . unlockExclusive ( )
>292	ArgumentList	 
>293	Callee	mLock . unlockExclusive
>294	MemberAccess	mLock . unlockExclusive
>295	Identifier	unlockExclusive
>296	Identifier	mLock
>297	CompoundStatement	 
>298	ExpressionStatement	 
>299	CallExpression	mStates -> clear ( )
>300	ArgumentList	 
>301	Callee	mStates -> clear
>302	PtrMemberAccess	mStates -> clear
>303	Identifier	clear
>304	Identifier	mStates
>305	ExpressionStatement	 
>306	CallExpression	mLock . lockExclusive ( )
>307	ArgumentList	 
>308	Callee	mLock . lockExclusive
>309	MemberAccess	mLock . lockExclusive
>310	Identifier	lockExclusive
>311	Identifier	mLock
>317	FunctionDef	_checkState (const char * state , DynamicObject & states , const char * action)
>318	ParameterList	const char * state , DynamicObject & states , const char * action
>319	Parameter	 
>320	Identifier	action
>321	ParameterType	const char *
>322	Parameter	 
>323	Identifier	states
>324	ParameterType	DynamicObject &
>325	Parameter	 
>326	Identifier	state
>327	ParameterType	const char *
>328	ReturnType	static bool
>329	CompoundStatement	 
>330	ReturnStatement	 
>331	Identifier	rval
>332	IfStatement	if ( ! rval )
>333	CompoundStatement	 
>334	ExpressionStatement	 
>335	CallExpression	Exception 
>336	ArgumentList	e
>337	Argument	e
>338	Identifier	e
>339	Callee	Exception 
>340	Identifier	Exception 
>341	ExpressionStatement	 
>342	AssignmentExpr	e -> getDetails ( ) [ \"action\" ] = action
>343	Identifier	action
>344	ArrayIndexing	e -> getDetails ( ) [ \"action\" ]
>345	PrimaryExpression	\"action\"
>346	CallExpression	e -> getDetails ( )
>347	ArgumentList	 
>348	Callee	e -> getDetails
>349	PtrMemberAccess	e -> getDetails
>350	Identifier	getDetails
>351	Identifier	e
>352	ExpressionStatement	 
>353	AssignmentExpr	e -> getDetails ( ) [ \"state\" ] = state
>354	Identifier	state
>355	ArrayIndexing	e -> getDetails ( ) [ \"state\" ]
>356	PrimaryExpression	\"state\"
>357	CallExpression	e -> getDetails ( )
>358	ArgumentList	 
>359	Callee	e -> getDetails
>360	PtrMemberAccess	e -> getDetails
>361	Identifier	getDetails
>362	Identifier	e
>363	IdentifierDeclStatement	 
>364	IdentifierDecl	e = new Exception ( \"Attempt to access unknown StateMonitor state.\" , \"bitmunk.common.UnknownMonitorState\" )
>365	AssignmentExpr	e = new Exception ( \"Attempt to access unknown StateMonitor state.\" , \"bitmunk.common.UnknownMonitorState\" )
>366	Expression	\"Attempt to access unknown StateMonitor state.\" , \"bitmunk.common.UnknownMonitorState\"
>367	PrimaryExpression	\"bitmunk.common.UnknownMonitorState\"
>368	PrimaryExpression	\"Attempt to access unknown StateMonitor state.\"
>369	Identifier	e
>370	Identifier	e
>371	IdentifierDeclType	ExceptionRef
>372	Condition	 
>373	UnaryOp	! rval
>374	Identifier	rval
>375	UnaryOperator	!
>376	IdentifierDeclStatement	 
>377	IdentifierDecl	rval = states -> hasMember ( state )
>378	AssignmentExpr	rval = states -> hasMember ( state )
>379	CallExpression	states -> hasMember ( state )
>380	ArgumentList	state
>381	Argument	state
>382	Identifier	state
>383	Callee	states -> hasMember
>384	PtrMemberAccess	states -> hasMember
>385	Identifier	hasMember
>386	Identifier	states
>387	Identifier	rval
>388	Identifier	rval
>389	IdentifierDeclType	bool
>404	FunctionDef	SyncStateMonitor 
>405	ParameterList	DynamicObject & states
>406	Parameter	 
>407	Identifier	states
>408	ParameterType	DynamicObject &
>409	ReturnType	bool
>410	CompoundStatement	 
>411	ReturnStatement	 
>412	Identifier	rval
>413	ExpressionStatement	 
>414	CallExpression	mLock . unlockExclusive ( )
>415	ArgumentList	 
>416	Callee	mLock . unlockExclusive
>417	MemberAccess	mLock . unlockExclusive
>418	Identifier	unlockExclusive
>419	Identifier	mLock
>420	CompoundStatement	 
>421	IfStatement	if ( rval )
>422	CompoundStatement	 
>423	WhileStatement	while ( i -> hasNext ( ) )
>424	CompoundStatement	 
>425	ExpressionStatement	 
>426	CallExpression	mStates -> removeMember ( i -> getName ( ) )
>427	ArgumentList	i -> getName ( )
>428	Argument	i -> getName ( )
>429	CallExpression	i -> getName ( )
>430	ArgumentList	 
>431	Callee	i -> getName
>432	PtrMemberAccess	i -> getName
>433	Identifier	getName
>434	Identifier	i
>435	Callee	mStates -> removeMember
>436	PtrMemberAccess	mStates -> removeMember
>437	Identifier	removeMember
>438	Identifier	mStates
>439	ExpressionStatement	 
>440	CallExpression	i -> next ( )
>441	ArgumentList	 
>442	Callee	i -> next
>443	PtrMemberAccess	i -> next
>444	Identifier	next
>445	Identifier	i
>446	Condition	 
>447	CallExpression	i -> hasNext ( )
>448	ArgumentList	 
>449	Callee	i -> hasNext
>450	PtrMemberAccess	i -> hasNext
>451	Identifier	hasNext
>452	Identifier	i
>453	IdentifierDeclStatement	 
>454	IdentifierDecl	i = states . getIterator ( )
>455	AssignmentExpr	i = states . getIterator ( )
>456	CallExpression	states . getIterator ( )
>457	ArgumentList	 
>458	Callee	states . getIterator
>459	MemberAccess	states . getIterator
>460	Identifier	getIterator
>461	Identifier	states
>462	Identifier	i
>463	Identifier	i
>464	IdentifierDeclType	DynamicObjectIterator
>465	Condition	 
>466	Identifier	rval
>467	WhileStatement	while ( rval && i -> hasNext ( ) )
>468	CompoundStatement	 
>469	ExpressionStatement	 
>470	AssignmentExpr	rval = _checkState ( i -> getName ( ) , mStates , \"remove\" )
>471	CallExpression	_checkState ( i -> getName ( ) , mStates , \"remove\" )
>472	ArgumentList	i -> getName ( )
>473	Argument	\"remove\"
>474	PrimaryExpression	\"remove\"
>475	Argument	mStates
>476	Identifier	mStates
>477	Argument	i -> getName ( )
>478	CallExpression	i -> getName ( )
>479	ArgumentList	 
>480	Callee	i -> getName
>481	PtrMemberAccess	i -> getName
>482	Identifier	getName
>483	Identifier	i
>484	Callee	_checkState
>485	Identifier	_checkState
>486	Identifier	rval
>487	ExpressionStatement	 
>488	CallExpression	i -> next ( )
>489	ArgumentList	 
>490	Callee	i -> next
>491	PtrMemberAccess	i -> next
>492	Identifier	next
>493	Identifier	i
>494	Condition	 
>495	AndExpression	rval && i -> hasNext ( )
>496	CallExpression	i -> hasNext ( )
>497	ArgumentList	 
>498	Callee	i -> hasNext
>499	PtrMemberAccess	i -> hasNext
>500	Identifier	hasNext
>501	Identifier	i
>502	Identifier	rval
>503	IdentifierDeclStatement	 
>504	IdentifierDecl	i = states . getIterator ( )
>505	AssignmentExpr	i = states . getIterator ( )
>506	CallExpression	states . getIterator ( )
>507	ArgumentList	 
>508	Callee	states . getIterator
>509	MemberAccess	states . getIterator
>510	Identifier	getIterator
>511	Identifier	states
>512	Identifier	i
>513	Identifier	i
>514	IdentifierDeclType	DynamicObjectIterator
>515	ExpressionStatement	 
>516	CallExpression	mLock . lockExclusive ( )
>517	ArgumentList	 
>518	Callee	mLock . lockExclusive
>519	MemberAccess	mLock . lockExclusive
>520	Identifier	lockExclusive
>521	Identifier	mLock
>522	IdentifierDeclStatement	 
>523	IdentifierDecl	rval = true
>524	AssignmentExpr	rval = true
>525	Identifier	true
>526	Identifier	true
>527	Identifier	rval
>528	IdentifierDeclType	bool
>543	FunctionDef	SyncStateMonitor 
>544	ParameterList	 
>545	ReturnType	void
>546	CompoundStatement	 
>547	ExpressionStatement	 
>548	CallExpression	mLock . unlockExclusive ( )
>549	ArgumentList	 
>550	Callee	mLock . unlockExclusive
>551	MemberAccess	mLock . unlockExclusive
>552	Identifier	unlockExclusive
>553	Identifier	mLock
>554	CompoundStatement	 
>555	WhileStatement	while ( i -> hasNext ( ) )
>556	CompoundStatement	 
>557	ExpressionStatement	 
>558	AssignmentExpr	next [ \"value\" ] = next [ \"info\" ] [ \"init\" ] . clone ( )
>559	CallExpression	next [ \"info\" ] [ \"init\" ] . clone ( )
>560	ArgumentList	 
>561	Callee	next [ \"info\" ] [ \"init\" ] . clone
>562	MemberAccess	next [ \"info\" ] [ \"init\" ] . clone
>563	Identifier	clone
>564	ArrayIndexing	next [ \"info\" ] [ \"init\" ]
>565	PrimaryExpression	\"init\"
>566	ArrayIndexing	next [ \"info\" ]
>567	PrimaryExpression	\"info\"
>568	Identifier	next
>569	ArrayIndexing	next [ \"value\" ]
>570	PrimaryExpression	\"value\"
>571	Identifier	next
>572	IdentifierDeclStatement	 
>573	IdentifierDecl	& next = i -> next ( )
>574	AssignmentExpr	& next = i -> next ( )
>575	CallExpression	i -> next ( )
>576	ArgumentList	 
>577	Callee	i -> next
>578	PtrMemberAccess	i -> next
>579	Identifier	next
>580	Identifier	i
>581	Identifier	next
>582	Identifier	next
>583	IdentifierDeclType	DynamicObject &
>584	Condition	 
>585	CallExpression	i -> hasNext ( )
>586	ArgumentList	 
>587	Callee	i -> hasNext
>588	PtrMemberAccess	i -> hasNext
>589	Identifier	hasNext
>590	Identifier	i
>591	IdentifierDeclStatement	 
>592	IdentifierDecl	i = mStates . getIterator ( )
>593	AssignmentExpr	i = mStates . getIterator ( )
>594	CallExpression	mStates . getIterator ( )
>595	ArgumentList	 
>596	Callee	mStates . getIterator
>597	MemberAccess	mStates . getIterator
>598	Identifier	getIterator
>599	Identifier	mStates
>600	Identifier	i
>601	Identifier	i
>602	IdentifierDeclType	DynamicObjectIterator
>603	ExpressionStatement	 
>604	CallExpression	mLock . lockExclusive ( )
>605	ArgumentList	 
>606	Callee	mLock . lockExclusive
>607	MemberAccess	mLock . lockExclusive
>608	Identifier	lockExclusive
>609	Identifier	mLock
>624	FunctionDef	SyncStateMonitor 
>625	ParameterList	DynamicObject & states
>626	Parameter	 
>627	Identifier	states
>628	ParameterType	DynamicObject &
>629	ReturnType	bool
>630	CompoundStatement	 
>631	ReturnStatement	 
>632	Identifier	rval
>633	ExpressionStatement	 
>634	CallExpression	mLock . unlockExclusive ( )
>635	ArgumentList	 
>636	Callee	mLock . unlockExclusive
>637	MemberAccess	mLock . unlockExclusive
>638	Identifier	unlockExclusive
>639	Identifier	mLock
>640	CompoundStatement	 
>641	IfStatement	if ( rval )
>642	CompoundStatement	 
>643	WhileStatement	while ( i -> hasNext ( ) )
>644	CompoundStatement	 
>645	ExpressionStatement	 
>646	AssignmentExpr	s [ \"value\" ] = s [ \"info\" ] [ \"init\" ] . clone ( )
>647	CallExpression	s [ \"info\" ] [ \"init\" ] . clone ( )
>648	ArgumentList	 
>649	Callee	s [ \"info\" ] [ \"init\" ] . clone
>650	MemberAccess	s [ \"info\" ] [ \"init\" ] . clone
>651	Identifier	clone
>652	ArrayIndexing	s [ \"info\" ] [ \"init\" ]
>653	PrimaryExpression	\"init\"
>654	ArrayIndexing	s [ \"info\" ]
>655	PrimaryExpression	\"info\"
>656	Identifier	s
>657	ArrayIndexing	s [ \"value\" ]
>658	PrimaryExpression	\"value\"
>659	Identifier	s
>660	IdentifierDeclStatement	 
>661	IdentifierDecl	& s = mStates [ i -> getName ( ) ]
>662	AssignmentExpr	& s = mStates [ i -> getName ( ) ]
>663	ArrayIndexing	mStates [ i -> getName ( ) ]
>664	CallExpression	i -> getName ( )
>665	ArgumentList	 
>666	Callee	i -> getName
>667	PtrMemberAccess	i -> getName
>668	Identifier	getName
>669	Identifier	i
>670	Identifier	mStates
>671	Identifier	s
>672	Identifier	s
>673	IdentifierDeclType	DynamicObject &
>674	ExpressionStatement	 
>675	CallExpression	i -> next ( )
>676	ArgumentList	 
>677	Callee	i -> next
>678	PtrMemberAccess	i -> next
>679	Identifier	next
>680	Identifier	i
>681	Condition	 
>682	CallExpression	i -> hasNext ( )
>683	ArgumentList	 
>684	Callee	i -> hasNext
>685	PtrMemberAccess	i -> hasNext
>686	Identifier	hasNext
>687	Identifier	i
>688	IdentifierDeclStatement	 
>689	IdentifierDecl	i = states . getIterator ( )
>690	AssignmentExpr	i = states . getIterator ( )
>691	CallExpression	states . getIterator ( )
>692	ArgumentList	 
>693	Callee	states . getIterator
>694	MemberAccess	states . getIterator
>695	Identifier	getIterator
>696	Identifier	states
>697	Identifier	i
>698	Identifier	i
>699	IdentifierDeclType	DynamicObjectIterator
>700	Condition	 
>701	Identifier	rval
>702	WhileStatement	while ( rval && i -> hasNext ( ) )
>703	CompoundStatement	 
>704	ExpressionStatement	 
>705	AssignmentExpr	rval = _checkState ( i -> getName ( ) , mStates , \"reset\" )
>706	CallExpression	_checkState ( i -> getName ( ) , mStates , \"reset\" )
>707	ArgumentList	i -> getName ( )
>708	Argument	\"reset\"
>709	PrimaryExpression	\"reset\"
>710	Argument	mStates
>711	Identifier	mStates
>712	Argument	i -> getName ( )
>713	CallExpression	i -> getName ( )
>714	ArgumentList	 
>715	Callee	i -> getName
>716	PtrMemberAccess	i -> getName
>717	Identifier	getName
>718	Identifier	i
>719	Callee	_checkState
>720	Identifier	_checkState
>721	Identifier	rval
>722	ExpressionStatement	 
>723	CallExpression	i -> next ( )
>724	ArgumentList	 
>725	Callee	i -> next
>726	PtrMemberAccess	i -> next
>727	Identifier	next
>728	Identifier	i
>729	Condition	 
>730	AndExpression	rval && i -> hasNext ( )
>731	CallExpression	i -> hasNext ( )
>732	ArgumentList	 
>733	Callee	i -> hasNext
>734	PtrMemberAccess	i -> hasNext
>735	Identifier	hasNext
>736	Identifier	i
>737	Identifier	rval
>738	IdentifierDeclStatement	 
>739	IdentifierDecl	i = states . getIterator ( )
>740	AssignmentExpr	i = states . getIterator ( )
>741	CallExpression	states . getIterator ( )
>742	ArgumentList	 
>743	Callee	states . getIterator
>744	MemberAccess	states . getIterator
>745	Identifier	getIterator
>746	Identifier	states
>747	Identifier	i
>748	Identifier	i
>749	IdentifierDeclType	DynamicObjectIterator
>750	ExpressionStatement	 
>751	CallExpression	mLock . lockExclusive ( )
>752	ArgumentList	 
>753	Callee	mLock . lockExclusive
>754	MemberAccess	mLock . lockExclusive
>755	Identifier	lockExclusive
>756	Identifier	mLock
>757	IdentifierDeclStatement	 
>758	IdentifierDecl	rval = true
>759	AssignmentExpr	rval = true
>760	Identifier	true
>761	Identifier	true
>762	Identifier	rval
>763	IdentifierDeclType	bool
>785	FunctionDef	SyncStateMonitor 
>786	ParameterList	DynamicObject & states , bool clone
>787	Parameter	 
>788	Identifier	clone
>789	ParameterType	bool
>790	Parameter	 
>791	Identifier	states
>792	ParameterType	DynamicObject &
>793	ReturnType	bool
>794	CompoundStatement	 
>795	ReturnStatement	 
>796	Identifier	rval
>797	ExpressionStatement	 
>798	CallExpression	mLock . unlockExclusive ( )
>799	ArgumentList	 
>800	Callee	mLock . unlockExclusive
>801	MemberAccess	mLock . unlockExclusive
>802	Identifier	unlockExclusive
>803	Identifier	mLock
>804	CompoundStatement	 
>805	IfStatement	if ( rval )
>806	CompoundStatement	 
>807	WhileStatement	while ( rval && i -> hasNext ( ) )
>808	CompoundStatement	 
>809	ExpressionStatement	 
>810	AssignmentExpr	mStates [ i -> getName ( ) ] [ \"value\" ] = ( clone ? v . clone ( ) 
>811	ConditionalExpression	clone ? v . clone ( ) 
>812	Identifier	v
>813	CallExpression	v . clone ( )
>814	ArgumentList	 
>815	Callee	v . clone
>816	MemberAccess	v . clone
>817	Identifier	clone
>818	Identifier	v
>819	Condition	clone
>820	Identifier	clone
>821	ArrayIndexing	mStates [ i -> getName ( ) ] [ \"value\" ]
>822	PrimaryExpression	\"value\"
>823	ArrayIndexing	mStates [ i -> getName ( ) ]
>824	CallExpression	i -> getName ( )
>825	ArgumentList	 
>826	Callee	i -> getName
>827	PtrMemberAccess	i -> getName
>828	Identifier	getName
>829	Identifier	i
>830	Identifier	mStates
>831	IdentifierDeclStatement	 
>832	IdentifierDecl	& v = i -> next ( )
>833	AssignmentExpr	& v = i -> next ( )
>834	CallExpression	i -> next ( )
>835	ArgumentList	 
>836	Callee	i -> next
>837	PtrMemberAccess	i -> next
>838	Identifier	next
>839	Identifier	i
>840	Identifier	v
>841	Identifier	v
>842	IdentifierDeclType	DynamicObject &
>843	Condition	 
>844	AndExpression	rval && i -> hasNext ( )
>845	CallExpression	i -> hasNext ( )
>846	ArgumentList	 
>847	Callee	i -> hasNext
>848	PtrMemberAccess	i -> hasNext
>849	Identifier	hasNext
>850	Identifier	i
>851	Identifier	rval
>852	IdentifierDeclStatement	 
>853	IdentifierDecl	i = states . getIterator ( )
>854	AssignmentExpr	i = states . getIterator ( )
>855	CallExpression	states . getIterator ( )
>856	ArgumentList	 
>857	Callee	states . getIterator
>858	MemberAccess	states . getIterator
>859	Identifier	getIterator
>860	Identifier	states
>861	Identifier	i
>862	Identifier	i
>863	IdentifierDeclType	DynamicObjectIterator
>864	Condition	 
>865	Identifier	rval
>866	ExpressionStatement	 
>867	CallExpression	mLock . lockExclusive ( )
>868	ArgumentList	 
>869	Callee	mLock . lockExclusive
>870	MemberAccess	mLock . lockExclusive
>871	Identifier	lockExclusive
>872	Identifier	mLock
>873	IdentifierDeclStatement	 
>874	IdentifierDecl	rval = true
>875	AssignmentExpr	rval = true
>876	Identifier	true
>877	Identifier	true
>878	Identifier	rval
>879	IdentifierDeclType	bool
>903	FunctionDef	SyncStateMonitor 
>904	ParameterList	 
>905	ReturnType	DynamicObject
>906	CompoundStatement	 
>907	ReturnStatement	 
>908	Identifier	rval
>909	ExpressionStatement	 
>910	CallExpression	mLock . unlockShared ( )
>911	ArgumentList	 
>912	Callee	mLock . unlockShared
>913	MemberAccess	mLock . unlockShared
>914	Identifier	unlockShared
>915	Identifier	mLock
>916	CompoundStatement	 
>917	WhileStatement	while ( i -> hasNext ( ) )
>918	CompoundStatement	 
>919	ExpressionStatement	 
>920	AssignmentExpr	rval [ i -> getName ( ) ] = v . clone ( )
>921	CallExpression	v . clone ( )
>922	ArgumentList	 
>923	Callee	v . clone
>924	MemberAccess	v . clone
>925	Identifier	clone
>926	Identifier	v
>927	ArrayIndexing	rval [ i -> getName ( ) ]
>928	CallExpression	i -> getName ( )
>929	ArgumentList	 
>930	Callee	i -> getName
>931	PtrMemberAccess	i -> getName
>932	Identifier	getName
>933	Identifier	i
>934	Identifier	rval
>935	IdentifierDeclStatement	 
>936	IdentifierDecl	& v = next [ \"value\" ]
>937	AssignmentExpr	& v = next [ \"value\" ]
>938	ArrayIndexing	next [ \"value\" ]
>939	PrimaryExpression	\"value\"
>940	Identifier	next
>941	Identifier	v
>942	Identifier	v
>943	IdentifierDeclType	DynamicObject &
>944	IdentifierDeclStatement	 
>945	IdentifierDecl	& next = i -> next ( )
>946	AssignmentExpr	& next = i -> next ( )
>947	CallExpression	i -> next ( )
>948	ArgumentList	 
>949	Callee	i -> next
>950	PtrMemberAccess	i -> next
>951	Identifier	next
>952	Identifier	i
>953	Identifier	next
>954	Identifier	next
>955	IdentifierDeclType	DynamicObject &
>956	Condition	 
>957	CallExpression	i -> hasNext ( )
>958	ArgumentList	 
>959	Callee	i -> hasNext
>960	PtrMemberAccess	i -> hasNext
>961	Identifier	hasNext
>962	Identifier	i
>963	IdentifierDeclStatement	 
>964	IdentifierDecl	i = mStates . getIterator ( )
>965	AssignmentExpr	i = mStates . getIterator ( )
>966	CallExpression	mStates . getIterator ( )
>967	ArgumentList	 
>968	Callee	mStates . getIterator
>969	MemberAccess	mStates . getIterator
>970	Identifier	getIterator
>971	Identifier	mStates
>972	Identifier	i
>973	Identifier	i
>974	IdentifierDeclType	DynamicObjectIterator
>975	ExpressionStatement	 
>976	CallExpression	mLock . lockShared ( )
>977	ArgumentList	 
>978	Callee	mLock . lockShared
>979	MemberAccess	mLock . lockShared
>980	Identifier	lockShared
>981	Identifier	mLock
>982	ExpressionStatement	 
>983	CallExpression	rval -> setType ( Map )
>984	ArgumentList	Map
>985	Argument	Map
>986	Identifier	Map
>987	Callee	rval -> setType
>988	PtrMemberAccess	rval -> setType
>989	Identifier	setType
>990	Identifier	rval
>991	IdentifierDeclStatement	 
>992	IdentifierDecl	rval
>993	Identifier	rval
>994	IdentifierDeclType	DynamicObject
>1015	FunctionDef	SyncStateMonitor 
>1016	ParameterList	DynamicObject & states
>1017	Parameter	 
>1018	Identifier	states
>1019	ParameterType	DynamicObject &
>1020	ReturnType	bool
>1021	CompoundStatement	 
>1022	ReturnStatement	 
>1023	Identifier	rval
>1024	ExpressionStatement	 
>1025	CallExpression	mLock . unlockShared ( )
>1026	ArgumentList	 
>1027	Callee	mLock . unlockShared
>1028	MemberAccess	mLock . unlockShared
>1029	Identifier	unlockShared
>1030	Identifier	mLock
>1031	CompoundStatement	 
>1032	IfStatement	if ( rval )
>1033	CompoundStatement	 
>1034	WhileStatement	while ( rval && i -> hasNext ( ) )
>1035	CompoundStatement	 
>1036	ExpressionStatement	 
>1037	AssignmentExpr	states [ state ] = v . clone ( )
>1038	CallExpression	v . clone ( )
>1039	ArgumentList	 
>1040	Callee	v . clone
>1041	MemberAccess	v . clone
>1042	Identifier	clone
>1043	Identifier	v
>1044	ArrayIndexing	states [ state ]
>1045	Identifier	state
>1046	Identifier	states
>1047	IdentifierDeclStatement	 
>1048	IdentifierDecl	& v = mStates [ state ] [ \"value\" ]
>1049	AssignmentExpr	& v = mStates [ state ] [ \"value\" ]
>1050	ArrayIndexing	mStates [ state ] [ \"value\" ]
>1051	PrimaryExpression	\"value\"
>1052	ArrayIndexing	mStates [ state ]
>1053	Identifier	state
>1054	Identifier	mStates
>1055	Identifier	v
>1056	Identifier	v
>1057	IdentifierDeclType	DynamicObject &
>1058	IdentifierDeclStatement	 
>1059	IdentifierDecl	* state = i -> getName ( )
>1060	AssignmentExpr	* state = i -> getName ( )
>1061	CallExpression	i -> getName ( )
>1062	ArgumentList	 
>1063	Callee	i -> getName
>1064	PtrMemberAccess	i -> getName
>1065	Identifier	getName
>1066	Identifier	i
>1067	Identifier	state
>1068	Identifier	state
>1069	IdentifierDeclType	const char *
>1070	ExpressionStatement	 
>1071	CallExpression	i -> next ( )
>1072	ArgumentList	 
>1073	Callee	i -> next
>1074	PtrMemberAccess	i -> next
>1075	Identifier	next
>1076	Identifier	i
>1077	Condition	 
>1078	AndExpression	rval && i -> hasNext ( )
>1079	CallExpression	i -> hasNext ( )
>1080	ArgumentList	 
>1081	Callee	i -> hasNext
>1082	PtrMemberAccess	i -> hasNext
>1083	Identifier	hasNext
>1084	Identifier	i
>1085	Identifier	rval
>1086	IdentifierDeclStatement	 
>1087	IdentifierDecl	i = states . getIterator ( )
>1088	AssignmentExpr	i = states . getIterator ( )
>1089	CallExpression	states . getIterator ( )
>1090	ArgumentList	 
>1091	Callee	states . getIterator
>1092	MemberAccess	states . getIterator
>1093	Identifier	getIterator
>1094	Identifier	states
>1095	Identifier	i
>1096	Identifier	i
>1097	IdentifierDeclType	DynamicObjectIterator
>1098	Condition	 
>1099	Identifier	rval
>1100	WhileStatement	while ( rval && i -> hasNext ( ) )
>1101	CompoundStatement	 
>1102	ExpressionStatement	 
>1103	AssignmentExpr	rval = _checkState ( i -> getName ( ) , mStates , \"get\" )
>1104	CallExpression	_checkState ( i -> getName ( ) , mStates , \"get\" )
>1105	ArgumentList	i -> getName ( )
>1106	Argument	\"get\"
>1107	PrimaryExpression	\"get\"
>1108	Argument	mStates
>1109	Identifier	mStates
>1110	Argument	i -> getName ( )
>1111	CallExpression	i -> getName ( )
>1112	ArgumentList	 
>1113	Callee	i -> getName
>1114	PtrMemberAccess	i -> getName
>1115	Identifier	getName
>1116	Identifier	i
>1117	Callee	_checkState
>1118	Identifier	_checkState
>1119	Identifier	rval
>1120	ExpressionStatement	 
>1121	CallExpression	i -> next ( )
>1122	ArgumentList	 
>1123	Callee	i -> next
>1124	PtrMemberAccess	i -> next
>1125	Identifier	next
>1126	Identifier	i
>1127	Condition	 
>1128	AndExpression	rval && i -> hasNext ( )
>1129	CallExpression	i -> hasNext ( )
>1130	ArgumentList	 
>1131	Callee	i -> hasNext
>1132	PtrMemberAccess	i -> hasNext
>1133	Identifier	hasNext
>1134	Identifier	i
>1135	Identifier	rval
>1136	IdentifierDeclStatement	 
>1137	IdentifierDecl	i = states . getIterator ( )
>1138	AssignmentExpr	i = states . getIterator ( )
>1139	CallExpression	states . getIterator ( )
>1140	ArgumentList	 
>1141	Callee	states . getIterator
>1142	MemberAccess	states . getIterator
>1143	Identifier	getIterator
>1144	Identifier	states
>1145	Identifier	i
>1146	Identifier	i
>1147	IdentifierDeclType	DynamicObjectIterator
>1148	ExpressionStatement	 
>1149	CallExpression	mLock . lockShared ( )
>1150	ArgumentList	 
>1151	Callee	mLock . lockShared
>1152	MemberAccess	mLock . lockShared
>1153	Identifier	lockShared
>1154	Identifier	mLock
>1155	IdentifierDeclStatement	 
>1156	IdentifierDecl	rval = true
>1157	AssignmentExpr	rval = true
>1158	Identifier	true
>1159	Identifier	true
>1160	Identifier	rval
>1161	IdentifierDeclType	bool
>1184	FunctionDef	SyncStateMonitor 
>1185	ParameterList	DynamicObject & adjustments , bool clone
>1186	Parameter	 
>1187	Identifier	clone
>1188	ParameterType	bool
>1189	Parameter	 
>1190	Identifier	adjustments
>1191	ParameterType	DynamicObject &
>1192	ReturnType	bool
>1193	CompoundStatement	 
>1194	ReturnStatement	 
>1195	Identifier	rval
>1196	ExpressionStatement	 
>1197	CallExpression	mLock . unlockExclusive ( )
>1198	ArgumentList	 
>1199	Callee	mLock . unlockExclusive
>1200	MemberAccess	mLock . unlockExclusive
>1201	Identifier	unlockExclusive
>1202	Identifier	mLock
>1203	CompoundStatement	 
>1204	IfStatement	if ( rval )
>1205	CompoundStatement	 
>1206	WhileStatement	while ( rval && i -> hasNext ( ) )
>1207	CompoundStatement	 
>1208	SwitchStatement	switch ( v -> getType ( ) )
>1209	CompoundStatement	 
>1210	ExpressionStatement	 
>1211	AssignmentExpr	mStates [ i -> getName ( ) ] [ \"value\" ] = ( clone ? v . clone ( ) 
>1212	ConditionalExpression	clone ? v . clone ( ) 
>1213	Identifier	v
>1214	CallExpression	v . clone ( )
>1215	ArgumentList	 
>1216	Callee	v . clone
>1217	MemberAccess	v . clone
>1218	Identifier	clone
>1219	Identifier	v
>1220	Condition	clone
>1221	Identifier	clone
>1222	ArrayIndexing	mStates [ i -> getName ( ) ] [ \"value\" ]
>1223	PrimaryExpression	\"value\"
>1224	ArrayIndexing	mStates [ i -> getName ( ) ]
>1225	CallExpression	i -> getName ( )
>1226	ArgumentList	 
>1227	Callee	i -> getName
>1228	PtrMemberAccess	i -> getName
>1229	Identifier	getName
>1230	Identifier	i
>1231	Identifier	mStates
>1232	Label	 
>1233	Identifier	default
>1234	BreakStatement	 
>1235	SwitchStatement	switch ( adj -> getType ( ) )
>1236	CompoundStatement	 
>1237	BreakStatement	 
>1238	Label	 
>1239	Identifier	default
>1240	BreakStatement	 
>1241	ExpressionStatement	 
>1242	AssignmentExpr	v = v -> getDouble ( ) + adj -> getDouble ( )
>1243	AdditiveExpression	v -> getDouble ( ) + adj -> getDouble ( )
>1244	CallExpression	adj -> getDouble ( )
>1245	ArgumentList	 
>1246	Callee	adj -> getDouble
>1247	PtrMemberAccess	adj -> getDouble
>1248	Identifier	getDouble
>1249	Identifier	adj
>1250	CallExpression	v -> getDouble ( )
>1251	ArgumentList	 
>1252	Callee	v -> getDouble
>1253	PtrMemberAccess	v -> getDouble
>1254	Identifier	getDouble
>1255	Identifier	v
>1256	Identifier	v
>1257	Label	 
>1258	Identifier	Double
>1259	BreakStatement	 
>1260	ExpressionStatement	 
>1261	AssignmentExpr	v = v -> getDouble ( ) + adj -> getUInt64 ( )
>1262	AdditiveExpression	v -> getDouble ( ) + adj -> getUInt64 ( )
>1263	CallExpression	adj -> getUInt64 ( )
>1264	ArgumentList	 
>1265	Callee	adj -> getUInt64
>1266	PtrMemberAccess	adj -> getUInt64
>1267	Identifier	getUInt64
>1268	Identifier	adj
>1269	CallExpression	v -> getDouble ( )
>1270	ArgumentList	 
>1271	Callee	v -> getDouble
>1272	PtrMemberAccess	v -> getDouble
>1273	Identifier	getDouble
>1274	Identifier	v
>1275	Identifier	v
>1276	Label	 
>1277	Identifier	UInt64
>1278	BreakStatement	 
>1279	ExpressionStatement	 
>1280	AssignmentExpr	v = v -> getDouble ( ) + adj -> getInt64 ( )
>1281	AdditiveExpression	v -> getDouble ( ) + adj -> getInt64 ( )
>1282	CallExpression	adj -> getInt64 ( )
>1283	ArgumentList	 
>1284	Callee	adj -> getInt64
>1285	PtrMemberAccess	adj -> getInt64
>1286	Identifier	getInt64
>1287	Identifier	adj
>1288	CallExpression	v -> getDouble ( )
>1289	ArgumentList	 
>1290	Callee	v -> getDouble
>1291	PtrMemberAccess	v -> getDouble
>1292	Identifier	getDouble
>1293	Identifier	v
>1294	Identifier	v
>1295	Label	 
>1296	Identifier	Int64
>1297	Condition	 
>1298	CallExpression	adj -> getType ( )
>1299	ArgumentList	 
>1300	Callee	adj -> getType
>1301	PtrMemberAccess	adj -> getType
>1302	Identifier	getType
>1303	Identifier	adj
>1304	Label	 
>1305	Identifier	Double
>1306	BreakStatement	 
>1307	SwitchStatement	switch ( adj -> getType ( ) )
>1308	CompoundStatement	 
>1309	BreakStatement	 
>1310	Label	 
>1311	Identifier	default
>1312	BreakStatement	 
>1313	ExpressionStatement	 
>1314	AssignmentExpr	v = v -> getUInt64 ( ) + adj -> getUInt64 ( )
>1315	AdditiveExpression	v -> getUInt64 ( ) + adj -> getUInt64 ( )
>1316	CallExpression	adj -> getUInt64 ( )
>1317	ArgumentList	 
>1318	Callee	adj -> getUInt64
>1319	PtrMemberAccess	adj -> getUInt64
>1320	Identifier	getUInt64
>1321	Identifier	adj
>1322	CallExpression	v -> getUInt64 ( )
>1323	ArgumentList	 
>1324	Callee	v -> getUInt64
>1325	PtrMemberAccess	v -> getUInt64
>1326	Identifier	getUInt64
>1327	Identifier	v
>1328	Identifier	v
>1329	Label	 
>1330	Identifier	UInt64
>1331	BreakStatement	 
>1332	ExpressionStatement	 
>1333	AssignmentExpr	v = v -> getUInt64 ( ) + adj -> getInt64 ( )
>1334	AdditiveExpression	v -> getUInt64 ( ) + adj -> getInt64 ( )
>1335	CallExpression	adj -> getInt64 ( )
>1336	ArgumentList	 
>1337	Callee	adj -> getInt64
>1338	PtrMemberAccess	adj -> getInt64
>1339	Identifier	getInt64
>1340	Identifier	adj
>1341	CallExpression	v -> getUInt64 ( )
>1342	ArgumentList	 
>1343	Callee	v -> getUInt64
>1344	PtrMemberAccess	v -> getUInt64
>1345	Identifier	getUInt64
>1346	Identifier	v
>1347	Identifier	v
>1348	Label	 
>1349	Identifier	Int64
>1350	Condition	 
>1351	CallExpression	adj -> getType ( )
>1352	ArgumentList	 
>1353	Callee	adj -> getType
>1354	PtrMemberAccess	adj -> getType
>1355	Identifier	getType
>1356	Identifier	adj
>1357	Label	 
>1358	Identifier	UInt64
>1359	BreakStatement	 
>1360	SwitchStatement	switch ( adj -> getType ( ) )
>1361	CompoundStatement	 
>1362	BreakStatement	 
>1363	Label	 
>1364	Identifier	default
>1365	BreakStatement	 
>1366	ExpressionStatement	 
>1367	AssignmentExpr	v = v -> getInt64 ( ) + adj -> getUInt64 ( )
>1368	AdditiveExpression	v -> getInt64 ( ) + adj -> getUInt64 ( )
>1369	CallExpression	adj -> getUInt64 ( )
>1370	ArgumentList	 
>1371	Callee	adj -> getUInt64
>1372	PtrMemberAccess	adj -> getUInt64
>1373	Identifier	getUInt64
>1374	Identifier	adj
>1375	CallExpression	v -> getInt64 ( )
>1376	ArgumentList	 
>1377	Callee	v -> getInt64
>1378	PtrMemberAccess	v -> getInt64
>1379	Identifier	getInt64
>1380	Identifier	v
>1381	Identifier	v
>1382	Label	 
>1383	Identifier	UInt64
>1384	BreakStatement	 
>1385	ExpressionStatement	 
>1386	AssignmentExpr	v = v -> getInt64 ( ) + adj -> getInt64 ( )
>1387	AdditiveExpression	v -> getInt64 ( ) + adj -> getInt64 ( )
>1388	CallExpression	adj -> getInt64 ( )
>1389	ArgumentList	 
>1390	Callee	adj -> getInt64
>1391	PtrMemberAccess	adj -> getInt64
>1392	Identifier	getInt64
>1393	Identifier	adj
>1394	CallExpression	v -> getInt64 ( )
>1395	ArgumentList	 
>1396	Callee	v -> getInt64
>1397	PtrMemberAccess	v -> getInt64
>1398	Identifier	getInt64
>1399	Identifier	v
>1400	Identifier	v
>1401	Label	 
>1402	Identifier	Int64
>1403	Condition	 
>1404	CallExpression	adj -> getType ( )
>1405	ArgumentList	 
>1406	Callee	adj -> getType
>1407	PtrMemberAccess	adj -> getType
>1408	Identifier	getType
>1409	Identifier	adj
>1410	Label	 
>1411	Identifier	Int64
>1412	Condition	 
>1413	CallExpression	v -> getType ( )
>1414	ArgumentList	 
>1415	Callee	v -> getType
>1416	PtrMemberAccess	v -> getType
>1417	Identifier	getType
>1418	Identifier	v
>1419	IdentifierDeclStatement	 
>1420	IdentifierDecl	& v = mStates [ state ] [ \"value\" ]
>1421	AssignmentExpr	& v = mStates [ state ] [ \"value\" ]
>1422	ArrayIndexing	mStates [ state ] [ \"value\" ]
>1423	PrimaryExpression	\"value\"
>1424	ArrayIndexing	mStates [ state ]
>1425	Identifier	state
>1426	Identifier	mStates
>1427	Identifier	v
>1428	Identifier	v
>1429	IdentifierDeclType	DynamicObject &
>1430	IdentifierDeclStatement	 
>1431	IdentifierDecl	* state = i -> getName ( )
>1432	AssignmentExpr	* state = i -> getName ( )
>1433	CallExpression	i -> getName ( )
>1434	ArgumentList	 
>1435	Callee	i -> getName
>1436	PtrMemberAccess	i -> getName
>1437	Identifier	getName
>1438	Identifier	i
>1439	Identifier	state
>1440	Identifier	state
>1441	IdentifierDeclType	const char *
>1442	IdentifierDeclStatement	 
>1443	IdentifierDecl	& adj = i -> next ( )
>1444	AssignmentExpr	& adj = i -> next ( )
>1445	CallExpression	i -> next ( )
>1446	ArgumentList	 
>1447	Callee	i -> next
>1448	PtrMemberAccess	i -> next
>1449	Identifier	next
>1450	Identifier	i
>1451	Identifier	adj
>1452	Identifier	adj
>1453	IdentifierDeclType	DynamicObject &
>1454	Condition	 
>1455	AndExpression	rval && i -> hasNext ( )
>1456	CallExpression	i -> hasNext ( )
>1457	ArgumentList	 
>1458	Callee	i -> hasNext
>1459	PtrMemberAccess	i -> hasNext
>1460	Identifier	hasNext
>1461	Identifier	i
>1462	Identifier	rval
>1463	IdentifierDeclStatement	 
>1464	IdentifierDecl	i = adjustments . getIterator ( )
>1465	AssignmentExpr	i = adjustments . getIterator ( )
>1466	CallExpression	adjustments . getIterator ( )
>1467	ArgumentList	 
>1468	Callee	adjustments . getIterator
>1469	MemberAccess	adjustments . getIterator
>1470	Identifier	getIterator
>1471	Identifier	adjustments
>1472	Identifier	i
>1473	Identifier	i
>1474	IdentifierDeclType	DynamicObjectIterator
>1475	Condition	 
>1476	Identifier	rval
>1477	WhileStatement	while ( rval && i -> hasNext ( ) )
>1478	CompoundStatement	 
>1479	ExpressionStatement	 
>1480	AssignmentExpr	rval = _checkState ( i -> getName ( ) , mStates , \"adjust\" )
>1481	CallExpression	_checkState ( i -> getName ( ) , mStates , \"adjust\" )
>1482	ArgumentList	i -> getName ( )
>1483	Argument	\"adjust\"
>1484	PrimaryExpression	\"adjust\"
>1485	Argument	mStates
>1486	Identifier	mStates
>1487	Argument	i -> getName ( )
>1488	CallExpression	i -> getName ( )
>1489	ArgumentList	 
>1490	Callee	i -> getName
>1491	PtrMemberAccess	i -> getName
>1492	Identifier	getName
>1493	Identifier	i
>1494	Callee	_checkState
>1495	Identifier	_checkState
>1496	Identifier	rval
>1497	ExpressionStatement	 
>1498	CallExpression	i -> next ( )
>1499	ArgumentList	 
>1500	Callee	i -> next
>1501	PtrMemberAccess	i -> next
>1502	Identifier	next
>1503	Identifier	i
>1504	Condition	 
>1505	AndExpression	rval && i -> hasNext ( )
>1506	CallExpression	i -> hasNext ( )
>1507	ArgumentList	 
>1508	Callee	i -> hasNext
>1509	PtrMemberAccess	i -> hasNext
>1510	Identifier	hasNext
>1511	Identifier	i
>1512	Identifier	rval
>1513	IdentifierDeclStatement	 
>1514	IdentifierDecl	i = adjustments . getIterator ( )
>1515	AssignmentExpr	i = adjustments . getIterator ( )
>1516	CallExpression	adjustments . getIterator ( )
>1517	ArgumentList	 
>1518	Callee	adjustments . getIterator
>1519	MemberAccess	adjustments . getIterator
>1520	Identifier	getIterator
>1521	Identifier	adjustments
>1522	Identifier	i
>1523	Identifier	i
>1524	IdentifierDeclType	DynamicObjectIterator
>1525	ExpressionStatement	 
>1526	CallExpression	mLock . lockExclusive ( )
>1527	ArgumentList	 
>1528	Callee	mLock . lockExclusive
>1529	MemberAccess	mLock . lockExclusive
>1530	Identifier	lockExclusive
>1531	Identifier	mLock
>1532	IdentifierDeclStatement	 
>1533	IdentifierDecl	rval = true
>1534	AssignmentExpr	rval = true
>1535	Identifier	true
>1536	Identifier	true
>1537	Identifier	rval
>1538	IdentifierDeclType	bool
<3=5,4
<5=6
<6=7
<7=11,8
<8=9
<9=10
<11=12
<12=14,13
<20=22,21
<26=32,31,27
<27=28
<28=30,29
<32=249,242,42,35,33
<33=34
<35=36
<36=38,37
<38=39
<39=41,40
<42=230,107,43
<43=105,44
<44=93,52,45
<45=46
<46=50,47
<47=48
<48=49
<50=51
<52=86,53
<53=74,62,54
<54=55
<55=57,56
<57=59,58
<59=61,60
<62=63
<63=73,72,64
<64=71,65
<65=67,66
<67=68
<68=70,69
<74=75
<75=85,84,76
<76=83,77
<77=79,78
<79=80
<80=82,81
<86=87
<87=89,88
<89=90
<90=92,91
<93=94
<94=104,103,95
<95=102,96
<96=98,97
<98=99
<99=101,100
<105=106
<107=221,108
<108=209,197,155,109
<109=142,110
<110=133,122,115,111
<111=112
<112=114,113
<115=116
<116=120,117
<117=118
<118=119
<120=121
<122=123
<123=125,124
<125=127,126
<127=129,128
<129=130
<130=132,131
<133=134
<134=141,140,135
<135=139,136
<136=138,137
<142=143
<143=154,144
<144=153,145
<145=149,146
<146=147
<147=148
<149=150
<150=152,151
<155=188,156
<156=179,168,161,157
<157=158
<158=160,159
<161=162
<162=166,163
<163=164
<164=165
<166=167
<168=169
<169=171,170
<171=173,172
<173=175,174
<175=176
<176=178,177
<179=180
<180=187,186,181
<181=185,182
<182=184,183
<188=189
<189=193,190
<190=191
<191=192
<193=194
<194=196,195
<197=198
<198=208,207,199
<199=206,200
<200=202,201
<202=203
<203=205,204
<209=210
<210=220,219,211
<211=218,212
<212=214,213
<214=215
<215=217,216
<221=222
<222=229,223
<223=225,224
<225=226
<226=228,227
<230=231
<231=241,240,232
<232=239,233
<233=235,234
<235=236
<236=238,237
<242=243
<243=245,244
<245=246
<246=248,247
<249=250
<250=255,254,251
<251=253,252
<286=289,288,287
<289=305,297,290
<290=291
<291=293,292
<293=294
<294=296,295
<297=298
<298=299
<299=301,300
<301=302
<302=304,303
<305=306
<306=308,307
<308=309
<309=311,310
<317=329,328,318
<318=325,322,319
<319=321,320
<322=324,323
<325=327,326
<329=376,332,330
<330=331
<332=372,333
<333=363,352,341,334
<334=335
<335=339,336
<336=337
<337=338
<339=340
<341=342
<342=344,343
<344=346,345
<346=348,347
<348=349
<349=351,350
<352=353
<353=355,354
<355=357,356
<357=359,358
<359=360
<360=362,361
<363=364
<364=371,370,365
<365=369,366
<366=368,367
<372=373
<373=375,374
<376=377
<377=389,388,378
<378=387,379
<379=383,380
<380=381
<381=382
<383=384
<384=386,385
<404=410,409,405
<405=406
<406=408,407
<410=522,515,420,413,411
<411=412
<413=414
<414=416,415
<416=417
<417=419,418
<420=503,467,421
<421=465,422
<422=453,423
<423=446,424
<424=439,425
<425=426
<426=435,427
<427=428
<428=429
<429=431,430
<431=432
<432=434,433
<435=436
<436=438,437
<439=440
<440=442,441
<442=443
<443=445,444
<446=447
<447=449,448
<449=450
<450=452,451
<453=454
<454=464,463,455
<455=462,456
<456=458,457
<458=459
<459=461,460
<465=466
<467=494,468
<468=487,469
<469=470
<470=486,471
<471=484,472
<472=477,475,473
<473=474
<475=476
<477=478
<478=480,479
<480=481
<481=483,482
<484=485
<487=488
<488=490,489
<490=491
<491=493,492
<494=495
<495=502,496
<496=498,497
<498=499
<499=501,500
<503=504
<504=514,513,505
<505=512,506
<506=508,507
<508=509
<509=511,510
<515=516
<516=518,517
<518=519
<519=521,520
<522=523
<523=528,527,524
<524=526,525
<543=546,545,544
<546=603,554,547
<547=548
<548=550,549
<550=551
<551=553,552
<554=591,555
<555=584,556
<556=572,557
<557=558
<558=569,559
<559=561,560
<561=562
<562=564,563
<564=566,565
<566=568,567
<569=571,570
<572=573
<573=583,582,574
<574=581,575
<575=577,576
<577=578
<578=580,579
<584=585
<585=587,586
<587=588
<588=590,589
<591=592
<592=602,601,593
<593=600,594
<594=596,595
<596=597
<597=599,598
<603=604
<604=606,605
<606=607
<607=609,608
<624=630,629,625
<625=626
<626=628,627
<630=757,750,640,633,631
<631=632
<633=634
<634=636,635
<636=637
<637=639,638
<640=738,702,641
<641=700,642
<642=688,643
<643=681,644
<644=674,660,645
<645=646
<646=657,647
<647=649,648
<649=650
<650=652,651
<652=654,653
<654=656,655
<657=659,658
<660=661
<661=673,672,662
<662=671,663
<663=670,664
<664=666,665
<666=667
<667=669,668
<674=675
<675=677,676
<677=678
<678=680,679
<681=682
<682=684,683
<684=685
<685=687,686
<688=689
<689=699,698,690
<690=697,691
<691=693,692
<693=694
<694=696,695
<700=701
<702=729,703
<703=722,704
<704=705
<705=721,706
<706=719,707
<707=712,710,708
<708=709
<710=711
<712=713
<713=715,714
<715=716
<716=718,717
<719=720
<722=723
<723=725,724
<725=726
<726=728,727
<729=730
<730=737,731
<731=733,732
<733=734
<734=736,735
<738=739
<739=749,748,740
<740=747,741
<741=743,742
<743=744
<744=746,745
<750=751
<751=753,752
<753=754
<754=756,755
<757=758
<758=763,762,759
<759=761,760
<785=794,793,786
<786=790,787
<787=789,788
<790=792,791
<794=873,866,804,797,795
<795=796
<797=798
<798=800,799
<800=801
<801=803,802
<804=805
<805=864,806
<806=852,807
<807=843,808
<808=831,809
<809=810
<810=821,811
<811=819,813,812
<813=815,814
<815=816
<816=818,817
<819=820
<821=823,822
<823=830,824
<824=826,825
<826=827
<827=829,828
<831=832
<832=842,841,833
<833=840,834
<834=836,835
<836=837
<837=839,838
<843=844
<844=851,845
<845=847,846
<847=848
<848=850,849
<852=853
<853=863,862,854
<854=861,855
<855=857,856
<857=858
<858=860,859
<864=865
<866=867
<867=869,868
<869=870
<870=872,871
<873=874
<874=879,878,875
<875=877,876
<903=906,905,904
<906=991,982,975,916,909,907
<907=908
<909=910
<910=912,911
<912=913
<913=915,914
<916=963,917
<917=956,918
<918=944,935,919
<919=920
<920=927,921
<921=923,922
<923=924
<924=926,925
<927=934,928
<928=930,929
<930=931
<931=933,932
<935=936
<936=943,942,937
<937=941,938
<938=940,939
<944=945
<945=955,954,946
<946=953,947
<947=949,948
<949=950
<950=952,951
<956=957
<957=959,958
<959=960
<960=962,961
<963=964
<964=974,973,965
<965=972,966
<966=968,967
<968=969
<969=971,970
<975=976
<976=978,977
<978=979
<979=981,980
<982=983
<983=987,984
<984=985
<985=986
<987=988
<988=990,989
<991=992
<992=994,993
<1015=1021,1020,1016
<1016=1017
<1017=1019,1018
<1021=1155,1148,1031,1024,1022
<1022=1023
<1024=1025
<1025=1027,1026
<1027=1028
<1028=1030,1029
<1031=1136,1100,1032
<1032=1098,1033
<1033=1086,1034
<1034=1077,1035
<1035=1070,1058,1047,1036
<1036=1037
<1037=1044,1038
<1038=1040,1039
<1040=1041
<1041=1043,1042
<1044=1046,1045
<1047=1048
<1048=1057,1056,1049
<1049=1055,1050
<1050=1052,1051
<1052=1054,1053
<1058=1059
<1059=1069,1068,1060
<1060=1067,1061
<1061=1063,1062
<1063=1064
<1064=1066,1065
<1070=1071
<1071=1073,1072
<1073=1074
<1074=1076,1075
<1077=1078
<1078=1085,1079
<1079=1081,1080
<1081=1082
<1082=1084,1083
<1086=1087
<1087=1097,1096,1088
<1088=1095,1089
<1089=1091,1090
<1091=1092
<1092=1094,1093
<1098=1099
<1100=1127,1101
<1101=1120,1102
<1102=1103
<1103=1119,1104
<1104=1117,1105
<1105=1110,1108,1106
<1106=1107
<1108=1109
<1110=1111
<1111=1113,1112
<1113=1114
<1114=1116,1115
<1117=1118
<1120=1121
<1121=1123,1122
<1123=1124
<1124=1126,1125
<1127=1128
<1128=1135,1129
<1129=1131,1130
<1131=1132
<1132=1134,1133
<1136=1137
<1137=1147,1146,1138
<1138=1145,1139
<1139=1141,1140
<1141=1142
<1142=1144,1143
<1148=1149
<1149=1151,1150
<1151=1152
<1152=1154,1153
<1155=1156
<1156=1161,1160,1157
<1157=1159,1158
<1184=1193,1192,1185
<1185=1189,1186
<1186=1188,1187
<1189=1191,1190
<1193=1532,1525,1203,1196,1194
<1194=1195
<1196=1197
<1197=1199,1198
<1199=1200
<1200=1202,1201
<1203=1513,1477,1204
<1204=1475,1205
<1205=1463,1206
<1206=1454,1207
<1207=1442,1430,1419,1208
<1208=1412,1209
<1209=1410,1360,1359,1357,1307,1306,1304,1235,1234,1232,1210
<1210=1211
<1211=1222,1212
<1212=1220,1214,1213
<1214=1216,1215
<1216=1217
<1217=1219,1218
<1220=1221
<1222=1224,1223
<1224=1231,1225
<1225=1227,1226
<1227=1228
<1228=1230,1229
<1232=1233
<1235=1297,1236
<1236=1295,1279,1278,1276,1260,1259,1257,1241,1240,1238,1237
<1238=1239
<1241=1242
<1242=1256,1243
<1243=1250,1244
<1244=1246,1245
<1246=1247
<1247=1249,1248
<1250=1252,1251
<1252=1253
<1253=1255,1254
<1257=1258
<1260=1261
<1261=1275,1262
<1262=1269,1263
<1263=1265,1264
<1265=1266
<1266=1268,1267
<1269=1271,1270
<1271=1272
<1272=1274,1273
<1276=1277
<1279=1280
<1280=1294,1281
<1281=1288,1282
<1282=1284,1283
<1284=1285
<1285=1287,1286
<1288=1290,1289
<1290=1291
<1291=1293,1292
<1295=1296
<1297=1298
<1298=1300,1299
<1300=1301
<1301=1303,1302
<1304=1305
<1307=1350,1308
<1308=1348,1332,1331,1329,1313,1312,1310,1309
<1310=1311
<1313=1314
<1314=1328,1315
<1315=1322,1316
<1316=1318,1317
<1318=1319
<1319=1321,1320
<1322=1324,1323
<1324=1325
<1325=1327,1326
<1329=1330
<1332=1333
<1333=1347,1334
<1334=1341,1335
<1335=1337,1336
<1337=1338
<1338=1340,1339
<1341=1343,1342
<1343=1344
<1344=1346,1345
<1348=1349
<1350=1351
<1351=1353,1352
<1353=1354
<1354=1356,1355
<1357=1358
<1360=1403,1361
<1361=1401,1385,1384,1382,1366,1365,1363,1362
<1363=1364
<1366=1367
<1367=1381,1368
<1368=1375,1369
<1369=1371,1370
<1371=1372
<1372=1374,1373
<1375=1377,1376
<1377=1378
<1378=1380,1379
<1382=1383
<1385=1386
<1386=1400,1387
<1387=1394,1388
<1388=1390,1389
<1390=1391
<1391=1393,1392
<1394=1396,1395
<1396=1397
<1397=1399,1398
<1401=1402
<1403=1404
<1404=1406,1405
<1406=1407
<1407=1409,1408
<1410=1411
<1412=1413
<1413=1415,1414
<1415=1416
<1416=1418,1417
<1419=1420
<1420=1429,1428,1421
<1421=1427,1422
<1422=1424,1423
<1424=1426,1425
<1430=1431
<1431=1441,1440,1432
<1432=1439,1433
<1433=1435,1434
<1435=1436
<1436=1438,1437
<1442=1443
<1443=1453,1452,1444
<1444=1451,1445
<1445=1447,1446
<1447=1448
<1448=1450,1449
<1454=1455
<1455=1462,1456
<1456=1458,1457
<1458=1459
<1459=1461,1460
<1463=1464
<1464=1474,1473,1465
<1465=1472,1466
<1466=1468,1467
<1468=1469
<1469=1471,1470
<1475=1476
<1477=1504,1478
<1478=1497,1479
<1479=1480
<1480=1496,1481
<1481=1494,1482
<1482=1487,1485,1483
<1483=1484
<1485=1486
<1487=1488
<1488=1490,1489
<1490=1491
<1491=1493,1492
<1494=1495
<1497=1498
<1498=1500,1499
<1500=1501
<1501=1503,1502
<1504=1505
<1505=1512,1506
<1506=1508,1507
<1508=1509
<1509=1511,1510
<1513=1514
<1514=1524,1523,1515
<1515=1522,1516
<1516=1518,1517
<1518=1519
<1519=1521,1520
<1525=1526
<1526=1528,1527
<1528=1529
<1529=1531,1530
<1532=1533
<1533=1538,1537,1534
<1534=1536,1535
