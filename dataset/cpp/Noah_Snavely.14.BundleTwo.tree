>3	FunctionDef	WriteVector (FILE * f , int n , const double * v)
>4	ParameterList	FILE * f , int n , const double * v
>5	Parameter	 
>6	Identifier	v
>7	ParameterType	const double *
>8	Parameter	 
>9	Identifier	n
>10	ParameterType	int
>11	Parameter	 
>12	Identifier	f
>13	ParameterType	FILE *
>14	ReturnType	static void
>15	CompoundStatement	 
>16	ExpressionStatement	 
>17	CallExpression	fprintf ( f , \"\n\" )
>18	ArgumentList	f
>19	Argument	\"\n\"
>20	PrimaryExpression	\"\n\"
>21	Argument	f
>22	Identifier	f
>23	Callee	fprintf
>24	Identifier	fprintf
>25	ForStatement	for ( int i = 0 ; i < n ; i ++ )
>26	CompoundStatement	 
>27	ExpressionStatement	 
>28	CallExpression	fprintf ( f , \"%0.16e \" , v [ i ] )
>29	ArgumentList	f
>30	Argument	v [ i ]
>31	ArrayIndexing	v [ i ]
>32	Identifier	i
>33	Identifier	v
>34	Argument	\"%0.16e \"
>35	PrimaryExpression	\"%0.16e \"
>36	Argument	f
>37	Identifier	f
>38	Callee	fprintf
>39	Identifier	fprintf
>40	IncDecOp	 
>41	IncDec	++
>42	Identifier	i
>43	Condition	 
>44	RelationalExpression	i < n
>45	Identifier	n
>46	Identifier	i
>47	ForInit	 
>48	IdentifierDeclStatement	int i = 0 ;
>49	IdentifierDecl	i = 0
>50	AssignmentExpr	i = 0
>51	PrimaryExpression	0
>52	Identifier	i
>53	Identifier	i
>54	IdentifierDeclType	int
>64	FunctionDef	WriteCamera (FILE * f , const camera_params_t & camera)
>65	ParameterList	FILE * f , const camera_params_t & camera
>66	Parameter	 
>67	Identifier	camera
>68	ParameterType	const camera_params_t &
>69	Parameter	 
>70	Identifier	f
>71	ParameterType	FILE *
>72	ReturnType	static void
>73	CompoundStatement	 
>74	ExpressionStatement	 
>75	CallExpression	fprintf ( f , \"%0.16e\n\" , camera . f )
>76	ArgumentList	f
>77	Argument	camera . f
>78	MemberAccess	camera . f
>79	Identifier	f
>80	Identifier	camera
>81	Argument	\"%0.16e\n\"
>82	PrimaryExpression	\"%0.16e\n\"
>83	Argument	f
>84	Identifier	f
>85	Callee	fprintf
>86	Identifier	fprintf
>87	ExpressionStatement	 
>88	CallExpression	WriteVector ( f , 3 , camera . t )
>89	ArgumentList	f
>90	Argument	camera . t
>91	MemberAccess	camera . t
>92	Identifier	t
>93	Identifier	camera
>94	Argument	3
>95	PrimaryExpression	3
>96	Argument	f
>97	Identifier	f
>98	Callee	WriteVector
>99	Identifier	WriteVector
>100	ExpressionStatement	 
>101	CallExpression	WriteVector ( f , 9 , camera . R )
>102	ArgumentList	f
>103	Argument	camera . R
>104	MemberAccess	camera . R
>105	Identifier	R
>106	Identifier	camera
>107	Argument	9
>108	PrimaryExpression	9
>109	Argument	f
>110	Identifier	f
>111	Callee	WriteVector
>112	Identifier	WriteVector
>121	FunctionDef	TwoFrameModel 
>122	ParameterList	FILE * f , const std 
>123	Parameter	 
>124	Identifier	img2
>125	ParameterType	const ImageData &
>126	Parameter	 
>127	Identifier	img1
>128	ParameterType	const ImageData &
>129	Parameter	 
>130	Identifier	i2
>131	ParameterType	int
>132	Parameter	 
>133	Identifier	i1
>134	ParameterType	int
>135	Parameter	 
>136	Identifier	tracks
>137	ParameterType	const std 
>138	Parameter	 
>139	Identifier	f
>140	ParameterType	FILE *
>141	ReturnType	void
>142	CompoundStatement	 
>143	ExpressionStatement	 
>144	Identifier	A
>145	Statement	 
>146	Statement	 
>147	Statement	 
>148	ExpressionStatement	 
>149	CallExpression	printf ( \"%0.3f %0.3f %0.3f -> %0.3f %0.3f %0.3f [ %0.3f ]\n\" , x [ 0 ] , x [ 1 ] , x [ 2 ] , t [ 0 ] , t [ 1 ] , \
>150	ArgumentList	\"%0.3f %0.3f %0.3f -> %0.3f %0.3f %0.3f [ %0.3f ]\n\"
>151	Argument	dot
>152	Identifier	dot
>153	Argument	t [ 2 ]
>154	ArrayIndexing	t [ 2 ]
>155	PrimaryExpression	2
>156	Identifier	t
>157	Argument	t [ 1 ]
>158	ArrayIndexing	t [ 1 ]
>159	PrimaryExpression	1
>160	Identifier	t
>161	Argument	t [ 0 ]
>162	ArrayIndexing	t [ 0 ]
>163	PrimaryExpression	0
>164	Identifier	t
>165	Argument	x [ 2 ]
>166	ArrayIndexing	x [ 2 ]
>167	PrimaryExpression	2
>168	Identifier	x
>169	Argument	x [ 1 ]
>170	ArrayIndexing	x [ 1 ]
>171	PrimaryExpression	1
>172	Identifier	x
>173	Argument	x [ 0 ]
>174	ArrayIndexing	x [ 0 ]
>175	PrimaryExpression	0
>176	Identifier	x
>177	Argument	\"%0.3f %0.3f %0.3f -> %0.3f %0.3f %0.3f [ %0.3f ]\n\"
>178	PrimaryExpression	\"%0.3f %0.3f %0.3f -> %0.3f %0.3f %0.3f [ %0.3f ]\n\"
>179	Callee	printf
>180	Identifier	printf
>181	ExpressionStatement	 
>182	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , x , t , & dot )
>183	ArgumentList	1
>184	Argument	& dot
>185	UnaryOp	& dot
>186	Identifier	dot
>187	UnaryOperator	&
>188	Argument	t
>189	Identifier	t
>190	Argument	x
>191	Identifier	x
>192	Argument	1
>193	PrimaryExpression	1
>194	Argument	3
>195	PrimaryExpression	3
>196	Argument	3
>197	PrimaryExpression	3
>198	Argument	1
>199	PrimaryExpression	1
>200	Callee	matrix_product
>201	Identifier	matrix_product
>202	IdentifierDeclStatement	 
>203	IdentifierDecl	dot
>204	Identifier	dot
>205	IdentifierDeclType	double
>206	ExpressionStatement	 
>207	CallExpression	matrix_scale ( 3 , 1 , t , 1.0 / norm , t )
>208	ArgumentList	3
>209	Argument	t
>210	Identifier	t
>211	Argument	1.0 / norm
>212	MultiplicativeExpression	1.0 / norm
>213	Identifier	norm
>214	PrimaryExpression	1.0
>215	Argument	t
>216	Identifier	t
>217	Argument	1
>218	PrimaryExpression	1
>219	Argument	3
>220	PrimaryExpression	3
>221	Callee	matrix_scale
>222	Identifier	matrix_scale
>223	IdentifierDeclStatement	 
>224	IdentifierDecl	norm = matrix_norm ( 3 , 1 , t )
>225	AssignmentExpr	norm = matrix_norm ( 3 , 1 , t )
>226	CallExpression	matrix_norm ( 3 , 1 , t )
>227	ArgumentList	3
>228	Argument	t
>229	Identifier	t
>230	Argument	1
>231	PrimaryExpression	1
>232	Argument	3
>233	PrimaryExpression	3
>234	Callee	matrix_norm
>235	Identifier	matrix_norm
>236	Identifier	norm
>237	Identifier	norm
>238	IdentifierDeclType	double
>239	ExpressionStatement	 
>240	CallExpression	matrix_scale ( 3 , 1 , t , - 1.0 , t )
>241	ArgumentList	3
>242	Argument	t
>243	Identifier	t
>244	Argument	- 1.0
>245	UnaryOp	- 1.0
>246	PrimaryExpression	1.0
>247	UnaryOperator	-
>248	Argument	t
>249	Identifier	t
>250	Argument	1
>251	PrimaryExpression	1
>252	Argument	3
>253	PrimaryExpression	3
>254	Callee	matrix_scale
>255	Identifier	matrix_scale
>256	ExpressionStatement	 
>257	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , ( double * ) m_camera1 . R , c , t )
>258	ArgumentList	3
>259	Argument	t
>260	Identifier	t
>261	Argument	c
>262	Identifier	c
>263	Argument	( double * ) m_camera1 . R
>264	CastExpression	( double * ) m_camera1 . R
>265	MemberAccess	m_camera1 . R
>266	Identifier	R
>267	Identifier	m_camera1
>268	CastTarget	double *
>269	Argument	1
>270	PrimaryExpression	1
>271	Argument	3
>272	PrimaryExpression	3
>273	Argument	3
>274	PrimaryExpression	3
>275	Argument	3
>276	PrimaryExpression	3
>277	Callee	matrix_product
>278	Identifier	matrix_product
>279	IdentifierDeclStatement	 
>280	IdentifierDecl	t [ 3 ]
>281	PrimaryExpression	3
>282	Identifier	t
>283	IdentifierDeclType	double [ 3 ]
>284	ExpressionStatement	 
>285	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , ( double * ) m_camera1 . t , ( double * ) m_camera0 . t , c )
>286	ArgumentList	3
>287	Argument	c
>288	Identifier	c
>289	Argument	( double * ) m_camera0 . t
>290	CastExpression	( double * ) m_camera0 . t
>291	MemberAccess	m_camera0 . t
>292	Identifier	t
>293	Identifier	m_camera0
>294	CastTarget	double *
>295	Argument	( double * ) m_camera1 . t
>296	CastExpression	( double * ) m_camera1 . t
>297	MemberAccess	m_camera1 . t
>298	Identifier	t
>299	Identifier	m_camera1
>300	CastTarget	double *
>301	Argument	1
>302	PrimaryExpression	1
>303	Argument	3
>304	PrimaryExpression	3
>305	Argument	1
>306	PrimaryExpression	1
>307	Argument	3
>308	PrimaryExpression	3
>309	Callee	matrix_diff
>310	Identifier	matrix_diff
>311	IdentifierDeclStatement	 
>312	IdentifierDecl	c [ 3 ]
>313	PrimaryExpression	3
>314	Identifier	c
>315	IdentifierDeclType	double [ 3 ]
>316	ExpressionStatement	 
>317	CallExpression	matrix_minimum_unit_norm_solution ( num_eqns , num_vars , A , x )
>318	ArgumentList	num_eqns
>319	Argument	x
>320	Identifier	x
>321	Argument	A
>322	Identifier	A
>323	Argument	num_vars
>324	Identifier	num_vars
>325	Argument	num_eqns
>326	Identifier	num_eqns
>327	Callee	matrix_minimum_unit_norm_solution
>328	Identifier	matrix_minimum_unit_norm_solution
>329	IdentifierDeclStatement	 
>330	IdentifierDecl	x [ 3 ]
>331	PrimaryExpression	3
>332	Identifier	x
>333	IdentifierDeclType	double [ 3 ]
>334	ForStatement	for ( int i = 0 ; i < m_num_points ; i ++ )
>335	CompoundStatement	 
>336	ExpressionStatement	 
>337	AssignmentExpr	r [ 2 ] = - Vx ( p1 ) * Vy ( p2 ) + Vy ( p1 ) * Vx ( p2 )
>338	AdditiveExpression	- Vx ( p1 ) * Vy ( p2 ) + Vy ( p1 ) * Vx ( p2 )
>339	MultiplicativeExpression	Vy ( p1 ) * Vx ( p2 )
>340	CallExpression	Vx ( p2 )
>341	ArgumentList	p2
>342	Argument	p2
>343	Identifier	p2
>344	Callee	Vx
>345	Identifier	Vx
>346	CallExpression	Vy ( p1 )
>347	ArgumentList	p1
>348	Argument	p1
>349	Identifier	p1
>350	Callee	Vy
>351	Identifier	Vy
>352	MultiplicativeExpression	- Vx ( p1 ) * Vy ( p2 )
>353	CallExpression	Vy ( p2 )
>354	ArgumentList	p2
>355	Argument	p2
>356	Identifier	p2
>357	Callee	Vy
>358	Identifier	Vy
>359	UnaryOp	- Vx ( p1 )
>360	CallExpression	Vx ( p1 )
>361	ArgumentList	p1
>362	Argument	p1
>363	Identifier	p1
>364	Callee	Vx
>365	Identifier	Vx
>366	UnaryOperator	-
>367	ArrayIndexing	r [ 2 ]
>368	PrimaryExpression	2
>369	Identifier	r
>370	ExpressionStatement	 
>371	AssignmentExpr	r [ 1 ] = Vx ( p1 ) - Vx ( p2 ) * p1b [ 2 ]
>372	AdditiveExpression	Vx ( p1 ) - Vx ( p2 ) * p1b [ 2 ]
>373	MultiplicativeExpression	Vx ( p2 ) * p1b [ 2 ]
>374	ArrayIndexing	p1b [ 2 ]
>375	PrimaryExpression	2
>376	Identifier	p1b
>377	CallExpression	Vx ( p2 )
>378	ArgumentList	p2
>379	Argument	p2
>380	Identifier	p2
>381	Callee	Vx
>382	Identifier	Vx
>383	CallExpression	Vx ( p1 )
>384	ArgumentList	p1
>385	Argument	p1
>386	Identifier	p1
>387	Callee	Vx
>388	Identifier	Vx
>389	ArrayIndexing	r [ 1 ]
>390	PrimaryExpression	1
>391	Identifier	r
>392	ExpressionStatement	 
>393	AssignmentExpr	r [ 0 ] = - Vy ( p1 ) + Vy ( p2 ) * p1b [ 2 ]
>394	AdditiveExpression	- Vy ( p1 ) + Vy ( p2 ) * p1b [ 2 ]
>395	MultiplicativeExpression	Vy ( p2 ) * p1b [ 2 ]
>396	ArrayIndexing	p1b [ 2 ]
>397	PrimaryExpression	2
>398	Identifier	p1b
>399	CallExpression	Vy ( p2 )
>400	ArgumentList	p2
>401	Argument	p2
>402	Identifier	p2
>403	Callee	Vy
>404	Identifier	Vy
>405	UnaryOp	- Vy ( p1 )
>406	CallExpression	Vy ( p1 )
>407	ArgumentList	p1
>408	Argument	p1
>409	Identifier	p1
>410	Callee	Vy
>411	Identifier	Vy
>412	UnaryOperator	-
>413	ArrayIndexing	r [ 0 ]
>414	PrimaryExpression	0
>415	Identifier	r
>416	IdentifierDeclStatement	 
>417	IdentifierDecl	* r = A + i * num_vars
>418	AssignmentExpr	* r = A + i * num_vars
>419	AdditiveExpression	A + i * num_vars
>420	MultiplicativeExpression	i * num_vars
>421	Identifier	num_vars
>422	Identifier	i
>423	Identifier	A
>424	Identifier	r
>425	Identifier	r
>426	IdentifierDeclType	double *
>427	ExpressionStatement	 
>428	AssignmentExpr	p1 = v2_new ( p1b [ 0 ] , p1b [ 1 ] )
>429	CallExpression	v2_new ( p1b [ 0 ] , p1b [ 1 ] )
>430	ArgumentList	p1b [ 0 ]
>431	Argument	p1b [ 1 ]
>432	ArrayIndexing	p1b [ 1 ]
>433	PrimaryExpression	1
>434	Identifier	p1b
>435	Argument	p1b [ 0 ]
>436	ArrayIndexing	p1b [ 0 ]
>437	PrimaryExpression	0
>438	Identifier	p1b
>439	Callee	v2_new
>440	Identifier	v2_new
>441	Identifier	p1
>442	ExpressionStatement	 
>443	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , m_camera1 . R , p1a , p1b )
>444	ArgumentList	3
>445	Argument	p1b
>446	Identifier	p1b
>447	Argument	p1a
>448	Identifier	p1a
>449	Argument	m_camera1 . R
>450	MemberAccess	m_camera1 . R
>451	Identifier	R
>452	Identifier	m_camera1
>453	Argument	1
>454	PrimaryExpression	1
>455	Argument	3
>456	PrimaryExpression	3
>457	Argument	3
>458	PrimaryExpression	3
>459	Argument	3
>460	PrimaryExpression	3
>461	Callee	matrix_product
>462	Identifier	matrix_product
>463	IdentifierDeclStatement	 
>464	IdentifierDecl	p1b [ 3 ]
>465	PrimaryExpression	3
>466	Identifier	p1b
>467	IdentifierDeclType	double [ 3 ]
>468	IdentifierDeclStatement	 
>469	IdentifierDecl	p1a [ 3 ] = { Vx ( p1 ) , Vy ( p1 ) , 1.0 }
>470	AssignmentExpr	p1a [ 3 ] = { Vx ( p1 ) , Vy ( p1 ) , 1.0 }
>471	InitializerList	Vx ( p1 )
>472	PrimaryExpression	1.0
>473	CallExpression	Vy ( p1 )
>474	ArgumentList	p1
>475	Argument	p1
>476	Identifier	p1
>477	Callee	Vy
>478	Identifier	Vy
>479	CallExpression	Vx ( p1 )
>480	ArgumentList	p1
>481	Argument	p1
>482	Identifier	p1
>483	Callee	Vx
>484	Identifier	Vx
>485	Identifier	p1a
>486	PrimaryExpression	3
>487	Identifier	p1a
>488	IdentifierDeclType	double [ 3 ]
>489	IdentifierDeclStatement	 
>490	IdentifierDecl	p2 = v2_scale ( - 1.0 / m_camera1 . f , proj2 [ i ] )
>491	AssignmentExpr	p2 = v2_scale ( - 1.0 / m_camera1 . f , proj2 [ i ] )
>492	CallExpression	v2_scale ( - 1.0 / m_camera1 . f , proj2 [ i ] )
>493	ArgumentList	- 1.0 / m_camera1 . f
>494	Argument	proj2 [ i ]
>495	ArrayIndexing	proj2 [ i ]
>496	Identifier	i
>497	Identifier	proj2
>498	Argument	- 1.0 / m_camera1 . f
>499	MultiplicativeExpression	- 1.0 / m_camera1 . f
>500	MemberAccess	m_camera1 . f
>501	Identifier	f
>502	Identifier	m_camera1
>503	UnaryOp	- 1.0
>504	PrimaryExpression	1.0
>505	UnaryOperator	-
>506	Callee	v2_scale
>507	Identifier	v2_scale
>508	Identifier	p2
>509	Identifier	p2
>510	IdentifierDeclType	v2_t
>511	IdentifierDeclStatement	 
>512	IdentifierDecl	p1 = v2_scale ( - 1.0 / m_camera0 . f , proj1 [ i ] )
>513	AssignmentExpr	p1 = v2_scale ( - 1.0 / m_camera0 . f , proj1 [ i ] )
>514	CallExpression	v2_scale ( - 1.0 / m_camera0 . f , proj1 [ i ] )
>515	ArgumentList	- 1.0 / m_camera0 . f
>516	Argument	proj1 [ i ]
>517	ArrayIndexing	proj1 [ i ]
>518	Identifier	i
>519	Identifier	proj1
>520	Argument	- 1.0 / m_camera0 . f
>521	MultiplicativeExpression	- 1.0 / m_camera0 . f
>522	MemberAccess	m_camera0 . f
>523	Identifier	f
>524	Identifier	m_camera0
>525	UnaryOp	- 1.0
>526	PrimaryExpression	1.0
>527	UnaryOperator	-
>528	Callee	v2_scale
>529	Identifier	v2_scale
>530	Identifier	p1
>531	Identifier	p1
>532	IdentifierDeclType	v2_t
>533	IncDecOp	 
>534	IncDec	++
>535	Identifier	i
>536	Condition	 
>537	RelationalExpression	i < m_num_points
>538	Identifier	m_num_points
>539	Identifier	i
>540	ForInit	 
>541	IdentifierDeclStatement	int i = 0 ;
>542	IdentifierDecl	i = 0
>543	AssignmentExpr	i = 0
>544	PrimaryExpression	0
>545	Identifier	i
>546	Identifier	i
>547	IdentifierDeclType	int
>548	IdentifierDeclStatement	 
>549	IdentifierDecl	* A = new double [ num_eqns * num_vars ]
>550	AssignmentExpr	* A = new double [ num_eqns * num_vars ]
>551	MultiplicativeExpression	num_eqns * num_vars
>552	Identifier	num_vars
>553	Identifier	num_eqns
>554	Identifier	A
>555	Identifier	A
>556	IdentifierDeclType	double *
>557	IdentifierDeclStatement	 
>558	IdentifierDecl	num_vars = 3
>559	AssignmentExpr	num_vars = 3
>560	PrimaryExpression	3
>561	Identifier	num_vars
>562	Identifier	num_vars
>563	IdentifierDeclType	int
>564	IdentifierDeclStatement	 
>565	IdentifierDecl	num_eqns = m_num_points
>566	AssignmentExpr	num_eqns = m_num_points
>567	Identifier	m_num_points
>568	Identifier	m_num_points
>569	Identifier	num_eqns
>570	IdentifierDeclType	int
>571	ExpressionStatement	 
>572	CallExpression	printf ( \"%0.3f %0.3f %0.3f -> %0.3f %0.3f %0.3f [ %0.3f ]\n\" , x [ 0 ] , x [ 1 ] , x [ 2 ] , t [ 0 ] , t [ 1 ] , \
>573	ArgumentList	\"%0.3f %0.3f %0.3f -> %0.3f %0.3f %0.3f [ %0.3f ]\n\"
>574	Argument	dot
>575	Identifier	dot
>576	Argument	t [ 2 ]
>577	ArrayIndexing	t [ 2 ]
>578	PrimaryExpression	2
>579	Identifier	t
>580	Argument	t [ 1 ]
>581	ArrayIndexing	t [ 1 ]
>582	PrimaryExpression	1
>583	Identifier	t
>584	Argument	t [ 0 ]
>585	ArrayIndexing	t [ 0 ]
>586	PrimaryExpression	0
>587	Identifier	t
>588	Argument	x [ 2 ]
>589	ArrayIndexing	x [ 2 ]
>590	PrimaryExpression	2
>591	Identifier	x
>592	Argument	x [ 1 ]
>593	ArrayIndexing	x [ 1 ]
>594	PrimaryExpression	1
>595	Identifier	x
>596	Argument	x [ 0 ]
>597	ArrayIndexing	x [ 0 ]
>598	PrimaryExpression	0
>599	Identifier	x
>600	Argument	\"%0.3f %0.3f %0.3f -> %0.3f %0.3f %0.3f [ %0.3f ]\n\"
>601	PrimaryExpression	\"%0.3f %0.3f %0.3f -> %0.3f %0.3f %0.3f [ %0.3f ]\n\"
>602	Callee	printf
>603	Identifier	printf
>604	ExpressionStatement	 
>605	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , x , t , & dot )
>606	ArgumentList	1
>607	Argument	& dot
>608	UnaryOp	& dot
>609	Identifier	dot
>610	UnaryOperator	&
>611	Argument	t
>612	Identifier	t
>613	Argument	x
>614	Identifier	x
>615	Argument	1
>616	PrimaryExpression	1
>617	Argument	3
>618	PrimaryExpression	3
>619	Argument	3
>620	PrimaryExpression	3
>621	Argument	1
>622	PrimaryExpression	1
>623	Callee	matrix_product
>624	Identifier	matrix_product
>625	IdentifierDeclStatement	 
>626	IdentifierDecl	dot
>627	Identifier	dot
>628	IdentifierDeclType	double
>629	ExpressionStatement	 
>630	CallExpression	matrix_scale ( 3 , 1 , t , 1.0 / norm , t )
>631	ArgumentList	3
>632	Argument	t
>633	Identifier	t
>634	Argument	1.0 / norm
>635	MultiplicativeExpression	1.0 / norm
>636	Identifier	norm
>637	PrimaryExpression	1.0
>638	Argument	t
>639	Identifier	t
>640	Argument	1
>641	PrimaryExpression	1
>642	Argument	3
>643	PrimaryExpression	3
>644	Callee	matrix_scale
>645	Identifier	matrix_scale
>646	IdentifierDeclStatement	 
>647	IdentifierDecl	norm = matrix_norm ( 3 , 1 , t )
>648	AssignmentExpr	norm = matrix_norm ( 3 , 1 , t )
>649	CallExpression	matrix_norm ( 3 , 1 , t )
>650	ArgumentList	3
>651	Argument	t
>652	Identifier	t
>653	Argument	1
>654	PrimaryExpression	1
>655	Argument	3
>656	PrimaryExpression	3
>657	Callee	matrix_norm
>658	Identifier	matrix_norm
>659	Identifier	norm
>660	Identifier	norm
>661	IdentifierDeclType	double
>662	ExpressionStatement	 
>663	CallExpression	matrix_scale ( 3 , 1 , t , - 1.0 , t )
>664	ArgumentList	3
>665	Argument	t
>666	Identifier	t
>667	Argument	- 1.0
>668	UnaryOp	- 1.0
>669	PrimaryExpression	1.0
>670	UnaryOperator	-
>671	Argument	t
>672	Identifier	t
>673	Argument	1
>674	PrimaryExpression	1
>675	Argument	3
>676	PrimaryExpression	3
>677	Callee	matrix_scale
>678	Identifier	matrix_scale
>679	ExpressionStatement	 
>680	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , ( double * ) R2 , c , t )
>681	ArgumentList	3
>682	Argument	t
>683	Identifier	t
>684	Argument	c
>685	Identifier	c
>686	Argument	( double * ) R2
>687	CastExpression	( double * ) R2
>688	Identifier	R2
>689	CastTarget	double *
>690	Argument	1
>691	PrimaryExpression	1
>692	Argument	3
>693	PrimaryExpression	3
>694	Argument	3
>695	PrimaryExpression	3
>696	Argument	3
>697	PrimaryExpression	3
>698	Callee	matrix_product
>699	Identifier	matrix_product
>700	IdentifierDeclStatement	 
>701	IdentifierDecl	t [ 3 ]
>702	PrimaryExpression	3
>703	Identifier	t
>704	IdentifierDeclType	double [ 3 ]
>705	ExpressionStatement	 
>706	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , c2 , c1 , c )
>707	ArgumentList	3
>708	Argument	c
>709	Identifier	c
>710	Argument	c1
>711	Identifier	c1
>712	Argument	c2
>713	Identifier	c2
>714	Argument	1
>715	PrimaryExpression	1
>716	Argument	3
>717	PrimaryExpression	3
>718	Argument	1
>719	PrimaryExpression	1
>720	Argument	3
>721	PrimaryExpression	3
>722	Callee	matrix_diff
>723	Identifier	matrix_diff
>724	IdentifierDeclStatement	 
>725	IdentifierDecl	c [ 3 ]
>726	PrimaryExpression	3
>727	Identifier	c
>728	IdentifierDeclType	double [ 3 ]
>729	ExpressionStatement	 
>730	CallExpression	matrix_scale ( 3 , 1 , c2 , - 1.0 , c2 )
>731	ArgumentList	3
>732	Argument	c2
>733	Identifier	c2
>734	Argument	- 1.0
>735	UnaryOp	- 1.0
>736	PrimaryExpression	1.0
>737	UnaryOperator	-
>738	Argument	c2
>739	Identifier	c2
>740	Argument	1
>741	PrimaryExpression	1
>742	Argument	3
>743	PrimaryExpression	3
>744	Callee	matrix_scale
>745	Identifier	matrix_scale
>746	ExpressionStatement	 
>747	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , R2 , t2 , c2 )
>748	ArgumentList	3
>749	Argument	c2
>750	Identifier	c2
>751	Argument	t2
>752	Identifier	t2
>753	Argument	R2
>754	Identifier	R2
>755	Argument	1
>756	PrimaryExpression	1
>757	Argument	3
>758	PrimaryExpression	3
>759	Argument	3
>760	PrimaryExpression	3
>761	Argument	3
>762	PrimaryExpression	3
>763	Callee	matrix_transpose_product
>764	Identifier	matrix_transpose_product
>765	ExpressionStatement	 
>766	CallExpression	matrix_scale ( 3 , 1 , c1 , - 1.0 , c1 )
>767	ArgumentList	3
>768	Argument	c1
>769	Identifier	c1
>770	Argument	- 1.0
>771	UnaryOp	- 1.0
>772	PrimaryExpression	1.0
>773	UnaryOperator	-
>774	Argument	c1
>775	Identifier	c1
>776	Argument	1
>777	PrimaryExpression	1
>778	Argument	3
>779	PrimaryExpression	3
>780	Callee	matrix_scale
>781	Identifier	matrix_scale
>782	ExpressionStatement	 
>783	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , R1 , t1 , c1 )
>784	ArgumentList	3
>785	Argument	c1
>786	Identifier	c1
>787	Argument	t1
>788	Identifier	t1
>789	Argument	R1
>790	Identifier	R1
>791	Argument	1
>792	PrimaryExpression	1
>793	Argument	3
>794	PrimaryExpression	3
>795	Argument	3
>796	PrimaryExpression	3
>797	Argument	3
>798	PrimaryExpression	3
>799	Callee	matrix_transpose_product
>800	Identifier	matrix_transpose_product
>801	IdentifierDeclStatement	 
>802	IdentifierDecl	c2 [ 3 ]
>803	PrimaryExpression	3
>804	Identifier	c2
>805	IdentifierDeclType	double [ 3 ]
>806	IdentifierDecl	c1 [ 3 ]
>807	PrimaryExpression	3
>808	Identifier	c1
>809	IdentifierDeclType	double [ 3 ]
>810	ExpressionStatement	 
>811	CallExpression	matrix_minimum_unit_norm_solution ( 10 , 3 , A , x )
>812	ArgumentList	10
>813	Argument	x
>814	Identifier	x
>815	Argument	A
>816	Identifier	A
>817	Argument	3
>818	PrimaryExpression	3
>819	Argument	10
>820	PrimaryExpression	10
>821	Callee	matrix_minimum_unit_norm_solution
>822	Identifier	matrix_minimum_unit_norm_solution
>823	IdentifierDeclStatement	 
>824	IdentifierDecl	x [ 3 ]
>825	PrimaryExpression	3
>826	Identifier	x
>827	IdentifierDeclType	double [ 3 ]
>828	ForStatement	for ( int i = 0 ; i < 10 ; i ++ )
>829	CompoundStatement	 
>830	ExpressionStatement	 
>831	AssignmentExpr	r [ 2 ] = - p1 [ 0 ] * p2 [ 1 ] + p1 [ 1 ] * p2 [ 0 ]
>832	AdditiveExpression	- p1 [ 0 ] * p2 [ 1 ] + p1 [ 1 ] * p2 [ 0 ]
>833	MultiplicativeExpression	p1 [ 1 ] * p2 [ 0 ]
>834	ArrayIndexing	p2 [ 0 ]
>835	PrimaryExpression	0
>836	Identifier	p2
>837	ArrayIndexing	p1 [ 1 ]
>838	PrimaryExpression	1
>839	Identifier	p1
>840	MultiplicativeExpression	- p1 [ 0 ] * p2 [ 1 ]
>841	ArrayIndexing	p2 [ 1 ]
>842	PrimaryExpression	1
>843	Identifier	p2
>844	UnaryOp	- p1 [ 0 ]
>845	ArrayIndexing	p1 [ 0 ]
>846	PrimaryExpression	0
>847	Identifier	p1
>848	UnaryOperator	-
>849	ArrayIndexing	r [ 2 ]
>850	PrimaryExpression	2
>851	Identifier	r
>852	ExpressionStatement	 
>853	AssignmentExpr	r [ 1 ] = p1 [ 0 ] - p2 [ 0 ]
>854	AdditiveExpression	p1 [ 0 ] - p2 [ 0 ]
>855	ArrayIndexing	p2 [ 0 ]
>856	PrimaryExpression	0
>857	Identifier	p2
>858	ArrayIndexing	p1 [ 0 ]
>859	PrimaryExpression	0
>860	Identifier	p1
>861	ArrayIndexing	r [ 1 ]
>862	PrimaryExpression	1
>863	Identifier	r
>864	ExpressionStatement	 
>865	AssignmentExpr	r [ 0 ] = - p1 [ 1 ] + p2 [ 1 ]
>866	AdditiveExpression	- p1 [ 1 ] + p2 [ 1 ]
>867	ArrayIndexing	p2 [ 1 ]
>868	PrimaryExpression	1
>869	Identifier	p2
>870	UnaryOp	- p1 [ 1 ]
>871	ArrayIndexing	p1 [ 1 ]
>872	PrimaryExpression	1
>873	Identifier	p1
>874	UnaryOperator	-
>875	ArrayIndexing	r [ 0 ]
>876	PrimaryExpression	0
>877	Identifier	r
>878	IdentifierDeclStatement	 
>879	IdentifierDecl	* r = A + i * 3
>880	AssignmentExpr	* r = A + i * 3
>881	AdditiveExpression	A + i * 3
>882	MultiplicativeExpression	i * 3
>883	PrimaryExpression	3
>884	Identifier	i
>885	Identifier	A
>886	Identifier	r
>887	Identifier	r
>888	IdentifierDeclType	double *
>889	ExpressionStatement	 
>890	AssignmentExpr	p1 [ 1 ] = p1b [ 1 ] / p1b [ 2 ]
>891	MultiplicativeExpression	p1b [ 1 ] / p1b [ 2 ]
>892	ArrayIndexing	p1b [ 2 ]
>893	PrimaryExpression	2
>894	Identifier	p1b
>895	ArrayIndexing	p1b [ 1 ]
>896	PrimaryExpression	1
>897	Identifier	p1b
>898	ArrayIndexing	p1 [ 1 ]
>899	PrimaryExpression	1
>900	Identifier	p1
>901	ExpressionStatement	 
>902	AssignmentExpr	p1 [ 0 ] = p1b [ 0 ] / p1b [ 2 ]
>903	MultiplicativeExpression	p1b [ 0 ] / p1b [ 2 ]
>904	ArrayIndexing	p1b [ 2 ]
>905	PrimaryExpression	2
>906	Identifier	p1b
>907	ArrayIndexing	p1b [ 0 ]
>908	PrimaryExpression	0
>909	Identifier	p1b
>910	ArrayIndexing	p1 [ 0 ]
>911	PrimaryExpression	0
>912	Identifier	p1
>913	ExpressionStatement	 
>914	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R12 , p1 , p1b )
>915	ArgumentList	3
>916	Argument	p1b
>917	Identifier	p1b
>918	Argument	p1
>919	Identifier	p1
>920	Argument	R12
>921	Identifier	R12
>922	Argument	1
>923	PrimaryExpression	1
>924	Argument	3
>925	PrimaryExpression	3
>926	Argument	3
>927	PrimaryExpression	3
>928	Argument	3
>929	PrimaryExpression	3
>930	Callee	matrix_product
>931	Identifier	matrix_product
>932	IdentifierDeclStatement	 
>933	IdentifierDecl	p1b [ 3 ]
>934	PrimaryExpression	3
>935	Identifier	p1b
>936	IdentifierDeclType	double [ 3 ]
>937	IdentifierDeclStatement	 
>938	IdentifierDecl	* p2 = pts2 + 3 * i
>939	AssignmentExpr	* p2 = pts2 + 3 * i
>940	AdditiveExpression	pts2 + 3 * i
>941	MultiplicativeExpression	3 * i
>942	Identifier	i
>943	PrimaryExpression	3
>944	Identifier	pts2
>945	Identifier	p2
>946	Identifier	p2
>947	IdentifierDeclType	double *
>948	IdentifierDeclStatement	 
>949	IdentifierDecl	* p1 = pts1 + 3 * i
>950	AssignmentExpr	* p1 = pts1 + 3 * i
>951	AdditiveExpression	pts1 + 3 * i
>952	MultiplicativeExpression	3 * i
>953	Identifier	i
>954	PrimaryExpression	3
>955	Identifier	pts1
>956	Identifier	p1
>957	Identifier	p1
>958	IdentifierDeclType	double *
>959	IncDecOp	 
>960	IncDec	++
>961	Identifier	i
>962	Condition	 
>963	RelationalExpression	i < 10
>964	PrimaryExpression	10
>965	Identifier	i
>966	ForInit	 
>967	IdentifierDeclStatement	int i = 0 ;
>968	IdentifierDecl	i = 0
>969	AssignmentExpr	i = 0
>970	PrimaryExpression	0
>971	Identifier	i
>972	Identifier	i
>973	IdentifierDeclType	int
>974	IdentifierDeclStatement	 
>975	IdentifierDecl	A [ 30 ]
>976	PrimaryExpression	30
>977	Identifier	A
>978	IdentifierDeclType	double [ 30 ]
>979	ExpressionStatement	 
>980	CallExpression	matrix_transpose_product2 ( 3 , 3 , 3 , 3 , R2 , R1 , R12 )
>981	ArgumentList	3
>982	Argument	R12
>983	Identifier	R12
>984	Argument	R1
>985	Identifier	R1
>986	Argument	R2
>987	Identifier	R2
>988	Argument	3
>989	PrimaryExpression	3
>990	Argument	3
>991	PrimaryExpression	3
>992	Argument	3
>993	PrimaryExpression	3
>994	Argument	3
>995	PrimaryExpression	3
>996	Callee	matrix_transpose_product2
>997	Identifier	matrix_transpose_product2
>998	IdentifierDeclStatement	 
>999	IdentifierDecl	R12 [ 9 ]
>1000	PrimaryExpression	9
>1001	Identifier	R12
>1002	IdentifierDeclType	double [ 9 ]
>1003	IdentifierDeclStatement	 
>1004	IdentifierDecl	t2 [ 3 ] = { - 0.2340 , 0.1184 , 0.3148 }
>1005	AssignmentExpr	t2 [ 3 ] = { - 0.2340 , 0.1184 , 0.3148 }
>1006	InitializerList	- 0.2340
>1007	PrimaryExpression	0.3148
>1008	PrimaryExpression	0.1184
>1009	UnaryOp	- 0.2340
>1010	PrimaryExpression	0.2340
>1011	UnaryOperator	-
>1012	Identifier	t2
>1013	PrimaryExpression	3
>1014	Identifier	t2
>1015	IdentifierDeclType	double [ 3 ]
>1016	ExpressionStatement	 
>1017	CompoundStatement	 
>1018	Statement	 
>1019	Statement	 
>1020	Statement	 
>1021	Statement	 
>1022	Statement	 
>1023	Statement	 
>1024	Statement	 
>1025	Statement	 
>1026	Statement	 
>1027	Statement	 
>1028	Statement	 
>1029	Statement	 
>1030	Statement	 
>1031	Statement	 
>1032	Statement	 
>1033	Statement	 
>1034	Statement	 
>1035	Statement	 
>1036	Statement	 
>1037	Statement	 
>1038	Statement	 
>1039	Statement	 
>1040	Statement	 
>1041	Statement	 
>1042	Statement	 
>1043	Statement	 
>1044	Statement	 
>1045	IdentifierDeclStatement	 
>1046	IdentifierDecl	t1 [ 3 ] = { - 0.3775 , - 0.2959 , - 1.4751 }
>1047	AssignmentExpr	t1 [ 3 ] = { - 0.3775 , - 0.2959 , - 1.4751 }
>1048	InitializerList	- 0.3775
>1049	UnaryOp	- 1.4751
>1050	PrimaryExpression	1.4751
>1051	UnaryOperator	-
>1052	UnaryOp	- 0.2959
>1053	PrimaryExpression	0.2959
>1054	UnaryOperator	-
>1055	UnaryOp	- 0.3775
>1056	PrimaryExpression	0.3775
>1057	UnaryOperator	-
>1058	Identifier	t1
>1059	PrimaryExpression	3
>1060	Identifier	t1
>1061	IdentifierDeclType	double [ 3 ]
>1062	ExpressionStatement	 
>1063	CompoundStatement	 
>1064	Statement	 
>1065	Statement	 
>1066	Statement	 
>1067	Statement	 
>1068	Statement	 
>1069	Statement	 
>1070	Statement	 
>1071	Statement	 
>1072	Statement	 
>1073	Statement	 
>1074	Statement	 
>1075	Statement	 
>1076	Statement	 
>1077	Statement	 
>1078	Statement	 
>1079	Statement	 
>1080	Statement	 
>1081	Statement	 
>1082	Statement	 
>1083	Statement	 
>1084	Statement	 
>1085	Statement	 
>1086	Statement	 
>1087	Statement	 
>1088	Statement	 
>1089	Statement	 
>1090	ExpressionStatement	 
>1091	CompoundStatement	 
>1092	Statement	 
>1093	Statement	 
>1094	Statement	 
>1095	Statement	 
>1096	Statement	 
>1097	Statement	 
>1098	Statement	 
>1099	Statement	 
>1100	Statement	 
>1101	Statement	 
>1102	Statement	 
>1103	Statement	 
>1104	Statement	 
>1105	Statement	 
>1106	Statement	 
>1107	Statement	 
>1108	Statement	 
>1109	Statement	 
>1110	Statement	 
>1111	Statement	 
>1112	Statement	 
>1113	Statement	 
>1114	Statement	 
>1115	Statement	 
>1116	Statement	 
>1117	Statement	 
>1118	Statement	 
>1119	Statement	 
>1120	Statement	 
>1121	Statement	 
>1122	Statement	 
>1123	Statement	 
>1124	Statement	 
>1125	Statement	 
>1126	Statement	 
>1127	Statement	 
>1128	Statement	 
>1129	Statement	 
>1130	Statement	 
>1131	Statement	 
>1132	Statement	 
>1133	Statement	 
>1134	Statement	 
>1135	Statement	 
>1136	Statement	 
>1137	Statement	 
>1138	Statement	 
>1139	Statement	 
>1140	Statement	 
>1141	Statement	 
>1142	Statement	 
>1143	Statement	 
>1144	Statement	 
>1145	Statement	 
>1146	Statement	 
>1147	Statement	 
>1148	Statement	 
>1149	Statement	 
>1150	Statement	 
>1151	Statement	 
>1152	Statement	 
>1153	Statement	 
>1154	Statement	 
>1155	Statement	 
>1156	Statement	 
>1157	Statement	 
>1158	Statement	 
>1159	Statement	 
>1160	Statement	 
>1161	Statement	 
>1162	Statement	 
>1163	Statement	 
>1164	IdentifierDeclStatement	 
>1165	IdentifierDecl	pts1 [ 30 ] = { 0.0210 , 0.3174 , 1.0000 , - 0.3350 , 0.0522 , 1.0000 , - 0.1398 , 0.3074 , 1.0000 , - 0.8325 , \
>1166	AssignmentExpr	pts1 [ 30 ] = { 0.0210 , 0.3174 , 1.0000 , - 0.3350 , 0.0522 , 1.0000 , - 0.1398 , 0.3074 , 1.0000 , \
>1167	InitializerList	0.0210
>1168	PrimaryExpression	1.0000
>1169	PrimaryExpression	0.1131
>1170	PrimaryExpression	0.1108
>1171	PrimaryExpression	1.0000
>1172	PrimaryExpression	0.4415
>1173	UnaryOp	- 0.0131
>1174	PrimaryExpression	0.0131
>1175	UnaryOperator	-
>1176	PrimaryExpression	1.0000
>1177	UnaryOp	- 0.0100
>1178	PrimaryExpression	0.0100
>1179	UnaryOperator	-
>1180	UnaryOp	- 0.2511
>1181	PrimaryExpression	0.2511
>1182	UnaryOperator	-
>1183	PrimaryExpression	1.0000
>1184	UnaryOp	- 0.0541
>1185	PrimaryExpression	0.0541
>1186	UnaryOperator	-
>1187	UnaryOp	- 0.5732
>1188	PrimaryExpression	0.5732
>1189	UnaryOperator	-
>1190	PrimaryExpression	1.0000
>1191	PrimaryExpression	0.6393
>1192	UnaryOp	- 0.4274
>1193	PrimaryExpression	0.4274
>1194	UnaryOperator	-
>1195	PrimaryExpression	1.0000
>1196	PrimaryExpression	0.4144
>1197	UnaryOp	- 1.2247
>1198	PrimaryExpression	1.2247
>1199	UnaryOperator	-
>1200	PrimaryExpression	1.0000
>1201	UnaryOp	- 0.1650
>1202	PrimaryExpression	0.1650
>1203	UnaryOperator	-
>1204	UnaryOp	- 0.8325
>1205	PrimaryExpression	0.8325
>1206	UnaryOperator	-
>1207	PrimaryExpression	1.0000
>1208	PrimaryExpression	0.3074
>1209	UnaryOp	- 0.1398
>1210	PrimaryExpression	0.1398
>1211	UnaryOperator	-
>1212	PrimaryExpression	1.0000
>1213	PrimaryExpression	0.0522
>1214	UnaryOp	- 0.3350
>1215	PrimaryExpression	0.3350
>1216	UnaryOperator	-
>1217	PrimaryExpression	1.0000
>1218	PrimaryExpression	0.3174
>1219	PrimaryExpression	0.0210
>1220	Identifier	pts1
>1221	PrimaryExpression	30
>1222	Identifier	pts1
>1223	IdentifierDeclType	double [ 30 ]
>1224	ExpressionStatement	 
>1225	CallExpression	WriteVector ( f , 9 , m_C1 )
>1226	ArgumentList	f
>1227	Argument	m_C1
>1228	Identifier	m_C1
>1229	Argument	9
>1230	PrimaryExpression	9
>1231	Argument	f
>1232	Identifier	f
>1233	Callee	WriteVector
>1234	Identifier	WriteVector
>1235	ExpressionStatement	 
>1236	CallExpression	WriteVector ( f , 9 , m_C0 )
>1237	ArgumentList	f
>1238	Argument	m_C0
>1239	Identifier	m_C0
>1240	Argument	9
>1241	PrimaryExpression	9
>1242	Argument	f
>1243	Identifier	f
>1244	Callee	WriteVector
>1245	Identifier	WriteVector
>1246	ExpressionStatement	 
>1247	CallExpression	WriteCamera ( f , m_camera1 )
>1248	ArgumentList	f
>1249	Argument	m_camera1
>1250	Identifier	m_camera1
>1251	Argument	f
>1252	Identifier	f
>1253	Callee	WriteCamera
>1254	Identifier	WriteCamera
>1255	ExpressionStatement	 
>1256	CallExpression	WriteCamera ( f , m_camera0 )
>1257	ArgumentList	f
>1258	Argument	m_camera0
>1259	Identifier	m_camera0
>1260	Argument	f
>1261	Identifier	f
>1262	Callee	WriteCamera
>1263	Identifier	WriteCamera
>1264	ForStatement	for ( int i = 0 ; i < m_num_points ; i ++ )
>1265	CompoundStatement	 
>1266	ExpressionStatement	 
>1267	AssignmentExpr	proj2 [ i ] = v2_new ( x2 , y2 )
>1268	CallExpression	v2_new ( x2 , y2 )
>1269	ArgumentList	x2
>1270	Argument	y2
>1271	Identifier	y2
>1272	Argument	x2
>1273	Identifier	x2
>1274	Callee	v2_new
>1275	Identifier	v2_new
>1276	ArrayIndexing	proj2 [ i ]
>1277	Identifier	i
>1278	Identifier	proj2
>1279	ExpressionStatement	 
>1280	AssignmentExpr	proj1 [ i ] = v2_new ( x1 , y1 )
>1281	CallExpression	v2_new ( x1 , y1 )
>1282	ArgumentList	x1
>1283	Argument	y1
>1284	Identifier	y1
>1285	Argument	x1
>1286	Identifier	x1
>1287	Callee	v2_new
>1288	Identifier	v2_new
>1289	ArrayIndexing	proj1 [ i ]
>1290	Identifier	i
>1291	Identifier	proj1
>1292	ExpressionStatement	 
>1293	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e %0.9e\n\" , x1 , y1 , x2 , y2 )
>1294	ArgumentList	f
>1295	Argument	y2
>1296	Identifier	y2
>1297	Argument	x2
>1298	Identifier	x2
>1299	Argument	y1
>1300	Identifier	y1
>1301	Argument	x1
>1302	Identifier	x1
>1303	Argument	\"%0.9e %0.9e %0.9e %0.9e\n\"
>1304	PrimaryExpression	\"%0.9e %0.9e %0.9e %0.9e\n\"
>1305	Argument	f
>1306	Identifier	f
>1307	Callee	fprintf
>1308	Identifier	fprintf
>1309	IfStatement	if ( img2 . m_fisheye )
>1310	ExpressionStatement	 
>1311	CallExpression	img2 . UndistortPoint ( x2 , y2 , x2 , y2 )
>1312	ArgumentList	x2
>1313	Argument	y2
>1314	Identifier	y2
>1315	Argument	x2
>1316	Identifier	x2
>1317	Argument	y2
>1318	Identifier	y2
>1319	Argument	x2
>1320	Identifier	x2
>1321	Callee	img2 . UndistortPoint
>1322	MemberAccess	img2 . UndistortPoint
>1323	Identifier	UndistortPoint
>1324	Identifier	img2
>1325	Condition	 
>1326	MemberAccess	img2 . m_fisheye
>1327	Identifier	m_fisheye
>1328	Identifier	img2
>1329	IfStatement	if ( img1 . m_fisheye )
>1330	ExpressionStatement	 
>1331	CallExpression	img1 . UndistortPoint ( x1 , y1 , x1 , y1 )
>1332	ArgumentList	x1
>1333	Argument	y1
>1334	Identifier	y1
>1335	Argument	x1
>1336	Identifier	x1
>1337	Argument	y1
>1338	Identifier	y1
>1339	Argument	x1
>1340	Identifier	x1
>1341	Callee	img1 . UndistortPoint
>1342	MemberAccess	img1 . UndistortPoint
>1343	Identifier	UndistortPoint
>1344	Identifier	img1
>1345	Condition	 
>1346	MemberAccess	img1 . m_fisheye
>1347	Identifier	m_fisheye
>1348	Identifier	img1
>1349	IdentifierDeclStatement	 
>1350	IdentifierDecl	y2 = img2 . m_keys [ k2 ] . m_y
>1351	AssignmentExpr	y2 = img2 . m_keys [ k2 ] . m_y
>1352	MemberAccess	img2 . m_keys [ k2 ] . m_y
>1353	Identifier	m_y
>1354	ArrayIndexing	img2 . m_keys [ k2 ]
>1355	Identifier	k2
>1356	MemberAccess	img2 . m_keys
>1357	Identifier	m_keys
>1358	Identifier	img2
>1359	Identifier	y2
>1360	Identifier	y2
>1361	IdentifierDeclType	double
>1362	IdentifierDeclStatement	 
>1363	IdentifierDecl	x2 = img2 . m_keys [ k2 ] . m_x
>1364	AssignmentExpr	x2 = img2 . m_keys [ k2 ] . m_x
>1365	MemberAccess	img2 . m_keys [ k2 ] . m_x
>1366	Identifier	m_x
>1367	ArrayIndexing	img2 . m_keys [ k2 ]
>1368	Identifier	k2
>1369	MemberAccess	img2 . m_keys
>1370	Identifier	m_keys
>1371	Identifier	img2
>1372	Identifier	x2
>1373	Identifier	x2
>1374	IdentifierDeclType	double
>1375	IdentifierDeclStatement	 
>1376	IdentifierDecl	y1 = img1 . m_keys [ k1 ] . m_y
>1377	AssignmentExpr	y1 = img1 . m_keys [ k1 ] . m_y
>1378	MemberAccess	img1 . m_keys [ k1 ] . m_y
>1379	Identifier	m_y
>1380	ArrayIndexing	img1 . m_keys [ k1 ]
>1381	Identifier	k1
>1382	MemberAccess	img1 . m_keys
>1383	Identifier	m_keys
>1384	Identifier	img1
>1385	Identifier	y1
>1386	Identifier	y1
>1387	IdentifierDeclType	double
>1388	IdentifierDeclStatement	 
>1389	IdentifierDecl	x1 = img1 . m_keys [ k1 ] . m_x
>1390	AssignmentExpr	x1 = img1 . m_keys [ k1 ] . m_x
>1391	MemberAccess	img1 . m_keys [ k1 ] . m_x
>1392	Identifier	m_x
>1393	ArrayIndexing	img1 . m_keys [ k1 ]
>1394	Identifier	k1
>1395	MemberAccess	img1 . m_keys
>1396	Identifier	m_keys
>1397	Identifier	img1
>1398	Identifier	x1
>1399	Identifier	x1
>1400	IdentifierDeclType	double
>1401	ExpressionStatement	 
>1402	CallExpression	assert ( k1 >= 0 && k2 >= 0 )
>1403	ArgumentList	k1 >= 0 && k2 >= 0
>1404	Argument	k1 >= 0 && k2 >= 0
>1405	AndExpression	k1 >= 0 && k2 >= 0
>1406	RelationalExpression	k2 >= 0
>1407	PrimaryExpression	0
>1408	Identifier	k2
>1409	RelationalExpression	k1 >= 0
>1410	PrimaryExpression	0
>1411	Identifier	k1
>1412	Callee	assert
>1413	Identifier	assert
>1414	IfStatement	if ( tr != - 1 )
>1415	ElseStatement	else
>1416	CompoundStatement	 
>1417	ExpressionStatement	 
>1418	AssignmentExpr	k2 = m_keys2 [ i ]
>1419	ArrayIndexing	m_keys2 [ i ]
>1420	Identifier	i
>1421	Identifier	m_keys2
>1422	Identifier	k2
>1423	ExpressionStatement	 
>1424	AssignmentExpr	k1 = m_keys1 [ i ]
>1425	ArrayIndexing	m_keys1 [ i ]
>1426	Identifier	i
>1427	Identifier	m_keys1
>1428	Identifier	k1
>1429	CompoundStatement	 
>1430	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>1431	CompoundStatement	 
>1432	IfStatement	if ( v [ j ] . first == i1 )
>1433	ElseStatement	else
>1434	IfStatement	if ( v [ j ] . first == i2 )
>1435	ExpressionStatement	 
>1436	AssignmentExpr	k2 = v [ j ] . second
>1437	MemberAccess	v [ j ] . second
>1438	Identifier	second
>1439	ArrayIndexing	v [ j ]
>1440	Identifier	j
>1441	Identifier	v
>1442	Identifier	k2
>1443	Condition	 
>1444	EqualityExpression	v [ j ] . first == i2
>1445	Identifier	i2
>1446	MemberAccess	v [ j ] . first
>1447	Identifier	first
>1448	ArrayIndexing	v [ j ]
>1449	Identifier	j
>1450	Identifier	v
>1451	ExpressionStatement	 
>1452	AssignmentExpr	k1 = v [ j ] . second
>1453	MemberAccess	v [ j ] . second
>1454	Identifier	second
>1455	ArrayIndexing	v [ j ]
>1456	Identifier	j
>1457	Identifier	v
>1458	Identifier	k1
>1459	Condition	 
>1460	EqualityExpression	v [ j ] . first == i1
>1461	Identifier	i1
>1462	MemberAccess	v [ j ] . first
>1463	Identifier	first
>1464	ArrayIndexing	v [ j ]
>1465	Identifier	j
>1466	Identifier	v
>1467	IncDecOp	 
>1468	IncDec	++
>1469	Identifier	j
>1470	Condition	 
>1471	RelationalExpression	j < num_views
>1472	Identifier	num_views
>1473	Identifier	j
>1474	ForInit	 
>1475	IdentifierDeclStatement	int j = 0 ;
>1476	IdentifierDecl	j = 0
>1477	AssignmentExpr	j = 0
>1478	PrimaryExpression	0
>1479	Identifier	j
>1480	Identifier	j
>1481	IdentifierDeclType	int
>1482	IdentifierDeclStatement	 
>1483	IdentifierDecl	num_views = ( int ) v . size ( )
>1484	AssignmentExpr	num_views = ( int ) v . size ( )
>1485	CastExpression	( int ) v . size ( )
>1486	CallExpression	v . size ( )
>1487	ArgumentList	 
>1488	Callee	v . size
>1489	MemberAccess	v . size
>1490	Identifier	size
>1491	Identifier	v
>1492	CastTarget	int
>1493	Identifier	num_views
>1494	Identifier	num_views
>1495	IdentifierDeclType	int
>1496	IdentifierDeclStatement	 
>1497	IdentifierDecl	& v = tracks [ tr ] . m_views
>1498	AssignmentExpr	& v = tracks [ tr ] . m_views
>1499	MemberAccess	tracks [ tr ] . m_views
>1500	Identifier	m_views
>1501	ArrayIndexing	tracks [ tr ]
>1502	Identifier	tr
>1503	Identifier	tracks
>1504	Identifier	v
>1505	Identifier	v
>1506	IdentifierDeclType	const ImageKeyVector &
>1507	Condition	 
>1508	EqualityExpression	tr != - 1
>1509	UnaryOp	- 1
>1510	PrimaryExpression	1
>1511	UnaryOperator	-
>1512	Identifier	tr
>1513	IdentifierDeclStatement	 
>1514	IdentifierDecl	k2 = - 1
>1515	AssignmentExpr	k2 = - 1
>1516	UnaryOp	- 1
>1517	PrimaryExpression	1
>1518	UnaryOperator	-
>1519	Identifier	k2
>1520	Identifier	k2
>1521	IdentifierDeclType	int
>1522	IdentifierDecl	k1 = - 1
>1523	AssignmentExpr	k1 = - 1
>1524	UnaryOp	- 1
>1525	PrimaryExpression	1
>1526	UnaryOperator	-
>1527	Identifier	k1
>1528	Identifier	k1
>1529	IdentifierDeclType	int
>1530	ExpressionStatement	 
>1531	CallExpression	fprintf ( f , \"%d %0.16e %0.16e %0.16e\n\" , tr , Vx ( m_points [ i ] ) , Vy ( m_points [ i ] ) , Vz ( m_points [ \
>1532	ArgumentList	f
>1533	Argument	Vz ( m_points [ i ] )
>1534	CallExpression	Vz ( m_points [ i ] )
>1535	ArgumentList	m_points [ i ]
>1536	Argument	m_points [ i ]
>1537	ArrayIndexing	m_points [ i ]
>1538	Identifier	i
>1539	Identifier	m_points
>1540	Callee	Vz
>1541	Identifier	Vz
>1542	Argument	Vy ( m_points [ i ] )
>1543	CallExpression	Vy ( m_points [ i ] )
>1544	ArgumentList	m_points [ i ]
>1545	Argument	m_points [ i ]
>1546	ArrayIndexing	m_points [ i ]
>1547	Identifier	i
>1548	Identifier	m_points
>1549	Callee	Vy
>1550	Identifier	Vy
>1551	Argument	Vx ( m_points [ i ] )
>1552	CallExpression	Vx ( m_points [ i ] )
>1553	ArgumentList	m_points [ i ]
>1554	Argument	m_points [ i ]
>1555	ArrayIndexing	m_points [ i ]
>1556	Identifier	i
>1557	Identifier	m_points
>1558	Callee	Vx
>1559	Identifier	Vx
>1560	Argument	tr
>1561	Identifier	tr
>1562	Argument	\"%d %0.16e %0.16e %0.16e\n\"
>1563	PrimaryExpression	\"%d %0.16e %0.16e %0.16e\n\"
>1564	Argument	f
>1565	Identifier	f
>1566	Callee	fprintf
>1567	Identifier	fprintf
>1568	IfStatement	if ( m_tracks == NULL )
>1569	ElseStatement	else
>1570	ExpressionStatement	 
>1571	AssignmentExpr	tr = m_tracks [ i ]
>1572	ArrayIndexing	m_tracks [ i ]
>1573	Identifier	i
>1574	Identifier	m_tracks
>1575	Identifier	tr
>1576	ExpressionStatement	 
>1577	AssignmentExpr	tr = - 1
>1578	UnaryOp	- 1
>1579	PrimaryExpression	1
>1580	UnaryOperator	-
>1581	Identifier	tr
>1582	Condition	 
>1583	EqualityExpression	m_tracks == NULL
>1584	Identifier	NULL
>1585	Identifier	m_tracks
>1586	IdentifierDeclStatement	 
>1587	IdentifierDecl	tr
>1588	Identifier	tr
>1589	IdentifierDeclType	int
>1590	IncDecOp	 
>1591	IncDec	++
>1592	Identifier	i
>1593	Condition	 
>1594	RelationalExpression	i < m_num_points
>1595	Identifier	m_num_points
>1596	Identifier	i
>1597	ForInit	 
>1598	IdentifierDeclStatement	int i = 0 ;
>1599	IdentifierDecl	i = 0
>1600	AssignmentExpr	i = 0
>1601	PrimaryExpression	0
>1602	Identifier	i
>1603	Identifier	i
>1604	IdentifierDeclType	int
>1605	ExpressionStatement	 
>1606	CallExpression	fprintf ( f , \"%0.9f\n\" , m_angle )
>1607	ArgumentList	f
>1608	Argument	m_angle
>1609	Identifier	m_angle
>1610	Argument	\"%0.9f\n\"
>1611	PrimaryExpression	\"%0.9f\n\"
>1612	Argument	f
>1613	Identifier	f
>1614	Callee	fprintf
>1615	Identifier	fprintf
>1616	ExpressionStatement	 
>1617	CallExpression	fprintf ( f , \"%d\n\" , m_num_points )
>1618	ArgumentList	f
>1619	Argument	m_num_points
>1620	Identifier	m_num_points
>1621	Argument	\"%d\n\"
>1622	PrimaryExpression	\"%d\n\"
>1623	Argument	f
>1624	Identifier	f
>1625	Callee	fprintf
>1626	Identifier	fprintf
>1627	ExpressionStatement	 
>1628	CallExpression	proj2 . resize ( m_num_points )
>1629	ArgumentList	m_num_points
>1630	Argument	m_num_points
>1631	Identifier	m_num_points
>1632	Callee	proj2 . resize
>1633	MemberAccess	proj2 . resize
>1634	Identifier	resize
>1635	Identifier	proj2
>1636	ExpressionStatement	 
>1637	CallExpression	proj1 . resize ( m_num_points )
>1638	ArgumentList	m_num_points
>1639	Argument	m_num_points
>1640	Identifier	m_num_points
>1641	Callee	proj1 . resize
>1642	MemberAccess	proj1 . resize
>1643	Identifier	resize
>1644	Identifier	proj1
>1645	IdentifierDeclStatement	 
>1646	IdentifierDecl	proj2
>1647	Identifier	proj2
>1648	IdentifierDeclType	std 
>1649	IdentifierDecl	proj1
>1650	Identifier	proj1
>1651	IdentifierDeclType	std 
>1754	FunctionDef	WriteModelsProjections (ModelMap & models , int num_images , const std 
>1755	ParameterList	ModelMap & models , int num_images , const std 
>1756	Parameter	 
>1757	Identifier	out_file
>1758	ParameterType	char *
>1759	Parameter	 
>1760	Identifier	image_data
>1761	ParameterType	std 
>1762	Parameter	 
>1763	Identifier	track_data
>1764	ParameterType	const std 
>1765	Parameter	 
>1766	Identifier	num_images
>1767	ParameterType	int
>1768	Parameter	 
>1769	Identifier	models
>1770	ParameterType	ModelMap &
>1771	ReturnType	void
>1772	CompoundStatement	 
>1773	IfStatement	if ( ! preload_keys )
>1774	CompoundStatement	 
>1775	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>1776	CompoundStatement	 
>1777	ExpressionStatement	 
>1778	CallExpression	image_data [ i ] . UnloadKeys ( )
>1779	ArgumentList	 
>1780	Callee	image_data [ i ] . UnloadKeys
>1781	MemberAccess	image_data [ i ] . UnloadKeys
>1782	Identifier	UnloadKeys
>1783	ArrayIndexing	image_data [ i ]
>1784	Identifier	i
>1785	Identifier	image_data
>1786	IncDecOp	 
>1787	IncDec	++
>1788	Identifier	i
>1789	Condition	 
>1790	RelationalExpression	i < num_images
>1791	Identifier	num_images
>1792	Identifier	i
>1793	ForInit	 
>1794	IdentifierDeclStatement	int i = 0 ;
>1795	IdentifierDecl	i = 0
>1796	AssignmentExpr	i = 0
>1797	PrimaryExpression	0
>1798	Identifier	i
>1799	Identifier	i
>1800	IdentifierDeclType	int
>1801	Condition	 
>1802	UnaryOp	! preload_keys
>1803	Identifier	preload_keys
>1804	UnaryOperator	!
>1805	IfStatement	if ( f == NULL )
>1806	ElseStatement	else
>1807	CompoundStatement	 
>1808	ExpressionStatement	 
>1809	CallExpression	fclose ( f )
>1810	ArgumentList	f
>1811	Argument	f
>1812	Identifier	f
>1813	Callee	fclose
>1814	Identifier	fclose
>1815	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>1816	CompoundStatement	 
>1817	IfStatement	if ( ! preload_keys )
>1818	ExpressionStatement	 
>1819	CallExpression	image_data [ i ] . UnloadKeys ( )
>1820	ArgumentList	 
>1821	Callee	image_data [ i ] . UnloadKeys
>1822	MemberAccess	image_data [ i ] . UnloadKeys
>1823	Identifier	UnloadKeys
>1824	ArrayIndexing	image_data [ i ]
>1825	Identifier	i
>1826	Identifier	image_data
>1827	Condition	 
>1828	UnaryOp	! preload_keys
>1829	Identifier	preload_keys
>1830	UnaryOperator	!
>1831	ForStatement	for ( int j = i + 1 ; j < num_images ; j ++ )
>1832	CompoundStatement	 
>1833	IfStatement	if ( models . Contains ( GetMatchIndex ( i , j ) ) )
>1834	CompoundStatement	 
>1835	IfStatement	if ( ! preload_keys )
>1836	ExpressionStatement	 
>1837	CallExpression	image_data [ j ] . UnloadKeys ( )
>1838	ArgumentList	 
>1839	Callee	image_data [ j ] . UnloadKeys
>1840	MemberAccess	image_data [ j ] . UnloadKeys
>1841	Identifier	UnloadKeys
>1842	ArrayIndexing	image_data [ j ]
>1843	Identifier	j
>1844	Identifier	image_data
>1845	Condition	 
>1846	UnaryOp	! preload_keys
>1847	Identifier	preload_keys
>1848	UnaryOperator	!
>1849	ExpressionStatement	 
>1850	CallExpression	models . GetModel ( GetMatchIndex ( i , j ) ) . WriteWithProjections ( f , track_data , i , j , img_i , img_j )
>1851	ArgumentList	f
>1852	Argument	img_j
>1853	Identifier	img_j
>1854	Argument	img_i
>1855	Identifier	img_i
>1856	Argument	j
>1857	Identifier	j
>1858	Argument	i
>1859	Identifier	i
>1860	Argument	track_data
>1861	Identifier	track_data
>1862	Argument	f
>1863	Identifier	f
>1864	Callee	models . GetModel ( GetMatchIndex ( i , j ) ) . WriteWithProjections
>1865	MemberAccess	models . GetModel ( GetMatchIndex ( i , j ) ) . WriteWithProjections
>1866	Identifier	WriteWithProjections
>1867	CallExpression	models . GetModel ( GetMatchIndex ( i , j ) )
>1868	ArgumentList	GetMatchIndex ( i , j )
>1869	Argument	GetMatchIndex ( i , j )
>1870	CallExpression	GetMatchIndex ( i , j )
>1871	ArgumentList	i
>1872	Argument	j
>1873	Identifier	j
>1874	Argument	i
>1875	Identifier	i
>1876	Callee	GetMatchIndex
>1877	Identifier	GetMatchIndex
>1878	Callee	models . GetModel
>1879	MemberAccess	models . GetModel
>1880	Identifier	GetModel
>1881	Identifier	models
>1882	ExpressionStatement	 
>1883	CallExpression	fprintf ( f , \"%d %d\n\" , i , j )
>1884	ArgumentList	f
>1885	Argument	j
>1886	Identifier	j
>1887	Argument	i
>1888	Identifier	i
>1889	Argument	\"%d %d\n\"
>1890	PrimaryExpression	\"%d %d\n\"
>1891	Argument	f
>1892	Identifier	f
>1893	Callee	fprintf
>1894	Identifier	fprintf
>1895	IdentifierDeclStatement	 
>1896	IdentifierDecl	& img_j = image_data [ j ]
>1897	AssignmentExpr	& img_j = image_data [ j ]
>1898	ArrayIndexing	image_data [ j ]
>1899	Identifier	j
>1900	Identifier	image_data
>1901	Identifier	img_j
>1902	Identifier	img_j
>1903	IdentifierDeclType	ImageData &
>1904	IfStatement	if ( ! preload_keys )
>1905	ExpressionStatement	 
>1906	CallExpression	image_data [ j ] . LoadKeys ( false )
>1907	ArgumentList	false
>1908	Argument	false
>1909	Identifier	false
>1910	Callee	image_data [ j ] . LoadKeys
>1911	MemberAccess	image_data [ j ] . LoadKeys
>1912	Identifier	LoadKeys
>1913	ArrayIndexing	image_data [ j ]
>1914	Identifier	j
>1915	Identifier	image_data
>1916	Condition	 
>1917	UnaryOp	! preload_keys
>1918	Identifier	preload_keys
>1919	UnaryOperator	!
>1920	Condition	 
>1921	CallExpression	models . Contains ( GetMatchIndex ( i , j ) )
>1922	ArgumentList	GetMatchIndex ( i , j )
>1923	Argument	GetMatchIndex ( i , j )
>1924	CallExpression	GetMatchIndex ( i , j )
>1925	ArgumentList	i
>1926	Argument	j
>1927	Identifier	j
>1928	Argument	i
>1929	Identifier	i
>1930	Callee	GetMatchIndex
>1931	Identifier	GetMatchIndex
>1932	Callee	models . Contains
>1933	MemberAccess	models . Contains
>1934	Identifier	Contains
>1935	Identifier	models
>1936	IncDecOp	 
>1937	IncDec	++
>1938	Identifier	j
>1939	Condition	 
>1940	RelationalExpression	j < num_images
>1941	Identifier	num_images
>1942	Identifier	j
>1943	ForInit	 
>1944	IdentifierDeclStatement	int j = i + 1 ;
>1945	IdentifierDecl	j = i + 1
>1946	AssignmentExpr	j = i + 1
>1947	AdditiveExpression	i + 1
>1948	PrimaryExpression	1
>1949	Identifier	i
>1950	Identifier	j
>1951	Identifier	j
>1952	IdentifierDeclType	int
>1953	IfStatement	if ( ! preload_keys )
>1954	ExpressionStatement	 
>1955	CallExpression	image_data [ i ] . LoadKeys ( false )
>1956	ArgumentList	false
>1957	Argument	false
>1958	Identifier	false
>1959	Callee	image_data [ i ] . LoadKeys
>1960	MemberAccess	image_data [ i ] . LoadKeys
>1961	Identifier	LoadKeys
>1962	ArrayIndexing	image_data [ i ]
>1963	Identifier	i
>1964	Identifier	image_data
>1965	Condition	 
>1966	UnaryOp	! preload_keys
>1967	Identifier	preload_keys
>1968	UnaryOperator	!
>1969	IdentifierDeclStatement	 
>1970	IdentifierDecl	& img_i = image_data [ i ]
>1971	AssignmentExpr	& img_i = image_data [ i ]
>1972	ArrayIndexing	image_data [ i ]
>1973	Identifier	i
>1974	Identifier	image_data
>1975	Identifier	img_i
>1976	Identifier	img_i
>1977	IdentifierDeclType	ImageData &
>1978	IncDecOp	 
>1979	IncDec	++
>1980	Identifier	i
>1981	Condition	 
>1982	RelationalExpression	i < num_images
>1983	Identifier	num_images
>1984	Identifier	i
>1985	ForInit	 
>1986	IdentifierDeclStatement	int i = 0 ;
>1987	IdentifierDecl	i = 0
>1988	AssignmentExpr	i = 0
>1989	PrimaryExpression	0
>1990	Identifier	i
>1991	Identifier	i
>1992	IdentifierDeclType	int
>1993	ExpressionStatement	 
>1994	CallExpression	fprintf ( f , \"%d\n\" , num_images )
>1995	ArgumentList	f
>1996	Argument	num_images
>1997	Identifier	num_images
>1998	Argument	\"%d\n\"
>1999	PrimaryExpression	\"%d\n\"
>2000	Argument	f
>2001	Identifier	f
>2002	Callee	fprintf
>2003	Identifier	fprintf
>2004	CompoundStatement	 
>2005	ExpressionStatement	 
>2006	Statement	 
>2007	Statement	 
>2008	Statement	 
>2009	Statement	 
>2010	Statement	 
>2011	Statement	 
>2012	Statement	 
>2013	Condition	 
>2014	EqualityExpression	f == NULL
>2015	Identifier	NULL
>2016	Identifier	f
>2017	IdentifierDeclStatement	 
>2018	IdentifierDecl	* f = fopen ( out_file , \"w\" )
>2019	AssignmentExpr	* f = fopen ( out_file , \"w\" )
>2020	CallExpression	fopen ( out_file , \"w\" )
>2021	ArgumentList	out_file
>2022	Argument	\"w\"
>2023	PrimaryExpression	\"w\"
>2024	Argument	out_file
>2025	Identifier	out_file
>2026	Callee	fopen
>2027	Identifier	fopen
>2028	Identifier	f
>2029	Identifier	f
>2030	IdentifierDeclType	FILE *
>2031	IfStatement	if ( preload_keys )
>2032	CompoundStatement	 
>2033	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2034	CompoundStatement	 
>2035	ExpressionStatement	 
>2036	CallExpression	image_data [ i ] . LoadKeys ( false )
>2037	ArgumentList	false
>2038	Argument	false
>2039	Identifier	false
>2040	Callee	image_data [ i ] . LoadKeys
>2041	MemberAccess	image_data [ i ] . LoadKeys
>2042	Identifier	LoadKeys
>2043	ArrayIndexing	image_data [ i ]
>2044	Identifier	i
>2045	Identifier	image_data
>2046	IncDecOp	 
>2047	IncDec	++
>2048	Identifier	i
>2049	Condition	 
>2050	RelationalExpression	i < num_images
>2051	Identifier	num_images
>2052	Identifier	i
>2053	ForInit	 
>2054	IdentifierDeclStatement	int i = 0 ;
>2055	IdentifierDecl	i = 0
>2056	AssignmentExpr	i = 0
>2057	PrimaryExpression	0
>2058	Identifier	i
>2059	Identifier	i
>2060	IdentifierDeclType	int
>2061	Condition	 
>2062	Identifier	preload_keys
>2063	IfStatement	if ( num_images > 30000 )
>2064	ExpressionStatement	 
>2065	AssignmentExpr	preload_keys = false
>2066	Identifier	false
>2067	Identifier	preload_keys
>2068	Condition	 
>2069	RelationalExpression	num_images > 30000
>2070	PrimaryExpression	30000
>2071	Identifier	num_images
>2072	IdentifierDeclStatement	 
>2073	IdentifierDecl	preload_keys = true
>2074	AssignmentExpr	preload_keys = true
>2075	Identifier	true
>2076	Identifier	true
>2077	Identifier	preload_keys
>2078	IdentifierDeclType	bool
>2103	FunctionDef	FixPEdges (int num_images , ModelMap & models , PEdgeMap & p_edges)
>2104	ParameterList	int num_images , ModelMap & models , PEdgeMap & p_edges
>2105	Parameter	 
>2106	Identifier	p_edges
>2107	ParameterType	PEdgeMap &
>2108	Parameter	 
>2109	Identifier	models
>2110	ParameterType	ModelMap &
>2111	Parameter	 
>2112	Identifier	num_images
>2113	ParameterType	int
>2114	ReturnType	static void
>2115	CompoundStatement	 
>2116	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2117	CompoundStatement	 
>2118	ForStatement	for ( int j = i + 1 ; j < num_images ; j ++ )
>2119	CompoundStatement	 
>2120	IfStatement	if ( models . find ( idx ) != models . end ( ) )
>2121	CompoundStatement	 
>2122	IfStatement	if ( models [ idx ] . m_angle < MIN_ANGLE )
>2123	CompoundStatement	 
>2124	ExpressionStatement	 
>2125	CallExpression	models . erase ( idx )
>2126	ArgumentList	idx
>2127	Argument	idx
>2128	Identifier	idx
>2129	Callee	models . erase
>2130	MemberAccess	models . erase
>2131	Identifier	erase
>2132	Identifier	models
>2133	IfStatement	if ( models [ idx ] . m_num_points >= 64 )
>2134	CompoundStatement	 
>2135	ExpressionStatement	 
>2136	AssignmentExpr	p_edges [ idx ] = true
>2137	Identifier	true
>2138	ArrayIndexing	p_edges [ idx ]
>2139	Identifier	idx
>2140	Identifier	p_edges
>2141	ExpressionStatement	 
>2142	CallExpression	printf ( \"[FixPEdges] Replacing with p-edge\n\" )
>2143	ArgumentList	\"[FixPEdges] Replacing with p-edge\n\"
>2144	Argument	\"[FixPEdges] Replacing with p-edge\n\"
>2145	PrimaryExpression	\"[FixPEdges] Replacing with p-edge\n\"
>2146	Callee	printf
>2147	Identifier	printf
>2148	Condition	 
>2149	RelationalExpression	models [ idx ] . m_num_points >= 64
>2150	PrimaryExpression	64
>2151	MemberAccess	models [ idx ] . m_num_points
>2152	Identifier	m_num_points
>2153	ArrayIndexing	models [ idx ]
>2154	Identifier	idx
>2155	Identifier	models
>2156	ExpressionStatement	 
>2157	CallExpression	printf ( \"[FixPEdges] Angle (%d,%d) too small [%0.3f]\n\" , i , j , models [ idx ] . m_angle )
>2158	ArgumentList	\"[FixPEdges] Angle (%d,%d) too small [%0.3f]\n\"
>2159	Argument	models [ idx ] . m_angle
>2160	MemberAccess	models [ idx ] . m_angle
>2161	Identifier	m_angle
>2162	ArrayIndexing	models [ idx ]
>2163	Identifier	idx
>2164	Identifier	models
>2165	Argument	j
>2166	Identifier	j
>2167	Argument	i
>2168	Identifier	i
>2169	Argument	\"[FixPEdges] Angle (%d,%d) too small [%0.3f]\n\"
>2170	PrimaryExpression	\"[FixPEdges] Angle (%d,%d) too small [%0.3f]\n\"
>2171	Callee	printf
>2172	Identifier	printf
>2173	Condition	 
>2174	RelationalExpression	models [ idx ] . m_angle < MIN_ANGLE
>2175	Identifier	MIN_ANGLE
>2176	MemberAccess	models [ idx ] . m_angle
>2177	Identifier	m_angle
>2178	ArrayIndexing	models [ idx ]
>2179	Identifier	idx
>2180	Identifier	models
>2181	Condition	 
>2182	EqualityExpression	models . find ( idx ) != models . end ( )
>2183	CallExpression	models . end ( )
>2184	ArgumentList	 
>2185	Callee	models . end
>2186	MemberAccess	models . end
>2187	Identifier	end
>2188	Identifier	models
>2189	CallExpression	models . find ( idx )
>2190	ArgumentList	idx
>2191	Argument	idx
>2192	Identifier	idx
>2193	Callee	models . find
>2194	MemberAccess	models . find
>2195	Identifier	find
>2196	Identifier	models
>2197	IdentifierDeclStatement	 
>2198	IdentifierDecl	idx = i * num_images + j
>2199	AssignmentExpr	idx = i * num_images + j
>2200	AdditiveExpression	i * num_images + j
>2201	Identifier	j
>2202	MultiplicativeExpression	i * num_images
>2203	Identifier	num_images
>2204	Identifier	i
>2205	Identifier	idx
>2206	Identifier	idx
>2207	IdentifierDeclType	int
>2208	IncDecOp	 
>2209	IncDec	++
>2210	Identifier	j
>2211	Condition	 
>2212	RelationalExpression	j < num_images
>2213	Identifier	num_images
>2214	Identifier	j
>2215	ForInit	 
>2216	IdentifierDeclStatement	int j = i + 1 ;
>2217	IdentifierDecl	j = i + 1
>2218	AssignmentExpr	j = i + 1
>2219	AdditiveExpression	i + 1
>2220	PrimaryExpression	1
>2221	Identifier	i
>2222	Identifier	j
>2223	Identifier	j
>2224	IdentifierDeclType	int
>2225	IncDecOp	 
>2226	IncDec	++
>2227	Identifier	i
>2228	Condition	 
>2229	RelationalExpression	i < num_images
>2230	Identifier	num_images
>2231	Identifier	i
>2232	ForInit	 
>2233	IdentifierDeclStatement	int i = 0 ;
>2234	IdentifierDecl	i = 0
>2235	AssignmentExpr	i = 0
>2236	PrimaryExpression	0
>2237	Identifier	i
>2238	Identifier	i
>2239	IdentifierDeclType	int
>2240	IdentifierDeclStatement	 
>2241	IdentifierDecl	MIN_ANGLE = 1.5
>2242	AssignmentExpr	MIN_ANGLE = 1.5
>2243	PrimaryExpression	1.5
>2244	Identifier	MIN_ANGLE
>2245	Identifier	MIN_ANGLE
>2246	IdentifierDeclType	const double
>2265	FunctionDef	FixScaffoldEdges (int num_images , ModelMap & models)
>2266	ParameterList	int num_images , ModelMap & models
>2267	Parameter	 
>2268	Identifier	models
>2269	ParameterType	ModelMap &
>2270	Parameter	 
>2271	Identifier	num_images
>2272	ParameterType	int
>2273	ReturnType	static void
>2274	CompoundStatement	 
>2275	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2276	CompoundStatement	 
>2277	ForStatement	for ( int j = i + 1 ; j < num_images ; j ++ )
>2278	CompoundStatement	 
>2279	IfStatement	if ( models . Contains ( idx ) )
>2280	CompoundStatement	 
>2281	IfStatement	if ( m . m_angle < MIN_ANGLE )
>2282	CompoundStatement	 
>2283	IfStatement	if ( m . m_num_points >= 64 )
>2284	ElseStatement	else
>2285	CompoundStatement	 
>2286	ExpressionStatement	 
>2287	CallExpression	models . erase ( idx )
>2288	ArgumentList	idx
>2289	Argument	idx
>2290	Identifier	idx
>2291	Callee	models . erase
>2292	MemberAccess	models . erase
>2293	Identifier	erase
>2294	Identifier	models
>2295	CompoundStatement	 
>2296	ExpressionStatement	 
>2297	CallExpression	m . TurnOffScaffold ( )
>2298	ArgumentList	 
>2299	Callee	m . TurnOffScaffold
>2300	MemberAccess	m . TurnOffScaffold
>2301	Identifier	TurnOffScaffold
>2302	Identifier	m
>2303	ExpressionStatement	 
>2304	Statement	 
>2305	Statement	 
>2306	Statement	 
>2307	Statement	 
>2308	Statement	 
>2309	Condition	 
>2310	RelationalExpression	m . m_num_points >= 64
>2311	PrimaryExpression	64
>2312	MemberAccess	m . m_num_points
>2313	Identifier	m_num_points
>2314	Identifier	m
>2315	ExpressionStatement	 
>2316	Statement	 
>2317	Statement	 
>2318	Statement	 
>2319	Statement	 
>2320	Statement	 
>2321	Statement	 
>2322	Statement	 
>2323	Statement	 
>2324	Statement	 
>2325	Statement	 
>2326	Statement	 
>2327	Statement	 
>2328	Statement	 
>2329	Condition	 
>2330	RelationalExpression	m . m_angle < MIN_ANGLE
>2331	Identifier	MIN_ANGLE
>2332	MemberAccess	m . m_angle
>2333	Identifier	m_angle
>2334	Identifier	m
>2335	IdentifierDeclStatement	 
>2336	IdentifierDecl	& m = models . GetModel ( idx )
>2337	AssignmentExpr	& m = models . GetModel ( idx )
>2338	CallExpression	models . GetModel ( idx )
>2339	ArgumentList	idx
>2340	Argument	idx
>2341	Identifier	idx
>2342	Callee	models . GetModel
>2343	MemberAccess	models . GetModel
>2344	Identifier	GetModel
>2345	Identifier	models
>2346	Identifier	m
>2347	Identifier	m
>2348	IdentifierDeclType	TwoFrameModel &
>2349	Condition	 
>2350	CallExpression	models . Contains ( idx )
>2351	ArgumentList	idx
>2352	Argument	idx
>2353	Identifier	idx
>2354	Callee	models . Contains
>2355	MemberAccess	models . Contains
>2356	Identifier	Contains
>2357	Identifier	models
>2358	IdentifierDeclStatement	 
>2359	IdentifierDecl	idx = GetMatchIndex ( i , j )
>2360	AssignmentExpr	idx = GetMatchIndex ( i , j )
>2361	CallExpression	GetMatchIndex ( i , j )
>2362	ArgumentList	i
>2363	Argument	j
>2364	Identifier	j
>2365	Argument	i
>2366	Identifier	i
>2367	Callee	GetMatchIndex
>2368	Identifier	GetMatchIndex
>2369	Identifier	idx
>2370	Identifier	idx
>2371	IdentifierDeclType	MatchIndex
>2372	IncDecOp	 
>2373	IncDec	++
>2374	Identifier	j
>2375	Condition	 
>2376	RelationalExpression	j < num_images
>2377	Identifier	num_images
>2378	Identifier	j
>2379	ForInit	 
>2380	IdentifierDeclStatement	int j = i + 1 ;
>2381	IdentifierDecl	j = i + 1
>2382	AssignmentExpr	j = i + 1
>2383	AdditiveExpression	i + 1
>2384	PrimaryExpression	1
>2385	Identifier	i
>2386	Identifier	j
>2387	Identifier	j
>2388	IdentifierDeclType	int
>2389	IncDecOp	 
>2390	IncDec	++
>2391	Identifier	i
>2392	Condition	 
>2393	RelationalExpression	i < num_images
>2394	Identifier	num_images
>2395	Identifier	i
>2396	ForInit	 
>2397	IdentifierDeclStatement	int i = 0 ;
>2398	IdentifierDecl	i = 0
>2399	AssignmentExpr	i = 0
>2400	PrimaryExpression	0
>2401	Identifier	i
>2402	Identifier	i
>2403	IdentifierDeclType	int
>2404	IdentifierDeclStatement	 
>2405	IdentifierDecl	MIN_ANGLE = 1.5
>2406	AssignmentExpr	MIN_ANGLE = 1.5
>2407	PrimaryExpression	1.5
>2408	Identifier	MIN_ANGLE
>2409	Identifier	MIN_ANGLE
>2410	IdentifierDeclType	const double
>2426	FunctionDef	PermuteMatches (std 
>2427	ParameterList	std 
>2428	Parameter	 
>2429	Identifier	matches
>2430	ParameterType	std 
>2431	ReturnType	static void
>2432	CompoundStatement	 
>2433	ExpressionStatement	 
>2434	Identifier	perm
>2435	Statement	 
>2436	Statement	 
>2437	Statement	 
>2438	ExpressionStatement	 
>2439	AssignmentExpr	matches = matches_new
>2440	Identifier	matches_new
>2441	Identifier	matches
>2442	ForStatement	for ( int i = 0 ; i < num_matches ; i ++ )
>2443	CompoundStatement	 
>2444	ExpressionStatement	 
>2445	AssignmentExpr	matches_new [ i ] = matches [ perm [ i ] ]
>2446	ArrayIndexing	matches [ perm [ i ] ]
>2447	ArrayIndexing	perm [ i ]
>2448	Identifier	i
>2449	Identifier	perm
>2450	Identifier	matches
>2451	ArrayIndexing	matches_new [ i ]
>2452	Identifier	i
>2453	Identifier	matches_new
>2454	IncDecOp	 
>2455	IncDec	++
>2456	Identifier	i
>2457	Condition	 
>2458	RelationalExpression	i < num_matches
>2459	Identifier	num_matches
>2460	Identifier	i
>2461	ForInit	 
>2462	IdentifierDeclStatement	int i = 0 ;
>2463	IdentifierDecl	i = 0
>2464	AssignmentExpr	i = 0
>2465	PrimaryExpression	0
>2466	Identifier	i
>2467	Identifier	i
>2468	IdentifierDeclType	int
>2469	ExpressionStatement	 
>2470	CallExpression	matches_new . resize ( num_matches )
>2471	ArgumentList	num_matches
>2472	Argument	num_matches
>2473	Identifier	num_matches
>2474	Callee	matches_new . resize
>2475	MemberAccess	matches_new . resize
>2476	Identifier	resize
>2477	Identifier	matches_new
>2478	IdentifierDeclStatement	 
>2479	IdentifierDecl	matches_new
>2480	Identifier	matches_new
>2481	IdentifierDeclType	std 
>2482	ExpressionStatement	 
>2483	CallExpression	generate_permutation ( num_matches , perm )
>2484	ArgumentList	num_matches
>2485	Argument	perm
>2486	Identifier	perm
>2487	Argument	num_matches
>2488	Identifier	num_matches
>2489	Callee	generate_permutation
>2490	Identifier	generate_permutation
>2491	IdentifierDeclStatement	 
>2492	IdentifierDecl	* perm = new int [ num_matches ]
>2493	AssignmentExpr	* perm = new int [ num_matches ]
>2494	Identifier	num_matches
>2495	Identifier	num_matches
>2496	Identifier	perm
>2497	IdentifierDeclType	int *
>2498	IdentifierDeclStatement	 
>2499	IdentifierDecl	num_matches = ( int ) matches . size ( )
>2500	AssignmentExpr	num_matches = ( int ) matches . size ( )
>2501	CastExpression	( int ) matches . size ( )
>2502	CallExpression	matches . size ( )
>2503	ArgumentList	 
>2504	Callee	matches . size
>2505	MemberAccess	matches . size
>2506	Identifier	size
>2507	Identifier	matches
>2508	CastTarget	int
>2509	Identifier	num_matches
>2510	Identifier	num_matches
>2511	IdentifierDeclType	int
>2527	FunctionDef	ClearKeys (ImageData & data)
>2528	ParameterList	ImageData & data
>2529	Parameter	 
>2530	Identifier	data
>2531	ParameterType	ImageData &
>2532	ReturnType	static void
>2533	CompoundStatement	 
>2534	ForStatement	for ( iter = data . m_keys . begin ( ) ; iter != data . m_keys . end ( ) ; iter ++ )
>2535	CompoundStatement	 
>2536	ExpressionStatement	 
>2537	AssignmentExpr	iter -> m_extra = - 1
>2538	UnaryOp	- 1
>2539	PrimaryExpression	1
>2540	UnaryOperator	-
>2541	PtrMemberAccess	iter -> m_extra
>2542	Identifier	m_extra
>2543	Identifier	iter
>2544	IncDecOp	 
>2545	IncDec	++
>2546	Identifier	iter
>2547	Condition	 
>2548	EqualityExpression	iter != data . m_keys . end ( )
>2549	CallExpression	data . m_keys . end ( )
>2550	ArgumentList	 
>2551	Callee	data . m_keys . end
>2552	MemberAccess	data . m_keys . end
>2553	Identifier	end
>2554	MemberAccess	data . m_keys
>2555	Identifier	m_keys
>2556	Identifier	data
>2557	Identifier	iter
>2558	ForInit	 
>2559	AssignmentExpr	iter = data . m_keys . begin ( )
>2560	CallExpression	data . m_keys . begin ( )
>2561	ArgumentList	 
>2562	Callee	data . m_keys . begin
>2563	MemberAccess	data . m_keys . begin
>2564	Identifier	begin
>2565	MemberAccess	data . m_keys
>2566	Identifier	m_keys
>2567	Identifier	data
>2568	Identifier	iter
>2569	ForStatement	for ( iter = data . m_keys . begin ( ) ; iter != data . m_keys . end ( ) ; iter ++ )
>2570	CompoundStatement	 
>2571	ExpressionStatement	 
>2572	AssignmentExpr	iter -> m_extra = - 1
>2573	UnaryOp	- 1
>2574	PrimaryExpression	1
>2575	UnaryOperator	-
>2576	PtrMemberAccess	iter -> m_extra
>2577	Identifier	m_extra
>2578	Identifier	iter
>2579	IncDecOp	 
>2580	IncDec	++
>2581	Identifier	iter
>2582	Condition	 
>2583	EqualityExpression	iter != data . m_keys . end ( )
>2584	CallExpression	data . m_keys . end ( )
>2585	ArgumentList	 
>2586	Callee	data . m_keys . end
>2587	MemberAccess	data . m_keys . end
>2588	Identifier	end
>2589	MemberAccess	data . m_keys
>2590	Identifier	m_keys
>2591	Identifier	data
>2592	Identifier	iter
>2593	ForInit	 
>2594	AssignmentExpr	iter = data . m_keys . begin ( )
>2595	CallExpression	data . m_keys . begin ( )
>2596	ArgumentList	 
>2597	Callee	data . m_keys . begin
>2598	MemberAccess	data . m_keys . begin
>2599	Identifier	begin
>2600	MemberAccess	data . m_keys
>2601	Identifier	m_keys
>2602	Identifier	data
>2603	Identifier	iter
>2604	IdentifierDeclStatement	 
>2605	IdentifierDecl	iter
>2606	Identifier	iter
>2607	IdentifierDeclType	std 
>2618	FunctionDef	BundlerApp 
>2619	ParameterList	int i1 , int i2 , camera_params_t * cameras , int num_points , v3_t * points , v3_t * colors , std 
>2620	Parameter	 
>2621	Identifier	threshold
>2622	ParameterType	double
>2623	Parameter	 
>2624	Identifier	points_new
>2625	ParameterType	v3_t *
>2626	Parameter	 
>2627	Identifier	cameras_new
>2628	ParameterType	camera_params_t *
>2629	Parameter	 
>2630	Identifier	pt_views
>2631	ParameterType	std 
>2632	Parameter	 
>2633	Identifier	colors
>2634	ParameterType	v3_t *
>2635	Parameter	 
>2636	Identifier	points
>2637	ParameterType	v3_t *
>2638	Parameter	 
>2639	Identifier	num_points
>2640	ParameterType	int
>2641	Parameter	 
>2642	Identifier	cameras
>2643	ParameterType	camera_params_t *
>2644	Parameter	 
>2645	Identifier	i2
>2646	ParameterType	int
>2647	Parameter	 
>2648	Identifier	i1
>2649	ParameterType	int
>2650	ReturnType	double
>2651	CompoundStatement	 
>2652	ReturnStatement	 
>2653	Identifier	error1
>2654	ExpressionStatement	 
>2655	AssignmentExpr	error1 = RunSFM_SBA ( num_points , 2 , 0 , false , cameras_new , points_new , added_order , colors , \
>2656	CallExpression	RunSFM_SBA ( num_points , 2 , 0 , false , cameras_new , points_new , added_order , colors , pt_views , threshold , \
>2657	ArgumentList	num_points
>2658	Argument	true
>2659	Identifier	true
>2660	Argument	NULL
>2661	Identifier	NULL
>2662	Argument	NULL
>2663	Identifier	NULL
>2664	Argument	NULL
>2665	Identifier	NULL
>2666	Argument	NULL
>2667	Identifier	NULL
>2668	Argument	threshold
>2669	Identifier	threshold
>2670	Argument	pt_views
>2671	Identifier	pt_views
>2672	Argument	colors
>2673	Identifier	colors
>2674	Argument	added_order
>2675	Identifier	added_order
>2676	Argument	points_new
>2677	Identifier	points_new
>2678	Argument	cameras_new
>2679	Identifier	cameras_new
>2680	Argument	false
>2681	Identifier	false
>2682	Argument	0
>2683	PrimaryExpression	0
>2684	Argument	2
>2685	PrimaryExpression	2
>2686	Argument	num_points
>2687	Identifier	num_points
>2688	Callee	RunSFM_SBA
>2689	Identifier	RunSFM_SBA
>2690	Identifier	error1
>2691	IdentifierDeclStatement	 
>2692	IdentifierDecl	error1
>2693	Identifier	error1
>2694	IdentifierDeclType	double
>2695	IdentifierDeclStatement	 
>2696	IdentifierDecl	added_order [ 2 ] = { i1 , i2 }
>2697	AssignmentExpr	added_order [ 2 ] = { i1 , i2 }
>2698	InitializerList	i1
>2699	Identifier	i2
>2700	Identifier	i1
>2701	Identifier	added_order
>2702	PrimaryExpression	2
>2703	Identifier	added_order
>2704	IdentifierDeclType	int [ 2 ]
>2705	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>2706	CompoundStatement	 
>2707	ExpressionStatement	 
>2708	AssignmentExpr	points_new [ i ] = Triangulate ( p , q , cameras_new [ 0 ] , cameras_new [ 1 ] , error , in_front , angle , \
>2709	CallExpression	Triangulate ( p , q , cameras_new [ 0 ] , cameras_new [ 1 ] , error , in_front , angle , true )
>2710	ArgumentList	p
>2711	Argument	true
>2712	Identifier	true
>2713	Argument	angle
>2714	Identifier	angle
>2715	Argument	in_front
>2716	Identifier	in_front
>2717	Argument	error
>2718	Identifier	error
>2719	Argument	cameras_new [ 1 ]
>2720	ArrayIndexing	cameras_new [ 1 ]
>2721	PrimaryExpression	1
>2722	Identifier	cameras_new
>2723	Argument	cameras_new [ 0 ]
>2724	ArrayIndexing	cameras_new [ 0 ]
>2725	PrimaryExpression	0
>2726	Identifier	cameras_new
>2727	Argument	q
>2728	Identifier	q
>2729	Argument	p
>2730	Identifier	p
>2731	Callee	Triangulate
>2732	Identifier	Triangulate
>2733	ArrayIndexing	points_new [ i ]
>2734	Identifier	i
>2735	Identifier	points_new
>2736	IdentifierDeclStatement	 
>2737	IdentifierDecl	error = 0.0
>2738	AssignmentExpr	error = 0.0
>2739	PrimaryExpression	0.0
>2740	Identifier	error
>2741	Identifier	error
>2742	IdentifierDeclType	double
>2743	IdentifierDeclStatement	 
>2744	IdentifierDecl	angle = 0.0
>2745	AssignmentExpr	angle = 0.0
>2746	PrimaryExpression	0.0
>2747	Identifier	angle
>2748	Identifier	angle
>2749	IdentifierDeclType	double
>2750	IdentifierDeclStatement	 
>2751	IdentifierDecl	in_front = true
>2752	AssignmentExpr	in_front = true
>2753	Identifier	true
>2754	Identifier	true
>2755	Identifier	in_front
>2756	IdentifierDeclType	bool
>2757	IdentifierDeclStatement	 
>2758	IdentifierDecl	q = v2_new ( proj2 [ 0 ] , proj2 [ 1 ] )
>2759	AssignmentExpr	q = v2_new ( proj2 [ 0 ] , proj2 [ 1 ] )
>2760	CallExpression	v2_new ( proj2 [ 0 ] , proj2 [ 1 ] )
>2761	ArgumentList	proj2 [ 0 ]
>2762	Argument	proj2 [ 1 ]
>2763	ArrayIndexing	proj2 [ 1 ]
>2764	PrimaryExpression	1
>2765	Identifier	proj2
>2766	Argument	proj2 [ 0 ]
>2767	ArrayIndexing	proj2 [ 0 ]
>2768	PrimaryExpression	0
>2769	Identifier	proj2
>2770	Callee	v2_new
>2771	Identifier	v2_new
>2772	Identifier	q
>2773	Identifier	q
>2774	IdentifierDeclType	v2_t
>2775	IdentifierDeclStatement	 
>2776	IdentifierDecl	p = v2_new ( proj1 [ 0 ] , proj1 [ 1 ] )
>2777	AssignmentExpr	p = v2_new ( proj1 [ 0 ] , proj1 [ 1 ] )
>2778	CallExpression	v2_new ( proj1 [ 0 ] , proj1 [ 1 ] )
>2779	ArgumentList	proj1 [ 0 ]
>2780	Argument	proj1 [ 1 ]
>2781	ArrayIndexing	proj1 [ 1 ]
>2782	PrimaryExpression	1
>2783	Identifier	proj1
>2784	Argument	proj1 [ 0 ]
>2785	ArrayIndexing	proj1 [ 0 ]
>2786	PrimaryExpression	0
>2787	Identifier	proj1
>2788	Callee	v2_new
>2789	Identifier	v2_new
>2790	Identifier	p
>2791	Identifier	p
>2792	IdentifierDeclType	v2_t
>2793	IfStatement	if ( m_optimize_for_fisheye )
>2794	CompoundStatement	 
>2795	ExpressionStatement	 
>2796	CallExpression	m_image_data [ i2 ] . UndistortPoint ( x2 , y2 , proj2 [ 0 ] , proj2 [ 1 ] )
>2797	ArgumentList	x2
>2798	Argument	proj2 [ 1 ]
>2799	ArrayIndexing	proj2 [ 1 ]
>2800	PrimaryExpression	1
>2801	Identifier	proj2
>2802	Argument	proj2 [ 0 ]
>2803	ArrayIndexing	proj2 [ 0 ]
>2804	PrimaryExpression	0
>2805	Identifier	proj2
>2806	Argument	y2
>2807	Identifier	y2
>2808	Argument	x2
>2809	Identifier	x2
>2810	Callee	m_image_data [ i2 ] . UndistortPoint
>2811	MemberAccess	m_image_data [ i2 ] . UndistortPoint
>2812	Identifier	UndistortPoint
>2813	ArrayIndexing	m_image_data [ i2 ]
>2814	Identifier	i2
>2815	Identifier	m_image_data
>2816	ExpressionStatement	 
>2817	CallExpression	m_image_data [ i1 ] . UndistortPoint ( x1 , y1 , proj1 [ 0 ] , proj1 [ 1 ] )
>2818	ArgumentList	x1
>2819	Argument	proj1 [ 1 ]
>2820	ArrayIndexing	proj1 [ 1 ]
>2821	PrimaryExpression	1
>2822	Identifier	proj1
>2823	Argument	proj1 [ 0 ]
>2824	ArrayIndexing	proj1 [ 0 ]
>2825	PrimaryExpression	0
>2826	Identifier	proj1
>2827	Argument	y1
>2828	Identifier	y1
>2829	Argument	x1
>2830	Identifier	x1
>2831	Callee	m_image_data [ i1 ] . UndistortPoint
>2832	MemberAccess	m_image_data [ i1 ] . UndistortPoint
>2833	Identifier	UndistortPoint
>2834	ArrayIndexing	m_image_data [ i1 ]
>2835	Identifier	i1
>2836	Identifier	m_image_data
>2837	IdentifierDeclStatement	 
>2838	IdentifierDecl	y2 = proj2 [ 1 ]
>2839	AssignmentExpr	y2 = proj2 [ 1 ]
>2840	ArrayIndexing	proj2 [ 1 ]
>2841	PrimaryExpression	1
>2842	Identifier	proj2
>2843	Identifier	y2
>2844	Identifier	y2
>2845	IdentifierDeclType	double
>2846	IdentifierDeclStatement	 
>2847	IdentifierDecl	x2 = proj2 [ 0 ]
>2848	AssignmentExpr	x2 = proj2 [ 0 ]
>2849	ArrayIndexing	proj2 [ 0 ]
>2850	PrimaryExpression	0
>2851	Identifier	proj2
>2852	Identifier	x2
>2853	Identifier	x2
>2854	IdentifierDeclType	double
>2855	IdentifierDeclStatement	 
>2856	IdentifierDecl	y1 = proj1 [ 1 ]
>2857	AssignmentExpr	y1 = proj1 [ 1 ]
>2858	ArrayIndexing	proj1 [ 1 ]
>2859	PrimaryExpression	1
>2860	Identifier	proj1
>2861	Identifier	y1
>2862	Identifier	y1
>2863	IdentifierDeclType	double
>2864	IdentifierDeclStatement	 
>2865	IdentifierDecl	x1 = proj1 [ 0 ]
>2866	AssignmentExpr	x1 = proj1 [ 0 ]
>2867	ArrayIndexing	proj1 [ 0 ]
>2868	PrimaryExpression	0
>2869	Identifier	proj1
>2870	Identifier	x1
>2871	Identifier	x1
>2872	IdentifierDeclType	double
>2873	Condition	 
>2874	Identifier	m_optimize_for_fisheye
>2875	IdentifierDeclStatement	 
>2876	IdentifierDecl	proj2 [ 2 ] = { GetKey ( i2 , k2 ) . m_x , GetKey ( i2 , k2 ) . m_y }
>2877	AssignmentExpr	proj2 [ 2 ] = { GetKey ( i2 , k2 ) . m_x , GetKey ( i2 , k2 ) . m_y }
>2878	InitializerList	GetKey ( i2 , k2 ) . m_x
>2879	MemberAccess	GetKey ( i2 , k2 ) . m_y
>2880	Identifier	m_y
>2881	CallExpression	GetKey ( i2 , k2 )
>2882	ArgumentList	i2
>2883	Argument	k2
>2884	Identifier	k2
>2885	Argument	i2
>2886	Identifier	i2
>2887	Callee	GetKey
>2888	Identifier	GetKey
>2889	MemberAccess	GetKey ( i2 , k2 ) . m_x
>2890	Identifier	m_x
>2891	CallExpression	GetKey ( i2 , k2 )
>2892	ArgumentList	i2
>2893	Argument	k2
>2894	Identifier	k2
>2895	Argument	i2
>2896	Identifier	i2
>2897	Callee	GetKey
>2898	Identifier	GetKey
>2899	Identifier	proj2
>2900	PrimaryExpression	2
>2901	Identifier	proj2
>2902	IdentifierDeclType	double [ 2 ]
>2903	IdentifierDeclStatement	 
>2904	IdentifierDecl	proj1 [ 2 ] = { GetKey ( i1 , k1 ) . m_x , GetKey ( i1 , k1 ) . m_y }
>2905	AssignmentExpr	proj1 [ 2 ] = { GetKey ( i1 , k1 ) . m_x , GetKey ( i1 , k1 ) . m_y }
>2906	InitializerList	GetKey ( i1 , k1 ) . m_x
>2907	MemberAccess	GetKey ( i1 , k1 ) . m_y
>2908	Identifier	m_y
>2909	CallExpression	GetKey ( i1 , k1 )
>2910	ArgumentList	i1
>2911	Argument	k1
>2912	Identifier	k1
>2913	Argument	i1
>2914	Identifier	i1
>2915	Callee	GetKey
>2916	Identifier	GetKey
>2917	MemberAccess	GetKey ( i1 , k1 ) . m_x
>2918	Identifier	m_x
>2919	CallExpression	GetKey ( i1 , k1 )
>2920	ArgumentList	i1
>2921	Argument	k1
>2922	Identifier	k1
>2923	Argument	i1
>2924	Identifier	i1
>2925	Callee	GetKey
>2926	Identifier	GetKey
>2927	Identifier	proj1
>2928	PrimaryExpression	2
>2929	Identifier	proj1
>2930	IdentifierDeclType	double [ 2 ]
>2931	IdentifierDeclStatement	 
>2932	IdentifierDecl	k2 = pt_views [ i ] [ 1 ] . second
>2933	AssignmentExpr	k2 = pt_views [ i ] [ 1 ] . second
>2934	MemberAccess	pt_views [ i ] [ 1 ] . second
>2935	Identifier	second
>2936	ArrayIndexing	pt_views [ i ] [ 1 ]
>2937	PrimaryExpression	1
>2938	ArrayIndexing	pt_views [ i ]
>2939	Identifier	i
>2940	Identifier	pt_views
>2941	Identifier	k2
>2942	Identifier	k2
>2943	IdentifierDeclType	int
>2944	IdentifierDeclStatement	 
>2945	IdentifierDecl	k1 = pt_views [ i ] [ 0 ] . second
>2946	AssignmentExpr	k1 = pt_views [ i ] [ 0 ] . second
>2947	MemberAccess	pt_views [ i ] [ 0 ] . second
>2948	Identifier	second
>2949	ArrayIndexing	pt_views [ i ] [ 0 ]
>2950	PrimaryExpression	0
>2951	ArrayIndexing	pt_views [ i ]
>2952	Identifier	i
>2953	Identifier	pt_views
>2954	Identifier	k1
>2955	Identifier	k1
>2956	IdentifierDeclType	int
>2957	IfStatement	if ( pt_views [ i ] . size ( ) == 0 )
>2958	ContinueStatement	 
>2959	Condition	 
>2960	EqualityExpression	pt_views [ i ] . size ( ) == 0
>2961	PrimaryExpression	0
>2962	CallExpression	pt_views [ i ] . size ( )
>2963	ArgumentList	 
>2964	Callee	pt_views [ i ] . size
>2965	MemberAccess	pt_views [ i ] . size
>2966	Identifier	size
>2967	ArrayIndexing	pt_views [ i ]
>2968	Identifier	i
>2969	Identifier	pt_views
>2970	IncDecOp	 
>2971	IncDec	++
>2972	Identifier	i
>2973	Condition	 
>2974	RelationalExpression	i < num_points
>2975	Identifier	num_points
>2976	Identifier	i
>2977	ForInit	 
>2978	IdentifierDeclStatement	int i = 0 ;
>2979	IdentifierDecl	i = 0
>2980	AssignmentExpr	i = 0
>2981	PrimaryExpression	0
>2982	Identifier	i
>2983	Identifier	i
>2984	IdentifierDeclType	int
>2985	ExpressionStatement	 
>2986	CallExpression	memcpy ( cameras_new [ 1 ] . t , tmp . t , sizeof ( double ) * 3 )
>2987	ArgumentList	cameras_new [ 1 ] . t
>2988	Argument	sizeof ( double ) * 3
>2989	MultiplicativeExpression	sizeof ( double ) * 3
>2990	PrimaryExpression	3
>2991	SizeofExpr	sizeof ( double )
>2992	SizeofOperand	double
>2993	Sizeof	sizeof
>2994	Argument	tmp . t
>2995	MemberAccess	tmp . t
>2996	Identifier	t
>2997	Identifier	tmp
>2998	Argument	cameras_new [ 1 ] . t
>2999	MemberAccess	cameras_new [ 1 ] . t
>3000	Identifier	t
>3001	ArrayIndexing	cameras_new [ 1 ]
>3002	PrimaryExpression	1
>3003	Identifier	cameras_new
>3004	Callee	memcpy
>3005	Identifier	memcpy
>3006	ExpressionStatement	 
>3007	CallExpression	memcpy ( cameras_new [ 1 ] . R , tmp . R , sizeof ( double ) * 9 )
>3008	ArgumentList	cameras_new [ 1 ] . R
>3009	Argument	sizeof ( double ) * 9
>3010	MultiplicativeExpression	sizeof ( double ) * 9
>3011	PrimaryExpression	9
>3012	SizeofExpr	sizeof ( double )
>3013	SizeofOperand	double
>3014	Sizeof	sizeof
>3015	Argument	tmp . R
>3016	MemberAccess	tmp . R
>3017	Identifier	R
>3018	Identifier	tmp
>3019	Argument	cameras_new [ 1 ] . R
>3020	MemberAccess	cameras_new [ 1 ] . R
>3021	Identifier	R
>3022	ArrayIndexing	cameras_new [ 1 ]
>3023	PrimaryExpression	1
>3024	Identifier	cameras_new
>3025	Callee	memcpy
>3026	Identifier	memcpy
>3027	ExpressionStatement	 
>3028	CallExpression	memcpy ( cameras_new [ 0 ] . t , cameras_new [ 1 ] . t , sizeof ( double ) * 3 )
>3029	ArgumentList	cameras_new [ 0 ] . t
>3030	Argument	sizeof ( double ) * 3
>3031	MultiplicativeExpression	sizeof ( double ) * 3
>3032	PrimaryExpression	3
>3033	SizeofExpr	sizeof ( double )
>3034	SizeofOperand	double
>3035	Sizeof	sizeof
>3036	Argument	cameras_new [ 1 ] . t
>3037	MemberAccess	cameras_new [ 1 ] . t
>3038	Identifier	t
>3039	ArrayIndexing	cameras_new [ 1 ]
>3040	PrimaryExpression	1
>3041	Identifier	cameras_new
>3042	Argument	cameras_new [ 0 ] . t
>3043	MemberAccess	cameras_new [ 0 ] . t
>3044	Identifier	t
>3045	ArrayIndexing	cameras_new [ 0 ]
>3046	PrimaryExpression	0
>3047	Identifier	cameras_new
>3048	Callee	memcpy
>3049	Identifier	memcpy
>3050	ExpressionStatement	 
>3051	CallExpression	memcpy ( cameras_new [ 0 ] . R , cameras_new [ 1 ] . R , sizeof ( double ) * 9 )
>3052	ArgumentList	cameras_new [ 0 ] . R
>3053	Argument	sizeof ( double ) * 9
>3054	MultiplicativeExpression	sizeof ( double ) * 9
>3055	PrimaryExpression	9
>3056	SizeofExpr	sizeof ( double )
>3057	SizeofOperand	double
>3058	Sizeof	sizeof
>3059	Argument	cameras_new [ 1 ] . R
>3060	MemberAccess	cameras_new [ 1 ] . R
>3061	Identifier	R
>3062	ArrayIndexing	cameras_new [ 1 ]
>3063	PrimaryExpression	1
>3064	Identifier	cameras_new
>3065	Argument	cameras_new [ 0 ] . R
>3066	MemberAccess	cameras_new [ 0 ] . R
>3067	Identifier	R
>3068	ArrayIndexing	cameras_new [ 0 ]
>3069	PrimaryExpression	0
>3070	Identifier	cameras_new
>3071	Callee	memcpy
>3072	Identifier	memcpy
>3073	IdentifierDeclStatement	 
>3074	IdentifierDecl	tmp = cameras_new [ 0 ]
>3075	AssignmentExpr	tmp = cameras_new [ 0 ]
>3076	ArrayIndexing	cameras_new [ 0 ]
>3077	PrimaryExpression	0
>3078	Identifier	cameras_new
>3079	Identifier	tmp
>3080	Identifier	tmp
>3081	IdentifierDeclType	camera_params_t
>3082	ExpressionStatement	 
>3083	CallExpression	memcpy ( cameras_new , cameras , sizeof ( camera_params_t ) * 2 )
>3084	ArgumentList	cameras_new
>3085	Argument	sizeof ( camera_params_t ) * 2
>3086	MultiplicativeExpression	sizeof ( camera_params_t ) * 2
>3087	PrimaryExpression	2
>3088	SizeofExpr	sizeof ( camera_params_t )
>3089	SizeofOperand	camera_params_t
>3090	Sizeof	sizeof
>3091	Argument	cameras
>3092	Identifier	cameras
>3093	Argument	cameras_new
>3094	Identifier	cameras_new
>3095	Callee	memcpy
>3096	Identifier	memcpy
>3097	ExpressionStatement	 
>3098	CallExpression	memcpy ( points_new , points , sizeof ( v3_t ) * num_points )
>3099	ArgumentList	points_new
>3100	Argument	sizeof ( v3_t ) * num_points
>3101	MultiplicativeExpression	sizeof ( v3_t ) * num_points
>3102	Identifier	num_points
>3103	SizeofExpr	sizeof ( v3_t )
>3104	SizeofOperand	v3_t
>3105	Sizeof	sizeof
>3106	Argument	points
>3107	Identifier	points
>3108	Argument	points_new
>3109	Identifier	points_new
>3110	Callee	memcpy
>3111	Identifier	memcpy
>3175	FunctionDef	BundlerApp 
>3176	ParameterList	int i1 , int i2 , TwoFrameModel * model , double & angle_out , int & num_pts_out , bool bundle_from_tracks
>3177	Parameter	 
>3178	Identifier	bundle_from_tracks
>3179	ParameterType	bool
>3180	Parameter	 
>3181	Identifier	num_pts_out
>3182	ParameterType	int &
>3183	Parameter	 
>3184	Identifier	angle_out
>3185	ParameterType	double &
>3186	Parameter	 
>3187	Identifier	model
>3188	ParameterType	TwoFrameModel *
>3189	Parameter	 
>3190	Identifier	i2
>3191	ParameterType	int
>3192	Parameter	 
>3193	Identifier	i1
>3194	ParameterType	int
>3195	ReturnType	bool
>3196	CompoundStatement	 
>3197	ReturnStatement	 
>3198	Identifier	true
>3199	IfStatement	if ( sym_error )
>3200	ReturnStatement	 
>3201	Identifier	false
>3202	Condition	 
>3203	Identifier	sym_error
>3204	ExpressionStatement	 
>3205	CallExpression	ClearKeys ( m_image_data [ i2 ] )
>3206	ArgumentList	m_image_data [ i2 ]
>3207	Argument	m_image_data [ i2 ]
>3208	ArrayIndexing	m_image_data [ i2 ]
>3209	Identifier	i2
>3210	Identifier	m_image_data
>3211	Callee	ClearKeys
>3212	Identifier	ClearKeys
>3213	ExpressionStatement	 
>3214	CallExpression	ClearKeys ( m_image_data [ i1 ] )
>3215	ArgumentList	m_image_data [ i1 ]
>3216	Argument	m_image_data [ i1 ]
>3217	ArrayIndexing	m_image_data [ i1 ]
>3218	Identifier	i1
>3219	Identifier	m_image_data
>3220	Callee	ClearKeys
>3221	Identifier	ClearKeys
>3222	ExpressionStatement	 
>3223	Identifier	VinvA
>3224	Statement	 
>3225	Statement	 
>3226	Statement	 
>3227	ExpressionStatement	 
>3228	Identifier	VfA
>3229	Statement	 
>3230	Statement	 
>3231	Statement	 
>3232	ExpressionStatement	 
>3233	Identifier	Stest
>3234	Statement	 
>3235	Statement	 
>3236	Statement	 
>3237	ExpressionStatement	 
>3238	Identifier	WViWT
>3239	Statement	 
>3240	Statement	 
>3241	Statement	 
>3242	ExpressionStatement	 
>3243	Identifier	VTfull
>3244	Statement	 
>3245	Statement	 
>3246	Statement	 
>3247	ExpressionStatement	 
>3248	Identifier	Sfull
>3249	Statement	 
>3250	Statement	 
>3251	Statement	 
>3252	ExpressionStatement	 
>3253	Identifier	Ufull
>3254	Statement	 
>3255	Statement	 
>3256	Statement	 
>3257	ExpressionStatement	 
>3258	Identifier	Sinv
>3259	Statement	 
>3260	Statement	 
>3261	Statement	 
>3262	ExpressionStatement	 
>3263	Identifier	Y
>3264	Statement	 
>3265	Statement	 
>3266	Statement	 
>3267	ExpressionStatement	 
>3268	Identifier	W
>3269	Statement	 
>3270	Statement	 
>3271	Statement	 
>3272	ExpressionStatement	 
>3273	Identifier	V
>3274	Statement	 
>3275	Statement	 
>3276	Statement	 
>3277	ExpressionStatement	 
>3278	Identifier	Uf
>3279	Statement	 
>3280	Statement	 
>3281	Statement	 
>3282	ExpressionStatement	 
>3283	Identifier	U
>3284	Statement	 
>3285	Statement	 
>3286	Statement	 
>3287	ExpressionStatement	 
>3288	Identifier	S
>3289	Statement	 
>3290	Statement	 
>3291	Statement	 
>3292	ExpressionStatement	 
>3293	Identifier	points
>3294	Statement	 
>3295	Statement	 
>3296	Statement	 
>3297	ExpressionStatement	 
>3298	Identifier	projs2
>3299	Statement	 
>3300	Statement	 
>3301	Statement	 
>3302	ExpressionStatement	 
>3303	Identifier	projs1
>3304	Statement	 
>3305	Statement	 
>3306	Statement	 
>3307	ExpressionStatement	 
>3308	Identifier	Hinv
>3309	Statement	 
>3310	Statement	 
>3311	Statement	 
>3312	ExpressionStatement	 
>3313	Identifier	H
>3314	Statement	 
>3315	Statement	 
>3316	Statement	 
>3317	ExpressionStatement	 
>3318	CallExpression	DumpPointsToPly ( m_output_directory , buf , pt_count , 2 , model -> m_points , colors , cameras_tmp , false )
>3319	ArgumentList	m_output_directory
>3320	Argument	false
>3321	Identifier	false
>3322	Argument	cameras_tmp
>3323	Identifier	cameras_tmp
>3324	Argument	colors
>3325	Identifier	colors
>3326	Argument	model -> m_points
>3327	PtrMemberAccess	model -> m_points
>3328	Identifier	m_points
>3329	Identifier	model
>3330	Argument	2
>3331	PrimaryExpression	2
>3332	Argument	pt_count
>3333	Identifier	pt_count
>3334	Argument	buf
>3335	Identifier	buf
>3336	Argument	m_output_directory
>3337	Identifier	m_output_directory
>3338	Callee	DumpPointsToPly
>3339	Identifier	DumpPointsToPly
>3340	ExpressionStatement	 
>3341	CallExpression	sprintf ( buf , \"model-%03d-%03d.ply\" , i1 , i2 )
>3342	ArgumentList	buf
>3343	Argument	i2
>3344	Identifier	i2
>3345	Argument	i1
>3346	Identifier	i1
>3347	Argument	\"model-%03d-%03d.ply\"
>3348	PrimaryExpression	\"model-%03d-%03d.ply\"
>3349	Argument	buf
>3350	Identifier	buf
>3351	Callee	sprintf
>3352	Identifier	sprintf
>3353	IdentifierDeclStatement	 
>3354	IdentifierDecl	cameras_tmp [ 2 ] = { model -> m_camera0 , model -> m_camera1 }
>3355	AssignmentExpr	cameras_tmp [ 2 ] = { model -> m_camera0 , model -> m_camera1 }
>3356	InitializerList	model -> m_camera0
>3357	PtrMemberAccess	model -> m_camera1
>3358	Identifier	m_camera1
>3359	Identifier	model
>3360	PtrMemberAccess	model -> m_camera0
>3361	Identifier	m_camera0
>3362	Identifier	model
>3363	Identifier	cameras_tmp
>3364	PrimaryExpression	2
>3365	Identifier	cameras_tmp
>3366	IdentifierDeclType	camera_params_t [ 2 ]
>3367	IdentifierDeclStatement	 
>3368	IdentifierDecl	buf [ 256 ]
>3369	PrimaryExpression	256
>3370	Identifier	buf
>3371	IdentifierDeclType	char [ 256 ]
>3372	IfStatement	if ( model != NULL )
>3373	CompoundStatement	 
>3374	ExpressionStatement	 
>3375	AssignmentExpr	model -> m_angle = RAD2DEG ( angle_sum / count )
>3376	CallExpression	RAD2DEG ( angle_sum / count )
>3377	ArgumentList	angle_sum / count
>3378	Argument	angle_sum / count
>3379	MultiplicativeExpression	angle_sum / count
>3380	Identifier	count
>3381	Identifier	angle_sum
>3382	Callee	RAD2DEG
>3383	Identifier	RAD2DEG
>3384	PtrMemberAccess	model -> m_angle
>3385	Identifier	m_angle
>3386	Identifier	model
>3387	ExpressionStatement	 
>3388	AssignmentExpr	model -> m_num_points = pt_count
>3389	Identifier	pt_count
>3390	PtrMemberAccess	model -> m_num_points
>3391	Identifier	m_num_points
>3392	Identifier	model
>3393	IfStatement	if ( bundle_from_tracks )
>3394	ElseStatement	else
>3395	CompoundStatement	 
>3396	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>3397	CompoundStatement	 
>3398	ExpressionStatement	 
>3399	AssignmentExpr	model -> m_keys2 [ i ] = k2
>3400	Identifier	k2
>3401	ArrayIndexing	model -> m_keys2 [ i ]
>3402	Identifier	i
>3403	PtrMemberAccess	model -> m_keys2
>3404	Identifier	m_keys2
>3405	Identifier	model
>3406	ExpressionStatement	 
>3407	AssignmentExpr	model -> m_keys1 [ i ] = k1
>3408	Identifier	k1
>3409	ArrayIndexing	model -> m_keys1 [ i ]
>3410	Identifier	i
>3411	PtrMemberAccess	model -> m_keys1
>3412	Identifier	m_keys1
>3413	Identifier	model
>3414	IdentifierDeclStatement	 
>3415	IdentifierDecl	k2 = pt_views [ i ] [ 1 ] . second
>3416	AssignmentExpr	k2 = pt_views [ i ] [ 1 ] . second
>3417	MemberAccess	pt_views [ i ] [ 1 ] . second
>3418	Identifier	second
>3419	ArrayIndexing	pt_views [ i ] [ 1 ]
>3420	PrimaryExpression	1
>3421	ArrayIndexing	pt_views [ i ]
>3422	Identifier	i
>3423	Identifier	pt_views
>3424	Identifier	k2
>3425	Identifier	k2
>3426	IdentifierDeclType	int
>3427	IdentifierDeclStatement	 
>3428	IdentifierDecl	k1 = pt_views [ i ] [ 0 ] . second
>3429	AssignmentExpr	k1 = pt_views [ i ] [ 0 ] . second
>3430	MemberAccess	pt_views [ i ] [ 0 ] . second
>3431	Identifier	second
>3432	ArrayIndexing	pt_views [ i ] [ 0 ]
>3433	PrimaryExpression	0
>3434	ArrayIndexing	pt_views [ i ]
>3435	Identifier	i
>3436	Identifier	pt_views
>3437	Identifier	k1
>3438	Identifier	k1
>3439	IdentifierDeclType	int
>3440	IncDecOp	 
>3441	IncDec	++
>3442	Identifier	i
>3443	Condition	 
>3444	RelationalExpression	i < pt_count
>3445	Identifier	pt_count
>3446	Identifier	i
>3447	ForInit	 
>3448	IdentifierDeclStatement	int i = 0 ;
>3449	IdentifierDecl	i = 0
>3450	AssignmentExpr	i = 0
>3451	PrimaryExpression	0
>3452	Identifier	i
>3453	Identifier	i
>3454	IdentifierDeclType	int
>3455	ExpressionStatement	 
>3456	AssignmentExpr	model -> m_keys2 = new int [ pt_count ]
>3457	Identifier	pt_count
>3458	PtrMemberAccess	model -> m_keys2
>3459	Identifier	m_keys2
>3460	Identifier	model
>3461	ExpressionStatement	 
>3462	AssignmentExpr	model -> m_keys1 = new int [ pt_count ]
>3463	Identifier	pt_count
>3464	PtrMemberAccess	model -> m_keys1
>3465	Identifier	m_keys1
>3466	Identifier	model
>3467	ExpressionStatement	 
>3468	AssignmentExpr	model -> m_tracks = NULL
>3469	Identifier	NULL
>3470	PtrMemberAccess	model -> m_tracks
>3471	Identifier	m_tracks
>3472	Identifier	model
>3473	CompoundStatement	 
>3474	ExpressionStatement	 
>3475	Identifier	points_tmp
>3476	Statement	 
>3477	Statement	 
>3478	Statement	 
>3479	ExpressionStatement	 
>3480	Identifier	perm
>3481	Statement	 
>3482	Statement	 
>3483	Statement	 
>3484	ExpressionStatement	 
>3485	Identifier	tracks_tmp
>3486	Statement	 
>3487	Statement	 
>3488	Statement	 
>3489	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>3490	CompoundStatement	 
>3491	ExpressionStatement	 
>3492	AssignmentExpr	model -> m_points [ i ] = points_tmp [ perm [ i ] ]
>3493	ArrayIndexing	points_tmp [ perm [ i ] ]
>3494	ArrayIndexing	perm [ i ]
>3495	Identifier	i
>3496	Identifier	perm
>3497	Identifier	points_tmp
>3498	ArrayIndexing	model -> m_points [ i ]
>3499	Identifier	i
>3500	PtrMemberAccess	model -> m_points
>3501	Identifier	m_points
>3502	Identifier	model
>3503	ExpressionStatement	 
>3504	AssignmentExpr	model -> m_tracks [ i ] = iround ( tracks_tmp [ i ] )
>3505	CallExpression	iround ( tracks_tmp [ i ] )
>3506	ArgumentList	tracks_tmp [ i ]
>3507	Argument	tracks_tmp [ i ]
>3508	ArrayIndexing	tracks_tmp [ i ]
>3509	Identifier	i
>3510	Identifier	tracks_tmp
>3511	Callee	iround
>3512	Identifier	iround
>3513	ArrayIndexing	model -> m_tracks [ i ]
>3514	Identifier	i
>3515	PtrMemberAccess	model -> m_tracks
>3516	Identifier	m_tracks
>3517	Identifier	model
>3518	IncDecOp	 
>3519	IncDec	++
>3520	Identifier	i
>3521	Condition	 
>3522	RelationalExpression	i < pt_count
>3523	Identifier	pt_count
>3524	Identifier	i
>3525	ForInit	 
>3526	IdentifierDeclStatement	int i = 0 ;
>3527	IdentifierDecl	i = 0
>3528	AssignmentExpr	i = 0
>3529	PrimaryExpression	0
>3530	Identifier	i
>3531	Identifier	i
>3532	IdentifierDeclType	int
>3533	ExpressionStatement	 
>3534	AssignmentExpr	model -> m_keys1 = model -> m_keys2 = NULL
>3535	AssignmentExpr	model -> m_keys2 = NULL
>3536	Identifier	NULL
>3537	PtrMemberAccess	model -> m_keys2
>3538	Identifier	m_keys2
>3539	Identifier	model
>3540	PtrMemberAccess	model -> m_keys1
>3541	Identifier	m_keys1
>3542	Identifier	model
>3543	ExpressionStatement	 
>3544	AssignmentExpr	model -> m_tracks = new int [ pt_count ]
>3545	Identifier	pt_count
>3546	PtrMemberAccess	model -> m_tracks
>3547	Identifier	m_tracks
>3548	Identifier	model
>3549	ExpressionStatement	 
>3550	CallExpression	qsort_perm ( pt_count , tracks_tmp , perm )
>3551	ArgumentList	pt_count
>3552	Argument	perm
>3553	Identifier	perm
>3554	Argument	tracks_tmp
>3555	Identifier	tracks_tmp
>3556	Argument	pt_count
>3557	Identifier	pt_count
>3558	Callee	qsort_perm
>3559	Identifier	qsort_perm
>3560	ExpressionStatement	 
>3561	CallExpression	qsort_ascending ( )
>3562	ArgumentList	 
>3563	Callee	qsort_ascending
>3564	Identifier	qsort_ascending
>3565	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>3566	CompoundStatement	 
>3567	ExpressionStatement	 
>3568	AssignmentExpr	points_tmp [ i ] = model -> m_points [ i ]
>3569	ArrayIndexing	model -> m_points [ i ]
>3570	Identifier	i
>3571	PtrMemberAccess	model -> m_points
>3572	Identifier	m_points
>3573	Identifier	model
>3574	ArrayIndexing	points_tmp [ i ]
>3575	Identifier	i
>3576	Identifier	points_tmp
>3577	ExpressionStatement	 
>3578	AssignmentExpr	tracks_tmp [ i ] = ( double ) tracks [ i ]
>3579	CastExpression	( double ) tracks [ i ]
>3580	ArrayIndexing	tracks [ i ]
>3581	Identifier	i
>3582	Identifier	tracks
>3583	CastTarget	double
>3584	ArrayIndexing	tracks_tmp [ i ]
>3585	Identifier	i
>3586	Identifier	tracks_tmp
>3587	IncDecOp	 
>3588	IncDec	++
>3589	Identifier	i
>3590	Condition	 
>3591	RelationalExpression	i < pt_count
>3592	Identifier	pt_count
>3593	Identifier	i
>3594	ForInit	 
>3595	IdentifierDeclStatement	int i = 0 ;
>3596	IdentifierDecl	i = 0
>3597	AssignmentExpr	i = 0
>3598	PrimaryExpression	0
>3599	Identifier	i
>3600	Identifier	i
>3601	IdentifierDeclType	int
>3602	IdentifierDeclStatement	 
>3603	IdentifierDecl	* points_tmp = new v3_t [ pt_count ]
>3604	AssignmentExpr	* points_tmp = new v3_t [ pt_count ]
>3605	Identifier	pt_count
>3606	Identifier	pt_count
>3607	Identifier	points_tmp
>3608	IdentifierDeclType	v3_t *
>3609	IdentifierDeclStatement	 
>3610	IdentifierDecl	* perm = new int [ pt_count ]
>3611	AssignmentExpr	* perm = new int [ pt_count ]
>3612	Identifier	pt_count
>3613	Identifier	pt_count
>3614	Identifier	perm
>3615	IdentifierDeclType	int *
>3616	IdentifierDeclStatement	 
>3617	IdentifierDecl	* tracks_tmp = new double [ pt_count ]
>3618	AssignmentExpr	* tracks_tmp = new double [ pt_count ]
>3619	Identifier	pt_count
>3620	Identifier	pt_count
>3621	Identifier	tracks_tmp
>3622	IdentifierDeclType	double *
>3623	Condition	 
>3624	Identifier	bundle_from_tracks
>3625	ExpressionStatement	 
>3626	CallExpression	memcpy ( model -> m_C0 , C1 , sizeof ( double ) * 9 )
>3627	ArgumentList	model -> m_C0
>3628	Argument	sizeof ( double ) * 9
>3629	MultiplicativeExpression	sizeof ( double ) * 9
>3630	PrimaryExpression	9
>3631	SizeofExpr	sizeof ( double )
>3632	SizeofOperand	double
>3633	Sizeof	sizeof
>3634	Argument	C1
>3635	Identifier	C1
>3636	Argument	model -> m_C0
>3637	PtrMemberAccess	model -> m_C0
>3638	Identifier	m_C0
>3639	Identifier	model
>3640	Callee	memcpy
>3641	Identifier	memcpy
>3642	Condition	 
>3643	EqualityExpression	model != NULL
>3644	Identifier	NULL
>3645	Identifier	model
>3646	ExpressionStatement	 
>3647	CallExpression	fflush ( stdout )
>3648	ArgumentList	stdout
>3649	Argument	stdout
>3650	Identifier	stdout
>3651	Callee	fflush
>3652	Identifier	fflush
>3653	ExpressionStatement	 
>3654	CallExpression	printf ( \"Singular values (C1)
>3655	ArgumentList	\"Singular values (C1)
>3656	Argument	S1 [ 2 ]
>3657	ArrayIndexing	S1 [ 2 ]
>3658	PrimaryExpression	2
>3659	Identifier	S1
>3660	Argument	S1 [ 1 ]
>3661	ArrayIndexing	S1 [ 1 ]
>3662	PrimaryExpression	1
>3663	Identifier	S1
>3664	Argument	S1 [ 0 ]
>3665	ArrayIndexing	S1 [ 0 ]
>3666	PrimaryExpression	0
>3667	Identifier	S1
>3668	Argument	\"Singular values (C1)
>3669	PrimaryExpression	\"Singular values (C1)
>3670	Callee	printf
>3671	Identifier	printf
>3672	ExpressionStatement	 
>3673	CallExpression	dgesvd_driver ( 3 , 3 , C1 , U1 , S1 , VT1 )
>3674	ArgumentList	3
>3675	Argument	VT1
>3676	Identifier	VT1
>3677	Argument	S1
>3678	Identifier	S1
>3679	Argument	U1
>3680	Identifier	U1
>3681	Argument	C1
>3682	Identifier	C1
>3683	Argument	3
>3684	PrimaryExpression	3
>3685	Argument	3
>3686	PrimaryExpression	3
>3687	Callee	dgesvd_driver
>3688	Identifier	dgesvd_driver
>3689	IdentifierDeclStatement	 
>3690	IdentifierDecl	VT1 [ 9 ]
>3691	PrimaryExpression	9
>3692	Identifier	VT1
>3693	IdentifierDeclType	double [ 9 ]
>3694	IdentifierDecl	S1 [ 3 ]
>3695	PrimaryExpression	3
>3696	Identifier	S1
>3697	IdentifierDeclType	double [ 3 ]
>3698	IdentifierDecl	U1 [ 9 ]
>3699	PrimaryExpression	9
>3700	Identifier	U1
>3701	IdentifierDeclType	double [ 9 ]
>3702	ExpressionStatement	 
>3703	CallExpression	fflush ( stdout )
>3704	ArgumentList	stdout
>3705	Argument	stdout
>3706	Identifier	stdout
>3707	Callee	fflush
>3708	Identifier	fflush
>3709	ExpressionStatement	 
>3710	CallExpression	matrix_print ( 3 , 3 , C1 )
>3711	ArgumentList	3
>3712	Argument	C1
>3713	Identifier	C1
>3714	Argument	3
>3715	PrimaryExpression	3
>3716	Argument	3
>3717	PrimaryExpression	3
>3718	Callee	matrix_print
>3719	Identifier	matrix_print
>3720	ExpressionStatement	 
>3721	CallExpression	printf ( \"C1
>3722	ArgumentList	\"C1
>3723	Argument	\"C1
>3724	PrimaryExpression	\"C1
>3725	Callee	printf
>3726	Identifier	printf
>3727	ExpressionStatement	 
>3728	CallExpression	memcpy ( C1 + 6 , Hinv + 3 * num_vars + 1 , 3 * sizeof ( double ) )
>3729	ArgumentList	C1 + 6
>3730	Argument	3 * sizeof ( double )
>3731	MultiplicativeExpression	3 * sizeof ( double )
>3732	SizeofExpr	sizeof ( double )
>3733	SizeofOperand	double
>3734	Sizeof	sizeof
>3735	PrimaryExpression	3
>3736	Argument	Hinv + 3 * num_vars + 1
>3737	AdditiveExpression	Hinv + 3 * num_vars + 1
>3738	AdditiveExpression	3 * num_vars + 1
>3739	PrimaryExpression	1
>3740	MultiplicativeExpression	3 * num_vars
>3741	Identifier	num_vars
>3742	PrimaryExpression	3
>3743	Identifier	Hinv
>3744	Argument	C1 + 6
>3745	AdditiveExpression	C1 + 6
>3746	PrimaryExpression	6
>3747	Identifier	C1
>3748	Callee	memcpy
>3749	Identifier	memcpy
>3750	ExpressionStatement	 
>3751	CallExpression	memcpy ( C1 + 3 , Hinv + 2 * num_vars + 1 , 3 * sizeof ( double ) )
>3752	ArgumentList	C1 + 3
>3753	Argument	3 * sizeof ( double )
>3754	MultiplicativeExpression	3 * sizeof ( double )
>3755	SizeofExpr	sizeof ( double )
>3756	SizeofOperand	double
>3757	Sizeof	sizeof
>3758	PrimaryExpression	3
>3759	Argument	Hinv + 2 * num_vars + 1
>3760	AdditiveExpression	Hinv + 2 * num_vars + 1
>3761	AdditiveExpression	2 * num_vars + 1
>3762	PrimaryExpression	1
>3763	MultiplicativeExpression	2 * num_vars
>3764	Identifier	num_vars
>3765	PrimaryExpression	2
>3766	Identifier	Hinv
>3767	Argument	C1 + 3
>3768	AdditiveExpression	C1 + 3
>3769	PrimaryExpression	3
>3770	Identifier	C1
>3771	Callee	memcpy
>3772	Identifier	memcpy
>3773	ExpressionStatement	 
>3774	CallExpression	memcpy ( C1 + 0 , Hinv + 1 * num_vars + 1 , 3 * sizeof ( double ) )
>3775	ArgumentList	C1 + 0
>3776	Argument	3 * sizeof ( double )
>3777	MultiplicativeExpression	3 * sizeof ( double )
>3778	SizeofExpr	sizeof ( double )
>3779	SizeofOperand	double
>3780	Sizeof	sizeof
>3781	PrimaryExpression	3
>3782	Argument	Hinv + 1 * num_vars + 1
>3783	AdditiveExpression	Hinv + 1 * num_vars + 1
>3784	AdditiveExpression	1 * num_vars + 1
>3785	PrimaryExpression	1
>3786	MultiplicativeExpression	1 * num_vars
>3787	Identifier	num_vars
>3788	PrimaryExpression	1
>3789	Identifier	Hinv
>3790	Argument	C1 + 0
>3791	AdditiveExpression	C1 + 0
>3792	PrimaryExpression	0
>3793	Identifier	C1
>3794	Callee	memcpy
>3795	Identifier	memcpy
>3796	ExpressionStatement	 
>3797	CallExpression	matrix_invert ( num_vars , H , Hinv )
>3798	ArgumentList	num_vars
>3799	Argument	Hinv
>3800	Identifier	Hinv
>3801	Argument	H
>3802	Identifier	H
>3803	Argument	num_vars
>3804	Identifier	num_vars
>3805	Callee	matrix_invert
>3806	Identifier	matrix_invert
>3807	IdentifierDeclStatement	 
>3808	IdentifierDecl	* Hinv = new double [ num_vars * num_vars ]
>3809	AssignmentExpr	* Hinv = new double [ num_vars * num_vars ]
>3810	MultiplicativeExpression	num_vars * num_vars
>3811	Identifier	num_vars
>3812	Identifier	num_vars
>3813	Identifier	Hinv
>3814	Identifier	Hinv
>3815	IdentifierDeclType	double *
>3816	ExpressionStatement	 
>3817	CallExpression	camera_refine_fix_free ( pt_count , points , projs2 , projs1 , cameras + 1 , cameras + 0 , H )
>3818	ArgumentList	pt_count
>3819	Argument	H
>3820	Identifier	H
>3821	Argument	cameras + 0
>3822	AdditiveExpression	cameras + 0
>3823	PrimaryExpression	0
>3824	Identifier	cameras
>3825	Argument	cameras + 1
>3826	AdditiveExpression	cameras + 1
>3827	PrimaryExpression	1
>3828	Identifier	cameras
>3829	Argument	projs1
>3830	Identifier	projs1
>3831	Argument	projs2
>3832	Identifier	projs2
>3833	Argument	points
>3834	Identifier	points
>3835	Argument	pt_count
>3836	Identifier	pt_count
>3837	Callee	camera_refine_fix_free
>3838	Identifier	camera_refine_fix_free
>3839	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>3840	CompoundStatement	 
>3841	ExpressionStatement	 
>3842	AssignmentExpr	Vy ( projs2 [ i ] ) = m_image_data [ i2 ] . m_keys [ pt_views [ i ] [ 1 ] . second ] . m_y
>3843	MemberAccess	m_image_data [ i2 ] . m_keys [ pt_views [ i ] [ 1 ] . second ] . m_y
>3844	Identifier	m_y
>3845	ArrayIndexing	m_image_data [ i2 ] . m_keys [ pt_views [ i ] [ 1 ] . second ]
>3846	MemberAccess	pt_views [ i ] [ 1 ] . second
>3847	Identifier	second
>3848	ArrayIndexing	pt_views [ i ] [ 1 ]
>3849	PrimaryExpression	1
>3850	ArrayIndexing	pt_views [ i ]
>3851	Identifier	i
>3852	Identifier	pt_views
>3853	MemberAccess	m_image_data [ i2 ] . m_keys
>3854	Identifier	m_keys
>3855	ArrayIndexing	m_image_data [ i2 ]
>3856	Identifier	i2
>3857	Identifier	m_image_data
>3858	CallExpression	Vy ( projs2 [ i ] )
>3859	ArgumentList	projs2 [ i ]
>3860	Argument	projs2 [ i ]
>3861	ArrayIndexing	projs2 [ i ]
>3862	Identifier	i
>3863	Identifier	projs2
>3864	Callee	Vy
>3865	Identifier	Vy
>3866	ExpressionStatement	 
>3867	AssignmentExpr	Vx ( projs2 [ i ] ) = m_image_data [ i2 ] . m_keys [ pt_views [ i ] [ 1 ] . second ] . m_x
>3868	MemberAccess	m_image_data [ i2 ] . m_keys [ pt_views [ i ] [ 1 ] . second ] . m_x
>3869	Identifier	m_x
>3870	ArrayIndexing	m_image_data [ i2 ] . m_keys [ pt_views [ i ] [ 1 ] . second ]
>3871	MemberAccess	pt_views [ i ] [ 1 ] . second
>3872	Identifier	second
>3873	ArrayIndexing	pt_views [ i ] [ 1 ]
>3874	PrimaryExpression	1
>3875	ArrayIndexing	pt_views [ i ]
>3876	Identifier	i
>3877	Identifier	pt_views
>3878	MemberAccess	m_image_data [ i2 ] . m_keys
>3879	Identifier	m_keys
>3880	ArrayIndexing	m_image_data [ i2 ]
>3881	Identifier	i2
>3882	Identifier	m_image_data
>3883	CallExpression	Vx ( projs2 [ i ] )
>3884	ArgumentList	projs2 [ i ]
>3885	Argument	projs2 [ i ]
>3886	ArrayIndexing	projs2 [ i ]
>3887	Identifier	i
>3888	Identifier	projs2
>3889	Callee	Vx
>3890	Identifier	Vx
>3891	ExpressionStatement	 
>3892	AssignmentExpr	Vy ( projs1 [ i ] ) = m_image_data [ i1 ] . m_keys [ pt_views [ i ] [ 0 ] . second ] . m_y
>3893	MemberAccess	m_image_data [ i1 ] . m_keys [ pt_views [ i ] [ 0 ] . second ] . m_y
>3894	Identifier	m_y
>3895	ArrayIndexing	m_image_data [ i1 ] . m_keys [ pt_views [ i ] [ 0 ] . second ]
>3896	MemberAccess	pt_views [ i ] [ 0 ] . second
>3897	Identifier	second
>3898	ArrayIndexing	pt_views [ i ] [ 0 ]
>3899	PrimaryExpression	0
>3900	ArrayIndexing	pt_views [ i ]
>3901	Identifier	i
>3902	Identifier	pt_views
>3903	MemberAccess	m_image_data [ i1 ] . m_keys
>3904	Identifier	m_keys
>3905	ArrayIndexing	m_image_data [ i1 ]
>3906	Identifier	i1
>3907	Identifier	m_image_data
>3908	CallExpression	Vy ( projs1 [ i ] )
>3909	ArgumentList	projs1 [ i ]
>3910	Argument	projs1 [ i ]
>3911	ArrayIndexing	projs1 [ i ]
>3912	Identifier	i
>3913	Identifier	projs1
>3914	Callee	Vy
>3915	Identifier	Vy
>3916	ExpressionStatement	 
>3917	AssignmentExpr	Vx ( projs1 [ i ] ) = m_image_data [ i1 ] . m_keys [ pt_views [ i ] [ 0 ] . second ] . m_x
>3918	MemberAccess	m_image_data [ i1 ] . m_keys [ pt_views [ i ] [ 0 ] . second ] . m_x
>3919	Identifier	m_x
>3920	ArrayIndexing	m_image_data [ i1 ] . m_keys [ pt_views [ i ] [ 0 ] . second ]
>3921	MemberAccess	pt_views [ i ] [ 0 ] . second
>3922	Identifier	second
>3923	ArrayIndexing	pt_views [ i ] [ 0 ]
>3924	PrimaryExpression	0
>3925	ArrayIndexing	pt_views [ i ]
>3926	Identifier	i
>3927	Identifier	pt_views
>3928	MemberAccess	m_image_data [ i1 ] . m_keys
>3929	Identifier	m_keys
>3930	ArrayIndexing	m_image_data [ i1 ]
>3931	Identifier	i1
>3932	Identifier	m_image_data
>3933	CallExpression	Vx ( projs1 [ i ] )
>3934	ArgumentList	projs1 [ i ]
>3935	Argument	projs1 [ i ]
>3936	ArrayIndexing	projs1 [ i ]
>3937	Identifier	i
>3938	Identifier	projs1
>3939	Callee	Vx
>3940	Identifier	Vx
>3941	IncDecOp	 
>3942	IncDec	++
>3943	Identifier	i
>3944	Condition	 
>3945	RelationalExpression	i < pt_count
>3946	Identifier	pt_count
>3947	Identifier	i
>3948	ForInit	 
>3949	IdentifierDeclStatement	int i = 0 ;
>3950	IdentifierDecl	i = 0
>3951	AssignmentExpr	i = 0
>3952	PrimaryExpression	0
>3953	Identifier	i
>3954	Identifier	i
>3955	IdentifierDeclType	int
>3956	IdentifierDeclStatement	 
>3957	IdentifierDecl	* H = new double [ num_vars * num_vars ]
>3958	AssignmentExpr	* H = new double [ num_vars * num_vars ]
>3959	MultiplicativeExpression	num_vars * num_vars
>3960	Identifier	num_vars
>3961	Identifier	num_vars
>3962	Identifier	H
>3963	Identifier	H
>3964	IdentifierDeclType	double *
>3965	IdentifierDeclStatement	 
>3966	IdentifierDecl	num_vars = 8 + 3 * pt_count
>3967	AssignmentExpr	num_vars = 8 + 3 * pt_count
>3968	AdditiveExpression	8 + 3 * pt_count
>3969	MultiplicativeExpression	3 * pt_count
>3970	Identifier	pt_count
>3971	PrimaryExpression	3
>3972	PrimaryExpression	8
>3973	Identifier	num_vars
>3974	Identifier	num_vars
>3975	IdentifierDeclType	int
>3976	IdentifierDeclStatement	 
>3977	IdentifierDecl	* projs2 = new v2_t [ pt_count ]
>3978	AssignmentExpr	* projs2 = new v2_t [ pt_count ]
>3979	Identifier	pt_count
>3980	Identifier	pt_count
>3981	Identifier	projs2
>3982	IdentifierDeclType	v2_t *
>3983	IdentifierDeclStatement	 
>3984	IdentifierDecl	* projs1 = new v2_t [ pt_count ]
>3985	AssignmentExpr	* projs1 = new v2_t [ pt_count ]
>3986	Identifier	pt_count
>3987	Identifier	pt_count
>3988	Identifier	projs1
>3989	IdentifierDeclType	v2_t *
>3990	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )
>3991	CompoundStatement	 
>3992	ForStatement	for ( int j = i + 1 ; j < 3 ; j ++ )
>3993	CompoundStatement	 
>3994	IfStatement	if ( fabs ( ij - ji ) > 1.0e-2 )
>3995	CompoundStatement	 
>3996	ExpressionStatement	 
>3997	AssignmentExpr	sym_error = true
>3998	Identifier	true
>3999	Identifier	sym_error
>4000	ExpressionStatement	 
>4001	CallExpression	printf ( \"C1
>4002	ArgumentList	\"C1
>4003	Argument	j
>4004	Identifier	j
>4005	Argument	i
>4006	Identifier	i
>4007	Argument	\"C1
>4008	PrimaryExpression	\"C1
>4009	Callee	printf
>4010	Identifier	printf
>4011	Condition	 
>4012	RelationalExpression	fabs ( ij - ji ) > 1.0e-2
>4013	PrimaryExpression	1.0e-2
>4014	CallExpression	fabs ( ij - ji )
>4015	ArgumentList	ij - ji
>4016	Argument	ij - ji
>4017	AdditiveExpression	ij - ji
>4018	Identifier	ji
>4019	Identifier	ij
>4020	Callee	fabs
>4021	Identifier	fabs
>4022	IdentifierDeclStatement	 
>4023	IdentifierDecl	ji = C1 [ j * 3 + i ]
>4024	AssignmentExpr	ji = C1 [ j * 3 + i ]
>4025	ArrayIndexing	C1 [ j * 3 + i ]
>4026	AdditiveExpression	j * 3 + i
>4027	Identifier	i
>4028	MultiplicativeExpression	j * 3
>4029	PrimaryExpression	3
>4030	Identifier	j
>4031	Identifier	C1
>4032	Identifier	ji
>4033	Identifier	ji
>4034	IdentifierDeclType	double
>4035	IdentifierDeclStatement	 
>4036	IdentifierDecl	ij = C1 [ i * 3 + j ]
>4037	AssignmentExpr	ij = C1 [ i * 3 + j ]
>4038	ArrayIndexing	C1 [ i * 3 + j ]
>4039	AdditiveExpression	i * 3 + j
>4040	Identifier	j
>4041	MultiplicativeExpression	i * 3
>4042	PrimaryExpression	3
>4043	Identifier	i
>4044	Identifier	C1
>4045	Identifier	ij
>4046	Identifier	ij
>4047	IdentifierDeclType	double
>4048	IncDecOp	 
>4049	IncDec	++
>4050	Identifier	j
>4051	Condition	 
>4052	RelationalExpression	j < 3
>4053	PrimaryExpression	3
>4054	Identifier	j
>4055	ForInit	 
>4056	IdentifierDeclStatement	int j = i + 1 ;
>4057	IdentifierDecl	j = i + 1
>4058	AssignmentExpr	j = i + 1
>4059	AdditiveExpression	i + 1
>4060	PrimaryExpression	1
>4061	Identifier	i
>4062	Identifier	j
>4063	Identifier	j
>4064	IdentifierDeclType	int
>4065	IncDecOp	 
>4066	IncDec	++
>4067	Identifier	i
>4068	Condition	 
>4069	RelationalExpression	i < 3
>4070	PrimaryExpression	3
>4071	Identifier	i
>4072	ForInit	 
>4073	IdentifierDeclStatement	int i = 0 ;
>4074	IdentifierDecl	i = 0
>4075	AssignmentExpr	i = 0
>4076	PrimaryExpression	0
>4077	Identifier	i
>4078	Identifier	i
>4079	IdentifierDeclType	int
>4080	IdentifierDeclStatement	 
>4081	IdentifierDecl	C1 [ 9 ] = { Sinv [ row1 + 0 ] , Sinv [ row1 + 1 ] , Sinv [ row1 + 2 ] , Sinv [ row2 + 0 ] , Sinv [ row2 + 1 ] , \
>4082	AssignmentExpr	C1 [ 9 ] = { Sinv [ row1 + 0 ] , Sinv [ row1 + 1 ] , Sinv [ row1 + 2 ] , Sinv [ row2 + 0 ] , Sinv [ row2 + \
>4083	InitializerList	Sinv [ row1 + 0 ]
>4084	ArrayIndexing	Sinv [ row3 + 2 ]
>4085	AdditiveExpression	row3 + 2
>4086	PrimaryExpression	2
>4087	Identifier	row3
>4088	Identifier	Sinv
>4089	ArrayIndexing	Sinv [ row3 + 1 ]
>4090	AdditiveExpression	row3 + 1
>4091	PrimaryExpression	1
>4092	Identifier	row3
>4093	Identifier	Sinv
>4094	ArrayIndexing	Sinv [ row3 + 0 ]
>4095	AdditiveExpression	row3 + 0
>4096	PrimaryExpression	0
>4097	Identifier	row3
>4098	Identifier	Sinv
>4099	ArrayIndexing	Sinv [ row2 + 2 ]
>4100	AdditiveExpression	row2 + 2
>4101	PrimaryExpression	2
>4102	Identifier	row2
>4103	Identifier	Sinv
>4104	ArrayIndexing	Sinv [ row2 + 1 ]
>4105	AdditiveExpression	row2 + 1
>4106	PrimaryExpression	1
>4107	Identifier	row2
>4108	Identifier	Sinv
>4109	ArrayIndexing	Sinv [ row2 + 0 ]
>4110	AdditiveExpression	row2 + 0
>4111	PrimaryExpression	0
>4112	Identifier	row2
>4113	Identifier	Sinv
>4114	ArrayIndexing	Sinv [ row1 + 2 ]
>4115	AdditiveExpression	row1 + 2
>4116	PrimaryExpression	2
>4117	Identifier	row1
>4118	Identifier	Sinv
>4119	ArrayIndexing	Sinv [ row1 + 1 ]
>4120	AdditiveExpression	row1 + 1
>4121	PrimaryExpression	1
>4122	Identifier	row1
>4123	Identifier	Sinv
>4124	ArrayIndexing	Sinv [ row1 + 0 ]
>4125	AdditiveExpression	row1 + 0
>4126	PrimaryExpression	0
>4127	Identifier	row1
>4128	Identifier	Sinv
>4129	Identifier	C1
>4130	PrimaryExpression	9
>4131	Identifier	C1
>4132	IdentifierDeclType	double [ 9 ]
>4133	ExpressionStatement	 
>4134	AssignmentExpr	row3 = 4 * cnp
>4135	MultiplicativeExpression	4 * cnp
>4136	Identifier	cnp
>4137	PrimaryExpression	4
>4138	Identifier	row3
>4139	ExpressionStatement	 
>4140	AssignmentExpr	row2 = 2 * cnp
>4141	MultiplicativeExpression	2 * cnp
>4142	Identifier	cnp
>4143	PrimaryExpression	2
>4144	Identifier	row2
>4145	ExpressionStatement	 
>4146	AssignmentExpr	row1 = 0
>4147	PrimaryExpression	0
>4148	Identifier	row1
>4149	ExpressionStatement	 
>4150	CallExpression	matrix_invert ( 2 * cnp , S , Sinv )
>4151	ArgumentList	2 * cnp
>4152	Argument	Sinv
>4153	Identifier	Sinv
>4154	Argument	S
>4155	Identifier	S
>4156	Argument	2 * cnp
>4157	MultiplicativeExpression	2 * cnp
>4158	Identifier	cnp
>4159	PrimaryExpression	2
>4160	Callee	matrix_invert
>4161	Identifier	matrix_invert
>4162	ForStatement	for ( int i = 0 ; i < 2 * cnp ; i ++ )
>4163	CompoundStatement	 
>4164	ExpressionStatement	 
>4165	CallExpression	printf ( \"  [%02d] %0.3e\n\" , i , Sfull [ i ] )
>4166	ArgumentList	\"  [%02d] %0.3e\n\"
>4167	Argument	Sfull [ i ]
>4168	ArrayIndexing	Sfull [ i ]
>4169	Identifier	i
>4170	Identifier	Sfull
>4171	Argument	i
>4172	Identifier	i
>4173	Argument	\"  [%02d] %0.3e\n\"
>4174	PrimaryExpression	\"  [%02d] %0.3e\n\"
>4175	Callee	printf
>4176	Identifier	printf
>4177	IncDecOp	 
>4178	IncDec	++
>4179	Identifier	i
>4180	Condition	 
>4181	RelationalExpression	i < 2 * cnp
>4182	MultiplicativeExpression	2 * cnp
>4183	Identifier	cnp
>4184	PrimaryExpression	2
>4185	Identifier	i
>4186	ForInit	 
>4187	IdentifierDeclStatement	int i = 0 ;
>4188	IdentifierDecl	i = 0
>4189	AssignmentExpr	i = 0
>4190	PrimaryExpression	0
>4191	Identifier	i
>4192	Identifier	i
>4193	IdentifierDeclType	int
>4194	ExpressionStatement	 
>4195	CallExpression	printf ( \"Singular values (full)
>4196	ArgumentList	\"Singular values (full)
>4197	Argument	\"Singular values (full)
>4198	PrimaryExpression	\"Singular values (full)
>4199	Callee	printf
>4200	Identifier	printf
>4201	ExpressionStatement	 
>4202	CallExpression	dgesvd_driver ( 2 * cnp , 2 * cnp , S , Ufull , Sfull , VTfull )
>4203	ArgumentList	2 * cnp
>4204	Argument	VTfull
>4205	Identifier	VTfull
>4206	Argument	Sfull
>4207	Identifier	Sfull
>4208	Argument	Ufull
>4209	Identifier	Ufull
>4210	Argument	S
>4211	Identifier	S
>4212	Argument	2 * cnp
>4213	MultiplicativeExpression	2 * cnp
>4214	Identifier	cnp
>4215	PrimaryExpression	2
>4216	Argument	2 * cnp
>4217	MultiplicativeExpression	2 * cnp
>4218	Identifier	cnp
>4219	PrimaryExpression	2
>4220	Callee	dgesvd_driver
>4221	Identifier	dgesvd_driver
>4222	ExpressionStatement	 
>4223	AssignmentExpr	S [ 30 ] += dz * dz
>4224	MultiplicativeExpression	dz * dz
>4225	Identifier	dz
>4226	Identifier	dz
>4227	ArrayIndexing	S [ 30 ]
>4228	PrimaryExpression	30
>4229	Identifier	S
>4230	ExpressionStatement	 
>4231	AssignmentExpr	S [ 29 ] += dy * dz
>4232	MultiplicativeExpression	dy * dz
>4233	Identifier	dz
>4234	Identifier	dy
>4235	ArrayIndexing	S [ 29 ]
>4236	PrimaryExpression	29
>4237	Identifier	S
>4238	ExpressionStatement	 
>4239	AssignmentExpr	S [ 28 ] += dx * dz
>4240	MultiplicativeExpression	dx * dz
>4241	Identifier	dz
>4242	Identifier	dx
>4243	ArrayIndexing	S [ 28 ]
>4244	PrimaryExpression	28
>4245	Identifier	S
>4246	ExpressionStatement	 
>4247	AssignmentExpr	S [ 16 ] += dy * dz
>4248	MultiplicativeExpression	dy * dz
>4249	Identifier	dz
>4250	Identifier	dy
>4251	ArrayIndexing	S [ 16 ]
>4252	PrimaryExpression	16
>4253	Identifier	S
>4254	ExpressionStatement	 
>4255	AssignmentExpr	S [ 15 ] += dy * dy
>4256	MultiplicativeExpression	dy * dy
>4257	Identifier	dy
>4258	Identifier	dy
>4259	ArrayIndexing	S [ 15 ]
>4260	PrimaryExpression	15
>4261	Identifier	S
>4262	ExpressionStatement	 
>4263	AssignmentExpr	S [ 14 ] += dx * dy
>4264	MultiplicativeExpression	dx * dy
>4265	Identifier	dy
>4266	Identifier	dx
>4267	ArrayIndexing	S [ 14 ]
>4268	PrimaryExpression	14
>4269	Identifier	S
>4270	ExpressionStatement	 
>4271	AssignmentExpr	S [ 2 ] += dx * dz
>4272	MultiplicativeExpression	dx * dz
>4273	Identifier	dz
>4274	Identifier	dx
>4275	ArrayIndexing	S [ 2 ]
>4276	PrimaryExpression	2
>4277	Identifier	S
>4278	ExpressionStatement	 
>4279	AssignmentExpr	S [ 1 ] += dx * dy
>4280	MultiplicativeExpression	dx * dy
>4281	Identifier	dy
>4282	Identifier	dx
>4283	ArrayIndexing	S [ 1 ]
>4284	PrimaryExpression	1
>4285	Identifier	S
>4286	ExpressionStatement	 
>4287	AssignmentExpr	S [ 0 ] += dx * dx
>4288	MultiplicativeExpression	dx * dx
>4289	Identifier	dx
>4290	Identifier	dx
>4291	ArrayIndexing	S [ 0 ]
>4292	PrimaryExpression	0
>4293	Identifier	S
>4294	IdentifierDeclStatement	 
>4295	IdentifierDecl	dz = 1.0e4 * 2.0 * eye1 [ 2 ]
>4296	AssignmentExpr	dz = 1.0e4 * 2.0 * eye1 [ 2 ]
>4297	MultiplicativeExpression	1.0e4 * 2.0 * eye1 [ 2 ]
>4298	MultiplicativeExpression	2.0 * eye1 [ 2 ]
>4299	ArrayIndexing	eye1 [ 2 ]
>4300	PrimaryExpression	2
>4301	Identifier	eye1
>4302	PrimaryExpression	2.0
>4303	PrimaryExpression	1.0e4
>4304	Identifier	dz
>4305	Identifier	dz
>4306	IdentifierDeclType	double
>4307	IdentifierDeclStatement	 
>4308	IdentifierDecl	dy = 1.0e4 * 2.0 * eye1 [ 1 ]
>4309	AssignmentExpr	dy = 1.0e4 * 2.0 * eye1 [ 1 ]
>4310	MultiplicativeExpression	1.0e4 * 2.0 * eye1 [ 1 ]
>4311	MultiplicativeExpression	2.0 * eye1 [ 1 ]
>4312	ArrayIndexing	eye1 [ 1 ]
>4313	PrimaryExpression	1
>4314	Identifier	eye1
>4315	PrimaryExpression	2.0
>4316	PrimaryExpression	1.0e4
>4317	Identifier	dy
>4318	Identifier	dy
>4319	IdentifierDeclType	double
>4320	IdentifierDeclStatement	 
>4321	IdentifierDecl	dx = 1.0e4 * 2.0 * eye1 [ 0 ]
>4322	AssignmentExpr	dx = 1.0e4 * 2.0 * eye1 [ 0 ]
>4323	MultiplicativeExpression	1.0e4 * 2.0 * eye1 [ 0 ]
>4324	MultiplicativeExpression	2.0 * eye1 [ 0 ]
>4325	ArrayIndexing	eye1 [ 0 ]
>4326	PrimaryExpression	0
>4327	Identifier	eye1
>4328	PrimaryExpression	2.0
>4329	PrimaryExpression	1.0e4
>4330	Identifier	dx
>4331	Identifier	dx
>4332	IdentifierDeclType	double
>4333	ExpressionStatement	 
>4334	CallExpression	memcpy ( eye1 , cameras [ 0 ] . t , sizeof ( double ) * 3 )
>4335	ArgumentList	eye1
>4336	Argument	sizeof ( double ) * 3
>4337	MultiplicativeExpression	sizeof ( double ) * 3
>4338	PrimaryExpression	3
>4339	SizeofExpr	sizeof ( double )
>4340	SizeofOperand	double
>4341	Sizeof	sizeof
>4342	Argument	cameras [ 0 ] . t
>4343	MemberAccess	cameras [ 0 ] . t
>4344	Identifier	t
>4345	ArrayIndexing	cameras [ 0 ]
>4346	PrimaryExpression	0
>4347	Identifier	cameras
>4348	Argument	eye1
>4349	Identifier	eye1
>4350	Callee	memcpy
>4351	Identifier	memcpy
>4352	ExpressionStatement	 
>4353	CallExpression	matrix_diff ( 2 * cnp , 2 * cnp , 2 * cnp , 2 * cnp , Uf , WViWT , Stest )
>4354	ArgumentList	2 * cnp
>4355	Argument	Stest
>4356	Identifier	Stest
>4357	Argument	WViWT
>4358	Identifier	WViWT
>4359	Argument	Uf
>4360	Identifier	Uf
>4361	Argument	2 * cnp
>4362	MultiplicativeExpression	2 * cnp
>4363	Identifier	cnp
>4364	PrimaryExpression	2
>4365	Argument	2 * cnp
>4366	MultiplicativeExpression	2 * cnp
>4367	Identifier	cnp
>4368	PrimaryExpression	2
>4369	Argument	2 * cnp
>4370	MultiplicativeExpression	2 * cnp
>4371	Identifier	cnp
>4372	PrimaryExpression	2
>4373	Argument	2 * cnp
>4374	MultiplicativeExpression	2 * cnp
>4375	Identifier	cnp
>4376	PrimaryExpression	2
>4377	Callee	matrix_diff
>4378	Identifier	matrix_diff
>4379	ExpressionStatement	 
>4380	CallExpression	matrix_transpose_product2 ( 2 * cnp , 3 * pt_count , 2 * cnp , 3 * pt_count , Y , W , WViWT )
>4381	ArgumentList	2 * cnp
>4382	Argument	WViWT
>4383	Identifier	WViWT
>4384	Argument	W
>4385	Identifier	W
>4386	Argument	Y
>4387	Identifier	Y
>4388	Argument	3 * pt_count
>4389	MultiplicativeExpression	3 * pt_count
>4390	Identifier	pt_count
>4391	PrimaryExpression	3
>4392	Argument	2 * cnp
>4393	MultiplicativeExpression	2 * cnp
>4394	Identifier	cnp
>4395	PrimaryExpression	2
>4396	Argument	3 * pt_count
>4397	MultiplicativeExpression	3 * pt_count
>4398	Identifier	pt_count
>4399	PrimaryExpression	3
>4400	Argument	2 * cnp
>4401	MultiplicativeExpression	2 * cnp
>4402	Identifier	cnp
>4403	PrimaryExpression	2
>4404	Callee	matrix_transpose_product2
>4405	Identifier	matrix_transpose_product2
>4406	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>4407	CompoundStatement	 
>4408	ExpressionStatement	 
>4409	CallExpression	memcpy ( Vinv + ( 3 * i + 2 ) * 3 * pt_count + 3 * i , Vsubinv + 6 , sizeof ( double ) * 3 )
>4410	ArgumentList	Vinv + ( 3 * i + 2 ) * 3 * pt_count + 3 * i
>4411	Argument	sizeof ( double ) * 3
>4412	MultiplicativeExpression	sizeof ( double ) * 3
>4413	PrimaryExpression	3
>4414	SizeofExpr	sizeof ( double )
>4415	SizeofOperand	double
>4416	Sizeof	sizeof
>4417	Argument	Vsubinv + 6
>4418	AdditiveExpression	Vsubinv + 6
>4419	PrimaryExpression	6
>4420	Identifier	Vsubinv
>4421	Argument	Vinv + ( 3 * i + 2 ) * 3 * pt_count + 3 * i
>4422	AdditiveExpression	Vinv + ( 3 * i + 2 ) * 3 * pt_count + 3 * i
>4423	AdditiveExpression	( 3 * i + 2 ) * 3 * pt_count + 3 * i
>4424	MultiplicativeExpression	3 * i
>4425	Identifier	i
>4426	PrimaryExpression	3
>4427	MultiplicativeExpression	( 3 * i + 2 ) * 3 * pt_count
>4428	MultiplicativeExpression	3 * pt_count
>4429	Identifier	pt_count
>4430	PrimaryExpression	3
>4431	AdditiveExpression	3 * i + 2
>4432	PrimaryExpression	2
>4433	MultiplicativeExpression	3 * i
>4434	Identifier	i
>4435	PrimaryExpression	3
>4436	Identifier	Vinv
>4437	Callee	memcpy
>4438	Identifier	memcpy
>4439	ExpressionStatement	 
>4440	CallExpression	memcpy ( Vinv + ( 3 * i + 1 ) * 3 * pt_count + 3 * i , Vsubinv + 3 , sizeof ( double ) * 3 )
>4441	ArgumentList	Vinv + ( 3 * i + 1 ) * 3 * pt_count + 3 * i
>4442	Argument	sizeof ( double ) * 3
>4443	MultiplicativeExpression	sizeof ( double ) * 3
>4444	PrimaryExpression	3
>4445	SizeofExpr	sizeof ( double )
>4446	SizeofOperand	double
>4447	Sizeof	sizeof
>4448	Argument	Vsubinv + 3
>4449	AdditiveExpression	Vsubinv + 3
>4450	PrimaryExpression	3
>4451	Identifier	Vsubinv
>4452	Argument	Vinv + ( 3 * i + 1 ) * 3 * pt_count + 3 * i
>4453	AdditiveExpression	Vinv + ( 3 * i + 1 ) * 3 * pt_count + 3 * i
>4454	AdditiveExpression	( 3 * i + 1 ) * 3 * pt_count + 3 * i
>4455	MultiplicativeExpression	3 * i
>4456	Identifier	i
>4457	PrimaryExpression	3
>4458	MultiplicativeExpression	( 3 * i + 1 ) * 3 * pt_count
>4459	MultiplicativeExpression	3 * pt_count
>4460	Identifier	pt_count
>4461	PrimaryExpression	3
>4462	AdditiveExpression	3 * i + 1
>4463	PrimaryExpression	1
>4464	MultiplicativeExpression	3 * i
>4465	Identifier	i
>4466	PrimaryExpression	3
>4467	Identifier	Vinv
>4468	Callee	memcpy
>4469	Identifier	memcpy
>4470	ExpressionStatement	 
>4471	CallExpression	memcpy ( Vinv + ( 3 * i + 0 ) * 3 * pt_count + 3 * i , Vsubinv + 0 , sizeof ( double ) * 3 )
>4472	ArgumentList	Vinv + ( 3 * i + 0 ) * 3 * pt_count + 3 * i
>4473	Argument	sizeof ( double ) * 3
>4474	MultiplicativeExpression	sizeof ( double ) * 3
>4475	PrimaryExpression	3
>4476	SizeofExpr	sizeof ( double )
>4477	SizeofOperand	double
>4478	Sizeof	sizeof
>4479	Argument	Vsubinv + 0
>4480	AdditiveExpression	Vsubinv + 0
>4481	PrimaryExpression	0
>4482	Identifier	Vsubinv
>4483	Argument	Vinv + ( 3 * i + 0 ) * 3 * pt_count + 3 * i
>4484	AdditiveExpression	Vinv + ( 3 * i + 0 ) * 3 * pt_count + 3 * i
>4485	AdditiveExpression	( 3 * i + 0 ) * 3 * pt_count + 3 * i
>4486	MultiplicativeExpression	3 * i
>4487	Identifier	i
>4488	PrimaryExpression	3
>4489	MultiplicativeExpression	( 3 * i + 0 ) * 3 * pt_count
>4490	MultiplicativeExpression	3 * pt_count
>4491	Identifier	pt_count
>4492	PrimaryExpression	3
>4493	AdditiveExpression	3 * i + 0
>4494	PrimaryExpression	0
>4495	MultiplicativeExpression	3 * i
>4496	Identifier	i
>4497	PrimaryExpression	3
>4498	Identifier	Vinv
>4499	Callee	memcpy
>4500	Identifier	memcpy
>4501	ExpressionStatement	 
>4502	CallExpression	matrix_invert ( 3 , V + 9 * i , Vsubinv )
>4503	ArgumentList	3
>4504	Argument	Vsubinv
>4505	Identifier	Vsubinv
>4506	Argument	V + 9 * i
>4507	AdditiveExpression	V + 9 * i
>4508	MultiplicativeExpression	9 * i
>4509	Identifier	i
>4510	PrimaryExpression	9
>4511	Identifier	V
>4512	Argument	3
>4513	PrimaryExpression	3
>4514	Callee	matrix_invert
>4515	Identifier	matrix_invert
>4516	IdentifierDeclStatement	 
>4517	IdentifierDecl	Vsubinv [ 9 ]
>4518	PrimaryExpression	9
>4519	Identifier	Vsubinv
>4520	IdentifierDeclType	double [ 9 ]
>4521	IncDecOp	 
>4522	IncDec	++
>4523	Identifier	i
>4524	Condition	 
>4525	RelationalExpression	i < pt_count
>4526	Identifier	pt_count
>4527	Identifier	i
>4528	ForInit	 
>4529	IdentifierDeclStatement	int i = 0 ;
>4530	IdentifierDecl	i = 0
>4531	AssignmentExpr	i = 0
>4532	PrimaryExpression	0
>4533	Identifier	i
>4534	Identifier	i
>4535	IdentifierDeclType	int
>4536	ForStatement	for ( int i = 0 ; i < cnp ; i ++ )
>4537	CompoundStatement	 
>4538	ExpressionStatement	 
>4539	CallExpression	memcpy ( Uf + ( i + cnp ) * 2 * cnp + cnp , U + ( i + cnp ) * cnp , cnp * sizeof ( double ) )
>4540	ArgumentList	Uf + ( i + cnp ) * 2 * cnp + cnp
>4541	Argument	cnp * sizeof ( double )
>4542	MultiplicativeExpression	cnp * sizeof ( double )
>4543	SizeofExpr	sizeof ( double )
>4544	SizeofOperand	double
>4545	Sizeof	sizeof
>4546	Identifier	cnp
>4547	Argument	U + ( i + cnp ) * cnp
>4548	AdditiveExpression	U + ( i + cnp ) * cnp
>4549	MultiplicativeExpression	( i + cnp ) * cnp
>4550	Identifier	cnp
>4551	AdditiveExpression	i + cnp
>4552	Identifier	cnp
>4553	Identifier	i
>4554	Identifier	U
>4555	Argument	Uf + ( i + cnp ) * 2 * cnp + cnp
>4556	AdditiveExpression	Uf + ( i + cnp ) * 2 * cnp + cnp
>4557	AdditiveExpression	( i + cnp ) * 2 * cnp + cnp
>4558	Identifier	cnp
>4559	MultiplicativeExpression	( i + cnp ) * 2 * cnp
>4560	MultiplicativeExpression	2 * cnp
>4561	Identifier	cnp
>4562	PrimaryExpression	2
>4563	AdditiveExpression	i + cnp
>4564	Identifier	cnp
>4565	Identifier	i
>4566	Identifier	Uf
>4567	Callee	memcpy
>4568	Identifier	memcpy
>4569	ExpressionStatement	 
>4570	CallExpression	memcpy ( Uf + i * 2 * cnp , U + i * cnp , cnp * sizeof ( double ) )
>4571	ArgumentList	Uf + i * 2 * cnp
>4572	Argument	cnp * sizeof ( double )
>4573	MultiplicativeExpression	cnp * sizeof ( double )
>4574	SizeofExpr	sizeof ( double )
>4575	SizeofOperand	double
>4576	Sizeof	sizeof
>4577	Identifier	cnp
>4578	Argument	U + i * cnp
>4579	AdditiveExpression	U + i * cnp
>4580	MultiplicativeExpression	i * cnp
>4581	Identifier	cnp
>4582	Identifier	i
>4583	Identifier	U
>4584	Argument	Uf + i * 2 * cnp
>4585	AdditiveExpression	Uf + i * 2 * cnp
>4586	MultiplicativeExpression	i * 2 * cnp
>4587	MultiplicativeExpression	2 * cnp
>4588	Identifier	cnp
>4589	PrimaryExpression	2
>4590	Identifier	i
>4591	Identifier	Uf
>4592	Callee	memcpy
>4593	Identifier	memcpy
>4594	IncDecOp	 
>4595	IncDec	++
>4596	Identifier	i
>4597	Condition	 
>4598	RelationalExpression	i < cnp
>4599	Identifier	cnp
>4600	Identifier	i
>4601	ForInit	 
>4602	IdentifierDeclStatement	int i = 0 ;
>4603	IdentifierDecl	i = 0
>4604	AssignmentExpr	i = 0
>4605	PrimaryExpression	0
>4606	Identifier	i
>4607	Identifier	i
>4608	IdentifierDeclType	int
>4609	ExpressionStatement	 
>4610	CallExpression	memset ( Uf , 0 , sizeof ( double ) * 4 * cnp * cnp )
>4611	ArgumentList	Uf
>4612	Argument	sizeof ( double ) * 4 * cnp * cnp
>4613	MultiplicativeExpression	sizeof ( double ) * 4 * cnp * cnp
>4614	MultiplicativeExpression	4 * cnp * cnp
>4615	MultiplicativeExpression	cnp * cnp
>4616	Identifier	cnp
>4617	Identifier	cnp
>4618	PrimaryExpression	4
>4619	SizeofExpr	sizeof ( double )
>4620	SizeofOperand	double
>4621	Sizeof	sizeof
>4622	Argument	0
>4623	PrimaryExpression	0
>4624	Argument	Uf
>4625	Identifier	Uf
>4626	Callee	memset
>4627	Identifier	memset
>4628	ExpressionStatement	 
>4629	AssignmentExpr	error0 = RunSFM_SBA ( pt_count , 2 , 0 , false , cameras , points , added_order , colors , pt_views , \
>4630	CallExpression	RunSFM_SBA ( pt_count , 2 , 0 , false , cameras , points , added_order , colors , pt_views , TERM_THRESH , S , U , \
>4631	ArgumentList	pt_count
>4632	Argument	false
>4633	Identifier	false
>4634	Argument	W
>4635	Identifier	W
>4636	Argument	V
>4637	Identifier	V
>4638	Argument	U
>4639	Identifier	U
>4640	Argument	S
>4641	Identifier	S
>4642	Argument	TERM_THRESH
>4643	Identifier	TERM_THRESH
>4644	Argument	pt_views
>4645	Identifier	pt_views
>4646	Argument	colors
>4647	Identifier	colors
>4648	Argument	added_order
>4649	Identifier	added_order
>4650	Argument	points
>4651	Identifier	points
>4652	Argument	cameras
>4653	Identifier	cameras
>4654	Argument	false
>4655	Identifier	false
>4656	Argument	0
>4657	PrimaryExpression	0
>4658	Argument	2
>4659	PrimaryExpression	2
>4660	Argument	pt_count
>4661	Identifier	pt_count
>4662	Callee	RunSFM_SBA
>4663	Identifier	RunSFM_SBA
>4664	Identifier	error0
>4665	ExpressionStatement	 
>4666	AssignmentExpr	cameras [ 1 ] . constraints [ 2 ] = cameras [ 1 ] . t [ 2 ]
>4667	ArrayIndexing	cameras [ 1 ] . t [ 2 ]
>4668	PrimaryExpression	2
>4669	MemberAccess	cameras [ 1 ] . t
>4670	Identifier	t
>4671	ArrayIndexing	cameras [ 1 ]
>4672	PrimaryExpression	1
>4673	Identifier	cameras
>4674	ArrayIndexing	cameras [ 1 ] . constraints [ 2 ]
>4675	PrimaryExpression	2
>4676	MemberAccess	cameras [ 1 ] . constraints
>4677	Identifier	constraints
>4678	ArrayIndexing	cameras [ 1 ]
>4679	PrimaryExpression	1
>4680	Identifier	cameras
>4681	ExpressionStatement	 
>4682	AssignmentExpr	cameras [ 1 ] . constraints [ 1 ] = cameras [ 1 ] . t [ 1 ]
>4683	ArrayIndexing	cameras [ 1 ] . t [ 1 ]
>4684	PrimaryExpression	1
>4685	MemberAccess	cameras [ 1 ] . t
>4686	Identifier	t
>4687	ArrayIndexing	cameras [ 1 ]
>4688	PrimaryExpression	1
>4689	Identifier	cameras
>4690	ArrayIndexing	cameras [ 1 ] . constraints [ 1 ]
>4691	PrimaryExpression	1
>4692	MemberAccess	cameras [ 1 ] . constraints
>4693	Identifier	constraints
>4694	ArrayIndexing	cameras [ 1 ]
>4695	PrimaryExpression	1
>4696	Identifier	cameras
>4697	ExpressionStatement	 
>4698	AssignmentExpr	cameras [ 1 ] . constraints [ 0 ] = cameras [ 1 ] . t [ 0 ]
>4699	ArrayIndexing	cameras [ 1 ] . t [ 0 ]
>4700	PrimaryExpression	0
>4701	MemberAccess	cameras [ 1 ] . t
>4702	Identifier	t
>4703	ArrayIndexing	cameras [ 1 ]
>4704	PrimaryExpression	1
>4705	Identifier	cameras
>4706	ArrayIndexing	cameras [ 1 ] . constraints [ 0 ]
>4707	PrimaryExpression	0
>4708	MemberAccess	cameras [ 1 ] . constraints
>4709	Identifier	constraints
>4710	ArrayIndexing	cameras [ 1 ]
>4711	PrimaryExpression	1
>4712	Identifier	cameras
>4713	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>4714	ExpressionStatement	 
>4715	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , points [ i ] . p , mean . p , points [ i ] . p )
>4716	ArgumentList	3
>4717	Argument	points [ i ] . p
>4718	MemberAccess	points [ i ] . p
>4719	Identifier	p
>4720	ArrayIndexing	points [ i ]
>4721	Identifier	i
>4722	Identifier	points
>4723	Argument	mean . p
>4724	MemberAccess	mean . p
>4725	Identifier	p
>4726	Identifier	mean
>4727	Argument	points [ i ] . p
>4728	MemberAccess	points [ i ] . p
>4729	Identifier	p
>4730	ArrayIndexing	points [ i ]
>4731	Identifier	i
>4732	Identifier	points
>4733	Argument	1
>4734	PrimaryExpression	1
>4735	Argument	3
>4736	PrimaryExpression	3
>4737	Argument	1
>4738	PrimaryExpression	1
>4739	Argument	3
>4740	PrimaryExpression	3
>4741	Callee	matrix_diff
>4742	Identifier	matrix_diff
>4743	IncDecOp	 
>4744	IncDec	++
>4745	Identifier	i
>4746	Condition	 
>4747	RelationalExpression	i < pt_count
>4748	Identifier	pt_count
>4749	Identifier	i
>4750	ForInit	 
>4751	IdentifierDeclStatement	int i = 0 ;
>4752	IdentifierDecl	i = 0
>4753	AssignmentExpr	i = 0
>4754	PrimaryExpression	0
>4755	Identifier	i
>4756	Identifier	i
>4757	IdentifierDeclType	int
>4758	ExpressionStatement	 
>4759	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , cameras [ 1 ] . t , mean . p , cameras [ 1 ] . t )
>4760	ArgumentList	3
>4761	Argument	cameras [ 1 ] . t
>4762	MemberAccess	cameras [ 1 ] . t
>4763	Identifier	t
>4764	ArrayIndexing	cameras [ 1 ]
>4765	PrimaryExpression	1
>4766	Identifier	cameras
>4767	Argument	mean . p
>4768	MemberAccess	mean . p
>4769	Identifier	p
>4770	Identifier	mean
>4771	Argument	cameras [ 1 ] . t
>4772	MemberAccess	cameras [ 1 ] . t
>4773	Identifier	t
>4774	ArrayIndexing	cameras [ 1 ]
>4775	PrimaryExpression	1
>4776	Identifier	cameras
>4777	Argument	1
>4778	PrimaryExpression	1
>4779	Argument	3
>4780	PrimaryExpression	3
>4781	Argument	1
>4782	PrimaryExpression	1
>4783	Argument	3
>4784	PrimaryExpression	3
>4785	Callee	matrix_diff
>4786	Identifier	matrix_diff
>4787	ExpressionStatement	 
>4788	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , cameras [ 0 ] . t , mean . p , cameras [ 0 ] . t )
>4789	ArgumentList	3
>4790	Argument	cameras [ 0 ] . t
>4791	MemberAccess	cameras [ 0 ] . t
>4792	Identifier	t
>4793	ArrayIndexing	cameras [ 0 ]
>4794	PrimaryExpression	0
>4795	Identifier	cameras
>4796	Argument	mean . p
>4797	MemberAccess	mean . p
>4798	Identifier	p
>4799	Identifier	mean
>4800	Argument	cameras [ 0 ] . t
>4801	MemberAccess	cameras [ 0 ] . t
>4802	Identifier	t
>4803	ArrayIndexing	cameras [ 0 ]
>4804	PrimaryExpression	0
>4805	Identifier	cameras
>4806	Argument	1
>4807	PrimaryExpression	1
>4808	Argument	3
>4809	PrimaryExpression	3
>4810	Argument	1
>4811	PrimaryExpression	1
>4812	Argument	3
>4813	PrimaryExpression	3
>4814	Callee	matrix_diff
>4815	Identifier	matrix_diff
>4816	ExpressionStatement	 
>4817	AssignmentExpr	mean = v3_mean ( selected , points )
>4818	CallExpression	v3_mean ( selected , points )
>4819	ArgumentList	selected
>4820	Argument	points
>4821	Identifier	points
>4822	Argument	selected
>4823	Identifier	selected
>4824	Callee	v3_mean
>4825	Identifier	v3_mean
>4826	Identifier	mean
>4827	IfStatement	if ( m_explicit_camera_centers )
>4828	ElseStatement	else
>4829	CompoundStatement	 
>4830	ExpressionStatement	 
>4831	CallExpression	matrix_scale ( 3 , 1 , cameras [ 0 ] . t , - 1.0 , cameras [ 0 ] . t )
>4832	ArgumentList	3
>4833	Argument	cameras [ 0 ] . t
>4834	MemberAccess	cameras [ 0 ] . t
>4835	Identifier	t
>4836	ArrayIndexing	cameras [ 0 ]
>4837	PrimaryExpression	0
>4838	Identifier	cameras
>4839	Argument	- 1.0
>4840	UnaryOp	- 1.0
>4841	PrimaryExpression	1.0
>4842	UnaryOperator	-
>4843	Argument	cameras [ 0 ] . t
>4844	MemberAccess	cameras [ 0 ] . t
>4845	Identifier	t
>4846	ArrayIndexing	cameras [ 0 ]
>4847	PrimaryExpression	0
>4848	Identifier	cameras
>4849	Argument	1
>4850	PrimaryExpression	1
>4851	Argument	3
>4852	PrimaryExpression	3
>4853	Callee	matrix_scale
>4854	Identifier	matrix_scale
>4855	ExpressionStatement	 
>4856	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cameras [ 0 ] . R , eye1 , cameras [ 0 ] . t )
>4857	ArgumentList	3
>4858	Argument	cameras [ 0 ] . t
>4859	MemberAccess	cameras [ 0 ] . t
>4860	Identifier	t
>4861	ArrayIndexing	cameras [ 0 ]
>4862	PrimaryExpression	0
>4863	Identifier	cameras
>4864	Argument	eye1
>4865	Identifier	eye1
>4866	Argument	cameras [ 0 ] . R
>4867	MemberAccess	cameras [ 0 ] . R
>4868	Identifier	R
>4869	ArrayIndexing	cameras [ 0 ]
>4870	PrimaryExpression	0
>4871	Identifier	cameras
>4872	Argument	1
>4873	PrimaryExpression	1
>4874	Argument	3
>4875	PrimaryExpression	3
>4876	Argument	3
>4877	PrimaryExpression	3
>4878	Argument	3
>4879	PrimaryExpression	3
>4880	Callee	matrix_product
>4881	Identifier	matrix_product
>4882	CompoundStatement	 
>4883	ExpressionStatement	 
>4884	CallExpression	memcpy ( cameras [ 0 ] . t , eye1 , sizeof ( double ) * 3 )
>4885	ArgumentList	cameras [ 0 ] . t
>4886	Argument	sizeof ( double ) * 3
>4887	MultiplicativeExpression	sizeof ( double ) * 3
>4888	PrimaryExpression	3
>4889	SizeofExpr	sizeof ( double )
>4890	SizeofOperand	double
>4891	Sizeof	sizeof
>4892	Argument	eye1
>4893	Identifier	eye1
>4894	Argument	cameras [ 0 ] . t
>4895	MemberAccess	cameras [ 0 ] . t
>4896	Identifier	t
>4897	ArrayIndexing	cameras [ 0 ]
>4898	PrimaryExpression	0
>4899	Identifier	cameras
>4900	Callee	memcpy
>4901	Identifier	memcpy
>4902	Condition	 
>4903	Identifier	m_explicit_camera_centers
>4904	ExpressionStatement	 
>4905	AssignmentExpr	cameras [ 1 ] . t [ 0 ] = cameras [ 1 ] . t [ 1 ] = cameras [ 1 ] . t [ 2 ] = 0.0
>4906	AssignmentExpr	cameras [ 1 ] . t [ 1 ] = cameras [ 1 ] . t [ 2 ] = 0.0
>4907	AssignmentExpr	cameras [ 1 ] . t [ 2 ] = 0.0
>4908	PrimaryExpression	0.0
>4909	ArrayIndexing	cameras [ 1 ] . t [ 2 ]
>4910	PrimaryExpression	2
>4911	MemberAccess	cameras [ 1 ] . t
>4912	Identifier	t
>4913	ArrayIndexing	cameras [ 1 ]
>4914	PrimaryExpression	1
>4915	Identifier	cameras
>4916	ArrayIndexing	cameras [ 1 ] . t [ 1 ]
>4917	PrimaryExpression	1
>4918	MemberAccess	cameras [ 1 ] . t
>4919	Identifier	t
>4920	ArrayIndexing	cameras [ 1 ]
>4921	PrimaryExpression	1
>4922	Identifier	cameras
>4923	ArrayIndexing	cameras [ 1 ] . t [ 0 ]
>4924	PrimaryExpression	0
>4925	MemberAccess	cameras [ 1 ] . t
>4926	Identifier	t
>4927	ArrayIndexing	cameras [ 1 ]
>4928	PrimaryExpression	1
>4929	Identifier	cameras
>4930	ExpressionStatement	 
>4931	CallExpression	matrix_ident ( 3 , cameras [ 1 ] . R )
>4932	ArgumentList	3
>4933	Argument	cameras [ 1 ] . R
>4934	MemberAccess	cameras [ 1 ] . R
>4935	Identifier	R
>4936	ArrayIndexing	cameras [ 1 ]
>4937	PrimaryExpression	1
>4938	Identifier	cameras
>4939	Argument	3
>4940	PrimaryExpression	3
>4941	Callee	matrix_ident
>4942	Identifier	matrix_ident
>4943	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>4944	CompoundStatement	 
>4945	ExpressionStatement	 
>4946	CallExpression	matrix_scale ( 3 , 1 , points [ i ] . p , 1.0 / dist , points [ i ] . p )
>4947	ArgumentList	3
>4948	Argument	points [ i ] . p
>4949	MemberAccess	points [ i ] . p
>4950	Identifier	p
>4951	ArrayIndexing	points [ i ]
>4952	Identifier	i
>4953	Identifier	points
>4954	Argument	1.0 / dist
>4955	MultiplicativeExpression	1.0 / dist
>4956	Identifier	dist
>4957	PrimaryExpression	1.0
>4958	Argument	points [ i ] . p
>4959	MemberAccess	points [ i ] . p
>4960	Identifier	p
>4961	ArrayIndexing	points [ i ]
>4962	Identifier	i
>4963	Identifier	points
>4964	Argument	1
>4965	PrimaryExpression	1
>4966	Argument	3
>4967	PrimaryExpression	3
>4968	Callee	matrix_scale
>4969	Identifier	matrix_scale
>4970	ExpressionStatement	 
>4971	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cameras [ 1 ] . R , p_tmp , points [ i ] . p )
>4972	ArgumentList	3
>4973	Argument	points [ i ] . p
>4974	MemberAccess	points [ i ] . p
>4975	Identifier	p
>4976	ArrayIndexing	points [ i ]
>4977	Identifier	i
>4978	Identifier	points
>4979	Argument	p_tmp
>4980	Identifier	p_tmp
>4981	Argument	cameras [ 1 ] . R
>4982	MemberAccess	cameras [ 1 ] . R
>4983	Identifier	R
>4984	ArrayIndexing	cameras [ 1 ]
>4985	PrimaryExpression	1
>4986	Identifier	cameras
>4987	Argument	1
>4988	PrimaryExpression	1
>4989	Argument	3
>4990	PrimaryExpression	3
>4991	Argument	3
>4992	PrimaryExpression	3
>4993	Argument	3
>4994	PrimaryExpression	3
>4995	Callee	matrix_product
>4996	Identifier	matrix_product
>4997	ExpressionStatement	 
>4998	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , points [ i ] . p , eye2 , p_tmp )
>4999	ArgumentList	3
>5000	Argument	p_tmp
>5001	Identifier	p_tmp
>5002	Argument	eye2
>5003	Identifier	eye2
>5004	Argument	points [ i ] . p
>5005	MemberAccess	points [ i ] . p
>5006	Identifier	p
>5007	ArrayIndexing	points [ i ]
>5008	Identifier	i
>5009	Identifier	points
>5010	Argument	1
>5011	PrimaryExpression	1
>5012	Argument	3
>5013	PrimaryExpression	3
>5014	Argument	1
>5015	PrimaryExpression	1
>5016	Argument	3
>5017	PrimaryExpression	3
>5018	Callee	matrix_diff
>5019	Identifier	matrix_diff
>5020	IdentifierDeclStatement	 
>5021	IdentifierDecl	p_tmp [ 3 ]
>5022	PrimaryExpression	3
>5023	Identifier	p_tmp
>5024	IdentifierDeclType	double [ 3 ]
>5025	IncDecOp	 
>5026	IncDec	++
>5027	Identifier	i
>5028	Condition	 
>5029	RelationalExpression	i < pt_count
>5030	Identifier	pt_count
>5031	Identifier	i
>5032	ForInit	 
>5033	IdentifierDeclStatement	int i = 0 ;
>5034	IdentifierDecl	i = 0
>5035	AssignmentExpr	i = 0
>5036	PrimaryExpression	0
>5037	Identifier	i
>5038	Identifier	i
>5039	IdentifierDeclType	int
>5040	ExpressionStatement	 
>5041	CallExpression	memcpy ( cameras [ 0 ] . R , tmp , sizeof ( double ) * 9 )
>5042	ArgumentList	cameras [ 0 ] . R
>5043	Argument	sizeof ( double ) * 9
>5044	MultiplicativeExpression	sizeof ( double ) * 9
>5045	PrimaryExpression	9
>5046	SizeofExpr	sizeof ( double )
>5047	SizeofOperand	double
>5048	Sizeof	sizeof
>5049	Argument	tmp
>5050	Identifier	tmp
>5051	Argument	cameras [ 0 ] . R
>5052	MemberAccess	cameras [ 0 ] . R
>5053	Identifier	R
>5054	ArrayIndexing	cameras [ 0 ]
>5055	PrimaryExpression	0
>5056	Identifier	cameras
>5057	Callee	memcpy
>5058	Identifier	memcpy
>5059	ExpressionStatement	 
>5060	CallExpression	matrix_transpose_product2 ( 3 , 3 , 3 , 3 , cameras [ 0 ] . R , cameras [ 1 ] . R , tmp )
>5061	ArgumentList	3
>5062	Argument	tmp
>5063	Identifier	tmp
>5064	Argument	cameras [ 1 ] . R
>5065	MemberAccess	cameras [ 1 ] . R
>5066	Identifier	R
>5067	ArrayIndexing	cameras [ 1 ]
>5068	PrimaryExpression	1
>5069	Identifier	cameras
>5070	Argument	cameras [ 0 ] . R
>5071	MemberAccess	cameras [ 0 ] . R
>5072	Identifier	R
>5073	ArrayIndexing	cameras [ 0 ]
>5074	PrimaryExpression	0
>5075	Identifier	cameras
>5076	Argument	3
>5077	PrimaryExpression	3
>5078	Argument	3
>5079	PrimaryExpression	3
>5080	Argument	3
>5081	PrimaryExpression	3
>5082	Argument	3
>5083	PrimaryExpression	3
>5084	Callee	matrix_transpose_product2
>5085	Identifier	matrix_transpose_product2
>5086	ExpressionStatement	 
>5087	CallExpression	matrix_scale ( 3 , 1 , eye1 , 1.0 / dist , eye1 )
>5088	ArgumentList	3
>5089	Argument	eye1
>5090	Identifier	eye1
>5091	Argument	1.0 / dist
>5092	MultiplicativeExpression	1.0 / dist
>5093	Identifier	dist
>5094	PrimaryExpression	1.0
>5095	Argument	eye1
>5096	Identifier	eye1
>5097	Argument	1
>5098	PrimaryExpression	1
>5099	Argument	3
>5100	PrimaryExpression	3
>5101	Callee	matrix_scale
>5102	Identifier	matrix_scale
>5103	ExpressionStatement	 
>5104	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cameras [ 1 ] . R , diff , eye1 )
>5105	ArgumentList	3
>5106	Argument	eye1
>5107	Identifier	eye1
>5108	Argument	diff
>5109	Identifier	diff
>5110	Argument	cameras [ 1 ] . R
>5111	MemberAccess	cameras [ 1 ] . R
>5112	Identifier	R
>5113	ArrayIndexing	cameras [ 1 ]
>5114	PrimaryExpression	1
>5115	Identifier	cameras
>5116	Argument	1
>5117	PrimaryExpression	1
>5118	Argument	3
>5119	PrimaryExpression	3
>5120	Argument	3
>5121	PrimaryExpression	3
>5122	Argument	3
>5123	PrimaryExpression	3
>5124	Callee	matrix_product
>5125	Identifier	matrix_product
>5126	ExpressionStatement	 
>5127	AssignmentExpr	dist = matrix_norm ( 3 , 1 , diff )
>5128	CallExpression	matrix_norm ( 3 , 1 , diff )
>5129	ArgumentList	3
>5130	Argument	diff
>5131	Identifier	diff
>5132	Argument	1
>5133	PrimaryExpression	1
>5134	Argument	3
>5135	PrimaryExpression	3
>5136	Callee	matrix_norm
>5137	Identifier	matrix_norm
>5138	Identifier	dist
>5139	ExpressionStatement	 
>5140	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , cameras [ 0 ] . t , cameras [ 1 ] . t , diff )
>5141	ArgumentList	3
>5142	Argument	diff
>5143	Identifier	diff
>5144	Argument	cameras [ 1 ] . t
>5145	MemberAccess	cameras [ 1 ] . t
>5146	Identifier	t
>5147	ArrayIndexing	cameras [ 1 ]
>5148	PrimaryExpression	1
>5149	Identifier	cameras
>5150	Argument	cameras [ 0 ] . t
>5151	MemberAccess	cameras [ 0 ] . t
>5152	Identifier	t
>5153	ArrayIndexing	cameras [ 0 ]
>5154	PrimaryExpression	0
>5155	Identifier	cameras
>5156	Argument	1
>5157	PrimaryExpression	1
>5158	Argument	3
>5159	PrimaryExpression	3
>5160	Argument	1
>5161	PrimaryExpression	1
>5162	Argument	3
>5163	PrimaryExpression	3
>5164	Callee	matrix_diff
>5165	Identifier	matrix_diff
>5166	ExpressionStatement	 
>5167	CallExpression	memcpy ( eye2 , cameras [ 1 ] . t , sizeof ( double ) * 3 )
>5168	ArgumentList	eye2
>5169	Argument	sizeof ( double ) * 3
>5170	MultiplicativeExpression	sizeof ( double ) * 3
>5171	PrimaryExpression	3
>5172	SizeofExpr	sizeof ( double )
>5173	SizeofOperand	double
>5174	Sizeof	sizeof
>5175	Argument	cameras [ 1 ] . t
>5176	MemberAccess	cameras [ 1 ] . t
>5177	Identifier	t
>5178	ArrayIndexing	cameras [ 1 ]
>5179	PrimaryExpression	1
>5180	Identifier	cameras
>5181	Argument	eye2
>5182	Identifier	eye2
>5183	Callee	memcpy
>5184	Identifier	memcpy
>5185	ExpressionStatement	 
>5186	AssignmentExpr	cameras [ 1 ] . weights [ 5 ] = 1.0e6
>5187	PrimaryExpression	1.0e6
>5188	ArrayIndexing	cameras [ 1 ] . weights [ 5 ]
>5189	PrimaryExpression	5
>5190	MemberAccess	cameras [ 1 ] . weights
>5191	Identifier	weights
>5192	ArrayIndexing	cameras [ 1 ]
>5193	PrimaryExpression	1
>5194	Identifier	cameras
>5195	ExpressionStatement	 
>5196	AssignmentExpr	cameras [ 1 ] . weights [ 4 ] = 1.0e6
>5197	PrimaryExpression	1.0e6
>5198	ArrayIndexing	cameras [ 1 ] . weights [ 4 ]
>5199	PrimaryExpression	4
>5200	MemberAccess	cameras [ 1 ] . weights
>5201	Identifier	weights
>5202	ArrayIndexing	cameras [ 1 ]
>5203	PrimaryExpression	1
>5204	Identifier	cameras
>5205	ExpressionStatement	 
>5206	AssignmentExpr	cameras [ 1 ] . weights [ 3 ] = 1.0e6
>5207	PrimaryExpression	1.0e6
>5208	ArrayIndexing	cameras [ 1 ] . weights [ 3 ]
>5209	PrimaryExpression	3
>5210	MemberAccess	cameras [ 1 ] . weights
>5211	Identifier	weights
>5212	ArrayIndexing	cameras [ 1 ]
>5213	PrimaryExpression	1
>5214	Identifier	cameras
>5215	ExpressionStatement	 
>5216	AssignmentExpr	cameras [ 1 ] . weights [ 2 ] = 1.0e6
>5217	PrimaryExpression	1.0e6
>5218	ArrayIndexing	cameras [ 1 ] . weights [ 2 ]
>5219	PrimaryExpression	2
>5220	MemberAccess	cameras [ 1 ] . weights
>5221	Identifier	weights
>5222	ArrayIndexing	cameras [ 1 ]
>5223	PrimaryExpression	1
>5224	Identifier	cameras
>5225	ExpressionStatement	 
>5226	AssignmentExpr	cameras [ 1 ] . weights [ 1 ] = 1.0e6
>5227	PrimaryExpression	1.0e6
>5228	ArrayIndexing	cameras [ 1 ] . weights [ 1 ]
>5229	PrimaryExpression	1
>5230	MemberAccess	cameras [ 1 ] . weights
>5231	Identifier	weights
>5232	ArrayIndexing	cameras [ 1 ]
>5233	PrimaryExpression	1
>5234	Identifier	cameras
>5235	ExpressionStatement	 
>5236	AssignmentExpr	cameras [ 1 ] . weights [ 0 ] = 1.0e6
>5237	PrimaryExpression	1.0e6
>5238	ArrayIndexing	cameras [ 1 ] . weights [ 0 ]
>5239	PrimaryExpression	0
>5240	MemberAccess	cameras [ 1 ] . weights
>5241	Identifier	weights
>5242	ArrayIndexing	cameras [ 1 ]
>5243	PrimaryExpression	1
>5244	Identifier	cameras
>5245	ExpressionStatement	 
>5246	AssignmentExpr	cameras [ 1 ] . constraints [ 5 ] = 0.0
>5247	PrimaryExpression	0.0
>5248	ArrayIndexing	cameras [ 1 ] . constraints [ 5 ]
>5249	PrimaryExpression	5
>5250	MemberAccess	cameras [ 1 ] . constraints
>5251	Identifier	constraints
>5252	ArrayIndexing	cameras [ 1 ]
>5253	PrimaryExpression	1
>5254	Identifier	cameras
>5255	ExpressionStatement	 
>5256	AssignmentExpr	cameras [ 1 ] . constraints [ 4 ] = 0.0
>5257	PrimaryExpression	0.0
>5258	ArrayIndexing	cameras [ 1 ] . constraints [ 4 ]
>5259	PrimaryExpression	4
>5260	MemberAccess	cameras [ 1 ] . constraints
>5261	Identifier	constraints
>5262	ArrayIndexing	cameras [ 1 ]
>5263	PrimaryExpression	1
>5264	Identifier	cameras
>5265	ExpressionStatement	 
>5266	AssignmentExpr	cameras [ 1 ] . constraints [ 3 ] = 0.0
>5267	PrimaryExpression	0.0
>5268	ArrayIndexing	cameras [ 1 ] . constraints [ 3 ]
>5269	PrimaryExpression	3
>5270	MemberAccess	cameras [ 1 ] . constraints
>5271	Identifier	constraints
>5272	ArrayIndexing	cameras [ 1 ]
>5273	PrimaryExpression	1
>5274	Identifier	cameras
>5275	ExpressionStatement	 
>5276	AssignmentExpr	cameras [ 1 ] . constraints [ 2 ] = 0.0
>5277	PrimaryExpression	0.0
>5278	ArrayIndexing	cameras [ 1 ] . constraints [ 2 ]
>5279	PrimaryExpression	2
>5280	MemberAccess	cameras [ 1 ] . constraints
>5281	Identifier	constraints
>5282	ArrayIndexing	cameras [ 1 ]
>5283	PrimaryExpression	1
>5284	Identifier	cameras
>5285	ExpressionStatement	 
>5286	AssignmentExpr	cameras [ 1 ] . constraints [ 1 ] = 0.0
>5287	PrimaryExpression	0.0
>5288	ArrayIndexing	cameras [ 1 ] . constraints [ 1 ]
>5289	PrimaryExpression	1
>5290	MemberAccess	cameras [ 1 ] . constraints
>5291	Identifier	constraints
>5292	ArrayIndexing	cameras [ 1 ]
>5293	PrimaryExpression	1
>5294	Identifier	cameras
>5295	ExpressionStatement	 
>5296	AssignmentExpr	cameras [ 1 ] . constraints [ 0 ] = 0.0
>5297	PrimaryExpression	0.0
>5298	ArrayIndexing	cameras [ 1 ] . constraints [ 0 ]
>5299	PrimaryExpression	0
>5300	MemberAccess	cameras [ 1 ] . constraints
>5301	Identifier	constraints
>5302	ArrayIndexing	cameras [ 1 ]
>5303	PrimaryExpression	1
>5304	Identifier	cameras
>5305	ExpressionStatement	 
>5306	AssignmentExpr	cameras [ 1 ] . constrained [ 5 ] = true
>5307	Identifier	true
>5308	ArrayIndexing	cameras [ 1 ] . constrained [ 5 ]
>5309	PrimaryExpression	5
>5310	MemberAccess	cameras [ 1 ] . constrained
>5311	Identifier	constrained
>5312	ArrayIndexing	cameras [ 1 ]
>5313	PrimaryExpression	1
>5314	Identifier	cameras
>5315	ExpressionStatement	 
>5316	AssignmentExpr	cameras [ 1 ] . constrained [ 4 ] = true
>5317	Identifier	true
>5318	ArrayIndexing	cameras [ 1 ] . constrained [ 4 ]
>5319	PrimaryExpression	4
>5320	MemberAccess	cameras [ 1 ] . constrained
>5321	Identifier	constrained
>5322	ArrayIndexing	cameras [ 1 ]
>5323	PrimaryExpression	1
>5324	Identifier	cameras
>5325	ExpressionStatement	 
>5326	AssignmentExpr	cameras [ 1 ] . constrained [ 3 ] = true
>5327	Identifier	true
>5328	ArrayIndexing	cameras [ 1 ] . constrained [ 3 ]
>5329	PrimaryExpression	3
>5330	MemberAccess	cameras [ 1 ] . constrained
>5331	Identifier	constrained
>5332	ArrayIndexing	cameras [ 1 ]
>5333	PrimaryExpression	1
>5334	Identifier	cameras
>5335	ExpressionStatement	 
>5336	AssignmentExpr	cameras [ 1 ] . constrained [ 2 ] = true
>5337	Identifier	true
>5338	ArrayIndexing	cameras [ 1 ] . constrained [ 2 ]
>5339	PrimaryExpression	2
>5340	MemberAccess	cameras [ 1 ] . constrained
>5341	Identifier	constrained
>5342	ArrayIndexing	cameras [ 1 ]
>5343	PrimaryExpression	1
>5344	Identifier	cameras
>5345	ExpressionStatement	 
>5346	AssignmentExpr	cameras [ 1 ] . constrained [ 1 ] = true
>5347	Identifier	true
>5348	ArrayIndexing	cameras [ 1 ] . constrained [ 1 ]
>5349	PrimaryExpression	1
>5350	MemberAccess	cameras [ 1 ] . constrained
>5351	Identifier	constrained
>5352	ArrayIndexing	cameras [ 1 ]
>5353	PrimaryExpression	1
>5354	Identifier	cameras
>5355	ExpressionStatement	 
>5356	AssignmentExpr	cameras [ 1 ] . constrained [ 0 ] = true
>5357	Identifier	true
>5358	ArrayIndexing	cameras [ 1 ] . constrained [ 0 ]
>5359	PrimaryExpression	0
>5360	MemberAccess	cameras [ 1 ] . constrained
>5361	Identifier	constrained
>5362	ArrayIndexing	cameras [ 1 ]
>5363	PrimaryExpression	1
>5364	Identifier	cameras
>5365	ExpressionStatement	 
>5366	AssignmentExpr	cameras [ 0 ] . constrained [ 5 ] = false
>5367	Identifier	false
>5368	ArrayIndexing	cameras [ 0 ] . constrained [ 5 ]
>5369	PrimaryExpression	5
>5370	MemberAccess	cameras [ 0 ] . constrained
>5371	Identifier	constrained
>5372	ArrayIndexing	cameras [ 0 ]
>5373	PrimaryExpression	0
>5374	Identifier	cameras
>5375	ExpressionStatement	 
>5376	AssignmentExpr	cameras [ 0 ] . constrained [ 4 ] = false
>5377	Identifier	false
>5378	ArrayIndexing	cameras [ 0 ] . constrained [ 4 ]
>5379	PrimaryExpression	4
>5380	MemberAccess	cameras [ 0 ] . constrained
>5381	Identifier	constrained
>5382	ArrayIndexing	cameras [ 0 ]
>5383	PrimaryExpression	0
>5384	Identifier	cameras
>5385	ExpressionStatement	 
>5386	AssignmentExpr	cameras [ 0 ] . constrained [ 3 ] = false
>5387	Identifier	false
>5388	ArrayIndexing	cameras [ 0 ] . constrained [ 3 ]
>5389	PrimaryExpression	3
>5390	MemberAccess	cameras [ 0 ] . constrained
>5391	Identifier	constrained
>5392	ArrayIndexing	cameras [ 0 ]
>5393	PrimaryExpression	0
>5394	Identifier	cameras
>5395	ExpressionStatement	 
>5396	AssignmentExpr	cameras [ 0 ] . constrained [ 2 ] = false
>5397	Identifier	false
>5398	ArrayIndexing	cameras [ 0 ] . constrained [ 2 ]
>5399	PrimaryExpression	2
>5400	MemberAccess	cameras [ 0 ] . constrained
>5401	Identifier	constrained
>5402	ArrayIndexing	cameras [ 0 ]
>5403	PrimaryExpression	0
>5404	Identifier	cameras
>5405	ExpressionStatement	 
>5406	AssignmentExpr	cameras [ 0 ] . constrained [ 1 ] = false
>5407	Identifier	false
>5408	ArrayIndexing	cameras [ 0 ] . constrained [ 1 ]
>5409	PrimaryExpression	1
>5410	MemberAccess	cameras [ 0 ] . constrained
>5411	Identifier	constrained
>5412	ArrayIndexing	cameras [ 0 ]
>5413	PrimaryExpression	0
>5414	Identifier	cameras
>5415	ExpressionStatement	 
>5416	AssignmentExpr	cameras [ 0 ] . constrained [ 0 ] = false
>5417	Identifier	false
>5418	ArrayIndexing	cameras [ 0 ] . constrained [ 0 ]
>5419	PrimaryExpression	0
>5420	MemberAccess	cameras [ 0 ] . constrained
>5421	Identifier	constrained
>5422	ArrayIndexing	cameras [ 0 ]
>5423	PrimaryExpression	0
>5424	Identifier	cameras
>5425	IfStatement	if ( model != NULL )
>5426	CompoundStatement	 
>5427	ExpressionStatement	 
>5428	AssignmentExpr	model -> m_camera1 . t [ 2 ] = - model -> m_camera1 . t [ 2 ]
>5429	UnaryOp	- model -> m_camera1 . t [ 2 ]
>5430	ArrayIndexing	model -> m_camera1 . t [ 2 ]
>5431	PrimaryExpression	2
>5432	MemberAccess	model -> m_camera1 . t
>5433	Identifier	t
>5434	PtrMemberAccess	model -> m_camera1
>5435	Identifier	m_camera1
>5436	Identifier	model
>5437	UnaryOperator	-
>5438	ArrayIndexing	model -> m_camera1 . t [ 2 ]
>5439	PrimaryExpression	2
>5440	MemberAccess	model -> m_camera1 . t
>5441	Identifier	t
>5442	PtrMemberAccess	model -> m_camera1
>5443	Identifier	m_camera1
>5444	Identifier	model
>5445	ExpressionStatement	 
>5446	AssignmentExpr	model -> m_camera1 . R [ 7 ] = - model -> m_camera1 . R [ 7 ]
>5447	UnaryOp	- model -> m_camera1 . R [ 7 ]
>5448	ArrayIndexing	model -> m_camera1 . R [ 7 ]
>5449	PrimaryExpression	7
>5450	MemberAccess	model -> m_camera1 . R
>5451	Identifier	R
>5452	PtrMemberAccess	model -> m_camera1
>5453	Identifier	m_camera1
>5454	Identifier	model
>5455	UnaryOperator	-
>5456	ArrayIndexing	model -> m_camera1 . R [ 7 ]
>5457	PrimaryExpression	7
>5458	MemberAccess	model -> m_camera1 . R
>5459	Identifier	R
>5460	PtrMemberAccess	model -> m_camera1
>5461	Identifier	m_camera1
>5462	Identifier	model
>5463	ExpressionStatement	 
>5464	AssignmentExpr	model -> m_camera1 . R [ 6 ] = - model -> m_camera1 . R [ 6 ]
>5465	UnaryOp	- model -> m_camera1 . R [ 6 ]
>5466	ArrayIndexing	model -> m_camera1 . R [ 6 ]
>5467	PrimaryExpression	6
>5468	MemberAccess	model -> m_camera1 . R
>5469	Identifier	R
>5470	PtrMemberAccess	model -> m_camera1
>5471	Identifier	m_camera1
>5472	Identifier	model
>5473	UnaryOperator	-
>5474	ArrayIndexing	model -> m_camera1 . R [ 6 ]
>5475	PrimaryExpression	6
>5476	MemberAccess	model -> m_camera1 . R
>5477	Identifier	R
>5478	PtrMemberAccess	model -> m_camera1
>5479	Identifier	m_camera1
>5480	Identifier	model
>5481	ExpressionStatement	 
>5482	AssignmentExpr	model -> m_camera1 . R [ 5 ] = - model -> m_camera1 . R [ 5 ]
>5483	UnaryOp	- model -> m_camera1 . R [ 5 ]
>5484	ArrayIndexing	model -> m_camera1 . R [ 5 ]
>5485	PrimaryExpression	5
>5486	MemberAccess	model -> m_camera1 . R
>5487	Identifier	R
>5488	PtrMemberAccess	model -> m_camera1
>5489	Identifier	m_camera1
>5490	Identifier	model
>5491	UnaryOperator	-
>5492	ArrayIndexing	model -> m_camera1 . R [ 5 ]
>5493	PrimaryExpression	5
>5494	MemberAccess	model -> m_camera1 . R
>5495	Identifier	R
>5496	PtrMemberAccess	model -> m_camera1
>5497	Identifier	m_camera1
>5498	Identifier	model
>5499	ExpressionStatement	 
>5500	AssignmentExpr	model -> m_camera1 . R [ 2 ] = - model -> m_camera1 . R [ 2 ]
>5501	UnaryOp	- model -> m_camera1 . R [ 2 ]
>5502	ArrayIndexing	model -> m_camera1 . R [ 2 ]
>5503	PrimaryExpression	2
>5504	MemberAccess	model -> m_camera1 . R
>5505	Identifier	R
>5506	PtrMemberAccess	model -> m_camera1
>5507	Identifier	m_camera1
>5508	Identifier	model
>5509	UnaryOperator	-
>5510	ArrayIndexing	model -> m_camera1 . R [ 2 ]
>5511	PrimaryExpression	2
>5512	MemberAccess	model -> m_camera1 . R
>5513	Identifier	R
>5514	PtrMemberAccess	model -> m_camera1
>5515	Identifier	m_camera1
>5516	Identifier	model
>5517	ExpressionStatement	 
>5518	AssignmentExpr	model -> m_camera0 . t [ 2 ] = - model -> m_camera0 . t [ 2 ]
>5519	UnaryOp	- model -> m_camera0 . t [ 2 ]
>5520	ArrayIndexing	model -> m_camera0 . t [ 2 ]
>5521	PrimaryExpression	2
>5522	MemberAccess	model -> m_camera0 . t
>5523	Identifier	t
>5524	PtrMemberAccess	model -> m_camera0
>5525	Identifier	m_camera0
>5526	Identifier	model
>5527	UnaryOperator	-
>5528	ArrayIndexing	model -> m_camera0 . t [ 2 ]
>5529	PrimaryExpression	2
>5530	MemberAccess	model -> m_camera0 . t
>5531	Identifier	t
>5532	PtrMemberAccess	model -> m_camera0
>5533	Identifier	m_camera0
>5534	Identifier	model
>5535	ExpressionStatement	 
>5536	AssignmentExpr	model -> m_camera0 . R [ 7 ] = - model -> m_camera0 . R [ 7 ]
>5537	UnaryOp	- model -> m_camera0 . R [ 7 ]
>5538	ArrayIndexing	model -> m_camera0 . R [ 7 ]
>5539	PrimaryExpression	7
>5540	MemberAccess	model -> m_camera0 . R
>5541	Identifier	R
>5542	PtrMemberAccess	model -> m_camera0
>5543	Identifier	m_camera0
>5544	Identifier	model
>5545	UnaryOperator	-
>5546	ArrayIndexing	model -> m_camera0 . R [ 7 ]
>5547	PrimaryExpression	7
>5548	MemberAccess	model -> m_camera0 . R
>5549	Identifier	R
>5550	PtrMemberAccess	model -> m_camera0
>5551	Identifier	m_camera0
>5552	Identifier	model
>5553	ExpressionStatement	 
>5554	AssignmentExpr	model -> m_camera0 . R [ 6 ] = - model -> m_camera0 . R [ 6 ]
>5555	UnaryOp	- model -> m_camera0 . R [ 6 ]
>5556	ArrayIndexing	model -> m_camera0 . R [ 6 ]
>5557	PrimaryExpression	6
>5558	MemberAccess	model -> m_camera0 . R
>5559	Identifier	R
>5560	PtrMemberAccess	model -> m_camera0
>5561	Identifier	m_camera0
>5562	Identifier	model
>5563	UnaryOperator	-
>5564	ArrayIndexing	model -> m_camera0 . R [ 6 ]
>5565	PrimaryExpression	6
>5566	MemberAccess	model -> m_camera0 . R
>5567	Identifier	R
>5568	PtrMemberAccess	model -> m_camera0
>5569	Identifier	m_camera0
>5570	Identifier	model
>5571	ExpressionStatement	 
>5572	AssignmentExpr	model -> m_camera0 . R [ 5 ] = - model -> m_camera0 . R [ 5 ]
>5573	UnaryOp	- model -> m_camera0 . R [ 5 ]
>5574	ArrayIndexing	model -> m_camera0 . R [ 5 ]
>5575	PrimaryExpression	5
>5576	MemberAccess	model -> m_camera0 . R
>5577	Identifier	R
>5578	PtrMemberAccess	model -> m_camera0
>5579	Identifier	m_camera0
>5580	Identifier	model
>5581	UnaryOperator	-
>5582	ArrayIndexing	model -> m_camera0 . R [ 5 ]
>5583	PrimaryExpression	5
>5584	MemberAccess	model -> m_camera0 . R
>5585	Identifier	R
>5586	PtrMemberAccess	model -> m_camera0
>5587	Identifier	m_camera0
>5588	Identifier	model
>5589	ExpressionStatement	 
>5590	AssignmentExpr	model -> m_camera0 . R [ 2 ] = - model -> m_camera0 . R [ 2 ]
>5591	UnaryOp	- model -> m_camera0 . R [ 2 ]
>5592	ArrayIndexing	model -> m_camera0 . R [ 2 ]
>5593	PrimaryExpression	2
>5594	MemberAccess	model -> m_camera0 . R
>5595	Identifier	R
>5596	PtrMemberAccess	model -> m_camera0
>5597	Identifier	m_camera0
>5598	Identifier	model
>5599	UnaryOperator	-
>5600	ArrayIndexing	model -> m_camera0 . R [ 2 ]
>5601	PrimaryExpression	2
>5602	MemberAccess	model -> m_camera0 . R
>5603	Identifier	R
>5604	PtrMemberAccess	model -> m_camera0
>5605	Identifier	m_camera0
>5606	Identifier	model
>5607	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>5608	CompoundStatement	 
>5609	ExpressionStatement	 
>5610	AssignmentExpr	Vz ( model -> m_points [ i ] ) = Vz ( model -> m_points [ i ] )
>5611	CallExpression	Vz ( model -> m_points [ i ] )
>5612	ArgumentList	model -> m_points [ i ]
>5613	Argument	model -> m_points [ i ]
>5614	ArrayIndexing	model -> m_points [ i ]
>5615	Identifier	i
>5616	PtrMemberAccess	model -> m_points
>5617	Identifier	m_points
>5618	Identifier	model
>5619	Callee	Vz
>5620	Identifier	Vz
>5621	CallExpression	Vz ( model -> m_points [ i ] )
>5622	ArgumentList	model -> m_points [ i ]
>5623	Argument	model -> m_points [ i ]
>5624	ArrayIndexing	model -> m_points [ i ]
>5625	Identifier	i
>5626	PtrMemberAccess	model -> m_points
>5627	Identifier	m_points
>5628	Identifier	model
>5629	Callee	Vz
>5630	Identifier	Vz
>5631	IncDecOp	 
>5632	IncDec	++
>5633	Identifier	i
>5634	Condition	 
>5635	RelationalExpression	i < pt_count
>5636	Identifier	pt_count
>5637	Identifier	i
>5638	ForInit	 
>5639	IdentifierDeclStatement	int i = 0 ;
>5640	IdentifierDecl	i = 0
>5641	AssignmentExpr	i = 0
>5642	PrimaryExpression	0
>5643	Identifier	i
>5644	Identifier	i
>5645	IdentifierDeclType	int
>5646	ExpressionStatement	 
>5647	AssignmentExpr	model -> m_camera1 = cameras [ 1 ]
>5648	ArrayIndexing	cameras [ 1 ]
>5649	PrimaryExpression	1
>5650	Identifier	cameras
>5651	PtrMemberAccess	model -> m_camera1
>5652	Identifier	m_camera1
>5653	Identifier	model
>5654	ExpressionStatement	 
>5655	AssignmentExpr	model -> m_camera0 = cameras [ 0 ]
>5656	ArrayIndexing	cameras [ 0 ]
>5657	PrimaryExpression	0
>5658	Identifier	cameras
>5659	PtrMemberAccess	model -> m_camera0
>5660	Identifier	m_camera0
>5661	Identifier	model
>5662	ExpressionStatement	 
>5663	CallExpression	memcpy ( model -> m_points , points , sizeof ( v3_t ) * pt_count )
>5664	ArgumentList	model -> m_points
>5665	Argument	sizeof ( v3_t ) * pt_count
>5666	MultiplicativeExpression	sizeof ( v3_t ) * pt_count
>5667	Identifier	pt_count
>5668	SizeofExpr	sizeof ( v3_t )
>5669	SizeofOperand	v3_t
>5670	Sizeof	sizeof
>5671	Argument	points
>5672	Identifier	points
>5673	Argument	model -> m_points
>5674	PtrMemberAccess	model -> m_points
>5675	Identifier	m_points
>5676	Identifier	model
>5677	Callee	memcpy
>5678	Identifier	memcpy
>5679	ExpressionStatement	 
>5680	AssignmentExpr	model -> m_points = new v3_t [ pt_count ]
>5681	Identifier	pt_count
>5682	PtrMemberAccess	model -> m_points
>5683	Identifier	m_points
>5684	Identifier	model
>5685	ExpressionStatement	 
>5686	CallExpression	memcpy ( model -> m_C1 , C2 , sizeof ( double ) * 9 )
>5687	ArgumentList	model -> m_C1
>5688	Argument	sizeof ( double ) * 9
>5689	MultiplicativeExpression	sizeof ( double ) * 9
>5690	PrimaryExpression	9
>5691	SizeofExpr	sizeof ( double )
>5692	SizeofOperand	double
>5693	Sizeof	sizeof
>5694	Argument	C2
>5695	Identifier	C2
>5696	Argument	model -> m_C1
>5697	PtrMemberAccess	model -> m_C1
>5698	Identifier	m_C1
>5699	Identifier	model
>5700	Callee	memcpy
>5701	Identifier	memcpy
>5702	ExpressionStatement	 
>5703	AssignmentExpr	model -> m_error = error0
>5704	Identifier	error0
>5705	PtrMemberAccess	model -> m_error
>5706	Identifier	m_error
>5707	Identifier	model
>5708	Condition	 
>5709	EqualityExpression	model != NULL
>5710	Identifier	NULL
>5711	Identifier	model
>5712	ExpressionStatement	 
>5713	CallExpression	fflush ( stdout )
>5714	ArgumentList	stdout
>5715	Argument	stdout
>5716	Identifier	stdout
>5717	Callee	fflush
>5718	Identifier	fflush
>5719	ExpressionStatement	 
>5720	CallExpression	printf ( \"Singular values (C2)
>5721	ArgumentList	\"Singular values (C2)
>5722	Argument	S2 [ 2 ]
>5723	ArrayIndexing	S2 [ 2 ]
>5724	PrimaryExpression	2
>5725	Identifier	S2
>5726	Argument	S2 [ 1 ]
>5727	ArrayIndexing	S2 [ 1 ]
>5728	PrimaryExpression	1
>5729	Identifier	S2
>5730	Argument	S2 [ 0 ]
>5731	ArrayIndexing	S2 [ 0 ]
>5732	PrimaryExpression	0
>5733	Identifier	S2
>5734	Argument	\"Singular values (C2)
>5735	PrimaryExpression	\"Singular values (C2)
>5736	Callee	printf
>5737	Identifier	printf
>5738	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )
>5739	CompoundStatement	 
>5740	ForStatement	for ( int j = i + 1 ; j < 3 ; j ++ )
>5741	CompoundStatement	 
>5742	IfStatement	if ( fabs ( ij - ji ) > 1.0e-2 )
>5743	CompoundStatement	 
>5744	ExpressionStatement	 
>5745	AssignmentExpr	sym_error = true
>5746	Identifier	true
>5747	Identifier	sym_error
>5748	ExpressionStatement	 
>5749	CallExpression	printf ( \"C2
>5750	ArgumentList	\"C2
>5751	Argument	j
>5752	Identifier	j
>5753	Argument	i
>5754	Identifier	i
>5755	Argument	\"C2
>5756	PrimaryExpression	\"C2
>5757	Callee	printf
>5758	Identifier	printf
>5759	Condition	 
>5760	RelationalExpression	fabs ( ij - ji ) > 1.0e-2
>5761	PrimaryExpression	1.0e-2
>5762	CallExpression	fabs ( ij - ji )
>5763	ArgumentList	ij - ji
>5764	Argument	ij - ji
>5765	AdditiveExpression	ij - ji
>5766	Identifier	ji
>5767	Identifier	ij
>5768	Callee	fabs
>5769	Identifier	fabs
>5770	IdentifierDeclStatement	 
>5771	IdentifierDecl	ji = C2 [ j * 3 + i ]
>5772	AssignmentExpr	ji = C2 [ j * 3 + i ]
>5773	ArrayIndexing	C2 [ j * 3 + i ]
>5774	AdditiveExpression	j * 3 + i
>5775	Identifier	i
>5776	MultiplicativeExpression	j * 3
>5777	PrimaryExpression	3
>5778	Identifier	j
>5779	Identifier	C2
>5780	Identifier	ji
>5781	Identifier	ji
>5782	IdentifierDeclType	double
>5783	IdentifierDeclStatement	 
>5784	IdentifierDecl	ij = C2 [ i * 3 + j ]
>5785	AssignmentExpr	ij = C2 [ i * 3 + j ]
>5786	ArrayIndexing	C2 [ i * 3 + j ]
>5787	AdditiveExpression	i * 3 + j
>5788	Identifier	j
>5789	MultiplicativeExpression	i * 3
>5790	PrimaryExpression	3
>5791	Identifier	i
>5792	Identifier	C2
>5793	Identifier	ij
>5794	Identifier	ij
>5795	IdentifierDeclType	double
>5796	IncDecOp	 
>5797	IncDec	++
>5798	Identifier	j
>5799	Condition	 
>5800	RelationalExpression	j < 3
>5801	PrimaryExpression	3
>5802	Identifier	j
>5803	ForInit	 
>5804	IdentifierDeclStatement	int j = i + 1 ;
>5805	IdentifierDecl	j = i + 1
>5806	AssignmentExpr	j = i + 1
>5807	AdditiveExpression	i + 1
>5808	PrimaryExpression	1
>5809	Identifier	i
>5810	Identifier	j
>5811	Identifier	j
>5812	IdentifierDeclType	int
>5813	IncDecOp	 
>5814	IncDec	++
>5815	Identifier	i
>5816	Condition	 
>5817	RelationalExpression	i < 3
>5818	PrimaryExpression	3
>5819	Identifier	i
>5820	ForInit	 
>5821	IdentifierDeclStatement	int i = 0 ;
>5822	IdentifierDecl	i = 0
>5823	AssignmentExpr	i = 0
>5824	PrimaryExpression	0
>5825	Identifier	i
>5826	Identifier	i
>5827	IdentifierDeclType	int
>5828	IdentifierDeclStatement	 
>5829	IdentifierDecl	sym_error = false
>5830	AssignmentExpr	sym_error = false
>5831	Identifier	false
>5832	Identifier	false
>5833	Identifier	sym_error
>5834	IdentifierDeclType	bool
>5835	ExpressionStatement	 
>5836	CallExpression	dgesvd_driver ( 3 , 3 , C2 , U2 , S2 , VT2 )
>5837	ArgumentList	3
>5838	Argument	VT2
>5839	Identifier	VT2
>5840	Argument	S2
>5841	Identifier	S2
>5842	Argument	U2
>5843	Identifier	U2
>5844	Argument	C2
>5845	Identifier	C2
>5846	Argument	3
>5847	PrimaryExpression	3
>5848	Argument	3
>5849	PrimaryExpression	3
>5850	Callee	dgesvd_driver
>5851	Identifier	dgesvd_driver
>5852	IdentifierDeclStatement	 
>5853	IdentifierDecl	VT2 [ 9 ]
>5854	PrimaryExpression	9
>5855	Identifier	VT2
>5856	IdentifierDeclType	double [ 9 ]
>5857	IdentifierDecl	S2 [ 3 ]
>5858	PrimaryExpression	3
>5859	Identifier	S2
>5860	IdentifierDeclType	double [ 3 ]
>5861	IdentifierDecl	U2 [ 9 ]
>5862	PrimaryExpression	9
>5863	Identifier	U2
>5864	IdentifierDeclType	double [ 9 ]
>5865	ExpressionStatement	 
>5866	CallExpression	fflush ( stdout )
>5867	ArgumentList	stdout
>5868	Argument	stdout
>5869	Identifier	stdout
>5870	Callee	fflush
>5871	Identifier	fflush
>5872	ExpressionStatement	 
>5873	CallExpression	matrix_print ( 3 , 3 , C2 )
>5874	ArgumentList	3
>5875	Argument	C2
>5876	Identifier	C2
>5877	Argument	3
>5878	PrimaryExpression	3
>5879	Argument	3
>5880	PrimaryExpression	3
>5881	Callee	matrix_print
>5882	Identifier	matrix_print
>5883	ExpressionStatement	 
>5884	CallExpression	printf ( \"C2
>5885	ArgumentList	\"C2
>5886	Argument	\"C2
>5887	PrimaryExpression	\"C2
>5888	Callee	printf
>5889	Identifier	printf
>5890	IdentifierDeclStatement	 
>5891	IdentifierDecl	C2 [ 9 ] = { Sinv [ row1 + 0 ] , Sinv [ row1 + 1 ] , Sinv [ row1 + 2 ] , Sinv [ row2 + 0 ] , Sinv [ row2 + 1 ] , \
>5892	AssignmentExpr	C2 [ 9 ] = { Sinv [ row1 + 0 ] , Sinv [ row1 + 1 ] , Sinv [ row1 + 2 ] , Sinv [ row2 + 0 ] , Sinv [ row2 + \
>5893	InitializerList	Sinv [ row1 + 0 ]
>5894	ArrayIndexing	Sinv [ row3 + 2 ]
>5895	AdditiveExpression	row3 + 2
>5896	PrimaryExpression	2
>5897	Identifier	row3
>5898	Identifier	Sinv
>5899	ArrayIndexing	Sinv [ row3 + 1 ]
>5900	AdditiveExpression	row3 + 1
>5901	PrimaryExpression	1
>5902	Identifier	row3
>5903	Identifier	Sinv
>5904	ArrayIndexing	Sinv [ row3 + 0 ]
>5905	AdditiveExpression	row3 + 0
>5906	PrimaryExpression	0
>5907	Identifier	row3
>5908	Identifier	Sinv
>5909	ArrayIndexing	Sinv [ row2 + 2 ]
>5910	AdditiveExpression	row2 + 2
>5911	PrimaryExpression	2
>5912	Identifier	row2
>5913	Identifier	Sinv
>5914	ArrayIndexing	Sinv [ row2 + 1 ]
>5915	AdditiveExpression	row2 + 1
>5916	PrimaryExpression	1
>5917	Identifier	row2
>5918	Identifier	Sinv
>5919	ArrayIndexing	Sinv [ row2 + 0 ]
>5920	AdditiveExpression	row2 + 0
>5921	PrimaryExpression	0
>5922	Identifier	row2
>5923	Identifier	Sinv
>5924	ArrayIndexing	Sinv [ row1 + 2 ]
>5925	AdditiveExpression	row1 + 2
>5926	PrimaryExpression	2
>5927	Identifier	row1
>5928	Identifier	Sinv
>5929	ArrayIndexing	Sinv [ row1 + 1 ]
>5930	AdditiveExpression	row1 + 1
>5931	PrimaryExpression	1
>5932	Identifier	row1
>5933	Identifier	Sinv
>5934	ArrayIndexing	Sinv [ row1 + 0 ]
>5935	AdditiveExpression	row1 + 0
>5936	PrimaryExpression	0
>5937	Identifier	row1
>5938	Identifier	Sinv
>5939	Identifier	C2
>5940	PrimaryExpression	9
>5941	Identifier	C2
>5942	IdentifierDeclType	double [ 9 ]
>5943	IdentifierDeclStatement	 
>5944	IdentifierDecl	row3 = 2 * cnp * ( cnp + 2 ) + cnp
>5945	AssignmentExpr	row3 = 2 * cnp * ( cnp + 2 ) + cnp
>5946	AdditiveExpression	2 * cnp * ( cnp + 2 ) + cnp
>5947	Identifier	cnp
>5948	MultiplicativeExpression	2 * cnp * ( cnp + 2 )
>5949	MultiplicativeExpression	cnp * ( cnp + 2 )
>5950	AdditiveExpression	cnp + 2
>5951	PrimaryExpression	2
>5952	Identifier	cnp
>5953	Identifier	cnp
>5954	PrimaryExpression	2
>5955	Identifier	row3
>5956	Identifier	row3
>5957	IdentifierDeclType	int
>5958	IdentifierDeclStatement	 
>5959	IdentifierDecl	row2 = 2 * cnp * ( cnp + 1 ) + cnp
>5960	AssignmentExpr	row2 = 2 * cnp * ( cnp + 1 ) + cnp
>5961	AdditiveExpression	2 * cnp * ( cnp + 1 ) + cnp
>5962	Identifier	cnp
>5963	MultiplicativeExpression	2 * cnp * ( cnp + 1 )
>5964	MultiplicativeExpression	cnp * ( cnp + 1 )
>5965	AdditiveExpression	cnp + 1
>5966	PrimaryExpression	1
>5967	Identifier	cnp
>5968	Identifier	cnp
>5969	PrimaryExpression	2
>5970	Identifier	row2
>5971	Identifier	row2
>5972	IdentifierDeclType	int
>5973	IdentifierDeclStatement	 
>5974	IdentifierDecl	row1 = 2 * cnp * ( cnp + 0 ) + cnp
>5975	AssignmentExpr	row1 = 2 * cnp * ( cnp + 0 ) + cnp
>5976	AdditiveExpression	2 * cnp * ( cnp + 0 ) + cnp
>5977	Identifier	cnp
>5978	MultiplicativeExpression	2 * cnp * ( cnp + 0 )
>5979	MultiplicativeExpression	cnp * ( cnp + 0 )
>5980	AdditiveExpression	cnp + 0
>5981	PrimaryExpression	0
>5982	Identifier	cnp
>5983	Identifier	cnp
>5984	PrimaryExpression	2
>5985	Identifier	row1
>5986	Identifier	row1
>5987	IdentifierDeclType	int
>5988	ExpressionStatement	 
>5989	CallExpression	matrix_invert ( 2 * cnp , S , Sinv )
>5990	ArgumentList	2 * cnp
>5991	Argument	Sinv
>5992	Identifier	Sinv
>5993	Argument	S
>5994	Identifier	S
>5995	Argument	2 * cnp
>5996	MultiplicativeExpression	2 * cnp
>5997	Identifier	cnp
>5998	PrimaryExpression	2
>5999	Callee	matrix_invert
>6000	Identifier	matrix_invert
>6001	IdentifierDeclStatement	 
>6002	IdentifierDecl	* Sinv = new double [ 4 * cnp * cnp ]
>6003	AssignmentExpr	* Sinv = new double [ 4 * cnp * cnp ]
>6004	MultiplicativeExpression	4 * cnp * cnp
>6005	MultiplicativeExpression	cnp * cnp
>6006	Identifier	cnp
>6007	Identifier	cnp
>6008	PrimaryExpression	4
>6009	Identifier	Sinv
>6010	Identifier	Sinv
>6011	IdentifierDeclType	double *
>6012	ForStatement	for ( int i = 0 ; i < 2 * cnp ; i ++ )
>6013	CompoundStatement	 
>6014	ExpressionStatement	 
>6015	CallExpression	printf ( \"  [%02d] %0.3e\n\" , i , Sfull [ i ] )
>6016	ArgumentList	\"  [%02d] %0.3e\n\"
>6017	Argument	Sfull [ i ]
>6018	ArrayIndexing	Sfull [ i ]
>6019	Identifier	i
>6020	Identifier	Sfull
>6021	Argument	i
>6022	Identifier	i
>6023	Argument	\"  [%02d] %0.3e\n\"
>6024	PrimaryExpression	\"  [%02d] %0.3e\n\"
>6025	Callee	printf
>6026	Identifier	printf
>6027	IncDecOp	 
>6028	IncDec	++
>6029	Identifier	i
>6030	Condition	 
>6031	RelationalExpression	i < 2 * cnp
>6032	MultiplicativeExpression	2 * cnp
>6033	Identifier	cnp
>6034	PrimaryExpression	2
>6035	Identifier	i
>6036	ForInit	 
>6037	IdentifierDeclStatement	int i = 0 ;
>6038	IdentifierDecl	i = 0
>6039	AssignmentExpr	i = 0
>6040	PrimaryExpression	0
>6041	Identifier	i
>6042	Identifier	i
>6043	IdentifierDeclType	int
>6044	ExpressionStatement	 
>6045	CallExpression	printf ( \"S-values (full)
>6046	ArgumentList	\"S-values (full)
>6047	Argument	\"S-values (full)
>6048	PrimaryExpression	\"S-values (full)
>6049	Callee	printf
>6050	Identifier	printf
>6051	ExpressionStatement	 
>6052	CallExpression	dgesvd_driver ( 2 * cnp , 2 * cnp , S , Ufull , Sfull , VTfull )
>6053	ArgumentList	2 * cnp
>6054	Argument	VTfull
>6055	Identifier	VTfull
>6056	Argument	Sfull
>6057	Identifier	Sfull
>6058	Argument	Ufull
>6059	Identifier	Ufull
>6060	Argument	S
>6061	Identifier	S
>6062	Argument	2 * cnp
>6063	MultiplicativeExpression	2 * cnp
>6064	Identifier	cnp
>6065	PrimaryExpression	2
>6066	Argument	2 * cnp
>6067	MultiplicativeExpression	2 * cnp
>6068	Identifier	cnp
>6069	PrimaryExpression	2
>6070	Callee	dgesvd_driver
>6071	Identifier	dgesvd_driver
>6072	IdentifierDeclStatement	 
>6073	IdentifierDecl	* VTfull = new double [ 4 * cnp * cnp ]
>6074	AssignmentExpr	* VTfull = new double [ 4 * cnp * cnp ]
>6075	MultiplicativeExpression	4 * cnp * cnp
>6076	MultiplicativeExpression	cnp * cnp
>6077	Identifier	cnp
>6078	Identifier	cnp
>6079	PrimaryExpression	4
>6080	Identifier	VTfull
>6081	Identifier	VTfull
>6082	IdentifierDeclType	double *
>6083	IdentifierDeclStatement	 
>6084	IdentifierDecl	* Sfull = new double [ 2 * cnp ]
>6085	AssignmentExpr	* Sfull = new double [ 2 * cnp ]
>6086	MultiplicativeExpression	2 * cnp
>6087	Identifier	cnp
>6088	PrimaryExpression	2
>6089	Identifier	Sfull
>6090	Identifier	Sfull
>6091	IdentifierDeclType	double *
>6092	IdentifierDeclStatement	 
>6093	IdentifierDecl	* Ufull = new double [ 4 * cnp * cnp ]
>6094	AssignmentExpr	* Ufull = new double [ 4 * cnp * cnp ]
>6095	MultiplicativeExpression	4 * cnp * cnp
>6096	MultiplicativeExpression	cnp * cnp
>6097	Identifier	cnp
>6098	Identifier	cnp
>6099	PrimaryExpression	4
>6100	Identifier	Ufull
>6101	Identifier	Ufull
>6102	IdentifierDeclType	double *
>6103	ExpressionStatement	 
>6104	AssignmentExpr	S [ 135 ] += dz * dz
>6105	MultiplicativeExpression	dz * dz
>6106	Identifier	dz
>6107	Identifier	dz
>6108	ArrayIndexing	S [ 135 ]
>6109	PrimaryExpression	135
>6110	Identifier	S
>6111	ExpressionStatement	 
>6112	AssignmentExpr	S [ 134 ] += dy * dz
>6113	MultiplicativeExpression	dy * dz
>6114	Identifier	dz
>6115	Identifier	dy
>6116	ArrayIndexing	S [ 134 ]
>6117	PrimaryExpression	134
>6118	Identifier	S
>6119	ExpressionStatement	 
>6120	AssignmentExpr	S [ 133 ] += dx * dz
>6121	MultiplicativeExpression	dx * dz
>6122	Identifier	dz
>6123	Identifier	dx
>6124	ArrayIndexing	S [ 133 ]
>6125	PrimaryExpression	133
>6126	Identifier	S
>6127	ExpressionStatement	 
>6128	AssignmentExpr	S [ 121 ] += dy * dz
>6129	MultiplicativeExpression	dy * dz
>6130	Identifier	dz
>6131	Identifier	dy
>6132	ArrayIndexing	S [ 121 ]
>6133	PrimaryExpression	121
>6134	Identifier	S
>6135	ExpressionStatement	 
>6136	AssignmentExpr	S [ 120 ] += dy * dy
>6137	MultiplicativeExpression	dy * dy
>6138	Identifier	dy
>6139	Identifier	dy
>6140	ArrayIndexing	S [ 120 ]
>6141	PrimaryExpression	120
>6142	Identifier	S
>6143	ExpressionStatement	 
>6144	AssignmentExpr	S [ 119 ] += dx * dy
>6145	MultiplicativeExpression	dx * dy
>6146	Identifier	dy
>6147	Identifier	dx
>6148	ArrayIndexing	S [ 119 ]
>6149	PrimaryExpression	119
>6150	Identifier	S
>6151	ExpressionStatement	 
>6152	AssignmentExpr	S [ 107 ] += dx * dz
>6153	MultiplicativeExpression	dx * dz
>6154	Identifier	dz
>6155	Identifier	dx
>6156	ArrayIndexing	S [ 107 ]
>6157	PrimaryExpression	107
>6158	Identifier	S
>6159	ExpressionStatement	 
>6160	AssignmentExpr	S [ 106 ] += dx * dy
>6161	MultiplicativeExpression	dx * dy
>6162	Identifier	dy
>6163	Identifier	dx
>6164	ArrayIndexing	S [ 106 ]
>6165	PrimaryExpression	106
>6166	Identifier	S
>6167	ExpressionStatement	 
>6168	AssignmentExpr	S [ 105 ] += dx * dx
>6169	MultiplicativeExpression	dx * dx
>6170	Identifier	dx
>6171	Identifier	dx
>6172	ArrayIndexing	S [ 105 ]
>6173	PrimaryExpression	105
>6174	Identifier	S
>6175	IdentifierDeclStatement	 
>6176	IdentifierDecl	dz = 1.0e4 * 2.0 * eye2 [ 2 ]
>6177	AssignmentExpr	dz = 1.0e4 * 2.0 * eye2 [ 2 ]
>6178	MultiplicativeExpression	1.0e4 * 2.0 * eye2 [ 2 ]
>6179	MultiplicativeExpression	2.0 * eye2 [ 2 ]
>6180	ArrayIndexing	eye2 [ 2 ]
>6181	PrimaryExpression	2
>6182	Identifier	eye2
>6183	PrimaryExpression	2.0
>6184	PrimaryExpression	1.0e4
>6185	Identifier	dz
>6186	Identifier	dz
>6187	IdentifierDeclType	double
>6188	IdentifierDeclStatement	 
>6189	IdentifierDecl	dy = 1.0e4 * 2.0 * eye2 [ 1 ]
>6190	AssignmentExpr	dy = 1.0e4 * 2.0 * eye2 [ 1 ]
>6191	MultiplicativeExpression	1.0e4 * 2.0 * eye2 [ 1 ]
>6192	MultiplicativeExpression	2.0 * eye2 [ 1 ]
>6193	ArrayIndexing	eye2 [ 1 ]
>6194	PrimaryExpression	1
>6195	Identifier	eye2
>6196	PrimaryExpression	2.0
>6197	PrimaryExpression	1.0e4
>6198	Identifier	dy
>6199	Identifier	dy
>6200	IdentifierDeclType	double
>6201	IdentifierDeclStatement	 
>6202	IdentifierDecl	dx = 1.0e4 * 2.0 * eye2 [ 0 ]
>6203	AssignmentExpr	dx = 1.0e4 * 2.0 * eye2 [ 0 ]
>6204	MultiplicativeExpression	1.0e4 * 2.0 * eye2 [ 0 ]
>6205	MultiplicativeExpression	2.0 * eye2 [ 0 ]
>6206	ArrayIndexing	eye2 [ 0 ]
>6207	PrimaryExpression	0
>6208	Identifier	eye2
>6209	PrimaryExpression	2.0
>6210	PrimaryExpression	1.0e4
>6211	Identifier	dx
>6212	Identifier	dx
>6213	IdentifierDeclType	double
>6214	ExpressionStatement	 
>6215	CallExpression	memcpy ( eye2 , cameras [ 1 ] . t , sizeof ( double ) * 3 )
>6216	ArgumentList	eye2
>6217	Argument	sizeof ( double ) * 3
>6218	MultiplicativeExpression	sizeof ( double ) * 3
>6219	PrimaryExpression	3
>6220	SizeofExpr	sizeof ( double )
>6221	SizeofOperand	double
>6222	Sizeof	sizeof
>6223	Argument	cameras [ 1 ] . t
>6224	MemberAccess	cameras [ 1 ] . t
>6225	Identifier	t
>6226	ArrayIndexing	cameras [ 1 ]
>6227	PrimaryExpression	1
>6228	Identifier	cameras
>6229	Argument	eye2
>6230	Identifier	eye2
>6231	Callee	memcpy
>6232	Identifier	memcpy
>6233	ExpressionStatement	 
>6234	CallExpression	matrix_diff ( 2 * cnp , 2 * cnp , 2 * cnp , 2 * cnp , Uf , WViWT , Stest )
>6235	ArgumentList	2 * cnp
>6236	Argument	Stest
>6237	Identifier	Stest
>6238	Argument	WViWT
>6239	Identifier	WViWT
>6240	Argument	Uf
>6241	Identifier	Uf
>6242	Argument	2 * cnp
>6243	MultiplicativeExpression	2 * cnp
>6244	Identifier	cnp
>6245	PrimaryExpression	2
>6246	Argument	2 * cnp
>6247	MultiplicativeExpression	2 * cnp
>6248	Identifier	cnp
>6249	PrimaryExpression	2
>6250	Argument	2 * cnp
>6251	MultiplicativeExpression	2 * cnp
>6252	Identifier	cnp
>6253	PrimaryExpression	2
>6254	Argument	2 * cnp
>6255	MultiplicativeExpression	2 * cnp
>6256	Identifier	cnp
>6257	PrimaryExpression	2
>6258	Callee	matrix_diff
>6259	Identifier	matrix_diff
>6260	IdentifierDeclStatement	 
>6261	IdentifierDecl	* Stest = new double [ 4 * cnp * cnp ]
>6262	AssignmentExpr	* Stest = new double [ 4 * cnp * cnp ]
>6263	MultiplicativeExpression	4 * cnp * cnp
>6264	MultiplicativeExpression	cnp * cnp
>6265	Identifier	cnp
>6266	Identifier	cnp
>6267	PrimaryExpression	4
>6268	Identifier	Stest
>6269	Identifier	Stest
>6270	IdentifierDeclType	double *
>6271	ExpressionStatement	 
>6272	CallExpression	matrix_transpose_product2 ( 2 * cnp , 3 * pt_count , 2 * cnp , 3 * pt_count , Y , W , WViWT )
>6273	ArgumentList	2 * cnp
>6274	Argument	WViWT
>6275	Identifier	WViWT
>6276	Argument	W
>6277	Identifier	W
>6278	Argument	Y
>6279	Identifier	Y
>6280	Argument	3 * pt_count
>6281	MultiplicativeExpression	3 * pt_count
>6282	Identifier	pt_count
>6283	PrimaryExpression	3
>6284	Argument	2 * cnp
>6285	MultiplicativeExpression	2 * cnp
>6286	Identifier	cnp
>6287	PrimaryExpression	2
>6288	Argument	3 * pt_count
>6289	MultiplicativeExpression	3 * pt_count
>6290	Identifier	pt_count
>6291	PrimaryExpression	3
>6292	Argument	2 * cnp
>6293	MultiplicativeExpression	2 * cnp
>6294	Identifier	cnp
>6295	PrimaryExpression	2
>6296	Callee	matrix_transpose_product2
>6297	Identifier	matrix_transpose_product2
>6298	IdentifierDeclStatement	 
>6299	IdentifierDecl	* WViWT = new double [ 4 * cnp * cnp ]
>6300	AssignmentExpr	* WViWT = new double [ 4 * cnp * cnp ]
>6301	MultiplicativeExpression	4 * cnp * cnp
>6302	MultiplicativeExpression	cnp * cnp
>6303	Identifier	cnp
>6304	Identifier	cnp
>6305	PrimaryExpression	4
>6306	Identifier	WViWT
>6307	Identifier	WViWT
>6308	IdentifierDeclType	double *
>6309	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>6310	CompoundStatement	 
>6311	ExpressionStatement	 
>6312	CallExpression	memcpy ( Vinv + ( 3 * i + 2 ) * 3 * pt_count + 3 * i , Vsubinv + 6 , sizeof ( double ) * 3 )
>6313	ArgumentList	Vinv + ( 3 * i + 2 ) * 3 * pt_count + 3 * i
>6314	Argument	sizeof ( double ) * 3
>6315	MultiplicativeExpression	sizeof ( double ) * 3
>6316	PrimaryExpression	3
>6317	SizeofExpr	sizeof ( double )
>6318	SizeofOperand	double
>6319	Sizeof	sizeof
>6320	Argument	Vsubinv + 6
>6321	AdditiveExpression	Vsubinv + 6
>6322	PrimaryExpression	6
>6323	Identifier	Vsubinv
>6324	Argument	Vinv + ( 3 * i + 2 ) * 3 * pt_count + 3 * i
>6325	AdditiveExpression	Vinv + ( 3 * i + 2 ) * 3 * pt_count + 3 * i
>6326	AdditiveExpression	( 3 * i + 2 ) * 3 * pt_count + 3 * i
>6327	MultiplicativeExpression	3 * i
>6328	Identifier	i
>6329	PrimaryExpression	3
>6330	MultiplicativeExpression	( 3 * i + 2 ) * 3 * pt_count
>6331	MultiplicativeExpression	3 * pt_count
>6332	Identifier	pt_count
>6333	PrimaryExpression	3
>6334	AdditiveExpression	3 * i + 2
>6335	PrimaryExpression	2
>6336	MultiplicativeExpression	3 * i
>6337	Identifier	i
>6338	PrimaryExpression	3
>6339	Identifier	Vinv
>6340	Callee	memcpy
>6341	Identifier	memcpy
>6342	ExpressionStatement	 
>6343	CallExpression	memcpy ( Vinv + ( 3 * i + 1 ) * 3 * pt_count + 3 * i , Vsubinv + 3 , sizeof ( double ) * 3 )
>6344	ArgumentList	Vinv + ( 3 * i + 1 ) * 3 * pt_count + 3 * i
>6345	Argument	sizeof ( double ) * 3
>6346	MultiplicativeExpression	sizeof ( double ) * 3
>6347	PrimaryExpression	3
>6348	SizeofExpr	sizeof ( double )
>6349	SizeofOperand	double
>6350	Sizeof	sizeof
>6351	Argument	Vsubinv + 3
>6352	AdditiveExpression	Vsubinv + 3
>6353	PrimaryExpression	3
>6354	Identifier	Vsubinv
>6355	Argument	Vinv + ( 3 * i + 1 ) * 3 * pt_count + 3 * i
>6356	AdditiveExpression	Vinv + ( 3 * i + 1 ) * 3 * pt_count + 3 * i
>6357	AdditiveExpression	( 3 * i + 1 ) * 3 * pt_count + 3 * i
>6358	MultiplicativeExpression	3 * i
>6359	Identifier	i
>6360	PrimaryExpression	3
>6361	MultiplicativeExpression	( 3 * i + 1 ) * 3 * pt_count
>6362	MultiplicativeExpression	3 * pt_count
>6363	Identifier	pt_count
>6364	PrimaryExpression	3
>6365	AdditiveExpression	3 * i + 1
>6366	PrimaryExpression	1
>6367	MultiplicativeExpression	3 * i
>6368	Identifier	i
>6369	PrimaryExpression	3
>6370	Identifier	Vinv
>6371	Callee	memcpy
>6372	Identifier	memcpy
>6373	ExpressionStatement	 
>6374	CallExpression	memcpy ( Vinv + ( 3 * i + 0 ) * 3 * pt_count + 3 * i , Vsubinv + 0 , sizeof ( double ) * 3 )
>6375	ArgumentList	Vinv + ( 3 * i + 0 ) * 3 * pt_count + 3 * i
>6376	Argument	sizeof ( double ) * 3
>6377	MultiplicativeExpression	sizeof ( double ) * 3
>6378	PrimaryExpression	3
>6379	SizeofExpr	sizeof ( double )
>6380	SizeofOperand	double
>6381	Sizeof	sizeof
>6382	Argument	Vsubinv + 0
>6383	AdditiveExpression	Vsubinv + 0
>6384	PrimaryExpression	0
>6385	Identifier	Vsubinv
>6386	Argument	Vinv + ( 3 * i + 0 ) * 3 * pt_count + 3 * i
>6387	AdditiveExpression	Vinv + ( 3 * i + 0 ) * 3 * pt_count + 3 * i
>6388	AdditiveExpression	( 3 * i + 0 ) * 3 * pt_count + 3 * i
>6389	MultiplicativeExpression	3 * i
>6390	Identifier	i
>6391	PrimaryExpression	3
>6392	MultiplicativeExpression	( 3 * i + 0 ) * 3 * pt_count
>6393	MultiplicativeExpression	3 * pt_count
>6394	Identifier	pt_count
>6395	PrimaryExpression	3
>6396	AdditiveExpression	3 * i + 0
>6397	PrimaryExpression	0
>6398	MultiplicativeExpression	3 * i
>6399	Identifier	i
>6400	PrimaryExpression	3
>6401	Identifier	Vinv
>6402	Callee	memcpy
>6403	Identifier	memcpy
>6404	ExpressionStatement	 
>6405	CallExpression	matrix_invert ( 3 , V + 9 * i , Vsubinv )
>6406	ArgumentList	3
>6407	Argument	Vsubinv
>6408	Identifier	Vsubinv
>6409	Argument	V + 9 * i
>6410	AdditiveExpression	V + 9 * i
>6411	MultiplicativeExpression	9 * i
>6412	Identifier	i
>6413	PrimaryExpression	9
>6414	Identifier	V
>6415	Argument	3
>6416	PrimaryExpression	3
>6417	Callee	matrix_invert
>6418	Identifier	matrix_invert
>6419	IdentifierDeclStatement	 
>6420	IdentifierDecl	Vsubinv [ 9 ]
>6421	PrimaryExpression	9
>6422	Identifier	Vsubinv
>6423	IdentifierDeclType	double [ 9 ]
>6424	IncDecOp	 
>6425	IncDec	++
>6426	Identifier	i
>6427	Condition	 
>6428	RelationalExpression	i < pt_count
>6429	Identifier	pt_count
>6430	Identifier	i
>6431	ForInit	 
>6432	IdentifierDeclStatement	int i = 0 ;
>6433	IdentifierDecl	i = 0
>6434	AssignmentExpr	i = 0
>6435	PrimaryExpression	0
>6436	Identifier	i
>6437	Identifier	i
>6438	IdentifierDeclType	int
>6439	ForStatement	for ( int i = 0 ; i < cnp ; i ++ )
>6440	CompoundStatement	 
>6441	ExpressionStatement	 
>6442	CallExpression	memcpy ( Uf + ( i + cnp ) * 2 * cnp + cnp , U + ( i + cnp ) * cnp , cnp * sizeof ( double ) )
>6443	ArgumentList	Uf + ( i + cnp ) * 2 * cnp + cnp
>6444	Argument	cnp * sizeof ( double )
>6445	MultiplicativeExpression	cnp * sizeof ( double )
>6446	SizeofExpr	sizeof ( double )
>6447	SizeofOperand	double
>6448	Sizeof	sizeof
>6449	Identifier	cnp
>6450	Argument	U + ( i + cnp ) * cnp
>6451	AdditiveExpression	U + ( i + cnp ) * cnp
>6452	MultiplicativeExpression	( i + cnp ) * cnp
>6453	Identifier	cnp
>6454	AdditiveExpression	i + cnp
>6455	Identifier	cnp
>6456	Identifier	i
>6457	Identifier	U
>6458	Argument	Uf + ( i + cnp ) * 2 * cnp + cnp
>6459	AdditiveExpression	Uf + ( i + cnp ) * 2 * cnp + cnp
>6460	AdditiveExpression	( i + cnp ) * 2 * cnp + cnp
>6461	Identifier	cnp
>6462	MultiplicativeExpression	( i + cnp ) * 2 * cnp
>6463	MultiplicativeExpression	2 * cnp
>6464	Identifier	cnp
>6465	PrimaryExpression	2
>6466	AdditiveExpression	i + cnp
>6467	Identifier	cnp
>6468	Identifier	i
>6469	Identifier	Uf
>6470	Callee	memcpy
>6471	Identifier	memcpy
>6472	ExpressionStatement	 
>6473	CallExpression	memcpy ( Uf + i * 2 * cnp , U + i * cnp , cnp * sizeof ( double ) )
>6474	ArgumentList	Uf + i * 2 * cnp
>6475	Argument	cnp * sizeof ( double )
>6476	MultiplicativeExpression	cnp * sizeof ( double )
>6477	SizeofExpr	sizeof ( double )
>6478	SizeofOperand	double
>6479	Sizeof	sizeof
>6480	Identifier	cnp
>6481	Argument	U + i * cnp
>6482	AdditiveExpression	U + i * cnp
>6483	MultiplicativeExpression	i * cnp
>6484	Identifier	cnp
>6485	Identifier	i
>6486	Identifier	U
>6487	Argument	Uf + i * 2 * cnp
>6488	AdditiveExpression	Uf + i * 2 * cnp
>6489	MultiplicativeExpression	i * 2 * cnp
>6490	MultiplicativeExpression	2 * cnp
>6491	Identifier	cnp
>6492	PrimaryExpression	2
>6493	Identifier	i
>6494	Identifier	Uf
>6495	Callee	memcpy
>6496	Identifier	memcpy
>6497	IncDecOp	 
>6498	IncDec	++
>6499	Identifier	i
>6500	Condition	 
>6501	RelationalExpression	i < cnp
>6502	Identifier	cnp
>6503	Identifier	i
>6504	ForInit	 
>6505	IdentifierDeclStatement	int i = 0 ;
>6506	IdentifierDecl	i = 0
>6507	AssignmentExpr	i = 0
>6508	PrimaryExpression	0
>6509	Identifier	i
>6510	Identifier	i
>6511	IdentifierDeclType	int
>6512	ExpressionStatement	 
>6513	CallExpression	memset ( Uf , 0 , sizeof ( double ) * 4 * cnp * cnp )
>6514	ArgumentList	Uf
>6515	Argument	sizeof ( double ) * 4 * cnp * cnp
>6516	MultiplicativeExpression	sizeof ( double ) * 4 * cnp * cnp
>6517	MultiplicativeExpression	4 * cnp * cnp
>6518	MultiplicativeExpression	cnp * cnp
>6519	Identifier	cnp
>6520	Identifier	cnp
>6521	PrimaryExpression	4
>6522	SizeofExpr	sizeof ( double )
>6523	SizeofOperand	double
>6524	Sizeof	sizeof
>6525	Argument	0
>6526	PrimaryExpression	0
>6527	Argument	Uf
>6528	Identifier	Uf
>6529	Callee	memset
>6530	Identifier	memset
>6531	ExpressionStatement	 
>6532	AssignmentExpr	error0 = RunSFM_SBA ( pt_count , 2 , 0 , false , cameras , points , added_order , NULL , pt_views , TERM_\
>6533	CallExpression	RunSFM_SBA ( pt_count , 2 , 0 , false , cameras , points , added_order , NULL , pt_views , TERM_THRESH , S , U , \
>6534	ArgumentList	pt_count
>6535	Argument	false
>6536	Identifier	false
>6537	Argument	W
>6538	Identifier	W
>6539	Argument	V
>6540	Identifier	V
>6541	Argument	U
>6542	Identifier	U
>6543	Argument	S
>6544	Identifier	S
>6545	Argument	TERM_THRESH
>6546	Identifier	TERM_THRESH
>6547	Argument	pt_views
>6548	Identifier	pt_views
>6549	Argument	NULL
>6550	Identifier	NULL
>6551	Argument	added_order
>6552	Identifier	added_order
>6553	Argument	points
>6554	Identifier	points
>6555	Argument	cameras
>6556	Identifier	cameras
>6557	Argument	false
>6558	Identifier	false
>6559	Argument	0
>6560	PrimaryExpression	0
>6561	Argument	2
>6562	PrimaryExpression	2
>6563	Argument	pt_count
>6564	Identifier	pt_count
>6565	Callee	RunSFM_SBA
>6566	Identifier	RunSFM_SBA
>6567	Identifier	error0
>6568	ExpressionStatement	 
>6569	AssignmentExpr	cameras [ 1 ] . weights [ 8 ] = 1.0e6
>6570	PrimaryExpression	1.0e6
>6571	ArrayIndexing	cameras [ 1 ] . weights [ 8 ]
>6572	PrimaryExpression	8
>6573	MemberAccess	cameras [ 1 ] . weights
>6574	Identifier	weights
>6575	ArrayIndexing	cameras [ 1 ]
>6576	PrimaryExpression	1
>6577	Identifier	cameras
>6578	ExpressionStatement	 
>6579	AssignmentExpr	cameras [ 1 ] . weights [ 7 ] = 1.0e6
>6580	PrimaryExpression	1.0e6
>6581	ArrayIndexing	cameras [ 1 ] . weights [ 7 ]
>6582	PrimaryExpression	7
>6583	MemberAccess	cameras [ 1 ] . weights
>6584	Identifier	weights
>6585	ArrayIndexing	cameras [ 1 ]
>6586	PrimaryExpression	1
>6587	Identifier	cameras
>6588	ExpressionStatement	 
>6589	AssignmentExpr	cameras [ 1 ] . constraints [ 8 ] = cameras [ 1 ] . k [ 1 ]
>6590	ArrayIndexing	cameras [ 1 ] . k [ 1 ]
>6591	PrimaryExpression	1
>6592	MemberAccess	cameras [ 1 ] . k
>6593	Identifier	k
>6594	ArrayIndexing	cameras [ 1 ]
>6595	PrimaryExpression	1
>6596	Identifier	cameras
>6597	ArrayIndexing	cameras [ 1 ] . constraints [ 8 ]
>6598	PrimaryExpression	8
>6599	MemberAccess	cameras [ 1 ] . constraints
>6600	Identifier	constraints
>6601	ArrayIndexing	cameras [ 1 ]
>6602	PrimaryExpression	1
>6603	Identifier	cameras
>6604	ExpressionStatement	 
>6605	AssignmentExpr	cameras [ 1 ] . constraints [ 7 ] = cameras [ 1 ] . k [ 0 ]
>6606	ArrayIndexing	cameras [ 1 ] . k [ 0 ]
>6607	PrimaryExpression	0
>6608	MemberAccess	cameras [ 1 ] . k
>6609	Identifier	k
>6610	ArrayIndexing	cameras [ 1 ]
>6611	PrimaryExpression	1
>6612	Identifier	cameras
>6613	ArrayIndexing	cameras [ 1 ] . constraints [ 7 ]
>6614	PrimaryExpression	7
>6615	MemberAccess	cameras [ 1 ] . constraints
>6616	Identifier	constraints
>6617	ArrayIndexing	cameras [ 1 ]
>6618	PrimaryExpression	1
>6619	Identifier	cameras
>6620	ExpressionStatement	 
>6621	AssignmentExpr	cameras [ 1 ] . weights [ 6 ] = 1.0e3
>6622	PrimaryExpression	1.0e3
>6623	ArrayIndexing	cameras [ 1 ] . weights [ 6 ]
>6624	PrimaryExpression	6
>6625	MemberAccess	cameras [ 1 ] . weights
>6626	Identifier	weights
>6627	ArrayIndexing	cameras [ 1 ]
>6628	PrimaryExpression	1
>6629	Identifier	cameras
>6630	ExpressionStatement	 
>6631	AssignmentExpr	cameras [ 1 ] . constraints [ 6 ] = cameras [ 1 ] . f
>6632	MemberAccess	cameras [ 1 ] . f
>6633	Identifier	f
>6634	ArrayIndexing	cameras [ 1 ]
>6635	PrimaryExpression	1
>6636	Identifier	cameras
>6637	ArrayIndexing	cameras [ 1 ] . constraints [ 6 ]
>6638	PrimaryExpression	6
>6639	MemberAccess	cameras [ 1 ] . constraints
>6640	Identifier	constraints
>6641	ArrayIndexing	cameras [ 1 ]
>6642	PrimaryExpression	1
>6643	Identifier	cameras
>6644	ExpressionStatement	 
>6645	AssignmentExpr	cameras [ 1 ] . constrained [ 6 ] = true
>6646	Identifier	true
>6647	ArrayIndexing	cameras [ 1 ] . constrained [ 6 ]
>6648	PrimaryExpression	6
>6649	MemberAccess	cameras [ 1 ] . constrained
>6650	Identifier	constrained
>6651	ArrayIndexing	cameras [ 1 ]
>6652	PrimaryExpression	1
>6653	Identifier	cameras
>6654	ExpressionStatement	 
>6655	AssignmentExpr	cameras [ 0 ] . weights [ 8 ] = 1.0e6
>6656	PrimaryExpression	1.0e6
>6657	ArrayIndexing	cameras [ 0 ] . weights [ 8 ]
>6658	PrimaryExpression	8
>6659	MemberAccess	cameras [ 0 ] . weights
>6660	Identifier	weights
>6661	ArrayIndexing	cameras [ 0 ]
>6662	PrimaryExpression	0
>6663	Identifier	cameras
>6664	ExpressionStatement	 
>6665	AssignmentExpr	cameras [ 0 ] . weights [ 7 ] = 1.0e6
>6666	PrimaryExpression	1.0e6
>6667	ArrayIndexing	cameras [ 0 ] . weights [ 7 ]
>6668	PrimaryExpression	7
>6669	MemberAccess	cameras [ 0 ] . weights
>6670	Identifier	weights
>6671	ArrayIndexing	cameras [ 0 ]
>6672	PrimaryExpression	0
>6673	Identifier	cameras
>6674	ExpressionStatement	 
>6675	AssignmentExpr	cameras [ 0 ] . constraints [ 8 ] = cameras [ 0 ] . k [ 1 ]
>6676	ArrayIndexing	cameras [ 0 ] . k [ 1 ]
>6677	PrimaryExpression	1
>6678	MemberAccess	cameras [ 0 ] . k
>6679	Identifier	k
>6680	ArrayIndexing	cameras [ 0 ]
>6681	PrimaryExpression	0
>6682	Identifier	cameras
>6683	ArrayIndexing	cameras [ 0 ] . constraints [ 8 ]
>6684	PrimaryExpression	8
>6685	MemberAccess	cameras [ 0 ] . constraints
>6686	Identifier	constraints
>6687	ArrayIndexing	cameras [ 0 ]
>6688	PrimaryExpression	0
>6689	Identifier	cameras
>6690	ExpressionStatement	 
>6691	AssignmentExpr	cameras [ 0 ] . constraints [ 7 ] = cameras [ 0 ] . k [ 0 ]
>6692	ArrayIndexing	cameras [ 0 ] . k [ 0 ]
>6693	PrimaryExpression	0
>6694	MemberAccess	cameras [ 0 ] . k
>6695	Identifier	k
>6696	ArrayIndexing	cameras [ 0 ]
>6697	PrimaryExpression	0
>6698	Identifier	cameras
>6699	ArrayIndexing	cameras [ 0 ] . constraints [ 7 ]
>6700	PrimaryExpression	7
>6701	MemberAccess	cameras [ 0 ] . constraints
>6702	Identifier	constraints
>6703	ArrayIndexing	cameras [ 0 ]
>6704	PrimaryExpression	0
>6705	Identifier	cameras
>6706	ExpressionStatement	 
>6707	AssignmentExpr	cameras [ 0 ] . weights [ 6 ] = 1.0e3
>6708	PrimaryExpression	1.0e3
>6709	ArrayIndexing	cameras [ 0 ] . weights [ 6 ]
>6710	PrimaryExpression	6
>6711	MemberAccess	cameras [ 0 ] . weights
>6712	Identifier	weights
>6713	ArrayIndexing	cameras [ 0 ]
>6714	PrimaryExpression	0
>6715	Identifier	cameras
>6716	ExpressionStatement	 
>6717	AssignmentExpr	cameras [ 0 ] . constraints [ 6 ] = cameras [ 0 ] . f
>6718	MemberAccess	cameras [ 0 ] . f
>6719	Identifier	f
>6720	ArrayIndexing	cameras [ 0 ]
>6721	PrimaryExpression	0
>6722	Identifier	cameras
>6723	ArrayIndexing	cameras [ 0 ] . constraints [ 6 ]
>6724	PrimaryExpression	6
>6725	MemberAccess	cameras [ 0 ] . constraints
>6726	Identifier	constraints
>6727	ArrayIndexing	cameras [ 0 ]
>6728	PrimaryExpression	0
>6729	Identifier	cameras
>6730	ExpressionStatement	 
>6731	AssignmentExpr	cameras [ 0 ] . constrained [ 6 ] = true
>6732	Identifier	true
>6733	ArrayIndexing	cameras [ 0 ] . constrained [ 6 ]
>6734	PrimaryExpression	6
>6735	MemberAccess	cameras [ 0 ] . constrained
>6736	Identifier	constrained
>6737	ArrayIndexing	cameras [ 0 ]
>6738	PrimaryExpression	0
>6739	Identifier	cameras
>6740	IdentifierDeclStatement	 
>6741	IdentifierDecl	* W = new double [ pt_count * 2 * 3 * cnp ]
>6742	AssignmentExpr	* W = new double [ pt_count * 2 * 3 * cnp ]
>6743	MultiplicativeExpression	pt_count * 2 * 3 * cnp
>6744	MultiplicativeExpression	2 * 3 * cnp
>6745	MultiplicativeExpression	3 * cnp
>6746	Identifier	cnp
>6747	PrimaryExpression	3
>6748	PrimaryExpression	2
>6749	Identifier	pt_count
>6750	Identifier	W
>6751	Identifier	W
>6752	IdentifierDeclType	double *
>6753	IdentifierDeclStatement	 
>6754	IdentifierDecl	* V = new double [ pt_count * 3 * 3 ]
>6755	AssignmentExpr	* V = new double [ pt_count * 3 * 3 ]
>6756	MultiplicativeExpression	pt_count * 3 * 3
>6757	MultiplicativeExpression	3 * 3
>6758	PrimaryExpression	3
>6759	PrimaryExpression	3
>6760	Identifier	pt_count
>6761	Identifier	V
>6762	Identifier	V
>6763	IdentifierDeclType	double *
>6764	IdentifierDeclStatement	 
>6765	IdentifierDecl	* Uf = new double [ 4 * cnp * cnp ]
>6766	AssignmentExpr	* Uf = new double [ 4 * cnp * cnp ]
>6767	MultiplicativeExpression	4 * cnp * cnp
>6768	MultiplicativeExpression	cnp * cnp
>6769	Identifier	cnp
>6770	Identifier	cnp
>6771	PrimaryExpression	4
>6772	Identifier	Uf
>6773	Identifier	Uf
>6774	IdentifierDeclType	double *
>6775	IdentifierDeclStatement	 
>6776	IdentifierDecl	* U = new double [ 2 * cnp * cnp ]
>6777	AssignmentExpr	* U = new double [ 2 * cnp * cnp ]
>6778	MultiplicativeExpression	2 * cnp * cnp
>6779	MultiplicativeExpression	cnp * cnp
>6780	Identifier	cnp
>6781	Identifier	cnp
>6782	PrimaryExpression	2
>6783	Identifier	U
>6784	Identifier	U
>6785	IdentifierDeclType	double *
>6786	IdentifierDeclStatement	 
>6787	IdentifierDecl	* S = new double [ 4 * cnp * cnp ]
>6788	AssignmentExpr	* S = new double [ 4 * cnp * cnp ]
>6789	MultiplicativeExpression	4 * cnp * cnp
>6790	MultiplicativeExpression	cnp * cnp
>6791	Identifier	cnp
>6792	Identifier	cnp
>6793	PrimaryExpression	4
>6794	Identifier	S
>6795	Identifier	S
>6796	IdentifierDeclType	double *
>6797	IdentifierDeclStatement	 
>6798	IdentifierDecl	cnp = m_estimate_distortion ? 9 
>6799	AssignmentExpr	cnp = m_estimate_distortion ? 9 
>6800	ConditionalExpression	m_estimate_distortion ? 9 
>6801	PrimaryExpression	7
>6802	PrimaryExpression	9
>6803	Condition	m_estimate_distortion
>6804	Identifier	m_estimate_distortion
>6805	Identifier	cnp
>6806	Identifier	cnp
>6807	IdentifierDeclType	int
>6808	IfStatement	if ( num_in_back > 0.5 * num_matches )
>6809	CompoundStatement	 
>6810	ReturnStatement	 
>6811	Identifier	false
>6812	ExpressionStatement	 
>6813	CallExpression	ClearKeys ( m_image_data [ i2 ] )
>6814	ArgumentList	m_image_data [ i2 ]
>6815	Argument	m_image_data [ i2 ]
>6816	ArrayIndexing	m_image_data [ i2 ]
>6817	Identifier	i2
>6818	Identifier	m_image_data
>6819	Callee	ClearKeys
>6820	Identifier	ClearKeys
>6821	ExpressionStatement	 
>6822	CallExpression	ClearKeys ( m_image_data [ i1 ] )
>6823	ArgumentList	m_image_data [ i1 ]
>6824	Argument	m_image_data [ i1 ]
>6825	ArrayIndexing	m_image_data [ i1 ]
>6826	Identifier	i1
>6827	Identifier	m_image_data
>6828	Callee	ClearKeys
>6829	Identifier	ClearKeys
>6830	ExpressionStatement	 
>6831	CallExpression	printf ( \"  Too many points in back (%d / %d), exiting!\n\" , num_in_back , num_matches )
>6832	ArgumentList	\"  Too many points in back (%d / %d), exiting!\n\"
>6833	Argument	num_matches
>6834	Identifier	num_matches
>6835	Argument	num_in_back
>6836	Identifier	num_in_back
>6837	Argument	\"  Too many points in back (%d / %d), exiting!\n\"
>6838	PrimaryExpression	\"  Too many points in back (%d / %d), exiting!\n\"
>6839	Callee	printf
>6840	Identifier	printf
>6841	Condition	 
>6842	RelationalExpression	num_in_back > 0.5 * num_matches
>6843	MultiplicativeExpression	0.5 * num_matches
>6844	Identifier	num_matches
>6845	PrimaryExpression	0.5
>6846	Identifier	num_in_back
>6847	ExpressionStatement	 
>6848	AssignmentExpr	angle_out = RAD2DEG ( angle_sum / count )
>6849	CallExpression	RAD2DEG ( angle_sum / count )
>6850	ArgumentList	angle_sum / count
>6851	Argument	angle_sum / count
>6852	MultiplicativeExpression	angle_sum / count
>6853	Identifier	count
>6854	Identifier	angle_sum
>6855	Callee	RAD2DEG
>6856	Identifier	RAD2DEG
>6857	Identifier	angle_out
>6858	ExpressionStatement	 
>6859	CallExpression	fflush ( stdout )
>6860	ArgumentList	stdout
>6861	Argument	stdout
>6862	Identifier	stdout
>6863	Callee	fflush
>6864	Identifier	fflush
>6865	ExpressionStatement	 
>6866	CallExpression	printf ( \"  Average angle [after BA]
>6867	ArgumentList	\"  Average angle [after BA]
>6868	Argument	RAD2DEG ( angle_sum / count )
>6869	CallExpression	RAD2DEG ( angle_sum / count )
>6870	ArgumentList	angle_sum / count
>6871	Argument	angle_sum / count
>6872	MultiplicativeExpression	angle_sum / count
>6873	Identifier	count
>6874	Identifier	angle_sum
>6875	Callee	RAD2DEG
>6876	Identifier	RAD2DEG
>6877	Argument	\"  Average angle [after BA]
>6878	PrimaryExpression	\"  Average angle [after BA]
>6879	Callee	printf
>6880	Identifier	printf
>6881	ForStatement	for ( unsigned int i = 0 ; i < num_matches ; i ++ )
>6882	CompoundStatement	 
>6883	ExpressionStatement	 
>6884	IncDecOp	count ++
>6885	IncDec	++
>6886	Identifier	count
>6887	ExpressionStatement	 
>6888	AssignmentExpr	angle_sum += angle
>6889	Identifier	angle
>6890	Identifier	angle_sum
>6891	IfStatement	if ( ! in_front )
>6892	CompoundStatement	 
>6893	ContinueStatement	 
>6894	ExpressionStatement	 
>6895	IncDecOp	num_in_back ++
>6896	IncDec	++
>6897	Identifier	num_in_back
>6898	Condition	 
>6899	UnaryOp	! in_front
>6900	Identifier	in_front
>6901	UnaryOperator	!
>6902	IfStatement	if ( error > 4.0 )
>6903	CompoundStatement	 
>6904	ContinueStatement	 
>6905	Condition	 
>6906	RelationalExpression	error > 4.0
>6907	PrimaryExpression	4.0
>6908	Identifier	error
>6909	ExpressionStatement	 
>6910	CallExpression	Triangulate ( p , q , cameras [ 0 ] , cameras [ 1 ] , error , in_front , angle , true )
>6911	ArgumentList	p
>6912	Argument	true
>6913	Identifier	true
>6914	Argument	angle
>6915	Identifier	angle
>6916	Argument	in_front
>6917	Identifier	in_front
>6918	Argument	error
>6919	Identifier	error
>6920	Argument	cameras [ 1 ]
>6921	ArrayIndexing	cameras [ 1 ]
>6922	PrimaryExpression	1
>6923	Identifier	cameras
>6924	Argument	cameras [ 0 ]
>6925	ArrayIndexing	cameras [ 0 ]
>6926	PrimaryExpression	0
>6927	Identifier	cameras
>6928	Argument	q
>6929	Identifier	q
>6930	Argument	p
>6931	Identifier	p
>6932	Callee	Triangulate
>6933	Identifier	Triangulate
>6934	IdentifierDeclStatement	 
>6935	IdentifierDecl	angle = 0.0
>6936	AssignmentExpr	angle = 0.0
>6937	PrimaryExpression	0.0
>6938	Identifier	angle
>6939	Identifier	angle
>6940	IdentifierDeclType	double
>6941	IdentifierDeclStatement	 
>6942	IdentifierDecl	in_front = true
>6943	AssignmentExpr	in_front = true
>6944	Identifier	true
>6945	Identifier	true
>6946	Identifier	in_front
>6947	IdentifierDeclType	bool
>6948	IdentifierDeclStatement	 
>6949	IdentifierDecl	q = v2_new ( x_proj2 , y_proj2 )
>6950	AssignmentExpr	q = v2_new ( x_proj2 , y_proj2 )
>6951	CallExpression	v2_new ( x_proj2 , y_proj2 )
>6952	ArgumentList	x_proj2
>6953	Argument	y_proj2
>6954	Identifier	y_proj2
>6955	Argument	x_proj2
>6956	Identifier	x_proj2
>6957	Callee	v2_new
>6958	Identifier	v2_new
>6959	Identifier	q
>6960	Identifier	q
>6961	IdentifierDeclType	v2_t
>6962	IdentifierDeclStatement	 
>6963	IdentifierDecl	p = v2_new ( x_proj1 , y_proj1 )
>6964	AssignmentExpr	p = v2_new ( x_proj1 , y_proj1 )
>6965	CallExpression	v2_new ( x_proj1 , y_proj1 )
>6966	ArgumentList	x_proj1
>6967	Argument	y_proj1
>6968	Identifier	y_proj1
>6969	Argument	x_proj1
>6970	Identifier	x_proj1
>6971	Callee	v2_new
>6972	Identifier	v2_new
>6973	Identifier	p
>6974	Identifier	p
>6975	IdentifierDeclType	v2_t
>6976	IdentifierDeclStatement	 
>6977	IdentifierDecl	error
>6978	Identifier	error
>6979	IdentifierDeclType	double
>6980	IfStatement	if ( m_optimize_for_fisheye )
>6981	CompoundStatement	 
>6982	ExpressionStatement	 
>6983	CallExpression	m_image_data [ i2 ] . UndistortPoint ( x_proj2 , y_proj2 , x_proj2 , y_proj2 )
>6984	ArgumentList	x_proj2
>6985	Argument	y_proj2
>6986	Identifier	y_proj2
>6987	Argument	x_proj2
>6988	Identifier	x_proj2
>6989	Argument	y_proj2
>6990	Identifier	y_proj2
>6991	Argument	x_proj2
>6992	Identifier	x_proj2
>6993	Callee	m_image_data [ i2 ] . UndistortPoint
>6994	MemberAccess	m_image_data [ i2 ] . UndistortPoint
>6995	Identifier	UndistortPoint
>6996	ArrayIndexing	m_image_data [ i2 ]
>6997	Identifier	i2
>6998	Identifier	m_image_data
>6999	ExpressionStatement	 
>7000	CallExpression	m_image_data [ i1 ] . UndistortPoint ( x_proj1 , y_proj1 , x_proj1 , y_proj1 )
>7001	ArgumentList	x_proj1
>7002	Argument	y_proj1
>7003	Identifier	y_proj1
>7004	Argument	x_proj1
>7005	Identifier	x_proj1
>7006	Argument	y_proj1
>7007	Identifier	y_proj1
>7008	Argument	x_proj1
>7009	Identifier	x_proj1
>7010	Callee	m_image_data [ i1 ] . UndistortPoint
>7011	MemberAccess	m_image_data [ i1 ] . UndistortPoint
>7012	Identifier	UndistortPoint
>7013	ArrayIndexing	m_image_data [ i1 ]
>7014	Identifier	i1
>7015	Identifier	m_image_data
>7016	Condition	 
>7017	Identifier	m_optimize_for_fisheye
>7018	IdentifierDeclStatement	 
>7019	IdentifierDecl	y_proj2 = GetKey ( i2 , key_idx2 ) . m_y
>7020	AssignmentExpr	y_proj2 = GetKey ( i2 , key_idx2 ) . m_y
>7021	MemberAccess	GetKey ( i2 , key_idx2 ) . m_y
>7022	Identifier	m_y
>7023	CallExpression	GetKey ( i2 , key_idx2 )
>7024	ArgumentList	i2
>7025	Argument	key_idx2
>7026	Identifier	key_idx2
>7027	Argument	i2
>7028	Identifier	i2
>7029	Callee	GetKey
>7030	Identifier	GetKey
>7031	Identifier	y_proj2
>7032	Identifier	y_proj2
>7033	IdentifierDeclType	double
>7034	IdentifierDeclStatement	 
>7035	IdentifierDecl	x_proj2 = GetKey ( i2 , key_idx2 ) . m_x
>7036	AssignmentExpr	x_proj2 = GetKey ( i2 , key_idx2 ) . m_x
>7037	MemberAccess	GetKey ( i2 , key_idx2 ) . m_x
>7038	Identifier	m_x
>7039	CallExpression	GetKey ( i2 , key_idx2 )
>7040	ArgumentList	i2
>7041	Argument	key_idx2
>7042	Identifier	key_idx2
>7043	Argument	i2
>7044	Identifier	i2
>7045	Callee	GetKey
>7046	Identifier	GetKey
>7047	Identifier	x_proj2
>7048	Identifier	x_proj2
>7049	IdentifierDeclType	double
>7050	IdentifierDeclStatement	 
>7051	IdentifierDecl	y_proj1 = GetKey ( i1 , key_idx1 ) . m_y
>7052	AssignmentExpr	y_proj1 = GetKey ( i1 , key_idx1 ) . m_y
>7053	MemberAccess	GetKey ( i1 , key_idx1 ) . m_y
>7054	Identifier	m_y
>7055	CallExpression	GetKey ( i1 , key_idx1 )
>7056	ArgumentList	i1
>7057	Argument	key_idx1
>7058	Identifier	key_idx1
>7059	Argument	i1
>7060	Identifier	i1
>7061	Callee	GetKey
>7062	Identifier	GetKey
>7063	Identifier	y_proj1
>7064	Identifier	y_proj1
>7065	IdentifierDeclType	double
>7066	IdentifierDeclStatement	 
>7067	IdentifierDecl	x_proj1 = GetKey ( i1 , key_idx1 ) . m_x
>7068	AssignmentExpr	x_proj1 = GetKey ( i1 , key_idx1 ) . m_x
>7069	MemberAccess	GetKey ( i1 , key_idx1 ) . m_x
>7070	Identifier	m_x
>7071	CallExpression	GetKey ( i1 , key_idx1 )
>7072	ArgumentList	i1
>7073	Argument	key_idx1
>7074	Identifier	key_idx1
>7075	Argument	i1
>7076	Identifier	i1
>7077	Callee	GetKey
>7078	Identifier	GetKey
>7079	Identifier	x_proj1
>7080	Identifier	x_proj1
>7081	IdentifierDeclType	double
>7082	IdentifierDeclStatement	 
>7083	IdentifierDecl	key_idx2 = matches [ i ] . m_idx2
>7084	AssignmentExpr	key_idx2 = matches [ i ] . m_idx2
>7085	MemberAccess	matches [ i ] . m_idx2
>7086	Identifier	m_idx2
>7087	ArrayIndexing	matches [ i ]
>7088	Identifier	i
>7089	Identifier	matches
>7090	Identifier	key_idx2
>7091	Identifier	key_idx2
>7092	IdentifierDeclType	int
>7093	IdentifierDeclStatement	 
>7094	IdentifierDecl	key_idx1 = matches [ i ] . m_idx1
>7095	AssignmentExpr	key_idx1 = matches [ i ] . m_idx1
>7096	MemberAccess	matches [ i ] . m_idx1
>7097	Identifier	m_idx1
>7098	ArrayIndexing	matches [ i ]
>7099	Identifier	i
>7100	Identifier	matches
>7101	Identifier	key_idx1
>7102	Identifier	key_idx1
>7103	IdentifierDeclType	int
>7104	IncDecOp	 
>7105	IncDec	++
>7106	Identifier	i
>7107	Condition	 
>7108	RelationalExpression	i < num_matches
>7109	Identifier	num_matches
>7110	Identifier	i
>7111	ForInit	 
>7112	IdentifierDeclStatement	unsigned int i = 0 ;
>7113	IdentifierDecl	i = 0
>7114	AssignmentExpr	i = 0
>7115	PrimaryExpression	0
>7116	Identifier	i
>7117	Identifier	i
>7118	IdentifierDeclType	unsigned int
>7119	ExpressionStatement	 
>7120	AssignmentExpr	angle_sum = 0.0
>7121	PrimaryExpression	0.0
>7122	Identifier	angle_sum
>7123	IdentifierDeclStatement	 
>7124	IdentifierDecl	count = 0
>7125	AssignmentExpr	count = 0
>7126	PrimaryExpression	0
>7127	Identifier	count
>7128	Identifier	count
>7129	IdentifierDeclType	int
>7130	ExpressionStatement	 
>7131	AssignmentExpr	num_in_back = 0
>7132	PrimaryExpression	0
>7133	Identifier	num_in_back
>7134	ExpressionStatement	 
>7135	AssignmentExpr	cameras [ 0 ] . constraints [ 2 ] = cameras [ 0 ] . t [ 2 ]
>7136	ArrayIndexing	cameras [ 0 ] . t [ 2 ]
>7137	PrimaryExpression	2
>7138	MemberAccess	cameras [ 0 ] . t
>7139	Identifier	t
>7140	ArrayIndexing	cameras [ 0 ]
>7141	PrimaryExpression	0
>7142	Identifier	cameras
>7143	ArrayIndexing	cameras [ 0 ] . constraints [ 2 ]
>7144	PrimaryExpression	2
>7145	MemberAccess	cameras [ 0 ] . constraints
>7146	Identifier	constraints
>7147	ArrayIndexing	cameras [ 0 ]
>7148	PrimaryExpression	0
>7149	Identifier	cameras
>7150	ExpressionStatement	 
>7151	AssignmentExpr	cameras [ 0 ] . constraints [ 1 ] = cameras [ 0 ] . t [ 1 ]
>7152	ArrayIndexing	cameras [ 0 ] . t [ 1 ]
>7153	PrimaryExpression	1
>7154	MemberAccess	cameras [ 0 ] . t
>7155	Identifier	t
>7156	ArrayIndexing	cameras [ 0 ]
>7157	PrimaryExpression	0
>7158	Identifier	cameras
>7159	ArrayIndexing	cameras [ 0 ] . constraints [ 1 ]
>7160	PrimaryExpression	1
>7161	MemberAccess	cameras [ 0 ] . constraints
>7162	Identifier	constraints
>7163	ArrayIndexing	cameras [ 0 ]
>7164	PrimaryExpression	0
>7165	Identifier	cameras
>7166	ExpressionStatement	 
>7167	AssignmentExpr	cameras [ 0 ] . constraints [ 0 ] = cameras [ 0 ] . t [ 0 ]
>7168	ArrayIndexing	cameras [ 0 ] . t [ 0 ]
>7169	PrimaryExpression	0
>7170	MemberAccess	cameras [ 0 ] . t
>7171	Identifier	t
>7172	ArrayIndexing	cameras [ 0 ]
>7173	PrimaryExpression	0
>7174	Identifier	cameras
>7175	ArrayIndexing	cameras [ 0 ] . constraints [ 0 ]
>7176	PrimaryExpression	0
>7177	MemberAccess	cameras [ 0 ] . constraints
>7178	Identifier	constraints
>7179	ArrayIndexing	cameras [ 0 ]
>7180	PrimaryExpression	0
>7181	Identifier	cameras
>7182	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>7183	ExpressionStatement	 
>7184	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , points [ i ] . p , mean . p , points [ i ] . p )
>7185	ArgumentList	3
>7186	Argument	points [ i ] . p
>7187	MemberAccess	points [ i ] . p
>7188	Identifier	p
>7189	ArrayIndexing	points [ i ]
>7190	Identifier	i
>7191	Identifier	points
>7192	Argument	mean . p
>7193	MemberAccess	mean . p
>7194	Identifier	p
>7195	Identifier	mean
>7196	Argument	points [ i ] . p
>7197	MemberAccess	points [ i ] . p
>7198	Identifier	p
>7199	ArrayIndexing	points [ i ]
>7200	Identifier	i
>7201	Identifier	points
>7202	Argument	1
>7203	PrimaryExpression	1
>7204	Argument	3
>7205	PrimaryExpression	3
>7206	Argument	1
>7207	PrimaryExpression	1
>7208	Argument	3
>7209	PrimaryExpression	3
>7210	Callee	matrix_diff
>7211	Identifier	matrix_diff
>7212	IncDecOp	 
>7213	IncDec	++
>7214	Identifier	i
>7215	Condition	 
>7216	RelationalExpression	i < pt_count
>7217	Identifier	pt_count
>7218	Identifier	i
>7219	ForInit	 
>7220	IdentifierDeclStatement	int i = 0 ;
>7221	IdentifierDecl	i = 0
>7222	AssignmentExpr	i = 0
>7223	PrimaryExpression	0
>7224	Identifier	i
>7225	Identifier	i
>7226	IdentifierDeclType	int
>7227	ExpressionStatement	 
>7228	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , cameras [ 1 ] . t , mean . p , cameras [ 1 ] . t )
>7229	ArgumentList	3
>7230	Argument	cameras [ 1 ] . t
>7231	MemberAccess	cameras [ 1 ] . t
>7232	Identifier	t
>7233	ArrayIndexing	cameras [ 1 ]
>7234	PrimaryExpression	1
>7235	Identifier	cameras
>7236	Argument	mean . p
>7237	MemberAccess	mean . p
>7238	Identifier	p
>7239	Identifier	mean
>7240	Argument	cameras [ 1 ] . t
>7241	MemberAccess	cameras [ 1 ] . t
>7242	Identifier	t
>7243	ArrayIndexing	cameras [ 1 ]
>7244	PrimaryExpression	1
>7245	Identifier	cameras
>7246	Argument	1
>7247	PrimaryExpression	1
>7248	Argument	3
>7249	PrimaryExpression	3
>7250	Argument	1
>7251	PrimaryExpression	1
>7252	Argument	3
>7253	PrimaryExpression	3
>7254	Callee	matrix_diff
>7255	Identifier	matrix_diff
>7256	ExpressionStatement	 
>7257	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , cameras [ 0 ] . t , mean . p , cameras [ 0 ] . t )
>7258	ArgumentList	3
>7259	Argument	cameras [ 0 ] . t
>7260	MemberAccess	cameras [ 0 ] . t
>7261	Identifier	t
>7262	ArrayIndexing	cameras [ 0 ]
>7263	PrimaryExpression	0
>7264	Identifier	cameras
>7265	Argument	mean . p
>7266	MemberAccess	mean . p
>7267	Identifier	p
>7268	Identifier	mean
>7269	Argument	cameras [ 0 ] . t
>7270	MemberAccess	cameras [ 0 ] . t
>7271	Identifier	t
>7272	ArrayIndexing	cameras [ 0 ]
>7273	PrimaryExpression	0
>7274	Identifier	cameras
>7275	Argument	1
>7276	PrimaryExpression	1
>7277	Argument	3
>7278	PrimaryExpression	3
>7279	Argument	1
>7280	PrimaryExpression	1
>7281	Argument	3
>7282	PrimaryExpression	3
>7283	Callee	matrix_diff
>7284	Identifier	matrix_diff
>7285	IdentifierDeclStatement	 
>7286	IdentifierDecl	mean = v3_mean ( selected , points )
>7287	AssignmentExpr	mean = v3_mean ( selected , points )
>7288	CallExpression	v3_mean ( selected , points )
>7289	ArgumentList	selected
>7290	Argument	points
>7291	Identifier	points
>7292	Argument	selected
>7293	Identifier	selected
>7294	Callee	v3_mean
>7295	Identifier	v3_mean
>7296	Identifier	mean
>7297	Identifier	mean
>7298	IdentifierDeclType	v3_t
>7299	ExpressionStatement	 
>7300	AssignmentExpr	selected = MIN ( selected , 512 )
>7301	CallExpression	MIN ( selected , 512 )
>7302	ArgumentList	selected
>7303	Argument	512
>7304	PrimaryExpression	512
>7305	Argument	selected
>7306	Identifier	selected
>7307	Callee	MIN
>7308	Identifier	MIN
>7309	Identifier	selected
>7310	IdentifierDeclStatement	 
>7311	IdentifierDecl	selected = MIN ( MAX ( 32 , iround ( CHOOSE_PCT * pt_count ) ) , pt_count )
>7312	AssignmentExpr	selected = MIN ( MAX ( 32 , iround ( CHOOSE_PCT * pt_count ) ) , pt_count )
>7313	CallExpression	MIN ( MAX ( 32 , iround ( CHOOSE_PCT * pt_count ) ) , pt_count )
>7314	ArgumentList	MAX ( 32 , iround ( CHOOSE_PCT * pt_count ) )
>7315	Argument	pt_count
>7316	Identifier	pt_count
>7317	Argument	MAX ( 32 , iround ( CHOOSE_PCT * pt_count ) )
>7318	CallExpression	MAX ( 32 , iround ( CHOOSE_PCT * pt_count ) )
>7319	ArgumentList	32
>7320	Argument	iround ( CHOOSE_PCT * pt_count )
>7321	CallExpression	iround ( CHOOSE_PCT * pt_count )
>7322	ArgumentList	CHOOSE_PCT * pt_count
>7323	Argument	CHOOSE_PCT * pt_count
>7324	MultiplicativeExpression	CHOOSE_PCT * pt_count
>7325	Identifier	pt_count
>7326	Identifier	CHOOSE_PCT
>7327	Callee	iround
>7328	Identifier	iround
>7329	Argument	32
>7330	PrimaryExpression	32
>7331	Callee	MAX
>7332	Identifier	MAX
>7333	Callee	MIN
>7334	Identifier	MIN
>7335	Identifier	selected
>7336	Identifier	selected
>7337	IdentifierDeclType	int
>7338	Statement	 
>7339	Statement	 
>7340	Statement	 
>7341	ExpressionStatement	 
>7342	CallExpression	memcpy ( cameras [ 1 ] . t , eye2 , sizeof ( double ) * 3 )
>7343	ArgumentList	cameras [ 1 ] . t
>7344	Argument	sizeof ( double ) * 3
>7345	MultiplicativeExpression	sizeof ( double ) * 3
>7346	PrimaryExpression	3
>7347	SizeofExpr	sizeof ( double )
>7348	SizeofOperand	double
>7349	Sizeof	sizeof
>7350	Argument	eye2
>7351	Identifier	eye2
>7352	Argument	cameras [ 1 ] . t
>7353	MemberAccess	cameras [ 1 ] . t
>7354	Identifier	t
>7355	ArrayIndexing	cameras [ 1 ]
>7356	PrimaryExpression	1
>7357	Identifier	cameras
>7358	Callee	memcpy
>7359	Identifier	memcpy
>7360	ExpressionStatement	 
>7361	AssignmentExpr	cameras [ 0 ] . t [ 0 ] = cameras [ 0 ] . t [ 1 ] = cameras [ 0 ] . t [ 2 ] = 0.0
>7362	AssignmentExpr	cameras [ 0 ] . t [ 1 ] = cameras [ 0 ] . t [ 2 ] = 0.0
>7363	AssignmentExpr	cameras [ 0 ] . t [ 2 ] = 0.0
>7364	PrimaryExpression	0.0
>7365	ArrayIndexing	cameras [ 0 ] . t [ 2 ]
>7366	PrimaryExpression	2
>7367	MemberAccess	cameras [ 0 ] . t
>7368	Identifier	t
>7369	ArrayIndexing	cameras [ 0 ]
>7370	PrimaryExpression	0
>7371	Identifier	cameras
>7372	ArrayIndexing	cameras [ 0 ] . t [ 1 ]
>7373	PrimaryExpression	1
>7374	MemberAccess	cameras [ 0 ] . t
>7375	Identifier	t
>7376	ArrayIndexing	cameras [ 0 ]
>7377	PrimaryExpression	0
>7378	Identifier	cameras
>7379	ArrayIndexing	cameras [ 0 ] . t [ 0 ]
>7380	PrimaryExpression	0
>7381	MemberAccess	cameras [ 0 ] . t
>7382	Identifier	t
>7383	ArrayIndexing	cameras [ 0 ]
>7384	PrimaryExpression	0
>7385	Identifier	cameras
>7386	ExpressionStatement	 
>7387	CallExpression	matrix_ident ( 3 , cameras [ 0 ] . R )
>7388	ArgumentList	3
>7389	Argument	cameras [ 0 ] . R
>7390	MemberAccess	cameras [ 0 ] . R
>7391	Identifier	R
>7392	ArrayIndexing	cameras [ 0 ]
>7393	PrimaryExpression	0
>7394	Identifier	cameras
>7395	Argument	3
>7396	PrimaryExpression	3
>7397	Callee	matrix_ident
>7398	Identifier	matrix_ident
>7399	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>7400	CompoundStatement	 
>7401	ExpressionStatement	 
>7402	CallExpression	matrix_scale ( 3 , 1 , points [ i ] . p , 1.0 / dist , points [ i ] . p )
>7403	ArgumentList	3
>7404	Argument	points [ i ] . p
>7405	MemberAccess	points [ i ] . p
>7406	Identifier	p
>7407	ArrayIndexing	points [ i ]
>7408	Identifier	i
>7409	Identifier	points
>7410	Argument	1.0 / dist
>7411	MultiplicativeExpression	1.0 / dist
>7412	Identifier	dist
>7413	PrimaryExpression	1.0
>7414	Argument	points [ i ] . p
>7415	MemberAccess	points [ i ] . p
>7416	Identifier	p
>7417	ArrayIndexing	points [ i ]
>7418	Identifier	i
>7419	Identifier	points
>7420	Argument	1
>7421	PrimaryExpression	1
>7422	Argument	3
>7423	PrimaryExpression	3
>7424	Callee	matrix_scale
>7425	Identifier	matrix_scale
>7426	ExpressionStatement	 
>7427	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cameras [ 0 ] . R , p_tmp , points [ i ] . p )
>7428	ArgumentList	3
>7429	Argument	points [ i ] . p
>7430	MemberAccess	points [ i ] . p
>7431	Identifier	p
>7432	ArrayIndexing	points [ i ]
>7433	Identifier	i
>7434	Identifier	points
>7435	Argument	p_tmp
>7436	Identifier	p_tmp
>7437	Argument	cameras [ 0 ] . R
>7438	MemberAccess	cameras [ 0 ] . R
>7439	Identifier	R
>7440	ArrayIndexing	cameras [ 0 ]
>7441	PrimaryExpression	0
>7442	Identifier	cameras
>7443	Argument	1
>7444	PrimaryExpression	1
>7445	Argument	3
>7446	PrimaryExpression	3
>7447	Argument	3
>7448	PrimaryExpression	3
>7449	Argument	3
>7450	PrimaryExpression	3
>7451	Callee	matrix_product
>7452	Identifier	matrix_product
>7453	ExpressionStatement	 
>7454	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , points [ i ] . p , eye1 , p_tmp )
>7455	ArgumentList	3
>7456	Argument	p_tmp
>7457	Identifier	p_tmp
>7458	Argument	eye1
>7459	Identifier	eye1
>7460	Argument	points [ i ] . p
>7461	MemberAccess	points [ i ] . p
>7462	Identifier	p
>7463	ArrayIndexing	points [ i ]
>7464	Identifier	i
>7465	Identifier	points
>7466	Argument	1
>7467	PrimaryExpression	1
>7468	Argument	3
>7469	PrimaryExpression	3
>7470	Argument	1
>7471	PrimaryExpression	1
>7472	Argument	3
>7473	PrimaryExpression	3
>7474	Callee	matrix_diff
>7475	Identifier	matrix_diff
>7476	IdentifierDeclStatement	 
>7477	IdentifierDecl	p_tmp [ 3 ]
>7478	PrimaryExpression	3
>7479	Identifier	p_tmp
>7480	IdentifierDeclType	double [ 3 ]
>7481	IncDecOp	 
>7482	IncDec	++
>7483	Identifier	i
>7484	Condition	 
>7485	RelationalExpression	i < pt_count
>7486	Identifier	pt_count
>7487	Identifier	i
>7488	ForInit	 
>7489	IdentifierDeclStatement	int i = 0 ;
>7490	IdentifierDecl	i = 0
>7491	AssignmentExpr	i = 0
>7492	PrimaryExpression	0
>7493	Identifier	i
>7494	Identifier	i
>7495	IdentifierDeclType	int
>7496	ExpressionStatement	 
>7497	CallExpression	memcpy ( cameras [ 1 ] . R , tmp , sizeof ( double ) * 9 )
>7498	ArgumentList	cameras [ 1 ] . R
>7499	Argument	sizeof ( double ) * 9
>7500	MultiplicativeExpression	sizeof ( double ) * 9
>7501	PrimaryExpression	9
>7502	SizeofExpr	sizeof ( double )
>7503	SizeofOperand	double
>7504	Sizeof	sizeof
>7505	Argument	tmp
>7506	Identifier	tmp
>7507	Argument	cameras [ 1 ] . R
>7508	MemberAccess	cameras [ 1 ] . R
>7509	Identifier	R
>7510	ArrayIndexing	cameras [ 1 ]
>7511	PrimaryExpression	1
>7512	Identifier	cameras
>7513	Callee	memcpy
>7514	Identifier	memcpy
>7515	ExpressionStatement	 
>7516	CallExpression	matrix_transpose_product2 ( 3 , 3 , 3 , 3 , cameras [ 1 ] . R , cameras [ 0 ] . R , tmp )
>7517	ArgumentList	3
>7518	Argument	tmp
>7519	Identifier	tmp
>7520	Argument	cameras [ 0 ] . R
>7521	MemberAccess	cameras [ 0 ] . R
>7522	Identifier	R
>7523	ArrayIndexing	cameras [ 0 ]
>7524	PrimaryExpression	0
>7525	Identifier	cameras
>7526	Argument	cameras [ 1 ] . R
>7527	MemberAccess	cameras [ 1 ] . R
>7528	Identifier	R
>7529	ArrayIndexing	cameras [ 1 ]
>7530	PrimaryExpression	1
>7531	Identifier	cameras
>7532	Argument	3
>7533	PrimaryExpression	3
>7534	Argument	3
>7535	PrimaryExpression	3
>7536	Argument	3
>7537	PrimaryExpression	3
>7538	Argument	3
>7539	PrimaryExpression	3
>7540	Callee	matrix_transpose_product2
>7541	Identifier	matrix_transpose_product2
>7542	IdentifierDeclStatement	 
>7543	IdentifierDecl	tmp [ 9 ]
>7544	PrimaryExpression	9
>7545	Identifier	tmp
>7546	IdentifierDeclType	double [ 9 ]
>7547	ExpressionStatement	 
>7548	CallExpression	matrix_scale ( 3 , 1 , eye2 , 1.0 / dist , eye2 )
>7549	ArgumentList	3
>7550	Argument	eye2
>7551	Identifier	eye2
>7552	Argument	1.0 / dist
>7553	MultiplicativeExpression	1.0 / dist
>7554	Identifier	dist
>7555	PrimaryExpression	1.0
>7556	Argument	eye2
>7557	Identifier	eye2
>7558	Argument	1
>7559	PrimaryExpression	1
>7560	Argument	3
>7561	PrimaryExpression	3
>7562	Callee	matrix_scale
>7563	Identifier	matrix_scale
>7564	ExpressionStatement	 
>7565	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , cameras [ 0 ] . R , diff , eye2 )
>7566	ArgumentList	3
>7567	Argument	eye2
>7568	Identifier	eye2
>7569	Argument	diff
>7570	Identifier	diff
>7571	Argument	cameras [ 0 ] . R
>7572	MemberAccess	cameras [ 0 ] . R
>7573	Identifier	R
>7574	ArrayIndexing	cameras [ 0 ]
>7575	PrimaryExpression	0
>7576	Identifier	cameras
>7577	Argument	1
>7578	PrimaryExpression	1
>7579	Argument	3
>7580	PrimaryExpression	3
>7581	Argument	3
>7582	PrimaryExpression	3
>7583	Argument	3
>7584	PrimaryExpression	3
>7585	Callee	matrix_product
>7586	Identifier	matrix_product
>7587	IdentifierDeclStatement	 
>7588	IdentifierDecl	eye2 [ 3 ]
>7589	PrimaryExpression	3
>7590	Identifier	eye2
>7591	IdentifierDeclType	double [ 3 ]
>7592	IdentifierDeclStatement	 
>7593	IdentifierDecl	dist = matrix_norm ( 3 , 1 , diff )
>7594	AssignmentExpr	dist = matrix_norm ( 3 , 1 , diff )
>7595	CallExpression	matrix_norm ( 3 , 1 , diff )
>7596	ArgumentList	3
>7597	Argument	diff
>7598	Identifier	diff
>7599	Argument	1
>7600	PrimaryExpression	1
>7601	Argument	3
>7602	PrimaryExpression	3
>7603	Callee	matrix_norm
>7604	Identifier	matrix_norm
>7605	Identifier	dist
>7606	Identifier	dist
>7607	IdentifierDeclType	double
>7608	ExpressionStatement	 
>7609	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , cameras [ 1 ] . t , cameras [ 0 ] . t , diff )
>7610	ArgumentList	3
>7611	Argument	diff
>7612	Identifier	diff
>7613	Argument	cameras [ 0 ] . t
>7614	MemberAccess	cameras [ 0 ] . t
>7615	Identifier	t
>7616	ArrayIndexing	cameras [ 0 ]
>7617	PrimaryExpression	0
>7618	Identifier	cameras
>7619	Argument	cameras [ 1 ] . t
>7620	MemberAccess	cameras [ 1 ] . t
>7621	Identifier	t
>7622	ArrayIndexing	cameras [ 1 ]
>7623	PrimaryExpression	1
>7624	Identifier	cameras
>7625	Argument	1
>7626	PrimaryExpression	1
>7627	Argument	3
>7628	PrimaryExpression	3
>7629	Argument	1
>7630	PrimaryExpression	1
>7631	Argument	3
>7632	PrimaryExpression	3
>7633	Callee	matrix_diff
>7634	Identifier	matrix_diff
>7635	ExpressionStatement	 
>7636	CallExpression	memcpy ( eye1 , cameras [ 0 ] . t , sizeof ( double ) * 3 )
>7637	ArgumentList	eye1
>7638	Argument	sizeof ( double ) * 3
>7639	MultiplicativeExpression	sizeof ( double ) * 3
>7640	PrimaryExpression	3
>7641	SizeofExpr	sizeof ( double )
>7642	SizeofOperand	double
>7643	Sizeof	sizeof
>7644	Argument	cameras [ 0 ] . t
>7645	MemberAccess	cameras [ 0 ] . t
>7646	Identifier	t
>7647	ArrayIndexing	cameras [ 0 ]
>7648	PrimaryExpression	0
>7649	Identifier	cameras
>7650	Argument	eye1
>7651	Identifier	eye1
>7652	Callee	memcpy
>7653	Identifier	memcpy
>7654	IdentifierDeclStatement	 
>7655	IdentifierDecl	eye1 [ 3 ]
>7656	PrimaryExpression	3
>7657	Identifier	eye1
>7658	IdentifierDeclType	double [ 3 ]
>7659	IdentifierDeclStatement	 
>7660	IdentifierDecl	diff [ 3 ]
>7661	PrimaryExpression	3
>7662	Identifier	diff
>7663	IdentifierDeclType	double [ 3 ]
>7664	ExpressionStatement	 
>7665	CallExpression	fflush ( stdout )
>7666	ArgumentList	stdout
>7667	Argument	stdout
>7668	Identifier	stdout
>7669	Callee	fflush
>7670	Identifier	fflush
>7671	ExpressionStatement	 
>7672	Statement	 
>7673	Statement	 
>7674	Statement	 
>7675	Statement	 
>7676	Statement	 
>7677	Statement	 
>7678	Statement	 
>7679	Statement	 
>7680	Statement	 
>7681	Statement	 
>7682	Statement	 
>7683	Statement	 
>7684	Statement	 
>7685	Statement	 
>7686	Statement	 
>7687	Statement	 
>7688	Statement	 
>7689	Statement	 
>7690	Statement	 
>7691	Statement	 
>7692	Statement	 
>7693	Statement	 
>7694	Statement	 
>7695	Statement	 
>7696	Statement	 
>7697	Statement	 
>7698	Statement	 
>7699	Statement	 
>7700	Statement	 
>7701	Statement	 
>7702	Statement	 
>7703	Statement	 
>7704	Statement	 
>7705	Statement	 
>7706	Statement	 
>7707	Statement	 
>7708	Statement	 
>7709	Statement	 
>7710	Statement	 
>7711	Statement	 
>7712	Statement	 
>7713	Statement	 
>7714	Statement	 
>7715	Statement	 
>7716	Statement	 
>7717	Statement	 
>7718	Statement	 
>7719	Statement	 
>7720	Statement	 
>7721	Statement	 
>7722	Statement	 
>7723	Statement	 
>7724	Statement	 
>7725	Statement	 
>7726	Statement	 
>7727	Statement	 
>7728	Statement	 
>7729	Statement	 
>7730	Statement	 
>7731	Statement	 
>7732	Statement	 
>7733	Statement	 
>7734	Statement	 
>7735	Statement	 
>7736	Statement	 
>7737	Statement	 
>7738	Statement	 
>7739	Statement	 
>7740	Statement	 
>7741	Statement	 
>7742	Statement	 
>7743	Statement	 
>7744	Statement	 
>7745	Statement	 
>7746	Statement	 
>7747	Statement	 
>7748	Statement	 
>7749	Statement	 
>7750	Statement	 
>7751	IfStatement	if ( pt_count < 20 )
>7752	CompoundStatement	 
>7753	ReturnStatement	 
>7754	Identifier	false
>7755	ExpressionStatement	 
>7756	CallExpression	ClearKeys ( m_image_data [ i2 ] )
>7757	ArgumentList	m_image_data [ i2 ]
>7758	Argument	m_image_data [ i2 ]
>7759	ArrayIndexing	m_image_data [ i2 ]
>7760	Identifier	i2
>7761	Identifier	m_image_data
>7762	Callee	ClearKeys
>7763	Identifier	ClearKeys
>7764	ExpressionStatement	 
>7765	CallExpression	ClearKeys ( m_image_data [ i1 ] )
>7766	ArgumentList	m_image_data [ i1 ]
>7767	Argument	m_image_data [ i1 ]
>7768	ArrayIndexing	m_image_data [ i1 ]
>7769	Identifier	i1
>7770	Identifier	m_image_data
>7771	Callee	ClearKeys
>7772	Identifier	ClearKeys
>7773	ExpressionStatement	 
>7774	CallExpression	printf ( \"  Too few points remain, exiting!\n\" )
>7775	ArgumentList	\"  Too few points remain, exiting!\n\"
>7776	Argument	\"  Too few points remain, exiting!\n\"
>7777	PrimaryExpression	\"  Too few points remain, exiting!\n\"
>7778	Callee	printf
>7779	Identifier	printf
>7780	Condition	 
>7781	RelationalExpression	pt_count < 20
>7782	PrimaryExpression	20
>7783	Identifier	pt_count
>7784	ExpressionStatement	 
>7785	AssignmentExpr	num_pts_out = pt_count
>7786	Identifier	pt_count
>7787	Identifier	num_pts_out
>7788	ExpressionStatement	 
>7789	AssignmentExpr	pt_count = inlier_count
>7790	Identifier	inlier_count
>7791	Identifier	pt_count
>7792	ExpressionStatement	 
>7793	AssignmentExpr	pt_views = pt_views_new
>7794	Identifier	pt_views_new
>7795	Identifier	pt_views
>7796	ExpressionStatement	 
>7797	CallExpression	fflush ( stdout )
>7798	ArgumentList	stdout
>7799	Argument	stdout
>7800	Identifier	stdout
>7801	Callee	fflush
>7802	Identifier	fflush
>7803	ExpressionStatement	 
>7804	CallExpression	printf ( \"  pt_count old
>7805	ArgumentList	\"  pt_count old
>7806	Argument	inlier_count
>7807	Identifier	inlier_count
>7808	Argument	pt_count
>7809	Identifier	pt_count
>7810	Argument	\"  pt_count old
>7811	PrimaryExpression	\"  pt_count old
>7812	Callee	printf
>7813	Identifier	printf
>7814	ExpressionStatement	 
>7815	Identifier	angles
>7816	Statement	 
>7817	Statement	 
>7818	Statement	 
>7819	ExpressionStatement	 
>7820	Identifier	dists
>7821	Statement	 
>7822	Statement	 
>7823	Statement	 
>7824	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>7825	CompoundStatement	 
>7826	IfStatement	if ( ( int ) pt_views [ i ] . size ( ) > 0 && ( dists [ i ] <= dist_threshold && angles [ i ] >= angle_threshold ) )
>7827	ElseStatement	else
>7828	IfStatement	if ( dists [ i ] > dist_threshold || angles [ i ] < angle_threshold )
>7829	CompoundStatement	 
>7830	ExpressionStatement	 
>7831	CallExpression	fflush ( stdout )
>7832	ArgumentList	stdout
>7833	Argument	stdout
>7834	Identifier	stdout
>7835	Callee	fflush
>7836	Identifier	fflush
>7837	ExpressionStatement	 
>7838	CallExpression	printf ( \"Threw out point [%d] with angle %0.3f [dist
>7839	ArgumentList	\"Threw out point [%d] with angle %0.3f [dist
>7840	Argument	dists [ i ]
>7841	ArrayIndexing	dists [ i ]
>7842	Identifier	i
>7843	Identifier	dists
>7844	Argument	angles [ i ]
>7845	ArrayIndexing	angles [ i ]
>7846	Identifier	i
>7847	Identifier	angles
>7848	Argument	i
>7849	Identifier	i
>7850	Argument	\"Threw out point [%d] with angle %0.3f [dist
>7851	PrimaryExpression	\"Threw out point [%d] with angle %0.3f [dist
>7852	Callee	printf
>7853	Identifier	printf
>7854	ExpressionStatement	 
>7855	AssignmentExpr	m_image_data [ i2 ] . m_keys [ k2 ] . m_extra = - 1
>7856	UnaryOp	- 1
>7857	PrimaryExpression	1
>7858	UnaryOperator	-
>7859	MemberAccess	m_image_data [ i2 ] . m_keys [ k2 ] . m_extra
>7860	Identifier	m_extra
>7861	ArrayIndexing	m_image_data [ i2 ] . m_keys [ k2 ]
>7862	Identifier	k2
>7863	MemberAccess	m_image_data [ i2 ] . m_keys
>7864	Identifier	m_keys
>7865	ArrayIndexing	m_image_data [ i2 ]
>7866	Identifier	i2
>7867	Identifier	m_image_data
>7868	ExpressionStatement	 
>7869	AssignmentExpr	m_image_data [ i1 ] . m_keys [ k1 ] . m_extra = - 1
>7870	UnaryOp	- 1
>7871	PrimaryExpression	1
>7872	UnaryOperator	-
>7873	MemberAccess	m_image_data [ i1 ] . m_keys [ k1 ] . m_extra
>7874	Identifier	m_extra
>7875	ArrayIndexing	m_image_data [ i1 ] . m_keys [ k1 ]
>7876	Identifier	k1
>7877	MemberAccess	m_image_data [ i1 ] . m_keys
>7878	Identifier	m_keys
>7879	ArrayIndexing	m_image_data [ i1 ]
>7880	Identifier	i1
>7881	Identifier	m_image_data
>7882	IfStatement	if ( angle < 0.0 )
>7883	CompoundStatement	 
>7884	ExpressionStatement	 
>7885	CallExpression	printf ( \"Error
>7886	ArgumentList	\"Error
>7887	Argument	\"Error
>7888	PrimaryExpression	\"Error
>7889	Callee	printf
>7890	Identifier	printf
>7891	Condition	 
>7892	RelationalExpression	angle < 0.0
>7893	PrimaryExpression	0.0
>7894	Identifier	angle
>7895	IdentifierDeclStatement	 
>7896	IdentifierDecl	angle = angles [ i ]
>7897	AssignmentExpr	angle = angles [ i ]
>7898	ArrayIndexing	angles [ i ]
>7899	Identifier	i
>7900	Identifier	angles
>7901	Identifier	angle
>7902	Identifier	angle
>7903	IdentifierDeclType	double
>7904	IdentifierDeclStatement	 
>7905	IdentifierDecl	k2 = pt_views [ i ] [ 1 ] . second
>7906	AssignmentExpr	k2 = pt_views [ i ] [ 1 ] . second
>7907	MemberAccess	pt_views [ i ] [ 1 ] . second
>7908	Identifier	second
>7909	ArrayIndexing	pt_views [ i ] [ 1 ]
>7910	PrimaryExpression	1
>7911	ArrayIndexing	pt_views [ i ]
>7912	Identifier	i
>7913	Identifier	pt_views
>7914	Identifier	k2
>7915	Identifier	k2
>7916	IdentifierDeclType	int
>7917	IdentifierDeclStatement	 
>7918	IdentifierDecl	k1 = pt_views [ i ] [ 0 ] . second
>7919	AssignmentExpr	k1 = pt_views [ i ] [ 0 ] . second
>7920	MemberAccess	pt_views [ i ] [ 0 ] . second
>7921	Identifier	second
>7922	ArrayIndexing	pt_views [ i ] [ 0 ]
>7923	PrimaryExpression	0
>7924	ArrayIndexing	pt_views [ i ]
>7925	Identifier	i
>7926	Identifier	pt_views
>7927	Identifier	k1
>7928	Identifier	k1
>7929	IdentifierDeclType	int
>7930	Condition	 
>7931	OrExpression	dists [ i ] > dist_threshold || angles [ i ] < angle_threshold
>7932	RelationalExpression	angles [ i ] < angle_threshold
>7933	Identifier	angle_threshold
>7934	ArrayIndexing	angles [ i ]
>7935	Identifier	i
>7936	Identifier	angles
>7937	RelationalExpression	dists [ i ] > dist_threshold
>7938	Identifier	dist_threshold
>7939	ArrayIndexing	dists [ i ]
>7940	Identifier	i
>7941	Identifier	dists
>7942	CompoundStatement	 
>7943	ExpressionStatement	 
>7944	IncDecOp	inlier_count ++
>7945	IncDec	++
>7946	Identifier	inlier_count
>7947	IfStatement	if ( bundle_from_tracks )
>7948	ExpressionStatement	 
>7949	AssignmentExpr	tracks [ inlier_count ] = tracks [ i ]
>7950	ArrayIndexing	tracks [ i ]
>7951	Identifier	i
>7952	Identifier	tracks
>7953	ArrayIndexing	tracks [ inlier_count ]
>7954	Identifier	inlier_count
>7955	Identifier	tracks
>7956	Condition	 
>7957	Identifier	bundle_from_tracks
>7958	ExpressionStatement	 
>7959	AssignmentExpr	points [ inlier_count ] = points [ i ]
>7960	ArrayIndexing	points [ i ]
>7961	Identifier	i
>7962	Identifier	points
>7963	ArrayIndexing	points [ inlier_count ]
>7964	Identifier	inlier_count
>7965	Identifier	points
>7966	ExpressionStatement	 
>7967	CallExpression	pt_views_new . push_back ( pt_views [ i ] )
>7968	ArgumentList	pt_views [ i ]
>7969	Argument	pt_views [ i ]
>7970	ArrayIndexing	pt_views [ i ]
>7971	Identifier	i
>7972	Identifier	pt_views
>7973	Callee	pt_views_new . push_back
>7974	MemberAccess	pt_views_new . push_back
>7975	Identifier	push_back
>7976	Identifier	pt_views_new
>7977	ExpressionStatement	 
>7978	AssignmentExpr	m_image_data [ i2 ] . m_keys [ k2 ] . m_extra = inlier_count
>7979	Identifier	inlier_count
>7980	MemberAccess	m_image_data [ i2 ] . m_keys [ k2 ] . m_extra
>7981	Identifier	m_extra
>7982	ArrayIndexing	m_image_data [ i2 ] . m_keys [ k2 ]
>7983	Identifier	k2
>7984	MemberAccess	m_image_data [ i2 ] . m_keys
>7985	Identifier	m_keys
>7986	ArrayIndexing	m_image_data [ i2 ]
>7987	Identifier	i2
>7988	Identifier	m_image_data
>7989	ExpressionStatement	 
>7990	AssignmentExpr	m_image_data [ i1 ] . m_keys [ k1 ] . m_extra = inlier_count
>7991	Identifier	inlier_count
>7992	MemberAccess	m_image_data [ i1 ] . m_keys [ k1 ] . m_extra
>7993	Identifier	m_extra
>7994	ArrayIndexing	m_image_data [ i1 ] . m_keys [ k1 ]
>7995	Identifier	k1
>7996	MemberAccess	m_image_data [ i1 ] . m_keys
>7997	Identifier	m_keys
>7998	ArrayIndexing	m_image_data [ i1 ]
>7999	Identifier	i1
>8000	Identifier	m_image_data
>8001	IdentifierDeclStatement	 
>8002	IdentifierDecl	k2 = pt_views [ i ] [ 1 ] . second
>8003	AssignmentExpr	k2 = pt_views [ i ] [ 1 ] . second
>8004	MemberAccess	pt_views [ i ] [ 1 ] . second
>8005	Identifier	second
>8006	ArrayIndexing	pt_views [ i ] [ 1 ]
>8007	PrimaryExpression	1
>8008	ArrayIndexing	pt_views [ i ]
>8009	Identifier	i
>8010	Identifier	pt_views
>8011	Identifier	k2
>8012	Identifier	k2
>8013	IdentifierDeclType	int
>8014	IdentifierDeclStatement	 
>8015	IdentifierDecl	k1 = pt_views [ i ] [ 0 ] . second
>8016	AssignmentExpr	k1 = pt_views [ i ] [ 0 ] . second
>8017	MemberAccess	pt_views [ i ] [ 0 ] . second
>8018	Identifier	second
>8019	ArrayIndexing	pt_views [ i ] [ 0 ]
>8020	PrimaryExpression	0
>8021	ArrayIndexing	pt_views [ i ]
>8022	Identifier	i
>8023	Identifier	pt_views
>8024	Identifier	k1
>8025	Identifier	k1
>8026	IdentifierDeclType	int
>8027	Condition	 
>8028	AndExpression	( int ) pt_views [ i ] . size ( ) > 0 && ( dists [ i ] <= dist_threshold && angles [ i ] >= angle_threshold )
>8029	AndExpression	dists [ i ] <= dist_threshold && angles [ i ] >= angle_threshold
>8030	RelationalExpression	angles [ i ] >= angle_threshold
>8031	Identifier	angle_threshold
>8032	ArrayIndexing	angles [ i ]
>8033	Identifier	i
>8034	Identifier	angles
>8035	RelationalExpression	dists [ i ] <= dist_threshold
>8036	Identifier	dist_threshold
>8037	ArrayIndexing	dists [ i ]
>8038	Identifier	i
>8039	Identifier	dists
>8040	RelationalExpression	( int ) pt_views [ i ] . size ( ) > 0
>8041	PrimaryExpression	0
>8042	CastExpression	( int ) pt_views [ i ] . size ( )
>8043	CallExpression	pt_views [ i ] . size ( )
>8044	ArgumentList	 
>8045	Callee	pt_views [ i ] . size
>8046	MemberAccess	pt_views [ i ] . size
>8047	Identifier	size
>8048	ArrayIndexing	pt_views [ i ]
>8049	Identifier	i
>8050	Identifier	pt_views
>8051	CastTarget	int
>8052	IncDecOp	 
>8053	IncDec	++
>8054	Identifier	i
>8055	Condition	 
>8056	RelationalExpression	i < pt_count
>8057	Identifier	pt_count
>8058	Identifier	i
>8059	ForInit	 
>8060	IdentifierDeclStatement	int i = 0 ;
>8061	IdentifierDecl	i = 0
>8062	AssignmentExpr	i = 0
>8063	PrimaryExpression	0
>8064	Identifier	i
>8065	Identifier	i
>8066	IdentifierDeclType	int
>8067	IdentifierDeclStatement	 
>8068	IdentifierDecl	inlier_count = 0
>8069	AssignmentExpr	inlier_count = 0
>8070	PrimaryExpression	0
>8071	Identifier	inlier_count
>8072	Identifier	inlier_count
>8073	IdentifierDeclType	int
>8074	IdentifierDeclStatement	 
>8075	IdentifierDecl	pt_views_new
>8076	Identifier	pt_views_new
>8077	IdentifierDeclType	std 
>8078	ExpressionStatement	 
>8079	CallExpression	fflush ( stdout )
>8080	ArgumentList	stdout
>8081	Argument	stdout
>8082	Identifier	stdout
>8083	Callee	fflush
>8084	Identifier	fflush
>8085	ExpressionStatement	 
>8086	CallExpression	printf ( \"  Using angle threshold
>8087	ArgumentList	\"  Using angle threshold
>8088	Argument	angle_threshold
>8089	Identifier	angle_threshold
>8090	Argument	\"  Using angle threshold
>8091	PrimaryExpression	\"  Using angle threshold
>8092	Callee	printf
>8093	Identifier	printf
>8094	IfStatement	if ( pt_count < 30 )
>8095	ExpressionStatement	 
>8096	AssignmentExpr	angle_threshold = 0.0
>8097	PrimaryExpression	0.0
>8098	Identifier	angle_threshold
>8099	Condition	 
>8100	RelationalExpression	pt_count < 30
>8101	PrimaryExpression	30
>8102	Identifier	pt_count
>8103	ExpressionStatement	 
>8104	AssignmentExpr	angle_threshold = MIN ( 0.15 , angle_threshold )
>8105	CallExpression	MIN ( 0.15 , angle_threshold )
>8106	ArgumentList	0.15
>8107	Argument	angle_threshold
>8108	Identifier	angle_threshold
>8109	Argument	0.15
>8110	PrimaryExpression	0.15
>8111	Callee	MIN
>8112	Identifier	MIN
>8113	Identifier	angle_threshold
>8114	IdentifierDeclStatement	 
>8115	IdentifierDecl	angle_threshold = kth_element_copy ( pt_count , iround ( 0.90 * pt_count ) , angles )
>8116	AssignmentExpr	angle_threshold = kth_element_copy ( pt_count , iround ( 0.90 * pt_count ) , angles )
>8117	CallExpression	kth_element_copy ( pt_count , iround ( 0.90 * pt_count ) , angles )
>8118	ArgumentList	pt_count
>8119	Argument	angles
>8120	Identifier	angles
>8121	Argument	iround ( 0.90 * pt_count )
>8122	CallExpression	iround ( 0.90 * pt_count )
>8123	ArgumentList	0.90 * pt_count
>8124	Argument	0.90 * pt_count
>8125	MultiplicativeExpression	0.90 * pt_count
>8126	Identifier	pt_count
>8127	PrimaryExpression	0.90
>8128	Callee	iround
>8129	Identifier	iround
>8130	Argument	pt_count
>8131	Identifier	pt_count
>8132	Callee	kth_element_copy
>8133	Identifier	kth_element_copy
>8134	Identifier	angle_threshold
>8135	Identifier	angle_threshold
>8136	IdentifierDeclType	double
>8137	ExpressionStatement	 
>8138	CallExpression	qsort_descending ( )
>8139	ArgumentList	 
>8140	Callee	qsort_descending
>8141	Identifier	qsort_descending
>8142	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>8143	CompoundStatement	 
>8144	IfStatement	if ( ( int ) pt_views [ i ] . size ( ) > 0 )
>8145	ElseStatement	else
>8146	CompoundStatement	 
>8147	ExpressionStatement	 
>8148	AssignmentExpr	angles [ i ] = 30.0
>8149	PrimaryExpression	30.0
>8150	ArrayIndexing	angles [ i ]
>8151	Identifier	i
>8152	Identifier	angles
>8153	CompoundStatement	 
>8154	ExpressionStatement	 
>8155	AssignmentExpr	angles [ i ] = RAD2DEG ( angle )
>8156	CallExpression	RAD2DEG ( angle )
>8157	ArgumentList	angle
>8158	Argument	angle
>8159	Identifier	angle
>8160	Callee	RAD2DEG
>8161	Identifier	RAD2DEG
>8162	ArrayIndexing	angles [ i ]
>8163	Identifier	i
>8164	Identifier	angles
>8165	IdentifierDeclStatement	 
>8166	IdentifierDecl	angle = acos ( CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>8167	AssignmentExpr	angle = acos ( CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>8168	CallExpression	acos ( CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>8169	ArgumentList	CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>8170	Argument	CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>8171	CallExpression	CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>8172	ArgumentList	dot
>8173	Argument	1.0 - 1.0e-8
>8174	AdditiveExpression	1.0 - 1.0e-8
>8175	PrimaryExpression	1.0e-8
>8176	PrimaryExpression	1.0
>8177	Argument	- 1.0 + 1.0e-8
>8178	AdditiveExpression	- 1.0 + 1.0e-8
>8179	PrimaryExpression	1.0e-8
>8180	UnaryOp	- 1.0
>8181	PrimaryExpression	1.0
>8182	UnaryOperator	-
>8183	Argument	dot
>8184	Identifier	dot
>8185	Callee	CLAMP
>8186	Identifier	CLAMP
>8187	Callee	acos
>8188	Identifier	acos
>8189	Identifier	angle
>8190	Identifier	angle
>8191	IdentifierDeclType	double
>8192	ExpressionStatement	 
>8193	AssignmentExpr	dot /= norm
>8194	Identifier	norm
>8195	Identifier	dot
>8196	IdentifierDeclStatement	 
>8197	IdentifierDecl	norm = matrix_norm ( 3 , 1 , ray1 ) * matrix_norm ( 3 , 1 , ray2 )
>8198	AssignmentExpr	norm = matrix_norm ( 3 , 1 , ray1 ) * matrix_norm ( 3 , 1 , ray2 )
>8199	MultiplicativeExpression	matrix_norm ( 3 , 1 , ray1 ) * matrix_norm ( 3 , 1 , ray2 )
>8200	CallExpression	matrix_norm ( 3 , 1 , ray2 )
>8201	ArgumentList	3
>8202	Argument	ray2
>8203	Identifier	ray2
>8204	Argument	1
>8205	PrimaryExpression	1
>8206	Argument	3
>8207	PrimaryExpression	3
>8208	Callee	matrix_norm
>8209	Identifier	matrix_norm
>8210	CallExpression	matrix_norm ( 3 , 1 , ray1 )
>8211	ArgumentList	3
>8212	Argument	ray1
>8213	Identifier	ray1
>8214	Argument	1
>8215	PrimaryExpression	1
>8216	Argument	3
>8217	PrimaryExpression	3
>8218	Callee	matrix_norm
>8219	Identifier	matrix_norm
>8220	Identifier	norm
>8221	Identifier	norm
>8222	IdentifierDeclType	double
>8223	ExpressionStatement	 
>8224	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , ray1 , ray2 , & dot )
>8225	ArgumentList	1
>8226	Argument	& dot
>8227	UnaryOp	& dot
>8228	Identifier	dot
>8229	UnaryOperator	&
>8230	Argument	ray2
>8231	Identifier	ray2
>8232	Argument	ray1
>8233	Identifier	ray1
>8234	Argument	1
>8235	PrimaryExpression	1
>8236	Argument	3
>8237	PrimaryExpression	3
>8238	Argument	3
>8239	PrimaryExpression	3
>8240	Argument	1
>8241	PrimaryExpression	1
>8242	Callee	matrix_product
>8243	Identifier	matrix_product
>8244	IdentifierDeclStatement	 
>8245	IdentifierDecl	dot
>8246	Identifier	dot
>8247	IdentifierDeclType	double
>8248	ExpressionStatement	 
>8249	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos , cameras [ 1 ] . t , ray2 )
>8250	ArgumentList	3
>8251	Argument	ray2
>8252	Identifier	ray2
>8253	Argument	cameras [ 1 ] . t
>8254	MemberAccess	cameras [ 1 ] . t
>8255	Identifier	t
>8256	ArrayIndexing	cameras [ 1 ]
>8257	PrimaryExpression	1
>8258	Identifier	cameras
>8259	Argument	pos
>8260	Identifier	pos
>8261	Argument	1
>8262	PrimaryExpression	1
>8263	Argument	3
>8264	PrimaryExpression	3
>8265	Argument	1
>8266	PrimaryExpression	1
>8267	Argument	3
>8268	PrimaryExpression	3
>8269	Callee	matrix_diff
>8270	Identifier	matrix_diff
>8271	ExpressionStatement	 
>8272	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos , cameras [ 0 ] . t , ray1 )
>8273	ArgumentList	3
>8274	Argument	ray1
>8275	Identifier	ray1
>8276	Argument	cameras [ 0 ] . t
>8277	MemberAccess	cameras [ 0 ] . t
>8278	Identifier	t
>8279	ArrayIndexing	cameras [ 0 ]
>8280	PrimaryExpression	0
>8281	Identifier	cameras
>8282	Argument	pos
>8283	Identifier	pos
>8284	Argument	1
>8285	PrimaryExpression	1
>8286	Argument	3
>8287	PrimaryExpression	3
>8288	Argument	1
>8289	PrimaryExpression	1
>8290	Argument	3
>8291	PrimaryExpression	3
>8292	Callee	matrix_diff
>8293	Identifier	matrix_diff
>8294	IdentifierDeclStatement	 
>8295	IdentifierDecl	ray2 [ 3 ]
>8296	PrimaryExpression	3
>8297	Identifier	ray2
>8298	IdentifierDeclType	double [ 3 ]
>8299	IdentifierDecl	ray1 [ 3 ]
>8300	PrimaryExpression	3
>8301	Identifier	ray1
>8302	IdentifierDeclType	double [ 3 ]
>8303	IdentifierDeclStatement	 
>8304	IdentifierDecl	* pos = points [ i ] . p
>8305	AssignmentExpr	* pos = points [ i ] . p
>8306	MemberAccess	points [ i ] . p
>8307	Identifier	p
>8308	ArrayIndexing	points [ i ]
>8309	Identifier	i
>8310	Identifier	points
>8311	Identifier	pos
>8312	Identifier	pos
>8313	IdentifierDeclType	double *
>8314	Condition	 
>8315	RelationalExpression	( int ) pt_views [ i ] . size ( ) > 0
>8316	PrimaryExpression	0
>8317	CastExpression	( int ) pt_views [ i ] . size ( )
>8318	CallExpression	pt_views [ i ] . size ( )
>8319	ArgumentList	 
>8320	Callee	pt_views [ i ] . size
>8321	MemberAccess	pt_views [ i ] . size
>8322	Identifier	size
>8323	ArrayIndexing	pt_views [ i ]
>8324	Identifier	i
>8325	Identifier	pt_views
>8326	CastTarget	int
>8327	IncDecOp	 
>8328	IncDec	++
>8329	Identifier	i
>8330	Condition	 
>8331	RelationalExpression	i < pt_count
>8332	Identifier	pt_count
>8333	Identifier	i
>8334	ForInit	 
>8335	IdentifierDeclStatement	int i = 0 ;
>8336	IdentifierDecl	i = 0
>8337	AssignmentExpr	i = 0
>8338	PrimaryExpression	0
>8339	Identifier	i
>8340	Identifier	i
>8341	IdentifierDeclType	int
>8342	IdentifierDeclStatement	 
>8343	IdentifierDecl	* angles = new double [ pt_count ]
>8344	AssignmentExpr	* angles = new double [ pt_count ]
>8345	Identifier	pt_count
>8346	Identifier	pt_count
>8347	Identifier	angles
>8348	IdentifierDeclType	double *
>8349	IfStatement	if ( pt_count < 30 )
>8350	ExpressionStatement	 
>8351	AssignmentExpr	dist_threshold = DBL_MAX
>8352	Identifier	DBL_MAX
>8353	Identifier	dist_threshold
>8354	Condition	 
>8355	RelationalExpression	pt_count < 30
>8356	PrimaryExpression	30
>8357	Identifier	pt_count
>8358	ExpressionStatement	 
>8359	AssignmentExpr	dist_threshold = MAX ( 10000.0 , dist_threshold )
>8360	CallExpression	MAX ( 10000.0 , dist_threshold )
>8361	ArgumentList	10000.0
>8362	Argument	dist_threshold
>8363	Identifier	dist_threshold
>8364	Argument	10000.0
>8365	PrimaryExpression	10000.0
>8366	Callee	MAX
>8367	Identifier	MAX
>8368	Identifier	dist_threshold
>8369	IdentifierDeclStatement	 
>8370	IdentifierDecl	dist_threshold = kth_element_copy ( pt_count , iround ( 0.90 * pt_count ) , dists )
>8371	AssignmentExpr	dist_threshold = kth_element_copy ( pt_count , iround ( 0.90 * pt_count ) , dists )
>8372	CallExpression	kth_element_copy ( pt_count , iround ( 0.90 * pt_count ) , dists )
>8373	ArgumentList	pt_count
>8374	Argument	dists
>8375	Identifier	dists
>8376	Argument	iround ( 0.90 * pt_count )
>8377	CallExpression	iround ( 0.90 * pt_count )
>8378	ArgumentList	0.90 * pt_count
>8379	Argument	0.90 * pt_count
>8380	MultiplicativeExpression	0.90 * pt_count
>8381	Identifier	pt_count
>8382	PrimaryExpression	0.90
>8383	Callee	iround
>8384	Identifier	iround
>8385	Argument	pt_count
>8386	Identifier	pt_count
>8387	Callee	kth_element_copy
>8388	Identifier	kth_element_copy
>8389	Identifier	dist_threshold
>8390	Identifier	dist_threshold
>8391	IdentifierDeclType	double
>8392	ExpressionStatement	 
>8393	CallExpression	qsort_ascending ( )
>8394	ArgumentList	 
>8395	Callee	qsort_ascending
>8396	Identifier	qsort_ascending
>8397	ForStatement	for ( int i = 0 ; i < pt_count ; i ++ )
>8398	CompoundStatement	 
>8399	ExpressionStatement	 
>8400	AssignmentExpr	dists [ i ] = v3_magsq ( points [ i ] )
>8401	CallExpression	v3_magsq ( points [ i ] )
>8402	ArgumentList	points [ i ]
>8403	Argument	points [ i ]
>8404	ArrayIndexing	points [ i ]
>8405	Identifier	i
>8406	Identifier	points
>8407	Callee	v3_magsq
>8408	Identifier	v3_magsq
>8409	ArrayIndexing	dists [ i ]
>8410	Identifier	i
>8411	Identifier	dists
>8412	IncDecOp	 
>8413	IncDec	++
>8414	Identifier	i
>8415	Condition	 
>8416	RelationalExpression	i < pt_count
>8417	Identifier	pt_count
>8418	Identifier	i
>8419	ForInit	 
>8420	IdentifierDeclStatement	int i = 0 ;
>8421	IdentifierDecl	i = 0
>8422	AssignmentExpr	i = 0
>8423	PrimaryExpression	0
>8424	Identifier	i
>8425	Identifier	i
>8426	IdentifierDeclType	int
>8427	IdentifierDeclStatement	 
>8428	IdentifierDecl	* dists = new double [ pt_count ]
>8429	AssignmentExpr	* dists = new double [ pt_count ]
>8430	Identifier	pt_count
>8431	Identifier	pt_count
>8432	Identifier	dists
>8433	IdentifierDeclType	double *
>8434	IfStatement	if ( error0 > 0.5 )
>8435	CompoundStatement	 
>8436	ReturnStatement	 
>8437	Identifier	false
>8438	ExpressionStatement	 
>8439	CallExpression	ClearKeys ( m_image_data [ i2 ] )
>8440	ArgumentList	m_image_data [ i2 ]
>8441	Argument	m_image_data [ i2 ]
>8442	ArrayIndexing	m_image_data [ i2 ]
>8443	Identifier	i2
>8444	Identifier	m_image_data
>8445	Callee	ClearKeys
>8446	Identifier	ClearKeys
>8447	ExpressionStatement	 
>8448	CallExpression	ClearKeys ( m_image_data [ i1 ] )
>8449	ArgumentList	m_image_data [ i1 ]
>8450	Argument	m_image_data [ i1 ]
>8451	ArrayIndexing	m_image_data [ i1 ]
>8452	Identifier	i1
>8453	Identifier	m_image_data
>8454	Callee	ClearKeys
>8455	Identifier	ClearKeys
>8456	ExpressionStatement	 
>8457	Identifier	points
>8458	Statement	 
>8459	Statement	 
>8460	Statement	 
>8461	ExpressionStatement	 
>8462	CallExpression	DumpPointsToPly ( m_output_directory , buf , pt_count , 2 , model -> m_points , colors , cameras_tmp , false )
>8463	ArgumentList	m_output_directory
>8464	Argument	false
>8465	Identifier	false
>8466	Argument	cameras_tmp
>8467	Identifier	cameras_tmp
>8468	Argument	colors
>8469	Identifier	colors
>8470	Argument	model -> m_points
>8471	PtrMemberAccess	model -> m_points
>8472	Identifier	m_points
>8473	Identifier	model
>8474	Argument	2
>8475	PrimaryExpression	2
>8476	Argument	pt_count
>8477	Identifier	pt_count
>8478	Argument	buf
>8479	Identifier	buf
>8480	Argument	m_output_directory
>8481	Identifier	m_output_directory
>8482	Callee	DumpPointsToPly
>8483	Identifier	DumpPointsToPly
>8484	ExpressionStatement	 
>8485	CallExpression	sprintf ( buf , \"model-%03d-%03d.ply\" , i1 , i2 )
>8486	ArgumentList	buf
>8487	Argument	i2
>8488	Identifier	i2
>8489	Argument	i1
>8490	Identifier	i1
>8491	Argument	\"model-%03d-%03d.ply\"
>8492	PrimaryExpression	\"model-%03d-%03d.ply\"
>8493	Argument	buf
>8494	Identifier	buf
>8495	Callee	sprintf
>8496	Identifier	sprintf
>8497	IdentifierDeclStatement	 
>8498	IdentifierDecl	cameras_tmp [ 2 ] = { model -> m_camera0 , model -> m_camera1 }
>8499	AssignmentExpr	cameras_tmp [ 2 ] = { model -> m_camera0 , model -> m_camera1 }
>8500	InitializerList	model -> m_camera0
>8501	PtrMemberAccess	model -> m_camera1
>8502	Identifier	m_camera1
>8503	Identifier	model
>8504	PtrMemberAccess	model -> m_camera0
>8505	Identifier	m_camera0
>8506	Identifier	model
>8507	Identifier	cameras_tmp
>8508	PrimaryExpression	2
>8509	Identifier	cameras_tmp
>8510	IdentifierDeclType	camera_params_t [ 2 ]
>8511	IdentifierDeclStatement	 
>8512	IdentifierDecl	buf [ 256 ]
>8513	PrimaryExpression	256
>8514	Identifier	buf
>8515	IdentifierDeclType	char [ 256 ]
>8516	ExpressionStatement	 
>8517	Statement	 
>8518	Statement	 
>8519	Statement	 
>8520	Statement	 
>8521	Statement	 
>8522	Statement	 
>8523	Statement	 
>8524	Statement	 
>8525	Statement	 
>8526	Statement	 
>8527	Statement	 
>8528	Statement	 
>8529	Statement	 
>8530	Condition	 
>8531	RelationalExpression	error0 > 0.5
>8532	PrimaryExpression	0.5
>8533	Identifier	error0
>8534	ExpressionStatement	 
>8535	CallExpression	pt_views_new . clear ( )
>8536	ArgumentList	 
>8537	Callee	pt_views_new . clear
>8538	MemberAccess	pt_views_new . clear
>8539	Identifier	clear
>8540	Identifier	pt_views_new
>8541	ExpressionStatement	 
>8542	Identifier	points_new
>8543	Statement	 
>8544	Statement	 
>8545	Statement	 
>8546	IfStatement	if ( error1 < error0 )
>8547	ElseStatement	else
>8548	CompoundStatement	 
>8549	ExpressionStatement	 
>8550	CallExpression	printf ( \"  Keeping initial solution (%0.3f < %0.3f)\n\" , error0 , error1 )
>8551	ArgumentList	\"  Keeping initial solution (%0.3f < %0.3f)\n\"
>8552	Argument	error1
>8553	Identifier	error1
>8554	Argument	error0
>8555	Identifier	error0
>8556	Argument	\"  Keeping initial solution (%0.3f < %0.3f)\n\"
>8557	PrimaryExpression	\"  Keeping initial solution (%0.3f < %0.3f)\n\"
>8558	Callee	printf
>8559	Identifier	printf
>8560	CompoundStatement	 
>8561	ExpressionStatement	 
>8562	AssignmentExpr	pt_views = pt_views_new
>8563	Identifier	pt_views_new
>8564	Identifier	pt_views
>8565	ExpressionStatement	 
>8566	CallExpression	memcpy ( cameras , cameras_new , 2 * sizeof ( camera_params_t ) )
>8567	ArgumentList	cameras
>8568	Argument	2 * sizeof ( camera_params_t )
>8569	MultiplicativeExpression	2 * sizeof ( camera_params_t )
>8570	SizeofExpr	sizeof ( camera_params_t )
>8571	SizeofOperand	camera_params_t
>8572	Sizeof	sizeof
>8573	PrimaryExpression	2
>8574	Argument	cameras_new
>8575	Identifier	cameras_new
>8576	Argument	cameras
>8577	Identifier	cameras
>8578	Callee	memcpy
>8579	Identifier	memcpy
>8580	ExpressionStatement	 
>8581	CallExpression	memcpy ( points , points_new , pt_count * sizeof ( v3_t ) )
>8582	ArgumentList	points
>8583	Argument	pt_count * sizeof ( v3_t )
>8584	MultiplicativeExpression	pt_count * sizeof ( v3_t )
>8585	SizeofExpr	sizeof ( v3_t )
>8586	SizeofOperand	v3_t
>8587	Sizeof	sizeof
>8588	Identifier	pt_count
>8589	Argument	points_new
>8590	Identifier	points_new
>8591	Argument	points
>8592	Identifier	points
>8593	Callee	memcpy
>8594	Identifier	memcpy
>8595	ExpressionStatement	 
>8596	CallExpression	printf ( \"  Switching to reflected solution (%0.3f < %0.3f)\n\" , error1 , error0 )
>8597	ArgumentList	\"  Switching to reflected solution (%0.3f < %0.3f)\n\"
>8598	Argument	error0
>8599	Identifier	error0
>8600	Argument	error1
>8601	Identifier	error1
>8602	Argument	\"  Switching to reflected solution (%0.3f < %0.3f)\n\"
>8603	PrimaryExpression	\"  Switching to reflected solution (%0.3f < %0.3f)\n\"
>8604	Callee	printf
>8605	Identifier	printf
>8606	Condition	 
>8607	RelationalExpression	error1 < error0
>8608	Identifier	error0
>8609	Identifier	error1
>8610	IdentifierDeclStatement	 
>8611	IdentifierDecl	error = MIN ( error0 , error1 )
>8612	AssignmentExpr	error = MIN ( error0 , error1 )
>8613	CallExpression	MIN ( error0 , error1 )
>8614	ArgumentList	error0
>8615	Argument	error1
>8616	Identifier	error1
>8617	Argument	error0
>8618	Identifier	error0
>8619	Callee	MIN
>8620	Identifier	MIN
>8621	Identifier	error
>8622	Identifier	error
>8623	IdentifierDeclType	double
>8624	IdentifierDeclStatement	 
>8625	IdentifierDecl	error1 = RunSFMNecker ( i1 , i2 , cameras , pt_count , points , colors , pt_views_new , cameras_new , points_new , \
>8626	AssignmentExpr	error1 = RunSFMNecker ( i1 , i2 , cameras , pt_count , points , colors , pt_views_new , cameras_new , \
>8627	CallExpression	RunSFMNecker ( i1 , i2 , cameras , pt_count , points , colors , pt_views_new , cameras_new , points_new , TERM_THRESH )
>8628	ArgumentList	i1
>8629	Argument	TERM_THRESH
>8630	Identifier	TERM_THRESH
>8631	Argument	points_new
>8632	Identifier	points_new
>8633	Argument	cameras_new
>8634	Identifier	cameras_new
>8635	Argument	pt_views_new
>8636	Identifier	pt_views_new
>8637	Argument	colors
>8638	Identifier	colors
>8639	Argument	points
>8640	Identifier	points
>8641	Argument	pt_count
>8642	Identifier	pt_count
>8643	Argument	cameras
>8644	Identifier	cameras
>8645	Argument	i2
>8646	Identifier	i2
>8647	Argument	i1
>8648	Identifier	i1
>8649	Callee	RunSFMNecker
>8650	Identifier	RunSFMNecker
>8651	Identifier	error1
>8652	Identifier	error1
>8653	IdentifierDeclType	double
>8654	IdentifierDeclStatement	 
>8655	IdentifierDecl	* points_new = new v3_t [ pt_count ]
>8656	AssignmentExpr	* points_new = new v3_t [ pt_count ]
>8657	Identifier	pt_count
>8658	Identifier	pt_count
>8659	Identifier	points_new
>8660	IdentifierDeclType	v3_t *
>8661	IdentifierDeclStatement	 
>8662	IdentifierDecl	cameras_new [ 2 ]
>8663	PrimaryExpression	2
>8664	Identifier	cameras_new
>8665	IdentifierDeclType	camera_params_t [ 2 ]
>8666	IdentifierDeclStatement	 
>8667	IdentifierDecl	error0 = RunSFM_SBA ( pt_count , 2 , 0 , false , cameras , points , added_order , colors , pt_views , TERM_THRESH , \
>8668	AssignmentExpr	error0 = RunSFM_SBA ( pt_count , 2 , 0 , false , cameras , points , added_order , colors , pt_views , \
>8669	CallExpression	RunSFM_SBA ( pt_count , 2 , 0 , false , cameras , points , added_order , colors , pt_views , TERM_THRESH , NULL , \
>8670	ArgumentList	pt_count
>8671	Argument	true
>8672	Identifier	true
>8673	Argument	NULL
>8674	Identifier	NULL
>8675	Argument	NULL
>8676	Identifier	NULL
>8677	Argument	NULL
>8678	Identifier	NULL
>8679	Argument	NULL
>8680	Identifier	NULL
>8681	Argument	TERM_THRESH
>8682	Identifier	TERM_THRESH
>8683	Argument	pt_views
>8684	Identifier	pt_views
>8685	Argument	colors
>8686	Identifier	colors
>8687	Argument	added_order
>8688	Identifier	added_order
>8689	Argument	points
>8690	Identifier	points
>8691	Argument	cameras
>8692	Identifier	cameras
>8693	Argument	false
>8694	Identifier	false
>8695	Argument	0
>8696	PrimaryExpression	0
>8697	Argument	2
>8698	PrimaryExpression	2
>8699	Argument	pt_count
>8700	Identifier	pt_count
>8701	Callee	RunSFM_SBA
>8702	Identifier	RunSFM_SBA
>8703	Identifier	error0
>8704	Identifier	error0
>8705	IdentifierDeclType	double
>8706	IdentifierDeclStatement	 
>8707	IdentifierDecl	added_order [ 2 ] = { i1 , i2 }
>8708	AssignmentExpr	added_order [ 2 ] = { i1 , i2 }
>8709	InitializerList	i1
>8710	Identifier	i2
>8711	Identifier	i1
>8712	Identifier	added_order
>8713	PrimaryExpression	2
>8714	Identifier	added_order
>8715	IdentifierDeclType	int [ 2 ]
>8716	ExpressionStatement	 
>8717	AssignmentExpr	cameras [ 1 ] . weights [ 8 ] = 1.0e2
>8718	PrimaryExpression	1.0e2
>8719	ArrayIndexing	cameras [ 1 ] . weights [ 8 ]
>8720	PrimaryExpression	8
>8721	MemberAccess	cameras [ 1 ] . weights
>8722	Identifier	weights
>8723	ArrayIndexing	cameras [ 1 ]
>8724	PrimaryExpression	1
>8725	Identifier	cameras
>8726	ExpressionStatement	 
>8727	AssignmentExpr	cameras [ 1 ] . weights [ 7 ] = 1.0e2
>8728	PrimaryExpression	1.0e2
>8729	ArrayIndexing	cameras [ 1 ] . weights [ 7 ]
>8730	PrimaryExpression	7
>8731	MemberAccess	cameras [ 1 ] . weights
>8732	Identifier	weights
>8733	ArrayIndexing	cameras [ 1 ]
>8734	PrimaryExpression	1
>8735	Identifier	cameras
>8736	ExpressionStatement	 
>8737	AssignmentExpr	cameras [ 1 ] . constraints [ 8 ] = 0.0
>8738	PrimaryExpression	0.0
>8739	ArrayIndexing	cameras [ 1 ] . constraints [ 8 ]
>8740	PrimaryExpression	8
>8741	MemberAccess	cameras [ 1 ] . constraints
>8742	Identifier	constraints
>8743	ArrayIndexing	cameras [ 1 ]
>8744	PrimaryExpression	1
>8745	Identifier	cameras
>8746	ExpressionStatement	 
>8747	AssignmentExpr	cameras [ 1 ] . constraints [ 7 ] = 0.0
>8748	PrimaryExpression	0.0
>8749	ArrayIndexing	cameras [ 1 ] . constraints [ 7 ]
>8750	PrimaryExpression	7
>8751	MemberAccess	cameras [ 1 ] . constraints
>8752	Identifier	constraints
>8753	ArrayIndexing	cameras [ 1 ]
>8754	PrimaryExpression	1
>8755	Identifier	cameras
>8756	ExpressionStatement	 
>8757	AssignmentExpr	cameras [ 1 ] . constrained [ 8 ] = true
>8758	Identifier	true
>8759	ArrayIndexing	cameras [ 1 ] . constrained [ 8 ]
>8760	PrimaryExpression	8
>8761	MemberAccess	cameras [ 1 ] . constrained
>8762	Identifier	constrained
>8763	ArrayIndexing	cameras [ 1 ]
>8764	PrimaryExpression	1
>8765	Identifier	cameras
>8766	ExpressionStatement	 
>8767	AssignmentExpr	cameras [ 1 ] . constrained [ 7 ] = true
>8768	Identifier	true
>8769	ArrayIndexing	cameras [ 1 ] . constrained [ 7 ]
>8770	PrimaryExpression	7
>8771	MemberAccess	cameras [ 1 ] . constrained
>8772	Identifier	constrained
>8773	ArrayIndexing	cameras [ 1 ]
>8774	PrimaryExpression	1
>8775	Identifier	cameras
>8776	ExpressionStatement	 
>8777	AssignmentExpr	cameras [ 0 ] . weights [ 8 ] = 1.0e2
>8778	PrimaryExpression	1.0e2
>8779	ArrayIndexing	cameras [ 0 ] . weights [ 8 ]
>8780	PrimaryExpression	8
>8781	MemberAccess	cameras [ 0 ] . weights
>8782	Identifier	weights
>8783	ArrayIndexing	cameras [ 0 ]
>8784	PrimaryExpression	0
>8785	Identifier	cameras
>8786	ExpressionStatement	 
>8787	AssignmentExpr	cameras [ 0 ] . weights [ 7 ] = 1.0e2
>8788	PrimaryExpression	1.0e2
>8789	ArrayIndexing	cameras [ 0 ] . weights [ 7 ]
>8790	PrimaryExpression	7
>8791	MemberAccess	cameras [ 0 ] . weights
>8792	Identifier	weights
>8793	ArrayIndexing	cameras [ 0 ]
>8794	PrimaryExpression	0
>8795	Identifier	cameras
>8796	ExpressionStatement	 
>8797	AssignmentExpr	cameras [ 0 ] . constraints [ 8 ] = 0.0
>8798	PrimaryExpression	0.0
>8799	ArrayIndexing	cameras [ 0 ] . constraints [ 8 ]
>8800	PrimaryExpression	8
>8801	MemberAccess	cameras [ 0 ] . constraints
>8802	Identifier	constraints
>8803	ArrayIndexing	cameras [ 0 ]
>8804	PrimaryExpression	0
>8805	Identifier	cameras
>8806	ExpressionStatement	 
>8807	AssignmentExpr	cameras [ 0 ] . constraints [ 7 ] = 0.0
>8808	PrimaryExpression	0.0
>8809	ArrayIndexing	cameras [ 0 ] . constraints [ 7 ]
>8810	PrimaryExpression	7
>8811	MemberAccess	cameras [ 0 ] . constraints
>8812	Identifier	constraints
>8813	ArrayIndexing	cameras [ 0 ]
>8814	PrimaryExpression	0
>8815	Identifier	cameras
>8816	ExpressionStatement	 
>8817	AssignmentExpr	cameras [ 0 ] . constrained [ 8 ] = true
>8818	Identifier	true
>8819	ArrayIndexing	cameras [ 0 ] . constrained [ 8 ]
>8820	PrimaryExpression	8
>8821	MemberAccess	cameras [ 0 ] . constrained
>8822	Identifier	constrained
>8823	ArrayIndexing	cameras [ 0 ]
>8824	PrimaryExpression	0
>8825	Identifier	cameras
>8826	ExpressionStatement	 
>8827	AssignmentExpr	cameras [ 0 ] . constrained [ 7 ] = true
>8828	Identifier	true
>8829	ArrayIndexing	cameras [ 0 ] . constrained [ 7 ]
>8830	PrimaryExpression	7
>8831	MemberAccess	cameras [ 0 ] . constrained
>8832	Identifier	constrained
>8833	ArrayIndexing	cameras [ 0 ]
>8834	PrimaryExpression	0
>8835	Identifier	cameras
>8836	ExpressionStatement	 
>8837	AssignmentExpr	cameras [ 0 ] . weights [ 5 ] = 1.0e6
>8838	PrimaryExpression	1.0e6
>8839	ArrayIndexing	cameras [ 0 ] . weights [ 5 ]
>8840	PrimaryExpression	5
>8841	MemberAccess	cameras [ 0 ] . weights
>8842	Identifier	weights
>8843	ArrayIndexing	cameras [ 0 ]
>8844	PrimaryExpression	0
>8845	Identifier	cameras
>8846	ExpressionStatement	 
>8847	AssignmentExpr	cameras [ 0 ] . weights [ 4 ] = 1.0e6
>8848	PrimaryExpression	1.0e6
>8849	ArrayIndexing	cameras [ 0 ] . weights [ 4 ]
>8850	PrimaryExpression	4
>8851	MemberAccess	cameras [ 0 ] . weights
>8852	Identifier	weights
>8853	ArrayIndexing	cameras [ 0 ]
>8854	PrimaryExpression	0
>8855	Identifier	cameras
>8856	ExpressionStatement	 
>8857	AssignmentExpr	cameras [ 0 ] . weights [ 3 ] = 1.0e6
>8858	PrimaryExpression	1.0e6
>8859	ArrayIndexing	cameras [ 0 ] . weights [ 3 ]
>8860	PrimaryExpression	3
>8861	MemberAccess	cameras [ 0 ] . weights
>8862	Identifier	weights
>8863	ArrayIndexing	cameras [ 0 ]
>8864	PrimaryExpression	0
>8865	Identifier	cameras
>8866	ExpressionStatement	 
>8867	AssignmentExpr	cameras [ 0 ] . weights [ 2 ] = 1.0e6
>8868	PrimaryExpression	1.0e6
>8869	ArrayIndexing	cameras [ 0 ] . weights [ 2 ]
>8870	PrimaryExpression	2
>8871	MemberAccess	cameras [ 0 ] . weights
>8872	Identifier	weights
>8873	ArrayIndexing	cameras [ 0 ]
>8874	PrimaryExpression	0
>8875	Identifier	cameras
>8876	ExpressionStatement	 
>8877	AssignmentExpr	cameras [ 0 ] . weights [ 1 ] = 1.0e6
>8878	PrimaryExpression	1.0e6
>8879	ArrayIndexing	cameras [ 0 ] . weights [ 1 ]
>8880	PrimaryExpression	1
>8881	MemberAccess	cameras [ 0 ] . weights
>8882	Identifier	weights
>8883	ArrayIndexing	cameras [ 0 ]
>8884	PrimaryExpression	0
>8885	Identifier	cameras
>8886	ExpressionStatement	 
>8887	AssignmentExpr	cameras [ 0 ] . weights [ 0 ] = 1.0e6
>8888	PrimaryExpression	1.0e6
>8889	ArrayIndexing	cameras [ 0 ] . weights [ 0 ]
>8890	PrimaryExpression	0
>8891	MemberAccess	cameras [ 0 ] . weights
>8892	Identifier	weights
>8893	ArrayIndexing	cameras [ 0 ]
>8894	PrimaryExpression	0
>8895	Identifier	cameras
>8896	ExpressionStatement	 
>8897	AssignmentExpr	cameras [ 0 ] . constraints [ 5 ] = 0.0
>8898	PrimaryExpression	0.0
>8899	ArrayIndexing	cameras [ 0 ] . constraints [ 5 ]
>8900	PrimaryExpression	5
>8901	MemberAccess	cameras [ 0 ] . constraints
>8902	Identifier	constraints
>8903	ArrayIndexing	cameras [ 0 ]
>8904	PrimaryExpression	0
>8905	Identifier	cameras
>8906	ExpressionStatement	 
>8907	AssignmentExpr	cameras [ 0 ] . constraints [ 4 ] = 0.0
>8908	PrimaryExpression	0.0
>8909	ArrayIndexing	cameras [ 0 ] . constraints [ 4 ]
>8910	PrimaryExpression	4
>8911	MemberAccess	cameras [ 0 ] . constraints
>8912	Identifier	constraints
>8913	ArrayIndexing	cameras [ 0 ]
>8914	PrimaryExpression	0
>8915	Identifier	cameras
>8916	ExpressionStatement	 
>8917	AssignmentExpr	cameras [ 0 ] . constraints [ 3 ] = 0.0
>8918	PrimaryExpression	0.0
>8919	ArrayIndexing	cameras [ 0 ] . constraints [ 3 ]
>8920	PrimaryExpression	3
>8921	MemberAccess	cameras [ 0 ] . constraints
>8922	Identifier	constraints
>8923	ArrayIndexing	cameras [ 0 ]
>8924	PrimaryExpression	0
>8925	Identifier	cameras
>8926	ExpressionStatement	 
>8927	AssignmentExpr	cameras [ 0 ] . constraints [ 2 ] = 0.0
>8928	PrimaryExpression	0.0
>8929	ArrayIndexing	cameras [ 0 ] . constraints [ 2 ]
>8930	PrimaryExpression	2
>8931	MemberAccess	cameras [ 0 ] . constraints
>8932	Identifier	constraints
>8933	ArrayIndexing	cameras [ 0 ]
>8934	PrimaryExpression	0
>8935	Identifier	cameras
>8936	ExpressionStatement	 
>8937	AssignmentExpr	cameras [ 0 ] . constraints [ 1 ] = 0.0
>8938	PrimaryExpression	0.0
>8939	ArrayIndexing	cameras [ 0 ] . constraints [ 1 ]
>8940	PrimaryExpression	1
>8941	MemberAccess	cameras [ 0 ] . constraints
>8942	Identifier	constraints
>8943	ArrayIndexing	cameras [ 0 ]
>8944	PrimaryExpression	0
>8945	Identifier	cameras
>8946	ExpressionStatement	 
>8947	AssignmentExpr	cameras [ 0 ] . constraints [ 0 ] = 0.0
>8948	PrimaryExpression	0.0
>8949	ArrayIndexing	cameras [ 0 ] . constraints [ 0 ]
>8950	PrimaryExpression	0
>8951	MemberAccess	cameras [ 0 ] . constraints
>8952	Identifier	constraints
>8953	ArrayIndexing	cameras [ 0 ]
>8954	PrimaryExpression	0
>8955	Identifier	cameras
>8956	ExpressionStatement	 
>8957	AssignmentExpr	cameras [ 0 ] . constrained [ 5 ] = true
>8958	Identifier	true
>8959	ArrayIndexing	cameras [ 0 ] . constrained [ 5 ]
>8960	PrimaryExpression	5
>8961	MemberAccess	cameras [ 0 ] . constrained
>8962	Identifier	constrained
>8963	ArrayIndexing	cameras [ 0 ]
>8964	PrimaryExpression	0
>8965	Identifier	cameras
>8966	ExpressionStatement	 
>8967	AssignmentExpr	cameras [ 0 ] . constrained [ 4 ] = true
>8968	Identifier	true
>8969	ArrayIndexing	cameras [ 0 ] . constrained [ 4 ]
>8970	PrimaryExpression	4
>8971	MemberAccess	cameras [ 0 ] . constrained
>8972	Identifier	constrained
>8973	ArrayIndexing	cameras [ 0 ]
>8974	PrimaryExpression	0
>8975	Identifier	cameras
>8976	ExpressionStatement	 
>8977	AssignmentExpr	cameras [ 0 ] . constrained [ 3 ] = true
>8978	Identifier	true
>8979	ArrayIndexing	cameras [ 0 ] . constrained [ 3 ]
>8980	PrimaryExpression	3
>8981	MemberAccess	cameras [ 0 ] . constrained
>8982	Identifier	constrained
>8983	ArrayIndexing	cameras [ 0 ]
>8984	PrimaryExpression	0
>8985	Identifier	cameras
>8986	ExpressionStatement	 
>8987	AssignmentExpr	cameras [ 0 ] . constrained [ 2 ] = true
>8988	Identifier	true
>8989	ArrayIndexing	cameras [ 0 ] . constrained [ 2 ]
>8990	PrimaryExpression	2
>8991	MemberAccess	cameras [ 0 ] . constrained
>8992	Identifier	constrained
>8993	ArrayIndexing	cameras [ 0 ]
>8994	PrimaryExpression	0
>8995	Identifier	cameras
>8996	ExpressionStatement	 
>8997	AssignmentExpr	cameras [ 0 ] . constrained [ 1 ] = true
>8998	Identifier	true
>8999	ArrayIndexing	cameras [ 0 ] . constrained [ 1 ]
>9000	PrimaryExpression	1
>9001	MemberAccess	cameras [ 0 ] . constrained
>9002	Identifier	constrained
>9003	ArrayIndexing	cameras [ 0 ]
>9004	PrimaryExpression	0
>9005	Identifier	cameras
>9006	ExpressionStatement	 
>9007	AssignmentExpr	cameras [ 0 ] . constrained [ 0 ] = true
>9008	Identifier	true
>9009	ArrayIndexing	cameras [ 0 ] . constrained [ 0 ]
>9010	PrimaryExpression	0
>9011	MemberAccess	cameras [ 0 ] . constrained
>9012	Identifier	constrained
>9013	ArrayIndexing	cameras [ 0 ]
>9014	PrimaryExpression	0
>9015	Identifier	cameras
>9016	ExpressionStatement	 
>9017	CallExpression	matches . clear ( )
>9018	ArgumentList	 
>9019	Callee	matches . clear
>9020	MemberAccess	matches . clear
>9021	Identifier	clear
>9022	Identifier	matches
>9023	ExpressionStatement	 
>9024	CallExpression	m_matches . ClearMatch ( list_idx )
>9025	ArgumentList	list_idx
>9026	Argument	list_idx
>9027	Identifier	list_idx
>9028	Callee	m_matches . ClearMatch
>9029	MemberAccess	m_matches . ClearMatch
>9030	Identifier	ClearMatch
>9031	Identifier	m_matches
>9032	IfStatement	if ( pt_count < 20 )
>9033	CompoundStatement	 
>9034	ReturnStatement	 
>9035	Identifier	false
>9036	ExpressionStatement	 
>9037	CallExpression	ClearKeys ( m_image_data [ i2 ] )
>9038	ArgumentList	m_image_data [ i2 ]
>9039	Argument	m_image_data [ i2 ]
>9040	ArrayIndexing	m_image_data [ i2 ]
>9041	Identifier	i2
>9042	Identifier	m_image_data
>9043	Callee	ClearKeys
>9044	Identifier	ClearKeys
>9045	ExpressionStatement	 
>9046	CallExpression	ClearKeys ( m_image_data [ i1 ] )
>9047	ArgumentList	m_image_data [ i1 ]
>9048	Argument	m_image_data [ i1 ]
>9049	ArrayIndexing	m_image_data [ i1 ]
>9050	Identifier	i1
>9051	Identifier	m_image_data
>9052	Callee	ClearKeys
>9053	Identifier	ClearKeys
>9054	Condition	 
>9055	RelationalExpression	pt_count < 20
>9056	PrimaryExpression	20
>9057	Identifier	pt_count
>9058	IfStatement	if ( ( double ) num_in_back / num_matches > 0.30 )
>9059	CompoundStatement	 
>9060	ReturnStatement	 
>9061	Identifier	false
>9062	ExpressionStatement	 
>9063	CallExpression	ClearKeys ( m_image_data [ i2 ] )
>9064	ArgumentList	m_image_data [ i2 ]
>9065	Argument	m_image_data [ i2 ]
>9066	ArrayIndexing	m_image_data [ i2 ]
>9067	Identifier	i2
>9068	Identifier	m_image_data
>9069	Callee	ClearKeys
>9070	Identifier	ClearKeys
>9071	ExpressionStatement	 
>9072	CallExpression	ClearKeys ( m_image_data [ i1 ] )
>9073	ArgumentList	m_image_data [ i1 ]
>9074	Argument	m_image_data [ i1 ]
>9075	ArrayIndexing	m_image_data [ i1 ]
>9076	Identifier	i1
>9077	Identifier	m_image_data
>9078	Callee	ClearKeys
>9079	Identifier	ClearKeys
>9080	ExpressionStatement	 
>9081	Statement	 
>9082	Statement	 
>9083	Statement	 
>9084	Statement	 
>9085	Statement	 
>9086	Statement	 
>9087	Statement	 
>9088	Statement	 
>9089	Statement	 
>9090	Statement	 
>9091	Statement	 
>9092	Statement	 
>9093	Statement	 
>9094	Statement	 
>9095	Statement	 
>9096	Condition	 
>9097	RelationalExpression	( double ) num_in_back / num_matches > 0.30
>9098	PrimaryExpression	0.30
>9099	MultiplicativeExpression	( double ) num_in_back / num_matches
>9100	Identifier	num_matches
>9101	CastExpression	( double ) num_in_back
>9102	Identifier	num_in_back
>9103	CastTarget	double
>9104	IfStatement	if ( RAD2DEG ( angle_avg ) < 0.5 )
>9105	CompoundStatement	 
>9106	ReturnStatement	 
>9107	Identifier	false
>9108	ExpressionStatement	 
>9109	CallExpression	ClearKeys ( m_image_data [ i2 ] )
>9110	ArgumentList	m_image_data [ i2 ]
>9111	Argument	m_image_data [ i2 ]
>9112	ArrayIndexing	m_image_data [ i2 ]
>9113	Identifier	i2
>9114	Identifier	m_image_data
>9115	Callee	ClearKeys
>9116	Identifier	ClearKeys
>9117	ExpressionStatement	 
>9118	CallExpression	ClearKeys ( m_image_data [ i1 ] )
>9119	ArgumentList	m_image_data [ i1 ]
>9120	Argument	m_image_data [ i1 ]
>9121	ArrayIndexing	m_image_data [ i1 ]
>9122	Identifier	i1
>9123	Identifier	m_image_data
>9124	Callee	ClearKeys
>9125	Identifier	ClearKeys
>9126	ExpressionStatement	 
>9127	Statement	 
>9128	Statement	 
>9129	Statement	 
>9130	Statement	 
>9131	Statement	 
>9132	Condition	 
>9133	RelationalExpression	RAD2DEG ( angle_avg ) < 0.5
>9134	PrimaryExpression	0.5
>9135	CallExpression	RAD2DEG ( angle_avg )
>9136	ArgumentList	angle_avg
>9137	Argument	angle_avg
>9138	Identifier	angle_avg
>9139	Callee	RAD2DEG
>9140	Identifier	RAD2DEG
>9141	ExpressionStatement	 
>9142	AssignmentExpr	num_pts_out = pt_count
>9143	Identifier	pt_count
>9144	Identifier	num_pts_out
>9145	ExpressionStatement	 
>9146	AssignmentExpr	angle_out = RAD2DEG ( angle_avg )
>9147	CallExpression	RAD2DEG ( angle_avg )
>9148	ArgumentList	angle_avg
>9149	Argument	angle_avg
>9150	Identifier	angle_avg
>9151	Callee	RAD2DEG
>9152	Identifier	RAD2DEG
>9153	Identifier	angle_out
>9154	ExpressionStatement	 
>9155	CallExpression	fflush ( stdout )
>9156	ArgumentList	stdout
>9157	Argument	stdout
>9158	Identifier	stdout
>9159	Callee	fflush
>9160	Identifier	fflush
>9161	ExpressionStatement	 
>9162	CallExpression	printf ( \"  Skipped pct  
>9163	ArgumentList	\"  Skipped pct  
>9164	Argument	100.0 * num_skipped / num_matches
>9165	MultiplicativeExpression	100.0 * num_skipped / num_matches
>9166	MultiplicativeExpression	num_skipped / num_matches
>9167	Identifier	num_matches
>9168	Identifier	num_skipped
>9169	PrimaryExpression	100.0
>9170	Argument	num_matches
>9171	Identifier	num_matches
>9172	Argument	num_skipped
>9173	Identifier	num_skipped
>9174	Argument	\"  Skipped pct  
>9175	PrimaryExpression	\"  Skipped pct  
>9176	Callee	printf
>9177	Identifier	printf
>9178	ExpressionStatement	 
>9179	CallExpression	printf ( \"  In-back pct  
>9180	ArgumentList	\"  In-back pct  
>9181	Argument	100.0 * num_in_back / num_matches
>9182	MultiplicativeExpression	100.0 * num_in_back / num_matches
>9183	MultiplicativeExpression	num_in_back / num_matches
>9184	Identifier	num_matches
>9185	Identifier	num_in_back
>9186	PrimaryExpression	100.0
>9187	Argument	num_matches
>9188	Identifier	num_matches
>9189	Argument	num_in_back
>9190	Identifier	num_in_back
>9191	Argument	\"  In-back pct  
>9192	PrimaryExpression	\"  In-back pct  
>9193	Callee	printf
>9194	Identifier	printf
>9195	ExpressionStatement	 
>9196	CallExpression	printf ( \"  Average angle
>9197	ArgumentList	\"  Average angle
>9198	Argument	RAD2DEG ( angle_avg )
>9199	CallExpression	RAD2DEG ( angle_avg )
>9200	ArgumentList	angle_avg
>9201	Argument	angle_avg
>9202	Identifier	angle_avg
>9203	Callee	RAD2DEG
>9204	Identifier	RAD2DEG
>9205	Argument	\"  Average angle
>9206	PrimaryExpression	\"  Average angle
>9207	Callee	printf
>9208	Identifier	printf
>9209	IdentifierDeclStatement	 
>9210	IdentifierDecl	angle_avg = angle_sum / pt_count
>9211	AssignmentExpr	angle_avg = angle_sum / pt_count
>9212	MultiplicativeExpression	angle_sum / pt_count
>9213	Identifier	pt_count
>9214	Identifier	angle_sum
>9215	Identifier	angle_avg
>9216	Identifier	angle_avg
>9217	IdentifierDeclType	double
>9218	ExpressionStatement	 
>9219	CallExpression	img_free ( pt_img2 )
>9220	ArgumentList	pt_img2
>9221	Argument	pt_img2
>9222	Identifier	pt_img2
>9223	Callee	img_free
>9224	Identifier	img_free
>9225	ExpressionStatement	 
>9226	CallExpression	img_free ( pt_img1 )
>9227	ArgumentList	pt_img1
>9228	Argument	pt_img1
>9229	Identifier	pt_img1
>9230	Callee	img_free
>9231	Identifier	img_free
>9232	ExpressionStatement	 
>9233	CallExpression	img_write_bmp_file ( pt_img2 , ptbuf )
>9234	ArgumentList	pt_img2
>9235	Argument	ptbuf
>9236	Identifier	ptbuf
>9237	Argument	pt_img2
>9238	Identifier	pt_img2
>9239	Callee	img_write_bmp_file
>9240	Identifier	img_write_bmp_file
>9241	ExpressionStatement	 
>9242	CallExpression	sprintf ( ptbuf , \"pt%03d-%03d.bmp\" , i2 , i1 )
>9243	ArgumentList	ptbuf
>9244	Argument	i1
>9245	Identifier	i1
>9246	Argument	i2
>9247	Identifier	i2
>9248	Argument	\"pt%03d-%03d.bmp\"
>9249	PrimaryExpression	\"pt%03d-%03d.bmp\"
>9250	Argument	ptbuf
>9251	Identifier	ptbuf
>9252	Callee	sprintf
>9253	Identifier	sprintf
>9254	ExpressionStatement	 
>9255	CallExpression	img_write_bmp_file ( pt_img1 , ptbuf )
>9256	ArgumentList	pt_img1
>9257	Argument	ptbuf
>9258	Identifier	ptbuf
>9259	Argument	pt_img1
>9260	Identifier	pt_img1
>9261	Callee	img_write_bmp_file
>9262	Identifier	img_write_bmp_file
>9263	ExpressionStatement	 
>9264	CallExpression	sprintf ( ptbuf , \"pt%03d-%03d.bmp\" , i1 , i2 )
>9265	ArgumentList	ptbuf
>9266	Argument	i2
>9267	Identifier	i2
>9268	Argument	i1
>9269	Identifier	i1
>9270	Argument	\"pt%03d-%03d.bmp\"
>9271	PrimaryExpression	\"pt%03d-%03d.bmp\"
>9272	Argument	ptbuf
>9273	Identifier	ptbuf
>9274	Callee	sprintf
>9275	Identifier	sprintf
>9276	IdentifierDeclStatement	 
>9277	IdentifierDecl	ptbuf [ 256 ]
>9278	PrimaryExpression	256
>9279	Identifier	ptbuf
>9280	IdentifierDeclType	char [ 256 ]
>9281	ForStatement	for ( unsigned int i = 0 ; i < num_matches ; i ++ )
>9282	CompoundStatement	 
>9283	ExpressionStatement	 
>9284	IncDecOp	pt_count ++
>9285	IncDec	++
>9286	Identifier	pt_count
>9287	ExpressionStatement	 
>9288	CallExpression	pt_views . push_back ( views )
>9289	ArgumentList	views
>9290	Argument	views
>9291	Identifier	views
>9292	Callee	pt_views . push_back
>9293	MemberAccess	pt_views . push_back
>9294	Identifier	push_back
>9295	Identifier	pt_views
>9296	ExpressionStatement	 
>9297	CallExpression	views . push_back ( ImageKey ( 1 , key_idx2 ) )
>9298	ArgumentList	ImageKey ( 1 , key_idx2 )
>9299	Argument	ImageKey ( 1 , key_idx2 )
>9300	CallExpression	ImageKey ( 1 , key_idx2 )
>9301	ArgumentList	1
>9302	Argument	key_idx2
>9303	Identifier	key_idx2
>9304	Argument	1
>9305	PrimaryExpression	1
>9306	Callee	ImageKey
>9307	Identifier	ImageKey
>9308	Callee	views . push_back
>9309	MemberAccess	views . push_back
>9310	Identifier	push_back
>9311	Identifier	views
>9312	ExpressionStatement	 
>9313	CallExpression	views . push_back ( ImageKey ( 0 , key_idx1 ) )
>9314	ArgumentList	ImageKey ( 0 , key_idx1 )
>9315	Argument	ImageKey ( 0 , key_idx1 )
>9316	CallExpression	ImageKey ( 0 , key_idx1 )
>9317	ArgumentList	0
>9318	Argument	key_idx1
>9319	Identifier	key_idx1
>9320	Argument	0
>9321	PrimaryExpression	0
>9322	Callee	ImageKey
>9323	Identifier	ImageKey
>9324	Callee	views . push_back
>9325	MemberAccess	views . push_back
>9326	Identifier	push_back
>9327	Identifier	views
>9328	IdentifierDeclStatement	 
>9329	IdentifierDecl	views
>9330	Identifier	views
>9331	IdentifierDeclType	ImageKeyVector
>9332	IfStatement	if ( bundle_from_tracks )
>9333	CompoundStatement	 
>9334	ExpressionStatement	 
>9335	CallExpression	tracks . push_back ( track_idx )
>9336	ArgumentList	track_idx
>9337	Argument	track_idx
>9338	Identifier	track_idx
>9339	Callee	tracks . push_back
>9340	MemberAccess	tracks . push_back
>9341	Identifier	push_back
>9342	Identifier	tracks
>9343	ExpressionStatement	 
>9344	AssignmentExpr	m_track_data [ track_idx ] . m_extra = pt_count
>9345	Identifier	pt_count
>9346	MemberAccess	m_track_data [ track_idx ] . m_extra
>9347	Identifier	m_extra
>9348	ArrayIndexing	m_track_data [ track_idx ]
>9349	Identifier	track_idx
>9350	Identifier	m_track_data
>9351	IdentifierDeclStatement	 
>9352	IdentifierDecl	track_idx = GetKey ( i1 , key_idx1 ) . m_track
>9353	AssignmentExpr	track_idx = GetKey ( i1 , key_idx1 ) . m_track
>9354	MemberAccess	GetKey ( i1 , key_idx1 ) . m_track
>9355	Identifier	m_track
>9356	CallExpression	GetKey ( i1 , key_idx1 )
>9357	ArgumentList	i1
>9358	Argument	key_idx1
>9359	Identifier	key_idx1
>9360	Argument	i1
>9361	Identifier	i1
>9362	Callee	GetKey
>9363	Identifier	GetKey
>9364	Identifier	track_idx
>9365	Identifier	track_idx
>9366	IdentifierDeclType	int
>9367	Condition	 
>9368	Identifier	bundle_from_tracks
>9369	ExpressionStatement	 
>9370	AssignmentExpr	GetKey ( i2 , key_idx2 ) . m_extra = pt_count
>9371	Identifier	pt_count
>9372	MemberAccess	GetKey ( i2 , key_idx2 ) . m_extra
>9373	Identifier	m_extra
>9374	CallExpression	GetKey ( i2 , key_idx2 )
>9375	ArgumentList	i2
>9376	Argument	key_idx2
>9377	Identifier	key_idx2
>9378	Argument	i2
>9379	Identifier	i2
>9380	Callee	GetKey
>9381	Identifier	GetKey
>9382	ExpressionStatement	 
>9383	AssignmentExpr	GetKey ( i1 , key_idx1 ) . m_extra = pt_count
>9384	Identifier	pt_count
>9385	MemberAccess	GetKey ( i1 , key_idx1 ) . m_extra
>9386	Identifier	m_extra
>9387	CallExpression	GetKey ( i1 , key_idx1 )
>9388	ArgumentList	i1
>9389	Argument	key_idx1
>9390	Identifier	key_idx1
>9391	Argument	i1
>9392	Identifier	i1
>9393	Callee	GetKey
>9394	Identifier	GetKey
>9395	ExpressionStatement	 
>9396	AssignmentExpr	colors [ pt_count ] = v3_new ( ( double ) r , ( double ) g , ( double ) b )
>9397	CallExpression	v3_new ( ( double ) r , ( double ) g , ( double ) b )
>9398	ArgumentList	( double ) r
>9399	Argument	( double ) b
>9400	CastExpression	( double ) b
>9401	Identifier	b
>9402	CastTarget	double
>9403	Argument	( double ) g
>9404	CastExpression	( double ) g
>9405	Identifier	g
>9406	CastTarget	double
>9407	Argument	( double ) r
>9408	CastExpression	( double ) r
>9409	Identifier	r
>9410	CastTarget	double
>9411	Callee	v3_new
>9412	Identifier	v3_new
>9413	ArrayIndexing	colors [ pt_count ]
>9414	Identifier	pt_count
>9415	Identifier	colors
>9416	IdentifierDeclStatement	 
>9417	IdentifierDecl	b = GetKey ( i1 , key_idx1 ) . m_b
>9418	AssignmentExpr	b = GetKey ( i1 , key_idx1 ) . m_b
>9419	MemberAccess	GetKey ( i1 , key_idx1 ) . m_b
>9420	Identifier	m_b
>9421	CallExpression	GetKey ( i1 , key_idx1 )
>9422	ArgumentList	i1
>9423	Argument	key_idx1
>9424	Identifier	key_idx1
>9425	Argument	i1
>9426	Identifier	i1
>9427	Callee	GetKey
>9428	Identifier	GetKey
>9429	Identifier	b
>9430	Identifier	b
>9431	IdentifierDeclType	unsigned char
>9432	IdentifierDeclStatement	 
>9433	IdentifierDecl	g = GetKey ( i1 , key_idx1 ) . m_g
>9434	AssignmentExpr	g = GetKey ( i1 , key_idx1 ) . m_g
>9435	MemberAccess	GetKey ( i1 , key_idx1 ) . m_g
>9436	Identifier	m_g
>9437	CallExpression	GetKey ( i1 , key_idx1 )
>9438	ArgumentList	i1
>9439	Argument	key_idx1
>9440	Identifier	key_idx1
>9441	Argument	i1
>9442	Identifier	i1
>9443	Callee	GetKey
>9444	Identifier	GetKey
>9445	Identifier	g
>9446	Identifier	g
>9447	IdentifierDeclType	unsigned char
>9448	IdentifierDeclStatement	 
>9449	IdentifierDecl	r = GetKey ( i1 , key_idx1 ) . m_r
>9450	AssignmentExpr	r = GetKey ( i1 , key_idx1 ) . m_r
>9451	MemberAccess	GetKey ( i1 , key_idx1 ) . m_r
>9452	Identifier	m_r
>9453	CallExpression	GetKey ( i1 , key_idx1 )
>9454	ArgumentList	i1
>9455	Argument	key_idx1
>9456	Identifier	key_idx1
>9457	Argument	i1
>9458	Identifier	i1
>9459	Callee	GetKey
>9460	Identifier	GetKey
>9461	Identifier	r
>9462	Identifier	r
>9463	IdentifierDeclType	unsigned char
>9464	ExpressionStatement	 
>9465	AssignmentExpr	angle_sum += angle
>9466	Identifier	angle
>9467	Identifier	angle_sum
>9468	ExpressionStatement	 
>9469	CallExpression	img_draw_pt ( pt_img2 , iround ( x_img2 ) , iround ( y_img2 ) , 4 , 0x0 , 0xff , 0x0 )
>9470	ArgumentList	pt_img2
>9471	Argument	0x0
>9472	PrimaryExpression	0x0
>9473	Argument	0xff
>9474	PrimaryExpression	0xff
>9475	Argument	0x0
>9476	PrimaryExpression	0x0
>9477	Argument	4
>9478	PrimaryExpression	4
>9479	Argument	iround ( y_img2 )
>9480	CallExpression	iround ( y_img2 )
>9481	ArgumentList	y_img2
>9482	Argument	y_img2
>9483	Identifier	y_img2
>9484	Callee	iround
>9485	Identifier	iround
>9486	Argument	iround ( x_img2 )
>9487	CallExpression	iround ( x_img2 )
>9488	ArgumentList	x_img2
>9489	Argument	x_img2
>9490	Identifier	x_img2
>9491	Callee	iround
>9492	Identifier	iround
>9493	Argument	pt_img2
>9494	Identifier	pt_img2
>9495	Callee	img_draw_pt
>9496	Identifier	img_draw_pt
>9497	ExpressionStatement	 
>9498	CallExpression	img_draw_pt ( pt_img1 , iround ( x_img1 ) , iround ( y_img1 ) , 4 , 0x0 , 0xff , 0x0 )
>9499	ArgumentList	pt_img1
>9500	Argument	0x0
>9501	PrimaryExpression	0x0
>9502	Argument	0xff
>9503	PrimaryExpression	0xff
>9504	Argument	0x0
>9505	PrimaryExpression	0x0
>9506	Argument	4
>9507	PrimaryExpression	4
>9508	Argument	iround ( y_img1 )
>9509	CallExpression	iround ( y_img1 )
>9510	ArgumentList	y_img1
>9511	Argument	y_img1
>9512	Identifier	y_img1
>9513	Callee	iround
>9514	Identifier	iround
>9515	Argument	iround ( x_img1 )
>9516	CallExpression	iround ( x_img1 )
>9517	ArgumentList	x_img1
>9518	Argument	x_img1
>9519	Identifier	x_img1
>9520	Callee	iround
>9521	Identifier	iround
>9522	Argument	pt_img1
>9523	Identifier	pt_img1
>9524	Callee	img_draw_pt
>9525	Identifier	img_draw_pt
>9526	IfStatement	if ( ! in_front )
>9527	CompoundStatement	 
>9528	ContinueStatement	 
>9529	ExpressionStatement	 
>9530	IncDecOp	num_in_back ++
>9531	IncDec	++
>9532	Identifier	num_in_back
>9533	ExpressionStatement	 
>9534	CallExpression	img_draw_pt ( pt_img2 , iround ( x_img2 ) , iround ( y_img2 ) , 4 , 0x0 , 0x0 , 0xff )
>9535	ArgumentList	pt_img2
>9536	Argument	0xff
>9537	PrimaryExpression	0xff
>9538	Argument	0x0
>9539	PrimaryExpression	0x0
>9540	Argument	0x0
>9541	PrimaryExpression	0x0
>9542	Argument	4
>9543	PrimaryExpression	4
>9544	Argument	iround ( y_img2 )
>9545	CallExpression	iround ( y_img2 )
>9546	ArgumentList	y_img2
>9547	Argument	y_img2
>9548	Identifier	y_img2
>9549	Callee	iround
>9550	Identifier	iround
>9551	Argument	iround ( x_img2 )
>9552	CallExpression	iround ( x_img2 )
>9553	ArgumentList	x_img2
>9554	Argument	x_img2
>9555	Identifier	x_img2
>9556	Callee	iround
>9557	Identifier	iround
>9558	Argument	pt_img2
>9559	Identifier	pt_img2
>9560	Callee	img_draw_pt
>9561	Identifier	img_draw_pt
>9562	ExpressionStatement	 
>9563	CallExpression	img_draw_pt ( pt_img1 , iround ( x_img1 ) , iround ( y_img1 ) , 4 , 0x0 , 0x0 , 0xff )
>9564	ArgumentList	pt_img1
>9565	Argument	0xff
>9566	PrimaryExpression	0xff
>9567	Argument	0x0
>9568	PrimaryExpression	0x0
>9569	Argument	0x0
>9570	PrimaryExpression	0x0
>9571	Argument	4
>9572	PrimaryExpression	4
>9573	Argument	iround ( y_img1 )
>9574	CallExpression	iround ( y_img1 )
>9575	ArgumentList	y_img1
>9576	Argument	y_img1
>9577	Identifier	y_img1
>9578	Callee	iround
>9579	Identifier	iround
>9580	Argument	iround ( x_img1 )
>9581	CallExpression	iround ( x_img1 )
>9582	ArgumentList	x_img1
>9583	Argument	x_img1
>9584	Identifier	x_img1
>9585	Callee	iround
>9586	Identifier	iround
>9587	Argument	pt_img1
>9588	Identifier	pt_img1
>9589	Callee	img_draw_pt
>9590	Identifier	img_draw_pt
>9591	Condition	 
>9592	UnaryOp	! in_front
>9593	Identifier	in_front
>9594	UnaryOperator	!
>9595	IfStatement	if ( error > 10.0 )
>9596	CompoundStatement	 
>9597	ContinueStatement	 
>9598	ExpressionStatement	 
>9599	IncDecOp	num_skipped ++
>9600	IncDec	++
>9601	Identifier	num_skipped
>9602	ExpressionStatement	 
>9603	CallExpression	img_draw_pt ( pt_img2 , iround ( x_img2 ) , iround ( y_img2 ) , 4 , 0xff , 0x0 , 0x0 )
>9604	ArgumentList	pt_img2
>9605	Argument	0x0
>9606	PrimaryExpression	0x0
>9607	Argument	0x0
>9608	PrimaryExpression	0x0
>9609	Argument	0xff
>9610	PrimaryExpression	0xff
>9611	Argument	4
>9612	PrimaryExpression	4
>9613	Argument	iround ( y_img2 )
>9614	CallExpression	iround ( y_img2 )
>9615	ArgumentList	y_img2
>9616	Argument	y_img2
>9617	Identifier	y_img2
>9618	Callee	iround
>9619	Identifier	iround
>9620	Argument	iround ( x_img2 )
>9621	CallExpression	iround ( x_img2 )
>9622	ArgumentList	x_img2
>9623	Argument	x_img2
>9624	Identifier	x_img2
>9625	Callee	iround
>9626	Identifier	iround
>9627	Argument	pt_img2
>9628	Identifier	pt_img2
>9629	Callee	img_draw_pt
>9630	Identifier	img_draw_pt
>9631	ExpressionStatement	 
>9632	CallExpression	img_draw_pt ( pt_img1 , iround ( x_img1 ) , iround ( y_img1 ) , 4 , 0xff , 0x0 , 0x0 )
>9633	ArgumentList	pt_img1
>9634	Argument	0x0
>9635	PrimaryExpression	0x0
>9636	Argument	0x0
>9637	PrimaryExpression	0x0
>9638	Argument	0xff
>9639	PrimaryExpression	0xff
>9640	Argument	4
>9641	PrimaryExpression	4
>9642	Argument	iround ( y_img1 )
>9643	CallExpression	iround ( y_img1 )
>9644	ArgumentList	y_img1
>9645	Argument	y_img1
>9646	Identifier	y_img1
>9647	Callee	iround
>9648	Identifier	iround
>9649	Argument	iround ( x_img1 )
>9650	CallExpression	iround ( x_img1 )
>9651	ArgumentList	x_img1
>9652	Argument	x_img1
>9653	Identifier	x_img1
>9654	Callee	iround
>9655	Identifier	iround
>9656	Argument	pt_img1
>9657	Identifier	pt_img1
>9658	Callee	img_draw_pt
>9659	Identifier	img_draw_pt
>9660	Condition	 
>9661	RelationalExpression	error > 10.0
>9662	PrimaryExpression	10.0
>9663	Identifier	error
>9664	IdentifierDeclStatement	 
>9665	IdentifierDecl	y_img2 = 0.5 * ( yp2 + 0.5 * m_image_data [ i2 ] . GetHeight ( ) )
>9666	AssignmentExpr	y_img2 = 0.5 * ( yp2 + 0.5 * m_image_data [ i2 ] . GetHeight ( ) )
>9667	MultiplicativeExpression	0.5 * ( yp2 + 0.5 * m_image_data [ i2 ] . GetHeight ( ) )
>9668	AdditiveExpression	yp2 + 0.5 * m_image_data [ i2 ] . GetHeight ( )
>9669	MultiplicativeExpression	0.5 * m_image_data [ i2 ] . GetHeight ( )
>9670	CallExpression	m_image_data [ i2 ] . GetHeight ( )
>9671	ArgumentList	 
>9672	Callee	m_image_data [ i2 ] . GetHeight
>9673	MemberAccess	m_image_data [ i2 ] . GetHeight
>9674	Identifier	GetHeight
>9675	ArrayIndexing	m_image_data [ i2 ]
>9676	Identifier	i2
>9677	Identifier	m_image_data
>9678	PrimaryExpression	0.5
>9679	Identifier	yp2
>9680	PrimaryExpression	0.5
>9681	Identifier	y_img2
>9682	Identifier	y_img2
>9683	IdentifierDeclType	double
>9684	IdentifierDeclStatement	 
>9685	IdentifierDecl	x_img2 = 0.5 * ( xp2 + 0.5 * m_image_data [ i2 ] . GetWidth ( ) )
>9686	AssignmentExpr	x_img2 = 0.5 * ( xp2 + 0.5 * m_image_data [ i2 ] . GetWidth ( ) )
>9687	MultiplicativeExpression	0.5 * ( xp2 + 0.5 * m_image_data [ i2 ] . GetWidth ( ) )
>9688	AdditiveExpression	xp2 + 0.5 * m_image_data [ i2 ] . GetWidth ( )
>9689	MultiplicativeExpression	0.5 * m_image_data [ i2 ] . GetWidth ( )
>9690	CallExpression	m_image_data [ i2 ] . GetWidth ( )
>9691	ArgumentList	 
>9692	Callee	m_image_data [ i2 ] . GetWidth
>9693	MemberAccess	m_image_data [ i2 ] . GetWidth
>9694	Identifier	GetWidth
>9695	ArrayIndexing	m_image_data [ i2 ]
>9696	Identifier	i2
>9697	Identifier	m_image_data
>9698	PrimaryExpression	0.5
>9699	Identifier	xp2
>9700	PrimaryExpression	0.5
>9701	Identifier	x_img2
>9702	Identifier	x_img2
>9703	IdentifierDeclType	double
>9704	IdentifierDeclStatement	 
>9705	IdentifierDecl	y_img1 = 0.5 * ( yp1 + 0.5 * m_image_data [ i1 ] . GetHeight ( ) )
>9706	AssignmentExpr	y_img1 = 0.5 * ( yp1 + 0.5 * m_image_data [ i1 ] . GetHeight ( ) )
>9707	MultiplicativeExpression	0.5 * ( yp1 + 0.5 * m_image_data [ i1 ] . GetHeight ( ) )
>9708	AdditiveExpression	yp1 + 0.5 * m_image_data [ i1 ] . GetHeight ( )
>9709	MultiplicativeExpression	0.5 * m_image_data [ i1 ] . GetHeight ( )
>9710	CallExpression	m_image_data [ i1 ] . GetHeight ( )
>9711	ArgumentList	 
>9712	Callee	m_image_data [ i1 ] . GetHeight
>9713	MemberAccess	m_image_data [ i1 ] . GetHeight
>9714	Identifier	GetHeight
>9715	ArrayIndexing	m_image_data [ i1 ]
>9716	Identifier	i1
>9717	Identifier	m_image_data
>9718	PrimaryExpression	0.5
>9719	Identifier	yp1
>9720	PrimaryExpression	0.5
>9721	Identifier	y_img1
>9722	Identifier	y_img1
>9723	IdentifierDeclType	double
>9724	IdentifierDeclStatement	 
>9725	IdentifierDecl	x_img1 = 0.5 * ( xp1 + 0.5 * m_image_data [ i1 ] . GetWidth ( ) )
>9726	AssignmentExpr	x_img1 = 0.5 * ( xp1 + 0.5 * m_image_data [ i1 ] . GetWidth ( ) )
>9727	MultiplicativeExpression	0.5 * ( xp1 + 0.5 * m_image_data [ i1 ] . GetWidth ( ) )
>9728	AdditiveExpression	xp1 + 0.5 * m_image_data [ i1 ] . GetWidth ( )
>9729	MultiplicativeExpression	0.5 * m_image_data [ i1 ] . GetWidth ( )
>9730	CallExpression	m_image_data [ i1 ] . GetWidth ( )
>9731	ArgumentList	 
>9732	Callee	m_image_data [ i1 ] . GetWidth
>9733	MemberAccess	m_image_data [ i1 ] . GetWidth
>9734	Identifier	GetWidth
>9735	ArrayIndexing	m_image_data [ i1 ]
>9736	Identifier	i1
>9737	Identifier	m_image_data
>9738	PrimaryExpression	0.5
>9739	Identifier	xp1
>9740	PrimaryExpression	0.5
>9741	Identifier	x_img1
>9742	Identifier	x_img1
>9743	IdentifierDeclType	double
>9744	ExpressionStatement	 
>9745	CallExpression	printf ( \" tri.error[%d] = %0.3f, %0.3f, %d\n\" , i , error , RAD2DEG ( angle ) , in_front ? 1 
>9746	ArgumentList	\" tri.error[%d] = %0.3f, %0.3f, %d\n\"
>9747	Argument	in_front ? 1 
>9748	ConditionalExpression	in_front ? 1 
>9749	PrimaryExpression	0
>9750	PrimaryExpression	1
>9751	Condition	in_front
>9752	Identifier	in_front
>9753	Argument	RAD2DEG ( angle )
>9754	CallExpression	RAD2DEG ( angle )
>9755	ArgumentList	angle
>9756	Argument	angle
>9757	Identifier	angle
>9758	Callee	RAD2DEG
>9759	Identifier	RAD2DEG
>9760	Argument	error
>9761	Identifier	error
>9762	Argument	i
>9763	Identifier	i
>9764	Argument	\" tri.error[%d] = %0.3f, %0.3f, %d\n\"
>9765	PrimaryExpression	\" tri.error[%d] = %0.3f, %0.3f, %d\n\"
>9766	Callee	printf
>9767	Identifier	printf
>9768	IfStatement	if ( m_optimize_for_fisheye )
>9769	CompoundStatement	 
>9770	ExpressionStatement	 
>9771	AssignmentExpr	error = 0.5 * ( sqrt ( dx1 * dx1 + dy1 * dy1 ) + sqrt ( dx2 * dx2 + dy2 * dy2 ) )
>9772	MultiplicativeExpression	0.5 * ( sqrt ( dx1 * dx1 + dy1 * dy1 ) + sqrt ( dx2 * dx2 + dy2 * dy2 ) )
>9773	AdditiveExpression	sqrt ( dx1 * dx1 + dy1 * dy1 ) + sqrt ( dx2 * dx2 + dy2 * dy2 )
>9774	CallExpression	sqrt ( dx2 * dx2 + dy2 * dy2 )
>9775	ArgumentList	dx2 * dx2 + dy2 * dy2
>9776	Argument	dx2 * dx2 + dy2 * dy2
>9777	AdditiveExpression	dx2 * dx2 + dy2 * dy2
>9778	MultiplicativeExpression	dy2 * dy2
>9779	Identifier	dy2
>9780	Identifier	dy2
>9781	MultiplicativeExpression	dx2 * dx2
>9782	Identifier	dx2
>9783	Identifier	dx2
>9784	Callee	sqrt
>9785	Identifier	sqrt
>9786	CallExpression	sqrt ( dx1 * dx1 + dy1 * dy1 )
>9787	ArgumentList	dx1 * dx1 + dy1 * dy1
>9788	Argument	dx1 * dx1 + dy1 * dy1
>9789	AdditiveExpression	dx1 * dx1 + dy1 * dy1
>9790	MultiplicativeExpression	dy1 * dy1
>9791	Identifier	dy1
>9792	Identifier	dy1
>9793	MultiplicativeExpression	dx1 * dx1
>9794	Identifier	dx1
>9795	Identifier	dx1
>9796	Callee	sqrt
>9797	Identifier	sqrt
>9798	PrimaryExpression	0.5
>9799	Identifier	error
>9800	IdentifierDeclStatement	 
>9801	IdentifierDecl	dy2 = py2 - yp2
>9802	AssignmentExpr	dy2 = py2 - yp2
>9803	AdditiveExpression	py2 - yp2
>9804	Identifier	yp2
>9805	Identifier	py2
>9806	Identifier	dy2
>9807	Identifier	dy2
>9808	IdentifierDeclType	double
>9809	IdentifierDeclStatement	 
>9810	IdentifierDecl	dx2 = px2 - xp2
>9811	AssignmentExpr	dx2 = px2 - xp2
>9812	AdditiveExpression	px2 - xp2
>9813	Identifier	xp2
>9814	Identifier	px2
>9815	Identifier	dx2
>9816	Identifier	dx2
>9817	IdentifierDeclType	double
>9818	IdentifierDeclStatement	 
>9819	IdentifierDecl	dy1 = py1 - yp1
>9820	AssignmentExpr	dy1 = py1 - yp1
>9821	AdditiveExpression	py1 - yp1
>9822	Identifier	yp1
>9823	Identifier	py1
>9824	Identifier	dy1
>9825	Identifier	dy1
>9826	IdentifierDeclType	double
>9827	IdentifierDeclStatement	 
>9828	IdentifierDecl	dx1 = px1 - xp1
>9829	AssignmentExpr	dx1 = px1 - xp1
>9830	AdditiveExpression	px1 - xp1
>9831	Identifier	xp1
>9832	Identifier	px1
>9833	Identifier	dx1
>9834	Identifier	dx1
>9835	IdentifierDeclType	double
>9836	ExpressionStatement	 
>9837	CallExpression	m_image_data [ i2 ] . DistortPoint ( px2 , py2 , px2 , py2 )
>9838	ArgumentList	px2
>9839	Argument	py2
>9840	Identifier	py2
>9841	Argument	px2
>9842	Identifier	px2
>9843	Argument	py2
>9844	Identifier	py2
>9845	Argument	px2
>9846	Identifier	px2
>9847	Callee	m_image_data [ i2 ] . DistortPoint
>9848	MemberAccess	m_image_data [ i2 ] . DistortPoint
>9849	Identifier	DistortPoint
>9850	ArrayIndexing	m_image_data [ i2 ]
>9851	Identifier	i2
>9852	Identifier	m_image_data
>9853	ExpressionStatement	 
>9854	CallExpression	m_image_data [ i1 ] . DistortPoint ( px1 , py1 , px1 , py1 )
>9855	ArgumentList	px1
>9856	Argument	py1
>9857	Identifier	py1
>9858	Argument	px1
>9859	Identifier	px1
>9860	Argument	py1
>9861	Identifier	py1
>9862	Argument	px1
>9863	Identifier	px1
>9864	Callee	m_image_data [ i1 ] . DistortPoint
>9865	MemberAccess	m_image_data [ i1 ] . DistortPoint
>9866	Identifier	DistortPoint
>9867	ArrayIndexing	m_image_data [ i1 ]
>9868	Identifier	i1
>9869	Identifier	m_image_data
>9870	IdentifierDeclStatement	 
>9871	IdentifierDecl	py2 = - cameras [ 1 ] . f * tmp2 [ 1 ] / tmp2 [ 2 ]
>9872	AssignmentExpr	py2 = - cameras [ 1 ] . f * tmp2 [ 1 ] / tmp2 [ 2 ]
>9873	MultiplicativeExpression	- cameras [ 1 ] . f * tmp2 [ 1 ] / tmp2 [ 2 ]
>9874	MultiplicativeExpression	tmp2 [ 1 ] / tmp2 [ 2 ]
>9875	ArrayIndexing	tmp2 [ 2 ]
>9876	PrimaryExpression	2
>9877	Identifier	tmp2
>9878	ArrayIndexing	tmp2 [ 1 ]
>9879	PrimaryExpression	1
>9880	Identifier	tmp2
>9881	UnaryOp	- cameras [ 1 ] . f
>9882	MemberAccess	cameras [ 1 ] . f
>9883	Identifier	f
>9884	ArrayIndexing	cameras [ 1 ]
>9885	PrimaryExpression	1
>9886	Identifier	cameras
>9887	UnaryOperator	-
>9888	Identifier	py2
>9889	Identifier	py2
>9890	IdentifierDeclType	double
>9891	IdentifierDeclStatement	 
>9892	IdentifierDecl	px2 = - cameras [ 1 ] . f * tmp2 [ 0 ] / tmp2 [ 2 ]
>9893	AssignmentExpr	px2 = - cameras [ 1 ] . f * tmp2 [ 0 ] / tmp2 [ 2 ]
>9894	MultiplicativeExpression	- cameras [ 1 ] . f * tmp2 [ 0 ] / tmp2 [ 2 ]
>9895	MultiplicativeExpression	tmp2 [ 0 ] / tmp2 [ 2 ]
>9896	ArrayIndexing	tmp2 [ 2 ]
>9897	PrimaryExpression	2
>9898	Identifier	tmp2
>9899	ArrayIndexing	tmp2 [ 0 ]
>9900	PrimaryExpression	0
>9901	Identifier	tmp2
>9902	UnaryOp	- cameras [ 1 ] . f
>9903	MemberAccess	cameras [ 1 ] . f
>9904	Identifier	f
>9905	ArrayIndexing	cameras [ 1 ]
>9906	PrimaryExpression	1
>9907	Identifier	cameras
>9908	UnaryOperator	-
>9909	Identifier	px2
>9910	Identifier	px2
>9911	IdentifierDeclType	double
>9912	ExpressionStatement	 
>9913	CallExpression	matrix_product331 ( cameras [ 1 ] . R , tmp , tmp2 )
>9914	ArgumentList	cameras [ 1 ] . R
>9915	Argument	tmp2
>9916	Identifier	tmp2
>9917	Argument	tmp
>9918	Identifier	tmp
>9919	Argument	cameras [ 1 ] . R
>9920	MemberAccess	cameras [ 1 ] . R
>9921	Identifier	R
>9922	ArrayIndexing	cameras [ 1 ]
>9923	PrimaryExpression	1
>9924	Identifier	cameras
>9925	Callee	matrix_product331
>9926	Identifier	matrix_product331
>9927	ExpressionStatement	 
>9928	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , points [ pt_count ] . p , cameras [ 1 ] . t , tmp )
>9929	ArgumentList	3
>9930	Argument	tmp
>9931	Identifier	tmp
>9932	Argument	cameras [ 1 ] . t
>9933	MemberAccess	cameras [ 1 ] . t
>9934	Identifier	t
>9935	ArrayIndexing	cameras [ 1 ]
>9936	PrimaryExpression	1
>9937	Identifier	cameras
>9938	Argument	points [ pt_count ] . p
>9939	MemberAccess	points [ pt_count ] . p
>9940	Identifier	p
>9941	ArrayIndexing	points [ pt_count ]
>9942	Identifier	pt_count
>9943	Identifier	points
>9944	Argument	1
>9945	PrimaryExpression	1
>9946	Argument	3
>9947	PrimaryExpression	3
>9948	Argument	1
>9949	PrimaryExpression	1
>9950	Argument	3
>9951	PrimaryExpression	3
>9952	Callee	matrix_diff
>9953	Identifier	matrix_diff
>9954	IdentifierDeclStatement	 
>9955	IdentifierDecl	py1 = - cameras [ 0 ] . f * tmp2 [ 1 ] / tmp2 [ 2 ]
>9956	AssignmentExpr	py1 = - cameras [ 0 ] . f * tmp2 [ 1 ] / tmp2 [ 2 ]
>9957	MultiplicativeExpression	- cameras [ 0 ] . f * tmp2 [ 1 ] / tmp2 [ 2 ]
>9958	MultiplicativeExpression	tmp2 [ 1 ] / tmp2 [ 2 ]
>9959	ArrayIndexing	tmp2 [ 2 ]
>9960	PrimaryExpression	2
>9961	Identifier	tmp2
>9962	ArrayIndexing	tmp2 [ 1 ]
>9963	PrimaryExpression	1
>9964	Identifier	tmp2
>9965	UnaryOp	- cameras [ 0 ] . f
>9966	MemberAccess	cameras [ 0 ] . f
>9967	Identifier	f
>9968	ArrayIndexing	cameras [ 0 ]
>9969	PrimaryExpression	0
>9970	Identifier	cameras
>9971	UnaryOperator	-
>9972	Identifier	py1
>9973	Identifier	py1
>9974	IdentifierDeclType	double
>9975	IdentifierDeclStatement	 
>9976	IdentifierDecl	px1 = - cameras [ 0 ] . f * tmp2 [ 0 ] / tmp2 [ 2 ]
>9977	AssignmentExpr	px1 = - cameras [ 0 ] . f * tmp2 [ 0 ] / tmp2 [ 2 ]
>9978	MultiplicativeExpression	- cameras [ 0 ] . f * tmp2 [ 0 ] / tmp2 [ 2 ]
>9979	MultiplicativeExpression	tmp2 [ 0 ] / tmp2 [ 2 ]
>9980	ArrayIndexing	tmp2 [ 2 ]
>9981	PrimaryExpression	2
>9982	Identifier	tmp2
>9983	ArrayIndexing	tmp2 [ 0 ]
>9984	PrimaryExpression	0
>9985	Identifier	tmp2
>9986	UnaryOp	- cameras [ 0 ] . f
>9987	MemberAccess	cameras [ 0 ] . f
>9988	Identifier	f
>9989	ArrayIndexing	cameras [ 0 ]
>9990	PrimaryExpression	0
>9991	Identifier	cameras
>9992	UnaryOperator	-
>9993	Identifier	px1
>9994	Identifier	px1
>9995	IdentifierDeclType	double
>9996	ExpressionStatement	 
>9997	CallExpression	matrix_product331 ( cameras [ 0 ] . R , tmp , tmp2 )
>9998	ArgumentList	cameras [ 0 ] . R
>9999	Argument	tmp2
>10000	Identifier	tmp2
>10001	Argument	tmp
>10002	Identifier	tmp
>10003	Argument	cameras [ 0 ] . R
>10004	MemberAccess	cameras [ 0 ] . R
>10005	Identifier	R
>10006	ArrayIndexing	cameras [ 0 ]
>10007	PrimaryExpression	0
>10008	Identifier	cameras
>10009	Callee	matrix_product331
>10010	Identifier	matrix_product331
>10011	ExpressionStatement	 
>10012	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , points [ pt_count ] . p , cameras [ 0 ] . t , tmp )
>10013	ArgumentList	3
>10014	Argument	tmp
>10015	Identifier	tmp
>10016	Argument	cameras [ 0 ] . t
>10017	MemberAccess	cameras [ 0 ] . t
>10018	Identifier	t
>10019	ArrayIndexing	cameras [ 0 ]
>10020	PrimaryExpression	0
>10021	Identifier	cameras
>10022	Argument	points [ pt_count ] . p
>10023	MemberAccess	points [ pt_count ] . p
>10024	Identifier	p
>10025	ArrayIndexing	points [ pt_count ]
>10026	Identifier	pt_count
>10027	Identifier	points
>10028	Argument	1
>10029	PrimaryExpression	1
>10030	Argument	3
>10031	PrimaryExpression	3
>10032	Argument	1
>10033	PrimaryExpression	1
>10034	Argument	3
>10035	PrimaryExpression	3
>10036	Callee	matrix_diff
>10037	Identifier	matrix_diff
>10038	IdentifierDeclStatement	 
>10039	IdentifierDecl	tmp2 [ 3 ]
>10040	PrimaryExpression	3
>10041	Identifier	tmp2
>10042	IdentifierDeclType	double [ 3 ]
>10043	IdentifierDecl	tmp [ 3 ]
>10044	PrimaryExpression	3
>10045	Identifier	tmp
>10046	IdentifierDeclType	double [ 3 ]
>10047	Condition	 
>10048	Identifier	m_optimize_for_fisheye
>10049	ExpressionStatement	 
>10050	AssignmentExpr	points [ pt_count ] = Triangulate ( p , q , cameras [ 0 ] , cameras [ 1 ] , error , in_front , angle , \
>10051	CallExpression	Triangulate ( p , q , cameras [ 0 ] , cameras [ 1 ] , error , in_front , angle , true )
>10052	ArgumentList	p
>10053	Argument	true
>10054	Identifier	true
>10055	Argument	angle
>10056	Identifier	angle
>10057	Argument	in_front
>10058	Identifier	in_front
>10059	Argument	error
>10060	Identifier	error
>10061	Argument	cameras [ 1 ]
>10062	ArrayIndexing	cameras [ 1 ]
>10063	PrimaryExpression	1
>10064	Identifier	cameras
>10065	Argument	cameras [ 0 ]
>10066	ArrayIndexing	cameras [ 0 ]
>10067	PrimaryExpression	0
>10068	Identifier	cameras
>10069	Argument	q
>10070	Identifier	q
>10071	Argument	p
>10072	Identifier	p
>10073	Callee	Triangulate
>10074	Identifier	Triangulate
>10075	ArrayIndexing	points [ pt_count ]
>10076	Identifier	pt_count
>10077	Identifier	points
>10078	IdentifierDeclStatement	 
>10079	IdentifierDecl	angle = 0.0
>10080	AssignmentExpr	angle = 0.0
>10081	PrimaryExpression	0.0
>10082	Identifier	angle
>10083	Identifier	angle
>10084	IdentifierDeclType	double
>10085	IdentifierDeclStatement	 
>10086	IdentifierDecl	in_front = true
>10087	AssignmentExpr	in_front = true
>10088	Identifier	true
>10089	Identifier	true
>10090	Identifier	in_front
>10091	IdentifierDeclType	bool
>10092	IdentifierDeclStatement	 
>10093	IdentifierDecl	q = v2_new ( x_proj2 , y_proj2 )
>10094	AssignmentExpr	q = v2_new ( x_proj2 , y_proj2 )
>10095	CallExpression	v2_new ( x_proj2 , y_proj2 )
>10096	ArgumentList	x_proj2
>10097	Argument	y_proj2
>10098	Identifier	y_proj2
>10099	Argument	x_proj2
>10100	Identifier	x_proj2
>10101	Callee	v2_new
>10102	Identifier	v2_new
>10103	Identifier	q
>10104	Identifier	q
>10105	IdentifierDeclType	v2_t
>10106	IdentifierDeclStatement	 
>10107	IdentifierDecl	p = v2_new ( x_proj1 , y_proj1 )
>10108	AssignmentExpr	p = v2_new ( x_proj1 , y_proj1 )
>10109	CallExpression	v2_new ( x_proj1 , y_proj1 )
>10110	ArgumentList	x_proj1
>10111	Argument	y_proj1
>10112	Identifier	y_proj1
>10113	Argument	x_proj1
>10114	Identifier	x_proj1
>10115	Callee	v2_new
>10116	Identifier	v2_new
>10117	Identifier	p
>10118	Identifier	p
>10119	IdentifierDeclType	v2_t
>10120	IdentifierDeclStatement	 
>10121	IdentifierDecl	error
>10122	Identifier	error
>10123	IdentifierDeclType	double
>10124	IfStatement	if ( m_optimize_for_fisheye )
>10125	CompoundStatement	 
>10126	ExpressionStatement	 
>10127	CallExpression	m_image_data [ i2 ] . UndistortPoint ( x_proj2 , y_proj2 , x_proj2 , y_proj2 )
>10128	ArgumentList	x_proj2
>10129	Argument	y_proj2
>10130	Identifier	y_proj2
>10131	Argument	x_proj2
>10132	Identifier	x_proj2
>10133	Argument	y_proj2
>10134	Identifier	y_proj2
>10135	Argument	x_proj2
>10136	Identifier	x_proj2
>10137	Callee	m_image_data [ i2 ] . UndistortPoint
>10138	MemberAccess	m_image_data [ i2 ] . UndistortPoint
>10139	Identifier	UndistortPoint
>10140	ArrayIndexing	m_image_data [ i2 ]
>10141	Identifier	i2
>10142	Identifier	m_image_data
>10143	ExpressionStatement	 
>10144	CallExpression	m_image_data [ i1 ] . UndistortPoint ( x_proj1 , y_proj1 , x_proj1 , y_proj1 )
>10145	ArgumentList	x_proj1
>10146	Argument	y_proj1
>10147	Identifier	y_proj1
>10148	Argument	x_proj1
>10149	Identifier	x_proj1
>10150	Argument	y_proj1
>10151	Identifier	y_proj1
>10152	Argument	x_proj1
>10153	Identifier	x_proj1
>10154	Callee	m_image_data [ i1 ] . UndistortPoint
>10155	MemberAccess	m_image_data [ i1 ] . UndistortPoint
>10156	Identifier	UndistortPoint
>10157	ArrayIndexing	m_image_data [ i1 ]
>10158	Identifier	i1
>10159	Identifier	m_image_data
>10160	Condition	 
>10161	Identifier	m_optimize_for_fisheye
>10162	ExpressionStatement	 
>10163	AssignmentExpr	yp2 = y_proj2 = GetKey ( i2 , key_idx2 ) . m_y
>10164	AssignmentExpr	y_proj2 = GetKey ( i2 , key_idx2 ) . m_y
>10165	MemberAccess	GetKey ( i2 , key_idx2 ) . m_y
>10166	Identifier	m_y
>10167	CallExpression	GetKey ( i2 , key_idx2 )
>10168	ArgumentList	i2
>10169	Argument	key_idx2
>10170	Identifier	key_idx2
>10171	Argument	i2
>10172	Identifier	i2
>10173	Callee	GetKey
>10174	Identifier	GetKey
>10175	Identifier	y_proj2
>10176	Identifier	yp2
>10177	ExpressionStatement	 
>10178	AssignmentExpr	xp2 = x_proj2 = GetKey ( i2 , key_idx2 ) . m_x
>10179	AssignmentExpr	x_proj2 = GetKey ( i2 , key_idx2 ) . m_x
>10180	MemberAccess	GetKey ( i2 , key_idx2 ) . m_x
>10181	Identifier	m_x
>10182	CallExpression	GetKey ( i2 , key_idx2 )
>10183	ArgumentList	i2
>10184	Argument	key_idx2
>10185	Identifier	key_idx2
>10186	Argument	i2
>10187	Identifier	i2
>10188	Callee	GetKey
>10189	Identifier	GetKey
>10190	Identifier	x_proj2
>10191	Identifier	xp2
>10192	ExpressionStatement	 
>10193	AssignmentExpr	yp1 = y_proj1 = GetKey ( i1 , key_idx1 ) . m_y
>10194	AssignmentExpr	y_proj1 = GetKey ( i1 , key_idx1 ) . m_y
>10195	MemberAccess	GetKey ( i1 , key_idx1 ) . m_y
>10196	Identifier	m_y
>10197	CallExpression	GetKey ( i1 , key_idx1 )
>10198	ArgumentList	i1
>10199	Argument	key_idx1
>10200	Identifier	key_idx1
>10201	Argument	i1
>10202	Identifier	i1
>10203	Callee	GetKey
>10204	Identifier	GetKey
>10205	Identifier	y_proj1
>10206	Identifier	yp1
>10207	ExpressionStatement	 
>10208	AssignmentExpr	xp1 = x_proj1 = GetKey ( i1 , key_idx1 ) . m_x
>10209	AssignmentExpr	x_proj1 = GetKey ( i1 , key_idx1 ) . m_x
>10210	MemberAccess	GetKey ( i1 , key_idx1 ) . m_x
>10211	Identifier	m_x
>10212	CallExpression	GetKey ( i1 , key_idx1 )
>10213	ArgumentList	i1
>10214	Argument	key_idx1
>10215	Identifier	key_idx1
>10216	Argument	i1
>10217	Identifier	i1
>10218	Callee	GetKey
>10219	Identifier	GetKey
>10220	Identifier	x_proj1
>10221	Identifier	xp1
>10222	IdentifierDeclStatement	 
>10223	IdentifierDecl	y_proj2
>10224	Identifier	y_proj2
>10225	IdentifierDeclType	double
>10226	IdentifierDecl	x_proj2
>10227	Identifier	x_proj2
>10228	IdentifierDeclType	double
>10229	IdentifierDecl	y_proj1
>10230	Identifier	y_proj1
>10231	IdentifierDeclType	double
>10232	IdentifierDecl	x_proj1
>10233	Identifier	x_proj1
>10234	IdentifierDeclType	double
>10235	IdentifierDeclStatement	 
>10236	IdentifierDecl	yp2
>10237	Identifier	yp2
>10238	IdentifierDeclType	double
>10239	IdentifierDecl	xp2
>10240	Identifier	xp2
>10241	IdentifierDeclType	double
>10242	IdentifierDecl	yp1
>10243	Identifier	yp1
>10244	IdentifierDeclType	double
>10245	IdentifierDecl	xp1
>10246	Identifier	xp1
>10247	IdentifierDeclType	double
>10248	ExpressionStatement	 
>10249	CallExpression	printf ( \"  Adding match %d ==> %d [%d]\n\" , key_idx1 , key_idx2 , pt_count )
>10250	ArgumentList	\"  Adding match %d ==> %d [%d]\n\"
>10251	Argument	pt_count
>10252	Identifier	pt_count
>10253	Argument	key_idx2
>10254	Identifier	key_idx2
>10255	Argument	key_idx1
>10256	Identifier	key_idx1
>10257	Argument	\"  Adding match %d ==> %d [%d]\n\"
>10258	PrimaryExpression	\"  Adding match %d ==> %d [%d]\n\"
>10259	Callee	printf
>10260	Identifier	printf
>10261	IdentifierDeclStatement	 
>10262	IdentifierDecl	key_idx2 = matches [ i ] . m_idx2
>10263	AssignmentExpr	key_idx2 = matches [ i ] . m_idx2
>10264	MemberAccess	matches [ i ] . m_idx2
>10265	Identifier	m_idx2
>10266	ArrayIndexing	matches [ i ]
>10267	Identifier	i
>10268	Identifier	matches
>10269	Identifier	key_idx2
>10270	Identifier	key_idx2
>10271	IdentifierDeclType	int
>10272	IdentifierDeclStatement	 
>10273	IdentifierDecl	key_idx1 = matches [ i ] . m_idx1
>10274	AssignmentExpr	key_idx1 = matches [ i ] . m_idx1
>10275	MemberAccess	matches [ i ] . m_idx1
>10276	Identifier	m_idx1
>10277	ArrayIndexing	matches [ i ]
>10278	Identifier	i
>10279	Identifier	matches
>10280	Identifier	key_idx1
>10281	Identifier	key_idx1
>10282	IdentifierDeclType	int
>10283	IncDecOp	 
>10284	IncDec	++
>10285	Identifier	i
>10286	Condition	 
>10287	RelationalExpression	i < num_matches
>10288	Identifier	num_matches
>10289	Identifier	i
>10290	ForInit	 
>10291	IdentifierDeclStatement	unsigned int i = 0 ;
>10292	IdentifierDecl	i = 0
>10293	AssignmentExpr	i = 0
>10294	PrimaryExpression	0
>10295	Identifier	i
>10296	Identifier	i
>10297	IdentifierDeclType	unsigned int
>10298	ExpressionStatement	 
>10299	CallExpression	m_image_data [ i2 ] . UnloadImage ( )
>10300	ArgumentList	 
>10301	Callee	m_image_data [ i2 ] . UnloadImage
>10302	MemberAccess	m_image_data [ i2 ] . UnloadImage
>10303	Identifier	UnloadImage
>10304	ArrayIndexing	m_image_data [ i2 ]
>10305	Identifier	i2
>10306	Identifier	m_image_data
>10307	ExpressionStatement	 
>10308	CallExpression	m_image_data [ i1 ] . UnloadImage ( )
>10309	ArgumentList	 
>10310	Callee	m_image_data [ i1 ] . UnloadImage
>10311	MemberAccess	m_image_data [ i1 ] . UnloadImage
>10312	Identifier	UnloadImage
>10313	ArrayIndexing	m_image_data [ i1 ]
>10314	Identifier	i1
>10315	Identifier	m_image_data
>10316	IdentifierDeclStatement	 
>10317	IdentifierDecl	* pt_img2 = img_scale ( m_image_data [ i2 ] . m_img , 2 )
>10318	AssignmentExpr	* pt_img2 = img_scale ( m_image_data [ i2 ] . m_img , 2 )
>10319	CallExpression	img_scale ( m_image_data [ i2 ] . m_img , 2 )
>10320	ArgumentList	m_image_data [ i2 ] . m_img
>10321	Argument	2
>10322	PrimaryExpression	2
>10323	Argument	m_image_data [ i2 ] . m_img
>10324	MemberAccess	m_image_data [ i2 ] . m_img
>10325	Identifier	m_img
>10326	ArrayIndexing	m_image_data [ i2 ]
>10327	Identifier	i2
>10328	Identifier	m_image_data
>10329	Callee	img_scale
>10330	Identifier	img_scale
>10331	Identifier	pt_img2
>10332	Identifier	pt_img2
>10333	IdentifierDeclType	img_t *
>10334	IdentifierDeclStatement	 
>10335	IdentifierDecl	* pt_img1 = img_scale ( m_image_data [ i1 ] . m_img , 2 )
>10336	AssignmentExpr	* pt_img1 = img_scale ( m_image_data [ i1 ] . m_img , 2 )
>10337	CallExpression	img_scale ( m_image_data [ i1 ] . m_img , 2 )
>10338	ArgumentList	m_image_data [ i1 ] . m_img
>10339	Argument	2
>10340	PrimaryExpression	2
>10341	Argument	m_image_data [ i1 ] . m_img
>10342	MemberAccess	m_image_data [ i1 ] . m_img
>10343	Identifier	m_img
>10344	ArrayIndexing	m_image_data [ i1 ]
>10345	Identifier	i1
>10346	Identifier	m_image_data
>10347	Callee	img_scale
>10348	Identifier	img_scale
>10349	Identifier	pt_img1
>10350	Identifier	pt_img1
>10351	IdentifierDeclType	img_t *
>10352	ExpressionStatement	 
>10353	CallExpression	m_image_data [ i2 ] . LoadImage ( )
>10354	ArgumentList	 
>10355	Callee	m_image_data [ i2 ] . LoadImage
>10356	MemberAccess	m_image_data [ i2 ] . LoadImage
>10357	Identifier	LoadImage
>10358	ArrayIndexing	m_image_data [ i2 ]
>10359	Identifier	i2
>10360	Identifier	m_image_data
>10361	ExpressionStatement	 
>10362	CallExpression	m_image_data [ i1 ] . LoadImage ( )
>10363	ArgumentList	 
>10364	Callee	m_image_data [ i1 ] . LoadImage
>10365	MemberAccess	m_image_data [ i1 ] . LoadImage
>10366	Identifier	LoadImage
>10367	ArrayIndexing	m_image_data [ i1 ]
>10368	Identifier	i1
>10369	Identifier	m_image_data
>10370	ExpressionStatement	 
>10371	CallExpression	PermuteMatches ( matches )
>10372	ArgumentList	matches
>10373	Argument	matches
>10374	Identifier	matches
>10375	Callee	PermuteMatches
>10376	Identifier	PermuteMatches
>10377	IdentifierDeclStatement	 
>10378	IdentifierDecl	matches = m_matches . GetMatchList ( list_idx )
>10379	AssignmentExpr	matches = m_matches . GetMatchList ( list_idx )
>10380	CallExpression	m_matches . GetMatchList ( list_idx )
>10381	ArgumentList	list_idx
>10382	Argument	list_idx
>10383	Identifier	list_idx
>10384	Callee	m_matches . GetMatchList
>10385	MemberAccess	m_matches . GetMatchList
>10386	Identifier	GetMatchList
>10387	Identifier	m_matches
>10388	Identifier	matches
>10389	Identifier	matches
>10390	IdentifierDeclType	std 
>10391	IdentifierDeclStatement	 
>10392	IdentifierDecl	num_skipped = 0
>10393	AssignmentExpr	num_skipped = 0
>10394	PrimaryExpression	0
>10395	Identifier	num_skipped
>10396	Identifier	num_skipped
>10397	IdentifierDeclType	int
>10398	IdentifierDecl	num_in_back = 0
>10399	AssignmentExpr	num_in_back = 0
>10400	PrimaryExpression	0
>10401	Identifier	num_in_back
>10402	Identifier	num_in_back
>10403	IdentifierDeclType	int
>10404	IdentifierDeclStatement	 
>10405	IdentifierDecl	angle_sum = 0.0
>10406	AssignmentExpr	angle_sum = 0.0
>10407	PrimaryExpression	0.0
>10408	Identifier	angle_sum
>10409	Identifier	angle_sum
>10410	IdentifierDeclType	double
>10411	IdentifierDeclStatement	 
>10412	IdentifierDecl	* colors = new v3_t [ num_matches ]
>10413	AssignmentExpr	* colors = new v3_t [ num_matches ]
>10414	Identifier	num_matches
>10415	Identifier	num_matches
>10416	Identifier	colors
>10417	IdentifierDeclType	v3_t *
>10418	IdentifierDeclStatement	 
>10419	IdentifierDecl	* points = new v3_t [ num_matches ]
>10420	AssignmentExpr	* points = new v3_t [ num_matches ]
>10421	Identifier	num_matches
>10422	Identifier	num_matches
>10423	Identifier	points
>10424	IdentifierDeclType	v3_t *
>10425	IdentifierDeclStatement	 
>10426	IdentifierDecl	pt_count = 0
>10427	AssignmentExpr	pt_count = 0
>10428	PrimaryExpression	0
>10429	Identifier	pt_count
>10430	Identifier	pt_count
>10431	IdentifierDeclType	int
>10432	ExpressionStatement	 
>10433	CallExpression	fflush ( stdout )
>10434	ArgumentList	stdout
>10435	Argument	stdout
>10436	Identifier	stdout
>10437	Callee	fflush
>10438	Identifier	fflush
>10439	ExpressionStatement	 
>10440	CallExpression	printf ( \"[BundleTwoFrame] Adding initial matches...\n\" )
>10441	ArgumentList	\"[BundleTwoFrame] Adding initial matches...\n\"
>10442	Argument	\"[BundleTwoFrame] Adding initial matches...\n\"
>10443	PrimaryExpression	\"[BundleTwoFrame] Adding initial matches...\n\"
>10444	Callee	printf
>10445	Identifier	printf
>10446	IfStatement	if ( ! success )
>10447	ReturnStatement	 
>10448	Identifier	false
>10449	Condition	 
>10450	UnaryOp	! success
>10451	Identifier	success
>10452	UnaryOperator	!
>10453	ExpressionStatement	 
>10454	CallExpression	fflush ( stdout )
>10455	ArgumentList	stdout
>10456	Argument	stdout
>10457	Identifier	stdout
>10458	Callee	fflush
>10459	Identifier	fflush
>10460	IdentifierDeclStatement	 
>10461	IdentifierDecl	success = EstimateRelativePose2 ( i1 , i2 , cameras [ 0 ] , cameras [ 1 ] )
>10462	AssignmentExpr	success = EstimateRelativePose2 ( i1 , i2 , cameras [ 0 ] , cameras [ 1 ] )
>10463	CallExpression	EstimateRelativePose2 ( i1 , i2 , cameras [ 0 ] , cameras [ 1 ] )
>10464	ArgumentList	i1
>10465	Argument	cameras [ 1 ]
>10466	ArrayIndexing	cameras [ 1 ]
>10467	PrimaryExpression	1
>10468	Identifier	cameras
>10469	Argument	cameras [ 0 ]
>10470	ArrayIndexing	cameras [ 0 ]
>10471	PrimaryExpression	0
>10472	Identifier	cameras
>10473	Argument	i2
>10474	Identifier	i2
>10475	Argument	i1
>10476	Identifier	i1
>10477	Callee	EstimateRelativePose2
>10478	Identifier	EstimateRelativePose2
>10479	Identifier	success
>10480	Identifier	success
>10481	IdentifierDeclType	bool
>10482	ExpressionStatement	 
>10483	CallExpression	fflush ( stdout )
>10484	ArgumentList	stdout
>10485	Argument	stdout
>10486	Identifier	stdout
>10487	Callee	fflush
>10488	Identifier	fflush
>10489	ExpressionStatement	 
>10490	CallExpression	printf ( \"[Sifter
>10491	ArgumentList	\"[Sifter
>10492	Argument	\"[Sifter
>10493	PrimaryExpression	\"[Sifter
>10494	Callee	printf
>10495	Identifier	printf
>10496	IfStatement	if ( m_constrain_focal )
>10497	CompoundStatement	 
>10498	ExpressionStatement	 
>10499	CallExpression	SetFocalConstraint ( m_image_data [ i2 ] , cameras + 1 )
>10500	ArgumentList	m_image_data [ i2 ]
>10501	Argument	cameras + 1
>10502	AdditiveExpression	cameras + 1
>10503	PrimaryExpression	1
>10504	Identifier	cameras
>10505	Argument	m_image_data [ i2 ]
>10506	ArrayIndexing	m_image_data [ i2 ]
>10507	Identifier	i2
>10508	Identifier	m_image_data
>10509	Callee	SetFocalConstraint
>10510	Identifier	SetFocalConstraint
>10511	ExpressionStatement	 
>10512	CallExpression	SetFocalConstraint ( m_image_data [ i1 ] , cameras + 0 )
>10513	ArgumentList	m_image_data [ i1 ]
>10514	Argument	cameras + 0
>10515	AdditiveExpression	cameras + 0
>10516	PrimaryExpression	0
>10517	Identifier	cameras
>10518	Argument	m_image_data [ i1 ]
>10519	ArrayIndexing	m_image_data [ i1 ]
>10520	Identifier	i1
>10521	Identifier	m_image_data
>10522	Callee	SetFocalConstraint
>10523	Identifier	SetFocalConstraint
>10524	Condition	 
>10525	Identifier	m_constrain_focal
>10526	ExpressionStatement	 
>10527	CallExpression	SetCameraConstraints ( i2 , cameras + 1 )
>10528	ArgumentList	i2
>10529	Argument	cameras + 1
>10530	AdditiveExpression	cameras + 1
>10531	PrimaryExpression	1
>10532	Identifier	cameras
>10533	Argument	i2
>10534	Identifier	i2
>10535	Callee	SetCameraConstraints
>10536	Identifier	SetCameraConstraints
>10537	ExpressionStatement	 
>10538	CallExpression	SetCameraConstraints ( i1 , cameras + 0 )
>10539	ArgumentList	i1
>10540	Argument	cameras + 0
>10541	AdditiveExpression	cameras + 0
>10542	PrimaryExpression	0
>10543	Identifier	cameras
>10544	Argument	i1
>10545	Identifier	i1
>10546	Callee	SetCameraConstraints
>10547	Identifier	SetCameraConstraints
>10548	IfStatement	if ( m_image_data [ i2 ] . m_has_init_focal )
>10549	ElseStatement	else
>10550	ExpressionStatement	 
>10551	AssignmentExpr	cameras [ 1 ] . f = m_init_focal_length
>10552	Identifier	m_init_focal_length
>10553	MemberAccess	cameras [ 1 ] . f
>10554	Identifier	f
>10555	ArrayIndexing	cameras [ 1 ]
>10556	PrimaryExpression	1
>10557	Identifier	cameras
>10558	ExpressionStatement	 
>10559	AssignmentExpr	cameras [ 1 ] . f = m_image_data [ i2 ] . m_init_focal
>10560	MemberAccess	m_image_data [ i2 ] . m_init_focal
>10561	Identifier	m_init_focal
>10562	ArrayIndexing	m_image_data [ i2 ]
>10563	Identifier	i2
>10564	Identifier	m_image_data
>10565	MemberAccess	cameras [ 1 ] . f
>10566	Identifier	f
>10567	ArrayIndexing	cameras [ 1 ]
>10568	PrimaryExpression	1
>10569	Identifier	cameras
>10570	Condition	 
>10571	MemberAccess	m_image_data [ i2 ] . m_has_init_focal
>10572	Identifier	m_has_init_focal
>10573	ArrayIndexing	m_image_data [ i2 ]
>10574	Identifier	i2
>10575	Identifier	m_image_data
>10576	IfStatement	if ( m_image_data [ i1 ] . m_has_init_focal )
>10577	ElseStatement	else
>10578	ExpressionStatement	 
>10579	AssignmentExpr	cameras [ 0 ] . f = m_init_focal_length
>10580	Identifier	m_init_focal_length
>10581	MemberAccess	cameras [ 0 ] . f
>10582	Identifier	f
>10583	ArrayIndexing	cameras [ 0 ]
>10584	PrimaryExpression	0
>10585	Identifier	cameras
>10586	ExpressionStatement	 
>10587	AssignmentExpr	cameras [ 0 ] . f = m_image_data [ i1 ] . m_init_focal
>10588	MemberAccess	m_image_data [ i1 ] . m_init_focal
>10589	Identifier	m_init_focal
>10590	ArrayIndexing	m_image_data [ i1 ]
>10591	Identifier	i1
>10592	Identifier	m_image_data
>10593	MemberAccess	cameras [ 0 ] . f
>10594	Identifier	f
>10595	ArrayIndexing	cameras [ 0 ]
>10596	PrimaryExpression	0
>10597	Identifier	cameras
>10598	Condition	 
>10599	MemberAccess	m_image_data [ i1 ] . m_has_init_focal
>10600	Identifier	m_has_init_focal
>10601	ArrayIndexing	m_image_data [ i1 ]
>10602	Identifier	i1
>10603	Identifier	m_image_data
>10604	IfStatement	if ( m_image_data [ i1 ] . m_camera . m_constrained [ 2 ] )
>10605	ElseStatement	else
>10606	ExpressionStatement	 
>10607	AssignmentExpr	cameras [ 0 ] . t [ 2 ] = 0.0
>10608	PrimaryExpression	0.0
>10609	ArrayIndexing	cameras [ 0 ] . t [ 2 ]
>10610	PrimaryExpression	2
>10611	MemberAccess	cameras [ 0 ] . t
>10612	Identifier	t
>10613	ArrayIndexing	cameras [ 0 ]
>10614	PrimaryExpression	0
>10615	Identifier	cameras
>10616	ExpressionStatement	 
>10617	AssignmentExpr	cameras [ 0 ] . t [ 2 ] = m_image_data [ i1 ] . m_camera . m_constraints [ 2 ]
>10618	ArrayIndexing	m_image_data [ i1 ] . m_camera . m_constraints [ 2 ]
>10619	PrimaryExpression	2
>10620	MemberAccess	m_image_data [ i1 ] . m_camera . m_constraints
>10621	Identifier	m_constraints
>10622	MemberAccess	m_image_data [ i1 ] . m_camera
>10623	Identifier	m_camera
>10624	ArrayIndexing	m_image_data [ i1 ]
>10625	Identifier	i1
>10626	Identifier	m_image_data
>10627	ArrayIndexing	cameras [ 0 ] . t [ 2 ]
>10628	PrimaryExpression	2
>10629	MemberAccess	cameras [ 0 ] . t
>10630	Identifier	t
>10631	ArrayIndexing	cameras [ 0 ]
>10632	PrimaryExpression	0
>10633	Identifier	cameras
>10634	Condition	 
>10635	ArrayIndexing	m_image_data [ i1 ] . m_camera . m_constrained [ 2 ]
>10636	PrimaryExpression	2
>10637	MemberAccess	m_image_data [ i1 ] . m_camera . m_constrained
>10638	Identifier	m_constrained
>10639	MemberAccess	m_image_data [ i1 ] . m_camera
>10640	Identifier	m_camera
>10641	ArrayIndexing	m_image_data [ i1 ]
>10642	Identifier	i1
>10643	Identifier	m_image_data
>10644	IfStatement	if ( m_image_data [ i1 ] . m_camera . m_constrained [ 1 ] )
>10645	ElseStatement	else
>10646	ExpressionStatement	 
>10647	AssignmentExpr	cameras [ 0 ] . t [ 1 ] = 0.0
>10648	PrimaryExpression	0.0
>10649	ArrayIndexing	cameras [ 0 ] . t [ 1 ]
>10650	PrimaryExpression	1
>10651	MemberAccess	cameras [ 0 ] . t
>10652	Identifier	t
>10653	ArrayIndexing	cameras [ 0 ]
>10654	PrimaryExpression	0
>10655	Identifier	cameras
>10656	ExpressionStatement	 
>10657	AssignmentExpr	cameras [ 0 ] . t [ 1 ] = m_image_data [ i1 ] . m_camera . m_constraints [ 1 ]
>10658	ArrayIndexing	m_image_data [ i1 ] . m_camera . m_constraints [ 1 ]
>10659	PrimaryExpression	1
>10660	MemberAccess	m_image_data [ i1 ] . m_camera . m_constraints
>10661	Identifier	m_constraints
>10662	MemberAccess	m_image_data [ i1 ] . m_camera
>10663	Identifier	m_camera
>10664	ArrayIndexing	m_image_data [ i1 ]
>10665	Identifier	i1
>10666	Identifier	m_image_data
>10667	ArrayIndexing	cameras [ 0 ] . t [ 1 ]
>10668	PrimaryExpression	1
>10669	MemberAccess	cameras [ 0 ] . t
>10670	Identifier	t
>10671	ArrayIndexing	cameras [ 0 ]
>10672	PrimaryExpression	0
>10673	Identifier	cameras
>10674	Condition	 
>10675	ArrayIndexing	m_image_data [ i1 ] . m_camera . m_constrained [ 1 ]
>10676	PrimaryExpression	1
>10677	MemberAccess	m_image_data [ i1 ] . m_camera . m_constrained
>10678	Identifier	m_constrained
>10679	MemberAccess	m_image_data [ i1 ] . m_camera
>10680	Identifier	m_camera
>10681	ArrayIndexing	m_image_data [ i1 ]
>10682	Identifier	i1
>10683	Identifier	m_image_data
>10684	IfStatement	if ( m_image_data [ i1 ] . m_camera . m_constrained [ 0 ] )
>10685	ElseStatement	else
>10686	ExpressionStatement	 
>10687	AssignmentExpr	cameras [ 0 ] . t [ 0 ] = 0.0
>10688	PrimaryExpression	0.0
>10689	ArrayIndexing	cameras [ 0 ] . t [ 0 ]
>10690	PrimaryExpression	0
>10691	MemberAccess	cameras [ 0 ] . t
>10692	Identifier	t
>10693	ArrayIndexing	cameras [ 0 ]
>10694	PrimaryExpression	0
>10695	Identifier	cameras
>10696	ExpressionStatement	 
>10697	AssignmentExpr	cameras [ 0 ] . t [ 0 ] = m_image_data [ i1 ] . m_camera . m_constraints [ 0 ]
>10698	ArrayIndexing	m_image_data [ i1 ] . m_camera . m_constraints [ 0 ]
>10699	PrimaryExpression	0
>10700	MemberAccess	m_image_data [ i1 ] . m_camera . m_constraints
>10701	Identifier	m_constraints
>10702	MemberAccess	m_image_data [ i1 ] . m_camera
>10703	Identifier	m_camera
>10704	ArrayIndexing	m_image_data [ i1 ]
>10705	Identifier	i1
>10706	Identifier	m_image_data
>10707	ArrayIndexing	cameras [ 0 ] . t [ 0 ]
>10708	PrimaryExpression	0
>10709	MemberAccess	cameras [ 0 ] . t
>10710	Identifier	t
>10711	ArrayIndexing	cameras [ 0 ]
>10712	PrimaryExpression	0
>10713	Identifier	cameras
>10714	Condition	 
>10715	ArrayIndexing	m_image_data [ i1 ] . m_camera . m_constrained [ 0 ]
>10716	PrimaryExpression	0
>10717	MemberAccess	m_image_data [ i1 ] . m_camera . m_constrained
>10718	Identifier	m_constrained
>10719	MemberAccess	m_image_data [ i1 ] . m_camera
>10720	Identifier	m_camera
>10721	ArrayIndexing	m_image_data [ i1 ]
>10722	Identifier	i1
>10723	Identifier	m_image_data
>10724	ExpressionStatement	 
>10725	AssignmentExpr	cameras [ 0 ] . R [ 8 ] = 1.0
>10726	PrimaryExpression	1.0
>10727	ArrayIndexing	cameras [ 0 ] . R [ 8 ]
>10728	PrimaryExpression	8
>10729	MemberAccess	cameras [ 0 ] . R
>10730	Identifier	R
>10731	ArrayIndexing	cameras [ 0 ]
>10732	PrimaryExpression	0
>10733	Identifier	cameras
>10734	ExpressionStatement	 
>10735	AssignmentExpr	cameras [ 0 ] . R [ 7 ] = 0.0
>10736	PrimaryExpression	0.0
>10737	ArrayIndexing	cameras [ 0 ] . R [ 7 ]
>10738	PrimaryExpression	7
>10739	MemberAccess	cameras [ 0 ] . R
>10740	Identifier	R
>10741	ArrayIndexing	cameras [ 0 ]
>10742	PrimaryExpression	0
>10743	Identifier	cameras
>10744	ExpressionStatement	 
>10745	AssignmentExpr	cameras [ 0 ] . R [ 6 ] = 0.0
>10746	PrimaryExpression	0.0
>10747	ArrayIndexing	cameras [ 0 ] . R [ 6 ]
>10748	PrimaryExpression	6
>10749	MemberAccess	cameras [ 0 ] . R
>10750	Identifier	R
>10751	ArrayIndexing	cameras [ 0 ]
>10752	PrimaryExpression	0
>10753	Identifier	cameras
>10754	ExpressionStatement	 
>10755	AssignmentExpr	cameras [ 0 ] . R [ 5 ] = 0.0
>10756	PrimaryExpression	0.0
>10757	ArrayIndexing	cameras [ 0 ] . R [ 5 ]
>10758	PrimaryExpression	5
>10759	MemberAccess	cameras [ 0 ] . R
>10760	Identifier	R
>10761	ArrayIndexing	cameras [ 0 ]
>10762	PrimaryExpression	0
>10763	Identifier	cameras
>10764	ExpressionStatement	 
>10765	AssignmentExpr	cameras [ 0 ] . R [ 4 ] = 1.0
>10766	PrimaryExpression	1.0
>10767	ArrayIndexing	cameras [ 0 ] . R [ 4 ]
>10768	PrimaryExpression	4
>10769	MemberAccess	cameras [ 0 ] . R
>10770	Identifier	R
>10771	ArrayIndexing	cameras [ 0 ]
>10772	PrimaryExpression	0
>10773	Identifier	cameras
>10774	ExpressionStatement	 
>10775	AssignmentExpr	cameras [ 0 ] . R [ 3 ] = 0.0
>10776	PrimaryExpression	0.0
>10777	ArrayIndexing	cameras [ 0 ] . R [ 3 ]
>10778	PrimaryExpression	3
>10779	MemberAccess	cameras [ 0 ] . R
>10780	Identifier	R
>10781	ArrayIndexing	cameras [ 0 ]
>10782	PrimaryExpression	0
>10783	Identifier	cameras
>10784	ExpressionStatement	 
>10785	AssignmentExpr	cameras [ 0 ] . R [ 2 ] = 0.0
>10786	PrimaryExpression	0.0
>10787	ArrayIndexing	cameras [ 0 ] . R [ 2 ]
>10788	PrimaryExpression	2
>10789	MemberAccess	cameras [ 0 ] . R
>10790	Identifier	R
>10791	ArrayIndexing	cameras [ 0 ]
>10792	PrimaryExpression	0
>10793	Identifier	cameras
>10794	ExpressionStatement	 
>10795	AssignmentExpr	cameras [ 0 ] . R [ 1 ] = 0.0
>10796	PrimaryExpression	0.0
>10797	ArrayIndexing	cameras [ 0 ] . R [ 1 ]
>10798	PrimaryExpression	1
>10799	MemberAccess	cameras [ 0 ] . R
>10800	Identifier	R
>10801	ArrayIndexing	cameras [ 0 ]
>10802	PrimaryExpression	0
>10803	Identifier	cameras
>10804	ExpressionStatement	 
>10805	AssignmentExpr	cameras [ 0 ] . R [ 0 ] = 1.0
>10806	PrimaryExpression	1.0
>10807	ArrayIndexing	cameras [ 0 ] . R [ 0 ]
>10808	PrimaryExpression	0
>10809	MemberAccess	cameras [ 0 ] . R
>10810	Identifier	R
>10811	ArrayIndexing	cameras [ 0 ]
>10812	PrimaryExpression	0
>10813	Identifier	cameras
>10814	ForStatement	for ( iter = m_image_data [ i2 ] . m_keys . begin ( ) ; iter != m_image_data [ i2 ] . m_keys . end ( ) ; iter ++ )
>10815	CompoundStatement	 
>10816	ExpressionStatement	 
>10817	AssignmentExpr	iter -> m_extra = - 1
>10818	UnaryOp	- 1
>10819	PrimaryExpression	1
>10820	UnaryOperator	-
>10821	PtrMemberAccess	iter -> m_extra
>10822	Identifier	m_extra
>10823	Identifier	iter
>10824	IncDecOp	 
>10825	IncDec	++
>10826	Identifier	iter
>10827	Condition	 
>10828	EqualityExpression	iter != m_image_data [ i2 ] . m_keys . end ( )
>10829	CallExpression	m_image_data [ i2 ] . m_keys . end ( )
>10830	ArgumentList	 
>10831	Callee	m_image_data [ i2 ] . m_keys . end
>10832	MemberAccess	m_image_data [ i2 ] . m_keys . end
>10833	Identifier	end
>10834	MemberAccess	m_image_data [ i2 ] . m_keys
>10835	Identifier	m_keys
>10836	ArrayIndexing	m_image_data [ i2 ]
>10837	Identifier	i2
>10838	Identifier	m_image_data
>10839	Identifier	iter
>10840	ForInit	 
>10841	AssignmentExpr	iter = m_image_data [ i2 ] . m_keys . begin ( )
>10842	CallExpression	m_image_data [ i2 ] . m_keys . begin ( )
>10843	ArgumentList	 
>10844	Callee	m_image_data [ i2 ] . m_keys . begin
>10845	MemberAccess	m_image_data [ i2 ] . m_keys . begin
>10846	Identifier	begin
>10847	MemberAccess	m_image_data [ i2 ] . m_keys
>10848	Identifier	m_keys
>10849	ArrayIndexing	m_image_data [ i2 ]
>10850	Identifier	i2
>10851	Identifier	m_image_data
>10852	Identifier	iter
>10853	ForStatement	for ( iter = m_image_data [ i1 ] . m_keys . begin ( ) ; iter != m_image_data [ i1 ] . m_keys . end ( ) ; iter ++ )
>10854	CompoundStatement	 
>10855	ExpressionStatement	 
>10856	AssignmentExpr	iter -> m_extra = - 1
>10857	UnaryOp	- 1
>10858	PrimaryExpression	1
>10859	UnaryOperator	-
>10860	PtrMemberAccess	iter -> m_extra
>10861	Identifier	m_extra
>10862	Identifier	iter
>10863	IncDecOp	 
>10864	IncDec	++
>10865	Identifier	iter
>10866	Condition	 
>10867	EqualityExpression	iter != m_image_data [ i1 ] . m_keys . end ( )
>10868	CallExpression	m_image_data [ i1 ] . m_keys . end ( )
>10869	ArgumentList	 
>10870	Callee	m_image_data [ i1 ] . m_keys . end
>10871	MemberAccess	m_image_data [ i1 ] . m_keys . end
>10872	Identifier	end
>10873	MemberAccess	m_image_data [ i1 ] . m_keys
>10874	Identifier	m_keys
>10875	ArrayIndexing	m_image_data [ i1 ]
>10876	Identifier	i1
>10877	Identifier	m_image_data
>10878	Identifier	iter
>10879	ForInit	 
>10880	AssignmentExpr	iter = m_image_data [ i1 ] . m_keys . begin ( )
>10881	CallExpression	m_image_data [ i1 ] . m_keys . begin ( )
>10882	ArgumentList	 
>10883	Callee	m_image_data [ i1 ] . m_keys . begin
>10884	MemberAccess	m_image_data [ i1 ] . m_keys . begin
>10885	Identifier	begin
>10886	MemberAccess	m_image_data [ i1 ] . m_keys
>10887	Identifier	m_keys
>10888	ArrayIndexing	m_image_data [ i1 ]
>10889	Identifier	i1
>10890	Identifier	m_image_data
>10891	Identifier	iter
>10892	IdentifierDeclStatement	 
>10893	IdentifierDecl	iter
>10894	Identifier	iter
>10895	IdentifierDeclType	std 
>10896	IdentifierDeclStatement	 
>10897	IdentifierDecl	pt_views
>10898	Identifier	pt_views
>10899	IdentifierDeclType	std 
>10900	IdentifierDeclStatement	 
>10901	IdentifierDecl	tracks
>10902	Identifier	tracks
>10903	IdentifierDeclType	std 
>10904	ExpressionStatement	 
>10905	CallExpression	InitializeCameraParams ( m_image_data [ i2 ] , cameras [ 1 ] )
>10906	ArgumentList	m_image_data [ i2 ]
>10907	Argument	cameras [ 1 ]
>10908	ArrayIndexing	cameras [ 1 ]
>10909	PrimaryExpression	1
>10910	Identifier	cameras
>10911	Argument	m_image_data [ i2 ]
>10912	ArrayIndexing	m_image_data [ i2 ]
>10913	Identifier	i2
>10914	Identifier	m_image_data
>10915	Callee	InitializeCameraParams
>10916	Identifier	InitializeCameraParams
>10917	ExpressionStatement	 
>10918	CallExpression	InitializeCameraParams ( m_image_data [ i1 ] , cameras [ 0 ] )
>10919	ArgumentList	m_image_data [ i1 ]
>10920	Argument	cameras [ 0 ]
>10921	ArrayIndexing	cameras [ 0 ]
>10922	PrimaryExpression	0
>10923	Identifier	cameras
>10924	Argument	m_image_data [ i1 ]
>10925	ArrayIndexing	m_image_data [ i1 ]
>10926	Identifier	i1
>10927	Identifier	m_image_data
>10928	Callee	InitializeCameraParams
>10929	Identifier	InitializeCameraParams
>10930	IfStatement	if ( m_keypoint_border_width > 0 )
>10931	CompoundStatement	 
>10932	IfStatement	if ( num_matches < MATCH_THRESHOLD )
>10933	CompoundStatement	 
>10934	ReturnStatement	 
>10935	Identifier	false
>10936	ExpressionStatement	 
>10937	CallExpression	printf ( \"[BundleTwoFrame] Removed too many matches\n\" )
>10938	ArgumentList	\"[BundleTwoFrame] Removed too many matches\n\"
>10939	Argument	\"[BundleTwoFrame] Removed too many matches\n\"
>10940	PrimaryExpression	\"[BundleTwoFrame] Removed too many matches\n\"
>10941	Callee	printf
>10942	Identifier	printf
>10943	Condition	 
>10944	RelationalExpression	num_matches < MATCH_THRESHOLD
>10945	Identifier	MATCH_THRESHOLD
>10946	Identifier	num_matches
>10947	IdentifierDeclStatement	 
>10948	IdentifierDecl	num_matches = m_matches . GetNumMatches ( list_idx )
>10949	AssignmentExpr	num_matches = m_matches . GetNumMatches ( list_idx )
>10950	CallExpression	m_matches . GetNumMatches ( list_idx )
>10951	ArgumentList	list_idx
>10952	Argument	list_idx
>10953	Identifier	list_idx
>10954	Callee	m_matches . GetNumMatches
>10955	MemberAccess	m_matches . GetNumMatches
>10956	Identifier	GetNumMatches
>10957	Identifier	m_matches
>10958	Identifier	num_matches
>10959	Identifier	num_matches
>10960	IdentifierDeclType	int
>10961	ExpressionStatement	 
>10962	CallExpression	RemoveMatchesNearBorder ( i1 , i2 , m_keypoint_border_width )
>10963	ArgumentList	i1
>10964	Argument	m_keypoint_border_width
>10965	Identifier	m_keypoint_border_width
>10966	Argument	i2
>10967	Identifier	i2
>10968	Argument	i1
>10969	Identifier	i1
>10970	Callee	RemoveMatchesNearBorder
>10971	Identifier	RemoveMatchesNearBorder
>10972	Condition	 
>10973	RelationalExpression	m_keypoint_border_width > 0
>10974	PrimaryExpression	0
>10975	Identifier	m_keypoint_border_width
>10976	IfStatement	if ( num_matches > m_image_data [ i1 ] . m_keys . size ( ) - 5 && num_matches > m_image_data [ i2 ] . m_keys . \
>10977	CompoundStatement	 
>10978	ReturnStatement	 
>10979	Identifier	true
>10980	ExpressionStatement	 
>10981	AssignmentExpr	num_pts_out = ( int ) num_matches
>10982	CastExpression	( int ) num_matches
>10983	Identifier	num_matches
>10984	CastTarget	int
>10985	Identifier	num_pts_out
>10986	ExpressionStatement	 
>10987	AssignmentExpr	angle_out = 0.0
>10988	PrimaryExpression	0.0
>10989	Identifier	angle_out
>10990	ExpressionStatement	 
>10991	CallExpression	printf ( \"[BundleTwoFrame] Identical images!\n\" )
>10992	ArgumentList	\"[BundleTwoFrame] Identical images!\n\"
>10993	Argument	\"[BundleTwoFrame] Identical images!\n\"
>10994	PrimaryExpression	\"[BundleTwoFrame] Identical images!\n\"
>10995	Callee	printf
>10996	Identifier	printf
>10997	Condition	 
>10998	AndExpression	num_matches > m_image_data [ i1 ] . m_keys . size ( ) - 5 && num_matches > m_image_data [ i2 ] . m_keys \
>10999	RelationalExpression	num_matches > m_image_data [ i2 ] . m_keys . size ( ) - 5
>11000	AdditiveExpression	m_image_data [ i2 ] . m_keys . size ( ) - 5
>11001	PrimaryExpression	5
>11002	CallExpression	m_image_data [ i2 ] . m_keys . size ( )
>11003	ArgumentList	 
>11004	Callee	m_image_data [ i2 ] . m_keys . size
>11005	MemberAccess	m_image_data [ i2 ] . m_keys . size
>11006	Identifier	size
>11007	MemberAccess	m_image_data [ i2 ] . m_keys
>11008	Identifier	m_keys
>11009	ArrayIndexing	m_image_data [ i2 ]
>11010	Identifier	i2
>11011	Identifier	m_image_data
>11012	Identifier	num_matches
>11013	RelationalExpression	num_matches > m_image_data [ i1 ] . m_keys . size ( ) - 5
>11014	AdditiveExpression	m_image_data [ i1 ] . m_keys . size ( ) - 5
>11015	PrimaryExpression	5
>11016	CallExpression	m_image_data [ i1 ] . m_keys . size ( )
>11017	ArgumentList	 
>11018	Callee	m_image_data [ i1 ] . m_keys . size
>11019	MemberAccess	m_image_data [ i1 ] . m_keys . size
>11020	Identifier	size
>11021	MemberAccess	m_image_data [ i1 ] . m_keys
>11022	Identifier	m_keys
>11023	ArrayIndexing	m_image_data [ i1 ]
>11024	Identifier	i1
>11025	Identifier	m_image_data
>11026	Identifier	num_matches
>11027	IdentifierDeclStatement	 
>11028	IdentifierDecl	num_matches = m_matches . GetNumMatches ( list_idx )
>11029	AssignmentExpr	num_matches = m_matches . GetNumMatches ( list_idx )
>11030	CallExpression	m_matches . GetNumMatches ( list_idx )
>11031	ArgumentList	list_idx
>11032	Argument	list_idx
>11033	Identifier	list_idx
>11034	Callee	m_matches . GetNumMatches
>11035	MemberAccess	m_matches . GetNumMatches
>11036	Identifier	GetNumMatches
>11037	Identifier	m_matches
>11038	Identifier	num_matches
>11039	Identifier	num_matches
>11040	IdentifierDeclType	unsigned int
>11041	IfStatement	if ( i1 < i2 )
>11042	ElseStatement	else
>11043	ExpressionStatement	 
>11044	AssignmentExpr	list_idx = GetMatchIndex ( i2 , i1 )
>11045	CallExpression	GetMatchIndex ( i2 , i1 )
>11046	ArgumentList	i2
>11047	Argument	i1
>11048	Identifier	i1
>11049	Argument	i2
>11050	Identifier	i2
>11051	Callee	GetMatchIndex
>11052	Identifier	GetMatchIndex
>11053	Identifier	list_idx
>11054	ExpressionStatement	 
>11055	AssignmentExpr	list_idx = GetMatchIndex ( i1 , i2 )
>11056	CallExpression	GetMatchIndex ( i1 , i2 )
>11057	ArgumentList	i1
>11058	Argument	i2
>11059	Identifier	i2
>11060	Argument	i1
>11061	Identifier	i1
>11062	Callee	GetMatchIndex
>11063	Identifier	GetMatchIndex
>11064	Identifier	list_idx
>11065	Condition	 
>11066	RelationalExpression	i1 < i2
>11067	Identifier	i2
>11068	Identifier	i1
>11069	IdentifierDeclStatement	 
>11070	IdentifierDecl	list_idx
>11071	Identifier	list_idx
>11072	IdentifierDeclType	MatchIndex
>11073	IfStatement	if ( bundle_from_tracks )
>11074	ExpressionStatement	 
>11075	CallExpression	SetMatchesFromTracks ( i1 , i2 )
>11076	ArgumentList	i1
>11077	Argument	i2
>11078	Identifier	i2
>11079	Argument	i1
>11080	Identifier	i1
>11081	Callee	SetMatchesFromTracks
>11082	Identifier	SetMatchesFromTracks
>11083	Condition	 
>11084	Identifier	bundle_from_tracks
>11085	ExpressionStatement	 
>11086	CallExpression	m_image_data [ i2 ] . ReadKeyColors ( )
>11087	ArgumentList	 
>11088	Callee	m_image_data [ i2 ] . ReadKeyColors
>11089	MemberAccess	m_image_data [ i2 ] . ReadKeyColors
>11090	Identifier	ReadKeyColors
>11091	ArrayIndexing	m_image_data [ i2 ]
>11092	Identifier	i2
>11093	Identifier	m_image_data
>11094	ExpressionStatement	 
>11095	CallExpression	m_image_data [ i1 ] . ReadKeyColors ( )
>11096	ArgumentList	 
>11097	Callee	m_image_data [ i1 ] . ReadKeyColors
>11098	MemberAccess	m_image_data [ i1 ] . ReadKeyColors
>11099	Identifier	ReadKeyColors
>11100	ArrayIndexing	m_image_data [ i1 ]
>11101	Identifier	i1
>11102	Identifier	m_image_data
>11103	IfStatement	if ( ! m_image_data [ i2 ] . m_keys_loaded )
>11104	ExpressionStatement	 
>11105	CallExpression	m_image_data [ i2 ] . LoadKeys ( false , ! m_optimize_for_fisheye )
>11106	ArgumentList	false
>11107	Argument	! m_optimize_for_fisheye
>11108	UnaryOp	! m_optimize_for_fisheye
>11109	Identifier	m_optimize_for_fisheye
>11110	UnaryOperator	!
>11111	Argument	false
>11112	Identifier	false
>11113	Callee	m_image_data [ i2 ] . LoadKeys
>11114	MemberAccess	m_image_data [ i2 ] . LoadKeys
>11115	Identifier	LoadKeys
>11116	ArrayIndexing	m_image_data [ i2 ]
>11117	Identifier	i2
>11118	Identifier	m_image_data
>11119	Condition	 
>11120	UnaryOp	! m_image_data [ i2 ] . m_keys_loaded
>11121	MemberAccess	m_image_data [ i2 ] . m_keys_loaded
>11122	Identifier	m_keys_loaded
>11123	ArrayIndexing	m_image_data [ i2 ]
>11124	Identifier	i2
>11125	Identifier	m_image_data
>11126	UnaryOperator	!
>11127	IfStatement	if ( ! m_image_data [ i1 ] . m_keys_loaded )
>11128	ExpressionStatement	 
>11129	CallExpression	m_image_data [ i1 ] . LoadKeys ( false , ! m_optimize_for_fisheye )
>11130	ArgumentList	false
>11131	Argument	! m_optimize_for_fisheye
>11132	UnaryOp	! m_optimize_for_fisheye
>11133	Identifier	m_optimize_for_fisheye
>11134	UnaryOperator	!
>11135	Argument	false
>11136	Identifier	false
>11137	Callee	m_image_data [ i1 ] . LoadKeys
>11138	MemberAccess	m_image_data [ i1 ] . LoadKeys
>11139	Identifier	LoadKeys
>11140	ArrayIndexing	m_image_data [ i1 ]
>11141	Identifier	i1
>11142	Identifier	m_image_data
>11143	Condition	 
>11144	UnaryOp	! m_image_data [ i1 ] . m_keys_loaded
>11145	MemberAccess	m_image_data [ i1 ] . m_keys_loaded
>11146	Identifier	m_keys_loaded
>11147	ArrayIndexing	m_image_data [ i1 ]
>11148	Identifier	i1
>11149	Identifier	m_image_data
>11150	UnaryOperator	!
>11151	IdentifierDeclStatement	 
>11152	IdentifierDecl	cameras [ 2 ]
>11153	PrimaryExpression	2
>11154	Identifier	cameras
>11155	IdentifierDeclType	camera_params_t [ 2 ]
>11156	IfStatement	if ( ! m_image_data [ i1 ] . m_has_init_focal || ! m_image_data [ i2 ] . m_has_init_focal )
>11157	CompoundStatement	 
>11158	ReturnStatement	 
>11159	Identifier	false
>11160	ExpressionStatement	 
>11161	Statement	 
>11162	Statement	 
>11163	Statement	 
>11164	Statement	 
>11165	Statement	 
>11166	Condition	 
>11167	OrExpression	! m_image_data [ i1 ] . m_has_init_focal || ! m_image_data [ i2 ] . m_has_init_focal
>11168	UnaryOp	! m_image_data [ i2 ] . m_has_init_focal
>11169	MemberAccess	m_image_data [ i2 ] . m_has_init_focal
>11170	Identifier	m_has_init_focal
>11171	ArrayIndexing	m_image_data [ i2 ]
>11172	Identifier	i2
>11173	Identifier	m_image_data
>11174	UnaryOperator	!
>11175	UnaryOp	! m_image_data [ i1 ] . m_has_init_focal
>11176	MemberAccess	m_image_data [ i1 ] . m_has_init_focal
>11177	Identifier	m_has_init_focal
>11178	ArrayIndexing	m_image_data [ i1 ]
>11179	Identifier	i1
>11180	Identifier	m_image_data
>11181	UnaryOperator	!
>11182	ExpressionStatement	 
>11183	CallExpression	assert ( ! m_fixed_focal_length )
>11184	ArgumentList	! m_fixed_focal_length
>11185	Argument	! m_fixed_focal_length
>11186	UnaryOp	! m_fixed_focal_length
>11187	Identifier	m_fixed_focal_length
>11188	UnaryOperator	!
>11189	Callee	assert
>11190	Identifier	assert
>11191	IdentifierDeclStatement	 
>11192	IdentifierDecl	TERM_THRESH = 1.0e-12
>11193	AssignmentExpr	TERM_THRESH = 1.0e-12
>11194	PrimaryExpression	1.0e-12
>11195	Identifier	TERM_THRESH
>11196	Identifier	TERM_THRESH
>11197	IdentifierDeclType	const double
>11531	FunctionDef	BundlerApp 
>11532	ParameterList	 
>11533	ReturnType	void
>11534	CompoundStatement	 
>11535	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>11536	CompoundStatement	 
>11537	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>11538	CompoundStatement	 
>11539	ExpressionStatement	 
>11540	IncDecOp	count ++
>11541	IncDec	++
>11542	Identifier	count
>11543	ExpressionStatement	 
>11544	CallExpression	matrix_print ( 3 , 3 , C )
>11545	ArgumentList	3
>11546	Argument	C
>11547	Identifier	C
>11548	Argument	3
>11549	PrimaryExpression	3
>11550	Argument	3
>11551	PrimaryExpression	3
>11552	Callee	matrix_print
>11553	Identifier	matrix_print
>11554	ExpressionStatement	 
>11555	CallExpression	printf ( \"Covariance [Image %d]
>11556	ArgumentList	\"Covariance [Image %d]
>11557	Argument	i
>11558	Identifier	i
>11559	Argument	\"Covariance [Image %d]
>11560	PrimaryExpression	\"Covariance [Image %d]
>11561	Callee	printf
>11562	Identifier	printf
>11563	ExpressionStatement	 
>11564	CallExpression	fprintf ( f , \"%0.6e\n\" , C [ 0 ] + C [ 4 ] + C [ 8 ] )
>11565	ArgumentList	f
>11566	Argument	C [ 0 ] + C [ 4 ] + C [ 8 ]
>11567	AdditiveExpression	C [ 0 ] + C [ 4 ] + C [ 8 ]
>11568	AdditiveExpression	C [ 4 ] + C [ 8 ]
>11569	ArrayIndexing	C [ 8 ]
>11570	PrimaryExpression	8
>11571	Identifier	C
>11572	ArrayIndexing	C [ 4 ]
>11573	PrimaryExpression	4
>11574	Identifier	C
>11575	ArrayIndexing	C [ 0 ]
>11576	PrimaryExpression	0
>11577	Identifier	C
>11578	Argument	\"%0.6e\n\"
>11579	PrimaryExpression	\"%0.6e\n\"
>11580	Argument	f
>11581	Identifier	f
>11582	Callee	fprintf
>11583	Identifier	fprintf
>11584	ExpressionStatement	 
>11585	Statement	 
>11586	Statement	 
>11587	Statement	 
>11588	Statement	 
>11589	Statement	 
>11590	Statement	 
>11591	Statement	 
>11592	Statement	 
>11593	Statement	 
>11594	Statement	 
>11595	Statement	 
>11596	Statement	 
>11597	Statement	 
>11598	Statement	 
>11599	Statement	 
>11600	Statement	 
>11601	Statement	 
>11602	Statement	 
>11603	Statement	 
>11604	Statement	 
>11605	Statement	 
>11606	Statement	 
>11607	Statement	 
>11608	Statement	 
>11609	Statement	 
>11610	Statement	 
>11611	Statement	 
>11612	Statement	 
>11613	Statement	 
>11614	Statement	 
>11615	Statement	 
>11616	Statement	 
>11617	Statement	 
>11618	Statement	 
>11619	Statement	 
>11620	Statement	 
>11621	Statement	 
>11622	Statement	 
>11623	Statement	 
>11624	Statement	 
>11625	Statement	 
>11626	Statement	 
>11627	Statement	 
>11628	Statement	 
>11629	Statement	 
>11630	Statement	 
>11631	Statement	 
>11632	Statement	 
>11633	Statement	 
>11634	Statement	 
>11635	Statement	 
>11636	Statement	 
>11637	Statement	 
>11638	ExpressionStatement	 
>11639	CallExpression	fprintf ( f , \"%d\n\" , i )
>11640	ArgumentList	f
>11641	Argument	i
>11642	Identifier	i
>11643	Argument	\"%d\n\"
>11644	PrimaryExpression	\"%d\n\"
>11645	Argument	f
>11646	Identifier	f
>11647	Callee	fprintf
>11648	Identifier	fprintf
>11649	IdentifierDeclStatement	 
>11650	IdentifierDecl	C [ 9 ] = { Sinv [ row0 + off + 0 ] , Sinv [ row0 + off + 1 ] , Sinv [ row0 + off + 2 ] , Sinv [ row1 + off + 0 ] , \
>11651	AssignmentExpr	C [ 9 ] = { Sinv [ row0 + off + 0 ] , Sinv [ row0 + off + 1 ] , Sinv [ row0 + off + 2 ] , Sinv [ row1 + \
>11652	InitializerList	Sinv [ row0 + off + 0 ]
>11653	ArrayIndexing	Sinv [ row2 + off + 2 ]
>11654	AdditiveExpression	row2 + off + 2
>11655	AdditiveExpression	off + 2
>11656	PrimaryExpression	2
>11657	Identifier	off
>11658	Identifier	row2
>11659	Identifier	Sinv
>11660	ArrayIndexing	Sinv [ row2 + off + 1 ]
>11661	AdditiveExpression	row2 + off + 1
>11662	AdditiveExpression	off + 1
>11663	PrimaryExpression	1
>11664	Identifier	off
>11665	Identifier	row2
>11666	Identifier	Sinv
>11667	ArrayIndexing	Sinv [ row2 + off + 0 ]
>11668	AdditiveExpression	row2 + off + 0
>11669	AdditiveExpression	off + 0
>11670	PrimaryExpression	0
>11671	Identifier	off
>11672	Identifier	row2
>11673	Identifier	Sinv
>11674	ArrayIndexing	Sinv [ row1 + off + 2 ]
>11675	AdditiveExpression	row1 + off + 2
>11676	AdditiveExpression	off + 2
>11677	PrimaryExpression	2
>11678	Identifier	off
>11679	Identifier	row1
>11680	Identifier	Sinv
>11681	ArrayIndexing	Sinv [ row1 + off + 1 ]
>11682	AdditiveExpression	row1 + off + 1
>11683	AdditiveExpression	off + 1
>11684	PrimaryExpression	1
>11685	Identifier	off
>11686	Identifier	row1
>11687	Identifier	Sinv
>11688	ArrayIndexing	Sinv [ row1 + off + 0 ]
>11689	AdditiveExpression	row1 + off + 0
>11690	AdditiveExpression	off + 0
>11691	PrimaryExpression	0
>11692	Identifier	off
>11693	Identifier	row1
>11694	Identifier	Sinv
>11695	ArrayIndexing	Sinv [ row0 + off + 2 ]
>11696	AdditiveExpression	row0 + off + 2
>11697	AdditiveExpression	off + 2
>11698	PrimaryExpression	2
>11699	Identifier	off
>11700	Identifier	row0
>11701	Identifier	Sinv
>11702	ArrayIndexing	Sinv [ row0 + off + 1 ]
>11703	AdditiveExpression	row0 + off + 1
>11704	AdditiveExpression	off + 1
>11705	PrimaryExpression	1
>11706	Identifier	off
>11707	Identifier	row0
>11708	Identifier	Sinv
>11709	ArrayIndexing	Sinv [ row0 + off + 0 ]
>11710	AdditiveExpression	row0 + off + 0
>11711	AdditiveExpression	off + 0
>11712	PrimaryExpression	0
>11713	Identifier	off
>11714	Identifier	row0
>11715	Identifier	Sinv
>11716	Identifier	C
>11717	PrimaryExpression	9
>11718	Identifier	C
>11719	IdentifierDeclType	double [ 9 ]
>11720	IdentifierDeclStatement	 
>11721	IdentifierDecl	off = cnp * count
>11722	AssignmentExpr	off = cnp * count
>11723	MultiplicativeExpression	cnp * count
>11724	Identifier	count
>11725	Identifier	cnp
>11726	Identifier	off
>11727	Identifier	off
>11728	IdentifierDeclType	int
>11729	IdentifierDeclStatement	 
>11730	IdentifierDecl	row2 = ( cnp * count + 2 ) * num_vars
>11731	AssignmentExpr	row2 = ( cnp * count + 2 ) * num_vars
>11732	MultiplicativeExpression	( cnp * count + 2 ) * num_vars
>11733	Identifier	num_vars
>11734	AdditiveExpression	cnp * count + 2
>11735	PrimaryExpression	2
>11736	MultiplicativeExpression	cnp * count
>11737	Identifier	count
>11738	Identifier	cnp
>11739	Identifier	row2
>11740	Identifier	row2
>11741	IdentifierDeclType	int
>11742	IdentifierDeclStatement	 
>11743	IdentifierDecl	row1 = ( cnp * count + 1 ) * num_vars
>11744	AssignmentExpr	row1 = ( cnp * count + 1 ) * num_vars
>11745	MultiplicativeExpression	( cnp * count + 1 ) * num_vars
>11746	Identifier	num_vars
>11747	AdditiveExpression	cnp * count + 1
>11748	PrimaryExpression	1
>11749	MultiplicativeExpression	cnp * count
>11750	Identifier	count
>11751	Identifier	cnp
>11752	Identifier	row1
>11753	Identifier	row1
>11754	IdentifierDeclType	int
>11755	IdentifierDeclStatement	 
>11756	IdentifierDecl	row0 = ( cnp * count + 0 ) * num_vars
>11757	AssignmentExpr	row0 = ( cnp * count + 0 ) * num_vars
>11758	MultiplicativeExpression	( cnp * count + 0 ) * num_vars
>11759	Identifier	num_vars
>11760	AdditiveExpression	cnp * count + 0
>11761	PrimaryExpression	0
>11762	MultiplicativeExpression	cnp * count
>11763	Identifier	count
>11764	Identifier	cnp
>11765	Identifier	row0
>11766	Identifier	row0
>11767	IdentifierDeclType	int
>11768	Condition	 
>11769	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>11770	Identifier	m_adjusted
>11771	MemberAccess	m_image_data [ i ] . m_camera
>11772	Identifier	m_camera
>11773	ArrayIndexing	m_image_data [ i ]
>11774	Identifier	i
>11775	Identifier	m_image_data
>11776	IncDecOp	 
>11777	IncDec	++
>11778	Identifier	i
>11779	Condition	 
>11780	RelationalExpression	i < num_images
>11781	Identifier	num_images
>11782	Identifier	i
>11783	ForInit	 
>11784	IdentifierDeclStatement	int i = 0 ;
>11785	IdentifierDecl	i = 0
>11786	AssignmentExpr	i = 0
>11787	PrimaryExpression	0
>11788	Identifier	i
>11789	Identifier	i
>11790	IdentifierDeclType	int
>11791	IdentifierDeclStatement	 
>11792	IdentifierDecl	count = 0
>11793	AssignmentExpr	count = 0
>11794	PrimaryExpression	0
>11795	Identifier	count
>11796	Identifier	count
>11797	IdentifierDeclType	int
>11798	IfStatement	if ( f == NULL )
>11799	CompoundStatement	 
>11800	ReturnStatement	 
>11801	ExpressionStatement	 
>11802	CallExpression	printf ( \"[ComputeCameraCovariance] Error opening file %s for writing\n\" , \"covariance.txt\" )
>11803	ArgumentList	\"[ComputeCameraCovariance] Error opening file %s for writing\n\"
>11804	Argument	\"covariance.txt\"
>11805	PrimaryExpression	\"covariance.txt\"
>11806	Argument	\"[ComputeCameraCovariance] Error opening file %s for writing\n\"
>11807	PrimaryExpression	\"[ComputeCameraCovariance] Error opening file %s for writing\n\"
>11808	Callee	printf
>11809	Identifier	printf
>11810	Condition	 
>11811	EqualityExpression	f == NULL
>11812	Identifier	NULL
>11813	Identifier	f
>11814	IdentifierDeclStatement	 
>11815	IdentifierDecl	* f = fopen ( \"covariance.txt\" , \"w\" )
>11816	AssignmentExpr	* f = fopen ( \"covariance.txt\" , \"w\" )
>11817	CallExpression	fopen ( \"covariance.txt\" , \"w\" )
>11818	ArgumentList	\"covariance.txt\"
>11819	Argument	\"w\"
>11820	PrimaryExpression	\"w\"
>11821	Argument	\"covariance.txt\"
>11822	PrimaryExpression	\"covariance.txt\"
>11823	Callee	fopen
>11824	Identifier	fopen
>11825	Identifier	f
>11826	Identifier	f
>11827	IdentifierDeclType	FILE *
>11828	ExpressionStatement	 
>11829	CallExpression	matrix_invert ( num_vars , S , Sinv )
>11830	ArgumentList	num_vars
>11831	Argument	Sinv
>11832	Identifier	Sinv
>11833	Argument	S
>11834	Identifier	S
>11835	Argument	num_vars
>11836	Identifier	num_vars
>11837	Callee	matrix_invert
>11838	Identifier	matrix_invert
>11839	IdentifierDeclStatement	 
>11840	IdentifierDecl	* Sinv = new double [ num_vars * num_vars ]
>11841	AssignmentExpr	* Sinv = new double [ num_vars * num_vars ]
>11842	MultiplicativeExpression	num_vars * num_vars
>11843	Identifier	num_vars
>11844	Identifier	num_vars
>11845	Identifier	Sinv
>11846	Identifier	Sinv
>11847	IdentifierDeclType	double *
>11848	ForStatement	for ( int i = 1 ; i < num_images + 1 ; i ++ )
>11849	CompoundStatement	 
>11850	ExpressionStatement	 
>11851	Identifier	Sinv_sub
>11852	Statement	 
>11853	Statement	 
>11854	Statement	 
>11855	ExpressionStatement	 
>11856	Identifier	Ssub
>11857	Statement	 
>11858	Statement	 
>11859	Statement	 
>11860	ForStatement	for ( int j = 0 ; j < i ; j ++ )
>11861	CompoundStatement	 
>11862	ExpressionStatement	 
>11863	CallExpression	matrix_print ( 3 , 3 , C )
>11864	ArgumentList	3
>11865	Argument	C
>11866	Identifier	C
>11867	Argument	3
>11868	PrimaryExpression	3
>11869	Argument	3
>11870	PrimaryExpression	3
>11871	Callee	matrix_print
>11872	Identifier	matrix_print
>11873	ExpressionStatement	 
>11874	CallExpression	printf ( \"Covariance[%d] [Image %d]
>11875	ArgumentList	\"Covariance[%d] [Image %d]
>11876	Argument	j
>11877	Identifier	j
>11878	Argument	i
>11879	Identifier	i
>11880	Argument	\"Covariance[%d] [Image %d]
>11881	PrimaryExpression	\"Covariance[%d] [Image %d]
>11882	Callee	printf
>11883	Identifier	printf
>11884	IdentifierDeclStatement	 
>11885	IdentifierDecl	C [ 9 ] = { Sinv_sub [ row0 + off + 0 ] , Sinv_sub [ row0 + off + 1 ] , Sinv_sub [ row0 + off + 2 ] , Sinv_sub [ \
>11886	AssignmentExpr	C [ 9 ] = { Sinv_sub [ row0 + off + 0 ] , Sinv_sub [ row0 + off + 1 ] , Sinv_sub [ row0 + off + 2 ] , \
>11887	InitializerList	Sinv_sub [ row0 + off + 0 ]
>11888	ArrayIndexing	Sinv_sub [ row2 + off + 2 ]
>11889	AdditiveExpression	row2 + off + 2
>11890	AdditiveExpression	off + 2
>11891	PrimaryExpression	2
>11892	Identifier	off
>11893	Identifier	row2
>11894	Identifier	Sinv_sub
>11895	ArrayIndexing	Sinv_sub [ row2 + off + 1 ]
>11896	AdditiveExpression	row2 + off + 1
>11897	AdditiveExpression	off + 1
>11898	PrimaryExpression	1
>11899	Identifier	off
>11900	Identifier	row2
>11901	Identifier	Sinv_sub
>11902	ArrayIndexing	Sinv_sub [ row2 + off + 0 ]
>11903	AdditiveExpression	row2 + off + 0
>11904	AdditiveExpression	off + 0
>11905	PrimaryExpression	0
>11906	Identifier	off
>11907	Identifier	row2
>11908	Identifier	Sinv_sub
>11909	ArrayIndexing	Sinv_sub [ row1 + off + 2 ]
>11910	AdditiveExpression	row1 + off + 2
>11911	AdditiveExpression	off + 2
>11912	PrimaryExpression	2
>11913	Identifier	off
>11914	Identifier	row1
>11915	Identifier	Sinv_sub
>11916	ArrayIndexing	Sinv_sub [ row1 + off + 1 ]
>11917	AdditiveExpression	row1 + off + 1
>11918	AdditiveExpression	off + 1
>11919	PrimaryExpression	1
>11920	Identifier	off
>11921	Identifier	row1
>11922	Identifier	Sinv_sub
>11923	ArrayIndexing	Sinv_sub [ row1 + off + 0 ]
>11924	AdditiveExpression	row1 + off + 0
>11925	AdditiveExpression	off + 0
>11926	PrimaryExpression	0
>11927	Identifier	off
>11928	Identifier	row1
>11929	Identifier	Sinv_sub
>11930	ArrayIndexing	Sinv_sub [ row0 + off + 2 ]
>11931	AdditiveExpression	row0 + off + 2
>11932	AdditiveExpression	off + 2
>11933	PrimaryExpression	2
>11934	Identifier	off
>11935	Identifier	row0
>11936	Identifier	Sinv_sub
>11937	ArrayIndexing	Sinv_sub [ row0 + off + 1 ]
>11938	AdditiveExpression	row0 + off + 1
>11939	AdditiveExpression	off + 1
>11940	PrimaryExpression	1
>11941	Identifier	off
>11942	Identifier	row0
>11943	Identifier	Sinv_sub
>11944	ArrayIndexing	Sinv_sub [ row0 + off + 0 ]
>11945	AdditiveExpression	row0 + off + 0
>11946	AdditiveExpression	off + 0
>11947	PrimaryExpression	0
>11948	Identifier	off
>11949	Identifier	row0
>11950	Identifier	Sinv_sub
>11951	Identifier	C
>11952	PrimaryExpression	9
>11953	Identifier	C
>11954	IdentifierDeclType	double [ 9 ]
>11955	IdentifierDeclStatement	 
>11956	IdentifierDecl	off = cnp * j
>11957	AssignmentExpr	off = cnp * j
>11958	MultiplicativeExpression	cnp * j
>11959	Identifier	j
>11960	Identifier	cnp
>11961	Identifier	off
>11962	Identifier	off
>11963	IdentifierDeclType	int
>11964	IdentifierDeclStatement	 
>11965	IdentifierDecl	row2 = ( cnp * j + 2 ) * num_vars_sub
>11966	AssignmentExpr	row2 = ( cnp * j + 2 ) * num_vars_sub
>11967	MultiplicativeExpression	( cnp * j + 2 ) * num_vars_sub
>11968	Identifier	num_vars_sub
>11969	AdditiveExpression	cnp * j + 2
>11970	PrimaryExpression	2
>11971	MultiplicativeExpression	cnp * j
>11972	Identifier	j
>11973	Identifier	cnp
>11974	Identifier	row2
>11975	Identifier	row2
>11976	IdentifierDeclType	int
>11977	IdentifierDeclStatement	 
>11978	IdentifierDecl	row1 = ( cnp * j + 1 ) * num_vars_sub
>11979	AssignmentExpr	row1 = ( cnp * j + 1 ) * num_vars_sub
>11980	MultiplicativeExpression	( cnp * j + 1 ) * num_vars_sub
>11981	Identifier	num_vars_sub
>11982	AdditiveExpression	cnp * j + 1
>11983	PrimaryExpression	1
>11984	MultiplicativeExpression	cnp * j
>11985	Identifier	j
>11986	Identifier	cnp
>11987	Identifier	row1
>11988	Identifier	row1
>11989	IdentifierDeclType	int
>11990	IdentifierDeclStatement	 
>11991	IdentifierDecl	row0 = ( cnp * j + 0 ) * num_vars_sub
>11992	AssignmentExpr	row0 = ( cnp * j + 0 ) * num_vars_sub
>11993	MultiplicativeExpression	( cnp * j + 0 ) * num_vars_sub
>11994	Identifier	num_vars_sub
>11995	AdditiveExpression	cnp * j + 0
>11996	PrimaryExpression	0
>11997	MultiplicativeExpression	cnp * j
>11998	Identifier	j
>11999	Identifier	cnp
>12000	Identifier	row0
>12001	Identifier	row0
>12002	IdentifierDeclType	int
>12003	IncDecOp	 
>12004	IncDec	++
>12005	Identifier	j
>12006	Condition	 
>12007	RelationalExpression	j < i
>12008	Identifier	i
>12009	Identifier	j
>12010	ForInit	 
>12011	IdentifierDeclStatement	int j = 0 ;
>12012	IdentifierDecl	j = 0
>12013	AssignmentExpr	j = 0
>12014	PrimaryExpression	0
>12015	Identifier	j
>12016	Identifier	j
>12017	IdentifierDeclType	int
>12018	ExpressionStatement	 
>12019	CallExpression	matrix_invert ( num_vars_sub , Ssub , Sinv_sub )
>12020	ArgumentList	num_vars_sub
>12021	Argument	Sinv_sub
>12022	Identifier	Sinv_sub
>12023	Argument	Ssub
>12024	Identifier	Ssub
>12025	Argument	num_vars_sub
>12026	Identifier	num_vars_sub
>12027	Callee	matrix_invert
>12028	Identifier	matrix_invert
>12029	IdentifierDeclStatement	 
>12030	IdentifierDecl	* Sinv_sub = new double [ num_vars_sub * num_vars_sub ]
>12031	AssignmentExpr	* Sinv_sub = new double [ num_vars_sub * num_vars_sub ]
>12032	MultiplicativeExpression	num_vars_sub * num_vars_sub
>12033	Identifier	num_vars_sub
>12034	Identifier	num_vars_sub
>12035	Identifier	Sinv_sub
>12036	Identifier	Sinv_sub
>12037	IdentifierDeclType	double *
>12038	ExpressionStatement	 
>12039	Identifier	VT
>12040	Statement	 
>12041	Statement	 
>12042	Statement	 
>12043	ExpressionStatement	 
>12044	Identifier	S
>12045	Statement	 
>12046	Statement	 
>12047	Statement	 
>12048	ExpressionStatement	 
>12049	Identifier	U
>12050	Statement	 
>12051	Statement	 
>12052	Statement	 
>12053	ExpressionStatement	 
>12054	CallExpression	matrix_print ( i , cnp , VT + ( num_vars_sub - 1 ) * num_vars_sub )
>12055	ArgumentList	i
>12056	Argument	VT + ( num_vars_sub - 1 ) * num_vars_sub
>12057	AdditiveExpression	VT + ( num_vars_sub - 1 ) * num_vars_sub
>12058	MultiplicativeExpression	( num_vars_sub - 1 ) * num_vars_sub
>12059	Identifier	num_vars_sub
>12060	AdditiveExpression	num_vars_sub - 1
>12061	PrimaryExpression	1
>12062	Identifier	num_vars_sub
>12063	Identifier	VT
>12064	Argument	cnp
>12065	Identifier	cnp
>12066	Argument	i
>12067	Identifier	i
>12068	Callee	matrix_print
>12069	Identifier	matrix_print
>12070	ExpressionStatement	 
>12071	CallExpression	printf ( \"Smallest eigenvector [round %d]
>12072	ArgumentList	\"Smallest eigenvector [round %d]
>12073	Argument	i
>12074	Identifier	i
>12075	Argument	\"Smallest eigenvector [round %d]
>12076	PrimaryExpression	\"Smallest eigenvector [round %d]
>12077	Callee	printf
>12078	Identifier	printf
>12079	ForStatement	for ( int j = 0 ; j < num_vars_sub ; j ++ )
>12080	CompoundStatement	 
>12081	ExpressionStatement	 
>12082	CallExpression	printf ( \"   S[%d] = %0.5e\n\" , j , S [ j ] )
>12083	ArgumentList	\"   S[%d] = %0.5e\n\"
>12084	Argument	S [ j ]
>12085	ArrayIndexing	S [ j ]
>12086	Identifier	j
>12087	Identifier	S
>12088	Argument	j
>12089	Identifier	j
>12090	Argument	\"   S[%d] = %0.5e\n\"
>12091	PrimaryExpression	\"   S[%d] = %0.5e\n\"
>12092	Callee	printf
>12093	Identifier	printf
>12094	IncDecOp	 
>12095	IncDec	++
>12096	Identifier	j
>12097	Condition	 
>12098	RelationalExpression	j < num_vars_sub
>12099	Identifier	num_vars_sub
>12100	Identifier	j
>12101	ForInit	 
>12102	IdentifierDeclStatement	int j = 0 ;
>12103	IdentifierDecl	j = 0
>12104	AssignmentExpr	j = 0
>12105	PrimaryExpression	0
>12106	Identifier	j
>12107	Identifier	j
>12108	IdentifierDeclType	int
>12109	ExpressionStatement	 
>12110	CallExpression	printf ( \"Sing. values [round %d]\n\" , i )
>12111	ArgumentList	\"Sing. values [round %d]\n\"
>12112	Argument	i
>12113	Identifier	i
>12114	Argument	\"Sing. values [round %d]\n\"
>12115	PrimaryExpression	\"Sing. values [round %d]\n\"
>12116	Callee	printf
>12117	Identifier	printf
>12118	ExpressionStatement	 
>12119	CallExpression	dgesvd_driver ( num_vars_sub , num_vars_sub , Ssub , U , S , VT )
>12120	ArgumentList	num_vars_sub
>12121	Argument	VT
>12122	Identifier	VT
>12123	Argument	S
>12124	Identifier	S
>12125	Argument	U
>12126	Identifier	U
>12127	Argument	Ssub
>12128	Identifier	Ssub
>12129	Argument	num_vars_sub
>12130	Identifier	num_vars_sub
>12131	Argument	num_vars_sub
>12132	Identifier	num_vars_sub
>12133	Callee	dgesvd_driver
>12134	Identifier	dgesvd_driver
>12135	ExpressionStatement	 
>12136	AssignmentExpr	VT = new double [ num_vars_sub * num_vars_sub ]
>12137	MultiplicativeExpression	num_vars_sub * num_vars_sub
>12138	Identifier	num_vars_sub
>12139	Identifier	num_vars_sub
>12140	Identifier	VT
>12141	ExpressionStatement	 
>12142	AssignmentExpr	S = new double [ num_vars_sub ]
>12143	Identifier	num_vars_sub
>12144	Identifier	S
>12145	ExpressionStatement	 
>12146	AssignmentExpr	U = new double [ num_vars_sub * num_vars_sub ]
>12147	MultiplicativeExpression	num_vars_sub * num_vars_sub
>12148	Identifier	num_vars_sub
>12149	Identifier	num_vars_sub
>12150	Identifier	U
>12151	IdentifierDeclStatement	 
>12152	IdentifierDecl	* VT
>12153	Identifier	VT
>12154	IdentifierDeclType	double *
>12155	IdentifierDecl	* S
>12156	Identifier	S
>12157	IdentifierDeclType	double *
>12158	IdentifierDecl	* U
>12159	Identifier	U
>12160	IdentifierDeclType	double *
>12161	ForStatement	for ( int j = 0 ; j < num_vars_sub ; j ++ )
>12162	CompoundStatement	 
>12163	ExpressionStatement	 
>12164	CallExpression	memcpy ( Ssub + j * num_vars_sub , S + j * num_vars , sizeof ( double ) * num_vars_sub )
>12165	ArgumentList	Ssub + j * num_vars_sub
>12166	Argument	sizeof ( double ) * num_vars_sub
>12167	MultiplicativeExpression	sizeof ( double ) * num_vars_sub
>12168	Identifier	num_vars_sub
>12169	SizeofExpr	sizeof ( double )
>12170	SizeofOperand	double
>12171	Sizeof	sizeof
>12172	Argument	S + j * num_vars
>12173	AdditiveExpression	S + j * num_vars
>12174	MultiplicativeExpression	j * num_vars
>12175	Identifier	num_vars
>12176	Identifier	j
>12177	Identifier	S
>12178	Argument	Ssub + j * num_vars_sub
>12179	AdditiveExpression	Ssub + j * num_vars_sub
>12180	MultiplicativeExpression	j * num_vars_sub
>12181	Identifier	num_vars_sub
>12182	Identifier	j
>12183	Identifier	Ssub
>12184	Callee	memcpy
>12185	Identifier	memcpy
>12186	IncDecOp	 
>12187	IncDec	++
>12188	Identifier	j
>12189	Condition	 
>12190	RelationalExpression	j < num_vars_sub
>12191	Identifier	num_vars_sub
>12192	Identifier	j
>12193	ForInit	 
>12194	IdentifierDeclStatement	int j = 0 ;
>12195	IdentifierDecl	j = 0
>12196	AssignmentExpr	j = 0
>12197	PrimaryExpression	0
>12198	Identifier	j
>12199	Identifier	j
>12200	IdentifierDeclType	int
>12201	IdentifierDeclStatement	 
>12202	IdentifierDecl	* Ssub = new double [ num_vars_sub * num_vars_sub ]
>12203	AssignmentExpr	* Ssub = new double [ num_vars_sub * num_vars_sub ]
>12204	MultiplicativeExpression	num_vars_sub * num_vars_sub
>12205	Identifier	num_vars_sub
>12206	Identifier	num_vars_sub
>12207	Identifier	Ssub
>12208	Identifier	Ssub
>12209	IdentifierDeclType	double *
>12210	IdentifierDeclStatement	 
>12211	IdentifierDecl	num_vars_sub = i * cnp
>12212	AssignmentExpr	num_vars_sub = i * cnp
>12213	MultiplicativeExpression	i * cnp
>12214	Identifier	cnp
>12215	Identifier	i
>12216	Identifier	num_vars_sub
>12217	Identifier	num_vars_sub
>12218	IdentifierDeclType	int
>12219	IncDecOp	 
>12220	IncDec	++
>12221	Identifier	i
>12222	Condition	 
>12223	RelationalExpression	i < num_images + 1
>12224	AdditiveExpression	num_images + 1
>12225	PrimaryExpression	1
>12226	Identifier	num_images
>12227	Identifier	i
>12228	ForInit	 
>12229	IdentifierDeclStatement	int i = 1 ;
>12230	IdentifierDecl	i = 1
>12231	AssignmentExpr	i = 1
>12232	PrimaryExpression	1
>12233	Identifier	i
>12234	Identifier	i
>12235	IdentifierDeclType	int
>12236	ExpressionStatement	 
>12237	CallExpression	ReRunSFM ( S )
>12238	ArgumentList	S
>12239	Argument	S
>12240	Identifier	S
>12241	Callee	ReRunSFM
>12242	Identifier	ReRunSFM
>12243	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>12244	CompoundStatement	 
>12245	ExpressionStatement	 
>12246	AssignmentExpr	m_point_constraints [ i ] = v3_new ( p . m_pos [ 0 ] , p . m_pos [ 1 ] , p . m_pos [ 2 ] )
>12247	CallExpression	v3_new ( p . m_pos [ 0 ] , p . m_pos [ 1 ] , p . m_pos [ 2 ] )
>12248	ArgumentList	p . m_pos [ 0 ]
>12249	Argument	p . m_pos [ 2 ]
>12250	ArrayIndexing	p . m_pos [ 2 ]
>12251	PrimaryExpression	2
>12252	MemberAccess	p . m_pos
>12253	Identifier	m_pos
>12254	Identifier	p
>12255	Argument	p . m_pos [ 1 ]
>12256	ArrayIndexing	p . m_pos [ 1 ]
>12257	PrimaryExpression	1
>12258	MemberAccess	p . m_pos
>12259	Identifier	m_pos
>12260	Identifier	p
>12261	Argument	p . m_pos [ 0 ]
>12262	ArrayIndexing	p . m_pos [ 0 ]
>12263	PrimaryExpression	0
>12264	MemberAccess	p . m_pos
>12265	Identifier	m_pos
>12266	Identifier	p
>12267	Callee	v3_new
>12268	Identifier	v3_new
>12269	ArrayIndexing	m_point_constraints [ i ]
>12270	Identifier	i
>12271	Identifier	m_point_constraints
>12272	IdentifierDeclStatement	 
>12273	IdentifierDecl	& p = m_point_data [ i ]
>12274	AssignmentExpr	& p = m_point_data [ i ]
>12275	ArrayIndexing	m_point_data [ i ]
>12276	Identifier	i
>12277	Identifier	m_point_data
>12278	Identifier	p
>12279	Identifier	p
>12280	IdentifierDeclType	PointData &
>12281	IncDecOp	 
>12282	IncDec	++
>12283	Identifier	i
>12284	Condition	 
>12285	RelationalExpression	i < num_points
>12286	Identifier	num_points
>12287	Identifier	i
>12288	ForInit	 
>12289	IdentifierDeclStatement	int i = 0 ;
>12290	IdentifierDecl	i = 0
>12291	AssignmentExpr	i = 0
>12292	PrimaryExpression	0
>12293	Identifier	i
>12294	Identifier	i
>12295	IdentifierDeclType	int
>12296	ExpressionStatement	 
>12297	AssignmentExpr	m_point_constraints = new v3_t [ num_points ]
>12298	Identifier	num_points
>12299	Identifier	m_point_constraints
>12300	IdentifierDeclStatement	 
>12301	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>12302	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>12303	CastExpression	( int ) m_point_data . size ( )
>12304	CallExpression	m_point_data . size ( )
>12305	ArgumentList	 
>12306	Callee	m_point_data . size
>12307	MemberAccess	m_point_data . size
>12308	Identifier	size
>12309	Identifier	m_point_data
>12310	CastTarget	int
>12311	Identifier	num_points
>12312	Identifier	num_points
>12313	IdentifierDeclType	int
>12314	ExpressionStatement	 
>12315	AssignmentExpr	m_point_constraint_weight = 1000.0
>12316	PrimaryExpression	1000.0
>12317	Identifier	m_point_constraint_weight
>12318	ExpressionStatement	 
>12319	AssignmentExpr	m_use_point_constraints = true
>12320	Identifier	true
>12321	Identifier	m_use_point_constraints
>12322	IdentifierDeclStatement	 
>12323	IdentifierDecl	* S = new double [ num_vars * num_vars ]
>12324	AssignmentExpr	* S = new double [ num_vars * num_vars ]
>12325	MultiplicativeExpression	num_vars * num_vars
>12326	Identifier	num_vars
>12327	Identifier	num_vars
>12328	Identifier	S
>12329	Identifier	S
>12330	IdentifierDeclType	double *
>12331	IdentifierDeclStatement	 
>12332	IdentifierDecl	num_vars = cnp * num_images
>12333	AssignmentExpr	num_vars = cnp * num_images
>12334	MultiplicativeExpression	cnp * num_images
>12335	Identifier	num_images
>12336	Identifier	cnp
>12337	Identifier	num_vars
>12338	Identifier	num_vars
>12339	IdentifierDeclType	int
>12340	IdentifierDeclStatement	 
>12341	IdentifierDecl	cnp = ( m_estimate_distortion ) ? 9 
>12342	AssignmentExpr	cnp = ( m_estimate_distortion ) ? 9 
>12343	ConditionalExpression	( m_estimate_distortion ) ? 9 
>12344	PrimaryExpression	7
>12345	PrimaryExpression	9
>12346	Condition	m_estimate_distortion
>12347	Identifier	m_estimate_distortion
>12348	Identifier	cnp
>12349	Identifier	cnp
>12350	IdentifierDeclType	int
>12351	IdentifierDeclStatement	 
>12352	IdentifierDecl	num_images = GetNumImages ( )
>12353	AssignmentExpr	num_images = GetNumImages ( )
>12354	CallExpression	GetNumImages ( )
>12355	ArgumentList	 
>12356	Callee	GetNumImages
>12357	Identifier	GetNumImages
>12358	Identifier	num_images
>12359	Identifier	num_images
>12360	IdentifierDeclType	int
>12415	FunctionDef	BundlerApp 
>12416	ParameterList	 
>12417	ReturnType	void
>12418	CompoundStatement	 
>12419	ExpressionStatement	 
>12420	CallExpression	fclose ( f )
>12421	ArgumentList	f
>12422	Argument	f
>12423	Identifier	f
>12424	Callee	fclose
>12425	Identifier	fclose
>12426	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>12427	CompoundStatement	 
>12428	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>12429	CompoundStatement	 
>12430	ExpressionStatement	 
>12431	IncDecOp	count ++
>12432	IncDec	++
>12433	Identifier	count
>12434	ExpressionStatement	 
>12435	CallExpression	fprintf ( f , \"%0.6f\n\" , C [ 0 ] + C [ 4 ] + C [ 8 ] )
>12436	ArgumentList	f
>12437	Argument	C [ 0 ] + C [ 4 ] + C [ 8 ]
>12438	AdditiveExpression	C [ 0 ] + C [ 4 ] + C [ 8 ]
>12439	AdditiveExpression	C [ 4 ] + C [ 8 ]
>12440	ArrayIndexing	C [ 8 ]
>12441	PrimaryExpression	8
>12442	Identifier	C
>12443	ArrayIndexing	C [ 4 ]
>12444	PrimaryExpression	4
>12445	Identifier	C
>12446	ArrayIndexing	C [ 0 ]
>12447	PrimaryExpression	0
>12448	Identifier	C
>12449	Argument	\"%0.6f\n\"
>12450	PrimaryExpression	\"%0.6f\n\"
>12451	Argument	f
>12452	Identifier	f
>12453	Callee	fprintf
>12454	Identifier	fprintf
>12455	ExpressionStatement	 
>12456	Statement	 
>12457	Statement	 
>12458	Statement	 
>12459	Statement	 
>12460	Statement	 
>12461	Statement	 
>12462	Statement	 
>12463	Statement	 
>12464	Statement	 
>12465	Statement	 
>12466	Statement	 
>12467	Statement	 
>12468	Statement	 
>12469	Statement	 
>12470	Statement	 
>12471	Statement	 
>12472	Statement	 
>12473	Statement	 
>12474	Statement	 
>12475	Statement	 
>12476	Statement	 
>12477	Statement	 
>12478	Statement	 
>12479	Statement	 
>12480	Statement	 
>12481	Statement	 
>12482	Statement	 
>12483	Statement	 
>12484	Statement	 
>12485	Statement	 
>12486	Statement	 
>12487	Statement	 
>12488	Statement	 
>12489	Statement	 
>12490	Statement	 
>12491	Statement	 
>12492	Statement	 
>12493	Statement	 
>12494	Statement	 
>12495	Statement	 
>12496	Statement	 
>12497	Statement	 
>12498	Statement	 
>12499	Statement	 
>12500	Statement	 
>12501	Statement	 
>12502	Statement	 
>12503	Statement	 
>12504	Statement	 
>12505	Statement	 
>12506	Statement	 
>12507	Statement	 
>12508	Statement	 
>12509	ExpressionStatement	 
>12510	CallExpression	fprintf ( f , \"%d\n\" , i )
>12511	ArgumentList	f
>12512	Argument	i
>12513	Identifier	i
>12514	Argument	\"%d\n\"
>12515	PrimaryExpression	\"%d\n\"
>12516	Argument	f
>12517	Identifier	f
>12518	Callee	fprintf
>12519	Identifier	fprintf
>12520	ExpressionStatement	 
>12521	CallExpression	matrix_print ( 3 , 3 , C )
>12522	ArgumentList	3
>12523	Argument	C
>12524	Identifier	C
>12525	Argument	3
>12526	PrimaryExpression	3
>12527	Argument	3
>12528	PrimaryExpression	3
>12529	Callee	matrix_print
>12530	Identifier	matrix_print
>12531	ExpressionStatement	 
>12532	CallExpression	printf ( \"Covariance [Image %d]
>12533	ArgumentList	\"Covariance [Image %d]
>12534	Argument	i
>12535	Identifier	i
>12536	Argument	\"Covariance [Image %d]
>12537	PrimaryExpression	\"Covariance [Image %d]
>12538	Callee	printf
>12539	Identifier	printf
>12540	IdentifierDeclStatement	 
>12541	IdentifierDecl	C [ 9 ] = { Sinv [ row0 + off + 0 ] , Sinv [ row0 + off + 1 ] , Sinv [ row0 + off + 2 ] , Sinv [ row1 + off + 0 ] , \
>12542	AssignmentExpr	C [ 9 ] = { Sinv [ row0 + off + 0 ] , Sinv [ row0 + off + 1 ] , Sinv [ row0 + off + 2 ] , Sinv [ row1 + \
>12543	InitializerList	Sinv [ row0 + off + 0 ]
>12544	ArrayIndexing	Sinv [ row2 + off + 2 ]
>12545	AdditiveExpression	row2 + off + 2
>12546	AdditiveExpression	off + 2
>12547	PrimaryExpression	2
>12548	Identifier	off
>12549	Identifier	row2
>12550	Identifier	Sinv
>12551	ArrayIndexing	Sinv [ row2 + off + 1 ]
>12552	AdditiveExpression	row2 + off + 1
>12553	AdditiveExpression	off + 1
>12554	PrimaryExpression	1
>12555	Identifier	off
>12556	Identifier	row2
>12557	Identifier	Sinv
>12558	ArrayIndexing	Sinv [ row2 + off + 0 ]
>12559	AdditiveExpression	row2 + off + 0
>12560	AdditiveExpression	off + 0
>12561	PrimaryExpression	0
>12562	Identifier	off
>12563	Identifier	row2
>12564	Identifier	Sinv
>12565	ArrayIndexing	Sinv [ row1 + off + 2 ]
>12566	AdditiveExpression	row1 + off + 2
>12567	AdditiveExpression	off + 2
>12568	PrimaryExpression	2
>12569	Identifier	off
>12570	Identifier	row1
>12571	Identifier	Sinv
>12572	ArrayIndexing	Sinv [ row1 + off + 1 ]
>12573	AdditiveExpression	row1 + off + 1
>12574	AdditiveExpression	off + 1
>12575	PrimaryExpression	1
>12576	Identifier	off
>12577	Identifier	row1
>12578	Identifier	Sinv
>12579	ArrayIndexing	Sinv [ row1 + off + 0 ]
>12580	AdditiveExpression	row1 + off + 0
>12581	AdditiveExpression	off + 0
>12582	PrimaryExpression	0
>12583	Identifier	off
>12584	Identifier	row1
>12585	Identifier	Sinv
>12586	ArrayIndexing	Sinv [ row0 + off + 2 ]
>12587	AdditiveExpression	row0 + off + 2
>12588	AdditiveExpression	off + 2
>12589	PrimaryExpression	2
>12590	Identifier	off
>12591	Identifier	row0
>12592	Identifier	Sinv
>12593	ArrayIndexing	Sinv [ row0 + off + 1 ]
>12594	AdditiveExpression	row0 + off + 1
>12595	AdditiveExpression	off + 1
>12596	PrimaryExpression	1
>12597	Identifier	off
>12598	Identifier	row0
>12599	Identifier	Sinv
>12600	ArrayIndexing	Sinv [ row0 + off + 0 ]
>12601	AdditiveExpression	row0 + off + 0
>12602	AdditiveExpression	off + 0
>12603	PrimaryExpression	0
>12604	Identifier	off
>12605	Identifier	row0
>12606	Identifier	Sinv
>12607	Identifier	C
>12608	PrimaryExpression	9
>12609	Identifier	C
>12610	IdentifierDeclType	double [ 9 ]
>12611	IdentifierDeclStatement	 
>12612	IdentifierDecl	off = 7 * count
>12613	AssignmentExpr	off = 7 * count
>12614	MultiplicativeExpression	7 * count
>12615	Identifier	count
>12616	PrimaryExpression	7
>12617	Identifier	off
>12618	Identifier	off
>12619	IdentifierDeclType	int
>12620	IdentifierDeclStatement	 
>12621	IdentifierDecl	row2 = ( 7 * count + 2 ) * num_vars
>12622	AssignmentExpr	row2 = ( 7 * count + 2 ) * num_vars
>12623	MultiplicativeExpression	( 7 * count + 2 ) * num_vars
>12624	Identifier	num_vars
>12625	AdditiveExpression	7 * count + 2
>12626	PrimaryExpression	2
>12627	MultiplicativeExpression	7 * count
>12628	Identifier	count
>12629	PrimaryExpression	7
>12630	Identifier	row2
>12631	Identifier	row2
>12632	IdentifierDeclType	int
>12633	IdentifierDeclStatement	 
>12634	IdentifierDecl	row1 = ( 7 * count + 1 ) * num_vars
>12635	AssignmentExpr	row1 = ( 7 * count + 1 ) * num_vars
>12636	MultiplicativeExpression	( 7 * count + 1 ) * num_vars
>12637	Identifier	num_vars
>12638	AdditiveExpression	7 * count + 1
>12639	PrimaryExpression	1
>12640	MultiplicativeExpression	7 * count
>12641	Identifier	count
>12642	PrimaryExpression	7
>12643	Identifier	row1
>12644	Identifier	row1
>12645	IdentifierDeclType	int
>12646	IdentifierDeclStatement	 
>12647	IdentifierDecl	row0 = ( 7 * count + 0 ) * num_vars
>12648	AssignmentExpr	row0 = ( 7 * count + 0 ) * num_vars
>12649	MultiplicativeExpression	( 7 * count + 0 ) * num_vars
>12650	Identifier	num_vars
>12651	AdditiveExpression	7 * count + 0
>12652	PrimaryExpression	0
>12653	MultiplicativeExpression	7 * count
>12654	Identifier	count
>12655	PrimaryExpression	7
>12656	Identifier	row0
>12657	Identifier	row0
>12658	IdentifierDeclType	int
>12659	Condition	 
>12660	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>12661	Identifier	m_adjusted
>12662	MemberAccess	m_image_data [ i ] . m_camera
>12663	Identifier	m_camera
>12664	ArrayIndexing	m_image_data [ i ]
>12665	Identifier	i
>12666	Identifier	m_image_data
>12667	IncDecOp	 
>12668	IncDec	++
>12669	Identifier	i
>12670	Condition	 
>12671	RelationalExpression	i < num_images
>12672	Identifier	num_images
>12673	Identifier	i
>12674	ForInit	 
>12675	IdentifierDeclStatement	int i = 0 ;
>12676	IdentifierDecl	i = 0
>12677	AssignmentExpr	i = 0
>12678	PrimaryExpression	0
>12679	Identifier	i
>12680	Identifier	i
>12681	IdentifierDeclType	int
>12682	IdentifierDeclStatement	 
>12683	IdentifierDecl	count = 0
>12684	AssignmentExpr	count = 0
>12685	PrimaryExpression	0
>12686	Identifier	count
>12687	Identifier	count
>12688	IdentifierDeclType	int
>12689	IfStatement	if ( f == NULL )
>12690	CompoundStatement	 
>12691	ReturnStatement	 
>12692	ExpressionStatement	 
>12693	CallExpression	printf ( \"[ComputeCameraCovariance] Error opening file %s for writing\n\" , \"covariance.txt\" )
>12694	ArgumentList	\"[ComputeCameraCovariance] Error opening file %s for writing\n\"
>12695	Argument	\"covariance.txt\"
>12696	PrimaryExpression	\"covariance.txt\"
>12697	Argument	\"[ComputeCameraCovariance] Error opening file %s for writing\n\"
>12698	PrimaryExpression	\"[ComputeCameraCovariance] Error opening file %s for writing\n\"
>12699	Callee	printf
>12700	Identifier	printf
>12701	Condition	 
>12702	EqualityExpression	f == NULL
>12703	Identifier	NULL
>12704	Identifier	f
>12705	IdentifierDeclStatement	 
>12706	IdentifierDecl	* f = fopen ( \"covariance.txt\" , \"w\" )
>12707	AssignmentExpr	* f = fopen ( \"covariance.txt\" , \"w\" )
>12708	CallExpression	fopen ( \"covariance.txt\" , \"w\" )
>12709	ArgumentList	\"covariance.txt\"
>12710	Argument	\"w\"
>12711	PrimaryExpression	\"w\"
>12712	Argument	\"covariance.txt\"
>12713	PrimaryExpression	\"covariance.txt\"
>12714	Callee	fopen
>12715	Identifier	fopen
>12716	Identifier	f
>12717	Identifier	f
>12718	IdentifierDeclType	FILE *
>12719	ExpressionStatement	 
>12720	CallExpression	matrix_invert ( num_vars , S , Sinv )
>12721	ArgumentList	num_vars
>12722	Argument	Sinv
>12723	Identifier	Sinv
>12724	Argument	S
>12725	Identifier	S
>12726	Argument	num_vars
>12727	Identifier	num_vars
>12728	Callee	matrix_invert
>12729	Identifier	matrix_invert
>12730	IdentifierDeclStatement	 
>12731	IdentifierDecl	* Sinv = new double [ num_vars * num_vars ]
>12732	AssignmentExpr	* Sinv = new double [ num_vars * num_vars ]
>12733	MultiplicativeExpression	num_vars * num_vars
>12734	Identifier	num_vars
>12735	Identifier	num_vars
>12736	Identifier	Sinv
>12737	Identifier	Sinv
>12738	IdentifierDeclType	double *
>12739	ForStatement	for ( int i = 1 ; i < num_images + 1 ; i ++ )
>12740	CompoundStatement	 
>12741	ExpressionStatement	 
>12742	Identifier	Sinv_sub
>12743	Statement	 
>12744	Statement	 
>12745	Statement	 
>12746	ExpressionStatement	 
>12747	Identifier	Ssub
>12748	Statement	 
>12749	Statement	 
>12750	Statement	 
>12751	ForStatement	for ( int j = 0 ; j < i ; j ++ )
>12752	CompoundStatement	 
>12753	ExpressionStatement	 
>12754	CallExpression	matrix_print ( 3 , 3 , C )
>12755	ArgumentList	3
>12756	Argument	C
>12757	Identifier	C
>12758	Argument	3
>12759	PrimaryExpression	3
>12760	Argument	3
>12761	PrimaryExpression	3
>12762	Callee	matrix_print
>12763	Identifier	matrix_print
>12764	ExpressionStatement	 
>12765	CallExpression	printf ( \"Covariance[%d] [Image %d]
>12766	ArgumentList	\"Covariance[%d] [Image %d]
>12767	Argument	j
>12768	Identifier	j
>12769	Argument	i
>12770	Identifier	i
>12771	Argument	\"Covariance[%d] [Image %d]
>12772	PrimaryExpression	\"Covariance[%d] [Image %d]
>12773	Callee	printf
>12774	Identifier	printf
>12775	IdentifierDeclStatement	 
>12776	IdentifierDecl	C [ 9 ] = { Sinv_sub [ row0 + off + 0 ] , Sinv_sub [ row0 + off + 1 ] , Sinv_sub [ row0 + off + 2 ] , Sinv_sub [ \
>12777	AssignmentExpr	C [ 9 ] = { Sinv_sub [ row0 + off + 0 ] , Sinv_sub [ row0 + off + 1 ] , Sinv_sub [ row0 + off + 2 ] , \
>12778	InitializerList	Sinv_sub [ row0 + off + 0 ]
>12779	ArrayIndexing	Sinv_sub [ row2 + off + 2 ]
>12780	AdditiveExpression	row2 + off + 2
>12781	AdditiveExpression	off + 2
>12782	PrimaryExpression	2
>12783	Identifier	off
>12784	Identifier	row2
>12785	Identifier	Sinv_sub
>12786	ArrayIndexing	Sinv_sub [ row2 + off + 1 ]
>12787	AdditiveExpression	row2 + off + 1
>12788	AdditiveExpression	off + 1
>12789	PrimaryExpression	1
>12790	Identifier	off
>12791	Identifier	row2
>12792	Identifier	Sinv_sub
>12793	ArrayIndexing	Sinv_sub [ row2 + off + 0 ]
>12794	AdditiveExpression	row2 + off + 0
>12795	AdditiveExpression	off + 0
>12796	PrimaryExpression	0
>12797	Identifier	off
>12798	Identifier	row2
>12799	Identifier	Sinv_sub
>12800	ArrayIndexing	Sinv_sub [ row1 + off + 2 ]
>12801	AdditiveExpression	row1 + off + 2
>12802	AdditiveExpression	off + 2
>12803	PrimaryExpression	2
>12804	Identifier	off
>12805	Identifier	row1
>12806	Identifier	Sinv_sub
>12807	ArrayIndexing	Sinv_sub [ row1 + off + 1 ]
>12808	AdditiveExpression	row1 + off + 1
>12809	AdditiveExpression	off + 1
>12810	PrimaryExpression	1
>12811	Identifier	off
>12812	Identifier	row1
>12813	Identifier	Sinv_sub
>12814	ArrayIndexing	Sinv_sub [ row1 + off + 0 ]
>12815	AdditiveExpression	row1 + off + 0
>12816	AdditiveExpression	off + 0
>12817	PrimaryExpression	0
>12818	Identifier	off
>12819	Identifier	row1
>12820	Identifier	Sinv_sub
>12821	ArrayIndexing	Sinv_sub [ row0 + off + 2 ]
>12822	AdditiveExpression	row0 + off + 2
>12823	AdditiveExpression	off + 2
>12824	PrimaryExpression	2
>12825	Identifier	off
>12826	Identifier	row0
>12827	Identifier	Sinv_sub
>12828	ArrayIndexing	Sinv_sub [ row0 + off + 1 ]
>12829	AdditiveExpression	row0 + off + 1
>12830	AdditiveExpression	off + 1
>12831	PrimaryExpression	1
>12832	Identifier	off
>12833	Identifier	row0
>12834	Identifier	Sinv_sub
>12835	ArrayIndexing	Sinv_sub [ row0 + off + 0 ]
>12836	AdditiveExpression	row0 + off + 0
>12837	AdditiveExpression	off + 0
>12838	PrimaryExpression	0
>12839	Identifier	off
>12840	Identifier	row0
>12841	Identifier	Sinv_sub
>12842	Identifier	C
>12843	PrimaryExpression	9
>12844	Identifier	C
>12845	IdentifierDeclType	double [ 9 ]
>12846	IdentifierDeclStatement	 
>12847	IdentifierDecl	off = 7 * j
>12848	AssignmentExpr	off = 7 * j
>12849	MultiplicativeExpression	7 * j
>12850	Identifier	j
>12851	PrimaryExpression	7
>12852	Identifier	off
>12853	Identifier	off
>12854	IdentifierDeclType	int
>12855	IdentifierDeclStatement	 
>12856	IdentifierDecl	row2 = ( 7 * j + 2 ) * num_vars_sub
>12857	AssignmentExpr	row2 = ( 7 * j + 2 ) * num_vars_sub
>12858	MultiplicativeExpression	( 7 * j + 2 ) * num_vars_sub
>12859	Identifier	num_vars_sub
>12860	AdditiveExpression	7 * j + 2
>12861	PrimaryExpression	2
>12862	MultiplicativeExpression	7 * j
>12863	Identifier	j
>12864	PrimaryExpression	7
>12865	Identifier	row2
>12866	Identifier	row2
>12867	IdentifierDeclType	int
>12868	IdentifierDeclStatement	 
>12869	IdentifierDecl	row1 = ( 7 * j + 1 ) * num_vars_sub
>12870	AssignmentExpr	row1 = ( 7 * j + 1 ) * num_vars_sub
>12871	MultiplicativeExpression	( 7 * j + 1 ) * num_vars_sub
>12872	Identifier	num_vars_sub
>12873	AdditiveExpression	7 * j + 1
>12874	PrimaryExpression	1
>12875	MultiplicativeExpression	7 * j
>12876	Identifier	j
>12877	PrimaryExpression	7
>12878	Identifier	row1
>12879	Identifier	row1
>12880	IdentifierDeclType	int
>12881	IdentifierDeclStatement	 
>12882	IdentifierDecl	row0 = ( 7 * j + 0 ) * num_vars_sub
>12883	AssignmentExpr	row0 = ( 7 * j + 0 ) * num_vars_sub
>12884	MultiplicativeExpression	( 7 * j + 0 ) * num_vars_sub
>12885	Identifier	num_vars_sub
>12886	AdditiveExpression	7 * j + 0
>12887	PrimaryExpression	0
>12888	MultiplicativeExpression	7 * j
>12889	Identifier	j
>12890	PrimaryExpression	7
>12891	Identifier	row0
>12892	Identifier	row0
>12893	IdentifierDeclType	int
>12894	IncDecOp	 
>12895	IncDec	++
>12896	Identifier	j
>12897	Condition	 
>12898	RelationalExpression	j < i
>12899	Identifier	i
>12900	Identifier	j
>12901	ForInit	 
>12902	IdentifierDeclStatement	int j = 0 ;
>12903	IdentifierDecl	j = 0
>12904	AssignmentExpr	j = 0
>12905	PrimaryExpression	0
>12906	Identifier	j
>12907	Identifier	j
>12908	IdentifierDeclType	int
>12909	ExpressionStatement	 
>12910	CallExpression	matrix_invert ( num_vars_sub , Ssub , Sinv_sub )
>12911	ArgumentList	num_vars_sub
>12912	Argument	Sinv_sub
>12913	Identifier	Sinv_sub
>12914	Argument	Ssub
>12915	Identifier	Ssub
>12916	Argument	num_vars_sub
>12917	Identifier	num_vars_sub
>12918	Callee	matrix_invert
>12919	Identifier	matrix_invert
>12920	IdentifierDeclStatement	 
>12921	IdentifierDecl	* Sinv_sub = new double [ num_vars_sub * num_vars_sub ]
>12922	AssignmentExpr	* Sinv_sub = new double [ num_vars_sub * num_vars_sub ]
>12923	MultiplicativeExpression	num_vars_sub * num_vars_sub
>12924	Identifier	num_vars_sub
>12925	Identifier	num_vars_sub
>12926	Identifier	Sinv_sub
>12927	Identifier	Sinv_sub
>12928	IdentifierDeclType	double *
>12929	ExpressionStatement	 
>12930	Identifier	VT
>12931	Statement	 
>12932	Statement	 
>12933	Statement	 
>12934	ExpressionStatement	 
>12935	Identifier	S
>12936	Statement	 
>12937	Statement	 
>12938	Statement	 
>12939	ExpressionStatement	 
>12940	Identifier	U
>12941	Statement	 
>12942	Statement	 
>12943	Statement	 
>12944	ExpressionStatement	 
>12945	CallExpression	matrix_print ( i , 7 , VT + ( num_vars_sub - 1 ) * num_vars_sub )
>12946	ArgumentList	i
>12947	Argument	VT + ( num_vars_sub - 1 ) * num_vars_sub
>12948	AdditiveExpression	VT + ( num_vars_sub - 1 ) * num_vars_sub
>12949	MultiplicativeExpression	( num_vars_sub - 1 ) * num_vars_sub
>12950	Identifier	num_vars_sub
>12951	AdditiveExpression	num_vars_sub - 1
>12952	PrimaryExpression	1
>12953	Identifier	num_vars_sub
>12954	Identifier	VT
>12955	Argument	7
>12956	PrimaryExpression	7
>12957	Argument	i
>12958	Identifier	i
>12959	Callee	matrix_print
>12960	Identifier	matrix_print
>12961	ExpressionStatement	 
>12962	CallExpression	printf ( \"Smallest eigenvector [round %d]
>12963	ArgumentList	\"Smallest eigenvector [round %d]
>12964	Argument	i
>12965	Identifier	i
>12966	Argument	\"Smallest eigenvector [round %d]
>12967	PrimaryExpression	\"Smallest eigenvector [round %d]
>12968	Callee	printf
>12969	Identifier	printf
>12970	ForStatement	for ( int j = 0 ; j < num_vars_sub ; j ++ )
>12971	CompoundStatement	 
>12972	ExpressionStatement	 
>12973	CallExpression	printf ( \"   S[%d] = %0.5e\n\" , j , S [ j ] )
>12974	ArgumentList	\"   S[%d] = %0.5e\n\"
>12975	Argument	S [ j ]
>12976	ArrayIndexing	S [ j ]
>12977	Identifier	j
>12978	Identifier	S
>12979	Argument	j
>12980	Identifier	j
>12981	Argument	\"   S[%d] = %0.5e\n\"
>12982	PrimaryExpression	\"   S[%d] = %0.5e\n\"
>12983	Callee	printf
>12984	Identifier	printf
>12985	IncDecOp	 
>12986	IncDec	++
>12987	Identifier	j
>12988	Condition	 
>12989	RelationalExpression	j < num_vars_sub
>12990	Identifier	num_vars_sub
>12991	Identifier	j
>12992	ForInit	 
>12993	IdentifierDeclStatement	int j = 0 ;
>12994	IdentifierDecl	j = 0
>12995	AssignmentExpr	j = 0
>12996	PrimaryExpression	0
>12997	Identifier	j
>12998	Identifier	j
>12999	IdentifierDeclType	int
>13000	ExpressionStatement	 
>13001	CallExpression	printf ( \"Sing. values [round %d]\n\" , i )
>13002	ArgumentList	\"Sing. values [round %d]\n\"
>13003	Argument	i
>13004	Identifier	i
>13005	Argument	\"Sing. values [round %d]\n\"
>13006	PrimaryExpression	\"Sing. values [round %d]\n\"
>13007	Callee	printf
>13008	Identifier	printf
>13009	ExpressionStatement	 
>13010	CallExpression	dgesvd_driver ( num_vars_sub , num_vars_sub , Ssub , U , S , VT )
>13011	ArgumentList	num_vars_sub
>13012	Argument	VT
>13013	Identifier	VT
>13014	Argument	S
>13015	Identifier	S
>13016	Argument	U
>13017	Identifier	U
>13018	Argument	Ssub
>13019	Identifier	Ssub
>13020	Argument	num_vars_sub
>13021	Identifier	num_vars_sub
>13022	Argument	num_vars_sub
>13023	Identifier	num_vars_sub
>13024	Callee	dgesvd_driver
>13025	Identifier	dgesvd_driver
>13026	ExpressionStatement	 
>13027	AssignmentExpr	VT = new double [ num_vars_sub * num_vars_sub ]
>13028	MultiplicativeExpression	num_vars_sub * num_vars_sub
>13029	Identifier	num_vars_sub
>13030	Identifier	num_vars_sub
>13031	Identifier	VT
>13032	ExpressionStatement	 
>13033	AssignmentExpr	S = new double [ num_vars_sub ]
>13034	Identifier	num_vars_sub
>13035	Identifier	S
>13036	ExpressionStatement	 
>13037	AssignmentExpr	U = new double [ num_vars_sub * num_vars_sub ]
>13038	MultiplicativeExpression	num_vars_sub * num_vars_sub
>13039	Identifier	num_vars_sub
>13040	Identifier	num_vars_sub
>13041	Identifier	U
>13042	IdentifierDeclStatement	 
>13043	IdentifierDecl	* VT
>13044	Identifier	VT
>13045	IdentifierDeclType	double *
>13046	IdentifierDecl	* S
>13047	Identifier	S
>13048	IdentifierDeclType	double *
>13049	IdentifierDecl	* U
>13050	Identifier	U
>13051	IdentifierDeclType	double *
>13052	ForStatement	for ( int j = 0 ; j < num_vars_sub ; j ++ )
>13053	CompoundStatement	 
>13054	ExpressionStatement	 
>13055	CallExpression	memcpy ( Ssub + j * num_vars_sub , S + j * num_vars , sizeof ( double ) * num_vars_sub )
>13056	ArgumentList	Ssub + j * num_vars_sub
>13057	Argument	sizeof ( double ) * num_vars_sub
>13058	MultiplicativeExpression	sizeof ( double ) * num_vars_sub
>13059	Identifier	num_vars_sub
>13060	SizeofExpr	sizeof ( double )
>13061	SizeofOperand	double
>13062	Sizeof	sizeof
>13063	Argument	S + j * num_vars
>13064	AdditiveExpression	S + j * num_vars
>13065	MultiplicativeExpression	j * num_vars
>13066	Identifier	num_vars
>13067	Identifier	j
>13068	Identifier	S
>13069	Argument	Ssub + j * num_vars_sub
>13070	AdditiveExpression	Ssub + j * num_vars_sub
>13071	MultiplicativeExpression	j * num_vars_sub
>13072	Identifier	num_vars_sub
>13073	Identifier	j
>13074	Identifier	Ssub
>13075	Callee	memcpy
>13076	Identifier	memcpy
>13077	IncDecOp	 
>13078	IncDec	++
>13079	Identifier	j
>13080	Condition	 
>13081	RelationalExpression	j < num_vars_sub
>13082	Identifier	num_vars_sub
>13083	Identifier	j
>13084	ForInit	 
>13085	IdentifierDeclStatement	int j = 0 ;
>13086	IdentifierDecl	j = 0
>13087	AssignmentExpr	j = 0
>13088	PrimaryExpression	0
>13089	Identifier	j
>13090	Identifier	j
>13091	IdentifierDeclType	int
>13092	IdentifierDeclStatement	 
>13093	IdentifierDecl	* Ssub = new double [ num_vars_sub * num_vars_sub ]
>13094	AssignmentExpr	* Ssub = new double [ num_vars_sub * num_vars_sub ]
>13095	MultiplicativeExpression	num_vars_sub * num_vars_sub
>13096	Identifier	num_vars_sub
>13097	Identifier	num_vars_sub
>13098	Identifier	Ssub
>13099	Identifier	Ssub
>13100	IdentifierDeclType	double *
>13101	IdentifierDeclStatement	 
>13102	IdentifierDecl	num_vars_sub = i * 7
>13103	AssignmentExpr	num_vars_sub = i * 7
>13104	MultiplicativeExpression	i * 7
>13105	PrimaryExpression	7
>13106	Identifier	i
>13107	Identifier	num_vars_sub
>13108	Identifier	num_vars_sub
>13109	IdentifierDeclType	int
>13110	IncDecOp	 
>13111	IncDec	++
>13112	Identifier	i
>13113	Condition	 
>13114	RelationalExpression	i < num_images + 1
>13115	AdditiveExpression	num_images + 1
>13116	PrimaryExpression	1
>13117	Identifier	num_images
>13118	Identifier	i
>13119	ForInit	 
>13120	IdentifierDeclStatement	int i = 1 ;
>13121	IdentifierDecl	i = 1
>13122	AssignmentExpr	i = 1
>13123	PrimaryExpression	1
>13124	Identifier	i
>13125	Identifier	i
>13126	IdentifierDeclType	int
>13127	ExpressionStatement	 
>13128	AssignmentExpr	S [ row2 + off + 2 ] += dz * dz
>13129	MultiplicativeExpression	dz * dz
>13130	Identifier	dz
>13131	Identifier	dz
>13132	ArrayIndexing	S [ row2 + off + 2 ]
>13133	AdditiveExpression	row2 + off + 2
>13134	AdditiveExpression	off + 2
>13135	PrimaryExpression	2
>13136	Identifier	off
>13137	Identifier	row2
>13138	Identifier	S
>13139	ExpressionStatement	 
>13140	AssignmentExpr	S [ row2 + off + 1 ] += dy * dz
>13141	MultiplicativeExpression	dy * dz
>13142	Identifier	dz
>13143	Identifier	dy
>13144	ArrayIndexing	S [ row2 + off + 1 ]
>13145	AdditiveExpression	row2 + off + 1
>13146	AdditiveExpression	off + 1
>13147	PrimaryExpression	1
>13148	Identifier	off
>13149	Identifier	row2
>13150	Identifier	S
>13151	ExpressionStatement	 
>13152	AssignmentExpr	S [ row2 + off + 0 ] += dx * dz
>13153	MultiplicativeExpression	dx * dz
>13154	Identifier	dz
>13155	Identifier	dx
>13156	ArrayIndexing	S [ row2 + off + 0 ]
>13157	AdditiveExpression	row2 + off + 0
>13158	AdditiveExpression	off + 0
>13159	PrimaryExpression	0
>13160	Identifier	off
>13161	Identifier	row2
>13162	Identifier	S
>13163	ExpressionStatement	 
>13164	AssignmentExpr	S [ row1 + off + 2 ] += dy * dz
>13165	MultiplicativeExpression	dy * dz
>13166	Identifier	dz
>13167	Identifier	dy
>13168	ArrayIndexing	S [ row1 + off + 2 ]
>13169	AdditiveExpression	row1 + off + 2
>13170	AdditiveExpression	off + 2
>13171	PrimaryExpression	2
>13172	Identifier	off
>13173	Identifier	row1
>13174	Identifier	S
>13175	ExpressionStatement	 
>13176	AssignmentExpr	S [ row1 + off + 1 ] += dy * dy
>13177	MultiplicativeExpression	dy * dy
>13178	Identifier	dy
>13179	Identifier	dy
>13180	ArrayIndexing	S [ row1 + off + 1 ]
>13181	AdditiveExpression	row1 + off + 1
>13182	AdditiveExpression	off + 1
>13183	PrimaryExpression	1
>13184	Identifier	off
>13185	Identifier	row1
>13186	Identifier	S
>13187	ExpressionStatement	 
>13188	AssignmentExpr	S [ row1 + off + 0 ] += dx * dy
>13189	MultiplicativeExpression	dx * dy
>13190	Identifier	dy
>13191	Identifier	dx
>13192	ArrayIndexing	S [ row1 + off + 0 ]
>13193	AdditiveExpression	row1 + off + 0
>13194	AdditiveExpression	off + 0
>13195	PrimaryExpression	0
>13196	Identifier	off
>13197	Identifier	row1
>13198	Identifier	S
>13199	ExpressionStatement	 
>13200	AssignmentExpr	S [ row0 + off + 2 ] += dx * dz
>13201	MultiplicativeExpression	dx * dz
>13202	Identifier	dz
>13203	Identifier	dx
>13204	ArrayIndexing	S [ row0 + off + 2 ]
>13205	AdditiveExpression	row0 + off + 2
>13206	AdditiveExpression	off + 2
>13207	PrimaryExpression	2
>13208	Identifier	off
>13209	Identifier	row0
>13210	Identifier	S
>13211	ExpressionStatement	 
>13212	AssignmentExpr	S [ row0 + off + 1 ] += dx * dy
>13213	MultiplicativeExpression	dx * dy
>13214	Identifier	dy
>13215	Identifier	dx
>13216	ArrayIndexing	S [ row0 + off + 1 ]
>13217	AdditiveExpression	row0 + off + 1
>13218	AdditiveExpression	off + 1
>13219	PrimaryExpression	1
>13220	Identifier	off
>13221	Identifier	row0
>13222	Identifier	S
>13223	ExpressionStatement	 
>13224	AssignmentExpr	S [ row0 + off + 0 ] += dx * dx
>13225	MultiplicativeExpression	dx * dx
>13226	Identifier	dx
>13227	Identifier	dx
>13228	ArrayIndexing	S [ row0 + off + 0 ]
>13229	AdditiveExpression	row0 + off + 0
>13230	AdditiveExpression	off + 0
>13231	PrimaryExpression	0
>13232	Identifier	off
>13233	Identifier	row0
>13234	Identifier	S
>13235	IdentifierDeclStatement	 
>13236	IdentifierDecl	off = 7 * c2
>13237	AssignmentExpr	off = 7 * c2
>13238	MultiplicativeExpression	7 * c2
>13239	Identifier	c2
>13240	PrimaryExpression	7
>13241	Identifier	off
>13242	Identifier	off
>13243	IdentifierDeclType	int
>13244	IdentifierDeclStatement	 
>13245	IdentifierDecl	row2 = ( 7 * c2 + 2 ) * num_vars
>13246	AssignmentExpr	row2 = ( 7 * c2 + 2 ) * num_vars
>13247	MultiplicativeExpression	( 7 * c2 + 2 ) * num_vars
>13248	Identifier	num_vars
>13249	AdditiveExpression	7 * c2 + 2
>13250	PrimaryExpression	2
>13251	MultiplicativeExpression	7 * c2
>13252	Identifier	c2
>13253	PrimaryExpression	7
>13254	Identifier	row2
>13255	Identifier	row2
>13256	IdentifierDeclType	int
>13257	IdentifierDeclStatement	 
>13258	IdentifierDecl	row1 = ( 7 * c2 + 1 ) * num_vars
>13259	AssignmentExpr	row1 = ( 7 * c2 + 1 ) * num_vars
>13260	MultiplicativeExpression	( 7 * c2 + 1 ) * num_vars
>13261	Identifier	num_vars
>13262	AdditiveExpression	7 * c2 + 1
>13263	PrimaryExpression	1
>13264	MultiplicativeExpression	7 * c2
>13265	Identifier	c2
>13266	PrimaryExpression	7
>13267	Identifier	row1
>13268	Identifier	row1
>13269	IdentifierDeclType	int
>13270	IdentifierDeclStatement	 
>13271	IdentifierDecl	row0 = ( 7 * c2 + 0 ) * num_vars
>13272	AssignmentExpr	row0 = ( 7 * c2 + 0 ) * num_vars
>13273	MultiplicativeExpression	( 7 * c2 + 0 ) * num_vars
>13274	Identifier	num_vars
>13275	AdditiveExpression	7 * c2 + 0
>13276	PrimaryExpression	0
>13277	MultiplicativeExpression	7 * c2
>13278	Identifier	c2
>13279	PrimaryExpression	7
>13280	Identifier	row0
>13281	Identifier	row0
>13282	IdentifierDeclType	int
>13283	IdentifierDeclStatement	 
>13284	IdentifierDecl	dz = 1.0e4 * 2.0 * eye [ 2 ]
>13285	AssignmentExpr	dz = 1.0e4 * 2.0 * eye [ 2 ]
>13286	MultiplicativeExpression	1.0e4 * 2.0 * eye [ 2 ]
>13287	MultiplicativeExpression	2.0 * eye [ 2 ]
>13288	ArrayIndexing	eye [ 2 ]
>13289	PrimaryExpression	2
>13290	Identifier	eye
>13291	PrimaryExpression	2.0
>13292	PrimaryExpression	1.0e4
>13293	Identifier	dz
>13294	Identifier	dz
>13295	IdentifierDeclType	double
>13296	IdentifierDeclStatement	 
>13297	IdentifierDecl	dy = 1.0e4 * 2.0 * eye [ 1 ]
>13298	AssignmentExpr	dy = 1.0e4 * 2.0 * eye [ 1 ]
>13299	MultiplicativeExpression	1.0e4 * 2.0 * eye [ 1 ]
>13300	MultiplicativeExpression	2.0 * eye [ 1 ]
>13301	ArrayIndexing	eye [ 1 ]
>13302	PrimaryExpression	1
>13303	Identifier	eye
>13304	PrimaryExpression	2.0
>13305	PrimaryExpression	1.0e4
>13306	Identifier	dy
>13307	Identifier	dy
>13308	IdentifierDeclType	double
>13309	IdentifierDeclStatement	 
>13310	IdentifierDecl	dx = 1.0e4 * 2.0 * eye [ 0 ]
>13311	AssignmentExpr	dx = 1.0e4 * 2.0 * eye [ 0 ]
>13312	MultiplicativeExpression	1.0e4 * 2.0 * eye [ 0 ]
>13313	MultiplicativeExpression	2.0 * eye [ 0 ]
>13314	ArrayIndexing	eye [ 0 ]
>13315	PrimaryExpression	0
>13316	Identifier	eye
>13317	PrimaryExpression	2.0
>13318	PrimaryExpression	1.0e4
>13319	Identifier	dx
>13320	Identifier	dx
>13321	IdentifierDeclType	double
>13322	ExpressionStatement	 
>13323	AssignmentExpr	eye [ 2 ] *= - 1.0
>13324	UnaryOp	- 1.0
>13325	PrimaryExpression	1.0
>13326	UnaryOperator	-
>13327	ArrayIndexing	eye [ 2 ]
>13328	PrimaryExpression	2
>13329	Identifier	eye
>13330	ExpressionStatement	 
>13331	CallExpression	m_image_data [ c2 ] . m_camera . GetPosition ( eye )
>13332	ArgumentList	eye
>13333	Argument	eye
>13334	Identifier	eye
>13335	Callee	m_image_data [ c2 ] . m_camera . GetPosition
>13336	MemberAccess	m_image_data [ c2 ] . m_camera . GetPosition
>13337	Identifier	GetPosition
>13338	MemberAccess	m_image_data [ c2 ] . m_camera
>13339	Identifier	m_camera
>13340	ArrayIndexing	m_image_data [ c2 ]
>13341	Identifier	c2
>13342	Identifier	m_image_data
>13343	IdentifierDeclStatement	 
>13344	IdentifierDecl	eye [ 3 ]
>13345	PrimaryExpression	3
>13346	Identifier	eye
>13347	IdentifierDeclType	double [ 3 ]
>13348	ExpressionStatement	 
>13349	CallExpression	printf ( \"  focal1, focal2
>13350	ArgumentList	\"  focal1, focal2
>13351	Argument	m_image_data [ c2 ] . m_init_focal
>13352	MemberAccess	m_image_data [ c2 ] . m_init_focal
>13353	Identifier	m_init_focal
>13354	ArrayIndexing	m_image_data [ c2 ]
>13355	Identifier	c2
>13356	Identifier	m_image_data
>13357	Argument	m_image_data [ c2 ] . m_camera . m_focal
>13358	MemberAccess	m_image_data [ c2 ] . m_camera . m_focal
>13359	Identifier	m_focal
>13360	MemberAccess	m_image_data [ c2 ] . m_camera
>13361	Identifier	m_camera
>13362	ArrayIndexing	m_image_data [ c2 ]
>13363	Identifier	c2
>13364	Identifier	m_image_data
>13365	Argument	m_image_data [ c1 ] . m_init_focal
>13366	MemberAccess	m_image_data [ c1 ] . m_init_focal
>13367	Identifier	m_init_focal
>13368	ArrayIndexing	m_image_data [ c1 ]
>13369	Identifier	c1
>13370	Identifier	m_image_data
>13371	Argument	m_image_data [ c1 ] . m_camera . m_focal
>13372	MemberAccess	m_image_data [ c1 ] . m_camera . m_focal
>13373	Identifier	m_focal
>13374	MemberAccess	m_image_data [ c1 ] . m_camera
>13375	Identifier	m_camera
>13376	ArrayIndexing	m_image_data [ c1 ]
>13377	Identifier	c1
>13378	Identifier	m_image_data
>13379	Argument	\"  focal1, focal2
>13380	PrimaryExpression	\"  focal1, focal2
>13381	Callee	printf
>13382	Identifier	printf
>13383	ExpressionStatement	 
>13384	CallExpression	ReRunSFM ( S )
>13385	ArgumentList	S
>13386	Argument	S
>13387	Identifier	S
>13388	Callee	ReRunSFM
>13389	Identifier	ReRunSFM
>13390	ExpressionStatement	 
>13391	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constraint_weights [ 5 ] = 1.0e6
>13392	PrimaryExpression	1.0e6
>13393	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constraint_weights [ 5 ]
>13394	PrimaryExpression	5
>13395	MemberAccess	m_image_data [ c1 ] . m_camera . m_constraint_weights
>13396	Identifier	m_constraint_weights
>13397	MemberAccess	m_image_data [ c1 ] . m_camera
>13398	Identifier	m_camera
>13399	ArrayIndexing	m_image_data [ c1 ]
>13400	Identifier	c1
>13401	Identifier	m_image_data
>13402	ExpressionStatement	 
>13403	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constraint_weights [ 4 ] = 1.0e6
>13404	PrimaryExpression	1.0e6
>13405	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constraint_weights [ 4 ]
>13406	PrimaryExpression	4
>13407	MemberAccess	m_image_data [ c1 ] . m_camera . m_constraint_weights
>13408	Identifier	m_constraint_weights
>13409	MemberAccess	m_image_data [ c1 ] . m_camera
>13410	Identifier	m_camera
>13411	ArrayIndexing	m_image_data [ c1 ]
>13412	Identifier	c1
>13413	Identifier	m_image_data
>13414	ExpressionStatement	 
>13415	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constraint_weights [ 3 ] = 1.0e6
>13416	PrimaryExpression	1.0e6
>13417	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constraint_weights [ 3 ]
>13418	PrimaryExpression	3
>13419	MemberAccess	m_image_data [ c1 ] . m_camera . m_constraint_weights
>13420	Identifier	m_constraint_weights
>13421	MemberAccess	m_image_data [ c1 ] . m_camera
>13422	Identifier	m_camera
>13423	ArrayIndexing	m_image_data [ c1 ]
>13424	Identifier	c1
>13425	Identifier	m_image_data
>13426	ExpressionStatement	 
>13427	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constraint_weights [ 2 ] = 1.0e6
>13428	PrimaryExpression	1.0e6
>13429	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constraint_weights [ 2 ]
>13430	PrimaryExpression	2
>13431	MemberAccess	m_image_data [ c1 ] . m_camera . m_constraint_weights
>13432	Identifier	m_constraint_weights
>13433	MemberAccess	m_image_data [ c1 ] . m_camera
>13434	Identifier	m_camera
>13435	ArrayIndexing	m_image_data [ c1 ]
>13436	Identifier	c1
>13437	Identifier	m_image_data
>13438	ExpressionStatement	 
>13439	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constraint_weights [ 1 ] = 1.0e6
>13440	PrimaryExpression	1.0e6
>13441	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constraint_weights [ 1 ]
>13442	PrimaryExpression	1
>13443	MemberAccess	m_image_data [ c1 ] . m_camera . m_constraint_weights
>13444	Identifier	m_constraint_weights
>13445	MemberAccess	m_image_data [ c1 ] . m_camera
>13446	Identifier	m_camera
>13447	ArrayIndexing	m_image_data [ c1 ]
>13448	Identifier	c1
>13449	Identifier	m_image_data
>13450	ExpressionStatement	 
>13451	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constraint_weights [ 0 ] = 1.0e6
>13452	PrimaryExpression	1.0e6
>13453	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constraint_weights [ 0 ]
>13454	PrimaryExpression	0
>13455	MemberAccess	m_image_data [ c1 ] . m_camera . m_constraint_weights
>13456	Identifier	m_constraint_weights
>13457	MemberAccess	m_image_data [ c1 ] . m_camera
>13458	Identifier	m_camera
>13459	ArrayIndexing	m_image_data [ c1 ]
>13460	Identifier	c1
>13461	Identifier	m_image_data
>13462	ExpressionStatement	 
>13463	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constraints [ 5 ] = 0.0
>13464	PrimaryExpression	0.0
>13465	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constraints [ 5 ]
>13466	PrimaryExpression	5
>13467	MemberAccess	m_image_data [ c1 ] . m_camera . m_constraints
>13468	Identifier	m_constraints
>13469	MemberAccess	m_image_data [ c1 ] . m_camera
>13470	Identifier	m_camera
>13471	ArrayIndexing	m_image_data [ c1 ]
>13472	Identifier	c1
>13473	Identifier	m_image_data
>13474	ExpressionStatement	 
>13475	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constraints [ 4 ] = 0.0
>13476	PrimaryExpression	0.0
>13477	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constraints [ 4 ]
>13478	PrimaryExpression	4
>13479	MemberAccess	m_image_data [ c1 ] . m_camera . m_constraints
>13480	Identifier	m_constraints
>13481	MemberAccess	m_image_data [ c1 ] . m_camera
>13482	Identifier	m_camera
>13483	ArrayIndexing	m_image_data [ c1 ]
>13484	Identifier	c1
>13485	Identifier	m_image_data
>13486	ExpressionStatement	 
>13487	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constraints [ 3 ] = 0.0
>13488	PrimaryExpression	0.0
>13489	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constraints [ 3 ]
>13490	PrimaryExpression	3
>13491	MemberAccess	m_image_data [ c1 ] . m_camera . m_constraints
>13492	Identifier	m_constraints
>13493	MemberAccess	m_image_data [ c1 ] . m_camera
>13494	Identifier	m_camera
>13495	ArrayIndexing	m_image_data [ c1 ]
>13496	Identifier	c1
>13497	Identifier	m_image_data
>13498	ExpressionStatement	 
>13499	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constraints [ 2 ] = 0.0
>13500	PrimaryExpression	0.0
>13501	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constraints [ 2 ]
>13502	PrimaryExpression	2
>13503	MemberAccess	m_image_data [ c1 ] . m_camera . m_constraints
>13504	Identifier	m_constraints
>13505	MemberAccess	m_image_data [ c1 ] . m_camera
>13506	Identifier	m_camera
>13507	ArrayIndexing	m_image_data [ c1 ]
>13508	Identifier	c1
>13509	Identifier	m_image_data
>13510	ExpressionStatement	 
>13511	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constraints [ 1 ] = 0.0
>13512	PrimaryExpression	0.0
>13513	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constraints [ 1 ]
>13514	PrimaryExpression	1
>13515	MemberAccess	m_image_data [ c1 ] . m_camera . m_constraints
>13516	Identifier	m_constraints
>13517	MemberAccess	m_image_data [ c1 ] . m_camera
>13518	Identifier	m_camera
>13519	ArrayIndexing	m_image_data [ c1 ]
>13520	Identifier	c1
>13521	Identifier	m_image_data
>13522	ExpressionStatement	 
>13523	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constraints [ 0 ] = 0.0
>13524	PrimaryExpression	0.0
>13525	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constraints [ 0 ]
>13526	PrimaryExpression	0
>13527	MemberAccess	m_image_data [ c1 ] . m_camera . m_constraints
>13528	Identifier	m_constraints
>13529	MemberAccess	m_image_data [ c1 ] . m_camera
>13530	Identifier	m_camera
>13531	ArrayIndexing	m_image_data [ c1 ]
>13532	Identifier	c1
>13533	Identifier	m_image_data
>13534	ExpressionStatement	 
>13535	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constrained [ 5 ] = true
>13536	Identifier	true
>13537	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constrained [ 5 ]
>13538	PrimaryExpression	5
>13539	MemberAccess	m_image_data [ c1 ] . m_camera . m_constrained
>13540	Identifier	m_constrained
>13541	MemberAccess	m_image_data [ c1 ] . m_camera
>13542	Identifier	m_camera
>13543	ArrayIndexing	m_image_data [ c1 ]
>13544	Identifier	c1
>13545	Identifier	m_image_data
>13546	ExpressionStatement	 
>13547	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constrained [ 4 ] = true
>13548	Identifier	true
>13549	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constrained [ 4 ]
>13550	PrimaryExpression	4
>13551	MemberAccess	m_image_data [ c1 ] . m_camera . m_constrained
>13552	Identifier	m_constrained
>13553	MemberAccess	m_image_data [ c1 ] . m_camera
>13554	Identifier	m_camera
>13555	ArrayIndexing	m_image_data [ c1 ]
>13556	Identifier	c1
>13557	Identifier	m_image_data
>13558	ExpressionStatement	 
>13559	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constrained [ 3 ] = true
>13560	Identifier	true
>13561	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constrained [ 3 ]
>13562	PrimaryExpression	3
>13563	MemberAccess	m_image_data [ c1 ] . m_camera . m_constrained
>13564	Identifier	m_constrained
>13565	MemberAccess	m_image_data [ c1 ] . m_camera
>13566	Identifier	m_camera
>13567	ArrayIndexing	m_image_data [ c1 ]
>13568	Identifier	c1
>13569	Identifier	m_image_data
>13570	ExpressionStatement	 
>13571	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constrained [ 2 ] = true
>13572	Identifier	true
>13573	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constrained [ 2 ]
>13574	PrimaryExpression	2
>13575	MemberAccess	m_image_data [ c1 ] . m_camera . m_constrained
>13576	Identifier	m_constrained
>13577	MemberAccess	m_image_data [ c1 ] . m_camera
>13578	Identifier	m_camera
>13579	ArrayIndexing	m_image_data [ c1 ]
>13580	Identifier	c1
>13581	Identifier	m_image_data
>13582	ExpressionStatement	 
>13583	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constrained [ 1 ] = true
>13584	Identifier	true
>13585	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constrained [ 1 ]
>13586	PrimaryExpression	1
>13587	MemberAccess	m_image_data [ c1 ] . m_camera . m_constrained
>13588	Identifier	m_constrained
>13589	MemberAccess	m_image_data [ c1 ] . m_camera
>13590	Identifier	m_camera
>13591	ArrayIndexing	m_image_data [ c1 ]
>13592	Identifier	c1
>13593	Identifier	m_image_data
>13594	ExpressionStatement	 
>13595	AssignmentExpr	m_image_data [ c1 ] . m_camera . m_constrained [ 0 ] = true
>13596	Identifier	true
>13597	ArrayIndexing	m_image_data [ c1 ] . m_camera . m_constrained [ 0 ]
>13598	PrimaryExpression	0
>13599	MemberAccess	m_image_data [ c1 ] . m_camera . m_constrained
>13600	Identifier	m_constrained
>13601	MemberAccess	m_image_data [ c1 ] . m_camera
>13602	Identifier	m_camera
>13603	ArrayIndexing	m_image_data [ c1 ]
>13604	Identifier	c1
>13605	Identifier	m_image_data
>13606	ExpressionStatement	 
>13607	CallExpression	TransformSceneCanonical ( c1 , c2 )
>13608	ArgumentList	c1
>13609	Argument	c2
>13610	Identifier	c2
>13611	Argument	c1
>13612	Identifier	c1
>13613	Callee	TransformSceneCanonical
>13614	Identifier	TransformSceneCanonical
>13615	IdentifierDeclStatement	 
>13616	IdentifierDecl	c2 = m_covariance_fix2
>13617	AssignmentExpr	c2 = m_covariance_fix2
>13618	Identifier	m_covariance_fix2
>13619	Identifier	m_covariance_fix2
>13620	Identifier	c2
>13621	IdentifierDeclType	int
>13622	IdentifierDeclStatement	 
>13623	IdentifierDecl	c1 = m_covariance_fix1
>13624	AssignmentExpr	c1 = m_covariance_fix1
>13625	Identifier	m_covariance_fix1
>13626	Identifier	m_covariance_fix1
>13627	Identifier	c1
>13628	IdentifierDeclType	int
>13629	IdentifierDeclStatement	 
>13630	IdentifierDecl	* S = new double [ num_vars * num_vars ]
>13631	AssignmentExpr	* S = new double [ num_vars * num_vars ]
>13632	MultiplicativeExpression	num_vars * num_vars
>13633	Identifier	num_vars
>13634	Identifier	num_vars
>13635	Identifier	S
>13636	Identifier	S
>13637	IdentifierDeclType	double *
>13638	IdentifierDeclStatement	 
>13639	IdentifierDecl	num_vars = 7 * num_images
>13640	AssignmentExpr	num_vars = 7 * num_images
>13641	MultiplicativeExpression	7 * num_images
>13642	Identifier	num_images
>13643	PrimaryExpression	7
>13644	Identifier	num_vars
>13645	Identifier	num_vars
>13646	IdentifierDeclType	int
>13647	IdentifierDeclStatement	 
>13648	IdentifierDecl	num_images = GetNumImages ( )
>13649	AssignmentExpr	num_images = GetNumImages ( )
>13650	CallExpression	GetNumImages ( )
>13651	ArgumentList	 
>13652	Callee	GetNumImages
>13653	Identifier	GetNumImages
>13654	Identifier	num_images
>13655	Identifier	num_images
>13656	IdentifierDeclType	int
>13657	IfStatement	if ( m_covariance_fix1 == - 1 || m_covariance_fix2 == - 1 )
>13658	CompoundStatement	 
>13659	ExpressionStatement	 
>13660	Statement	 
>13661	Statement	 
>13662	Statement	 
>13663	Statement	 
>13664	Statement	 
>13665	Condition	 
>13666	OrExpression	m_covariance_fix1 == - 1 || m_covariance_fix2 == - 1
>13667	EqualityExpression	m_covariance_fix2 == - 1
>13668	UnaryOp	- 1
>13669	PrimaryExpression	1
>13670	UnaryOperator	-
>13671	Identifier	m_covariance_fix2
>13672	EqualityExpression	m_covariance_fix1 == - 1
>13673	UnaryOp	- 1
>13674	PrimaryExpression	1
>13675	UnaryOperator	-
>13676	Identifier	m_covariance_fix1
<3=15,14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<15=25,16
<16=17
<17=23,18
<18=21,19
<19=20
<21=22
<23=24
<25=47,43,40,26
<26=27
<27=28
<28=38,29
<29=36,34,30
<30=31
<31=33,32
<34=35
<36=37
<38=39
<40=42,41
<43=44
<44=46,45
<47=48
<48=49
<49=54,53,50
<50=52,51
<64=73,72,65
<65=69,66
<66=68,67
<69=71,70
<73=100,87,74
<74=75
<75=85,76
<76=83,81,77
<77=78
<78=80,79
<81=82
<83=84
<85=86
<87=88
<88=98,89
<89=96,94,90
<90=91
<91=93,92
<94=95
<96=97
<98=99
<100=101
<101=111,102
<102=109,107,103
<103=104
<104=106,105
<107=108
<109=110
<111=112
<121=142,141,122
<122=138,135,132,129,126,123
<123=125,124
<126=128,127
<129=131,130
<132=134,133
<135=137,136
<138=140,139
<142=1645,1636,1627,1616,1605,1264,1255,1246,1235,1224,1164,1163,1162,1161,1160,1159,1158,1091,1090,1089,1088,1087,1086,1085,1084,1063,1062,1045,143,145,146,147,148,181,202,206,223,239,256,279,284,311,316,329,334,548,557,564,571,604,625,629,646,662,679,700,705,724,729,746,765,782,801,810,823,828,974,979,998,1003,1016,1017,1039,1040,1041,1042,1043,1044
<143=144
<148=149
<149=179,150
<150=177,173,169,165,161,157,153,151
<151=152
<153=154
<154=156,155
<157=158
<158=160,159
<161=162
<162=164,163
<165=166
<166=168,167
<169=170
<170=172,171
<173=174
<174=176,175
<177=178
<179=180
<181=182
<182=200,183
<183=198,196,194,192,190,188,184
<184=185
<185=187,186
<188=189
<190=191
<192=193
<194=195
<196=197
<198=199
<200=201
<202=203
<203=205,204
<206=207
<207=221,208
<208=219,217,215,211,209
<209=210
<211=212
<212=214,213
<215=216
<217=218
<219=220
<221=222
<223=224
<224=238,237,225
<225=236,226
<226=234,227
<227=232,230,228
<228=229
<230=231
<232=233
<234=235
<239=240
<240=254,241
<241=252,250,248,244,242
<242=243
<244=245
<245=247,246
<248=249
<250=251
<252=253
<254=255
<256=257
<257=277,258
<258=275,273,271,269,263,261,259
<259=260
<261=262
<263=264
<264=268,265
<265=267,266
<269=270
<271=272
<273=274
<275=276
<277=278
<279=280
<280=283,282,281
<284=285
<285=309,286
<286=307,305,303,301,295,289,287
<287=288
<289=290
<290=294,291
<291=293,292
<295=296
<296=300,297
<297=299,298
<301=302
<303=304
<305=306
<307=308
<309=310
<311=312
<312=315,314,313
<316=317
<317=327,318
<318=325,323,321,319
<319=320
<321=322
<323=324
<325=326
<327=328
<329=330
<330=333,332,331
<334=540,536,533,335
<335=511,489,468,463,442,427,416,392,370,336
<336=337
<337=367,338
<338=352,339
<339=346,340
<340=344,341
<341=342
<342=343
<344=345
<346=350,347
<347=348
<348=349
<350=351
<352=359,353
<353=357,354
<354=355
<355=356
<357=358
<359=366,360
<360=364,361
<361=362
<362=363
<364=365
<367=369,368
<370=371
<371=389,372
<372=383,373
<373=377,374
<374=376,375
<377=381,378
<378=379
<379=380
<381=382
<383=387,384
<384=385
<385=386
<387=388
<389=391,390
<392=393
<393=413,394
<394=405,395
<395=399,396
<396=398,397
<399=403,400
<400=401
<401=402
<403=404
<405=412,406
<406=410,407
<407=408
<408=409
<410=411
<413=415,414
<416=417
<417=426,425,418
<418=424,419
<419=423,420
<420=422,421
<427=428
<428=441,429
<429=439,430
<430=435,431
<431=432
<432=434,433
<435=436
<436=438,437
<439=440
<442=443
<443=461,444
<444=459,457,455,453,449,447,445
<445=446
<447=448
<449=450
<450=452,451
<453=454
<455=456
<457=458
<459=460
<461=462
<463=464
<464=467,466,465
<468=469
<469=488,487,486,470
<470=485,471
<471=479,473,472
<473=477,474
<474=475
<475=476
<477=478
<479=483,480
<480=481
<481=482
<483=484
<489=490
<490=510,509,491
<491=508,492
<492=506,493
<493=498,494
<494=495
<495=497,496
<498=499
<499=503,500
<500=502,501
<503=505,504
<506=507
<511=512
<512=532,531,513
<513=530,514
<514=528,515
<515=520,516
<516=517
<517=519,518
<520=521
<521=525,522
<522=524,523
<525=527,526
<528=529
<533=535,534
<536=537
<537=539,538
<540=541
<541=542
<542=547,546,543
<543=545,544
<548=549
<549=556,555,550
<550=554,551
<551=553,552
<557=558
<558=563,562,559
<559=561,560
<564=565
<565=570,569,566
<566=568,567
<571=572
<572=602,573
<573=600,596,592,588,584,580,576,574
<574=575
<576=577
<577=579,578
<580=581
<581=583,582
<584=585
<585=587,586
<588=589
<589=591,590
<592=593
<593=595,594
<596=597
<597=599,598
<600=601
<602=603
<604=605
<605=623,606
<606=621,619,617,615,613,611,607
<607=608
<608=610,609
<611=612
<613=614
<615=616
<617=618
<619=620
<621=622
<623=624
<625=626
<626=628,627
<629=630
<630=644,631
<631=642,640,638,634,632
<632=633
<634=635
<635=637,636
<638=639
<640=641
<642=643
<644=645
<646=647
<647=661,660,648
<648=659,649
<649=657,650
<650=655,653,651
<651=652
<653=654
<655=656
<657=658
<662=663
<663=677,664
<664=675,673,671,667,665
<665=666
<667=668
<668=670,669
<671=672
<673=674
<675=676
<677=678
<679=680
<680=698,681
<681=696,694,692,690,686,684,682
<682=683
<684=685
<686=687
<687=689,688
<690=691
<692=693
<694=695
<696=697
<698=699
<700=701
<701=704,703,702
<705=706
<706=722,707
<707=720,718,716,714,712,710,708
<708=709
<710=711
<712=713
<714=715
<716=717
<718=719
<720=721
<722=723
<724=725
<725=728,727,726
<729=730
<730=744,731
<731=742,740,738,734,732
<732=733
<734=735
<735=737,736
<738=739
<740=741
<742=743
<744=745
<746=747
<747=763,748
<748=761,759,757,755,753,751,749
<749=750
<751=752
<753=754
<755=756
<757=758
<759=760
<761=762
<763=764
<765=766
<766=780,767
<767=778,776,774,770,768
<768=769
<770=771
<771=773,772
<774=775
<776=777
<778=779
<780=781
<782=783
<783=799,784
<784=797,795,793,791,789,787,785
<785=786
<787=788
<789=790
<791=792
<793=794
<795=796
<797=798
<799=800
<801=806,802
<802=805,804,803
<806=809,808,807
<810=811
<811=821,812
<812=819,817,815,813
<813=814
<815=816
<817=818
<819=820
<821=822
<823=824
<824=827,826,825
<828=966,962,959,829
<829=948,937,932,913,901,889,878,864,852,830
<830=831
<831=849,832
<832=840,833
<833=837,834
<834=836,835
<837=839,838
<840=844,841
<841=843,842
<844=848,845
<845=847,846
<849=851,850
<852=853
<853=861,854
<854=858,855
<855=857,856
<858=860,859
<861=863,862
<864=865
<865=875,866
<866=870,867
<867=869,868
<870=874,871
<871=873,872
<875=877,876
<878=879
<879=888,887,880
<880=886,881
<881=885,882
<882=884,883
<889=890
<890=898,891
<891=895,892
<892=894,893
<895=897,896
<898=900,899
<901=902
<902=910,903
<903=907,904
<904=906,905
<907=909,908
<910=912,911
<913=914
<914=930,915
<915=928,926,924,922,920,918,916
<916=917
<918=919
<920=921
<922=923
<924=925
<926=927
<928=929
<930=931
<932=933
<933=936,935,934
<937=938
<938=947,946,939
<939=945,940
<940=944,941
<941=943,942
<948=949
<949=958,957,950
<950=956,951
<951=955,952
<952=954,953
<959=961,960
<962=963
<963=965,964
<966=967
<967=968
<968=973,972,969
<969=971,970
<974=975
<975=978,977,976
<979=980
<980=996,981
<981=994,992,990,988,986,984,982
<982=983
<984=985
<986=987
<988=989
<990=991
<992=993
<994=995
<996=997
<998=999
<999=1002,1001,1000
<1003=1004
<1004=1015,1014,1013,1005
<1005=1012,1006
<1006=1009,1008,1007
<1009=1011,1010
<1017=1038,1037,1036,1035,1034,1033,1032,1031,1030,1029,1028,1027,1026,1025,1024,1023,1022,1021,1020,1019,1018
<1045=1046
<1046=1061,1060,1059,1047
<1047=1058,1048
<1048=1055,1052,1049
<1049=1051,1050
<1052=1054,1053
<1055=1057,1056
<1063=1083,1082,1081,1080,1079,1078,1077,1076,1075,1074,1073,1072,1071,1070,1069,1068,1067,1066,1065,1064
<1091=1157,1156,1155,1154,1153,1152,1151,1150,1149,1148,1147,1146,1145,1144,1143,1142,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141
<1164=1165
<1165=1223,1222,1221,1166
<1166=1220,1167
<1167=1219,1218,1217,1214,1213,1212,1209,1208,1207,1204,1201,1200,1197,1196,1195,1192,1191,1190,1187,1184,1183,1180,1177,1176,1173,1172,1171,1170,1169,1168
<1173=1175,1174
<1177=1179,1178
<1180=1182,1181
<1184=1186,1185
<1187=1189,1188
<1192=1194,1193
<1197=1199,1198
<1201=1203,1202
<1204=1206,1205
<1209=1211,1210
<1214=1216,1215
<1224=1225
<1225=1233,1226
<1226=1231,1229,1227
<1227=1228
<1229=1230
<1231=1232
<1233=1234
<1235=1236
<1236=1244,1237
<1237=1242,1240,1238
<1238=1239
<1240=1241
<1242=1243
<1244=1245
<1246=1247
<1247=1253,1248
<1248=1251,1249
<1249=1250
<1251=1252
<1253=1254
<1255=1256
<1256=1262,1257
<1257=1260,1258
<1258=1259
<1260=1261
<1262=1263
<1264=1597,1593,1590,1265
<1265=1586,1568,1530,1513,1414,1401,1388,1375,1362,1349,1329,1309,1292,1279,1266
<1266=1267
<1267=1276,1268
<1268=1274,1269
<1269=1272,1270
<1270=1271
<1272=1273
<1274=1275
<1276=1278,1277
<1279=1280
<1280=1289,1281
<1281=1287,1282
<1282=1285,1283
<1283=1284
<1285=1286
<1287=1288
<1289=1291,1290
<1292=1293
<1293=1307,1294
<1294=1305,1303,1301,1299,1297,1295
<1295=1296
<1297=1298
<1299=1300
<1301=1302
<1303=1304
<1305=1306
<1307=1308
<1309=1325,1310
<1310=1311
<1311=1321,1312
<1312=1319,1317,1315,1313
<1313=1314
<1315=1316
<1317=1318
<1319=1320
<1321=1322
<1322=1324,1323
<1325=1326
<1326=1328,1327
<1329=1345,1330
<1330=1331
<1331=1341,1332
<1332=1339,1337,1335,1333
<1333=1334
<1335=1336
<1337=1338
<1339=1340
<1341=1342
<1342=1344,1343
<1345=1346
<1346=1348,1347
<1349=1350
<1350=1361,1360,1351
<1351=1359,1352
<1352=1354,1353
<1354=1356,1355
<1356=1358,1357
<1362=1363
<1363=1374,1373,1364
<1364=1372,1365
<1365=1367,1366
<1367=1369,1368
<1369=1371,1370
<1375=1376
<1376=1387,1386,1377
<1377=1385,1378
<1378=1380,1379
<1380=1382,1381
<1382=1384,1383
<1388=1389
<1389=1400,1399,1390
<1390=1398,1391
<1391=1393,1392
<1393=1395,1394
<1395=1397,1396
<1401=1402
<1402=1412,1403
<1403=1404
<1404=1405
<1405=1409,1406
<1406=1408,1407
<1409=1411,1410
<1412=1413
<1414=1507,1429,1415
<1415=1416
<1416=1423,1417
<1417=1418
<1418=1422,1419
<1419=1421,1420
<1423=1424
<1424=1428,1425
<1425=1427,1426
<1429=1496,1482,1430
<1430=1474,1470,1467,1431
<1431=1432
<1432=1459,1451,1433
<1433=1434
<1434=1443,1435
<1435=1436
<1436=1442,1437
<1437=1439,1438
<1439=1441,1440
<1443=1444
<1444=1446,1445
<1446=1448,1447
<1448=1450,1449
<1451=1452
<1452=1458,1453
<1453=1455,1454
<1455=1457,1456
<1459=1460
<1460=1462,1461
<1462=1464,1463
<1464=1466,1465
<1467=1469,1468
<1470=1471
<1471=1473,1472
<1474=1475
<1475=1476
<1476=1481,1480,1477
<1477=1479,1478
<1482=1483
<1483=1495,1494,1484
<1484=1493,1485
<1485=1492,1486
<1486=1488,1487
<1488=1489
<1489=1491,1490
<1496=1497
<1497=1506,1505,1498
<1498=1504,1499
<1499=1501,1500
<1501=1503,1502
<1507=1508
<1508=1512,1509
<1509=1511,1510
<1513=1522,1514
<1514=1521,1520,1515
<1515=1519,1516
<1516=1518,1517
<1522=1529,1528,1523
<1523=1527,1524
<1524=1526,1525
<1530=1531
<1531=1566,1532
<1532=1564,1562,1560,1551,1542,1533
<1533=1534
<1534=1540,1535
<1535=1536
<1536=1537
<1537=1539,1538
<1540=1541
<1542=1543
<1543=1549,1544
<1544=1545
<1545=1546
<1546=1548,1547
<1549=1550
<1551=1552
<1552=1558,1553
<1553=1554
<1554=1555
<1555=1557,1556
<1558=1559
<1560=1561
<1562=1563
<1564=1565
<1566=1567
<1568=1582,1576,1569
<1569=1570
<1570=1571
<1571=1575,1572
<1572=1574,1573
<1576=1577
<1577=1581,1578
<1578=1580,1579
<1582=1583
<1583=1585,1584
<1586=1587
<1587=1589,1588
<1590=1592,1591
<1593=1594
<1594=1596,1595
<1597=1598
<1598=1599
<1599=1604,1603,1600
<1600=1602,1601
<1605=1606
<1606=1614,1607
<1607=1612,1610,1608
<1608=1609
<1610=1611
<1612=1613
<1614=1615
<1616=1617
<1617=1625,1618
<1618=1623,1621,1619
<1619=1620
<1621=1622
<1623=1624
<1625=1626
<1627=1628
<1628=1632,1629
<1629=1630
<1630=1631
<1632=1633
<1633=1635,1634
<1636=1637
<1637=1641,1638
<1638=1639
<1639=1640
<1641=1642
<1642=1644,1643
<1645=1649,1646
<1646=1648,1647
<1649=1651,1650
<1754=1772,1771,1755
<1755=1768,1765,1762,1759,1756
<1756=1758,1757
<1759=1761,1760
<1762=1764,1763
<1765=1767,1766
<1768=1770,1769
<1772=2072,2063,2031,2017,1805,1773
<1773=1801,1774
<1774=1775
<1775=1793,1789,1786,1776
<1776=1777
<1777=1778
<1778=1780,1779
<1780=1781
<1781=1783,1782
<1783=1785,1784
<1786=1788,1787
<1789=1790
<1790=1792,1791
<1793=1794
<1794=1795
<1795=1800,1799,1796
<1796=1798,1797
<1801=1802
<1802=1804,1803
<1805=2013,2004,1806
<1806=1807
<1807=1993,1815,1808
<1808=1809
<1809=1813,1810
<1810=1811
<1811=1812
<1813=1814
<1815=1985,1981,1978,1816
<1816=1969,1953,1831,1817
<1817=1827,1818
<1818=1819
<1819=1821,1820
<1821=1822
<1822=1824,1823
<1824=1826,1825
<1827=1828
<1828=1830,1829
<1831=1943,1939,1936,1832
<1832=1833
<1833=1920,1834
<1834=1904,1895,1882,1849,1835
<1835=1845,1836
<1836=1837
<1837=1839,1838
<1839=1840
<1840=1842,1841
<1842=1844,1843
<1845=1846
<1846=1848,1847
<1849=1850
<1850=1864,1851
<1851=1862,1860,1858,1856,1854,1852
<1852=1853
<1854=1855
<1856=1857
<1858=1859
<1860=1861
<1862=1863
<1864=1865
<1865=1867,1866
<1867=1878,1868
<1868=1869
<1869=1870
<1870=1876,1871
<1871=1874,1872
<1872=1873
<1874=1875
<1876=1877
<1878=1879
<1879=1881,1880
<1882=1883
<1883=1893,1884
<1884=1891,1889,1887,1885
<1885=1886
<1887=1888
<1889=1890
<1891=1892
<1893=1894
<1895=1896
<1896=1903,1902,1897
<1897=1901,1898
<1898=1900,1899
<1904=1916,1905
<1905=1906
<1906=1910,1907
<1907=1908
<1908=1909
<1910=1911
<1911=1913,1912
<1913=1915,1914
<1916=1917
<1917=1919,1918
<1920=1921
<1921=1932,1922
<1922=1923
<1923=1924
<1924=1930,1925
<1925=1928,1926
<1926=1927
<1928=1929
<1930=1931
<1932=1933
<1933=1935,1934
<1936=1938,1937
<1939=1940
<1940=1942,1941
<1943=1944
<1944=1945
<1945=1952,1951,1946
<1946=1950,1947
<1947=1949,1948
<1953=1965,1954
<1954=1955
<1955=1959,1956
<1956=1957
<1957=1958
<1959=1960
<1960=1962,1961
<1962=1964,1963
<1965=1966
<1966=1968,1967
<1969=1970
<1970=1977,1976,1971
<1971=1975,1972
<1972=1974,1973
<1978=1980,1979
<1981=1982
<1982=1984,1983
<1985=1986
<1986=1987
<1987=1992,1991,1988
<1988=1990,1989
<1993=1994
<1994=2002,1995
<1995=2000,1998,1996
<1996=1997
<1998=1999
<2000=2001
<2002=2003
<2004=2012,2011,2010,2009,2008,2007,2006,2005
<2013=2014
<2014=2016,2015
<2017=2018
<2018=2030,2029,2019
<2019=2028,2020
<2020=2026,2021
<2021=2024,2022
<2022=2023
<2024=2025
<2026=2027
<2031=2061,2032
<2032=2033
<2033=2053,2049,2046,2034
<2034=2035
<2035=2036
<2036=2040,2037
<2037=2038
<2038=2039
<2040=2041
<2041=2043,2042
<2043=2045,2044
<2046=2048,2047
<2049=2050
<2050=2052,2051
<2053=2054
<2054=2055
<2055=2060,2059,2056
<2056=2058,2057
<2061=2062
<2063=2068,2064
<2064=2065
<2065=2067,2066
<2068=2069
<2069=2071,2070
<2072=2073
<2073=2078,2077,2074
<2074=2076,2075
<2103=2115,2114,2104
<2104=2111,2108,2105
<2105=2107,2106
<2108=2110,2109
<2111=2113,2112
<2115=2240,2116
<2116=2232,2228,2225,2117
<2117=2118
<2118=2215,2211,2208,2119
<2119=2197,2120
<2120=2181,2121
<2121=2122
<2122=2173,2123
<2123=2156,2133,2124
<2124=2125
<2125=2129,2126
<2126=2127
<2127=2128
<2129=2130
<2130=2132,2131
<2133=2148,2134
<2134=2141,2135
<2135=2136
<2136=2138,2137
<2138=2140,2139
<2141=2142
<2142=2146,2143
<2143=2144
<2144=2145
<2146=2147
<2148=2149
<2149=2151,2150
<2151=2153,2152
<2153=2155,2154
<2156=2157
<2157=2171,2158
<2158=2169,2167,2165,2159
<2159=2160
<2160=2162,2161
<2162=2164,2163
<2165=2166
<2167=2168
<2169=2170
<2171=2172
<2173=2174
<2174=2176,2175
<2176=2178,2177
<2178=2180,2179
<2181=2182
<2182=2189,2183
<2183=2185,2184
<2185=2186
<2186=2188,2187
<2189=2193,2190
<2190=2191
<2191=2192
<2193=2194
<2194=2196,2195
<2197=2198
<2198=2207,2206,2199
<2199=2205,2200
<2200=2202,2201
<2202=2204,2203
<2208=2210,2209
<2211=2212
<2212=2214,2213
<2215=2216
<2216=2217
<2217=2224,2223,2218
<2218=2222,2219
<2219=2221,2220
<2225=2227,2226
<2228=2229
<2229=2231,2230
<2232=2233
<2233=2234
<2234=2239,2238,2235
<2235=2237,2236
<2240=2241
<2241=2246,2245,2242
<2242=2244,2243
<2265=2274,2273,2266
<2266=2270,2267
<2267=2269,2268
<2270=2272,2271
<2274=2404,2275
<2275=2396,2392,2389,2276
<2276=2277
<2277=2379,2375,2372,2278
<2278=2358,2279
<2279=2349,2280
<2280=2335,2281
<2281=2329,2282
<2282=2328,2327,2326,2325,2324,2323,2322,2321,2320,2319,2318,2317,2316,2315,2283
<2283=2309,2295,2284
<2284=2285
<2285=2286
<2286=2287
<2287=2291,2288
<2288=2289
<2289=2290
<2291=2292
<2292=2294,2293
<2295=2308,2307,2306,2305,2304,2303,2296
<2296=2297
<2297=2299,2298
<2299=2300
<2300=2302,2301
<2309=2310
<2310=2312,2311
<2312=2314,2313
<2329=2330
<2330=2332,2331
<2332=2334,2333
<2335=2336
<2336=2348,2347,2337
<2337=2346,2338
<2338=2342,2339
<2339=2340
<2340=2341
<2342=2343
<2343=2345,2344
<2349=2350
<2350=2354,2351
<2351=2352
<2352=2353
<2354=2355
<2355=2357,2356
<2358=2359
<2359=2371,2370,2360
<2360=2369,2361
<2361=2367,2362
<2362=2365,2363
<2363=2364
<2365=2366
<2367=2368
<2372=2374,2373
<2375=2376
<2376=2378,2377
<2379=2380
<2380=2381
<2381=2388,2387,2382
<2382=2386,2383
<2383=2385,2384
<2389=2391,2390
<2392=2393
<2393=2395,2394
<2396=2397
<2397=2398
<2398=2403,2402,2399
<2399=2401,2400
<2404=2405
<2405=2410,2409,2406
<2406=2408,2407
<2426=2432,2431,2427
<2427=2428
<2428=2430,2429
<2432=2498,2491,2482,2478,2469,2442,2438,2437,2436,2435,2433
<2433=2434
<2438=2439
<2439=2441,2440
<2442=2461,2457,2454,2443
<2443=2444
<2444=2445
<2445=2451,2446
<2446=2450,2447
<2447=2449,2448
<2451=2453,2452
<2454=2456,2455
<2457=2458
<2458=2460,2459
<2461=2462
<2462=2463
<2463=2468,2467,2464
<2464=2466,2465
<2469=2470
<2470=2474,2471
<2471=2472
<2472=2473
<2474=2475
<2475=2477,2476
<2478=2479
<2479=2481,2480
<2482=2483
<2483=2489,2484
<2484=2487,2485
<2485=2486
<2487=2488
<2489=2490
<2491=2492
<2492=2497,2496,2493
<2493=2495,2494
<2498=2499
<2499=2511,2510,2500
<2500=2509,2501
<2501=2508,2502
<2502=2504,2503
<2504=2505
<2505=2507,2506
<2527=2533,2532,2528
<2528=2529
<2529=2531,2530
<2533=2604,2569,2534
<2534=2558,2547,2544,2535
<2535=2536
<2536=2537
<2537=2541,2538
<2538=2540,2539
<2541=2543,2542
<2544=2546,2545
<2547=2548
<2548=2557,2549
<2549=2551,2550
<2551=2552
<2552=2554,2553
<2554=2556,2555
<2558=2559
<2559=2568,2560
<2560=2562,2561
<2562=2563
<2563=2565,2564
<2565=2567,2566
<2569=2593,2582,2579,2570
<2570=2571
<2571=2572
<2572=2576,2573
<2573=2575,2574
<2576=2578,2577
<2579=2581,2580
<2582=2583
<2583=2592,2584
<2584=2586,2585
<2586=2587
<2587=2589,2588
<2589=2591,2590
<2593=2594
<2594=2603,2595
<2595=2597,2596
<2597=2598
<2598=2600,2599
<2600=2602,2601
<2604=2605
<2605=2607,2606
<2618=2651,2650,2619
<2619=2647,2644,2641,2638,2635,2632,2629,2626,2623,2620
<2620=2622,2621
<2623=2625,2624
<2626=2628,2627
<2629=2631,2630
<2632=2634,2633
<2635=2637,2636
<2638=2640,2639
<2641=2643,2642
<2644=2646,2645
<2647=2649,2648
<2651=3097,3082,3073,3050,3027,3006,2985,2705,2695,2691,2654,2652
<2652=2653
<2654=2655
<2655=2690,2656
<2656=2688,2657
<2657=2686,2684,2682,2680,2678,2676,2674,2672,2670,2668,2666,2664,2662,2660,2658
<2658=2659
<2660=2661
<2662=2663
<2664=2665
<2666=2667
<2668=2669
<2670=2671
<2672=2673
<2674=2675
<2676=2677
<2678=2679
<2680=2681
<2682=2683
<2684=2685
<2686=2687
<2688=2689
<2691=2692
<2692=2694,2693
<2695=2696
<2696=2704,2703,2702,2697
<2697=2701,2698
<2698=2700,2699
<2705=2977,2973,2970,2706
<2706=2957,2944,2931,2903,2875,2793,2775,2757,2750,2743,2736,2707
<2707=2708
<2708=2733,2709
<2709=2731,2710
<2710=2729,2727,2723,2719,2717,2715,2713,2711
<2711=2712
<2713=2714
<2715=2716
<2717=2718
<2719=2720
<2720=2722,2721
<2723=2724
<2724=2726,2725
<2727=2728
<2729=2730
<2731=2732
<2733=2735,2734
<2736=2737
<2737=2742,2741,2738
<2738=2740,2739
<2743=2744
<2744=2749,2748,2745
<2745=2747,2746
<2750=2751
<2751=2756,2755,2752
<2752=2754,2753
<2757=2758
<2758=2774,2773,2759
<2759=2772,2760
<2760=2770,2761
<2761=2766,2762
<2762=2763
<2763=2765,2764
<2766=2767
<2767=2769,2768
<2770=2771
<2775=2776
<2776=2792,2791,2777
<2777=2790,2778
<2778=2788,2779
<2779=2784,2780
<2780=2781
<2781=2783,2782
<2784=2785
<2785=2787,2786
<2788=2789
<2793=2873,2794
<2794=2864,2855,2846,2837,2816,2795
<2795=2796
<2796=2810,2797
<2797=2808,2806,2802,2798
<2798=2799
<2799=2801,2800
<2802=2803
<2803=2805,2804
<2806=2807
<2808=2809
<2810=2811
<2811=2813,2812
<2813=2815,2814
<2816=2817
<2817=2831,2818
<2818=2829,2827,2823,2819
<2819=2820
<2820=2822,2821
<2823=2824
<2824=2826,2825
<2827=2828
<2829=2830
<2831=2832
<2832=2834,2833
<2834=2836,2835
<2837=2838
<2838=2845,2844,2839
<2839=2843,2840
<2840=2842,2841
<2846=2847
<2847=2854,2853,2848
<2848=2852,2849
<2849=2851,2850
<2855=2856
<2856=2863,2862,2857
<2857=2861,2858
<2858=2860,2859
<2864=2865
<2865=2872,2871,2866
<2866=2870,2867
<2867=2869,2868
<2873=2874
<2875=2876
<2876=2902,2901,2900,2877
<2877=2899,2878
<2878=2889,2879
<2879=2881,2880
<2881=2887,2882
<2882=2885,2883
<2883=2884
<2885=2886
<2887=2888
<2889=2891,2890
<2891=2897,2892
<2892=2895,2893
<2893=2894
<2895=2896
<2897=2898
<2903=2904
<2904=2930,2929,2928,2905
<2905=2927,2906
<2906=2917,2907
<2907=2909,2908
<2909=2915,2910
<2910=2913,2911
<2911=2912
<2913=2914
<2915=2916
<2917=2919,2918
<2919=2925,2920
<2920=2923,2921
<2921=2922
<2923=2924
<2925=2926
<2931=2932
<2932=2943,2942,2933
<2933=2941,2934
<2934=2936,2935
<2936=2938,2937
<2938=2940,2939
<2944=2945
<2945=2956,2955,2946
<2946=2954,2947
<2947=2949,2948
<2949=2951,2950
<2951=2953,2952
<2957=2959,2958
<2959=2960
<2960=2962,2961
<2962=2964,2963
<2964=2965
<2965=2967,2966
<2967=2969,2968
<2970=2972,2971
<2973=2974
<2974=2976,2975
<2977=2978
<2978=2979
<2979=2984,2983,2980
<2980=2982,2981
<2985=2986
<2986=3004,2987
<2987=2998,2994,2988
<2988=2989
<2989=2991,2990
<2991=2993,2992
<2994=2995
<2995=2997,2996
<2998=2999
<2999=3001,3000
<3001=3003,3002
<3004=3005
<3006=3007
<3007=3025,3008
<3008=3019,3015,3009
<3009=3010
<3010=3012,3011
<3012=3014,3013
<3015=3016
<3016=3018,3017
<3019=3020
<3020=3022,3021
<3022=3024,3023
<3025=3026
<3027=3028
<3028=3048,3029
<3029=3042,3036,3030
<3030=3031
<3031=3033,3032
<3033=3035,3034
<3036=3037
<3037=3039,3038
<3039=3041,3040
<3042=3043
<3043=3045,3044
<3045=3047,3046
<3048=3049
<3050=3051
<3051=3071,3052
<3052=3065,3059,3053
<3053=3054
<3054=3056,3055
<3056=3058,3057
<3059=3060
<3060=3062,3061
<3062=3064,3063
<3065=3066
<3066=3068,3067
<3068=3070,3069
<3071=3072
<3073=3074
<3074=3081,3080,3075
<3075=3079,3076
<3076=3078,3077
<3082=3083
<3083=3095,3084
<3084=3093,3091,3085
<3085=3086
<3086=3088,3087
<3088=3090,3089
<3091=3092
<3093=3094
<3095=3096
<3097=3098
<3098=3110,3099
<3099=3108,3106,3100
<3100=3101
<3101=3103,3102
<3103=3105,3104
<3106=3107
<3108=3109
<3110=3111
<3175=3196,3195,3176
<3176=3192,3189,3186,3183,3180,3177
<3177=3179,3178
<3180=3182,3181
<3183=3185,3184
<3186=3188,3187
<3189=3190,3191
<3192=3193,3194
<3196=11191,11182,11156,11151,11127,11103,11094,11085,11073,11069,11041,11027,10976,10930,10917,10904,10900,10896,10892,10853,10814,10804,10794,10784,10774,10764,10754,10744,10734,10724,10684,10644,10604,10576,10548,10537,10526,10496,10489,10482,10460,10453,10446,10439,10432,10425,10418,10411,10404,10391,10377,10370,10361,10352,10334,10316,10307,10298,9281,9276,9263,9254,9241,9232,9225,9218,9209,9195,9178,9161,9154,9145,9141,9104,9058,9032,9023,9016,9006,8996,8986,8976,8966,8956,8946,8936,8926,8916,8906,8896,8886,8876,8866,8856,8846,8836,8826,8816,8806,8796,8786,8776,8766,8756,8746,8736,8726,8716,8706,8666,8661,8654,8624,8610,8546,8545,8544,8543,8541,8534,8434,8427,8397,8392,8369,8358,8349,8342,8142,8137,8114,8103,8094,8085,8078,8074,8067,7824,7823,7822,7821,7819,7818,7817,7816,7814,7803,7796,7792,7788,7784,7751,7750,7749,7748,7747,7746,7745,7744,7743,7742,7741,7740,7739,7738,7737,7736,7735,7734,7733,7732,7731,7730,7729,7728,7727,7726,7725,7724,7723,7722,7721,7720,7719,7718,7717,7716,7715,7714,7713,7712,7711,7710,7709,7708,7707,7706,7705,7704,7703,7702,7701,7700,7699,7698,7697,7696,7695,7694,7693,7692,7691,7690,7689,7688,7687,7686,7685,7684,7683,7682,7681,7680,7679,7678,7677,7676,7675,7674,7673,7672,7671,7664,7659,7654,7635,7608,7592,7587,7564,7547,7542,7515,7496,7399,7386,7360,7341,7340,7339,7338,7310,7299,7285,7256,7227,7182,7166,7150,7134,7130,7123,7119,6881,6865,6858,6847,6808,6797,6786,6775,6764,6753,6740,6730,6716,6706,6690,6674,6664,6654,6644,6630,6620,6604,6588,6578,6568,6531,6512,6439,6309,6298,6271,6260,6233,6214,6201,6188,6175,6167,6159,6151,6143,6135,6127,6119,6111,6103,6092,6083,6072,6051,6044,6012,6001,5988,5973,5958,5943,5890,5883,5872,5865,5852,5835,5828,5738,5719,5712,5425,5415,5405,5395,5385,5375,5365,5355,5345,5335,5325,5315,5305,5295,5285,5275,5265,5255,5245,5235,5225,5215,5205,5195,5185,5166,5139,5126,5103,5086,5059,5040,4943,4930,4904,4827,4816,4787,4758,4713,4697,4681,4665,4628,4609,4536,4406,4379,4352,4333,4320,4307,4294,4286,4278,4270,4262,4254,4246,4238,4230,4222,4201,4194,4162,4149,4145,4139,4133,4080,3990,3983,3976,3965,3956,3839,3816,3807,3796,3773,3750,3727,3720,3709,3702,3689,3672,3653,3646,3372,3367,3353,3340,3317,3316,3315,3314,3312,3311,3310,3309,3307,3306,3305,3304,3302,3301,3300,3299,3297,3296,3295,3294,3292,3291,3290,3289,3287,3286,3285,3284,3282,3281,3280,3197,3199,3204,3213,3222,3224,3225,3226,3227,3229,3230,3231,3232,3234,3235,3236,3237,3239,3240,3241,3242,3244,3245,3246,3247,3249,3250,3251,3252,3254,3255,3256,3257,3259,3260,3261,3262,3264,3265,3266,3267,3269,3270,3271,3272,3274,3275,3276,3277,3279
<3197=3198
<3199=3202,3200
<3200=3201
<3202=3203
<3204=3205
<3205=3211,3206
<3206=3207
<3207=3208
<3208=3210,3209
<3211=3212
<3213=3214
<3214=3220,3215
<3215=3216
<3216=3217
<3217=3219,3218
<3220=3221
<3222=3223
<3227=3228
<3232=3233
<3237=3238
<3242=3243
<3247=3248
<3252=3253
<3257=3258
<3262=3263
<3267=3268
<3272=3273
<3277=3278
<3282=3283
<3287=3288
<3292=3293
<3297=3298
<3302=3303
<3307=3308
<3312=3313
<3317=3318
<3318=3338,3319
<3319=3336,3334,3332,3330,3326,3324,3322,3320
<3320=3321
<3322=3323
<3324=3325
<3326=3327
<3327=3329,3328
<3330=3331
<3332=3333
<3334=3335
<3336=3337
<3338=3339
<3340=3341
<3341=3351,3342
<3342=3349,3347,3345,3343
<3343=3344
<3345=3346
<3347=3348
<3349=3350
<3351=3352
<3353=3354
<3354=3366,3365,3364,3355
<3355=3363,3356
<3356=3360,3357
<3357=3359,3358
<3360=3362,3361
<3367=3368
<3368=3371,3370,3369
<3372=3642,3373
<3373=3625,3393,3387,3374
<3374=3375
<3375=3384,3376
<3376=3382,3377
<3377=3378
<3378=3379
<3379=3381,3380
<3382=3383
<3384=3386,3385
<3387=3388
<3388=3390,3389
<3390=3392,3391
<3393=3623,3473,3394
<3394=3395
<3395=3467,3461,3455,3396
<3396=3447,3443,3440,3397
<3397=3427,3414,3406,3398
<3398=3399
<3399=3401,3400
<3401=3403,3402
<3403=3405,3404
<3406=3407
<3407=3409,3408
<3409=3411,3410
<3411=3413,3412
<3414=3415
<3415=3426,3425,3416
<3416=3424,3417
<3417=3419,3418
<3419=3421,3420
<3421=3423,3422
<3427=3428
<3428=3439,3438,3429
<3429=3437,3430
<3430=3432,3431
<3432=3434,3433
<3434=3436,3435
<3440=3442,3441
<3443=3444
<3444=3446,3445
<3447=3448
<3448=3449
<3449=3454,3453,3450
<3450=3452,3451
<3455=3456
<3456=3458,3457
<3458=3460,3459
<3461=3462
<3462=3464,3463
<3464=3466,3465
<3467=3468
<3468=3470,3469
<3470=3472,3471
<3473=3616,3609,3602,3565,3560,3549,3543,3533,3489,3488,3487,3486,3484,3483,3482,3481,3479,3478,3477,3476,3474
<3474=3475
<3479=3480
<3484=3485
<3489=3525,3521,3518,3490
<3490=3503,3491
<3491=3492
<3492=3498,3493
<3493=3497,3494
<3494=3496,3495
<3498=3500,3499
<3500=3502,3501
<3503=3504
<3504=3513,3505
<3505=3511,3506
<3506=3507
<3507=3508
<3508=3510,3509
<3511=3512
<3513=3515,3514
<3515=3517,3516
<3518=3520,3519
<3521=3522
<3522=3524,3523
<3525=3526
<3526=3527
<3527=3532,3531,3528
<3528=3530,3529
<3533=3534
<3534=3540,3535
<3535=3537,3536
<3537=3539,3538
<3540=3542,3541
<3543=3544
<3544=3546,3545
<3546=3548,3547
<3549=3550
<3550=3558,3551
<3551=3556,3554,3552
<3552=3553
<3554=3555
<3556=3557
<3558=3559
<3560=3561
<3561=3563,3562
<3563=3564
<3565=3594,3590,3587,3566
<3566=3577,3567
<3567=3568
<3568=3574,3569
<3569=3571,3570
<3571=3573,3572
<3574=3576,3575
<3577=3578
<3578=3584,3579
<3579=3583,3580
<3580=3582,3581
<3584=3586,3585
<3587=3589,3588
<3590=3591
<3591=3593,3592
<3594=3595
<3595=3596
<3596=3601,3600,3597
<3597=3599,3598
<3602=3603
<3603=3608,3607,3604
<3604=3606,3605
<3609=3610
<3610=3615,3614,3611
<3611=3613,3612
<3616=3617
<3617=3622,3621,3618
<3618=3620,3619
<3623=3624
<3625=3626
<3626=3640,3627
<3627=3636,3634,3628
<3628=3629
<3629=3631,3630
<3631=3633,3632
<3634=3635
<3636=3637
<3637=3639,3638
<3640=3641
<3642=3643
<3643=3645,3644
<3646=3647
<3647=3651,3648
<3648=3649
<3649=3650
<3651=3652
<3653=3654
<3654=3670,3655
<3655=3668,3664,3660,3656
<3656=3657
<3657=3659,3658
<3660=3661
<3661=3663,3662
<3664=3665
<3665=3667,3666
<3668=3669
<3670=3671
<3672=3673
<3673=3687,3674
<3674=3685,3683,3681,3679,3677,3675
<3675=3676
<3677=3678
<3679=3680
<3681=3682
<3683=3684
<3685=3686
<3687=3688
<3689=3698,3694,3690
<3690=3693,3692,3691
<3694=3697,3696,3695
<3698=3701,3700,3699
<3702=3703
<3703=3707,3704
<3704=3705
<3705=3706
<3707=3708
<3709=3710
<3710=3718,3711
<3711=3716,3714,3712
<3712=3713
<3714=3715
<3716=3717
<3718=3719
<3720=3721
<3721=3725,3722
<3722=3723
<3723=3724
<3725=3726
<3727=3728
<3728=3748,3729
<3729=3744,3736,3730
<3730=3731
<3731=3735,3732
<3732=3734,3733
<3736=3737
<3737=3743,3738
<3738=3740,3739
<3740=3742,3741
<3744=3745
<3745=3747,3746
<3748=3749
<3750=3751
<3751=3771,3752
<3752=3767,3759,3753
<3753=3754
<3754=3758,3755
<3755=3757,3756
<3759=3760
<3760=3766,3761
<3761=3763,3762
<3763=3765,3764
<3767=3768
<3768=3770,3769
<3771=3772
<3773=3774
<3774=3794,3775
<3775=3790,3782,3776
<3776=3777
<3777=3781,3778
<3778=3780,3779
<3782=3783
<3783=3789,3784
<3784=3786,3785
<3786=3788,3787
<3790=3791
<3791=3793,3792
<3794=3795
<3796=3797
<3797=3805,3798
<3798=3803,3801,3799
<3799=3800
<3801=3802
<3803=3804
<3805=3806
<3807=3808
<3808=3815,3814,3809
<3809=3813,3810
<3810=3812,3811
<3816=3817
<3817=3837,3818
<3818=3835,3833,3831,3829,3825,3821,3819
<3819=3820
<3821=3822
<3822=3824,3823
<3825=3826
<3826=3828,3827
<3829=3830
<3831=3832
<3833=3834
<3835=3836
<3837=3838
<3839=3948,3944,3941,3840
<3840=3916,3891,3866,3841
<3841=3842
<3842=3858,3843
<3843=3845,3844
<3845=3853,3846
<3846=3848,3847
<3848=3850,3849
<3850=3852,3851
<3853=3855,3854
<3855=3857,3856
<3858=3864,3859
<3859=3860
<3860=3861
<3861=3863,3862
<3864=3865
<3866=3867
<3867=3883,3868
<3868=3870,3869
<3870=3878,3871
<3871=3873,3872
<3873=3875,3874
<3875=3877,3876
<3878=3880,3879
<3880=3882,3881
<3883=3889,3884
<3884=3885
<3885=3886
<3886=3888,3887
<3889=3890
<3891=3892
<3892=3908,3893
<3893=3895,3894
<3895=3903,3896
<3896=3898,3897
<3898=3900,3899
<3900=3902,3901
<3903=3905,3904
<3905=3907,3906
<3908=3914,3909
<3909=3910
<3910=3911
<3911=3913,3912
<3914=3915
<3916=3917
<3917=3933,3918
<3918=3920,3919
<3920=3928,3921
<3921=3923,3922
<3923=3925,3924
<3925=3927,3926
<3928=3930,3929
<3930=3932,3931
<3933=3939,3934
<3934=3935
<3935=3936
<3936=3938,3937
<3939=3940
<3941=3943,3942
<3944=3945
<3945=3947,3946
<3948=3949
<3949=3950
<3950=3955,3954,3951
<3951=3953,3952
<3956=3957
<3957=3964,3963,3958
<3958=3962,3959
<3959=3961,3960
<3965=3966
<3966=3975,3974,3967
<3967=3973,3968
<3968=3972,3969
<3969=3971,3970
<3976=3977
<3977=3982,3981,3978
<3978=3980,3979
<3983=3984
<3984=3989,3988,3985
<3985=3987,3986
<3990=4072,4068,4065,3991
<3991=3992
<3992=4055,4051,4048,3993
<3993=4035,4022,3994
<3994=4011,3995
<3995=4000,3996
<3996=3997
<3997=3999,3998
<4000=4001
<4001=4009,4002
<4002=4007,4005,4003
<4003=4004
<4005=4006
<4007=4008
<4009=4010
<4011=4012
<4012=4014,4013
<4014=4020,4015
<4015=4016
<4016=4017
<4017=4019,4018
<4020=4021
<4022=4023
<4023=4034,4033,4024
<4024=4032,4025
<4025=4031,4026
<4026=4028,4027
<4028=4030,4029
<4035=4036
<4036=4047,4046,4037
<4037=4045,4038
<4038=4044,4039
<4039=4041,4040
<4041=4043,4042
<4048=4050,4049
<4051=4052
<4052=4054,4053
<4055=4056
<4056=4057
<4057=4064,4063,4058
<4058=4062,4059
<4059=4061,4060
<4065=4067,4066
<4068=4069
<4069=4071,4070
<4072=4073
<4073=4074
<4074=4079,4078,4075
<4075=4077,4076
<4080=4081
<4081=4132,4131,4130,4082
<4082=4129,4083
<4083=4124,4119,4114,4109,4104,4099,4094,4089,4084
<4084=4088,4085
<4085=4087,4086
<4089=4093,4090
<4090=4092,4091
<4094=4098,4095
<4095=4097,4096
<4099=4103,4100
<4100=4102,4101
<4104=4108,4105
<4105=4107,4106
<4109=4113,4110
<4110=4112,4111
<4114=4118,4115
<4115=4117,4116
<4119=4123,4120
<4120=4122,4121
<4124=4128,4125
<4125=4127,4126
<4133=4134
<4134=4138,4135
<4135=4137,4136
<4139=4140
<4140=4144,4141
<4141=4143,4142
<4145=4146
<4146=4148,4147
<4149=4150
<4150=4160,4151
<4151=4156,4154,4152
<4152=4153
<4154=4155
<4156=4157
<4157=4159,4158
<4160=4161
<4162=4186,4180,4177,4163
<4163=4164
<4164=4165
<4165=4175,4166
<4166=4173,4171,4167
<4167=4168
<4168=4170,4169
<4171=4172
<4173=4174
<4175=4176
<4177=4179,4178
<4180=4181
<4181=4185,4182
<4182=4184,4183
<4186=4187
<4187=4188
<4188=4193,4192,4189
<4189=4191,4190
<4194=4195
<4195=4199,4196
<4196=4197
<4197=4198
<4199=4200
<4201=4202
<4202=4220,4203
<4203=4216,4212,4210,4208,4206,4204
<4204=4205
<4206=4207
<4208=4209
<4210=4211
<4212=4213
<4213=4215,4214
<4216=4217
<4217=4219,4218
<4220=4221
<4222=4223
<4223=4227,4224
<4224=4226,4225
<4227=4229,4228
<4230=4231
<4231=4235,4232
<4232=4234,4233
<4235=4237,4236
<4238=4239
<4239=4243,4240
<4240=4242,4241
<4243=4245,4244
<4246=4247
<4247=4251,4248
<4248=4250,4249
<4251=4253,4252
<4254=4255
<4255=4259,4256
<4256=4258,4257
<4259=4261,4260
<4262=4263
<4263=4267,4264
<4264=4266,4265
<4267=4269,4268
<4270=4271
<4271=4275,4272
<4272=4274,4273
<4275=4277,4276
<4278=4279
<4279=4283,4280
<4280=4282,4281
<4283=4285,4284
<4286=4287
<4287=4291,4288
<4288=4290,4289
<4291=4293,4292
<4294=4295
<4295=4306,4305,4296
<4296=4304,4297
<4297=4303,4298
<4298=4302,4299
<4299=4301,4300
<4307=4308
<4308=4319,4318,4309
<4309=4317,4310
<4310=4316,4311
<4311=4315,4312
<4312=4314,4313
<4320=4321
<4321=4332,4331,4322
<4322=4330,4323
<4323=4329,4324
<4324=4328,4325
<4325=4327,4326
<4333=4334
<4334=4350,4335
<4335=4348,4342,4336
<4336=4337
<4337=4339,4338
<4339=4341,4340
<4342=4343
<4343=4345,4344
<4345=4347,4346
<4348=4349
<4350=4351
<4352=4353
<4353=4377,4354
<4354=4373,4369,4365,4361,4359,4357,4355
<4355=4356
<4357=4358
<4359=4360
<4361=4362
<4362=4364,4363
<4365=4366
<4366=4368,4367
<4369=4370
<4370=4372,4371
<4373=4374
<4374=4376,4375
<4377=4378
<4379=4380
<4380=4404,4381
<4381=4400,4396,4392,4388,4386,4384,4382
<4382=4383
<4384=4385
<4386=4387
<4388=4389
<4389=4391,4390
<4392=4393
<4393=4395,4394
<4396=4397
<4397=4399,4398
<4400=4401
<4401=4403,4402
<4404=4405
<4406=4528,4524,4521,4407
<4407=4516,4501,4470,4439,4408
<4408=4409
<4409=4437,4410
<4410=4421,4417,4411
<4411=4412
<4412=4414,4413
<4414=4416,4415
<4417=4418
<4418=4420,4419
<4421=4422
<4422=4436,4423
<4423=4427,4424
<4424=4426,4425
<4427=4431,4428
<4428=4430,4429
<4431=4433,4432
<4433=4435,4434
<4437=4438
<4439=4440
<4440=4468,4441
<4441=4452,4448,4442
<4442=4443
<4443=4445,4444
<4445=4447,4446
<4448=4449
<4449=4451,4450
<4452=4453
<4453=4467,4454
<4454=4458,4455
<4455=4457,4456
<4458=4462,4459
<4459=4461,4460
<4462=4464,4463
<4464=4466,4465
<4468=4469
<4470=4471
<4471=4499,4472
<4472=4483,4479,4473
<4473=4474
<4474=4476,4475
<4476=4478,4477
<4479=4480
<4480=4482,4481
<4483=4484
<4484=4498,4485
<4485=4489,4486
<4486=4488,4487
<4489=4493,4490
<4490=4492,4491
<4493=4495,4494
<4495=4497,4496
<4499=4500
<4501=4502
<4502=4514,4503
<4503=4512,4506,4504
<4504=4505
<4506=4507
<4507=4511,4508
<4508=4510,4509
<4512=4513
<4514=4515
<4516=4517
<4517=4520,4519,4518
<4521=4523,4522
<4524=4525
<4525=4527,4526
<4528=4529
<4529=4530
<4530=4535,4534,4531
<4531=4533,4532
<4536=4601,4597,4594,4537
<4537=4569,4538
<4538=4539
<4539=4567,4540
<4540=4555,4547,4541
<4541=4542
<4542=4546,4543
<4543=4545,4544
<4547=4548
<4548=4554,4549
<4549=4551,4550
<4551=4553,4552
<4555=4556
<4556=4566,4557
<4557=4559,4558
<4559=4563,4560
<4560=4562,4561
<4563=4565,4564
<4567=4568
<4569=4570
<4570=4592,4571
<4571=4584,4578,4572
<4572=4573
<4573=4577,4574
<4574=4576,4575
<4578=4579
<4579=4583,4580
<4580=4582,4581
<4584=4585
<4585=4591,4586
<4586=4590,4587
<4587=4589,4588
<4592=4593
<4594=4596,4595
<4597=4598
<4598=4600,4599
<4601=4602
<4602=4603
<4603=4608,4607,4604
<4604=4606,4605
<4609=4610
<4610=4626,4611
<4611=4624,4622,4612
<4612=4613
<4613=4619,4614
<4614=4618,4615
<4615=4617,4616
<4619=4621,4620
<4622=4623
<4624=4625
<4626=4627
<4628=4629
<4629=4664,4630
<4630=4662,4631
<4631=4660,4658,4656,4654,4652,4650,4648,4646,4644,4642,4640,4638,4636,4634,4632
<4632=4633
<4634=4635
<4636=4637
<4638=4639
<4640=4641
<4642=4643
<4644=4645
<4646=4647
<4648=4649
<4650=4651
<4652=4653
<4654=4655
<4656=4657
<4658=4659
<4660=4661
<4662=4663
<4665=4666
<4666=4674,4667
<4667=4669,4668
<4669=4671,4670
<4671=4673,4672
<4674=4676,4675
<4676=4678,4677
<4678=4680,4679
<4681=4682
<4682=4690,4683
<4683=4685,4684
<4685=4687,4686
<4687=4689,4688
<4690=4692,4691
<4692=4694,4693
<4694=4696,4695
<4697=4698
<4698=4706,4699
<4699=4701,4700
<4701=4703,4702
<4703=4705,4704
<4706=4708,4707
<4708=4710,4709
<4710=4712,4711
<4713=4750,4746,4743,4714
<4714=4715
<4715=4741,4716
<4716=4739,4737,4735,4733,4727,4723,4717
<4717=4718
<4718=4720,4719
<4720=4722,4721
<4723=4724
<4724=4726,4725
<4727=4728
<4728=4730,4729
<4730=4732,4731
<4733=4734
<4735=4736
<4737=4738
<4739=4740
<4741=4742
<4743=4745,4744
<4746=4747
<4747=4749,4748
<4750=4751
<4751=4752
<4752=4757,4756,4753
<4753=4755,4754
<4758=4759
<4759=4785,4760
<4760=4783,4781,4779,4777,4771,4767,4761
<4761=4762
<4762=4764,4763
<4764=4766,4765
<4767=4768
<4768=4770,4769
<4771=4772
<4772=4774,4773
<4774=4776,4775
<4777=4778
<4779=4780
<4781=4782
<4783=4784
<4785=4786
<4787=4788
<4788=4814,4789
<4789=4812,4810,4808,4806,4800,4796,4790
<4790=4791
<4791=4793,4792
<4793=4795,4794
<4796=4797
<4797=4799,4798
<4800=4801
<4801=4803,4802
<4803=4805,4804
<4806=4807
<4808=4809
<4810=4811
<4812=4813
<4814=4815
<4816=4817
<4817=4826,4818
<4818=4824,4819
<4819=4822,4820
<4820=4821
<4822=4823
<4824=4825
<4827=4902,4882,4828
<4828=4829
<4829=4855,4830
<4830=4831
<4831=4853,4832
<4832=4851,4849,4843,4839,4833
<4833=4834
<4834=4836,4835
<4836=4838,4837
<4839=4840
<4840=4842,4841
<4843=4844
<4844=4846,4845
<4846=4848,4847
<4849=4850
<4851=4852
<4853=4854
<4855=4856
<4856=4880,4857
<4857=4878,4876,4874,4872,4866,4864,4858
<4858=4859
<4859=4861,4860
<4861=4863,4862
<4864=4865
<4866=4867
<4867=4869,4868
<4869=4871,4870
<4872=4873
<4874=4875
<4876=4877
<4878=4879
<4880=4881
<4882=4883
<4883=4884
<4884=4900,4885
<4885=4894,4892,4886
<4886=4887
<4887=4889,4888
<4889=4891,4890
<4892=4893
<4894=4895
<4895=4897,4896
<4897=4899,4898
<4900=4901
<4902=4903
<4904=4905
<4905=4923,4906
<4906=4916,4907
<4907=4909,4908
<4909=4911,4910
<4911=4913,4912
<4913=4915,4914
<4916=4918,4917
<4918=4920,4919
<4920=4922,4921
<4923=4925,4924
<4925=4927,4926
<4927=4929,4928
<4930=4931
<4931=4941,4932
<4932=4939,4933
<4933=4934
<4934=4936,4935
<4936=4938,4937
<4939=4940
<4941=4942
<4943=5032,5028,5025,4944
<4944=5020,4997,4970,4945
<4945=4946
<4946=4968,4947
<4947=4966,4964,4958,4954,4948
<4948=4949
<4949=4951,4950
<4951=4953,4952
<4954=4955
<4955=4957,4956
<4958=4959
<4959=4961,4960
<4961=4963,4962
<4964=4965
<4966=4967
<4968=4969
<4970=4971
<4971=4995,4972
<4972=4993,4991,4989,4987,4981,4979,4973
<4973=4974
<4974=4976,4975
<4976=4978,4977
<4979=4980
<4981=4982
<4982=4984,4983
<4984=4986,4985
<4987=4988
<4989=4990
<4991=4992
<4993=4994
<4995=4996
<4997=4998
<4998=5018,4999
<4999=5016,5014,5012,5010,5004,5002,5000
<5000=5001
<5002=5003
<5004=5005
<5005=5007,5006
<5007=5009,5008
<5010=5011
<5012=5013
<5014=5015
<5016=5017
<5018=5019
<5020=5021
<5021=5024,5023,5022
<5025=5027,5026
<5028=5029
<5029=5031,5030
<5032=5033
<5033=5034
<5034=5039,5038,5035
<5035=5037,5036
<5040=5041
<5041=5057,5042
<5042=5051,5049,5043
<5043=5044
<5044=5046,5045
<5046=5048,5047
<5049=5050
<5051=5052
<5052=5054,5053
<5054=5056,5055
<5057=5058
<5059=5060
<5060=5084,5061
<5061=5082,5080,5078,5076,5070,5064,5062
<5062=5063
<5064=5065
<5065=5067,5066
<5067=5069,5068
<5070=5071
<5071=5073,5072
<5073=5075,5074
<5076=5077
<5078=5079
<5080=5081
<5082=5083
<5084=5085
<5086=5087
<5087=5101,5088
<5088=5099,5097,5095,5091,5089
<5089=5090
<5091=5092
<5092=5094,5093
<5095=5096
<5097=5098
<5099=5100
<5101=5102
<5103=5104
<5104=5124,5105
<5105=5122,5120,5118,5116,5110,5108,5106
<5106=5107
<5108=5109
<5110=5111
<5111=5113,5112
<5113=5115,5114
<5116=5117
<5118=5119
<5120=5121
<5122=5123
<5124=5125
<5126=5127
<5127=5138,5128
<5128=5136,5129
<5129=5134,5132,5130
<5130=5131
<5132=5133
<5134=5135
<5136=5137
<5139=5140
<5140=5164,5141
<5141=5162,5160,5158,5156,5150,5144,5142
<5142=5143
<5144=5145
<5145=5147,5146
<5147=5149,5148
<5150=5151
<5151=5153,5152
<5153=5155,5154
<5156=5157
<5158=5159
<5160=5161
<5162=5163
<5164=5165
<5166=5167
<5167=5183,5168
<5168=5181,5175,5169
<5169=5170
<5170=5172,5171
<5172=5174,5173
<5175=5176
<5176=5178,5177
<5178=5180,5179
<5181=5182
<5183=5184
<5185=5186
<5186=5188,5187
<5188=5190,5189
<5190=5192,5191
<5192=5194,5193
<5195=5196
<5196=5198,5197
<5198=5200,5199
<5200=5202,5201
<5202=5204,5203
<5205=5206
<5206=5208,5207
<5208=5210,5209
<5210=5212,5211
<5212=5214,5213
<5215=5216
<5216=5218,5217
<5218=5220,5219
<5220=5222,5221
<5222=5224,5223
<5225=5226
<5226=5228,5227
<5228=5230,5229
<5230=5232,5231
<5232=5234,5233
<5235=5236
<5236=5238,5237
<5238=5240,5239
<5240=5242,5241
<5242=5244,5243
<5245=5246
<5246=5248,5247
<5248=5250,5249
<5250=5252,5251
<5252=5254,5253
<5255=5256
<5256=5258,5257
<5258=5260,5259
<5260=5262,5261
<5262=5264,5263
<5265=5266
<5266=5268,5267
<5268=5270,5269
<5270=5272,5271
<5272=5274,5273
<5275=5276
<5276=5278,5277
<5278=5280,5279
<5280=5282,5281
<5282=5284,5283
<5285=5286
<5286=5288,5287
<5288=5290,5289
<5290=5292,5291
<5292=5294,5293
<5295=5296
<5296=5298,5297
<5298=5300,5299
<5300=5302,5301
<5302=5304,5303
<5305=5306
<5306=5308,5307
<5308=5310,5309
<5310=5312,5311
<5312=5314,5313
<5315=5316
<5316=5318,5317
<5318=5320,5319
<5320=5322,5321
<5322=5324,5323
<5325=5326
<5326=5328,5327
<5328=5330,5329
<5330=5332,5331
<5332=5334,5333
<5335=5336
<5336=5338,5337
<5338=5340,5339
<5340=5342,5341
<5342=5344,5343
<5345=5346
<5346=5348,5347
<5348=5350,5349
<5350=5352,5351
<5352=5354,5353
<5355=5356
<5356=5358,5357
<5358=5360,5359
<5360=5362,5361
<5362=5364,5363
<5365=5366
<5366=5368,5367
<5368=5370,5369
<5370=5372,5371
<5372=5374,5373
<5375=5376
<5376=5378,5377
<5378=5380,5379
<5380=5382,5381
<5382=5384,5383
<5385=5386
<5386=5388,5387
<5388=5390,5389
<5390=5392,5391
<5392=5394,5393
<5395=5396
<5396=5398,5397
<5398=5400,5399
<5400=5402,5401
<5402=5404,5403
<5405=5406
<5406=5408,5407
<5408=5410,5409
<5410=5412,5411
<5412=5414,5413
<5415=5416
<5416=5418,5417
<5418=5420,5419
<5420=5422,5421
<5422=5424,5423
<5425=5708,5426
<5426=5702,5685,5679,5662,5654,5646,5607,5589,5571,5553,5535,5517,5499,5481,5463,5445,5427
<5427=5428
<5428=5438,5429
<5429=5437,5430
<5430=5432,5431
<5432=5434,5433
<5434=5436,5435
<5438=5440,5439
<5440=5442,5441
<5442=5444,5443
<5445=5446
<5446=5456,5447
<5447=5455,5448
<5448=5450,5449
<5450=5452,5451
<5452=5454,5453
<5456=5458,5457
<5458=5460,5459
<5460=5462,5461
<5463=5464
<5464=5474,5465
<5465=5473,5466
<5466=5468,5467
<5468=5470,5469
<5470=5472,5471
<5474=5476,5475
<5476=5478,5477
<5478=5480,5479
<5481=5482
<5482=5492,5483
<5483=5491,5484
<5484=5486,5485
<5486=5488,5487
<5488=5490,5489
<5492=5494,5493
<5494=5496,5495
<5496=5498,5497
<5499=5500
<5500=5510,5501
<5501=5509,5502
<5502=5504,5503
<5504=5506,5505
<5506=5508,5507
<5510=5512,5511
<5512=5514,5513
<5514=5516,5515
<5517=5518
<5518=5528,5519
<5519=5527,5520
<5520=5522,5521
<5522=5524,5523
<5524=5526,5525
<5528=5530,5529
<5530=5532,5531
<5532=5534,5533
<5535=5536
<5536=5546,5537
<5537=5545,5538
<5538=5540,5539
<5540=5542,5541
<5542=5544,5543
<5546=5548,5547
<5548=5550,5549
<5550=5552,5551
<5553=5554
<5554=5564,5555
<5555=5563,5556
<5556=5558,5557
<5558=5560,5559
<5560=5562,5561
<5564=5566,5565
<5566=5568,5567
<5568=5570,5569
<5571=5572
<5572=5582,5573
<5573=5581,5574
<5574=5576,5575
<5576=5578,5577
<5578=5580,5579
<5582=5584,5583
<5584=5586,5585
<5586=5588,5587
<5589=5590
<5590=5600,5591
<5591=5599,5592
<5592=5594,5593
<5594=5596,5595
<5596=5598,5597
<5600=5602,5601
<5602=5604,5603
<5604=5606,5605
<5607=5638,5634,5631,5608
<5608=5609
<5609=5610
<5610=5621,5611
<5611=5619,5612
<5612=5613
<5613=5614
<5614=5616,5615
<5616=5618,5617
<5619=5620
<5621=5629,5622
<5622=5623
<5623=5624
<5624=5626,5625
<5626=5628,5627
<5629=5630
<5631=5633,5632
<5634=5635
<5635=5637,5636
<5638=5639
<5639=5640
<5640=5645,5644,5641
<5641=5643,5642
<5646=5647
<5647=5651,5648
<5648=5650,5649
<5651=5653,5652
<5654=5655
<5655=5659,5656
<5656=5658,5657
<5659=5661,5660
<5662=5663
<5663=5677,5664
<5664=5673,5671,5665
<5665=5666
<5666=5668,5667
<5668=5670,5669
<5671=5672
<5673=5674
<5674=5676,5675
<5677=5678
<5679=5680
<5680=5682,5681
<5682=5684,5683
<5685=5686
<5686=5700,5687
<5687=5696,5694,5688
<5688=5689
<5689=5691,5690
<5691=5693,5692
<5694=5695
<5696=5697
<5697=5699,5698
<5700=5701
<5702=5703
<5703=5705,5704
<5705=5707,5706
<5708=5709
<5709=5711,5710
<5712=5713
<5713=5717,5714
<5714=5715
<5715=5716
<5717=5718
<5719=5720
<5720=5736,5721
<5721=5734,5730,5726,5722
<5722=5723
<5723=5725,5724
<5726=5727
<5727=5729,5728
<5730=5731
<5731=5733,5732
<5734=5735
<5736=5737
<5738=5820,5816,5813,5739
<5739=5740
<5740=5803,5799,5796,5741
<5741=5783,5770,5742
<5742=5759,5743
<5743=5748,5744
<5744=5745
<5745=5747,5746
<5748=5749
<5749=5757,5750
<5750=5755,5753,5751
<5751=5752
<5753=5754
<5755=5756
<5757=5758
<5759=5760
<5760=5762,5761
<5762=5768,5763
<5763=5764
<5764=5765
<5765=5767,5766
<5768=5769
<5770=5771
<5771=5782,5781,5772
<5772=5780,5773
<5773=5779,5774
<5774=5776,5775
<5776=5778,5777
<5783=5784
<5784=5795,5794,5785
<5785=5793,5786
<5786=5792,5787
<5787=5789,5788
<5789=5791,5790
<5796=5798,5797
<5799=5800
<5800=5802,5801
<5803=5804
<5804=5805
<5805=5812,5811,5806
<5806=5810,5807
<5807=5809,5808
<5813=5815,5814
<5816=5817
<5817=5819,5818
<5820=5821
<5821=5822
<5822=5827,5826,5823
<5823=5825,5824
<5828=5829
<5829=5834,5833,5830
<5830=5832,5831
<5835=5836
<5836=5850,5837
<5837=5848,5846,5844,5842,5840,5838
<5838=5839
<5840=5841
<5842=5843
<5844=5845
<5846=5847
<5848=5849
<5850=5851
<5852=5861,5857,5853
<5853=5856,5855,5854
<5857=5860,5859,5858
<5861=5864,5863,5862
<5865=5866
<5866=5870,5867
<5867=5868
<5868=5869
<5870=5871
<5872=5873
<5873=5881,5874
<5874=5879,5877,5875
<5875=5876
<5877=5878
<5879=5880
<5881=5882
<5883=5884
<5884=5888,5885
<5885=5886
<5886=5887
<5888=5889
<5890=5891
<5891=5942,5941,5940,5892
<5892=5939,5893
<5893=5934,5929,5924,5919,5914,5909,5904,5899,5894
<5894=5898,5895
<5895=5897,5896
<5899=5903,5900
<5900=5902,5901
<5904=5908,5905
<5905=5907,5906
<5909=5913,5910
<5910=5912,5911
<5914=5918,5915
<5915=5917,5916
<5919=5923,5920
<5920=5922,5921
<5924=5928,5925
<5925=5927,5926
<5929=5933,5930
<5930=5932,5931
<5934=5938,5935
<5935=5937,5936
<5943=5944
<5944=5957,5956,5945
<5945=5955,5946
<5946=5948,5947
<5948=5954,5949
<5949=5953,5950
<5950=5952,5951
<5958=5959
<5959=5972,5971,5960
<5960=5970,5961
<5961=5963,5962
<5963=5969,5964
<5964=5968,5965
<5965=5967,5966
<5973=5974
<5974=5987,5986,5975
<5975=5985,5976
<5976=5978,5977
<5978=5984,5979
<5979=5983,5980
<5980=5982,5981
<5988=5989
<5989=5999,5990
<5990=5995,5993,5991
<5991=5992
<5993=5994
<5995=5996
<5996=5998,5997
<5999=6000
<6001=6002
<6002=6011,6010,6003
<6003=6009,6004
<6004=6008,6005
<6005=6007,6006
<6012=6036,6030,6027,6013
<6013=6014
<6014=6015
<6015=6025,6016
<6016=6023,6021,6017
<6017=6018
<6018=6020,6019
<6021=6022
<6023=6024
<6025=6026
<6027=6029,6028
<6030=6031
<6031=6035,6032
<6032=6034,6033
<6036=6037
<6037=6038
<6038=6043,6042,6039
<6039=6041,6040
<6044=6045
<6045=6049,6046
<6046=6047
<6047=6048
<6049=6050
<6051=6052
<6052=6070,6053
<6053=6066,6062,6060,6058,6056,6054
<6054=6055
<6056=6057
<6058=6059
<6060=6061
<6062=6063
<6063=6065,6064
<6066=6067
<6067=6069,6068
<6070=6071
<6072=6073
<6073=6082,6081,6074
<6074=6080,6075
<6075=6079,6076
<6076=6078,6077
<6083=6084
<6084=6091,6090,6085
<6085=6089,6086
<6086=6088,6087
<6092=6093
<6093=6102,6101,6094
<6094=6100,6095
<6095=6099,6096
<6096=6098,6097
<6103=6104
<6104=6108,6105
<6105=6107,6106
<6108=6110,6109
<6111=6112
<6112=6116,6113
<6113=6115,6114
<6116=6118,6117
<6119=6120
<6120=6124,6121
<6121=6123,6122
<6124=6126,6125
<6127=6128
<6128=6132,6129
<6129=6131,6130
<6132=6134,6133
<6135=6136
<6136=6140,6137
<6137=6139,6138
<6140=6142,6141
<6143=6144
<6144=6148,6145
<6145=6147,6146
<6148=6150,6149
<6151=6152
<6152=6156,6153
<6153=6155,6154
<6156=6158,6157
<6159=6160
<6160=6164,6161
<6161=6163,6162
<6164=6166,6165
<6167=6168
<6168=6172,6169
<6169=6171,6170
<6172=6174,6173
<6175=6176
<6176=6187,6186,6177
<6177=6185,6178
<6178=6184,6179
<6179=6183,6180
<6180=6182,6181
<6188=6189
<6189=6200,6199,6190
<6190=6198,6191
<6191=6197,6192
<6192=6196,6193
<6193=6195,6194
<6201=6202
<6202=6213,6212,6203
<6203=6211,6204
<6204=6210,6205
<6205=6209,6206
<6206=6208,6207
<6214=6215
<6215=6231,6216
<6216=6229,6223,6217
<6217=6218
<6218=6220,6219
<6220=6222,6221
<6223=6224
<6224=6226,6225
<6226=6228,6227
<6229=6230
<6231=6232
<6233=6234
<6234=6258,6235
<6235=6254,6250,6246,6242,6240,6238,6236
<6236=6237
<6238=6239
<6240=6241
<6242=6243
<6243=6245,6244
<6246=6247
<6247=6249,6248
<6250=6251
<6251=6253,6252
<6254=6255
<6255=6257,6256
<6258=6259
<6260=6261
<6261=6270,6269,6262
<6262=6268,6263
<6263=6267,6264
<6264=6266,6265
<6271=6272
<6272=6296,6273
<6273=6292,6288,6284,6280,6278,6276,6274
<6274=6275
<6276=6277
<6278=6279
<6280=6281
<6281=6283,6282
<6284=6285
<6285=6287,6286
<6288=6289
<6289=6291,6290
<6292=6293
<6293=6295,6294
<6296=6297
<6298=6299
<6299=6308,6307,6300
<6300=6306,6301
<6301=6305,6302
<6302=6304,6303
<6309=6431,6427,6424,6310
<6310=6419,6404,6373,6342,6311
<6311=6312
<6312=6340,6313
<6313=6324,6320,6314
<6314=6315
<6315=6317,6316
<6317=6319,6318
<6320=6321
<6321=6323,6322
<6324=6325
<6325=6339,6326
<6326=6330,6327
<6327=6329,6328
<6330=6334,6331
<6331=6333,6332
<6334=6336,6335
<6336=6338,6337
<6340=6341
<6342=6343
<6343=6371,6344
<6344=6355,6351,6345
<6345=6346
<6346=6348,6347
<6348=6350,6349
<6351=6352
<6352=6354,6353
<6355=6356
<6356=6370,6357
<6357=6361,6358
<6358=6360,6359
<6361=6365,6362
<6362=6364,6363
<6365=6367,6366
<6367=6369,6368
<6371=6372
<6373=6374
<6374=6402,6375
<6375=6386,6382,6376
<6376=6377
<6377=6379,6378
<6379=6381,6380
<6382=6383
<6383=6385,6384
<6386=6387
<6387=6401,6388
<6388=6392,6389
<6389=6391,6390
<6392=6396,6393
<6393=6395,6394
<6396=6398,6397
<6398=6400,6399
<6402=6403
<6404=6405
<6405=6417,6406
<6406=6415,6409,6407
<6407=6408
<6409=6410
<6410=6414,6411
<6411=6413,6412
<6415=6416
<6417=6418
<6419=6420
<6420=6423,6422,6421
<6424=6426,6425
<6427=6428
<6428=6430,6429
<6431=6432
<6432=6433
<6433=6438,6437,6434
<6434=6436,6435
<6439=6504,6500,6497,6440
<6440=6472,6441
<6441=6442
<6442=6470,6443
<6443=6458,6450,6444
<6444=6445
<6445=6449,6446
<6446=6448,6447
<6450=6451
<6451=6457,6452
<6452=6454,6453
<6454=6456,6455
<6458=6459
<6459=6469,6460
<6460=6462,6461
<6462=6466,6463
<6463=6465,6464
<6466=6468,6467
<6470=6471
<6472=6473
<6473=6495,6474
<6474=6487,6481,6475
<6475=6476
<6476=6480,6477
<6477=6479,6478
<6481=6482
<6482=6486,6483
<6483=6485,6484
<6487=6488
<6488=6494,6489
<6489=6493,6490
<6490=6492,6491
<6495=6496
<6497=6499,6498
<6500=6501
<6501=6503,6502
<6504=6505
<6505=6506
<6506=6511,6510,6507
<6507=6509,6508
<6512=6513
<6513=6529,6514
<6514=6527,6525,6515
<6515=6516
<6516=6522,6517
<6517=6521,6518
<6518=6520,6519
<6522=6524,6523
<6525=6526
<6527=6528
<6529=6530
<6531=6532
<6532=6567,6533
<6533=6565,6534
<6534=6563,6561,6559,6557,6555,6553,6551,6549,6547,6545,6543,6541,6539,6537,6535
<6535=6536
<6537=6538
<6539=6540
<6541=6542
<6543=6544
<6545=6546
<6547=6548
<6549=6550
<6551=6552
<6553=6554
<6555=6556
<6557=6558
<6559=6560
<6561=6562
<6563=6564
<6565=6566
<6568=6569
<6569=6571,6570
<6571=6573,6572
<6573=6575,6574
<6575=6577,6576
<6578=6579
<6579=6581,6580
<6581=6583,6582
<6583=6585,6584
<6585=6587,6586
<6588=6589
<6589=6597,6590
<6590=6592,6591
<6592=6594,6593
<6594=6596,6595
<6597=6599,6598
<6599=6601,6600
<6601=6603,6602
<6604=6605
<6605=6613,6606
<6606=6608,6607
<6608=6610,6609
<6610=6612,6611
<6613=6615,6614
<6615=6617,6616
<6617=6619,6618
<6620=6621
<6621=6623,6622
<6623=6625,6624
<6625=6627,6626
<6627=6629,6628
<6630=6631
<6631=6637,6632
<6632=6634,6633
<6634=6636,6635
<6637=6639,6638
<6639=6641,6640
<6641=6643,6642
<6644=6645
<6645=6647,6646
<6647=6649,6648
<6649=6651,6650
<6651=6653,6652
<6654=6655
<6655=6657,6656
<6657=6659,6658
<6659=6661,6660
<6661=6663,6662
<6664=6665
<6665=6667,6666
<6667=6669,6668
<6669=6671,6670
<6671=6673,6672
<6674=6675
<6675=6683,6676
<6676=6678,6677
<6678=6680,6679
<6680=6682,6681
<6683=6685,6684
<6685=6687,6686
<6687=6689,6688
<6690=6691
<6691=6699,6692
<6692=6694,6693
<6694=6696,6695
<6696=6698,6697
<6699=6701,6700
<6701=6703,6702
<6703=6705,6704
<6706=6707
<6707=6709,6708
<6709=6711,6710
<6711=6713,6712
<6713=6715,6714
<6716=6717
<6717=6723,6718
<6718=6720,6719
<6720=6722,6721
<6723=6725,6724
<6725=6727,6726
<6727=6729,6728
<6730=6731
<6731=6733,6732
<6733=6735,6734
<6735=6737,6736
<6737=6739,6738
<6740=6741
<6741=6752,6751,6742
<6742=6750,6743
<6743=6749,6744
<6744=6748,6745
<6745=6747,6746
<6753=6754
<6754=6763,6762,6755
<6755=6761,6756
<6756=6760,6757
<6757=6759,6758
<6764=6765
<6765=6774,6773,6766
<6766=6772,6767
<6767=6771,6768
<6768=6770,6769
<6775=6776
<6776=6785,6784,6777
<6777=6783,6778
<6778=6782,6779
<6779=6781,6780
<6786=6787
<6787=6796,6795,6788
<6788=6794,6789
<6789=6793,6790
<6790=6792,6791
<6797=6798
<6798=6807,6806,6799
<6799=6805,6800
<6800=6803,6802,6801
<6803=6804
<6808=6841,6809
<6809=6830,6821,6812,6810
<6810=6811
<6812=6813
<6813=6819,6814
<6814=6815
<6815=6816
<6816=6818,6817
<6819=6820
<6821=6822
<6822=6828,6823
<6823=6824
<6824=6825
<6825=6827,6826
<6828=6829
<6830=6831
<6831=6839,6832
<6832=6837,6835,6833
<6833=6834
<6835=6836
<6837=6838
<6839=6840
<6841=6842
<6842=6846,6843
<6843=6845,6844
<6847=6848
<6848=6857,6849
<6849=6855,6850
<6850=6851
<6851=6852
<6852=6854,6853
<6855=6856
<6858=6859
<6859=6863,6860
<6860=6861
<6861=6862
<6863=6864
<6865=6866
<6866=6879,6867
<6867=6877,6868
<6868=6869
<6869=6875,6870
<6870=6871
<6871=6872
<6872=6874,6873
<6875=6876
<6877=6878
<6879=6880
<6881=7111,7107,7104,6882
<6882=7093,7082,7066,7050,7034,7018,6980,6976,6962,6948,6941,6934,6909,6902,6891,6887,6883
<6883=6884
<6884=6886,6885
<6887=6888
<6888=6890,6889
<6891=6898,6892
<6892=6894,6893
<6894=6895
<6895=6897,6896
<6898=6899
<6899=6901,6900
<6902=6905,6903
<6903=6904
<6905=6906
<6906=6908,6907
<6909=6910
<6910=6932,6911
<6911=6930,6928,6924,6920,6918,6916,6914,6912
<6912=6913
<6914=6915
<6916=6917
<6918=6919
<6920=6921
<6921=6923,6922
<6924=6925
<6925=6927,6926
<6928=6929
<6930=6931
<6932=6933
<6934=6935
<6935=6940,6939,6936
<6936=6938,6937
<6941=6942
<6942=6947,6946,6943
<6943=6945,6944
<6948=6949
<6949=6961,6960,6950
<6950=6959,6951
<6951=6957,6952
<6952=6955,6953
<6953=6954
<6955=6956
<6957=6958
<6962=6963
<6963=6975,6974,6964
<6964=6973,6965
<6965=6971,6966
<6966=6969,6967
<6967=6968
<6969=6970
<6971=6972
<6976=6977
<6977=6979,6978
<6980=7016,6981
<6981=6999,6982
<6982=6983
<6983=6993,6984
<6984=6991,6989,6987,6985
<6985=6986
<6987=6988
<6989=6990
<6991=6992
<6993=6994
<6994=6996,6995
<6996=6998,6997
<6999=7000
<7000=7010,7001
<7001=7008,7006,7004,7002
<7002=7003
<7004=7005
<7006=7007
<7008=7009
<7010=7011
<7011=7013,7012
<7013=7015,7014
<7016=7017
<7018=7019
<7019=7033,7032,7020
<7020=7031,7021
<7021=7023,7022
<7023=7029,7024
<7024=7027,7025
<7025=7026
<7027=7028
<7029=7030
<7034=7035
<7035=7049,7048,7036
<7036=7047,7037
<7037=7039,7038
<7039=7045,7040
<7040=7043,7041
<7041=7042
<7043=7044
<7045=7046
<7050=7051
<7051=7065,7064,7052
<7052=7063,7053
<7053=7055,7054
<7055=7061,7056
<7056=7059,7057
<7057=7058
<7059=7060
<7061=7062
<7066=7067
<7067=7081,7080,7068
<7068=7079,7069
<7069=7071,7070
<7071=7077,7072
<7072=7075,7073
<7073=7074
<7075=7076
<7077=7078
<7082=7083
<7083=7092,7091,7084
<7084=7090,7085
<7085=7087,7086
<7087=7089,7088
<7093=7094
<7094=7103,7102,7095
<7095=7101,7096
<7096=7098,7097
<7098=7100,7099
<7104=7106,7105
<7107=7108
<7108=7110,7109
<7111=7112
<7112=7113
<7113=7118,7117,7114
<7114=7116,7115
<7119=7120
<7120=7122,7121
<7123=7124
<7124=7129,7128,7125
<7125=7127,7126
<7130=7131
<7131=7133,7132
<7134=7135
<7135=7143,7136
<7136=7138,7137
<7138=7140,7139
<7140=7142,7141
<7143=7145,7144
<7145=7147,7146
<7147=7149,7148
<7150=7151
<7151=7159,7152
<7152=7154,7153
<7154=7156,7155
<7156=7158,7157
<7159=7161,7160
<7161=7163,7162
<7163=7165,7164
<7166=7167
<7167=7175,7168
<7168=7170,7169
<7170=7172,7171
<7172=7174,7173
<7175=7177,7176
<7177=7179,7178
<7179=7181,7180
<7182=7219,7215,7212,7183
<7183=7184
<7184=7210,7185
<7185=7208,7206,7204,7202,7196,7192,7186
<7186=7187
<7187=7189,7188
<7189=7191,7190
<7192=7193
<7193=7195,7194
<7196=7197
<7197=7199,7198
<7199=7201,7200
<7202=7203
<7204=7205
<7206=7207
<7208=7209
<7210=7211
<7212=7214,7213
<7215=7216
<7216=7218,7217
<7219=7220
<7220=7221
<7221=7226,7225,7222
<7222=7224,7223
<7227=7228
<7228=7254,7229
<7229=7252,7250,7248,7246,7240,7236,7230
<7230=7231
<7231=7233,7232
<7233=7235,7234
<7236=7237
<7237=7239,7238
<7240=7241
<7241=7243,7242
<7243=7245,7244
<7246=7247
<7248=7249
<7250=7251
<7252=7253
<7254=7255
<7256=7257
<7257=7283,7258
<7258=7281,7279,7277,7275,7269,7265,7259
<7259=7260
<7260=7262,7261
<7262=7264,7263
<7265=7266
<7266=7268,7267
<7269=7270
<7270=7272,7271
<7272=7274,7273
<7275=7276
<7277=7278
<7279=7280
<7281=7282
<7283=7284
<7285=7286
<7286=7298,7297,7287
<7287=7296,7288
<7288=7294,7289
<7289=7292,7290
<7290=7291
<7292=7293
<7294=7295
<7299=7300
<7300=7309,7301
<7301=7307,7302
<7302=7305,7303
<7303=7304
<7305=7306
<7307=7308
<7310=7311
<7311=7337,7336,7312
<7312=7335,7313
<7313=7333,7314
<7314=7317,7315
<7315=7316
<7317=7318
<7318=7331,7319
<7319=7329,7320
<7320=7321
<7321=7327,7322
<7322=7323
<7323=7324
<7324=7326,7325
<7327=7328
<7329=7330
<7331=7332
<7333=7334
<7341=7342
<7342=7358,7343
<7343=7352,7350,7344
<7344=7345
<7345=7347,7346
<7347=7349,7348
<7350=7351
<7352=7353
<7353=7355,7354
<7355=7357,7356
<7358=7359
<7360=7361
<7361=7379,7362
<7362=7372,7363
<7363=7365,7364
<7365=7367,7366
<7367=7369,7368
<7369=7371,7370
<7372=7374,7373
<7374=7376,7375
<7376=7378,7377
<7379=7381,7380
<7381=7383,7382
<7383=7385,7384
<7386=7387
<7387=7397,7388
<7388=7395,7389
<7389=7390
<7390=7392,7391
<7392=7394,7393
<7395=7396
<7397=7398
<7399=7488,7484,7481,7400
<7400=7476,7453,7426,7401
<7401=7402
<7402=7424,7403
<7403=7422,7420,7414,7410,7404
<7404=7405
<7405=7407,7406
<7407=7409,7408
<7410=7411
<7411=7413,7412
<7414=7415
<7415=7417,7416
<7417=7419,7418
<7420=7421
<7422=7423
<7424=7425
<7426=7427
<7427=7451,7428
<7428=7449,7447,7445,7443,7437,7435,7429
<7429=7430
<7430=7432,7431
<7432=7434,7433
<7435=7436
<7437=7438
<7438=7440,7439
<7440=7442,7441
<7443=7444
<7445=7446
<7447=7448
<7449=7450
<7451=7452
<7453=7454
<7454=7474,7455
<7455=7472,7470,7468,7466,7460,7458,7456
<7456=7457
<7458=7459
<7460=7461
<7461=7463,7462
<7463=7465,7464
<7466=7467
<7468=7469
<7470=7471
<7472=7473
<7474=7475
<7476=7477
<7477=7480,7479,7478
<7481=7483,7482
<7484=7485
<7485=7487,7486
<7488=7489
<7489=7490
<7490=7495,7494,7491
<7491=7493,7492
<7496=7497
<7497=7513,7498
<7498=7507,7505,7499
<7499=7500
<7500=7502,7501
<7502=7504,7503
<7505=7506
<7507=7508
<7508=7510,7509
<7510=7512,7511
<7513=7514
<7515=7516
<7516=7540,7517
<7517=7538,7536,7534,7532,7526,7520,7518
<7518=7519
<7520=7521
<7521=7523,7522
<7523=7525,7524
<7526=7527
<7527=7529,7528
<7529=7531,7530
<7532=7533
<7534=7535
<7536=7537
<7538=7539
<7540=7541
<7542=7543
<7543=7546,7545,7544
<7547=7548
<7548=7562,7549
<7549=7560,7558,7556,7552,7550
<7550=7551
<7552=7553
<7553=7555,7554
<7556=7557
<7558=7559
<7560=7561
<7562=7563
<7564=7565
<7565=7585,7566
<7566=7583,7581,7579,7577,7571,7569,7567
<7567=7568
<7569=7570
<7571=7572
<7572=7574,7573
<7574=7576,7575
<7577=7578
<7579=7580
<7581=7582
<7583=7584
<7585=7586
<7587=7588
<7588=7591,7590,7589
<7592=7593
<7593=7607,7606,7594
<7594=7605,7595
<7595=7603,7596
<7596=7601,7599,7597
<7597=7598
<7599=7600
<7601=7602
<7603=7604
<7608=7609
<7609=7633,7610
<7610=7631,7629,7627,7625,7619,7613,7611
<7611=7612
<7613=7614
<7614=7616,7615
<7616=7618,7617
<7619=7620
<7620=7622,7621
<7622=7624,7623
<7625=7626
<7627=7628
<7629=7630
<7631=7632
<7633=7634
<7635=7636
<7636=7652,7637
<7637=7650,7644,7638
<7638=7639
<7639=7641,7640
<7641=7643,7642
<7644=7645
<7645=7647,7646
<7647=7649,7648
<7650=7651
<7652=7653
<7654=7655
<7655=7658,7657,7656
<7659=7660
<7660=7663,7662,7661
<7664=7665
<7665=7669,7666
<7666=7667
<7667=7668
<7669=7670
<7751=7780,7752
<7752=7773,7764,7755,7753
<7753=7754
<7755=7756
<7756=7762,7757
<7757=7758
<7758=7759
<7759=7761,7760
<7762=7763
<7764=7765
<7765=7771,7766
<7766=7767
<7767=7768
<7768=7770,7769
<7771=7772
<7773=7774
<7774=7778,7775
<7775=7776
<7776=7777
<7778=7779
<7780=7781
<7781=7783,7782
<7784=7785
<7785=7787,7786
<7788=7789
<7789=7791,7790
<7792=7793
<7793=7795,7794
<7796=7797
<7797=7801,7798
<7798=7799
<7799=7800
<7801=7802
<7803=7804
<7804=7812,7805
<7805=7810,7808,7806
<7806=7807
<7808=7809
<7810=7811
<7812=7813
<7814=7815
<7819=7820
<7824=8059,8055,8052,7825
<7825=7826
<7826=8027,7942,7827
<7827=7828
<7828=7930,7829
<7829=7917,7904,7895,7882,7868,7854,7837,7830
<7830=7831
<7831=7835,7832
<7832=7833
<7833=7834
<7835=7836
<7837=7838
<7838=7852,7839
<7839=7850,7848,7844,7840
<7840=7841
<7841=7843,7842
<7844=7845
<7845=7847,7846
<7848=7849
<7850=7851
<7852=7853
<7854=7855
<7855=7859,7856
<7856=7858,7857
<7859=7861,7860
<7861=7863,7862
<7863=7865,7864
<7865=7867,7866
<7868=7869
<7869=7873,7870
<7870=7872,7871
<7873=7875,7874
<7875=7877,7876
<7877=7879,7878
<7879=7881,7880
<7882=7891,7883
<7883=7884
<7884=7885
<7885=7889,7886
<7886=7887
<7887=7888
<7889=7890
<7891=7892
<7892=7894,7893
<7895=7896
<7896=7903,7902,7897
<7897=7901,7898
<7898=7900,7899
<7904=7905
<7905=7916,7915,7906
<7906=7914,7907
<7907=7909,7908
<7909=7911,7910
<7911=7913,7912
<7917=7918
<7918=7929,7928,7919
<7919=7927,7920
<7920=7922,7921
<7922=7924,7923
<7924=7926,7925
<7930=7931
<7931=7937,7932
<7932=7934,7933
<7934=7936,7935
<7937=7939,7938
<7939=7941,7940
<7942=8014,8001,7989,7977,7966,7958,7947,7943
<7943=7944
<7944=7946,7945
<7947=7956,7948
<7948=7949
<7949=7953,7950
<7950=7952,7951
<7953=7955,7954
<7956=7957
<7958=7959
<7959=7963,7960
<7960=7962,7961
<7963=7965,7964
<7966=7967
<7967=7973,7968
<7968=7969
<7969=7970
<7970=7972,7971
<7973=7974
<7974=7976,7975
<7977=7978
<7978=7980,7979
<7980=7982,7981
<7982=7984,7983
<7984=7986,7985
<7986=7988,7987
<7989=7990
<7990=7992,7991
<7992=7994,7993
<7994=7996,7995
<7996=7998,7997
<7998=8000,7999
<8001=8002
<8002=8013,8012,8003
<8003=8011,8004
<8004=8006,8005
<8006=8008,8007
<8008=8010,8009
<8014=8015
<8015=8026,8025,8016
<8016=8024,8017
<8017=8019,8018
<8019=8021,8020
<8021=8023,8022
<8027=8028
<8028=8040,8029
<8029=8035,8030
<8030=8032,8031
<8032=8034,8033
<8035=8037,8036
<8037=8039,8038
<8040=8042,8041
<8042=8051,8043
<8043=8045,8044
<8045=8046
<8046=8048,8047
<8048=8050,8049
<8052=8054,8053
<8055=8056
<8056=8058,8057
<8059=8060
<8060=8061
<8061=8066,8065,8062
<8062=8064,8063
<8067=8068
<8068=8073,8072,8069
<8069=8071,8070
<8074=8075
<8075=8077,8076
<8078=8079
<8079=8083,8080
<8080=8081
<8081=8082
<8083=8084
<8085=8086
<8086=8092,8087
<8087=8090,8088
<8088=8089
<8090=8091
<8092=8093
<8094=8099,8095
<8095=8096
<8096=8098,8097
<8099=8100
<8100=8102,8101
<8103=8104
<8104=8113,8105
<8105=8111,8106
<8106=8109,8107
<8107=8108
<8109=8110
<8111=8112
<8114=8115
<8115=8136,8135,8116
<8116=8134,8117
<8117=8132,8118
<8118=8130,8121,8119
<8119=8120
<8121=8122
<8122=8128,8123
<8123=8124
<8124=8125
<8125=8127,8126
<8128=8129
<8130=8131
<8132=8133
<8137=8138
<8138=8140,8139
<8140=8141
<8142=8334,8330,8327,8143
<8143=8144
<8144=8314,8153,8145
<8145=8146
<8146=8147
<8147=8148
<8148=8150,8149
<8150=8152,8151
<8153=8303,8294,8271,8248,8244,8223,8196,8192,8165,8154
<8154=8155
<8155=8162,8156
<8156=8160,8157
<8157=8158
<8158=8159
<8160=8161
<8162=8164,8163
<8165=8166
<8166=8191,8190,8167
<8167=8189,8168
<8168=8187,8169
<8169=8170
<8170=8171
<8171=8185,8172
<8172=8183,8177,8173
<8173=8174
<8174=8176,8175
<8177=8178
<8178=8180,8179
<8180=8182,8181
<8183=8184
<8185=8186
<8187=8188
<8192=8193
<8193=8195,8194
<8196=8197
<8197=8222,8221,8198
<8198=8220,8199
<8199=8210,8200
<8200=8208,8201
<8201=8206,8204,8202
<8202=8203
<8204=8205
<8206=8207
<8208=8209
<8210=8218,8211
<8211=8216,8214,8212
<8212=8213
<8214=8215
<8216=8217
<8218=8219
<8223=8224
<8224=8242,8225
<8225=8240,8238,8236,8234,8232,8230,8226
<8226=8227
<8227=8229,8228
<8230=8231
<8232=8233
<8234=8235
<8236=8237
<8238=8239
<8240=8241
<8242=8243
<8244=8245
<8245=8247,8246
<8248=8249
<8249=8269,8250
<8250=8267,8265,8263,8261,8259,8253,8251
<8251=8252
<8253=8254
<8254=8256,8255
<8256=8258,8257
<8259=8260
<8261=8262
<8263=8264
<8265=8266
<8267=8268
<8269=8270
<8271=8272
<8272=8292,8273
<8273=8290,8288,8286,8284,8282,8276,8274
<8274=8275
<8276=8277
<8277=8279,8278
<8279=8281,8280
<8282=8283
<8284=8285
<8286=8287
<8288=8289
<8290=8291
<8292=8293
<8294=8299,8295
<8295=8298,8297,8296
<8299=8302,8301,8300
<8303=8304
<8304=8313,8312,8305
<8305=8311,8306
<8306=8308,8307
<8308=8310,8309
<8314=8315
<8315=8317,8316
<8317=8326,8318
<8318=8320,8319
<8320=8321
<8321=8323,8322
<8323=8325,8324
<8327=8329,8328
<8330=8331
<8331=8333,8332
<8334=8335
<8335=8336
<8336=8341,8340,8337
<8337=8339,8338
<8342=8343
<8343=8348,8347,8344
<8344=8346,8345
<8349=8354,8350
<8350=8351
<8351=8353,8352
<8354=8355
<8355=8357,8356
<8358=8359
<8359=8368,8360
<8360=8366,8361
<8361=8364,8362
<8362=8363
<8364=8365
<8366=8367
<8369=8370
<8370=8391,8390,8371
<8371=8389,8372
<8372=8387,8373
<8373=8385,8376,8374
<8374=8375
<8376=8377
<8377=8383,8378
<8378=8379
<8379=8380
<8380=8382,8381
<8383=8384
<8385=8386
<8387=8388
<8392=8393
<8393=8395,8394
<8395=8396
<8397=8419,8415,8412,8398
<8398=8399
<8399=8400
<8400=8409,8401
<8401=8407,8402
<8402=8403
<8403=8404
<8404=8406,8405
<8407=8408
<8409=8411,8410
<8412=8414,8413
<8415=8416
<8416=8418,8417
<8419=8420
<8420=8421
<8421=8426,8425,8422
<8422=8424,8423
<8427=8428
<8428=8433,8432,8429
<8429=8431,8430
<8434=8530,8435
<8435=8529,8528,8527,8526,8525,8524,8523,8522,8521,8520,8519,8518,8517,8516,8511,8497,8484,8461,8460,8459,8458,8456,8447,8438,8436
<8436=8437
<8438=8439
<8439=8445,8440
<8440=8441
<8441=8442
<8442=8444,8443
<8445=8446
<8447=8448
<8448=8454,8449
<8449=8450
<8450=8451
<8451=8453,8452
<8454=8455
<8456=8457
<8461=8462
<8462=8482,8463
<8463=8480,8478,8476,8474,8470,8468,8466,8464
<8464=8465
<8466=8467
<8468=8469
<8470=8471
<8471=8473,8472
<8474=8475
<8476=8477
<8478=8479
<8480=8481
<8482=8483
<8484=8485
<8485=8495,8486
<8486=8493,8491,8489,8487
<8487=8488
<8489=8490
<8491=8492
<8493=8494
<8495=8496
<8497=8498
<8498=8510,8509,8508,8499
<8499=8507,8500
<8500=8504,8501
<8501=8503,8502
<8504=8506,8505
<8511=8512
<8512=8515,8514,8513
<8530=8531
<8531=8533,8532
<8534=8535
<8535=8537,8536
<8537=8538
<8538=8540,8539
<8541=8542
<8546=8606,8560,8547
<8547=8548
<8548=8549
<8549=8550
<8550=8558,8551
<8551=8556,8554,8552
<8552=8553
<8554=8555
<8556=8557
<8558=8559
<8560=8595,8580,8565,8561
<8561=8562
<8562=8564,8563
<8565=8566
<8566=8578,8567
<8567=8576,8574,8568
<8568=8569
<8569=8573,8570
<8570=8572,8571
<8574=8575
<8576=8577
<8578=8579
<8580=8581
<8581=8593,8582
<8582=8591,8589,8583
<8583=8584
<8584=8588,8585
<8585=8587,8586
<8589=8590
<8591=8592
<8593=8594
<8595=8596
<8596=8604,8597
<8597=8602,8600,8598
<8598=8599
<8600=8601
<8602=8603
<8604=8605
<8606=8607
<8607=8609,8608
<8610=8611
<8611=8623,8622,8612
<8612=8621,8613
<8613=8619,8614
<8614=8617,8615
<8615=8616
<8617=8618
<8619=8620
<8624=8625
<8625=8653,8652,8626
<8626=8651,8627
<8627=8649,8628
<8628=8647,8645,8643,8641,8639,8637,8635,8633,8631,8629
<8629=8630
<8631=8632
<8633=8634
<8635=8636
<8637=8638
<8639=8640
<8641=8642
<8643=8644
<8645=8646
<8647=8648
<8649=8650
<8654=8655
<8655=8660,8659,8656
<8656=8658,8657
<8661=8662
<8662=8665,8664,8663
<8666=8667
<8667=8705,8704,8668
<8668=8703,8669
<8669=8701,8670
<8670=8699,8697,8695,8693,8691,8689,8687,8685,8683,8681,8679,8677,8675,8673,8671
<8671=8672
<8673=8674
<8675=8676
<8677=8678
<8679=8680
<8681=8682
<8683=8684
<8685=8686
<8687=8688
<8689=8690
<8691=8692
<8693=8694
<8695=8696
<8697=8698
<8699=8700
<8701=8702
<8706=8707
<8707=8715,8714,8713,8708
<8708=8712,8709
<8709=8711,8710
<8716=8717
<8717=8719,8718
<8719=8721,8720
<8721=8723,8722
<8723=8725,8724
<8726=8727
<8727=8729,8728
<8729=8731,8730
<8731=8733,8732
<8733=8735,8734
<8736=8737
<8737=8739,8738
<8739=8741,8740
<8741=8743,8742
<8743=8745,8744
<8746=8747
<8747=8749,8748
<8749=8751,8750
<8751=8753,8752
<8753=8755,8754
<8756=8757
<8757=8759,8758
<8759=8761,8760
<8761=8763,8762
<8763=8765,8764
<8766=8767
<8767=8769,8768
<8769=8771,8770
<8771=8773,8772
<8773=8775,8774
<8776=8777
<8777=8779,8778
<8779=8781,8780
<8781=8783,8782
<8783=8785,8784
<8786=8787
<8787=8789,8788
<8789=8791,8790
<8791=8793,8792
<8793=8795,8794
<8796=8797
<8797=8799,8798
<8799=8801,8800
<8801=8803,8802
<8803=8805,8804
<8806=8807
<8807=8809,8808
<8809=8811,8810
<8811=8813,8812
<8813=8815,8814
<8816=8817
<8817=8819,8818
<8819=8821,8820
<8821=8823,8822
<8823=8825,8824
<8826=8827
<8827=8829,8828
<8829=8831,8830
<8831=8833,8832
<8833=8835,8834
<8836=8837
<8837=8839,8838
<8839=8841,8840
<8841=8843,8842
<8843=8845,8844
<8846=8847
<8847=8849,8848
<8849=8851,8850
<8851=8853,8852
<8853=8855,8854
<8856=8857
<8857=8859,8858
<8859=8861,8860
<8861=8863,8862
<8863=8865,8864
<8866=8867
<8867=8869,8868
<8869=8871,8870
<8871=8873,8872
<8873=8875,8874
<8876=8877
<8877=8879,8878
<8879=8881,8880
<8881=8883,8882
<8883=8885,8884
<8886=8887
<8887=8889,8888
<8889=8891,8890
<8891=8893,8892
<8893=8895,8894
<8896=8897
<8897=8899,8898
<8899=8901,8900
<8901=8903,8902
<8903=8905,8904
<8906=8907
<8907=8909,8908
<8909=8911,8910
<8911=8913,8912
<8913=8915,8914
<8916=8917
<8917=8919,8918
<8919=8921,8920
<8921=8923,8922
<8923=8925,8924
<8926=8927
<8927=8929,8928
<8929=8931,8930
<8931=8933,8932
<8933=8935,8934
<8936=8937
<8937=8939,8938
<8939=8941,8940
<8941=8943,8942
<8943=8945,8944
<8946=8947
<8947=8949,8948
<8949=8951,8950
<8951=8953,8952
<8953=8955,8954
<8956=8957
<8957=8959,8958
<8959=8961,8960
<8961=8963,8962
<8963=8965,8964
<8966=8967
<8967=8969,8968
<8969=8971,8970
<8971=8973,8972
<8973=8975,8974
<8976=8977
<8977=8979,8978
<8979=8981,8980
<8981=8983,8982
<8983=8985,8984
<8986=8987
<8987=8989,8988
<8989=8991,8990
<8991=8993,8992
<8993=8995,8994
<8996=8997
<8997=8999,8998
<8999=9001,9000
<9001=9003,9002
<9003=9005,9004
<9006=9007
<9007=9009,9008
<9009=9011,9010
<9011=9013,9012
<9013=9015,9014
<9016=9017
<9017=9019,9018
<9019=9020
<9020=9022,9021
<9023=9024
<9024=9028,9025
<9025=9026
<9026=9027
<9028=9029
<9029=9031,9030
<9032=9054,9033
<9033=9045,9036,9034
<9034=9035
<9036=9037
<9037=9043,9038
<9038=9039
<9039=9040
<9040=9042,9041
<9043=9044
<9045=9046
<9046=9052,9047
<9047=9048
<9048=9049
<9049=9051,9050
<9052=9053
<9054=9055
<9055=9057,9056
<9058=9096,9059
<9059=9095,9094,9093,9092,9091,9090,9089,9088,9087,9086,9085,9084,9083,9082,9081,9080,9071,9062,9060
<9060=9061
<9062=9063
<9063=9069,9064
<9064=9065
<9065=9066
<9066=9068,9067
<9069=9070
<9071=9072
<9072=9078,9073
<9073=9074
<9074=9075
<9075=9077,9076
<9078=9079
<9096=9097
<9097=9099,9098
<9099=9101,9100
<9101=9103,9102
<9104=9132,9105
<9105=9131,9130,9129,9128,9127,9126,9117,9108,9106
<9106=9107
<9108=9109
<9109=9115,9110
<9110=9111
<9111=9112
<9112=9114,9113
<9115=9116
<9117=9118
<9118=9124,9119
<9119=9120
<9120=9121
<9121=9123,9122
<9124=9125
<9132=9133
<9133=9135,9134
<9135=9139,9136
<9136=9137
<9137=9138
<9139=9140
<9141=9142
<9142=9144,9143
<9145=9146
<9146=9153,9147
<9147=9151,9148
<9148=9149
<9149=9150
<9151=9152
<9154=9155
<9155=9159,9156
<9156=9157
<9157=9158
<9159=9160
<9161=9162
<9162=9176,9163
<9163=9174,9172,9170,9164
<9164=9165
<9165=9169,9166
<9166=9168,9167
<9170=9171
<9172=9173
<9174=9175
<9176=9177
<9178=9179
<9179=9193,9180
<9180=9191,9189,9187,9181
<9181=9182
<9182=9186,9183
<9183=9185,9184
<9187=9188
<9189=9190
<9191=9192
<9193=9194
<9195=9196
<9196=9207,9197
<9197=9205,9198
<9198=9199
<9199=9203,9200
<9200=9201
<9201=9202
<9203=9204
<9205=9206
<9207=9208
<9209=9210
<9210=9217,9216,9211
<9211=9215,9212
<9212=9214,9213
<9218=9219
<9219=9223,9220
<9220=9221
<9221=9222
<9223=9224
<9225=9226
<9226=9230,9227
<9227=9228
<9228=9229
<9230=9231
<9232=9233
<9233=9239,9234
<9234=9237,9235
<9235=9236
<9237=9238
<9239=9240
<9241=9242
<9242=9252,9243
<9243=9250,9248,9246,9244
<9244=9245
<9246=9247
<9248=9249
<9250=9251
<9252=9253
<9254=9255
<9255=9261,9256
<9256=9259,9257
<9257=9258
<9259=9260
<9261=9262
<9263=9264
<9264=9274,9265
<9265=9272,9270,9268,9266
<9266=9267
<9268=9269
<9270=9271
<9272=9273
<9274=9275
<9276=9277
<9277=9280,9279,9278
<9281=10290,10286,10283,9282
<9282=10272,10261,10248,10235,10222,10207,10192,10177,10162,10124,10120,10106,10092,10085,10078,10049,9768,9744,9724,9704,9684,9664,9595,9526,9497,9468,9464,9448,9432,9416,9395,9382,9369,9332,9328,9312,9296,9287,9283
<9283=9284
<9284=9286,9285
<9287=9288
<9288=9292,9289
<9289=9290
<9290=9291
<9292=9293
<9293=9295,9294
<9296=9297
<9297=9308,9298
<9298=9299
<9299=9300
<9300=9306,9301
<9301=9304,9302
<9302=9303
<9304=9305
<9306=9307
<9308=9309
<9309=9311,9310
<9312=9313
<9313=9324,9314
<9314=9315
<9315=9316
<9316=9322,9317
<9317=9320,9318
<9318=9319
<9320=9321
<9322=9323
<9324=9325
<9325=9327,9326
<9328=9329
<9329=9331,9330
<9332=9367,9333
<9333=9351,9343,9334
<9334=9335
<9335=9339,9336
<9336=9337
<9337=9338
<9339=9340
<9340=9342,9341
<9343=9344
<9344=9346,9345
<9346=9348,9347
<9348=9350,9349
<9351=9352
<9352=9366,9365,9353
<9353=9364,9354
<9354=9356,9355
<9356=9362,9357
<9357=9360,9358
<9358=9359
<9360=9361
<9362=9363
<9367=9368
<9369=9370
<9370=9372,9371
<9372=9374,9373
<9374=9380,9375
<9375=9378,9376
<9376=9377
<9378=9379
<9380=9381
<9382=9383
<9383=9385,9384
<9385=9387,9386
<9387=9393,9388
<9388=9391,9389
<9389=9390
<9391=9392
<9393=9394
<9395=9396
<9396=9413,9397
<9397=9411,9398
<9398=9407,9403,9399
<9399=9400
<9400=9402,9401
<9403=9404
<9404=9406,9405
<9407=9408
<9408=9410,9409
<9411=9412
<9413=9415,9414
<9416=9417
<9417=9431,9430,9418
<9418=9429,9419
<9419=9421,9420
<9421=9427,9422
<9422=9425,9423
<9423=9424
<9425=9426
<9427=9428
<9432=9433
<9433=9447,9446,9434
<9434=9445,9435
<9435=9437,9436
<9437=9443,9438
<9438=9441,9439
<9439=9440
<9441=9442
<9443=9444
<9448=9449
<9449=9463,9462,9450
<9450=9461,9451
<9451=9453,9452
<9453=9459,9454
<9454=9457,9455
<9455=9456
<9457=9458
<9459=9460
<9464=9465
<9465=9467,9466
<9468=9469
<9469=9495,9470
<9470=9493,9486,9479,9477,9475,9473,9471
<9471=9472
<9473=9474
<9475=9476
<9477=9478
<9479=9480
<9480=9484,9481
<9481=9482
<9482=9483
<9484=9485
<9486=9487
<9487=9491,9488
<9488=9489
<9489=9490
<9491=9492
<9493=9494
<9495=9496
<9497=9498
<9498=9524,9499
<9499=9522,9515,9508,9506,9504,9502,9500
<9500=9501
<9502=9503
<9504=9505
<9506=9507
<9508=9509
<9509=9513,9510
<9510=9511
<9511=9512
<9513=9514
<9515=9516
<9516=9520,9517
<9517=9518
<9518=9519
<9520=9521
<9522=9523
<9524=9525
<9526=9591,9527
<9527=9562,9533,9529,9528
<9529=9530
<9530=9532,9531
<9533=9534
<9534=9560,9535
<9535=9558,9551,9544,9542,9540,9538,9536
<9536=9537
<9538=9539
<9540=9541
<9542=9543
<9544=9545
<9545=9549,9546
<9546=9547
<9547=9548
<9549=9550
<9551=9552
<9552=9556,9553
<9553=9554
<9554=9555
<9556=9557
<9558=9559
<9560=9561
<9562=9563
<9563=9589,9564
<9564=9587,9580,9573,9571,9569,9567,9565
<9565=9566
<9567=9568
<9569=9570
<9571=9572
<9573=9574
<9574=9578,9575
<9575=9576
<9576=9577
<9578=9579
<9580=9581
<9581=9585,9582
<9582=9583
<9583=9584
<9585=9586
<9587=9588
<9589=9590
<9591=9592
<9592=9594,9593
<9595=9660,9596
<9596=9631,9602,9598,9597
<9598=9599
<9599=9601,9600
<9602=9603
<9603=9629,9604
<9604=9627,9620,9613,9611,9609,9607,9605
<9605=9606
<9607=9608
<9609=9610
<9611=9612
<9613=9614
<9614=9618,9615
<9615=9616
<9616=9617
<9618=9619
<9620=9621
<9621=9625,9622
<9622=9623
<9623=9624
<9625=9626
<9627=9628
<9629=9630
<9631=9632
<9632=9658,9633
<9633=9656,9649,9642,9640,9638,9636,9634
<9634=9635
<9636=9637
<9638=9639
<9640=9641
<9642=9643
<9643=9647,9644
<9644=9645
<9645=9646
<9647=9648
<9649=9650
<9650=9654,9651
<9651=9652
<9652=9653
<9654=9655
<9656=9657
<9658=9659
<9660=9661
<9661=9663,9662
<9664=9665
<9665=9683,9682,9666
<9666=9681,9667
<9667=9680,9668
<9668=9679,9669
<9669=9678,9670
<9670=9672,9671
<9672=9673
<9673=9675,9674
<9675=9677,9676
<9684=9685
<9685=9703,9702,9686
<9686=9701,9687
<9687=9700,9688
<9688=9699,9689
<9689=9698,9690
<9690=9692,9691
<9692=9693
<9693=9695,9694
<9695=9697,9696
<9704=9705
<9705=9723,9722,9706
<9706=9721,9707
<9707=9720,9708
<9708=9719,9709
<9709=9718,9710
<9710=9712,9711
<9712=9713
<9713=9715,9714
<9715=9717,9716
<9724=9725
<9725=9743,9742,9726
<9726=9741,9727
<9727=9740,9728
<9728=9739,9729
<9729=9738,9730
<9730=9732,9731
<9732=9733
<9733=9735,9734
<9735=9737,9736
<9744=9745
<9745=9766,9746
<9746=9764,9762,9760,9753,9747
<9747=9748
<9748=9751,9750,9749
<9751=9752
<9753=9754
<9754=9758,9755
<9755=9756
<9756=9757
<9758=9759
<9760=9761
<9762=9763
<9764=9765
<9766=9767
<9768=10047,9769
<9769=10038,10011,9996,9975,9954,9927,9912,9891,9870,9853,9836,9827,9818,9809,9800,9770
<9770=9771
<9771=9799,9772
<9772=9798,9773
<9773=9786,9774
<9774=9784,9775
<9775=9776
<9776=9777
<9777=9781,9778
<9778=9780,9779
<9781=9783,9782
<9784=9785
<9786=9796,9787
<9787=9788
<9788=9789
<9789=9793,9790
<9790=9792,9791
<9793=9795,9794
<9796=9797
<9800=9801
<9801=9808,9807,9802
<9802=9806,9803
<9803=9805,9804
<9809=9810
<9810=9817,9816,9811
<9811=9815,9812
<9812=9814,9813
<9818=9819
<9819=9826,9825,9820
<9820=9824,9821
<9821=9823,9822
<9827=9828
<9828=9835,9834,9829
<9829=9833,9830
<9830=9832,9831
<9836=9837
<9837=9847,9838
<9838=9845,9843,9841,9839
<9839=9840
<9841=9842
<9843=9844
<9845=9846
<9847=9848
<9848=9850,9849
<9850=9852,9851
<9853=9854
<9854=9864,9855
<9855=9862,9860,9858,9856
<9856=9857
<9858=9859
<9860=9861
<9862=9863
<9864=9865
<9865=9867,9866
<9867=9869,9868
<9870=9871
<9871=9890,9889,9872
<9872=9888,9873
<9873=9881,9874
<9874=9878,9875
<9875=9877,9876
<9878=9880,9879
<9881=9887,9882
<9882=9884,9883
<9884=9886,9885
<9891=9892
<9892=9911,9910,9893
<9893=9909,9894
<9894=9902,9895
<9895=9899,9896
<9896=9898,9897
<9899=9901,9900
<9902=9908,9903
<9903=9905,9904
<9905=9907,9906
<9912=9913
<9913=9925,9914
<9914=9919,9917,9915
<9915=9916
<9917=9918
<9919=9920
<9920=9922,9921
<9922=9924,9923
<9925=9926
<9927=9928
<9928=9952,9929
<9929=9950,9948,9946,9944,9938,9932,9930
<9930=9931
<9932=9933
<9933=9935,9934
<9935=9937,9936
<9938=9939
<9939=9941,9940
<9941=9943,9942
<9944=9945
<9946=9947
<9948=9949
<9950=9951
<9952=9953
<9954=9955
<9955=9974,9973,9956
<9956=9972,9957
<9957=9965,9958
<9958=9962,9959
<9959=9961,9960
<9962=9964,9963
<9965=9971,9966
<9966=9968,9967
<9968=9970,9969
<9975=9976
<9976=9995,9994,9977
<9977=9993,9978
<9978=9986,9979
<9979=9983,9980
<9980=9982,9981
<9983=9985,9984
<9986=9992,9987
<9987=9989,9988
<9989=9991,9990
<9996=9997
<9997=10009,9998
<9998=10003,10001,9999
<9999=10000
<10001=10002
<10003=10004
<10004=10006,10005
<10006=10008,10007
<10009=10010
<10011=10012
<10012=10036,10013
<10013=10034,10032,10030,10028,10022,10016,10014
<10014=10015
<10016=10017
<10017=10019,10018
<10019=10021,10020
<10022=10023
<10023=10025,10024
<10025=10027,10026
<10028=10029
<10030=10031
<10032=10033
<10034=10035
<10036=10037
<10038=10043,10039
<10039=10042,10041,10040
<10043=10046,10045,10044
<10047=10048
<10049=10050
<10050=10075,10051
<10051=10073,10052
<10052=10071,10069,10065,10061,10059,10057,10055,10053
<10053=10054
<10055=10056
<10057=10058
<10059=10060
<10061=10062
<10062=10064,10063
<10065=10066
<10066=10068,10067
<10069=10070
<10071=10072
<10073=10074
<10075=10077,10076
<10078=10079
<10079=10084,10083,10080
<10080=10082,10081
<10085=10086
<10086=10091,10090,10087
<10087=10089,10088
<10092=10093
<10093=10105,10104,10094
<10094=10103,10095
<10095=10101,10096
<10096=10099,10097
<10097=10098
<10099=10100
<10101=10102
<10106=10107
<10107=10119,10118,10108
<10108=10117,10109
<10109=10115,10110
<10110=10113,10111
<10111=10112
<10113=10114
<10115=10116
<10120=10121
<10121=10123,10122
<10124=10160,10125
<10125=10143,10126
<10126=10127
<10127=10137,10128
<10128=10135,10133,10131,10129
<10129=10130
<10131=10132
<10133=10134
<10135=10136
<10137=10138
<10138=10140,10139
<10140=10142,10141
<10143=10144
<10144=10154,10145
<10145=10152,10150,10148,10146
<10146=10147
<10148=10149
<10150=10151
<10152=10153
<10154=10155
<10155=10157,10156
<10157=10159,10158
<10160=10161
<10162=10163
<10163=10176,10164
<10164=10175,10165
<10165=10167,10166
<10167=10173,10168
<10168=10171,10169
<10169=10170
<10171=10172
<10173=10174
<10177=10178
<10178=10191,10179
<10179=10190,10180
<10180=10182,10181
<10182=10188,10183
<10183=10186,10184
<10184=10185
<10186=10187
<10188=10189
<10192=10193
<10193=10206,10194
<10194=10205,10195
<10195=10197,10196
<10197=10203,10198
<10198=10201,10199
<10199=10200
<10201=10202
<10203=10204
<10207=10208
<10208=10221,10209
<10209=10220,10210
<10210=10212,10211
<10212=10218,10213
<10213=10216,10214
<10214=10215
<10216=10217
<10218=10219
<10222=10232,10229,10226,10223
<10223=10225,10224
<10226=10228,10227
<10229=10231,10230
<10232=10234,10233
<10235=10245,10242,10239,10236
<10236=10238,10237
<10239=10241,10240
<10242=10244,10243
<10245=10247,10246
<10248=10249
<10249=10259,10250
<10250=10257,10255,10253,10251
<10251=10252
<10253=10254
<10255=10256
<10257=10258
<10259=10260
<10261=10262
<10262=10271,10270,10263
<10263=10269,10264
<10264=10266,10265
<10266=10268,10267
<10272=10273
<10273=10282,10281,10274
<10274=10280,10275
<10275=10277,10276
<10277=10279,10278
<10283=10285,10284
<10286=10287
<10287=10289,10288
<10290=10291
<10291=10292
<10292=10297,10296,10293
<10293=10295,10294
<10298=10299
<10299=10301,10300
<10301=10302
<10302=10304,10303
<10304=10306,10305
<10307=10308
<10308=10310,10309
<10310=10311
<10311=10313,10312
<10313=10315,10314
<10316=10317
<10317=10333,10332,10318
<10318=10331,10319
<10319=10329,10320
<10320=10323,10321
<10321=10322
<10323=10324
<10324=10326,10325
<10326=10328,10327
<10329=10330
<10334=10335
<10335=10351,10350,10336
<10336=10349,10337
<10337=10347,10338
<10338=10341,10339
<10339=10340
<10341=10342
<10342=10344,10343
<10344=10346,10345
<10347=10348
<10352=10353
<10353=10355,10354
<10355=10356
<10356=10358,10357
<10358=10360,10359
<10361=10362
<10362=10364,10363
<10364=10365
<10365=10367,10366
<10367=10369,10368
<10370=10371
<10371=10375,10372
<10372=10373
<10373=10374
<10375=10376
<10377=10378
<10378=10390,10389,10379
<10379=10388,10380
<10380=10384,10381
<10381=10382
<10382=10383
<10384=10385
<10385=10387,10386
<10391=10398,10392
<10392=10397,10396,10393
<10393=10395,10394
<10398=10403,10402,10399
<10399=10401,10400
<10404=10405
<10405=10410,10409,10406
<10406=10408,10407
<10411=10412
<10412=10417,10416,10413
<10413=10415,10414
<10418=10419
<10419=10424,10423,10420
<10420=10422,10421
<10425=10426
<10426=10431,10430,10427
<10427=10429,10428
<10432=10433
<10433=10437,10434
<10434=10435
<10435=10436
<10437=10438
<10439=10440
<10440=10444,10441
<10441=10442
<10442=10443
<10444=10445
<10446=10449,10447
<10447=10448
<10449=10450
<10450=10452,10451
<10453=10454
<10454=10458,10455
<10455=10456
<10456=10457
<10458=10459
<10460=10461
<10461=10481,10480,10462
<10462=10479,10463
<10463=10477,10464
<10464=10475,10473,10469,10465
<10465=10466
<10466=10468,10467
<10469=10470
<10470=10472,10471
<10473=10474
<10475=10476
<10477=10478
<10482=10483
<10483=10487,10484
<10484=10485
<10485=10486
<10487=10488
<10489=10490
<10490=10494,10491
<10491=10492
<10492=10493
<10494=10495
<10496=10524,10497
<10497=10511,10498
<10498=10499
<10499=10509,10500
<10500=10505,10501
<10501=10502
<10502=10504,10503
<10505=10506
<10506=10508,10507
<10509=10510
<10511=10512
<10512=10522,10513
<10513=10518,10514
<10514=10515
<10515=10517,10516
<10518=10519
<10519=10521,10520
<10522=10523
<10524=10525
<10526=10527
<10527=10535,10528
<10528=10533,10529
<10529=10530
<10530=10532,10531
<10533=10534
<10535=10536
<10537=10538
<10538=10546,10539
<10539=10544,10540
<10540=10541
<10541=10543,10542
<10544=10545
<10546=10547
<10548=10570,10558,10549
<10549=10550
<10550=10551
<10551=10553,10552
<10553=10555,10554
<10555=10557,10556
<10558=10559
<10559=10565,10560
<10560=10562,10561
<10562=10564,10563
<10565=10567,10566
<10567=10569,10568
<10570=10571
<10571=10573,10572
<10573=10575,10574
<10576=10598,10586,10577
<10577=10578
<10578=10579
<10579=10581,10580
<10581=10583,10582
<10583=10585,10584
<10586=10587
<10587=10593,10588
<10588=10590,10589
<10590=10592,10591
<10593=10595,10594
<10595=10597,10596
<10598=10599
<10599=10601,10600
<10601=10603,10602
<10604=10634,10616,10605
<10605=10606
<10606=10607
<10607=10609,10608
<10609=10611,10610
<10611=10613,10612
<10613=10615,10614
<10616=10617
<10617=10627,10618
<10618=10620,10619
<10620=10622,10621
<10622=10624,10623
<10624=10626,10625
<10627=10629,10628
<10629=10631,10630
<10631=10633,10632
<10634=10635
<10635=10637,10636
<10637=10639,10638
<10639=10641,10640
<10641=10643,10642
<10644=10674,10656,10645
<10645=10646
<10646=10647
<10647=10649,10648
<10649=10651,10650
<10651=10653,10652
<10653=10655,10654
<10656=10657
<10657=10667,10658
<10658=10660,10659
<10660=10662,10661
<10662=10664,10663
<10664=10666,10665
<10667=10669,10668
<10669=10671,10670
<10671=10673,10672
<10674=10675
<10675=10677,10676
<10677=10679,10678
<10679=10681,10680
<10681=10683,10682
<10684=10714,10696,10685
<10685=10686
<10686=10687
<10687=10689,10688
<10689=10691,10690
<10691=10693,10692
<10693=10695,10694
<10696=10697
<10697=10707,10698
<10698=10700,10699
<10700=10702,10701
<10702=10704,10703
<10704=10706,10705
<10707=10709,10708
<10709=10711,10710
<10711=10713,10712
<10714=10715
<10715=10717,10716
<10717=10719,10718
<10719=10721,10720
<10721=10723,10722
<10724=10725
<10725=10727,10726
<10727=10729,10728
<10729=10731,10730
<10731=10733,10732
<10734=10735
<10735=10737,10736
<10737=10739,10738
<10739=10741,10740
<10741=10743,10742
<10744=10745
<10745=10747,10746
<10747=10749,10748
<10749=10751,10750
<10751=10753,10752
<10754=10755
<10755=10757,10756
<10757=10759,10758
<10759=10761,10760
<10761=10763,10762
<10764=10765
<10765=10767,10766
<10767=10769,10768
<10769=10771,10770
<10771=10773,10772
<10774=10775
<10775=10777,10776
<10777=10779,10778
<10779=10781,10780
<10781=10783,10782
<10784=10785
<10785=10787,10786
<10787=10789,10788
<10789=10791,10790
<10791=10793,10792
<10794=10795
<10795=10797,10796
<10797=10799,10798
<10799=10801,10800
<10801=10803,10802
<10804=10805
<10805=10807,10806
<10807=10809,10808
<10809=10811,10810
<10811=10813,10812
<10814=10840,10827,10824,10815
<10815=10816
<10816=10817
<10817=10821,10818
<10818=10820,10819
<10821=10823,10822
<10824=10826,10825
<10827=10828
<10828=10839,10829
<10829=10831,10830
<10831=10832
<10832=10834,10833
<10834=10836,10835
<10836=10838,10837
<10840=10841
<10841=10852,10842
<10842=10844,10843
<10844=10845
<10845=10847,10846
<10847=10849,10848
<10849=10851,10850
<10853=10879,10866,10863,10854
<10854=10855
<10855=10856
<10856=10860,10857
<10857=10859,10858
<10860=10862,10861
<10863=10865,10864
<10866=10867
<10867=10878,10868
<10868=10870,10869
<10870=10871
<10871=10873,10872
<10873=10875,10874
<10875=10877,10876
<10879=10880
<10880=10891,10881
<10881=10883,10882
<10883=10884
<10884=10886,10885
<10886=10888,10887
<10888=10890,10889
<10892=10893
<10893=10895,10894
<10896=10897
<10897=10899,10898
<10900=10901
<10901=10903,10902
<10904=10905
<10905=10915,10906
<10906=10911,10907
<10907=10908
<10908=10910,10909
<10911=10912
<10912=10914,10913
<10915=10916
<10917=10918
<10918=10928,10919
<10919=10924,10920
<10920=10921
<10921=10923,10922
<10924=10925
<10925=10927,10926
<10928=10929
<10930=10972,10931
<10931=10961,10947,10932
<10932=10943,10933
<10933=10936,10934
<10934=10935
<10936=10937
<10937=10941,10938
<10938=10939
<10939=10940
<10941=10942
<10943=10944
<10944=10946,10945
<10947=10948
<10948=10960,10959,10949
<10949=10958,10950
<10950=10954,10951
<10951=10952
<10952=10953
<10954=10955
<10955=10957,10956
<10961=10962
<10962=10970,10963
<10963=10968,10966,10964
<10964=10965
<10966=10967
<10968=10969
<10970=10971
<10972=10973
<10973=10975,10974
<10976=10997,10977
<10977=10990,10986,10980,10978
<10978=10979
<10980=10981
<10981=10985,10982
<10982=10984,10983
<10986=10987
<10987=10989,10988
<10990=10991
<10991=10995,10992
<10992=10993
<10993=10994
<10995=10996
<10997=10998
<10998=11013,10999
<10999=11012,11000
<11000=11002,11001
<11002=11004,11003
<11004=11005
<11005=11007,11006
<11007=11009,11008
<11009=11011,11010
<11013=11026,11014
<11014=11016,11015
<11016=11018,11017
<11018=11019
<11019=11021,11020
<11021=11023,11022
<11023=11025,11024
<11027=11028
<11028=11040,11039,11029
<11029=11038,11030
<11030=11034,11031
<11031=11032
<11032=11033
<11034=11035
<11035=11037,11036
<11041=11065,11054,11042
<11042=11043
<11043=11044
<11044=11053,11045
<11045=11051,11046
<11046=11049,11047
<11047=11048
<11049=11050
<11051=11052
<11054=11055
<11055=11064,11056
<11056=11062,11057
<11057=11060,11058
<11058=11059
<11060=11061
<11062=11063
<11065=11066
<11066=11068,11067
<11069=11070
<11070=11072,11071
<11073=11083,11074
<11074=11075
<11075=11081,11076
<11076=11079,11077
<11077=11078
<11079=11080
<11081=11082
<11083=11084
<11085=11086
<11086=11088,11087
<11088=11089
<11089=11091,11090
<11091=11093,11092
<11094=11095
<11095=11097,11096
<11097=11098
<11098=11100,11099
<11100=11102,11101
<11103=11119,11104
<11104=11105
<11105=11113,11106
<11106=11111,11107
<11107=11108
<11108=11110,11109
<11111=11112
<11113=11114
<11114=11116,11115
<11116=11118,11117
<11119=11120
<11120=11126,11121
<11121=11123,11122
<11123=11125,11124
<11127=11143,11128
<11128=11129
<11129=11137,11130
<11130=11135,11131
<11131=11132
<11132=11134,11133
<11135=11136
<11137=11138
<11138=11140,11139
<11140=11142,11141
<11143=11144
<11144=11150,11145
<11145=11147,11146
<11147=11149,11148
<11151=11152
<11152=11155,11154,11153
<11156=11166,11157
<11157=11165,11164,11163,11162,11161,11160,11158
<11158=11159
<11166=11167
<11167=11175,11168
<11168=11174,11169
<11169=11171,11170
<11171=11173,11172
<11175=11181,11176
<11176=11178,11177
<11178=11180,11179
<11182=11183
<11183=11189,11184
<11184=11185
<11185=11186
<11186=11188,11187
<11189=11190
<11191=11192
<11192=11197,11196,11193
<11193=11195,11194
<11531=11534,11533,11532
<11534=12351,12340,12331,12322,12318,12314,12300,12296,12243,12236,11848,11839,11828,11814,11798,11791,11535
<11535=11783,11779,11776,11536
<11536=11537
<11537=11768,11538
<11538=11755,11742,11729,11720,11649,11638,11637,11636,11635,11634,11633,11632,11631,11630,11539,11543,11554,11563,11584,11585,11586,11587,11588,11589,11590,11591,11592,11593,11594,11595,11596,11597,11598,11599,11600,11601,11602,11603,11604,11605,11606,11607,11608,11609,11610,11611,11612,11613,11614,11615,11616,11617,11618,11619,11620,11621,11622,11623,11624,11625,11626,11627,11628,11629
<11539=11540
<11540=11542,11541
<11543=11544
<11544=11552,11545
<11545=11550,11548,11546
<11546=11547
<11548=11549
<11550=11551
<11552=11553
<11554=11555
<11555=11561,11556
<11556=11559,11557
<11557=11558
<11559=11560
<11561=11562
<11563=11564
<11564=11582,11565
<11565=11580,11578,11566
<11566=11567
<11567=11575,11568
<11568=11572,11569
<11569=11571,11570
<11572=11574,11573
<11575=11577,11576
<11578=11579
<11580=11581
<11582=11583
<11638=11639
<11639=11647,11640
<11640=11645,11643,11641
<11641=11642
<11643=11644
<11645=11646
<11647=11648
<11649=11650
<11650=11719,11718,11717,11651
<11651=11716,11652
<11652=11709,11702,11695,11688,11681,11674,11667,11660,11653
<11653=11659,11654
<11654=11658,11655
<11655=11657,11656
<11660=11666,11661
<11661=11665,11662
<11662=11664,11663
<11667=11673,11668
<11668=11672,11669
<11669=11671,11670
<11674=11680,11675
<11675=11679,11676
<11676=11678,11677
<11681=11687,11682
<11682=11686,11683
<11683=11685,11684
<11688=11694,11689
<11689=11693,11690
<11690=11692,11691
<11695=11701,11696
<11696=11700,11697
<11697=11699,11698
<11702=11708,11703
<11703=11707,11704
<11704=11706,11705
<11709=11715,11710
<11710=11714,11711
<11711=11713,11712
<11720=11721
<11721=11728,11727,11722
<11722=11726,11723
<11723=11725,11724
<11729=11730
<11730=11741,11740,11731
<11731=11739,11732
<11732=11734,11733
<11734=11736,11735
<11736=11738,11737
<11742=11743
<11743=11754,11753,11744
<11744=11752,11745
<11745=11747,11746
<11747=11749,11748
<11749=11751,11750
<11755=11756
<11756=11767,11766,11757
<11757=11765,11758
<11758=11760,11759
<11760=11762,11761
<11762=11764,11763
<11768=11769
<11769=11771,11770
<11771=11773,11772
<11773=11775,11774
<11776=11778,11777
<11779=11780
<11780=11782,11781
<11783=11784
<11784=11785
<11785=11790,11789,11786
<11786=11788,11787
<11791=11792
<11792=11797,11796,11793
<11793=11795,11794
<11798=11810,11799
<11799=11801,11800
<11801=11802
<11802=11808,11803
<11803=11806,11804
<11804=11805
<11806=11807
<11808=11809
<11810=11811
<11811=11813,11812
<11814=11815
<11815=11827,11826,11816
<11816=11825,11817
<11817=11823,11818
<11818=11821,11819
<11819=11820
<11821=11822
<11823=11824
<11828=11829
<11829=11837,11830
<11830=11835,11833,11831
<11831=11832
<11833=11834
<11835=11836
<11837=11838
<11839=11840
<11840=11847,11846,11841
<11841=11845,11842
<11842=11844,11843
<11848=12228,12222,12219,11849
<11849=12210,12201,12161,12151,12145,12141,12135,12118,12109,12079,12070,12053,12052,12051,12050,12048,12047,12046,12045,12043,12042,12041,12040,12038,12029,12018,11860,11859,11858,11857,11855,11854,11853,11852,11850
<11850=11851
<11855=11856
<11860=12010,12006,12003,11861
<11861=11990,11977,11964,11955,11884,11873,11862
<11862=11863
<11863=11871,11864
<11864=11869,11867,11865
<11865=11866
<11867=11868
<11869=11870
<11871=11872
<11873=11874
<11874=11882,11875
<11875=11880,11878,11876
<11876=11877
<11878=11879
<11880=11881
<11882=11883
<11884=11885
<11885=11954,11953,11952,11886
<11886=11951,11887
<11887=11944,11937,11930,11923,11916,11909,11902,11895,11888
<11888=11894,11889
<11889=11893,11890
<11890=11892,11891
<11895=11901,11896
<11896=11900,11897
<11897=11899,11898
<11902=11908,11903
<11903=11907,11904
<11904=11906,11905
<11909=11915,11910
<11910=11914,11911
<11911=11913,11912
<11916=11922,11917
<11917=11921,11918
<11918=11920,11919
<11923=11929,11924
<11924=11928,11925
<11925=11927,11926
<11930=11936,11931
<11931=11935,11932
<11932=11934,11933
<11937=11943,11938
<11938=11942,11939
<11939=11941,11940
<11944=11950,11945
<11945=11949,11946
<11946=11948,11947
<11955=11956
<11956=11963,11962,11957
<11957=11961,11958
<11958=11960,11959
<11964=11965
<11965=11976,11975,11966
<11966=11974,11967
<11967=11969,11968
<11969=11971,11970
<11971=11973,11972
<11977=11978
<11978=11989,11988,11979
<11979=11987,11980
<11980=11982,11981
<11982=11984,11983
<11984=11986,11985
<11990=11991
<11991=12002,12001,11992
<11992=12000,11993
<11993=11995,11994
<11995=11997,11996
<11997=11999,11998
<12003=12005,12004
<12006=12007
<12007=12009,12008
<12010=12011
<12011=12012
<12012=12017,12016,12013
<12013=12015,12014
<12018=12019
<12019=12027,12020
<12020=12025,12023,12021
<12021=12022
<12023=12024
<12025=12026
<12027=12028
<12029=12030
<12030=12037,12036,12031
<12031=12035,12032
<12032=12034,12033
<12038=12039
<12043=12044
<12048=12049
<12053=12054
<12054=12068,12055
<12055=12066,12064,12056
<12056=12057
<12057=12063,12058
<12058=12060,12059
<12060=12062,12061
<12064=12065
<12066=12067
<12068=12069
<12070=12071
<12071=12077,12072
<12072=12075,12073
<12073=12074
<12075=12076
<12077=12078
<12079=12101,12097,12094,12080
<12080=12081
<12081=12082
<12082=12092,12083
<12083=12090,12088,12084
<12084=12085
<12085=12087,12086
<12088=12089
<12090=12091
<12092=12093
<12094=12096,12095
<12097=12098
<12098=12100,12099
<12101=12102
<12102=12103
<12103=12108,12107,12104
<12104=12106,12105
<12109=12110
<12110=12116,12111
<12111=12114,12112
<12112=12113
<12114=12115
<12116=12117
<12118=12119
<12119=12133,12120
<12120=12131,12129,12127,12125,12123,12121
<12121=12122
<12123=12124
<12125=12126
<12127=12128
<12129=12130
<12131=12132
<12133=12134
<12135=12136
<12136=12140,12137
<12137=12139,12138
<12141=12142
<12142=12144,12143
<12145=12146
<12146=12150,12147
<12147=12149,12148
<12151=12158,12155,12152
<12152=12154,12153
<12155=12157,12156
<12158=12160,12159
<12161=12193,12189,12186,12162
<12162=12163
<12163=12164
<12164=12184,12165
<12165=12178,12172,12166
<12166=12167
<12167=12169,12168
<12169=12171,12170
<12172=12173
<12173=12177,12174
<12174=12176,12175
<12178=12179
<12179=12183,12180
<12180=12182,12181
<12184=12185
<12186=12188,12187
<12189=12190
<12190=12192,12191
<12193=12194
<12194=12195
<12195=12200,12199,12196
<12196=12198,12197
<12201=12202
<12202=12209,12208,12203
<12203=12207,12204
<12204=12206,12205
<12210=12211
<12211=12218,12217,12212
<12212=12216,12213
<12213=12215,12214
<12219=12221,12220
<12222=12223
<12223=12227,12224
<12224=12226,12225
<12228=12229
<12229=12230
<12230=12235,12234,12231
<12231=12233,12232
<12236=12237
<12237=12241,12238
<12238=12239
<12239=12240
<12241=12242
<12243=12288,12284,12281,12244
<12244=12272,12245
<12245=12246
<12246=12269,12247
<12247=12267,12248
<12248=12261,12255,12249
<12249=12250
<12250=12252,12251
<12252=12254,12253
<12255=12256
<12256=12258,12257
<12258=12260,12259
<12261=12262
<12262=12264,12263
<12264=12266,12265
<12267=12268
<12269=12271,12270
<12272=12273
<12273=12280,12279,12274
<12274=12278,12275
<12275=12277,12276
<12281=12283,12282
<12284=12285
<12285=12287,12286
<12288=12289
<12289=12290
<12290=12295,12294,12291
<12291=12293,12292
<12296=12297
<12297=12299,12298
<12300=12301
<12301=12313,12312,12302
<12302=12311,12303
<12303=12310,12304
<12304=12306,12305
<12306=12307
<12307=12309,12308
<12314=12315
<12315=12317,12316
<12318=12319
<12319=12321,12320
<12322=12323
<12323=12330,12329,12324
<12324=12328,12325
<12325=12327,12326
<12331=12332
<12332=12339,12338,12333
<12333=12337,12334
<12334=12336,12335
<12340=12341
<12341=12350,12349,12342
<12342=12348,12343
<12343=12346,12345,12344
<12346=12347
<12351=12352
<12352=12360,12359,12353
<12353=12358,12354
<12354=12356,12355
<12356=12357
<12415=12418,12417,12416
<12418=13657,13647,13638,13629,12419,12426,12682,12689,12705,12719,12730,12739,13127,13139,13151,13163,13175,13187,13199,13211,13223,13235,13244,13257,13270,13283,13296,13309,13322,13330,13343,13348,13383,13390,13402,13414,13426,13438,13450,13462,13474,13486,13498,13510,13522,13534,13546,13558,13570,13582,13594,13606,13615,13622
<12419=12420
<12420=12424,12421
<12421=12422
<12422=12423
<12424=12425
<12426=12674,12670,12667,12427
<12427=12428
<12428=12659,12429
<12429=12646,12633,12620,12611,12540,12531,12520,12509,12508,12507,12506,12505,12504,12503,12430,12434,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502
<12430=12431
<12431=12433,12432
<12434=12435
<12435=12453,12436
<12436=12451,12449,12437
<12437=12438
<12438=12446,12439
<12439=12443,12440
<12440=12442,12441
<12443=12445,12444
<12446=12448,12447
<12449=12450
<12451=12452
<12453=12454
<12509=12510
<12510=12518,12511
<12511=12516,12514,12512
<12512=12513
<12514=12515
<12516=12517
<12518=12519
<12520=12521
<12521=12529,12522
<12522=12527,12525,12523
<12523=12524
<12525=12526
<12527=12528
<12529=12530
<12531=12532
<12532=12538,12533
<12533=12536,12534
<12534=12535
<12536=12537
<12538=12539
<12540=12541
<12541=12610,12609,12608,12542
<12542=12607,12543
<12543=12600,12593,12586,12579,12572,12565,12558,12551,12544
<12544=12550,12545
<12545=12549,12546
<12546=12548,12547
<12551=12557,12552
<12552=12556,12553
<12553=12555,12554
<12558=12564,12559
<12559=12563,12560
<12560=12562,12561
<12565=12571,12566
<12566=12570,12567
<12567=12569,12568
<12572=12578,12573
<12573=12577,12574
<12574=12576,12575
<12579=12585,12580
<12580=12584,12581
<12581=12583,12582
<12586=12592,12587
<12587=12591,12588
<12588=12590,12589
<12593=12599,12594
<12594=12598,12595
<12595=12597,12596
<12600=12606,12601
<12601=12605,12602
<12602=12604,12603
<12611=12612
<12612=12619,12618,12613
<12613=12617,12614
<12614=12616,12615
<12620=12621
<12621=12632,12631,12622
<12622=12630,12623
<12623=12625,12624
<12625=12627,12626
<12627=12629,12628
<12633=12634
<12634=12645,12644,12635
<12635=12643,12636
<12636=12638,12637
<12638=12640,12639
<12640=12642,12641
<12646=12647
<12647=12658,12657,12648
<12648=12656,12649
<12649=12651,12650
<12651=12653,12652
<12653=12655,12654
<12659=12660
<12660=12662,12661
<12662=12664,12663
<12664=12666,12665
<12667=12669,12668
<12670=12671
<12671=12673,12672
<12674=12675
<12675=12676
<12676=12681,12680,12677
<12677=12679,12678
<12682=12683
<12683=12688,12687,12684
<12684=12686,12685
<12689=12701,12690
<12690=12692,12691
<12692=12693
<12693=12699,12694
<12694=12697,12695
<12695=12696
<12697=12698
<12699=12700
<12701=12702
<12702=12704,12703
<12705=12706
<12706=12718,12717,12707
<12707=12716,12708
<12708=12714,12709
<12709=12712,12710
<12710=12711
<12712=12713
<12714=12715
<12719=12720
<12720=12728,12721
<12721=12726,12724,12722
<12722=12723
<12724=12725
<12726=12727
<12728=12729
<12730=12731
<12731=12738,12737,12732
<12732=12736,12733
<12733=12735,12734
<12739=13119,13113,13110,12740
<12740=13101,13092,13052,13042,13036,13032,13026,13009,13000,12970,12961,12944,12943,12942,12941,12939,12938,12937,12936,12934,12933,12932,12931,12929,12920,12909,12751,12750,12749,12748,12746,12745,12744,12743,12741
<12741=12742
<12746=12747
<12751=12901,12897,12894,12752
<12752=12881,12868,12855,12846,12775,12764,12753
<12753=12754
<12754=12762,12755
<12755=12760,12758,12756
<12756=12757
<12758=12759
<12760=12761
<12762=12763
<12764=12765
<12765=12773,12766
<12766=12771,12769,12767
<12767=12768
<12769=12770
<12771=12772
<12773=12774
<12775=12776
<12776=12845,12844,12843,12777
<12777=12842,12778
<12778=12835,12828,12821,12814,12807,12800,12793,12786,12779
<12779=12785,12780
<12780=12784,12781
<12781=12783,12782
<12786=12792,12787
<12787=12791,12788
<12788=12790,12789
<12793=12799,12794
<12794=12798,12795
<12795=12797,12796
<12800=12806,12801
<12801=12805,12802
<12802=12804,12803
<12807=12813,12808
<12808=12812,12809
<12809=12811,12810
<12814=12820,12815
<12815=12819,12816
<12816=12818,12817
<12821=12827,12822
<12822=12826,12823
<12823=12825,12824
<12828=12834,12829
<12829=12833,12830
<12830=12832,12831
<12835=12841,12836
<12836=12840,12837
<12837=12839,12838
<12846=12847
<12847=12854,12853,12848
<12848=12852,12849
<12849=12851,12850
<12855=12856
<12856=12867,12866,12857
<12857=12865,12858
<12858=12860,12859
<12860=12862,12861
<12862=12864,12863
<12868=12869
<12869=12880,12879,12870
<12870=12878,12871
<12871=12873,12872
<12873=12875,12874
<12875=12877,12876
<12881=12882
<12882=12893,12892,12883
<12883=12891,12884
<12884=12886,12885
<12886=12888,12887
<12888=12890,12889
<12894=12896,12895
<12897=12898
<12898=12900,12899
<12901=12902
<12902=12903
<12903=12908,12907,12904
<12904=12906,12905
<12909=12910
<12910=12918,12911
<12911=12916,12914,12912
<12912=12913
<12914=12915
<12916=12917
<12918=12919
<12920=12921
<12921=12928,12927,12922
<12922=12926,12923
<12923=12925,12924
<12929=12930
<12934=12935
<12939=12940
<12944=12945
<12945=12959,12946
<12946=12957,12955,12947
<12947=12948
<12948=12954,12949
<12949=12951,12950
<12951=12953,12952
<12955=12956
<12957=12958
<12959=12960
<12961=12962
<12962=12968,12963
<12963=12966,12964
<12964=12965
<12966=12967
<12968=12969
<12970=12992,12988,12985,12971
<12971=12972
<12972=12973
<12973=12983,12974
<12974=12981,12979,12975
<12975=12976
<12976=12978,12977
<12979=12980
<12981=12982
<12983=12984
<12985=12987,12986
<12988=12989
<12989=12991,12990
<12992=12993
<12993=12994
<12994=12999,12998,12995
<12995=12997,12996
<13000=13001
<13001=13007,13002
<13002=13005,13003
<13003=13004
<13005=13006
<13007=13008
<13009=13010
<13010=13024,13011
<13011=13022,13020,13018,13016,13014,13012
<13012=13013
<13014=13015
<13016=13017
<13018=13019
<13020=13021
<13022=13023
<13024=13025
<13026=13027
<13027=13031,13028
<13028=13030,13029
<13032=13033
<13033=13035,13034
<13036=13037
<13037=13041,13038
<13038=13040,13039
<13042=13049,13046,13043
<13043=13045,13044
<13046=13048,13047
<13049=13051,13050
<13052=13084,13080,13077,13053
<13053=13054
<13054=13055
<13055=13075,13056
<13056=13069,13063,13057
<13057=13058
<13058=13060,13059
<13060=13062,13061
<13063=13064
<13064=13068,13065
<13065=13067,13066
<13069=13070
<13070=13074,13071
<13071=13073,13072
<13075=13076
<13077=13079,13078
<13080=13081
<13081=13083,13082
<13084=13085
<13085=13086
<13086=13091,13090,13087
<13087=13089,13088
<13092=13093
<13093=13100,13099,13094
<13094=13098,13095
<13095=13097,13096
<13101=13102
<13102=13109,13108,13103
<13103=13107,13104
<13104=13106,13105
<13110=13112,13111
<13113=13114
<13114=13118,13115
<13115=13117,13116
<13119=13120
<13120=13121
<13121=13126,13125,13122
<13122=13124,13123
<13127=13128
<13128=13132,13129
<13129=13131,13130
<13132=13138,13133
<13133=13137,13134
<13134=13136,13135
<13139=13140
<13140=13144,13141
<13141=13143,13142
<13144=13150,13145
<13145=13149,13146
<13146=13148,13147
<13151=13152
<13152=13156,13153
<13153=13155,13154
<13156=13162,13157
<13157=13161,13158
<13158=13160,13159
<13163=13164
<13164=13168,13165
<13165=13167,13166
<13168=13174,13169
<13169=13173,13170
<13170=13172,13171
<13175=13176
<13176=13180,13177
<13177=13179,13178
<13180=13186,13181
<13181=13185,13182
<13182=13184,13183
<13187=13188
<13188=13192,13189
<13189=13191,13190
<13192=13198,13193
<13193=13197,13194
<13194=13196,13195
<13199=13200
<13200=13204,13201
<13201=13203,13202
<13204=13210,13205
<13205=13209,13206
<13206=13208,13207
<13211=13212
<13212=13216,13213
<13213=13215,13214
<13216=13222,13217
<13217=13221,13218
<13218=13220,13219
<13223=13224
<13224=13228,13225
<13225=13227,13226
<13228=13234,13229
<13229=13233,13230
<13230=13232,13231
<13235=13236
<13236=13243,13242,13237
<13237=13241,13238
<13238=13240,13239
<13244=13245
<13245=13256,13255,13246
<13246=13254,13247
<13247=13249,13248
<13249=13251,13250
<13251=13253,13252
<13257=13258
<13258=13269,13268,13259
<13259=13267,13260
<13260=13262,13261
<13262=13264,13263
<13264=13266,13265
<13270=13271
<13271=13282,13281,13272
<13272=13280,13273
<13273=13275,13274
<13275=13277,13276
<13277=13279,13278
<13283=13284
<13284=13295,13294,13285
<13285=13293,13286
<13286=13292,13287
<13287=13291,13288
<13288=13290,13289
<13296=13297
<13297=13308,13307,13298
<13298=13306,13299
<13299=13305,13300
<13300=13304,13301
<13301=13303,13302
<13309=13310
<13310=13321,13320,13311
<13311=13319,13312
<13312=13318,13313
<13313=13317,13314
<13314=13316,13315
<13322=13323
<13323=13327,13324
<13324=13326,13325
<13327=13329,13328
<13330=13331
<13331=13335,13332
<13332=13333
<13333=13334
<13335=13336
<13336=13338,13337
<13338=13340,13339
<13340=13342,13341
<13343=13344
<13344=13347,13346,13345
<13348=13349
<13349=13381,13350
<13350=13379,13371,13365,13357,13351
<13351=13352
<13352=13354,13353
<13354=13356,13355
<13357=13358
<13358=13360,13359
<13360=13362,13361
<13362=13364,13363
<13365=13366
<13366=13368,13367
<13368=13370,13369
<13371=13372
<13372=13374,13373
<13374=13376,13375
<13376=13378,13377
<13379=13380
<13381=13382
<13383=13384
<13384=13388,13385
<13385=13386
<13386=13387
<13388=13389
<13390=13391
<13391=13393,13392
<13393=13395,13394
<13395=13397,13396
<13397=13399,13398
<13399=13401,13400
<13402=13403
<13403=13405,13404
<13405=13407,13406
<13407=13409,13408
<13409=13411,13410
<13411=13413,13412
<13414=13415
<13415=13417,13416
<13417=13419,13418
<13419=13421,13420
<13421=13423,13422
<13423=13425,13424
<13426=13427
<13427=13429,13428
<13429=13431,13430
<13431=13433,13432
<13433=13435,13434
<13435=13437,13436
<13438=13439
<13439=13441,13440
<13441=13443,13442
<13443=13445,13444
<13445=13447,13446
<13447=13449,13448
<13450=13451
<13451=13453,13452
<13453=13455,13454
<13455=13457,13456
<13457=13459,13458
<13459=13461,13460
<13462=13463
<13463=13465,13464
<13465=13467,13466
<13467=13469,13468
<13469=13471,13470
<13471=13473,13472
<13474=13475
<13475=13477,13476
<13477=13479,13478
<13479=13481,13480
<13481=13483,13482
<13483=13485,13484
<13486=13487
<13487=13489,13488
<13489=13491,13490
<13491=13493,13492
<13493=13495,13494
<13495=13497,13496
<13498=13499
<13499=13501,13500
<13501=13503,13502
<13503=13505,13504
<13505=13507,13506
<13507=13509,13508
<13510=13511
<13511=13513,13512
<13513=13515,13514
<13515=13517,13516
<13517=13519,13518
<13519=13521,13520
<13522=13523
<13523=13525,13524
<13525=13527,13526
<13527=13529,13528
<13529=13531,13530
<13531=13533,13532
<13534=13535
<13535=13537,13536
<13537=13539,13538
<13539=13541,13540
<13541=13543,13542
<13543=13545,13544
<13546=13547
<13547=13549,13548
<13549=13551,13550
<13551=13553,13552
<13553=13555,13554
<13555=13557,13556
<13558=13559
<13559=13561,13560
<13561=13563,13562
<13563=13565,13564
<13565=13567,13566
<13567=13569,13568
<13570=13571
<13571=13573,13572
<13573=13575,13574
<13575=13577,13576
<13577=13579,13578
<13579=13581,13580
<13582=13583
<13583=13585,13584
<13585=13587,13586
<13587=13589,13588
<13589=13591,13590
<13591=13593,13592
<13594=13595
<13595=13597,13596
<13597=13599,13598
<13599=13601,13600
<13601=13603,13602
<13603=13605,13604
<13606=13607
<13607=13613,13608
<13608=13611,13609
<13609=13610
<13611=13612
<13613=13614
<13615=13616
<13616=13621,13620,13617
<13617=13619,13618
<13622=13623
<13623=13628,13627,13624
<13624=13626,13625
<13629=13630
<13630=13637,13636,13631
<13631=13635,13632
<13632=13634,13633
<13638=13639
<13639=13646,13645,13640
<13640=13644,13641
<13641=13643,13642
<13647=13648
<13648=13656,13655,13649
<13649=13654,13650
<13650=13652,13651
<13652=13653
<13657=13665,13658
<13658=13664,13663,13662,13661,13660,13659
<13665=13666
<13666=13672,13667
<13667=13671,13668
<13668=13670,13669
<13672=13676,13673
<13673=13675,13674
