>5	FunctionDef	StateObject 
>6	ParameterList	 
>7	CompoundStatement	 
>11	FunctionDef	StateObject 
>12	ParameterList	StateObject * sb , const std 
>13	Parameter	 
>14	Identifier	name
>15	ParameterType	const std 
>16	Parameter	 
>17	Identifier	sb
>18	ParameterType	StateObject *
>19	ReturnType	void
>20	CompoundStatement	 
>21	ExpressionStatement	 
>22	CallExpression	core -> registerStateObject ( sb , name )
>23	ArgumentList	sb
>24	Argument	name
>25	Identifier	name
>26	Argument	sb
>27	Identifier	sb
>28	Callee	core -> registerStateObject
>29	PtrMemberAccess	core -> registerStateObject
>30	Identifier	registerStateObject
>31	Identifier	core
>38	FunctionDef	StateObject 
>39	ParameterList	 
>40	CompoundStatement	 
>44	FunctionDef	StateObject 
>45	ParameterList	 
>46	ReturnType	void
>47	CompoundStatement	 
>48	ExpressionStatement	 
>49	CallExpression	clearCreatedEvents ( )
>50	ArgumentList	 
>51	Callee	clearCreatedEvents
>52	Identifier	clearCreatedEvents
>53	ExpressionStatement	 
>54	CallExpression	clearActions ( )
>55	ArgumentList	 
>56	Callee	clearActions
>57	Identifier	clearActions
>61	FunctionDef	StateObject 
>62	ParameterList	RenderObject * renderObject , int layer
>63	Parameter	 
>64	Identifier	layer
>65	ParameterType	int
>66	Parameter	 
>67	Identifier	renderObject
>68	ParameterType	RenderObject *
>69	ReturnType	void
>70	CompoundStatement	 
>71	ExpressionStatement	 
>72	CallExpression	stateManager -> getState ( name ) -> addRenderObject ( renderObject , layer )
>73	ArgumentList	renderObject
>74	Argument	layer
>75	Identifier	layer
>76	Argument	renderObject
>77	Identifier	renderObject
>78	Callee	stateManager -> getState ( name ) -> addRenderObject
>79	PtrMemberAccess	stateManager -> getState ( name ) -> addRenderObject
>80	Identifier	addRenderObject
>81	CallExpression	stateManager -> getState ( name )
>82	ArgumentList	name
>83	Argument	name
>84	Identifier	name
>85	Callee	stateManager -> getState
>86	PtrMemberAccess	stateManager -> getState
>87	Identifier	getState
>88	Identifier	stateManager
>98	FunctionDef	StateObject 
>99	ParameterList	RenderObject * renderObject
>100	Parameter	 
>101	Identifier	renderObject
>102	ParameterType	RenderObject *
>103	ReturnType	void
>104	CompoundStatement	 
>105	ExpressionStatement	 
>106	CallExpression	stateManager -> getState ( name ) -> removeRenderObject ( renderObject )
>107	ArgumentList	renderObject
>108	Argument	renderObject
>109	Identifier	renderObject
>110	Callee	stateManager -> getState ( name ) -> removeRenderObject
>111	PtrMemberAccess	stateManager -> getState ( name ) -> removeRenderObject
>112	Identifier	removeRenderObject
>113	CallExpression	stateManager -> getState ( name )
>114	ArgumentList	name
>115	Argument	name
>116	Identifier	name
>117	Callee	stateManager -> getState
>118	PtrMemberAccess	stateManager -> getState
>119	Identifier	getState
>120	Identifier	stateManager
>129	FunctionDef	StateObject 
>130	ParameterList	int id , int state
>131	Parameter	 
>132	Identifier	state
>133	ParameterType	int
>134	Parameter	 
>135	Identifier	id
>136	ParameterType	int
>137	ReturnType	void
>138	CompoundStatement	 
>144	FunctionDef	StateObject 
>145	ParameterList	float dt
>146	Parameter	 
>147	Identifier	dt
>148	ParameterType	float
>149	ReturnType	void
>150	CompoundStatement	 
>151	ExpressionStatement	 
>152	CallExpression	ActionMapper 
>153	ArgumentList	dt
>154	Argument	dt
>155	Identifier	dt
>156	Callee	ActionMapper 
>157	Identifier	ActionMapper 
>162	FunctionDef	StateData 
>163	ParameterList	 
>164	CompoundStatement	 
>165	ExpressionStatement	 
>166	AssignmentExpr	stateObject = 0
>167	PrimaryExpression	0
>168	Identifier	stateObject
>173	FunctionDef	StateData 
>174	ParameterList	 
>175	CompoundStatement	 
>176	ForStatement	for ( int i = 0 ; i < renderObjects . size ( ) ; i ++ )
>177	CompoundStatement	 
>178	ExpressionStatement	 
>179	ArrayIndexing	renderObjects [ i ]
>180	Identifier	i
>181	Identifier	renderObjects
>182	Statement	 
>183	ExpressionStatement	 
>184	CallExpression	removeRenderObject ( renderObjects [ i ] )
>185	ArgumentList	renderObjects [ i ]
>186	Argument	renderObjects [ i ]
>187	ArrayIndexing	renderObjects [ i ]
>188	Identifier	i
>189	Identifier	renderObjects
>190	Callee	removeRenderObject
>191	Identifier	removeRenderObject
>192	IncDecOp	 
>193	IncDec	++
>194	Identifier	i
>195	Condition	 
>196	RelationalExpression	i < renderObjects . size ( )
>197	CallExpression	renderObjects . size ( )
>198	ArgumentList	 
>199	Callee	renderObjects . size
>200	MemberAccess	renderObjects . size
>201	Identifier	size
>202	Identifier	renderObjects
>203	Identifier	i
>204	ForInit	 
>205	IdentifierDeclStatement	int i = 0 ;
>206	IdentifierDecl	i = 0
>207	AssignmentExpr	i = 0
>208	PrimaryExpression	0
>209	Identifier	i
>210	Identifier	i
>211	IdentifierDeclType	int
>220	FunctionDef	StateData 
>221	ParameterList	RenderObject * renderObject , int layer
>222	Parameter	 
>223	Identifier	layer
>224	ParameterType	int
>225	Parameter	 
>226	Identifier	renderObject
>227	ParameterType	RenderObject *
>228	ReturnType	void
>229	CompoundStatement	 
>230	ExpressionStatement	 
>231	AssignmentExpr	renderObject -> layer = layer
>232	Identifier	layer
>233	PtrMemberAccess	renderObject -> layer
>234	Identifier	layer
>235	Identifier	renderObject
>236	ExpressionStatement	 
>237	CallExpression	renderObject -> setStateDataObject ( this )
>238	ArgumentList	this
>239	Argument	this
>240	Identifier	this
>241	Callee	renderObject -> setStateDataObject
>242	PtrMemberAccess	renderObject -> setStateDataObject
>243	Identifier	setStateDataObject
>244	Identifier	renderObject
>245	ExpressionStatement	 
>246	CallExpression	renderObjects . push_back ( renderObject )
>247	ArgumentList	renderObject
>248	Argument	renderObject
>249	Identifier	renderObject
>250	Callee	renderObjects . push_back
>251	MemberAccess	renderObjects . push_back
>252	Identifier	push_back
>253	Identifier	renderObjects
>254	ExpressionStatement	 
>255	CallExpression	core -> addRenderObject ( renderObject , layer )
>256	ArgumentList	renderObject
>257	Argument	layer
>258	Identifier	layer
>259	Argument	renderObject
>260	Identifier	renderObject
>261	Callee	core -> addRenderObject
>262	PtrMemberAccess	core -> addRenderObject
>263	Identifier	addRenderObject
>264	Identifier	core
>275	FunctionDef	StateData 
>276	ParameterList	RenderObject * renderObject
>277	Parameter	 
>278	Identifier	renderObject
>279	ParameterType	RenderObject *
>280	ReturnType	void
>281	CompoundStatement	 
>282	ExpressionStatement	 
>283	CallExpression	removeRenderObjectFromList ( renderObject )
>284	ArgumentList	renderObject
>285	Argument	renderObject
>286	Identifier	renderObject
>287	Callee	removeRenderObjectFromList
>288	Identifier	removeRenderObjectFromList
>289	ExpressionStatement	 
>290	CallExpression	core -> enqueueRenderObjectDeletion ( renderObject )
>291	ArgumentList	renderObject
>292	Argument	renderObject
>293	Identifier	renderObject
>294	Callee	core -> enqueueRenderObjectDeletion
>295	PtrMemberAccess	core -> enqueueRenderObjectDeletion
>296	Identifier	enqueueRenderObjectDeletion
>297	Identifier	core
>303	FunctionDef	StateData 
>304	ParameterList	RenderObject * renderObject
>305	Parameter	 
>306	Identifier	renderObject
>307	ParameterType	RenderObject *
>308	ReturnType	void
>309	CompoundStatement	 
>310	ForStatement	for ( std 
>311	CompoundStatement	 
>312	IfStatement	if ( ( * i ) == renderObject )
>313	ElseStatement	else
>314	CompoundStatement	 
>315	ExpressionStatement	 
>316	IncDecOp	i ++
>317	IncDec	++
>318	Identifier	i
>319	CompoundStatement	 
>320	ExpressionStatement	 
>321	AssignmentExpr	i = renderObjects . erase ( i )
>322	CallExpression	renderObjects . erase ( i )
>323	ArgumentList	i
>324	Argument	i
>325	Identifier	i
>326	Callee	renderObjects . erase
>327	MemberAccess	renderObjects . erase
>328	Identifier	erase
>329	Identifier	renderObjects
>330	Identifier	i
>331	Condition	 
>332	EqualityExpression	( * i ) == renderObject
>333	Identifier	renderObject
>334	UnaryOp	* i
>335	Identifier	i
>336	UnaryOperator	*
>337	Condition	 
>338	EqualityExpression	i != renderObjects . end ( )
>339	CallExpression	renderObjects . end ( )
>340	ArgumentList	 
>341	Callee	renderObjects . end
>342	MemberAccess	renderObjects . end
>343	Identifier	end
>344	Identifier	renderObjects
>345	Identifier	i
>346	ForInit	 
>347	IdentifierDeclStatement	std 
>348	IdentifierDecl	i = renderObjects . begin ( )
>349	AssignmentExpr	i = renderObjects . begin ( )
>350	CallExpression	renderObjects . begin ( )
>351	ArgumentList	 
>352	Callee	renderObjects . begin
>353	MemberAccess	renderObjects . begin
>354	Identifier	begin
>355	Identifier	renderObjects
>356	Identifier	i
>357	Identifier	i
>358	IdentifierDeclType	std 
>369	FunctionDef	StateData 
>370	ParameterList	 
>371	ReturnType	void
>372	CompoundStatement	 
>373	ExpressionStatement	 
>374	CallExpression	renderObjects . clear ( )
>375	ArgumentList	 
>376	Callee	renderObjects . clear
>377	MemberAccess	renderObjects . clear
>378	Identifier	clear
>379	Identifier	renderObjects
>380	ForStatement	for ( int i = 0 ; i < renderObjects . size ( ) ; i ++ )
>381	CompoundStatement	 
>382	IfStatement	if ( r && ! r -> isDead ( ) )
>383	CompoundStatement	 
>384	ExpressionStatement	 
>385	CallExpression	core -> enqueueRenderObjectDeletion ( renderObjects [ i ] )
>386	ArgumentList	renderObjects [ i ]
>387	Argument	renderObjects [ i ]
>388	ArrayIndexing	renderObjects [ i ]
>389	Identifier	i
>390	Identifier	renderObjects
>391	Callee	core -> enqueueRenderObjectDeletion
>392	PtrMemberAccess	core -> enqueueRenderObjectDeletion
>393	Identifier	enqueueRenderObjectDeletion
>394	Identifier	core
>395	Condition	 
>396	AndExpression	r && ! r -> isDead ( )
>397	UnaryOp	! r -> isDead ( )
>398	CallExpression	r -> isDead ( )
>399	ArgumentList	 
>400	Callee	r -> isDead
>401	PtrMemberAccess	r -> isDead
>402	Identifier	isDead
>403	Identifier	r
>404	UnaryOperator	!
>405	Identifier	r
>406	IdentifierDeclStatement	 
>407	IdentifierDecl	* r = renderObjects [ i ]
>408	AssignmentExpr	* r = renderObjects [ i ]
>409	ArrayIndexing	renderObjects [ i ]
>410	Identifier	i
>411	Identifier	renderObjects
>412	Identifier	r
>413	Identifier	r
>414	IdentifierDeclType	RenderObject *
>415	IncDecOp	 
>416	IncDec	++
>417	Identifier	i
>418	Condition	 
>419	RelationalExpression	i < renderObjects . size ( )
>420	CallExpression	renderObjects . size ( )
>421	ArgumentList	 
>422	Callee	renderObjects . size
>423	MemberAccess	renderObjects . size
>424	Identifier	size
>425	Identifier	renderObjects
>426	Identifier	i
>427	ForInit	 
>428	IdentifierDeclStatement	int i = 0 ;
>429	IdentifierDecl	i = 0
>430	AssignmentExpr	i = 0
>431	PrimaryExpression	0
>432	Identifier	i
>433	Identifier	i
>434	IdentifierDeclType	int
>447	FunctionDef	StateManager 
>448	ParameterList	 
>449	CompoundStatement	 
>450	ExpressionStatement	 
>451	AssignmentExpr	statesTopIndex = - 1
>452	UnaryOp	- 1
>453	PrimaryExpression	1
>454	UnaryOperator	-
>455	Identifier	statesTopIndex
>456	ExpressionStatement	 
>457	AssignmentExpr	enqueuedStateStage = - 1
>458	UnaryOp	- 1
>459	PrimaryExpression	1
>460	UnaryOperator	-
>461	Identifier	enqueuedStateStage
>462	ExpressionStatement	 
>463	AssignmentExpr	stateChangeFlag = false
>464	Identifier	false
>465	Identifier	stateChangeFlag
>466	ExpressionStatement	 
>467	AssignmentExpr	stateManager = this
>468	Identifier	this
>469	Identifier	stateManager
>479	FunctionDef	StateManager 
>480	ParameterList	 
>481	CompoundStatement	 
>482	ExpressionStatement	 
>483	CallExpression	clearStateObjects ( )
>484	ArgumentList	 
>485	Callee	clearStateObjects
>486	Identifier	clearStateObjects
>490	FunctionDef	StateManager 
>491	ParameterList	const std 
>492	Parameter	 
>493	Identifier	state
>494	ParameterType	const std 
>495	ReturnType	StateData *
>496	CompoundStatement	 
>497	ReturnStatement	 
>498	PrimaryExpression	0
>499	ForStatement	for ( int i = 0 ; i <= statesTopIndex ; i ++ )
>500	CompoundStatement	 
>501	IfStatement	if ( s -> name == state )
>502	ReturnStatement	 
>503	Identifier	s
>504	Condition	 
>505	EqualityExpression	s -> name == state
>506	Identifier	state
>507	PtrMemberAccess	s -> name
>508	Identifier	name
>509	Identifier	s
>510	IdentifierDeclStatement	 
>511	IdentifierDecl	* s = states [ i ]
>512	AssignmentExpr	* s = states [ i ]
>513	ArrayIndexing	states [ i ]
>514	Identifier	i
>515	Identifier	states
>516	Identifier	s
>517	Identifier	s
>518	IdentifierDeclType	StateData *
>519	IncDecOp	 
>520	IncDec	++
>521	Identifier	i
>522	Condition	 
>523	RelationalExpression	i <= statesTopIndex
>524	Identifier	statesTopIndex
>525	Identifier	i
>526	ForInit	 
>527	IdentifierDeclStatement	int i = 0 ;
>528	IdentifierDecl	i = 0
>529	AssignmentExpr	i = 0
>530	PrimaryExpression	0
>531	Identifier	i
>532	Identifier	i
>533	IdentifierDeclType	int
>546	FunctionDef	StateManager 
>547	ParameterList	std 
>548	Parameter	 
>549	Identifier	state
>550	ParameterType	std 
>551	ReturnType	void
>552	CompoundStatement	 
>553	ExpressionStatement	 
>554	CallExpression	getState ( state ) -> eraseRenderObjects ( )
>555	ArgumentList	 
>556	Callee	getState ( state ) -> eraseRenderObjects
>557	PtrMemberAccess	getState ( state ) -> eraseRenderObjects
>558	Identifier	eraseRenderObjects
>559	CallExpression	getState ( state )
>560	ArgumentList	state
>561	Argument	state
>562	Identifier	state
>563	Callee	getState
>564	Identifier	getState
>570	FunctionDef	StateManager 
>571	ParameterList	const std 
>572	Parameter	 
>573	Identifier	state
>574	ParameterType	const std 
>575	ReturnType	void
>576	CompoundStatement	 
>577	IfStatement	if ( canChangeState ( ) )
>578	CompoundStatement	 
>579	ExpressionStatement	 
>580	CallExpression	pushState ( state )
>581	ArgumentList	state
>582	Argument	state
>583	Identifier	state
>584	Callee	pushState
>585	Identifier	pushState
>586	ExpressionStatement	 
>587	CallExpression	popAllStates ( )
>588	ArgumentList	 
>589	Callee	popAllStates
>590	Identifier	popAllStates
>591	Condition	 
>592	CallExpression	canChangeState ( )
>593	ArgumentList	 
>594	Callee	canChangeState
>595	Identifier	canChangeState
>601	FunctionDef	StateManager 
>602	ParameterList	const std 
>603	Parameter	 
>604	Identifier	staged
>605	ParameterType	bool
>606	Parameter	 
>607	Identifier	force
>608	ParameterType	bool
>609	Parameter	 
>610	Identifier	state
>611	ParameterType	const std 
>612	ReturnType	void
>613	CompoundStatement	 
>614	IfStatement	if ( force || canChangeState ( ) )
>615	CompoundStatement	 
>616	IfStatement	if ( staged )
>617	ElseStatement	else
>618	CompoundStatement	 
>619	ExpressionStatement	 
>620	AssignmentExpr	enqueuedStateStage = - 1
>621	UnaryOp	- 1
>622	PrimaryExpression	1
>623	UnaryOperator	-
>624	Identifier	enqueuedStateStage
>625	CompoundStatement	 
>626	ExpressionStatement	 
>627	AssignmentExpr	enqueuedStateStage = 0
>628	PrimaryExpression	0
>629	Identifier	enqueuedStateStage
>630	Condition	 
>631	Identifier	staged
>632	ExpressionStatement	 
>633	AssignmentExpr	enqueuedJumpState = state
>634	Identifier	state
>635	Identifier	enqueuedJumpState
>636	Condition	 
>637	OrExpression	force || canChangeState ( )
>638	CallExpression	canChangeState ( )
>639	ArgumentList	 
>640	Callee	canChangeState
>641	Identifier	canChangeState
>642	Identifier	force
>652	FunctionDef	StateManager 
>653	ParameterList	 
>654	ReturnType	bool
>655	CompoundStatement	 
>656	ReturnStatement	 
>657	UnaryOp	! enqueuedJumpState . empty ( )
>658	CallExpression	enqueuedJumpState . empty ( )
>659	ArgumentList	 
>660	Callee	enqueuedJumpState . empty
>661	MemberAccess	enqueuedJumpState . empty
>662	Identifier	empty
>663	Identifier	enqueuedJumpState
>664	UnaryOperator	!
>670	FunctionDef	StateManager 
>671	ParameterList	const std 
>672	Parameter	 
>673	Identifier	s
>674	ParameterType	const std 
>675	ReturnType	void
>676	CompoundStatement	 
>677	IfStatement	if ( canChangeState ( ) )
>678	CompoundStatement	 
>679	ExpressionStatement	 
>680	AssignmentExpr	stateChangeFlag = true
>681	Identifier	true
>682	Identifier	stateChangeFlag
>683	IfStatement	if ( stateObjects [ state ] )
>684	CompoundStatement	 
>685	ExpressionStatement	 
>686	CallExpression	stateObjects [ state ] -> applyState ( )
>687	ArgumentList	 
>688	Callee	stateObjects [ state ] -> applyState
>689	PtrMemberAccess	stateObjects [ state ] -> applyState
>690	Identifier	applyState
>691	ArrayIndexing	stateObjects [ state ]
>692	Identifier	state
>693	Identifier	stateObjects
>694	ExpressionStatement	 
>695	AssignmentExpr	s -> stateObject = stateObjects [ state ]
>696	ArrayIndexing	stateObjects [ state ]
>697	Identifier	state
>698	Identifier	stateObjects
>699	PtrMemberAccess	s -> stateObject
>700	Identifier	stateObject
>701	Identifier	s
>702	Condition	 
>703	ArrayIndexing	stateObjects [ state ]
>704	Identifier	state
>705	Identifier	stateObjects
>706	ExpressionStatement	 
>707	CallExpression	applyState ( state )
>708	ArgumentList	state
>709	Argument	state
>710	Identifier	state
>711	Callee	applyState
>712	Identifier	applyState
>713	ExpressionStatement	 
>714	AssignmentExpr	states [ ++ statesTopIndex ] = s
>715	Identifier	s
>716	ArrayIndexing	states [ ++ statesTopIndex ]
>717	UnaryExpression	++ statesTopIndex
>718	Identifier	statesTopIndex
>719	IncDec	++
>720	Identifier	states
>721	ExpressionStatement	 
>722	AssignmentExpr	s -> name = state
>723	Identifier	state
>724	PtrMemberAccess	s -> name
>725	Identifier	name
>726	Identifier	s
>727	ExpressionStatement	 
>728	Identifier	StateData
>729	Statement	 
>730	Statement	 
>731	Statement	 
>732	Statement	 
>733	Statement	 
>734	IfStatement	if ( states_full ( ) )
>735	CompoundStatement	 
>736	ReturnStatement	 
>737	ExpressionStatement	 
>738	CallExpression	debugLog ( \"state stack overflow!!\" )
>739	ArgumentList	\"state stack overflow!!\"
>740	Argument	\"state stack overflow!!\"
>741	PrimaryExpression	\"state stack overflow!!\"
>742	Callee	debugLog
>743	Identifier	debugLog
>744	Condition	 
>745	CallExpression	states_full ( )
>746	ArgumentList	 
>747	Callee	states_full
>748	Identifier	states_full
>749	Condition	 
>750	CallExpression	canChangeState ( )
>751	ArgumentList	 
>752	Callee	canChangeState
>753	Identifier	canChangeState
>754	ExpressionStatement	 
>755	CallExpression	stringToLower ( state )
>756	ArgumentList	state
>757	Argument	state
>758	Identifier	state
>759	Callee	stringToLower
>760	Identifier	stringToLower
>761	IdentifierDeclStatement	 
>762	IdentifierDecl	state = s
>763	AssignmentExpr	state = s
>764	Identifier	s
>765	Identifier	s
>766	Identifier	state
>767	IdentifierDeclType	std 
>787	FunctionDef	StateManager 
>788	ParameterList	 
>789	ReturnType	void
>790	CompoundStatement	 
>791	IfStatement	if ( ! states_empty ( ) )
>792	CompoundStatement	 
>793	ExpressionStatement	 
>794	CallExpression	popAllStates ( )
>795	ArgumentList	 
>796	Callee	popAllStates
>797	Identifier	popAllStates
>798	ExpressionStatement	 
>799	CallExpression	popState ( )
>800	ArgumentList	 
>801	Callee	popState
>802	Identifier	popState
>803	Condition	 
>804	UnaryOp	! states_empty ( )
>805	CallExpression	states_empty ( )
>806	ArgumentList	 
>807	Callee	states_empty
>808	Identifier	states_empty
>809	UnaryOperator	!
>814	FunctionDef	StateManager 
>815	ParameterList	 
>816	ReturnType	void
>817	CompoundStatement	 
>818	IfStatement	if ( canChangeState ( ) && ! states_empty ( ) )
>819	CompoundStatement	 
>820	ExpressionStatement	 
>821	AssignmentExpr	stateChangeFlag = true
>822	Identifier	true
>823	Identifier	stateChangeFlag
>824	ExpressionStatement	 
>825	IncDecOp	statesTopIndex --
>826	IncDec	--
>827	Identifier	statesTopIndex
>828	IfStatement	if ( core -> getNestedMains ( ) == 1 )
>829	ExpressionStatement	 
>830	CallExpression	core -> clearGarbage ( )
>831	ArgumentList	 
>832	Callee	core -> clearGarbage
>833	PtrMemberAccess	core -> clearGarbage
>834	Identifier	clearGarbage
>835	Identifier	core
>836	Condition	 
>837	EqualityExpression	core -> getNestedMains ( ) == 1
>838	PrimaryExpression	1
>839	CallExpression	core -> getNestedMains ( )
>840	ArgumentList	 
>841	Callee	core -> getNestedMains
>842	PtrMemberAccess	core -> getNestedMains
>843	Identifier	getNestedMains
>844	Identifier	core
>845	ExpressionStatement	 
>846	CallExpression	states_top ( )
>847	ArgumentList	 
>848	Callee	states_top
>849	Identifier	states_top
>850	Statement	 
>851	ExpressionStatement	 
>852	CallExpression	removeState ( n )
>853	ArgumentList	n
>854	Argument	n
>855	Identifier	n
>856	Callee	removeState
>857	Identifier	removeState
>858	IdentifierDeclStatement	 
>859	IdentifierDecl	n = ( * ( states_top ( ) ) ) . name
>860	AssignmentExpr	n = ( * ( states_top ( ) ) ) . name
>861	MemberAccess	( * ( states_top ( ) ) ) . name
>862	Identifier	name
>863	UnaryOp	* ( states_top ( ) )
>864	CallExpression	states_top ( )
>865	ArgumentList	 
>866	Callee	states_top
>867	Identifier	states_top
>868	UnaryOperator	*
>869	Identifier	n
>870	Identifier	n
>871	IdentifierDeclType	std 
>872	IfStatement	if ( stateObjects [ ( * ( states_top ( ) ) ) . name ] )
>873	ExpressionStatement	 
>874	CallExpression	stateObjects [ ( * ( states_top ( ) ) ) . name ] -> removeState ( )
>875	ArgumentList	 
>876	Callee	stateObjects [ ( * ( states_top ( ) ) ) . name ] -> removeState
>877	PtrMemberAccess	stateObjects [ ( * ( states_top ( ) ) ) . name ] -> removeState
>878	Identifier	removeState
>879	ArrayIndexing	stateObjects [ ( * ( states_top ( ) ) ) . name ]
>880	MemberAccess	( * ( states_top ( ) ) ) . name
>881	Identifier	name
>882	UnaryOp	* ( states_top ( ) )
>883	CallExpression	states_top ( )
>884	ArgumentList	 
>885	Callee	states_top
>886	Identifier	states_top
>887	UnaryOperator	*
>888	Identifier	stateObjects
>889	Condition	 
>890	ArrayIndexing	stateObjects [ ( * ( states_top ( ) ) ) . name ]
>891	MemberAccess	( * ( states_top ( ) ) ) . name
>892	Identifier	name
>893	UnaryOp	* ( states_top ( ) )
>894	CallExpression	states_top ( )
>895	ArgumentList	 
>896	Callee	states_top
>897	Identifier	states_top
>898	UnaryOperator	*
>899	Identifier	stateObjects
>900	Condition	 
>901	AndExpression	canChangeState ( ) && ! states_empty ( )
>902	UnaryOp	! states_empty ( )
>903	CallExpression	states_empty ( )
>904	ArgumentList	 
>905	Callee	states_empty
>906	Identifier	states_empty
>907	UnaryOperator	!
>908	CallExpression	canChangeState ( )
>909	ArgumentList	 
>910	Callee	canChangeState
>911	Identifier	canChangeState
>933	FunctionDef	StateManager 
>934	ParameterList	const std 
>935	Parameter	 
>936	Identifier	typeidName
>937	ParameterType	const std 
>938	ReturnType	std 
>939	CompoundStatement	 
>940	ReturnStatement	 
>941	PrimaryExpression	\"\"
>946	FunctionDef	StateManager 
>947	ParameterList	StateObject * stateObject , const std 
>948	Parameter	 
>949	Identifier	name
>950	ParameterType	const std 
>951	Parameter	 
>952	Identifier	stateObject
>953	ParameterType	StateObject *
>954	ReturnType	void
>955	CompoundStatement	 
>956	IfStatement	if ( ! stateObjects [ stateObject -> name ] )
>957	ExpressionStatement	 
>958	AssignmentExpr	stateObjects [ stateObject -> name ] = stateObject
>959	Identifier	stateObject
>960	ArrayIndexing	stateObjects [ stateObject -> name ]
>961	PtrMemberAccess	stateObject -> name
>962	Identifier	name
>963	Identifier	stateObject
>964	Identifier	stateObjects
>965	Condition	 
>966	UnaryOp	! stateObjects [ stateObject -> name ]
>967	ArrayIndexing	stateObjects [ stateObject -> name ]
>968	PtrMemberAccess	stateObject -> name
>969	Identifier	name
>970	Identifier	stateObject
>971	Identifier	stateObjects
>972	UnaryOperator	!
>973	IfStatement	if ( stateObject -> name . empty ( ) )
>974	CompoundStatement	 
>975	ExpressionStatement	 
>976	CallExpression	exit_error ( \"StateManager
>977	ArgumentList	\"StateManager
>978	Argument	\"StateManager
>979	PrimaryExpression	\"StateManager
>980	Callee	exit_error
>981	Identifier	exit_error
>982	Condition	 
>983	CallExpression	stateObject -> name . empty ( )
>984	ArgumentList	 
>985	Callee	stateObject -> name . empty
>986	MemberAccess	stateObject -> name . empty
>987	Identifier	empty
>988	PtrMemberAccess	stateObject -> name
>989	Identifier	name
>990	Identifier	stateObject
>991	ExpressionStatement	 
>992	CallExpression	stringToLower ( stateObject -> name )
>993	ArgumentList	stateObject -> name
>994	Argument	stateObject -> name
>995	PtrMemberAccess	stateObject -> name
>996	Identifier	name
>997	Identifier	stateObject
>998	Callee	stringToLower
>999	Identifier	stringToLower
>1000	ExpressionStatement	 
>1001	AssignmentExpr	stateObject -> name = name
>1002	Identifier	name
>1003	PtrMemberAccess	stateObject -> name
>1004	Identifier	name
>1005	Identifier	stateObject
>1018	FunctionDef	StateManager 
>1019	ParameterList	StateObject * s
>1020	Parameter	 
>1021	Identifier	s
>1022	ParameterType	StateObject *
>1023	ReturnType	StateObject *
>1024	CompoundStatement	 
>1025	ReturnStatement	 
>1026	Identifier	s
>1027	ExpressionStatement	 
>1028	CallExpression	stateInstances . push_back ( s )
>1029	ArgumentList	s
>1030	Argument	s
>1031	Identifier	s
>1032	Callee	stateInstances . push_back
>1033	MemberAccess	stateInstances . push_back
>1034	Identifier	push_back
>1035	Identifier	stateInstances
>1041	FunctionDef	StateManager 
>1042	ParameterList	 
>1043	ReturnType	void
>1044	CompoundStatement	 
>1045	ExpressionStatement	 
>1046	CallExpression	stateInstances . clear ( )
>1047	ArgumentList	 
>1048	Callee	stateInstances . clear
>1049	MemberAccess	stateInstances . clear
>1050	Identifier	clear
>1051	Identifier	stateInstances
>1052	ForStatement	for ( int i = 0 ; i < stateInstances . size ( ) ; i ++ )
>1053	CompoundStatement	 
>1054	ExpressionStatement	 
>1055	Identifier	obj
>1056	Statement	 
>1057	IdentifierDeclStatement	 
>1058	IdentifierDecl	* obj = stateInstances [ i ]
>1059	AssignmentExpr	* obj = stateInstances [ i ]
>1060	ArrayIndexing	stateInstances [ i ]
>1061	Identifier	i
>1062	Identifier	stateInstances
>1063	Identifier	obj
>1064	Identifier	obj
>1065	IdentifierDeclType	StateObject *
>1066	IncDecOp	 
>1067	IncDec	++
>1068	Identifier	i
>1069	Condition	 
>1070	RelationalExpression	i < stateInstances . size ( )
>1071	CallExpression	stateInstances . size ( )
>1072	ArgumentList	 
>1073	Callee	stateInstances . size
>1074	MemberAccess	stateInstances . size
>1075	Identifier	size
>1076	Identifier	stateInstances
>1077	Identifier	i
>1078	ForInit	 
>1079	IdentifierDeclStatement	int i = 0 ;
>1080	IdentifierDecl	i = 0
>1081	AssignmentExpr	i = 0
>1082	PrimaryExpression	0
>1083	Identifier	i
>1084	Identifier	i
>1085	IdentifierDeclType	int
>1095	FunctionDef	StateManager 
>1096	ParameterList	 
>1097	ReturnType	void
>1098	CompoundStatement	 
>1099	ExpressionStatement	 
>1100	CallExpression	stateObjects . clear ( )
>1101	ArgumentList	 
>1102	Callee	stateObjects . clear
>1103	MemberAccess	stateObjects . clear
>1104	Identifier	clear
>1105	Identifier	stateObjects
>1110	FunctionDef	StateManager 
>1111	ParameterList	float dt
>1112	Parameter	 
>1113	Identifier	dt
>1114	ParameterType	float
>1115	ReturnType	void
>1116	CompoundStatement	 
>1117	IfStatement	if ( canChangeState ( ) && ! enqueuedJumpState . empty ( ) )
>1118	CompoundStatement	 
>1119	IfStatement	if ( enqueuedStateStage == 0 )
>1120	ElseStatement	else
>1121	IfStatement	if ( enqueuedStateStage == - 1 )
>1122	CompoundStatement	 
>1123	ExpressionStatement	 
>1124	CallExpression	jumpState ( copy )
>1125	ArgumentList	copy
>1126	Argument	copy
>1127	Identifier	copy
>1128	Callee	jumpState
>1129	Identifier	jumpState
>1130	ExpressionStatement	 
>1131	AssignmentExpr	enqueuedJumpState = \"\"
>1132	PrimaryExpression	\"\"
>1133	Identifier	enqueuedJumpState
>1134	IdentifierDeclStatement	 
>1135	IdentifierDecl	copy = enqueuedJumpState
>1136	AssignmentExpr	copy = enqueuedJumpState
>1137	Identifier	enqueuedJumpState
>1138	Identifier	enqueuedJumpState
>1139	Identifier	copy
>1140	IdentifierDeclType	std 
>1141	Condition	 
>1142	EqualityExpression	enqueuedStateStage == - 1
>1143	UnaryOp	- 1
>1144	PrimaryExpression	1
>1145	UnaryOperator	-
>1146	Identifier	enqueuedStateStage
>1147	CompoundStatement	 
>1148	ExpressionStatement	 
>1149	CallExpression	popAllStates ( )
>1150	ArgumentList	 
>1151	Callee	popAllStates
>1152	Identifier	popAllStates
>1153	ExpressionStatement	 
>1154	AssignmentExpr	enqueuedStateStage = - 1
>1155	UnaryOp	- 1
>1156	PrimaryExpression	1
>1157	UnaryOperator	-
>1158	Identifier	enqueuedStateStage
>1159	Condition	 
>1160	EqualityExpression	enqueuedStateStage == 0
>1161	PrimaryExpression	0
>1162	Identifier	enqueuedStateStage
>1163	Condition	 
>1164	AndExpression	canChangeState ( ) && ! enqueuedJumpState . empty ( )
>1165	UnaryOp	! enqueuedJumpState . empty ( )
>1166	CallExpression	enqueuedJumpState . empty ( )
>1167	ArgumentList	 
>1168	Callee	enqueuedJumpState . empty
>1169	MemberAccess	enqueuedJumpState . empty
>1170	Identifier	empty
>1171	Identifier	enqueuedJumpState
>1172	UnaryOperator	!
>1173	CallExpression	canChangeState ( )
>1174	ArgumentList	 
>1175	Callee	canChangeState
>1176	Identifier	canChangeState
>1177	ForStatement	for ( int i = 0 ; i <= statesTopIndex ; i ++ )
>1178	CompoundStatement	 
>1179	IfStatement	if ( obj )
>1180	ExpressionStatement	 
>1181	CallExpression	obj -> update ( dt )
>1182	ArgumentList	dt
>1183	Argument	dt
>1184	Identifier	dt
>1185	Callee	obj -> update
>1186	PtrMemberAccess	obj -> update
>1187	Identifier	update
>1188	Identifier	obj
>1189	Condition	 
>1190	Identifier	obj
>1191	IdentifierDeclStatement	 
>1192	IdentifierDecl	* obj = stateObjects [ states [ i ] -> name ]
>1193	AssignmentExpr	* obj = stateObjects [ states [ i ] -> name ]
>1194	ArrayIndexing	stateObjects [ states [ i ] -> name ]
>1195	PtrMemberAccess	states [ i ] -> name
>1196	Identifier	name
>1197	ArrayIndexing	states [ i ]
>1198	Identifier	i
>1199	Identifier	states
>1200	Identifier	stateObjects
>1201	Identifier	obj
>1202	Identifier	obj
>1203	IdentifierDeclType	StateObject *
>1204	IncDecOp	 
>1205	IncDec	++
>1206	Identifier	i
>1207	Condition	 
>1208	RelationalExpression	i <= statesTopIndex
>1209	Identifier	statesTopIndex
>1210	Identifier	i
>1211	ForInit	 
>1212	IdentifierDeclStatement	int i = 0 ;
>1213	IdentifierDecl	i = 0
>1214	AssignmentExpr	i = 0
>1215	PrimaryExpression	0
>1216	Identifier	i
>1217	Identifier	i
>1218	IdentifierDeclType	int
>1242	FunctionDef	StateManager 
>1243	ParameterList	 
>1244	ReturnType	StateData *
>1245	CompoundStatement	 
>1246	IfStatement	if ( ! states_empty ( ) )
>1247	ElseStatement	else
>1248	ReturnStatement	 
>1249	PrimaryExpression	0
>1250	ReturnStatement	 
>1251	CallExpression	states_top ( )
>1252	ArgumentList	 
>1253	Callee	states_top
>1254	Identifier	states_top
>1255	Condition	 
>1256	UnaryOp	! states_empty ( )
>1257	CallExpression	states_empty ( )
>1258	ArgumentList	 
>1259	Callee	states_empty
>1260	Identifier	states_empty
>1261	UnaryOperator	!
>1267	FunctionDef	StateManager 
>1268	ParameterList	 
>1269	ReturnType	StateObject *
>1270	CompoundStatement	 
>1271	IfStatement	if ( s )
>1272	ElseStatement	else
>1273	ReturnStatement	 
>1274	PrimaryExpression	0
>1275	CompoundStatement	 
>1276	ReturnStatement	 
>1277	PtrMemberAccess	s -> stateObject
>1278	Identifier	stateObject
>1279	Identifier	s
>1280	Condition	 
>1281	Identifier	s
>1282	IdentifierDeclStatement	 
>1283	IdentifierDecl	* s = getTopStateData ( )
>1284	AssignmentExpr	* s = getTopStateData ( )
>1285	CallExpression	getTopStateData ( )
>1286	ArgumentList	 
>1287	Callee	getTopStateData
>1288	Identifier	getTopStateData
>1289	Identifier	s
>1290	Identifier	s
>1291	IdentifierDeclType	StateData *
<5=7,6
<11=20,19,12
<12=16,13
<13=15,14
<16=18,17
<20=21
<21=22
<22=28,23
<23=26,24
<24=25
<26=27
<28=29
<29=31,30
<38=40,39
<44=47,46,45
<47=53,48
<48=49
<49=51,50
<51=52
<53=54
<54=56,55
<56=57
<61=70,69,62
<62=66,63
<63=65,64
<66=68,67
<70=71
<71=72
<72=78,73
<73=76,74
<74=75
<76=77
<78=79
<79=81,80
<81=85,82
<82=83
<83=84
<85=86
<86=88,87
<98=104,103,99
<99=100
<100=102,101
<104=105
<105=106
<106=110,107
<107=108
<108=109
<110=111
<111=113,112
<113=117,114
<114=115
<115=116
<117=118
<118=120,119
<129=138,137,130
<130=134,131
<131=133,132
<134=136,135
<144=150,149,145
<145=146
<146=148,147
<150=151
<151=152
<152=156,153
<153=154
<154=155
<156=157
<162=164,163
<164=165
<165=166
<166=168,167
<173=175,174
<175=176
<176=204,195,192,177
<177=183,182,178
<178=179
<179=181,180
<183=184
<184=190,185
<185=186
<186=187
<187=189,188
<190=191
<192=194,193
<195=196
<196=203,197
<197=199,198
<199=200
<200=202,201
<204=205
<205=206
<206=211,210,207
<207=209,208
<220=229,228,221
<221=225,222
<222=224,223
<225=227,226
<229=254,245,236,230
<230=231
<231=233,232
<233=235,234
<236=237
<237=241,238
<238=239
<239=240
<241=242
<242=244,243
<245=246
<246=250,247
<247=248
<248=249
<250=251
<251=253,252
<254=255
<255=261,256
<256=259,257
<257=258
<259=260
<261=262
<262=264,263
<275=281,280,276
<276=277
<277=279,278
<281=289,282
<282=283
<283=287,284
<284=285
<285=286
<287=288
<289=290
<290=294,291
<291=292
<292=293
<294=295
<295=297,296
<303=309,308,304
<304=305
<305=307,306
<309=310
<310=346,337,311
<311=312
<312=331,319,313
<313=314
<314=315
<315=316
<316=318,317
<319=320
<320=321
<321=330,322
<322=326,323
<323=324
<324=325
<326=327
<327=329,328
<331=332
<332=334,333
<334=336,335
<337=338
<338=345,339
<339=341,340
<341=342
<342=344,343
<346=347
<347=348
<348=358,357,349
<349=356,350
<350=352,351
<352=353
<353=355,354
<369=372,371,370
<372=380,373
<373=374
<374=376,375
<376=377
<377=379,378
<380=427,418,415,381
<381=406,382
<382=395,383
<383=384
<384=385
<385=391,386
<386=387
<387=388
<388=390,389
<391=392
<392=394,393
<395=396
<396=405,397
<397=404,398
<398=400,399
<400=401
<401=403,402
<406=407
<407=414,413,408
<408=412,409
<409=411,410
<415=417,416
<418=419
<419=426,420
<420=422,421
<422=423
<423=425,424
<427=428
<428=429
<429=434,433,430
<430=432,431
<447=449,448
<449=466,462,456,450
<450=451
<451=455,452
<452=454,453
<456=457
<457=461,458
<458=460,459
<462=463
<463=465,464
<466=467
<467=469,468
<479=481,480
<481=482
<482=483
<483=485,484
<485=486
<490=496,495,491
<491=492
<492=494,493
<496=499,497
<497=498
<499=526,522,519,500
<500=510,501
<501=504,502
<502=503
<504=505
<505=507,506
<507=509,508
<510=511
<511=518,517,512
<512=516,513
<513=515,514
<519=521,520
<522=523
<523=525,524
<526=527
<527=528
<528=533,532,529
<529=531,530
<546=552,551,547
<547=548
<548=550,549
<552=553
<553=554
<554=556,555
<556=557
<557=559,558
<559=563,560
<560=561
<561=562
<563=564
<570=576,575,571
<571=572
<572=574,573
<576=577
<577=591,578
<578=586,579
<579=580
<580=584,581
<581=582
<582=583
<584=585
<586=587
<587=589,588
<589=590
<591=592
<592=594,593
<594=595
<601=613,612,602
<602=609,606,603
<603=605,604
<606=608,607
<609=611,610
<613=614
<614=636,615
<615=632,616
<616=630,625,617
<617=618
<618=619
<619=620
<620=624,621
<621=623,622
<625=626
<626=627
<627=629,628
<630=631
<632=633
<633=635,634
<636=637
<637=642,638
<638=640,639
<640=641
<652=655,654,653
<655=656
<656=657
<657=664,658
<658=660,659
<660=661
<661=663,662
<670=676,675,671
<671=672
<672=674,673
<676=761,754,677
<677=749,678
<678=734,733,732,731,730,729,727,721,713,706,683,679
<679=680
<680=682,681
<683=702,684
<684=694,685
<685=686
<686=688,687
<688=689
<689=691,690
<691=693,692
<694=695
<695=699,696
<696=698,697
<699=701,700
<702=703
<703=705,704
<706=707
<707=711,708
<708=709
<709=710
<711=712
<713=714
<714=716,715
<716=720,717
<717=719,718
<721=722
<722=724,723
<724=726,725
<727=728
<734=744,735
<735=737,736
<737=738
<738=742,739
<739=740
<740=741
<742=743
<744=745
<745=747,746
<747=748
<749=750
<750=752,751
<752=753
<754=755
<755=759,756
<756=757
<757=758
<759=760
<761=762
<762=767,766,763
<763=765,764
<787=790,789,788
<790=791
<791=803,792
<792=798,793
<793=794
<794=796,795
<796=797
<798=799
<799=801,800
<801=802
<803=804
<804=809,805
<805=807,806
<807=808
<814=817,816,815
<817=818
<818=900,819
<819=872,858,851,850,845,828,824,820
<820=821
<821=823,822
<824=825
<825=827,826
<828=836,829
<829=830
<830=832,831
<832=833
<833=835,834
<836=837
<837=839,838
<839=841,840
<841=842
<842=844,843
<845=846
<846=848,847
<848=849
<851=852
<852=856,853
<853=854
<854=855
<856=857
<858=859
<859=871,870,860
<860=869,861
<861=863,862
<863=868,864
<864=866,865
<866=867
<872=889,873
<873=874
<874=876,875
<876=877
<877=879,878
<879=888,880
<880=882,881
<882=887,883
<883=885,884
<885=886
<889=890
<890=899,891
<891=893,892
<893=898,894
<894=896,895
<896=897
<900=901
<901=908,902
<902=907,903
<903=905,904
<905=906
<908=910,909
<910=911
<933=939,938,934
<934=935
<935=937,936
<939=940
<940=941
<946=955,954,947
<947=951,948
<948=950,949
<951=953,952
<955=1000,991,973,956
<956=965,957
<957=958
<958=960,959
<960=964,961
<961=963,962
<965=966
<966=972,967
<967=971,968
<968=970,969
<973=982,974
<974=975
<975=976
<976=980,977
<977=978
<978=979
<980=981
<982=983
<983=985,984
<985=986
<986=988,987
<988=990,989
<991=992
<992=998,993
<993=994
<994=995
<995=997,996
<998=999
<1000=1001
<1001=1003,1002
<1003=1005,1004
<1018=1024,1023,1019
<1019=1020
<1020=1022,1021
<1024=1027,1025
<1025=1026
<1027=1028
<1028=1032,1029
<1029=1030
<1030=1031
<1032=1033
<1033=1035,1034
<1041=1044,1043,1042
<1044=1052,1045
<1045=1046
<1046=1048,1047
<1048=1049
<1049=1051,1050
<1052=1078,1069,1066,1053
<1053=1057,1056,1054
<1054=1055
<1057=1058
<1058=1065,1064,1059
<1059=1063,1060
<1060=1062,1061
<1066=1068,1067
<1069=1070
<1070=1077,1071
<1071=1073,1072
<1073=1074
<1074=1076,1075
<1078=1079
<1079=1080
<1080=1085,1084,1081
<1081=1083,1082
<1095=1098,1097,1096
<1098=1099
<1099=1100
<1100=1102,1101
<1102=1103
<1103=1105,1104
<1110=1116,1115,1111
<1111=1112
<1112=1114,1113
<1116=1177,1117
<1117=1163,1118
<1118=1119
<1119=1159,1147,1120
<1120=1121
<1121=1141,1122
<1122=1134,1130,1123
<1123=1124
<1124=1128,1125
<1125=1126
<1126=1127
<1128=1129
<1130=1131
<1131=1133,1132
<1134=1135
<1135=1140,1139,1136
<1136=1138,1137
<1141=1142
<1142=1146,1143
<1143=1145,1144
<1147=1153,1148
<1148=1149
<1149=1151,1150
<1151=1152
<1153=1154
<1154=1158,1155
<1155=1157,1156
<1159=1160
<1160=1162,1161
<1163=1164
<1164=1173,1165
<1165=1172,1166
<1166=1168,1167
<1168=1169
<1169=1171,1170
<1173=1175,1174
<1175=1176
<1177=1211,1207,1204,1178
<1178=1191,1179
<1179=1189,1180
<1180=1181
<1181=1185,1182
<1182=1183
<1183=1184
<1185=1186
<1186=1188,1187
<1189=1190
<1191=1192
<1192=1203,1202,1193
<1193=1201,1194
<1194=1200,1195
<1195=1197,1196
<1197=1199,1198
<1204=1206,1205
<1207=1208
<1208=1210,1209
<1211=1212
<1212=1213
<1213=1218,1217,1214
<1214=1216,1215
<1242=1245,1244,1243
<1245=1246
<1246=1255,1250,1247
<1247=1248
<1248=1249
<1250=1251
<1251=1253,1252
<1253=1254
<1255=1256
<1256=1261,1257
<1257=1259,1258
<1259=1260
<1267=1270,1269,1268
<1270=1282,1271
<1271=1280,1275,1272
<1272=1273
<1273=1274
<1275=1276
<1276=1277
<1277=1279,1278
<1280=1281
<1282=1283
<1283=1291,1290,1284
<1284=1289,1285
<1285=1287,1286
<1287=1288
