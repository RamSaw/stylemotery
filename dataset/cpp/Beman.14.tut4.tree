>3	FunctionDef	main (int argc , char * argv [ ])
>4	ParameterList	int argc , char * argv [ ]
>5	Parameter	 
>6	Identifier	argv
>7	ParameterType	char * [ ]
>8	Parameter	 
>9	Identifier	argc
>10	ParameterType	int
>11	ReturnType	int
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	PrimaryExpression	0
>15	BlockStarter	 
>16	CompoundStatement	 
>17	ExpressionStatement	cout << ex . what ( ) << '\n'
>18	ShiftExpression	cout << ex . what ( ) << '\n'
>19	ShiftExpression	ex . what ( ) << '\n'
>20	PrimaryExpression	'\n'
>21	CallExpression	ex . what ( )
>22	ArgumentList	 
>23	Callee	ex . what
>24	MemberAccess	ex . what
>25	Identifier	what
>26	Identifier	ex
>27	Identifier	cout
>28	Identifier	ex
>29	BlockStarter	 
>30	CompoundStatement	 
>31	IfStatement	if ( exists ( p ) )
>32	ElseStatement	else
>33	ExpressionStatement	cout << p << \" does not exist\n\"
>34	ShiftExpression	cout << p << \" does not exist\n\"
>35	ShiftExpression	p << \" does not exist\n\"
>36	PrimaryExpression	\" does not exist\n\"
>37	Identifier	p
>38	Identifier	cout
>39	CompoundStatement	 
>40	IfStatement	if ( is_regular_file ( p ) )
>41	ElseStatement	else
>42	IfStatement	if ( is_directory ( p ) )
>43	ElseStatement	else
>44	ExpressionStatement	cout << p << \" exists, but is neither a regular file nor a directory\n\"
>45	ShiftExpression	cout << p << \" exists, but is neither a regular file nor a directory\n\"
>46	ShiftExpression	p << \" exists, but is neither a regular file nor a directory\n\"
>47	PrimaryExpression	\" exists, but is neither a regular file nor a directory\n\"
>48	Identifier	p
>49	Identifier	cout
>50	CompoundStatement	 
>51	ForStatement	for ( vec 
>52	CompoundStatement	 
>53	ExpressionStatement	cout << \"   \" << * it << '\n'
>54	ShiftExpression	cout << \"   \" << * it << '\n'
>55	ShiftExpression	\"   \" << * it << '\n'
>56	ShiftExpression	* it << '\n'
>57	PrimaryExpression	'\n'
>58	UnaryOp	* it
>59	Identifier	it
>60	UnaryOperator	*
>61	PrimaryExpression	\"   \"
>62	Identifier	cout
>63	UnaryExpression	++ it
>64	Identifier	it
>65	IncDec	++
>66	Condition	it != it_end
>67	EqualityExpression	it != it_end
>68	Identifier	it_end
>69	Identifier	it
>70	ForInit	vec 
>71	IdentifierDeclStatement	vec 
>72	IdentifierDecl	it_end ( v . end ( ) )
>73	CallExpression	v . end ( )
>74	ArgumentList	 
>75	Callee	v . end
>76	MemberAccess	v . end
>77	Identifier	end
>78	Identifier	v
>79	Identifier	it_end
>80	IdentifierDeclType	vec 
>81	IdentifierDecl	it ( v . begin ( ) )
>82	CallExpression	v . begin ( )
>83	ArgumentList	 
>84	Callee	v . begin
>85	MemberAccess	v . begin
>86	Identifier	begin
>87	Identifier	v
>88	Identifier	it
>89	IdentifierDeclType	vec 
>90	ExpressionStatement	sort ( v . begin ( ) , v . end ( ) )
>91	CallExpression	sort ( v . begin ( ) , v . end ( ) )
>92	ArgumentList	v . begin ( )
>93	Argument	v . end ( )
>94	CallExpression	v . end ( )
>95	ArgumentList	 
>96	Callee	v . end
>97	MemberAccess	v . end
>98	Identifier	end
>99	Identifier	v
>100	Argument	v . begin ( )
>101	CallExpression	v . begin ( )
>102	ArgumentList	 
>103	Callee	v . begin
>104	MemberAccess	v . begin
>105	Identifier	begin
>106	Identifier	v
>107	Callee	sort
>108	Identifier	sort
>109	ExpressionStatement	copy ( directory_iterator ( p ) , directory_iterator ( ) , back_inserter ( v ) )
>110	CallExpression	copy ( directory_iterator ( p ) , directory_iterator ( ) , back_inserter ( v ) )
>111	ArgumentList	directory_iterator ( p )
>112	Argument	back_inserter ( v )
>113	CallExpression	back_inserter ( v )
>114	ArgumentList	v
>115	Argument	v
>116	Identifier	v
>117	Callee	back_inserter
>118	Identifier	back_inserter
>119	Argument	directory_iterator ( )
>120	CallExpression	directory_iterator ( )
>121	ArgumentList	 
>122	Callee	directory_iterator
>123	Identifier	directory_iterator
>124	Argument	directory_iterator ( p )
>125	CallExpression	directory_iterator ( p )
>126	ArgumentList	p
>127	Argument	p
>128	Identifier	p
>129	Callee	directory_iterator
>130	Identifier	directory_iterator
>131	Callee	copy
>132	Identifier	copy
>133	IdentifierDeclStatement	vec v ;
>134	IdentifierDecl	v
>135	Identifier	v
>136	IdentifierDeclType	vec
>137	IdentifierDeclStatement	vector < path > vec ;
>138	IdentifierDecl	vec
>139	Identifier	vec
>140	IdentifierDeclType	vector < path >
>141	ExpressionStatement	cout << p << \" is a directory containing
>142	ShiftExpression	cout << p << \" is a directory containing
>143	ShiftExpression	p << \" is a directory containing
>144	PrimaryExpression	\" is a directory containing
>145	Identifier	p
>146	Identifier	cout
>147	Condition	is_directory ( p )
>148	CallExpression	is_directory ( p )
>149	ArgumentList	p
>150	Argument	p
>151	Identifier	p
>152	Callee	is_directory
>153	Identifier	is_directory
>154	ExpressionStatement	cout << p << \" size is \" << file_size ( p ) << '\n'
>155	ShiftExpression	cout << p << \" size is \" << file_size ( p ) << '\n'
>156	ShiftExpression	p << \" size is \" << file_size ( p ) << '\n'
>157	ShiftExpression	\" size is \" << file_size ( p ) << '\n'
>158	ShiftExpression	file_size ( p ) << '\n'
>159	PrimaryExpression	'\n'
>160	CallExpression	file_size ( p )
>161	ArgumentList	p
>162	Argument	p
>163	Identifier	p
>164	Callee	file_size
>165	Identifier	file_size
>166	PrimaryExpression	\" size is \"
>167	Identifier	p
>168	Identifier	cout
>169	Condition	is_regular_file ( p )
>170	CallExpression	is_regular_file ( p )
>171	ArgumentList	p
>172	Argument	p
>173	Identifier	p
>174	Callee	is_regular_file
>175	Identifier	is_regular_file
>176	Condition	exists ( p )
>177	CallExpression	exists ( p )
>178	ArgumentList	p
>179	Argument	p
>180	Identifier	p
>181	Callee	exists
>182	Identifier	exists
>183	IdentifierDeclStatement	 
>184	IdentifierDecl	p ( argv [ 1 ] )
>185	ArrayIndexing	argv [ 1 ]
>186	PrimaryExpression	1
>187	Identifier	argv
>188	Identifier	p
>189	IdentifierDeclType	path
>190	IfStatement	if ( argc < 2 )
>191	CompoundStatement	 
>192	ReturnStatement	 
>193	PrimaryExpression	1
>194	ExpressionStatement	 
>195	ShiftExpression	cout << \"Usage
>196	PrimaryExpression	\"Usage
>197	Identifier	cout
>198	Condition	 
>199	RelationalExpression	argc < 2
>200	PrimaryExpression	2
>201	Identifier	argc
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=190,183,29,15,13
<13=14
<15=28,16
<16=17
<17=18
<18=27,19
<19=21,20
<21=23,22
<23=24
<24=26,25
<29=30
<30=31
<31=176,39,32
<32=33
<33=34
<34=38,35
<35=37,36
<39=40
<40=169,154,41
<41=42
<42=147,50,43
<43=44
<44=45
<45=49,46
<46=48,47
<50=141,137,133,109,90,51
<51=70,66,63,52
<52=53
<53=54
<54=62,55
<55=61,56
<56=58,57
<58=60,59
<63=65,64
<66=67
<67=69,68
<70=71
<71=81,72
<72=80,79,73
<73=75,74
<75=76
<76=78,77
<81=89,88,82
<82=84,83
<84=85
<85=87,86
<90=91
<91=107,92
<92=100,93
<93=94
<94=96,95
<96=97
<97=99,98
<100=101
<101=103,102
<103=104
<104=106,105
<107=108
<109=110
<110=131,111
<111=124,119,112
<112=113
<113=117,114
<114=115
<115=116
<117=118
<119=120
<120=122,121
<122=123
<124=125
<125=129,126
<126=127
<127=128
<129=130
<131=132
<133=134
<134=136,135
<137=138
<138=140,139
<141=142
<142=146,143
<143=145,144
<147=148
<148=152,149
<149=150
<150=151
<152=153
<154=155
<155=168,156
<156=167,157
<157=166,158
<158=160,159
<160=164,161
<161=162
<162=163
<164=165
<169=170
<170=174,171
<171=172
<172=173
<174=175
<176=177
<177=181,178
<178=179
<179=180
<181=182
<183=184
<184=189,188,185
<185=187,186
<190=198,191
<191=194,192
<192=193
<194=195
<195=197,196
<198=199
<199=201,200
