>3	FunctionDef	Spec 
>4	ParameterList	 
>5	CompoundStatement	 
>9	FunctionDef	Spec 
>10	ParameterList	 
>11	ReturnType	std 
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	Identifier	name
>15	ExpressionStatement	 
>16	ShiftExpression	NTA_CHECK ( found ) << \"Internal error -- multiple inputs in Spec but no default\"
>17	PrimaryExpression	\"Internal error -- multiple inputs in Spec but no default\"
>18	CallExpression	NTA_CHECK ( found )
>19	ArgumentList	found
>20	Argument	found
>21	Identifier	found
>22	Callee	NTA_CHECK
>23	Identifier	NTA_CHECK
>24	ForStatement	for ( size_t i = 0 ; i < inputs . getCount ( ) ; ++ i )
>25	CompoundStatement	 
>26	IfStatement	if ( p . second . isDefaultInput )
>27	CompoundStatement	 
>28	ExpressionStatement	 
>29	AssignmentExpr	name = p . first
>30	MemberAccess	p . first
>31	Identifier	first
>32	Identifier	p
>33	Identifier	name
>34	ExpressionStatement	 
>35	AssignmentExpr	found = true
>36	Identifier	true
>37	Identifier	found
>38	ExpressionStatement	 
>39	ShiftExpression	NTA_CHECK ( ! found ) << \"Internal error -- multiply-defined default inputs in Spec\"
>40	PrimaryExpression	\"Internal error -- multiply-defined default inputs in Spec\"
>41	CallExpression	NTA_CHECK ( ! found )
>42	ArgumentList	! found
>43	Argument	! found
>44	UnaryOp	! found
>45	Identifier	found
>46	UnaryOperator	!
>47	Callee	NTA_CHECK
>48	Identifier	NTA_CHECK
>49	Condition	 
>50	MemberAccess	p . second . isDefaultInput
>51	Identifier	isDefaultInput
>52	MemberAccess	p . second
>53	Identifier	second
>54	Identifier	p
>55	IdentifierDeclStatement	 
>56	IdentifierDecl	& p = inputs . getByIndex ( i )
>57	AssignmentExpr	& p = inputs . getByIndex ( i )
>58	CallExpression	inputs . getByIndex ( i )
>59	ArgumentList	i
>60	Argument	i
>61	Identifier	i
>62	Callee	inputs . getByIndex
>63	MemberAccess	inputs . getByIndex
>64	Identifier	getByIndex
>65	Identifier	inputs
>66	Identifier	p
>67	Identifier	p
>68	IdentifierDeclType	const std 
>69	UnaryExpression	 
>70	Identifier	i
>71	IncDec	++
>72	Condition	 
>73	RelationalExpression	i < inputs . getCount ( )
>74	CallExpression	inputs . getCount ( )
>75	ArgumentList	 
>76	Callee	inputs . getCount
>77	MemberAccess	inputs . getCount
>78	Identifier	getCount
>79	Identifier	inputs
>80	Identifier	i
>81	ForInit	 
>82	IdentifierDeclStatement	size_t i = 0 ;
>83	IdentifierDecl	i = 0
>84	AssignmentExpr	i = 0
>85	PrimaryExpression	0
>86	Identifier	i
>87	Identifier	i
>88	IdentifierDeclType	size_t
>89	IdentifierDeclStatement	 
>90	IdentifierDecl	name
>91	Identifier	name
>92	IdentifierDeclType	std 
>93	IdentifierDeclStatement	 
>94	IdentifierDecl	found = false
>95	AssignmentExpr	found = false
>96	Identifier	false
>97	Identifier	false
>98	Identifier	found
>99	IdentifierDeclType	bool
>100	IfStatement	if ( inputs . getCount ( ) == 1 )
>101	ReturnStatement	 
>102	MemberAccess	inputs . getByIndex ( 0 ) . first
>103	Identifier	first
>104	CallExpression	inputs . getByIndex ( 0 )
>105	ArgumentList	0
>106	Argument	0
>107	PrimaryExpression	0
>108	Callee	inputs . getByIndex
>109	MemberAccess	inputs . getByIndex
>110	Identifier	getByIndex
>111	Identifier	inputs
>112	Condition	 
>113	EqualityExpression	inputs . getCount ( ) == 1
>114	PrimaryExpression	1
>115	CallExpression	inputs . getCount ( )
>116	ArgumentList	 
>117	Callee	inputs . getCount
>118	MemberAccess	inputs . getCount
>119	Identifier	getCount
>120	Identifier	inputs
>121	IfStatement	if ( inputs . getCount ( ) == 0 )
>122	ReturnStatement	 
>123	PrimaryExpression	\"\"
>124	Condition	 
>125	EqualityExpression	inputs . getCount ( ) == 0
>126	PrimaryExpression	0
>127	CallExpression	inputs . getCount ( )
>128	ArgumentList	 
>129	Callee	inputs . getCount
>130	MemberAccess	inputs . getCount
>131	Identifier	getCount
>132	Identifier	inputs
>149	FunctionDef	Spec 
>150	ParameterList	 
>151	ReturnType	std 
>152	CompoundStatement	 
>153	ReturnStatement	 
>154	Identifier	name
>155	ExpressionStatement	 
>156	ShiftExpression	NTA_CHECK ( found ) << \"Internal error -- multiple outputs in Spec but no default\"
>157	PrimaryExpression	\"Internal error -- multiple outputs in Spec but no default\"
>158	CallExpression	NTA_CHECK ( found )
>159	ArgumentList	found
>160	Argument	found
>161	Identifier	found
>162	Callee	NTA_CHECK
>163	Identifier	NTA_CHECK
>164	ForStatement	for ( size_t i = 0 ; i < outputs . getCount ( ) ; ++ i )
>165	CompoundStatement	 
>166	IfStatement	if ( p . second . isDefaultOutput )
>167	CompoundStatement	 
>168	ExpressionStatement	 
>169	AssignmentExpr	name = p . first
>170	MemberAccess	p . first
>171	Identifier	first
>172	Identifier	p
>173	Identifier	name
>174	ExpressionStatement	 
>175	AssignmentExpr	found = true
>176	Identifier	true
>177	Identifier	found
>178	ExpressionStatement	 
>179	ShiftExpression	NTA_CHECK ( ! found ) << \"Internal error -- multiply-defined default outputs in Spec\"
>180	PrimaryExpression	\"Internal error -- multiply-defined default outputs in Spec\"
>181	CallExpression	NTA_CHECK ( ! found )
>182	ArgumentList	! found
>183	Argument	! found
>184	UnaryOp	! found
>185	Identifier	found
>186	UnaryOperator	!
>187	Callee	NTA_CHECK
>188	Identifier	NTA_CHECK
>189	Condition	 
>190	MemberAccess	p . second . isDefaultOutput
>191	Identifier	isDefaultOutput
>192	MemberAccess	p . second
>193	Identifier	second
>194	Identifier	p
>195	IdentifierDeclStatement	 
>196	IdentifierDecl	& p = outputs . getByIndex ( i )
>197	AssignmentExpr	& p = outputs . getByIndex ( i )
>198	CallExpression	outputs . getByIndex ( i )
>199	ArgumentList	i
>200	Argument	i
>201	Identifier	i
>202	Callee	outputs . getByIndex
>203	MemberAccess	outputs . getByIndex
>204	Identifier	getByIndex
>205	Identifier	outputs
>206	Identifier	p
>207	Identifier	p
>208	IdentifierDeclType	const std 
>209	UnaryExpression	 
>210	Identifier	i
>211	IncDec	++
>212	Condition	 
>213	RelationalExpression	i < outputs . getCount ( )
>214	CallExpression	outputs . getCount ( )
>215	ArgumentList	 
>216	Callee	outputs . getCount
>217	MemberAccess	outputs . getCount
>218	Identifier	getCount
>219	Identifier	outputs
>220	Identifier	i
>221	ForInit	 
>222	IdentifierDeclStatement	size_t i = 0 ;
>223	IdentifierDecl	i = 0
>224	AssignmentExpr	i = 0
>225	PrimaryExpression	0
>226	Identifier	i
>227	Identifier	i
>228	IdentifierDeclType	size_t
>229	IdentifierDeclStatement	 
>230	IdentifierDecl	name
>231	Identifier	name
>232	IdentifierDeclType	std 
>233	IdentifierDeclStatement	 
>234	IdentifierDecl	found = false
>235	AssignmentExpr	found = false
>236	Identifier	false
>237	Identifier	false
>238	Identifier	found
>239	IdentifierDeclType	bool
>240	IfStatement	if ( outputs . getCount ( ) == 1 )
>241	ReturnStatement	 
>242	MemberAccess	outputs . getByIndex ( 0 ) . first
>243	Identifier	first
>244	CallExpression	outputs . getByIndex ( 0 )
>245	ArgumentList	0
>246	Argument	0
>247	PrimaryExpression	0
>248	Callee	outputs . getByIndex
>249	MemberAccess	outputs . getByIndex
>250	Identifier	getByIndex
>251	Identifier	outputs
>252	Condition	 
>253	EqualityExpression	outputs . getCount ( ) == 1
>254	PrimaryExpression	1
>255	CallExpression	outputs . getCount ( )
>256	ArgumentList	 
>257	Callee	outputs . getCount
>258	MemberAccess	outputs . getCount
>259	Identifier	getCount
>260	Identifier	outputs
>261	IfStatement	if ( outputs . getCount ( ) == 0 )
>262	ReturnStatement	 
>263	PrimaryExpression	\"\"
>264	Condition	 
>265	EqualityExpression	outputs . getCount ( ) == 0
>266	PrimaryExpression	0
>267	CallExpression	outputs . getCount ( )
>268	ArgumentList	 
>269	Callee	outputs . getCount
>270	MemberAccess	outputs . getCount
>271	Identifier	getCount
>272	Identifier	outputs
>289	FunctionDef	InputSpec 
>290	ParameterList	const std 
>291	Parameter	 
>292	Identifier	requireSplitterMap
>293	ParameterType	bool
>294	Parameter	 
>295	Identifier	isDefaultInput
>296	ParameterType	bool
>297	Parameter	 
>298	Identifier	regionLevel
>299	ParameterType	bool
>300	Parameter	 
>301	Identifier	required
>302	ParameterType	bool
>303	Parameter	 
>304	Identifier	count
>305	ParameterType	UInt32
>306	Parameter	 
>307	Identifier	dataType
>308	ParameterType	NTA_BasicType
>309	Parameter	 
>310	Identifier	description
>311	ParameterType	const std 
>312	CompoundStatement	 
>323	FunctionDef	OutputSpec 
>324	ParameterList	const std 
>325	Parameter	 
>326	Identifier	isDefaultOutput
>327	ParameterType	bool
>328	Parameter	 
>329	Identifier	regionLevel
>330	ParameterType	bool
>331	Parameter	 
>332	Identifier	count
>333	ParameterType	size_t
>334	Parameter	 
>335	Identifier	dataType
>336	ParameterType	NTA_BasicType
>337	Parameter	 
>338	Identifier	description
>339	ParameterType	const std 
>340	CompoundStatement	 
>349	FunctionDef	CommandSpec 
>350	ParameterList	const std 
>351	Parameter	 
>352	Identifier	description
>353	ParameterType	const std 
>354	CompoundStatement	 
>359	FunctionDef	ParameterSpec 
>360	ParameterList	const std 
>361	Parameter	 
>362	Identifier	accessMode
>363	ParameterType	AccessMode
>364	Parameter	 
>365	Identifier	defaultValue
>366	ParameterType	const std 
>367	Parameter	 
>368	Identifier	constraints
>369	ParameterType	const std 
>370	Parameter	 
>371	Identifier	count
>372	ParameterType	size_t
>373	Parameter	 
>374	Identifier	dataType
>375	ParameterType	NTA_BasicType
>376	Parameter	 
>377	Identifier	description
>378	ParameterType	const std 
>379	CompoundStatement	 
>380	IfStatement	if ( dataType == NTA_BasicType_Byte && count > 0 )
>381	ExpressionStatement	 
>382	ShiftExpression	NTA_THROW << \"Parameters of type 'byte' are not supported\"
>383	PrimaryExpression	\"Parameters of type 'byte' are not supported\"
>384	Identifier	NTA_THROW
>385	Condition	 
>386	AndExpression	dataType == NTA_BasicType_Byte && count > 0
>387	RelationalExpression	count > 0
>388	PrimaryExpression	0
>389	Identifier	count
>390	EqualityExpression	dataType == NTA_BasicType_Byte
>391	Identifier	NTA_BasicType_Byte
>392	Identifier	dataType
>403	FunctionDef	Spec 
>404	ParameterList	 
>405	ReturnType	std 
>406	CompoundStatement	 
>407	ReturnStatement	 
>408	CallExpression	ss . str ( )
>409	ArgumentList	 
>410	Callee	ss . str
>411	MemberAccess	ss . str
>412	Identifier	str
>413	Identifier	ss
>414	ForStatement	for ( size_t i = 0 ; i < commands . getCount ( ) ; ++ i )
>415	CompoundStatement	 
>416	ExpressionStatement	 
>417	ShiftExpression	ss << \"  \" << commands . getByIndex ( i ) . first << \"\n\"
>418	ShiftExpression	\"  \" << commands . getByIndex ( i ) . first << \"\n\"
>419	ShiftExpression	commands . getByIndex ( i ) . first << \"\n\"
>420	PrimaryExpression	\"\n\"
>421	MemberAccess	commands . getByIndex ( i ) . first
>422	Identifier	first
>423	CallExpression	commands . getByIndex ( i )
>424	ArgumentList	i
>425	Argument	i
>426	Identifier	i
>427	Callee	commands . getByIndex
>428	MemberAccess	commands . getByIndex
>429	Identifier	getByIndex
>430	Identifier	commands
>431	PrimaryExpression	\"  \"
>432	Identifier	ss
>433	UnaryExpression	 
>434	Identifier	i
>435	IncDec	++
>436	Condition	 
>437	RelationalExpression	i < commands . getCount ( )
>438	CallExpression	commands . getCount ( )
>439	ArgumentList	 
>440	Callee	commands . getCount
>441	MemberAccess	commands . getCount
>442	Identifier	getCount
>443	Identifier	commands
>444	Identifier	i
>445	ForInit	 
>446	IdentifierDeclStatement	size_t i = 0 ;
>447	IdentifierDecl	i = 0
>448	AssignmentExpr	i = 0
>449	PrimaryExpression	0
>450	Identifier	i
>451	Identifier	i
>452	IdentifierDeclType	size_t
>453	ExpressionStatement	 
>454	ShiftExpression	ss << \"Commands
>455	ShiftExpression	\"Commands
>456	PrimaryExpression	\"\n\"
>457	PrimaryExpression	\"Commands
>458	Identifier	ss
>459	ForStatement	for ( size_t i = 0 ; i < outputs . getCount ( ) ; ++ i )
>460	CompoundStatement	 
>461	ExpressionStatement	 
>462	ShiftExpression	ss << \"  \" << outputs . getByIndex ( i ) . first << \"\n\"
>463	ShiftExpression	\"  \" << outputs . getByIndex ( i ) . first << \"\n\"
>464	ShiftExpression	outputs . getByIndex ( i ) . first << \"\n\"
>465	PrimaryExpression	\"\n\"
>466	MemberAccess	outputs . getByIndex ( i ) . first
>467	Identifier	first
>468	CallExpression	outputs . getByIndex ( i )
>469	ArgumentList	i
>470	Argument	i
>471	Identifier	i
>472	Callee	outputs . getByIndex
>473	MemberAccess	outputs . getByIndex
>474	Identifier	getByIndex
>475	Identifier	outputs
>476	PrimaryExpression	\"  \"
>477	Identifier	ss
>478	UnaryExpression	 
>479	Identifier	i
>480	IncDec	++
>481	Condition	 
>482	RelationalExpression	i < outputs . getCount ( )
>483	CallExpression	outputs . getCount ( )
>484	ArgumentList	 
>485	Callee	outputs . getCount
>486	MemberAccess	outputs . getCount
>487	Identifier	getCount
>488	Identifier	outputs
>489	Identifier	i
>490	ForInit	 
>491	IdentifierDeclStatement	size_t i = 0 ;
>492	IdentifierDecl	i = 0
>493	AssignmentExpr	i = 0
>494	PrimaryExpression	0
>495	Identifier	i
>496	Identifier	i
>497	IdentifierDeclType	size_t
>498	ExpressionStatement	 
>499	ShiftExpression	ss << \"Outputs
>500	ShiftExpression	\"Outputs
>501	PrimaryExpression	\"\n\"
>502	PrimaryExpression	\"Outputs
>503	Identifier	ss
>504	ForStatement	for ( size_t i = 0 ; i < inputs . getCount ( ) ; ++ i )
>505	CompoundStatement	 
>506	ExpressionStatement	 
>507	ShiftExpression	ss << \"  \" << inputs . getByIndex ( i ) . first << \"\n\"
>508	ShiftExpression	\"  \" << inputs . getByIndex ( i ) . first << \"\n\"
>509	ShiftExpression	inputs . getByIndex ( i ) . first << \"\n\"
>510	PrimaryExpression	\"\n\"
>511	MemberAccess	inputs . getByIndex ( i ) . first
>512	Identifier	first
>513	CallExpression	inputs . getByIndex ( i )
>514	ArgumentList	i
>515	Argument	i
>516	Identifier	i
>517	Callee	inputs . getByIndex
>518	MemberAccess	inputs . getByIndex
>519	Identifier	getByIndex
>520	Identifier	inputs
>521	PrimaryExpression	\"  \"
>522	Identifier	ss
>523	UnaryExpression	 
>524	Identifier	i
>525	IncDec	++
>526	Condition	 
>527	RelationalExpression	i < inputs . getCount ( )
>528	CallExpression	inputs . getCount ( )
>529	ArgumentList	 
>530	Callee	inputs . getCount
>531	MemberAccess	inputs . getCount
>532	Identifier	getCount
>533	Identifier	inputs
>534	Identifier	i
>535	ForInit	 
>536	IdentifierDeclStatement	size_t i = 0 ;
>537	IdentifierDecl	i = 0
>538	AssignmentExpr	i = 0
>539	PrimaryExpression	0
>540	Identifier	i
>541	Identifier	i
>542	IdentifierDeclType	size_t
>543	ExpressionStatement	 
>544	ShiftExpression	ss << \"Inputs
>545	ShiftExpression	\"Inputs
>546	PrimaryExpression	\"\n\"
>547	PrimaryExpression	\"Inputs
>548	Identifier	ss
>549	ForStatement	for ( size_t i = 0 ; i < parameters . getCount ( ) ; ++ i )
>550	CompoundStatement	 
>551	ExpressionStatement	 
>552	ShiftExpression	ss << \"  \" << item . first << \"\n\" << \"     description
>553	ShiftExpression	\"  \" << item . first << \"\n\" << \"     description
>554	ShiftExpression	item . first << \"\n\" << \"     description
>555	ShiftExpression	\"\n\" << \"     description
>556	ShiftExpression	\"     description
>557	ShiftExpression	item . second . description << \"\n\" << \"     type
>558	ShiftExpression	\"\n\" << \"     type
>559	ShiftExpression	\"     type
>560	ShiftExpression	BasicType 
>561	ShiftExpression	\"\n\" << \"     count
>562	ShiftExpression	\"     count
>563	ShiftExpression	item . second . count << \"\n\"
>564	PrimaryExpression	\"\n\"
>565	MemberAccess	item . second . count
>566	Identifier	count
>567	MemberAccess	item . second
>568	Identifier	second
>569	Identifier	item
>570	PrimaryExpression	\"     count
>571	PrimaryExpression	\"\n\"
>572	CallExpression	BasicType 
>573	ArgumentList	item . second . dataType
>574	Argument	item . second . dataType
>575	MemberAccess	item . second . dataType
>576	Identifier	dataType
>577	MemberAccess	item . second
>578	Identifier	second
>579	Identifier	item
>580	Callee	BasicType 
>581	Identifier	BasicType 
>582	PrimaryExpression	\"     type
>583	PrimaryExpression	\"\n\"
>584	MemberAccess	item . second . description
>585	Identifier	description
>586	MemberAccess	item . second
>587	Identifier	second
>588	Identifier	item
>589	PrimaryExpression	\"     description
>590	PrimaryExpression	\"\n\"
>591	MemberAccess	item . first
>592	Identifier	first
>593	Identifier	item
>594	PrimaryExpression	\"  \"
>595	Identifier	ss
>596	IdentifierDeclStatement	 
>597	IdentifierDecl	& item = parameters . getByIndex ( i )
>598	AssignmentExpr	& item = parameters . getByIndex ( i )
>599	CallExpression	parameters . getByIndex ( i )
>600	ArgumentList	i
>601	Argument	i
>602	Identifier	i
>603	Callee	parameters . getByIndex
>604	MemberAccess	parameters . getByIndex
>605	Identifier	getByIndex
>606	Identifier	parameters
>607	Identifier	item
>608	Identifier	item
>609	IdentifierDeclType	const std 
>610	UnaryExpression	 
>611	Identifier	i
>612	IncDec	++
>613	Condition	 
>614	RelationalExpression	i < parameters . getCount ( )
>615	CallExpression	parameters . getCount ( )
>616	ArgumentList	 
>617	Callee	parameters . getCount
>618	MemberAccess	parameters . getCount
>619	Identifier	getCount
>620	Identifier	parameters
>621	Identifier	i
>622	ForInit	 
>623	IdentifierDeclStatement	size_t i = 0 ;
>624	IdentifierDecl	i = 0
>625	AssignmentExpr	i = 0
>626	PrimaryExpression	0
>627	Identifier	i
>628	Identifier	i
>629	IdentifierDeclType	size_t
>630	ExpressionStatement	 
>631	ShiftExpression	ss << \"Parameters
>632	ShiftExpression	\"Parameters
>633	PrimaryExpression	\"\n\"
>634	PrimaryExpression	\"Parameters
>635	Identifier	ss
>636	ExpressionStatement	 
>637	ShiftExpression	ss << \"Description
>638	ShiftExpression	\"Description
>639	ShiftExpression	\"\n\" << this -> description << \"\n\" << \"\n\"
>640	ShiftExpression	this -> description << \"\n\" << \"\n\"
>641	ShiftExpression	\"\n\" << \"\n\"
>642	PrimaryExpression	\"\n\"
>643	PrimaryExpression	\"\n\"
>644	PtrMemberAccess	this -> description
>645	Identifier	description
>646	Identifier	this
>647	PrimaryExpression	\"\n\"
>648	PrimaryExpression	\"Description
>649	Identifier	ss
>650	ExpressionStatement	 
>651	ShiftExpression	ss << \"Spec
>652	ShiftExpression	\"Spec
>653	PrimaryExpression	\"\n\"
>654	PrimaryExpression	\"Spec
>655	Identifier	ss
>656	IdentifierDeclStatement	 
>657	IdentifierDecl	ss
>658	Identifier	ss
>659	IdentifierDeclType	std 
<3=5,4
<9=12,11,10
<12=121,100,93,89,24,15,13
<13=14
<15=16
<16=18,17
<18=22,19
<19=20
<20=21
<22=23
<24=81,72,69,25
<25=55,26
<26=49,27
<27=38,34,28
<28=29
<29=33,30
<30=32,31
<34=35
<35=37,36
<38=39
<39=41,40
<41=47,42
<42=43
<43=44
<44=46,45
<47=48
<49=50
<50=52,51
<52=54,53
<55=56
<56=68,67,57
<57=66,58
<58=62,59
<59=60
<60=61
<62=63
<63=65,64
<69=71,70
<72=73
<73=80,74
<74=76,75
<76=77
<77=79,78
<81=82
<82=83
<83=88,87,84
<84=86,85
<89=90
<90=92,91
<93=94
<94=99,98,95
<95=97,96
<100=112,101
<101=102
<102=104,103
<104=108,105
<105=106
<106=107
<108=109
<109=111,110
<112=113
<113=115,114
<115=117,116
<117=118
<118=120,119
<121=124,122
<122=123
<124=125
<125=127,126
<127=129,128
<129=130
<130=132,131
<149=152,151,150
<152=261,240,233,229,164,155,153
<153=154
<155=156
<156=158,157
<158=162,159
<159=160
<160=161
<162=163
<164=221,212,209,165
<165=195,166
<166=189,167
<167=178,174,168
<168=169
<169=173,170
<170=172,171
<174=175
<175=177,176
<178=179
<179=181,180
<181=187,182
<182=183
<183=184
<184=186,185
<187=188
<189=190
<190=192,191
<192=194,193
<195=196
<196=208,207,197
<197=206,198
<198=202,199
<199=200
<200=201
<202=203
<203=205,204
<209=211,210
<212=213
<213=220,214
<214=216,215
<216=217
<217=219,218
<221=222
<222=223
<223=228,227,224
<224=226,225
<229=230
<230=232,231
<233=234
<234=239,238,235
<235=237,236
<240=252,241
<241=242
<242=244,243
<244=248,245
<245=246
<246=247
<248=249
<249=251,250
<252=253
<253=255,254
<255=257,256
<257=258
<258=260,259
<261=264,262
<262=263
<264=265
<265=267,266
<267=269,268
<269=270
<270=272,271
<289=312,290
<290=309,306,303,300,297,294,291
<291=293,292
<294=296,295
<297=299,298
<300=302,301
<303=305,304
<306=308,307
<309=311,310
<323=340,324
<324=337,334,331,328,325
<325=327,326
<328=330,329
<331=333,332
<334=336,335
<337=339,338
<349=354,350
<350=351
<351=353,352
<359=379,360
<360=376,373,370,367,364,361
<361=363,362
<364=366,365
<367=369,368
<370=372,371
<373=375,374
<376=378,377
<379=380
<380=385,381
<381=382
<382=384,383
<385=386
<386=390,387
<387=389,388
<390=392,391
<403=406,405,404
<406=656,650,636,630,549,543,504,498,459,453,414,407
<407=408
<408=410,409
<410=411
<411=413,412
<414=445,436,433,415
<415=416
<416=417
<417=432,418
<418=431,419
<419=421,420
<421=423,422
<423=427,424
<424=425
<425=426
<427=428
<428=430,429
<433=435,434
<436=437
<437=444,438
<438=440,439
<440=441
<441=443,442
<445=446
<446=447
<447=452,451,448
<448=450,449
<453=454
<454=458,455
<455=457,456
<459=490,481,478,460
<460=461
<461=462
<462=477,463
<463=476,464
<464=466,465
<466=468,467
<468=472,469
<469=470
<470=471
<472=473
<473=475,474
<478=480,479
<481=482
<482=489,483
<483=485,484
<485=486
<486=488,487
<490=491
<491=492
<492=497,496,493
<493=495,494
<498=499
<499=503,500
<500=502,501
<504=535,526,523,505
<505=506
<506=507
<507=522,508
<508=521,509
<509=511,510
<511=513,512
<513=517,514
<514=515
<515=516
<517=518
<518=520,519
<523=525,524
<526=527
<527=534,528
<528=530,529
<530=531
<531=533,532
<535=536
<536=537
<537=542,541,538
<538=540,539
<543=544
<544=548,545
<545=547,546
<549=622,613,610,550
<550=596,551
<551=552
<552=595,553
<553=594,554
<554=591,555
<555=590,556
<556=589,557
<557=584,558
<558=583,559
<559=582,560
<560=572,561
<561=571,562
<562=570,563
<563=565,564
<565=567,566
<567=569,568
<572=580,573
<573=574
<574=575
<575=577,576
<577=579,578
<580=581
<584=586,585
<586=588,587
<591=593,592
<596=597
<597=609,608,598
<598=607,599
<599=603,600
<600=601
<601=602
<603=604
<604=606,605
<610=612,611
<613=614
<614=621,615
<615=617,616
<617=618
<618=620,619
<622=623
<623=624
<624=629,628,625
<625=627,626
<630=631
<631=635,632
<632=634,633
<636=637
<637=649,638
<638=648,639
<639=647,640
<640=644,641
<641=643,642
<644=646,645
<650=651
<651=655,652
<652=654,653
<656=657
<657=659,658
