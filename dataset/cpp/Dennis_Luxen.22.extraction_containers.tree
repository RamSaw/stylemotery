>3	FunctionDef	ExtractionContainers 
>4	ParameterList	 
>5	ReturnType	include < limits >
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	CallExpression	name_list . push_back ( \"\" )
>9	ArgumentList	\"\"
>10	Argument	\"\"
>11	PrimaryExpression	\"\"
>12	Callee	name_list . push_back
>13	MemberAccess	name_list . push_back
>14	Identifier	push_back
>15	Identifier	name_list
>16	IdentifierDeclStatement	 
>17	IdentifierDecl	dummy_vector
>18	Identifier	dummy_vector
>19	IdentifierDeclType	stxxl 
>25	FunctionDef	ExtractionContainers 
>26	ParameterList	 
>27	CompoundStatement	 
>28	ExpressionStatement	 
>29	CallExpression	way_start_end_id_list . clear ( )
>30	ArgumentList	 
>31	Callee	way_start_end_id_list . clear
>32	MemberAccess	way_start_end_id_list . clear
>33	Identifier	clear
>34	Identifier	way_start_end_id_list
>35	ExpressionStatement	 
>36	CallExpression	restrictions_list . clear ( )
>37	ArgumentList	 
>38	Callee	restrictions_list . clear
>39	MemberAccess	restrictions_list . clear
>40	Identifier	clear
>41	Identifier	restrictions_list
>42	ExpressionStatement	 
>43	CallExpression	name_list . clear ( )
>44	ArgumentList	 
>45	Callee	name_list . clear
>46	MemberAccess	name_list . clear
>47	Identifier	clear
>48	Identifier	name_list
>49	ExpressionStatement	 
>50	CallExpression	all_edges_list . clear ( )
>51	ArgumentList	 
>52	Callee	all_edges_list . clear
>53	MemberAccess	all_edges_list . clear
>54	Identifier	clear
>55	Identifier	all_edges_list
>56	ExpressionStatement	 
>57	CallExpression	all_nodes_list . clear ( )
>58	ArgumentList	 
>59	Callee	all_nodes_list . clear
>60	MemberAccess	all_nodes_list . clear
>61	Identifier	clear
>62	Identifier	all_nodes_list
>63	ExpressionStatement	 
>64	CallExpression	used_node_id_list . clear ( )
>65	ArgumentList	 
>66	Callee	used_node_id_list . clear
>67	MemberAccess	used_node_id_list . clear
>68	Identifier	clear
>69	Identifier	used_node_id_list
>79	FunctionDef	ExtractionContainers 
>80	ParameterList	const std 
>81	Parameter	 
>82	Identifier	name_file_name
>83	ParameterType	const std 
>84	Parameter	 
>85	Identifier	restrictions_file_name
>86	ParameterType	const std 
>87	Parameter	 
>88	Identifier	output_file_name
>89	ParameterType	const std 
>90	ReturnType	void
>91	CompoundStatement	 
>92	BlockStarter	 
>93	CompoundStatement	 
>94	ExpressionStatement	std 
>95	ShiftExpression	std 
>96	ShiftExpression	\"Caught Execption
>97	ShiftExpression	e . what ( ) << std 
>98	Identifier	std 
>99	CallExpression	e . what ( )
>100	ArgumentList	 
>101	Callee	e . what
>102	MemberAccess	e . what
>103	Identifier	what
>104	Identifier	e
>105	PrimaryExpression	\"Caught Execption
>106	Identifier	std 
>107	Identifier	e
>108	BlockStarter	 
>109	CompoundStatement	 
>110	ExpressionStatement	WriteNames ( name_file_name )
>111	CallExpression	WriteNames ( name_file_name )
>112	ArgumentList	name_file_name
>113	Argument	name_file_name
>114	Identifier	name_file_name
>115	Callee	WriteNames
>116	Identifier	WriteNames
>117	ExpressionStatement	WriteRestrictions ( restrictions_file_name )
>118	CallExpression	WriteRestrictions ( restrictions_file_name )
>119	ArgumentList	restrictions_file_name
>120	Argument	restrictions_file_name
>121	Identifier	restrictions_file_name
>122	Callee	WriteRestrictions
>123	Identifier	WriteRestrictions
>124	ExpressionStatement	PrepareRestrictions ( )
>125	CallExpression	PrepareRestrictions ( )
>126	ArgumentList	 
>127	Callee	PrepareRestrictions
>128	Identifier	PrepareRestrictions
>129	ExpressionStatement	file_out_stream . close ( )
>130	CallExpression	file_out_stream . close ( )
>131	ArgumentList	 
>132	Callee	file_out_stream . close
>133	MemberAccess	file_out_stream . close
>134	Identifier	close
>135	Identifier	file_out_stream
>136	ExpressionStatement	WriteEdges ( file_out_stream )
>137	CallExpression	WriteEdges ( file_out_stream )
>138	ArgumentList	file_out_stream
>139	Argument	file_out_stream
>140	Identifier	file_out_stream
>141	Callee	WriteEdges
>142	Identifier	WriteEdges
>143	ExpressionStatement	PrepareEdges ( )
>144	CallExpression	PrepareEdges ( )
>145	ArgumentList	 
>146	Callee	PrepareEdges
>147	Identifier	PrepareEdges
>148	ExpressionStatement	WriteNodes ( file_out_stream )
>149	CallExpression	WriteNodes ( file_out_stream )
>150	ArgumentList	file_out_stream
>151	Argument	file_out_stream
>152	Identifier	file_out_stream
>153	Callee	WriteNodes
>154	Identifier	WriteNodes
>155	ExpressionStatement	PrepareNodes ( )
>156	CallExpression	PrepareNodes ( )
>157	ArgumentList	 
>158	Callee	PrepareNodes
>159	Identifier	PrepareNodes
>160	ExpressionStatement	file_out_stream . write ( ( char * ) & fingerprint , sizeof ( FingerPrint ) )
>161	CallExpression	file_out_stream . write ( ( char * ) & fingerprint , sizeof ( FingerPrint ) )
>162	ArgumentList	( char * ) & fingerprint
>163	Argument	sizeof ( FingerPrint )
>164	SizeofExpr	sizeof ( FingerPrint )
>165	SizeofOperand	FingerPrint
>166	Sizeof	sizeof
>167	Argument	( char * ) & fingerprint
>168	CastExpression	( char * ) & fingerprint
>169	UnaryOp	& fingerprint
>170	Identifier	fingerprint
>171	UnaryOperator	&
>172	CastTarget	char *
>173	Callee	file_out_stream . write
>174	MemberAccess	file_out_stream . write
>175	Identifier	write
>176	Identifier	file_out_stream
>177	IdentifierDeclStatement	const FingerPrint fingerprint = FingerPrint 
>178	IdentifierDecl	fingerprint = FingerPrint 
>179	AssignmentExpr	fingerprint = FingerPrint 
>180	CallExpression	FingerPrint 
>181	ArgumentList	 
>182	Callee	FingerPrint 
>183	Identifier	FingerPrint 
>184	Identifier	fingerprint
>185	Identifier	fingerprint
>186	IdentifierDeclType	const FingerPrint
>187	ExpressionStatement	file_out_stream . open ( output_file_name . c_str ( ) , std 
>188	CallExpression	file_out_stream . open ( output_file_name . c_str ( ) , std 
>189	ArgumentList	output_file_name . c_str ( )
>190	Argument	std 
>191	Identifier	std 
>192	Argument	output_file_name . c_str ( )
>193	CallExpression	output_file_name . c_str ( )
>194	ArgumentList	 
>195	Callee	output_file_name . c_str
>196	MemberAccess	output_file_name . c_str
>197	Identifier	c_str
>198	Identifier	output_file_name
>199	Callee	file_out_stream . open
>200	MemberAccess	file_out_stream . open
>201	Identifier	open
>202	Identifier	file_out_stream
>203	IdentifierDeclStatement	std 
>204	IdentifierDecl	file_out_stream
>205	Identifier	file_out_stream
>206	IdentifierDeclType	std 
>220	FunctionDef	ExtractionContainers 
>221	ParameterList	const std 
>222	Parameter	 
>223	Identifier	names_file_name
>224	ParameterType	const std 
>225	ReturnType	void
>226	CompoundStatement	 
>227	ExpressionStatement	 
>228	ShiftExpression	std 
>229	ShiftExpression	\"ok, after \" << TIMER_SEC ( write_name_index ) << \"s\" << std 
>230	ShiftExpression	TIMER_SEC ( write_name_index ) << \"s\" << std 
>231	ShiftExpression	\"s\" << std 
>232	Identifier	std 
>233	PrimaryExpression	\"s\"
>234	CallExpression	TIMER_SEC ( write_name_index )
>235	ArgumentList	write_name_index
>236	Argument	write_name_index
>237	Identifier	write_name_index
>238	Callee	TIMER_SEC
>239	Identifier	TIMER_SEC
>240	PrimaryExpression	\"ok, after \"
>241	Identifier	std 
>242	ExpressionStatement	 
>243	CallExpression	TIMER_STOP ( write_name_index )
>244	ArgumentList	write_name_index
>245	Argument	write_name_index
>246	Identifier	write_name_index
>247	Callee	TIMER_STOP
>248	Identifier	TIMER_STOP
>249	ExpressionStatement	 
>250	CallExpression	name_file_stream . close ( )
>251	ArgumentList	 
>252	Callee	name_file_stream . close
>253	MemberAccess	name_file_stream . close
>254	Identifier	close
>255	Identifier	name_file_stream
>256	CompoundStatement	 
>257	ExpressionStatement	 
>258	CallExpression	name_file_stream . write ( temp_string . c_str ( ) , string_length )
>259	ArgumentList	temp_string . c_str ( )
>260	Argument	string_length
>261	Identifier	string_length
>262	Argument	temp_string . c_str ( )
>263	CallExpression	temp_string . c_str ( )
>264	ArgumentList	 
>265	Callee	temp_string . c_str
>266	MemberAccess	temp_string . c_str
>267	Identifier	c_str
>268	Identifier	temp_string
>269	Callee	name_file_stream . write
>270	MemberAccess	name_file_stream . write
>271	Identifier	write
>272	Identifier	name_file_stream
>273	ExpressionStatement	 
>274	Statement	 
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	Statement	 
>284	Statement	 
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	Statement	 
>290	Statement	 
>291	Statement	 
>292	Statement	 
>293	Statement	 
>294	Statement	 
>295	Statement	 
>296	Statement	 
>297	Statement	 
>298	Label	 
>299	Identifier	temp_string
>300	Statement	 
>301	Statement	 
>302	Statement	 
>303	Statement	 
>304	Statement	 
>305	Statement	 
>306	Statement	 
>307	ExpressionStatement	 
>308	CallExpression	name_file_stream . write ( ( char * ) & total_length , sizeof ( unsigned ) )
>309	ArgumentList	( char * ) & total_length
>310	Argument	sizeof ( unsigned )
>311	SizeofExpr	sizeof ( unsigned )
>312	SizeofOperand	unsigned
>313	Sizeof	sizeof
>314	Argument	( char * ) & total_length
>315	CastExpression	( char * ) & total_length
>316	UnaryOp	& total_length
>317	Identifier	total_length
>318	UnaryOperator	&
>319	CastTarget	char *
>320	Callee	name_file_stream . write
>321	MemberAccess	name_file_stream . write
>322	Identifier	write
>323	Identifier	name_file_stream
>324	ExpressionStatement	 
>325	ShiftExpression	name_file_stream << name_index_range
>326	Identifier	name_index_range
>327	Identifier	name_file_stream
>328	ExpressionStatement	 
>329	CallExpression	name_index_range ( name_lengths )
>330	ArgumentList	name_lengths
>331	Argument	name_lengths
>332	Identifier	name_lengths
>333	Callee	name_index_range
>334	Identifier	name_index_range
>335	Statement	 
>336	Statement	 
>337	Statement	 
>338	CompoundStatement	 
>339	ExpressionStatement	 
>340	AssignmentExpr	total_length += string_length
>341	Identifier	string_length
>342	Identifier	total_length
>343	ExpressionStatement	 
>344	CallExpression	name_lengths . push_back ( string_length )
>345	ArgumentList	string_length
>346	Argument	string_length
>347	Identifier	string_length
>348	Callee	name_lengths . push_back
>349	MemberAccess	name_lengths . push_back
>350	Identifier	push_back
>351	Identifier	name_lengths
>352	ExpressionStatement	 
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	Statement	 
>358	Statement	 
>359	Statement	 
>360	Statement	 
>361	Statement	 
>362	Statement	 
>363	Statement	 
>364	Statement	 
>365	Statement	 
>366	Statement	 
>367	Statement	 
>368	Statement	 
>369	Statement	 
>370	Statement	 
>371	Statement	 
>372	Statement	 
>373	Statement	 
>374	Statement	 
>375	Statement	 
>376	Statement	 
>377	Label	 
>378	Identifier	temp_string
>379	Statement	 
>380	Statement	 
>381	Statement	 
>382	Statement	 
>383	Statement	 
>384	Statement	 
>385	Statement	 
>386	IdentifierDeclStatement	 
>387	IdentifierDecl	name_lengths
>388	Identifier	name_lengths
>389	IdentifierDeclType	std 
>390	IdentifierDeclStatement	 
>391	IdentifierDecl	total_length = 0
>392	AssignmentExpr	total_length = 0
>393	PrimaryExpression	0
>394	Identifier	total_length
>395	Identifier	total_length
>396	IdentifierDeclType	unsigned
>397	IdentifierDeclStatement	 
>398	IdentifierDecl	name_file_stream ( names_file_name , std 
>399	Expression	names_file_name , std 
>400	Identifier	std 
>401	Identifier	names_file_name
>402	Identifier	name_file_stream
>403	IdentifierDeclType	boost 
>404	ExpressionStatement	 
>405	CallExpression	TIMER_START ( write_name_index )
>406	ArgumentList	write_name_index
>407	Argument	write_name_index
>408	Identifier	write_name_index
>409	Callee	TIMER_START
>410	Identifier	TIMER_START
>411	ExpressionStatement	 
>412	ShiftExpression	std 
>413	ShiftExpression	\"[extractor] writing street name index ... \" << std 
>414	Identifier	std 
>415	PrimaryExpression	\"[extractor] writing street name index ... \"
>416	Identifier	std 
>429	FunctionDef	ExtractionContainers 
>430	ParameterList	 
>431	ReturnType	void
>432	CompoundStatement	 
>433	ExpressionStatement	 
>434	ShiftExpression	std 
>435	ShiftExpression	\"ok, after \" << TIMER_SEC ( sorting_nodes ) << \"s\" << std 
>436	ShiftExpression	TIMER_SEC ( sorting_nodes ) << \"s\" << std 
>437	ShiftExpression	\"s\" << std 
>438	Identifier	std 
>439	PrimaryExpression	\"s\"
>440	CallExpression	TIMER_SEC ( sorting_nodes )
>441	ArgumentList	sorting_nodes
>442	Argument	sorting_nodes
>443	Identifier	sorting_nodes
>444	Callee	TIMER_SEC
>445	Identifier	TIMER_SEC
>446	PrimaryExpression	\"ok, after \"
>447	Identifier	std 
>448	ExpressionStatement	 
>449	CallExpression	TIMER_STOP ( sorting_nodes )
>450	ArgumentList	sorting_nodes
>451	Argument	sorting_nodes
>452	Identifier	sorting_nodes
>453	Callee	TIMER_STOP
>454	Identifier	TIMER_STOP
>455	ExpressionStatement	 
>456	CallExpression	stxxl 
>457	ArgumentList	all_nodes_list . begin ( )
>458	Argument	stxxl_memory
>459	Identifier	stxxl_memory
>460	Argument	ExternalMemoryNodeSTXXLCompare ( )
>461	CallExpression	ExternalMemoryNodeSTXXLCompare ( )
>462	ArgumentList	 
>463	Callee	ExternalMemoryNodeSTXXLCompare
>464	Identifier	ExternalMemoryNodeSTXXLCompare
>465	Argument	all_nodes_list . end ( )
>466	CallExpression	all_nodes_list . end ( )
>467	ArgumentList	 
>468	Callee	all_nodes_list . end
>469	MemberAccess	all_nodes_list . end
>470	Identifier	end
>471	Identifier	all_nodes_list
>472	Argument	all_nodes_list . begin ( )
>473	CallExpression	all_nodes_list . begin ( )
>474	ArgumentList	 
>475	Callee	all_nodes_list . begin
>476	MemberAccess	all_nodes_list . begin
>477	Identifier	begin
>478	Identifier	all_nodes_list
>479	Callee	stxxl 
>480	Identifier	stxxl 
>481	ExpressionStatement	 
>482	CallExpression	TIMER_START ( sorting_nodes )
>483	ArgumentList	sorting_nodes
>484	Argument	sorting_nodes
>485	Identifier	sorting_nodes
>486	Callee	TIMER_START
>487	Identifier	TIMER_START
>488	ExpressionStatement	 
>489	ShiftExpression	std 
>490	ShiftExpression	\"[extractor] Sorting all nodes         ... \" << std 
>491	Identifier	std 
>492	PrimaryExpression	\"[extractor] Sorting all nodes         ... \"
>493	Identifier	std 
>494	ExpressionStatement	 
>495	ShiftExpression	std 
>496	ShiftExpression	\"ok, after \" << TIMER_SEC ( id_map ) << \"s\" << std 
>497	ShiftExpression	TIMER_SEC ( id_map ) << \"s\" << std 
>498	ShiftExpression	\"s\" << std 
>499	Identifier	std 
>500	PrimaryExpression	\"s\"
>501	CallExpression	TIMER_SEC ( id_map )
>502	ArgumentList	id_map
>503	Argument	id_map
>504	Identifier	id_map
>505	Callee	TIMER_SEC
>506	Identifier	TIMER_SEC
>507	PrimaryExpression	\"ok, after \"
>508	Identifier	std 
>509	ExpressionStatement	 
>510	CallExpression	TIMER_STOP ( id_map )
>511	ArgumentList	id_map
>512	Argument	id_map
>513	Identifier	id_map
>514	Callee	TIMER_STOP
>515	Identifier	TIMER_STOP
>516	ForStatement	for ( NodeID i = 0u ; i < used_node_id_list . size ( ) ; ++ i )
>517	ExpressionStatement	 
>518	AssignmentExpr	external_to_internal_node_id_map [ used_node_id_list [ i ] ] = i
>519	Identifier	i
>520	ArrayIndexing	external_to_internal_node_id_map [ used_node_id_list [ i ] ]
>521	ArrayIndexing	used_node_id_list [ i ]
>522	Identifier	i
>523	Identifier	used_node_id_list
>524	Identifier	external_to_internal_node_id_map
>525	UnaryExpression	 
>526	Identifier	i
>527	IncDec	++
>528	Condition	 
>529	RelationalExpression	i < used_node_id_list . size ( )
>530	CallExpression	used_node_id_list . size ( )
>531	ArgumentList	 
>532	Callee	used_node_id_list . size
>533	MemberAccess	used_node_id_list . size
>534	Identifier	size
>535	Identifier	used_node_id_list
>536	Identifier	i
>537	ForInit	 
>538	IdentifierDeclStatement	NodeID i = 0u ;
>539	IdentifierDecl	i = 0u
>540	AssignmentExpr	i = 0u
>541	PrimaryExpression	0u
>542	Identifier	i
>543	Identifier	i
>544	IdentifierDeclType	NodeID
>545	ExpressionStatement	 
>546	CallExpression	external_to_internal_node_id_map . reserve ( used_node_id_list . size ( ) )
>547	ArgumentList	used_node_id_list . size ( )
>548	Argument	used_node_id_list . size ( )
>549	CallExpression	used_node_id_list . size ( )
>550	ArgumentList	 
>551	Callee	used_node_id_list . size
>552	MemberAccess	used_node_id_list . size
>553	Identifier	size
>554	Identifier	used_node_id_list
>555	Callee	external_to_internal_node_id_map . reserve
>556	MemberAccess	external_to_internal_node_id_map . reserve
>557	Identifier	reserve
>558	Identifier	external_to_internal_node_id_map
>559	ExpressionStatement	 
>560	CallExpression	TIMER_START ( id_map )
>561	ArgumentList	id_map
>562	Argument	id_map
>563	Identifier	id_map
>564	Callee	TIMER_START
>565	Identifier	TIMER_START
>566	ExpressionStatement	 
>567	ShiftExpression	std 
>568	ShiftExpression	\"[extractor] Building node id map      ... \" << std 
>569	Identifier	std 
>570	PrimaryExpression	\"[extractor] Building node id map      ... \"
>571	Identifier	std 
>572	ExpressionStatement	 
>573	ShiftExpression	std 
>574	ShiftExpression	\"ok, after \" << TIMER_SEC ( erasing_dups ) << \"s\" << std 
>575	ShiftExpression	TIMER_SEC ( erasing_dups ) << \"s\" << std 
>576	ShiftExpression	\"s\" << std 
>577	Identifier	std 
>578	PrimaryExpression	\"s\"
>579	CallExpression	TIMER_SEC ( erasing_dups )
>580	ArgumentList	erasing_dups
>581	Argument	erasing_dups
>582	Identifier	erasing_dups
>583	Callee	TIMER_SEC
>584	Identifier	TIMER_SEC
>585	PrimaryExpression	\"ok, after \"
>586	Identifier	std 
>587	ExpressionStatement	 
>588	CallExpression	TIMER_STOP ( erasing_dups )
>589	ArgumentList	erasing_dups
>590	Argument	erasing_dups
>591	Identifier	erasing_dups
>592	Callee	TIMER_STOP
>593	Identifier	TIMER_STOP
>594	ExpressionStatement	 
>595	CallExpression	used_node_id_list . resize ( new_end - used_node_id_list . begin ( ) )
>596	ArgumentList	new_end - used_node_id_list . begin ( )
>597	Argument	new_end - used_node_id_list . begin ( )
>598	AdditiveExpression	new_end - used_node_id_list . begin ( )
>599	CallExpression	used_node_id_list . begin ( )
>600	ArgumentList	 
>601	Callee	used_node_id_list . begin
>602	MemberAccess	used_node_id_list . begin
>603	Identifier	begin
>604	Identifier	used_node_id_list
>605	Identifier	new_end
>606	Callee	used_node_id_list . resize
>607	MemberAccess	used_node_id_list . resize
>608	Identifier	resize
>609	Identifier	used_node_id_list
>610	ExpressionStatement	 
>611	AssignmentExpr	new_end = std 
>612	CallExpression	std 
>613	ArgumentList	used_node_id_list . begin ( )
>614	Argument	used_node_id_list . end ( )
>615	CallExpression	used_node_id_list . end ( )
>616	ArgumentList	 
>617	Callee	used_node_id_list . end
>618	MemberAccess	used_node_id_list . end
>619	Identifier	end
>620	Identifier	used_node_id_list
>621	Argument	used_node_id_list . begin ( )
>622	CallExpression	used_node_id_list . begin ( )
>623	ArgumentList	 
>624	Callee	used_node_id_list . begin
>625	MemberAccess	used_node_id_list . begin
>626	Identifier	begin
>627	Identifier	used_node_id_list
>628	Callee	std 
>629	Identifier	std 
>630	Identifier	new_end
>631	Statement	 
>632	ExpressionStatement	 
>633	CallExpression	TIMER_START ( erasing_dups )
>634	ArgumentList	erasing_dups
>635	Argument	erasing_dups
>636	Identifier	erasing_dups
>637	Callee	TIMER_START
>638	Identifier	TIMER_START
>639	ExpressionStatement	 
>640	ShiftExpression	std 
>641	ShiftExpression	\"[extractor] Erasing duplicate nodes   ... \" << std 
>642	Identifier	std 
>643	PrimaryExpression	\"[extractor] Erasing duplicate nodes   ... \"
>644	Identifier	std 
>645	ExpressionStatement	 
>646	ShiftExpression	std 
>647	ShiftExpression	\"ok, after \" << TIMER_SEC ( sorting_used_nodes ) << \"s\" << std 
>648	ShiftExpression	TIMER_SEC ( sorting_used_nodes ) << \"s\" << std 
>649	ShiftExpression	\"s\" << std 
>650	Identifier	std 
>651	PrimaryExpression	\"s\"
>652	CallExpression	TIMER_SEC ( sorting_used_nodes )
>653	ArgumentList	sorting_used_nodes
>654	Argument	sorting_used_nodes
>655	Identifier	sorting_used_nodes
>656	Callee	TIMER_SEC
>657	Identifier	TIMER_SEC
>658	PrimaryExpression	\"ok, after \"
>659	Identifier	std 
>660	ExpressionStatement	 
>661	CallExpression	TIMER_STOP ( sorting_used_nodes )
>662	ArgumentList	sorting_used_nodes
>663	Argument	sorting_used_nodes
>664	Identifier	sorting_used_nodes
>665	Callee	TIMER_STOP
>666	Identifier	TIMER_STOP
>667	ExpressionStatement	 
>668	CallExpression	stxxl 
>669	ArgumentList	used_node_id_list . begin ( )
>670	Argument	stxxl_memory
>671	Identifier	stxxl_memory
>672	Argument	Cmp ( )
>673	CallExpression	Cmp ( )
>674	ArgumentList	 
>675	Callee	Cmp
>676	Identifier	Cmp
>677	Argument	used_node_id_list . end ( )
>678	CallExpression	used_node_id_list . end ( )
>679	ArgumentList	 
>680	Callee	used_node_id_list . end
>681	MemberAccess	used_node_id_list . end
>682	Identifier	end
>683	Identifier	used_node_id_list
>684	Argument	used_node_id_list . begin ( )
>685	CallExpression	used_node_id_list . begin ( )
>686	ArgumentList	 
>687	Callee	used_node_id_list . begin
>688	MemberAccess	used_node_id_list . begin
>689	Identifier	begin
>690	Identifier	used_node_id_list
>691	Callee	stxxl 
>692	Identifier	stxxl 
>693	ExpressionStatement	 
>694	CallExpression	TIMER_START ( sorting_used_nodes )
>695	ArgumentList	sorting_used_nodes
>696	Argument	sorting_used_nodes
>697	Identifier	sorting_used_nodes
>698	Callee	TIMER_START
>699	Identifier	TIMER_START
>700	ExpressionStatement	 
>701	ShiftExpression	std 
>702	ShiftExpression	\"[extractor] Sorting used nodes        ... \" << std 
>703	Identifier	std 
>704	PrimaryExpression	\"[extractor] Sorting used nodes        ... \"
>705	Identifier	std 
>732	FunctionDef	ExtractionContainers 
>733	ParameterList	 
>734	ReturnType	void
>735	CompoundStatement	 
>736	ForStatement	for ( unsigned i = 0 ; i < all_edges_list . size ( ) ; )
>737	CompoundStatement	 
>738	ForStatement	for ( unsigned j = start_idx ; j < i ; j ++ )
>739	CompoundStatement	 
>740	ExpressionStatement	 
>741	AssignmentExpr	all_edges_list [ j ] . result . target = SPECIAL_NODEID
>742	Identifier	SPECIAL_NODEID
>743	MemberAccess	all_edges_list [ j ] . result . target
>744	Identifier	target
>745	MemberAccess	all_edges_list [ j ] . result
>746	Identifier	result
>747	ArrayIndexing	all_edges_list [ j ]
>748	Identifier	j
>749	Identifier	all_edges_list
>750	ExpressionStatement	 
>751	AssignmentExpr	all_edges_list [ j ] . result . source = SPECIAL_NODEID
>752	Identifier	SPECIAL_NODEID
>753	MemberAccess	all_edges_list [ j ] . result . source
>754	Identifier	source
>755	MemberAccess	all_edges_list [ j ] . result
>756	Identifier	result
>757	ArrayIndexing	all_edges_list [ j ]
>758	Identifier	j
>759	Identifier	all_edges_list
>760	IfStatement	if ( j == min_forward_idx || j == min_backward_idx )
>761	CompoundStatement	 
>762	ContinueStatement	 
>763	Condition	 
>764	OrExpression	j == min_forward_idx || j == min_backward_idx
>765	EqualityExpression	j == min_backward_idx
>766	Identifier	min_backward_idx
>767	Identifier	j
>768	EqualityExpression	j == min_forward_idx
>769	Identifier	min_forward_idx
>770	Identifier	j
>771	IncDecOp	 
>772	IncDec	++
>773	Identifier	j
>774	Condition	 
>775	RelationalExpression	j < i
>776	Identifier	i
>777	Identifier	j
>778	ForInit	 
>779	IdentifierDeclStatement	unsigned j = start_idx ;
>780	IdentifierDecl	j = start_idx
>781	AssignmentExpr	j = start_idx
>782	Identifier	start_idx
>783	Identifier	start_idx
>784	Identifier	j
>785	IdentifierDeclType	unsigned
>786	IfStatement	if ( min_backward_idx == min_forward_idx )
>787	ElseStatement	else
>788	CompoundStatement	 
>789	IfStatement	if ( has_backward )
>790	CompoundStatement	 
>791	ExpressionStatement	 
>792	AssignmentExpr	all_edges_list [ min_backward_idx ] . result . is_split = has_forward
>793	Identifier	has_forward
>794	MemberAccess	all_edges_list [ min_backward_idx ] . result . is_split
>795	Identifier	is_split
>796	MemberAccess	all_edges_list [ min_backward_idx ] . result
>797	Identifier	result
>798	ArrayIndexing	all_edges_list [ min_backward_idx ]
>799	Identifier	min_backward_idx
>800	Identifier	all_edges_list
>801	ExpressionStatement	 
>802	AssignmentExpr	all_edges_list [ min_backward_idx ] . result . backward = false
>803	Identifier	false
>804	MemberAccess	all_edges_list [ min_backward_idx ] . result . backward
>805	Identifier	backward
>806	MemberAccess	all_edges_list [ min_backward_idx ] . result
>807	Identifier	result
>808	ArrayIndexing	all_edges_list [ min_backward_idx ]
>809	Identifier	min_backward_idx
>810	Identifier	all_edges_list
>811	ExpressionStatement	 
>812	AssignmentExpr	all_edges_list [ min_backward_idx ] . result . forward = true
>813	Identifier	true
>814	MemberAccess	all_edges_list [ min_backward_idx ] . result . forward
>815	Identifier	forward
>816	MemberAccess	all_edges_list [ min_backward_idx ] . result
>817	Identifier	result
>818	ArrayIndexing	all_edges_list [ min_backward_idx ]
>819	Identifier	min_backward_idx
>820	Identifier	all_edges_list
>821	ExpressionStatement	 
>822	CallExpression	std 
>823	ArgumentList	all_edges_list [ min_backward_idx ] . result . source
>824	Argument	all_edges_list [ min_backward_idx ] . result . target
>825	MemberAccess	all_edges_list [ min_backward_idx ] . result . target
>826	Identifier	target
>827	MemberAccess	all_edges_list [ min_backward_idx ] . result
>828	Identifier	result
>829	ArrayIndexing	all_edges_list [ min_backward_idx ]
>830	Identifier	min_backward_idx
>831	Identifier	all_edges_list
>832	Argument	all_edges_list [ min_backward_idx ] . result . source
>833	MemberAccess	all_edges_list [ min_backward_idx ] . result . source
>834	Identifier	source
>835	MemberAccess	all_edges_list [ min_backward_idx ] . result
>836	Identifier	result
>837	ArrayIndexing	all_edges_list [ min_backward_idx ]
>838	Identifier	min_backward_idx
>839	Identifier	all_edges_list
>840	Callee	std 
>841	Identifier	std 
>842	Condition	 
>843	Identifier	has_backward
>844	IfStatement	if ( has_forward )
>845	CompoundStatement	 
>846	ExpressionStatement	 
>847	AssignmentExpr	all_edges_list [ min_forward_idx ] . result . is_split = has_backward
>848	Identifier	has_backward
>849	MemberAccess	all_edges_list [ min_forward_idx ] . result . is_split
>850	Identifier	is_split
>851	MemberAccess	all_edges_list [ min_forward_idx ] . result
>852	Identifier	result
>853	ArrayIndexing	all_edges_list [ min_forward_idx ]
>854	Identifier	min_forward_idx
>855	Identifier	all_edges_list
>856	ExpressionStatement	 
>857	AssignmentExpr	all_edges_list [ min_forward_idx ] . result . backward = false
>858	Identifier	false
>859	MemberAccess	all_edges_list [ min_forward_idx ] . result . backward
>860	Identifier	backward
>861	MemberAccess	all_edges_list [ min_forward_idx ] . result
>862	Identifier	result
>863	ArrayIndexing	all_edges_list [ min_forward_idx ]
>864	Identifier	min_forward_idx
>865	Identifier	all_edges_list
>866	ExpressionStatement	 
>867	AssignmentExpr	all_edges_list [ min_forward_idx ] . result . forward = true
>868	Identifier	true
>869	MemberAccess	all_edges_list [ min_forward_idx ] . result . forward
>870	Identifier	forward
>871	MemberAccess	all_edges_list [ min_forward_idx ] . result
>872	Identifier	result
>873	ArrayIndexing	all_edges_list [ min_forward_idx ]
>874	Identifier	min_forward_idx
>875	Identifier	all_edges_list
>876	Condition	 
>877	Identifier	has_forward
>878	ExpressionStatement	 
>879	CallExpression	max ( )
>880	ArgumentList	 
>881	Callee	max
>882	Identifier	max
>883	Statement	 
>884	Statement	 
>885	Statement	 
>886	Statement	 
>887	Statement	 
>888	Statement	 
>889	Statement	 
>890	Statement	 
>891	Statement	 
>892	Statement	 
>893	Statement	 
>894	Statement	 
>895	ExpressionStatement	 
>896	CallExpression	max ( )
>897	ArgumentList	 
>898	Callee	max
>899	Identifier	max
>900	Statement	 
>901	Statement	 
>902	Statement	 
>903	Statement	 
>904	Statement	 
>905	Statement	 
>906	Statement	 
>907	Statement	 
>908	Statement	 
>909	Statement	 
>910	Statement	 
>911	Statement	 
>912	CompoundStatement	 
>913	ExpressionStatement	 
>914	AssignmentExpr	all_edges_list [ min_forward_idx ] . result . backward = true
>915	Identifier	true
>916	MemberAccess	all_edges_list [ min_forward_idx ] . result . backward
>917	Identifier	backward
>918	MemberAccess	all_edges_list [ min_forward_idx ] . result
>919	Identifier	result
>920	ArrayIndexing	all_edges_list [ min_forward_idx ]
>921	Identifier	min_forward_idx
>922	Identifier	all_edges_list
>923	ExpressionStatement	 
>924	AssignmentExpr	all_edges_list [ min_forward_idx ] . result . forward = true
>925	Identifier	true
>926	MemberAccess	all_edges_list [ min_forward_idx ] . result . forward
>927	Identifier	forward
>928	MemberAccess	all_edges_list [ min_forward_idx ] . result
>929	Identifier	result
>930	ArrayIndexing	all_edges_list [ min_forward_idx ]
>931	Identifier	min_forward_idx
>932	Identifier	all_edges_list
>933	ExpressionStatement	 
>934	AssignmentExpr	all_edges_list [ min_forward_idx ] . result . is_split = false
>935	Identifier	false
>936	MemberAccess	all_edges_list [ min_forward_idx ] . result . is_split
>937	Identifier	is_split
>938	MemberAccess	all_edges_list [ min_forward_idx ] . result
>939	Identifier	result
>940	ArrayIndexing	all_edges_list [ min_forward_idx ]
>941	Identifier	min_forward_idx
>942	Identifier	all_edges_list
>943	Condition	 
>944	EqualityExpression	min_backward_idx == min_forward_idx
>945	Identifier	min_forward_idx
>946	Identifier	min_backward_idx
>947	ExpressionStatement	 
>948	Statement	 
>949	Statement	 
>950	Statement	 
>951	Statement	 
>952	Statement	 
>953	Statement	 
>954	Statement	 
>955	Statement	 
>956	Statement	 
>957	Statement	 
>958	Statement	 
>959	Statement	 
>960	Statement	 
>961	Statement	 
>962	Statement	 
>963	Statement	 
>964	Statement	 
>965	Statement	 
>966	Statement	 
>967	Statement	 
>968	Statement	 
>969	Statement	 
>970	Statement	 
>971	Statement	 
>972	Statement	 
>973	Statement	 
>974	Statement	 
>975	Statement	 
>976	ExpressionStatement	 
>977	Statement	 
>978	Statement	 
>979	Statement	 
>980	Statement	 
>981	Statement	 
>982	Statement	 
>983	Statement	 
>984	Statement	 
>985	Statement	 
>986	Statement	 
>987	Statement	 
>988	Statement	 
>989	Statement	 
>990	Statement	 
>991	Statement	 
>992	Statement	 
>993	Statement	 
>994	Statement	 
>995	Statement	 
>996	ExpressionStatement	 
>997	Statement	 
>998	Statement	 
>999	Statement	 
>1000	Statement	 
>1001	Statement	 
>1002	Statement	 
>1003	Statement	 
>1004	Statement	 
>1005	Statement	 
>1006	Statement	 
>1007	Statement	 
>1008	Statement	 
>1009	Statement	 
>1010	Statement	 
>1011	Statement	 
>1012	Statement	 
>1013	Statement	 
>1014	Statement	 
>1015	Statement	 
>1016	WhileStatement	while ( all_edges_list [ i ] . result . source == source && all_edges_list [ i ] . result . target == target )
>1017	CompoundStatement	 
>1018	ExpressionStatement	 
>1019	IncDecOp	i ++
>1020	IncDec	++
>1021	Identifier	i
>1022	IfStatement	if ( all_edges_list [ i ] . result . backward && all_edges_list [ i ] . result . weight < min_backward_weight )
>1023	CompoundStatement	 
>1024	ExpressionStatement	 
>1025	AssignmentExpr	min_backward_idx = i
>1026	Identifier	i
>1027	Identifier	min_backward_idx
>1028	Condition	 
>1029	AndExpression	all_edges_list [ i ] . result . backward && all_edges_list [ i ] . result . weight < min_backward_weight
>1030	RelationalExpression	all_edges_list [ i ] . result . weight < min_backward_weight
>1031	Identifier	min_backward_weight
>1032	MemberAccess	all_edges_list [ i ] . result . weight
>1033	Identifier	weight
>1034	MemberAccess	all_edges_list [ i ] . result
>1035	Identifier	result
>1036	ArrayIndexing	all_edges_list [ i ]
>1037	Identifier	i
>1038	Identifier	all_edges_list
>1039	MemberAccess	all_edges_list [ i ] . result . backward
>1040	Identifier	backward
>1041	MemberAccess	all_edges_list [ i ] . result
>1042	Identifier	result
>1043	ArrayIndexing	all_edges_list [ i ]
>1044	Identifier	i
>1045	Identifier	all_edges_list
>1046	IfStatement	if ( all_edges_list [ i ] . result . forward && all_edges_list [ i ] . result . weight < min_forward_weight )
>1047	CompoundStatement	 
>1048	ExpressionStatement	 
>1049	AssignmentExpr	min_forward_idx = i
>1050	Identifier	i
>1051	Identifier	min_forward_idx
>1052	Condition	 
>1053	AndExpression	all_edges_list [ i ] . result . forward && all_edges_list [ i ] . result . weight < min_forward_weight
>1054	RelationalExpression	all_edges_list [ i ] . result . weight < min_forward_weight
>1055	Identifier	min_forward_weight
>1056	MemberAccess	all_edges_list [ i ] . result . weight
>1057	Identifier	weight
>1058	MemberAccess	all_edges_list [ i ] . result
>1059	Identifier	result
>1060	ArrayIndexing	all_edges_list [ i ]
>1061	Identifier	i
>1062	Identifier	all_edges_list
>1063	MemberAccess	all_edges_list [ i ] . result . forward
>1064	Identifier	forward
>1065	MemberAccess	all_edges_list [ i ] . result
>1066	Identifier	result
>1067	ArrayIndexing	all_edges_list [ i ]
>1068	Identifier	i
>1069	Identifier	all_edges_list
>1070	Condition	 
>1071	AndExpression	all_edges_list [ i ] . result . source == source && all_edges_list [ i ] . result . target == target
>1072	EqualityExpression	all_edges_list [ i ] . result . target == target
>1073	Identifier	target
>1074	MemberAccess	all_edges_list [ i ] . result . target
>1075	Identifier	target
>1076	MemberAccess	all_edges_list [ i ] . result
>1077	Identifier	result
>1078	ArrayIndexing	all_edges_list [ i ]
>1079	Identifier	i
>1080	Identifier	all_edges_list
>1081	EqualityExpression	all_edges_list [ i ] . result . source == source
>1082	Identifier	source
>1083	MemberAccess	all_edges_list [ i ] . result . source
>1084	Identifier	source
>1085	MemberAccess	all_edges_list [ i ] . result
>1086	Identifier	result
>1087	ArrayIndexing	all_edges_list [ i ]
>1088	Identifier	i
>1089	Identifier	all_edges_list
>1090	ExpressionStatement	 
>1091	CallExpression	max ( )
>1092	ArgumentList	 
>1093	Callee	max
>1094	Identifier	max
>1095	Statement	 
>1096	Statement	 
>1097	Statement	 
>1098	Statement	 
>1099	Statement	 
>1100	Statement	 
>1101	Statement	 
>1102	Statement	 
>1103	Statement	 
>1104	Statement	 
>1105	ExpressionStatement	 
>1106	CallExpression	max ( )
>1107	ArgumentList	 
>1108	Callee	max
>1109	Identifier	max
>1110	Statement	 
>1111	Statement	 
>1112	Statement	 
>1113	Statement	 
>1114	Statement	 
>1115	Statement	 
>1116	Statement	 
>1117	Statement	 
>1118	Statement	 
>1119	Statement	 
>1120	ExpressionStatement	 
>1121	CallExpression	max ( )
>1122	ArgumentList	 
>1123	Callee	max
>1124	Identifier	max
>1125	Statement	 
>1126	Statement	 
>1127	Statement	 
>1128	Statement	 
>1129	Statement	 
>1130	Statement	 
>1131	Statement	 
>1132	Statement	 
>1133	Statement	 
>1134	Statement	 
>1135	ExpressionStatement	 
>1136	CallExpression	max ( )
>1137	ArgumentList	 
>1138	Callee	max
>1139	Identifier	max
>1140	Statement	 
>1141	Statement	 
>1142	Statement	 
>1143	Statement	 
>1144	Statement	 
>1145	Statement	 
>1146	Statement	 
>1147	Statement	 
>1148	Statement	 
>1149	Statement	 
>1150	IdentifierDeclStatement	 
>1151	IdentifierDecl	target = all_edges_list [ i ] . result . target
>1152	AssignmentExpr	target = all_edges_list [ i ] . result . target
>1153	MemberAccess	all_edges_list [ i ] . result . target
>1154	Identifier	target
>1155	MemberAccess	all_edges_list [ i ] . result
>1156	Identifier	result
>1157	ArrayIndexing	all_edges_list [ i ]
>1158	Identifier	i
>1159	Identifier	all_edges_list
>1160	Identifier	target
>1161	Identifier	target
>1162	IdentifierDeclType	NodeID
>1163	IdentifierDeclStatement	 
>1164	IdentifierDecl	source = all_edges_list [ i ] . result . source
>1165	AssignmentExpr	source = all_edges_list [ i ] . result . source
>1166	MemberAccess	all_edges_list [ i ] . result . source
>1167	Identifier	source
>1168	MemberAccess	all_edges_list [ i ] . result
>1169	Identifier	result
>1170	ArrayIndexing	all_edges_list [ i ]
>1171	Identifier	i
>1172	Identifier	all_edges_list
>1173	Identifier	source
>1174	Identifier	source
>1175	IdentifierDeclType	NodeID
>1176	IdentifierDeclStatement	 
>1177	IdentifierDecl	start_idx = i
>1178	AssignmentExpr	start_idx = i
>1179	Identifier	i
>1180	Identifier	i
>1181	Identifier	start_idx
>1182	IdentifierDeclType	unsigned
>1183	IfStatement	if ( all_edges_list [ i ] . result . target == SPECIAL_NODEID )
>1184	CompoundStatement	 
>1185	ContinueStatement	 
>1186	ExpressionStatement	 
>1187	UnaryExpression	++ i
>1188	Identifier	i
>1189	IncDec	++
>1190	Condition	 
>1191	EqualityExpression	all_edges_list [ i ] . result . target == SPECIAL_NODEID
>1192	Identifier	SPECIAL_NODEID
>1193	MemberAccess	all_edges_list [ i ] . result . target
>1194	Identifier	target
>1195	MemberAccess	all_edges_list [ i ] . result
>1196	Identifier	result
>1197	ArrayIndexing	all_edges_list [ i ]
>1198	Identifier	i
>1199	Identifier	all_edges_list
>1200	IfStatement	if ( all_edges_list [ i ] . result . source == SPECIAL_NODEID )
>1201	CompoundStatement	 
>1202	BreakStatement	 
>1203	Condition	 
>1204	EqualityExpression	all_edges_list [ i ] . result . source == SPECIAL_NODEID
>1205	Identifier	SPECIAL_NODEID
>1206	MemberAccess	all_edges_list [ i ] . result . source
>1207	Identifier	source
>1208	MemberAccess	all_edges_list [ i ] . result
>1209	Identifier	result
>1210	ArrayIndexing	all_edges_list [ i ]
>1211	Identifier	i
>1212	Identifier	all_edges_list
>1213	Condition	 
>1214	RelationalExpression	i < all_edges_list . size ( )
>1215	CallExpression	all_edges_list . size ( )
>1216	ArgumentList	 
>1217	Callee	all_edges_list . size
>1218	MemberAccess	all_edges_list . size
>1219	Identifier	size
>1220	Identifier	all_edges_list
>1221	Identifier	i
>1222	ForInit	 
>1223	IdentifierDeclStatement	unsigned i = 0 ;
>1224	IdentifierDecl	i = 0
>1225	AssignmentExpr	i = 0
>1226	PrimaryExpression	0
>1227	Identifier	i
>1228	Identifier	i
>1229	IdentifierDeclType	unsigned
>1230	ExpressionStatement	 
>1231	CallExpression	BOOST_ASSERT ( all_edges_list . size ( ) > 0 )
>1232	ArgumentList	all_edges_list . size ( ) > 0
>1233	Argument	all_edges_list . size ( ) > 0
>1234	RelationalExpression	all_edges_list . size ( ) > 0
>1235	PrimaryExpression	0
>1236	CallExpression	all_edges_list . size ( )
>1237	ArgumentList	 
>1238	Callee	all_edges_list . size
>1239	MemberAccess	all_edges_list . size
>1240	Identifier	size
>1241	Identifier	all_edges_list
>1242	Callee	BOOST_ASSERT
>1243	Identifier	BOOST_ASSERT
>1244	ExpressionStatement	 
>1245	ShiftExpression	std 
>1246	ShiftExpression	\"ok, after \" << TIMER_SEC ( sort_edges_by_renumbered_start ) << \"s\" << std 
>1247	ShiftExpression	TIMER_SEC ( sort_edges_by_renumbered_start ) << \"s\" << std 
>1248	ShiftExpression	\"s\" << std 
>1249	Identifier	std 
>1250	PrimaryExpression	\"s\"
>1251	CallExpression	TIMER_SEC ( sort_edges_by_renumbered_start )
>1252	ArgumentList	sort_edges_by_renumbered_start
>1253	Argument	sort_edges_by_renumbered_start
>1254	Identifier	sort_edges_by_renumbered_start
>1255	Callee	TIMER_SEC
>1256	Identifier	TIMER_SEC
>1257	PrimaryExpression	\"ok, after \"
>1258	Identifier	std 
>1259	ExpressionStatement	 
>1260	CallExpression	TIMER_STOP ( sort_edges_by_renumbered_start )
>1261	ArgumentList	sort_edges_by_renumbered_start
>1262	Argument	sort_edges_by_renumbered_start
>1263	Identifier	sort_edges_by_renumbered_start
>1264	Callee	TIMER_STOP
>1265	Identifier	TIMER_STOP
>1266	ExpressionStatement	 
>1267	CallExpression	stxxl 
>1268	ArgumentList	all_edges_list . begin ( )
>1269	Argument	stxxl_memory
>1270	Identifier	stxxl_memory
>1271	Argument	CmpEdgeByStartThenTargetID ( )
>1272	CallExpression	CmpEdgeByStartThenTargetID ( )
>1273	ArgumentList	 
>1274	Callee	CmpEdgeByStartThenTargetID
>1275	Identifier	CmpEdgeByStartThenTargetID
>1276	Argument	all_edges_list . end ( )
>1277	CallExpression	all_edges_list . end ( )
>1278	ArgumentList	 
>1279	Callee	all_edges_list . end
>1280	MemberAccess	all_edges_list . end
>1281	Identifier	end
>1282	Identifier	all_edges_list
>1283	Argument	all_edges_list . begin ( )
>1284	CallExpression	all_edges_list . begin ( )
>1285	ArgumentList	 
>1286	Callee	all_edges_list . begin
>1287	MemberAccess	all_edges_list . begin
>1288	Identifier	begin
>1289	Identifier	all_edges_list
>1290	Callee	stxxl 
>1291	Identifier	stxxl 
>1292	ExpressionStatement	 
>1293	CallExpression	TIMER_START ( sort_edges_by_renumbered_start )
>1294	ArgumentList	sort_edges_by_renumbered_start
>1295	Argument	sort_edges_by_renumbered_start
>1296	Identifier	sort_edges_by_renumbered_start
>1297	Callee	TIMER_START
>1298	Identifier	TIMER_START
>1299	ExpressionStatement	 
>1300	ShiftExpression	std 
>1301	ShiftExpression	\"[extractor] Sorting edges by renumbered start ... \" << std 
>1302	Identifier	std 
>1303	PrimaryExpression	\"[extractor] Sorting edges by renumbered start ... \"
>1304	Identifier	std 
>1305	ExpressionStatement	 
>1306	ShiftExpression	std 
>1307	ShiftExpression	\"ok, after \" << TIMER_SEC ( compute_weights ) << \"s\" << std 
>1308	ShiftExpression	TIMER_SEC ( compute_weights ) << \"s\" << std 
>1309	ShiftExpression	\"s\" << std 
>1310	Identifier	std 
>1311	PrimaryExpression	\"s\"
>1312	CallExpression	TIMER_SEC ( compute_weights )
>1313	ArgumentList	compute_weights
>1314	Argument	compute_weights
>1315	Identifier	compute_weights
>1316	Callee	TIMER_SEC
>1317	Identifier	TIMER_SEC
>1318	PrimaryExpression	\"ok, after \"
>1319	Identifier	std 
>1320	ExpressionStatement	 
>1321	CallExpression	TIMER_STOP ( compute_weights )
>1322	ArgumentList	compute_weights
>1323	Argument	compute_weights
>1324	Identifier	compute_weights
>1325	Callee	TIMER_STOP
>1326	Identifier	TIMER_STOP
>1327	WhileStatement	while ( edge_iterator != all_edges_list . end ( ) && node_iterator != all_nodes_list . end ( ) )
>1328	CompoundStatement	 
>1329	ExpressionStatement	 
>1330	UnaryExpression	++ edge_iterator
>1331	Identifier	edge_iterator
>1332	IncDec	++
>1333	IfStatement	if ( edge . source > edge . target )
>1334	CompoundStatement	 
>1335	ExpressionStatement	 
>1336	AssignmentExpr	edge . backward = temp
>1337	Identifier	temp
>1338	MemberAccess	edge . backward
>1339	Identifier	backward
>1340	Identifier	edge
>1341	ExpressionStatement	 
>1342	AssignmentExpr	edge . forward = edge . backward
>1343	MemberAccess	edge . backward
>1344	Identifier	backward
>1345	Identifier	edge
>1346	MemberAccess	edge . forward
>1347	Identifier	forward
>1348	Identifier	edge
>1349	IdentifierDeclStatement	 
>1350	IdentifierDecl	temp = edge . forward
>1351	AssignmentExpr	temp = edge . forward
>1352	MemberAccess	edge . forward
>1353	Identifier	forward
>1354	Identifier	edge
>1355	Identifier	temp
>1356	Identifier	temp
>1357	IdentifierDeclType	bool
>1358	ExpressionStatement	 
>1359	CallExpression	std 
>1360	ArgumentList	edge . source
>1361	Argument	edge . target
>1362	MemberAccess	edge . target
>1363	Identifier	target
>1364	Identifier	edge
>1365	Argument	edge . source
>1366	MemberAccess	edge . source
>1367	Identifier	source
>1368	Identifier	edge
>1369	Callee	std 
>1370	Identifier	std 
>1371	Condition	 
>1372	RelationalExpression	edge . source > edge . target
>1373	MemberAccess	edge . target
>1374	Identifier	target
>1375	Identifier	edge
>1376	MemberAccess	edge . source
>1377	Identifier	source
>1378	Identifier	edge
>1379	ExpressionStatement	 
>1380	AssignmentExpr	edge . target = id_iter -> second
>1381	PtrMemberAccess	id_iter -> second
>1382	Identifier	second
>1383	Identifier	id_iter
>1384	MemberAccess	edge . target
>1385	Identifier	target
>1386	Identifier	edge
>1387	ExpressionStatement	 
>1388	CallExpression	BOOST_ASSERT ( id_iter != external_to_internal_node_id_map . end ( ) )
>1389	ArgumentList	id_iter != external_to_internal_node_id_map . end ( )
>1390	Argument	id_iter != external_to_internal_node_id_map . end ( )
>1391	EqualityExpression	id_iter != external_to_internal_node_id_map . end ( )
>1392	CallExpression	external_to_internal_node_id_map . end ( )
>1393	ArgumentList	 
>1394	Callee	external_to_internal_node_id_map . end
>1395	MemberAccess	external_to_internal_node_id_map . end
>1396	Identifier	end
>1397	Identifier	external_to_internal_node_id_map
>1398	Identifier	id_iter
>1399	Callee	BOOST_ASSERT
>1400	Identifier	BOOST_ASSERT
>1401	ExpressionStatement	 
>1402	AssignmentExpr	id_iter = external_to_internal_node_id_map . find ( node_iterator -> node_id )
>1403	CallExpression	external_to_internal_node_id_map . find ( node_iterator -> node_id )
>1404	ArgumentList	node_iterator -> node_id
>1405	Argument	node_iterator -> node_id
>1406	PtrMemberAccess	node_iterator -> node_id
>1407	Identifier	node_id
>1408	Identifier	node_iterator
>1409	Callee	external_to_internal_node_id_map . find
>1410	MemberAccess	external_to_internal_node_id_map . find
>1411	Identifier	find
>1412	Identifier	external_to_internal_node_id_map
>1413	Identifier	id_iter
>1414	Statement	 
>1415	ExpressionStatement	 
>1416	AssignmentExpr	edge . weight = std 
>1417	CallExpression	std 
>1418	ArgumentList	1
>1419	Argument	static_cast < int > ( std 
>1420	RelationalExpression	static_cast < int > ( std 
>1421	RelationalExpression	int > ( std 
>1422	CallExpression	std 
>1423	ArgumentList	weight + .5
>1424	Argument	weight + .5
>1425	AdditiveExpression	weight + .5
>1426	PrimaryExpression	.5
>1427	Identifier	weight
>1428	Callee	std 
>1429	Identifier	std 
>1430	Identifier	int
>1431	Identifier	static_cast
>1432	Argument	1
>1433	PrimaryExpression	1
>1434	Callee	std 
>1435	Identifier	std 
>1436	MemberAccess	edge . weight
>1437	Identifier	weight
>1438	Identifier	edge
>1439	ExpressionStatement	 
>1440	AssignmentExpr	& edge = edge_iterator -> result
>1441	PtrMemberAccess	edge_iterator -> result
>1442	Identifier	result
>1443	Identifier	edge_iterator
>1444	UnaryOp	& edge
>1445	Identifier	edge
>1446	UnaryOperator	&
>1447	Statement	 
>1448	ExpressionStatement	 
>1449	PtrMemberAccess	edge_iterator -> weight_data
>1450	Identifier	weight_data
>1451	Identifier	edge_iterator
>1452	CompoundStatement	 
>1453	ReturnStatement	 
>1454	UnaryOp	- 1.0
>1455	PrimaryExpression	1.0
>1456	UnaryOperator	-
>1457	SwitchStatement	switch ( data . type )
>1458	CompoundStatement	 
>1459	ExpressionStatement	 
>1460	CallExpression	osrm 
>1461	ArgumentList	\"invalid weight type\"
>1462	Argument	\"invalid weight type\"
>1463	PrimaryExpression	\"invalid weight type\"
>1464	Callee	osrm 
>1465	Identifier	osrm 
>1466	Label	 
>1467	Identifier	InternalExtractorEdge 
>1468	BreakStatement	 
>1469	ReturnStatement	 
>1470	MultiplicativeExpression	( distance * 10. ) / ( data . speed / 3.6 )
>1471	MultiplicativeExpression	data . speed / 3.6
>1472	PrimaryExpression	3.6
>1473	MemberAccess	data . speed
>1474	Identifier	speed
>1475	Identifier	data
>1476	MultiplicativeExpression	distance * 10.
>1477	PrimaryExpression	10.
>1478	Identifier	distance
>1479	Label	 
>1480	Identifier	InternalExtractorEdge 
>1481	BreakStatement	 
>1482	ReturnStatement	 
>1483	MultiplicativeExpression	data . duration * 10.
>1484	PrimaryExpression	10.
>1485	MemberAccess	data . duration
>1486	Identifier	duration
>1487	Identifier	data
>1488	Label	 
>1489	Identifier	InternalExtractorEdge 
>1490	Label	 
>1491	Identifier	InternalExtractorEdge 
>1492	Condition	 
>1493	MemberAccess	data . type
>1494	Identifier	type
>1495	Identifier	data
>1496	Statement	 
>1497	Statement	 
>1498	Statement	 
>1499	Statement	 
>1500	Statement	 
>1501	Statement	 
>1502	Statement	 
>1503	Statement	 
>1504	Statement	 
>1505	Statement	 
>1506	Statement	 
>1507	Statement	 
>1508	Statement	 
>1509	Statement	 
>1510	Statement	 
>1511	IdentifierDeclStatement	 
>1512	IdentifierDecl	distance = coordinate_calculation 
>1513	AssignmentExpr	distance = coordinate_calculation 
>1514	CallExpression	coordinate_calculation 
>1515	ArgumentList	edge_iterator -> source_coordinate . lat
>1516	Argument	node_iterator -> lon
>1517	PtrMemberAccess	node_iterator -> lon
>1518	Identifier	lon
>1519	Identifier	node_iterator
>1520	Argument	node_iterator -> lat
>1521	PtrMemberAccess	node_iterator -> lat
>1522	Identifier	lat
>1523	Identifier	node_iterator
>1524	Argument	edge_iterator -> source_coordinate . lon
>1525	MemberAccess	edge_iterator -> source_coordinate . lon
>1526	Identifier	lon
>1527	PtrMemberAccess	edge_iterator -> source_coordinate
>1528	Identifier	source_coordinate
>1529	Identifier	edge_iterator
>1530	Argument	edge_iterator -> source_coordinate . lat
>1531	MemberAccess	edge_iterator -> source_coordinate . lat
>1532	Identifier	lat
>1533	PtrMemberAccess	edge_iterator -> source_coordinate
>1534	Identifier	source_coordinate
>1535	Identifier	edge_iterator
>1536	Callee	coordinate_calculation 
>1537	Identifier	coordinate_calculation 
>1538	Identifier	distance
>1539	Identifier	distance
>1540	IdentifierDeclType	const double
>1541	ExpressionStatement	 
>1542	Statement	 
>1543	Statement	 
>1544	Statement	 
>1545	Statement	 
>1546	Statement	 
>1547	Statement	 
>1548	Statement	 
>1549	Statement	 
>1550	Statement	 
>1551	Statement	 
>1552	Statement	 
>1553	Statement	 
>1554	Statement	 
>1555	Statement	 
>1556	Statement	 
>1557	Statement	 
>1558	Statement	 
>1559	Statement	 
>1560	Statement	 
>1561	ExpressionStatement	 
>1562	Statement	 
>1563	Statement	 
>1564	Statement	 
>1565	Statement	 
>1566	Statement	 
>1567	Statement	 
>1568	Statement	 
>1569	Statement	 
>1570	Statement	 
>1571	Statement	 
>1572	Statement	 
>1573	Statement	 
>1574	Statement	 
>1575	Statement	 
>1576	Statement	 
>1577	Statement	 
>1578	Statement	 
>1579	Statement	 
>1580	Statement	 
>1581	ExpressionStatement	 
>1582	CallExpression	BOOST_ASSERT ( edge_iterator -> weight_data . speed >= 0 )
>1583	ArgumentList	edge_iterator -> weight_data . speed >= 0
>1584	Argument	edge_iterator -> weight_data . speed >= 0
>1585	RelationalExpression	edge_iterator -> weight_data . speed >= 0
>1586	PrimaryExpression	0
>1587	MemberAccess	edge_iterator -> weight_data . speed
>1588	Identifier	speed
>1589	PtrMemberAccess	edge_iterator -> weight_data
>1590	Identifier	weight_data
>1591	Identifier	edge_iterator
>1592	Callee	BOOST_ASSERT
>1593	Identifier	BOOST_ASSERT
>1594	ExpressionStatement	 
>1595	CallExpression	BOOST_ASSERT ( edge_iterator -> result . target == node_iterator -> node_id )
>1596	ArgumentList	edge_iterator -> result . target == node_iterator -> node_id
>1597	Argument	edge_iterator -> result . target == node_iterator -> node_id
>1598	EqualityExpression	edge_iterator -> result . target == node_iterator -> node_id
>1599	PtrMemberAccess	node_iterator -> node_id
>1600	Identifier	node_id
>1601	Identifier	node_iterator
>1602	MemberAccess	edge_iterator -> result . target
>1603	Identifier	target
>1604	PtrMemberAccess	edge_iterator -> result
>1605	Identifier	result
>1606	Identifier	edge_iterator
>1607	Callee	BOOST_ASSERT
>1608	Identifier	BOOST_ASSERT
>1609	IfStatement	if ( edge_iterator -> result . target > node_iterator -> node_id )
>1610	CompoundStatement	 
>1611	ContinueStatement	 
>1612	ExpressionStatement	 
>1613	UnaryExpression	++ node_iterator
>1614	Identifier	node_iterator
>1615	IncDec	++
>1616	Condition	 
>1617	RelationalExpression	edge_iterator -> result . target > node_iterator -> node_id
>1618	PtrMemberAccess	node_iterator -> node_id
>1619	Identifier	node_id
>1620	Identifier	node_iterator
>1621	MemberAccess	edge_iterator -> result . target
>1622	Identifier	target
>1623	PtrMemberAccess	edge_iterator -> result
>1624	Identifier	result
>1625	Identifier	edge_iterator
>1626	IfStatement	if ( edge_iterator -> result . target < node_iterator -> node_id )
>1627	CompoundStatement	 
>1628	ContinueStatement	 
>1629	ExpressionStatement	 
>1630	UnaryExpression	++ edge_iterator
>1631	Identifier	edge_iterator
>1632	IncDec	++
>1633	ExpressionStatement	 
>1634	AssignmentExpr	edge_iterator -> result . target = SPECIAL_NODEID
>1635	Identifier	SPECIAL_NODEID
>1636	MemberAccess	edge_iterator -> result . target
>1637	Identifier	target
>1638	PtrMemberAccess	edge_iterator -> result
>1639	Identifier	result
>1640	Identifier	edge_iterator
>1641	Condition	 
>1642	RelationalExpression	edge_iterator -> result . target < node_iterator -> node_id
>1643	PtrMemberAccess	node_iterator -> node_id
>1644	Identifier	node_id
>1645	Identifier	node_iterator
>1646	MemberAccess	edge_iterator -> result . target
>1647	Identifier	target
>1648	PtrMemberAccess	edge_iterator -> result
>1649	Identifier	result
>1650	Identifier	edge_iterator
>1651	IfStatement	if ( edge_iterator -> result . source == SPECIAL_NODEID )
>1652	CompoundStatement	 
>1653	ContinueStatement	 
>1654	ExpressionStatement	 
>1655	UnaryExpression	++ edge_iterator
>1656	Identifier	edge_iterator
>1657	IncDec	++
>1658	Condition	 
>1659	EqualityExpression	edge_iterator -> result . source == SPECIAL_NODEID
>1660	Identifier	SPECIAL_NODEID
>1661	MemberAccess	edge_iterator -> result . source
>1662	Identifier	source
>1663	PtrMemberAccess	edge_iterator -> result
>1664	Identifier	result
>1665	Identifier	edge_iterator
>1666	Condition	 
>1667	AndExpression	edge_iterator != all_edges_list . end ( ) && node_iterator != all_nodes_list . end ( )
>1668	EqualityExpression	node_iterator != all_nodes_list . end ( )
>1669	CallExpression	all_nodes_list . end ( )
>1670	ArgumentList	 
>1671	Callee	all_nodes_list . end
>1672	MemberAccess	all_nodes_list . end
>1673	Identifier	end
>1674	Identifier	all_nodes_list
>1675	Identifier	node_iterator
>1676	EqualityExpression	edge_iterator != all_edges_list . end ( )
>1677	CallExpression	all_edges_list . end ( )
>1678	ArgumentList	 
>1679	Callee	all_edges_list . end
>1680	MemberAccess	all_edges_list . end
>1681	Identifier	end
>1682	Identifier	all_edges_list
>1683	Identifier	edge_iterator
>1684	ExpressionStatement	 
>1685	AssignmentExpr	edge_iterator = all_edges_list . begin ( )
>1686	CallExpression	all_edges_list . begin ( )
>1687	ArgumentList	 
>1688	Callee	all_edges_list . begin
>1689	MemberAccess	all_edges_list . begin
>1690	Identifier	begin
>1691	Identifier	all_edges_list
>1692	Identifier	edge_iterator
>1693	ExpressionStatement	 
>1694	AssignmentExpr	node_iterator = all_nodes_list . begin ( )
>1695	CallExpression	all_nodes_list . begin ( )
>1696	ArgumentList	 
>1697	Callee	all_nodes_list . begin
>1698	MemberAccess	all_nodes_list . begin
>1699	Identifier	begin
>1700	Identifier	all_nodes_list
>1701	Identifier	node_iterator
>1702	ExpressionStatement	 
>1703	CallExpression	TIMER_START ( compute_weights )
>1704	ArgumentList	compute_weights
>1705	Argument	compute_weights
>1706	Identifier	compute_weights
>1707	Callee	TIMER_START
>1708	Identifier	TIMER_START
>1709	ExpressionStatement	 
>1710	ShiftExpression	std 
>1711	ShiftExpression	\"[extractor] Computing edge weights    ... \" << std 
>1712	Identifier	std 
>1713	PrimaryExpression	\"[extractor] Computing edge weights    ... \"
>1714	Identifier	std 
>1715	ExpressionStatement	 
>1716	ShiftExpression	std 
>1717	ShiftExpression	\"ok, after \" << TIMER_SEC ( sort_edges_by_target ) << \"s\" << std 
>1718	ShiftExpression	TIMER_SEC ( sort_edges_by_target ) << \"s\" << std 
>1719	ShiftExpression	\"s\" << std 
>1720	Identifier	std 
>1721	PrimaryExpression	\"s\"
>1722	CallExpression	TIMER_SEC ( sort_edges_by_target )
>1723	ArgumentList	sort_edges_by_target
>1724	Argument	sort_edges_by_target
>1725	Identifier	sort_edges_by_target
>1726	Callee	TIMER_SEC
>1727	Identifier	TIMER_SEC
>1728	PrimaryExpression	\"ok, after \"
>1729	Identifier	std 
>1730	ExpressionStatement	 
>1731	CallExpression	TIMER_STOP ( sort_edges_by_target )
>1732	ArgumentList	sort_edges_by_target
>1733	Argument	sort_edges_by_target
>1734	Identifier	sort_edges_by_target
>1735	Callee	TIMER_STOP
>1736	Identifier	TIMER_STOP
>1737	ExpressionStatement	 
>1738	CallExpression	stxxl 
>1739	ArgumentList	all_edges_list . begin ( )
>1740	Argument	stxxl_memory
>1741	Identifier	stxxl_memory
>1742	Argument	CmpEdgeByTargetID ( )
>1743	CallExpression	CmpEdgeByTargetID ( )
>1744	ArgumentList	 
>1745	Callee	CmpEdgeByTargetID
>1746	Identifier	CmpEdgeByTargetID
>1747	Argument	all_edges_list . end ( )
>1748	CallExpression	all_edges_list . end ( )
>1749	ArgumentList	 
>1750	Callee	all_edges_list . end
>1751	MemberAccess	all_edges_list . end
>1752	Identifier	end
>1753	Identifier	all_edges_list
>1754	Argument	all_edges_list . begin ( )
>1755	CallExpression	all_edges_list . begin ( )
>1756	ArgumentList	 
>1757	Callee	all_edges_list . begin
>1758	MemberAccess	all_edges_list . begin
>1759	Identifier	begin
>1760	Identifier	all_edges_list
>1761	Callee	stxxl 
>1762	Identifier	stxxl 
>1763	ExpressionStatement	 
>1764	CallExpression	TIMER_START ( sort_edges_by_target )
>1765	ArgumentList	sort_edges_by_target
>1766	Argument	sort_edges_by_target
>1767	Identifier	sort_edges_by_target
>1768	Callee	TIMER_START
>1769	Identifier	TIMER_START
>1770	ExpressionStatement	 
>1771	ShiftExpression	std 
>1772	ShiftExpression	\"[extractor] Sorting edges by target   ... \" << std 
>1773	Identifier	std 
>1774	PrimaryExpression	\"[extractor] Sorting edges by target   ... \"
>1775	Identifier	std 
>1776	ExpressionStatement	 
>1777	ShiftExpression	std 
>1778	ShiftExpression	\"ok, after \" << TIMER_SEC ( set_start_coords ) << \"s\" << std 
>1779	ShiftExpression	TIMER_SEC ( set_start_coords ) << \"s\" << std 
>1780	ShiftExpression	\"s\" << std 
>1781	Identifier	std 
>1782	PrimaryExpression	\"s\"
>1783	CallExpression	TIMER_SEC ( set_start_coords )
>1784	ArgumentList	set_start_coords
>1785	Argument	set_start_coords
>1786	Identifier	set_start_coords
>1787	Callee	TIMER_SEC
>1788	Identifier	TIMER_SEC
>1789	PrimaryExpression	\"ok, after \"
>1790	Identifier	std 
>1791	ExpressionStatement	 
>1792	CallExpression	TIMER_STOP ( set_start_coords )
>1793	ArgumentList	set_start_coords
>1794	Argument	set_start_coords
>1795	Identifier	set_start_coords
>1796	Callee	TIMER_STOP
>1797	Identifier	TIMER_STOP
>1798	WhileStatement	while ( edge_iterator != all_edges_list . end ( ) && node_iterator != all_nodes_list . end ( ) )
>1799	CompoundStatement	 
>1800	ExpressionStatement	 
>1801	UnaryExpression	++ edge_iterator
>1802	Identifier	edge_iterator
>1803	IncDec	++
>1804	ExpressionStatement	 
>1805	AssignmentExpr	edge_iterator -> source_coordinate . lon = node_iterator -> lon
>1806	PtrMemberAccess	node_iterator -> lon
>1807	Identifier	lon
>1808	Identifier	node_iterator
>1809	MemberAccess	edge_iterator -> source_coordinate . lon
>1810	Identifier	lon
>1811	PtrMemberAccess	edge_iterator -> source_coordinate
>1812	Identifier	source_coordinate
>1813	Identifier	edge_iterator
>1814	ExpressionStatement	 
>1815	AssignmentExpr	edge_iterator -> source_coordinate . lat = node_iterator -> lat
>1816	PtrMemberAccess	node_iterator -> lat
>1817	Identifier	lat
>1818	Identifier	node_iterator
>1819	MemberAccess	edge_iterator -> source_coordinate . lat
>1820	Identifier	lat
>1821	PtrMemberAccess	edge_iterator -> source_coordinate
>1822	Identifier	source_coordinate
>1823	Identifier	edge_iterator
>1824	ExpressionStatement	 
>1825	AssignmentExpr	edge_iterator -> result . source = id_iter -> second
>1826	PtrMemberAccess	id_iter -> second
>1827	Identifier	second
>1828	Identifier	id_iter
>1829	MemberAccess	edge_iterator -> result . source
>1830	Identifier	source
>1831	PtrMemberAccess	edge_iterator -> result
>1832	Identifier	result
>1833	Identifier	edge_iterator
>1834	ExpressionStatement	 
>1835	CallExpression	BOOST_ASSERT ( id_iter != external_to_internal_node_id_map . end ( ) )
>1836	ArgumentList	id_iter != external_to_internal_node_id_map . end ( )
>1837	Argument	id_iter != external_to_internal_node_id_map . end ( )
>1838	EqualityExpression	id_iter != external_to_internal_node_id_map . end ( )
>1839	CallExpression	external_to_internal_node_id_map . end ( )
>1840	ArgumentList	 
>1841	Callee	external_to_internal_node_id_map . end
>1842	MemberAccess	external_to_internal_node_id_map . end
>1843	Identifier	end
>1844	Identifier	external_to_internal_node_id_map
>1845	Identifier	id_iter
>1846	Callee	BOOST_ASSERT
>1847	Identifier	BOOST_ASSERT
>1848	ExpressionStatement	 
>1849	AssignmentExpr	id_iter = external_to_internal_node_id_map . find ( node_iterator -> node_id )
>1850	CallExpression	external_to_internal_node_id_map . find ( node_iterator -> node_id )
>1851	ArgumentList	node_iterator -> node_id
>1852	Argument	node_iterator -> node_id
>1853	PtrMemberAccess	node_iterator -> node_id
>1854	Identifier	node_id
>1855	Identifier	node_iterator
>1856	Callee	external_to_internal_node_id_map . find
>1857	MemberAccess	external_to_internal_node_id_map . find
>1858	Identifier	find
>1859	Identifier	external_to_internal_node_id_map
>1860	Identifier	id_iter
>1861	Statement	 
>1862	ExpressionStatement	 
>1863	CallExpression	BOOST_ASSERT ( edge_iterator -> result . source == node_iterator -> node_id )
>1864	ArgumentList	edge_iterator -> result . source == node_iterator -> node_id
>1865	Argument	edge_iterator -> result . source == node_iterator -> node_id
>1866	EqualityExpression	edge_iterator -> result . source == node_iterator -> node_id
>1867	PtrMemberAccess	node_iterator -> node_id
>1868	Identifier	node_id
>1869	Identifier	node_iterator
>1870	MemberAccess	edge_iterator -> result . source
>1871	Identifier	source
>1872	PtrMemberAccess	edge_iterator -> result
>1873	Identifier	result
>1874	Identifier	edge_iterator
>1875	Callee	BOOST_ASSERT
>1876	Identifier	BOOST_ASSERT
>1877	IfStatement	if ( edge_iterator -> result . source == edge_iterator -> result . target )
>1878	CompoundStatement	 
>1879	ContinueStatement	 
>1880	ExpressionStatement	 
>1881	UnaryExpression	++ edge_iterator
>1882	Identifier	edge_iterator
>1883	IncDec	++
>1884	ExpressionStatement	 
>1885	AssignmentExpr	edge_iterator -> result . target = SPECIAL_NODEID
>1886	Identifier	SPECIAL_NODEID
>1887	MemberAccess	edge_iterator -> result . target
>1888	Identifier	target
>1889	PtrMemberAccess	edge_iterator -> result
>1890	Identifier	result
>1891	Identifier	edge_iterator
>1892	ExpressionStatement	 
>1893	AssignmentExpr	edge_iterator -> result . source = SPECIAL_NODEID
>1894	Identifier	SPECIAL_NODEID
>1895	MemberAccess	edge_iterator -> result . source
>1896	Identifier	source
>1897	PtrMemberAccess	edge_iterator -> result
>1898	Identifier	result
>1899	Identifier	edge_iterator
>1900	Condition	 
>1901	EqualityExpression	edge_iterator -> result . source == edge_iterator -> result . target
>1902	MemberAccess	edge_iterator -> result . target
>1903	Identifier	target
>1904	PtrMemberAccess	edge_iterator -> result
>1905	Identifier	result
>1906	Identifier	edge_iterator
>1907	MemberAccess	edge_iterator -> result . source
>1908	Identifier	source
>1909	PtrMemberAccess	edge_iterator -> result
>1910	Identifier	result
>1911	Identifier	edge_iterator
>1912	IfStatement	if ( edge_iterator -> result . source > node_iterator -> node_id )
>1913	CompoundStatement	 
>1914	ContinueStatement	 
>1915	ExpressionStatement	 
>1916	IncDecOp	node_iterator ++
>1917	IncDec	++
>1918	Identifier	node_iterator
>1919	Condition	 
>1920	RelationalExpression	edge_iterator -> result . source > node_iterator -> node_id
>1921	PtrMemberAccess	node_iterator -> node_id
>1922	Identifier	node_id
>1923	Identifier	node_iterator
>1924	MemberAccess	edge_iterator -> result . source
>1925	Identifier	source
>1926	PtrMemberAccess	edge_iterator -> result
>1927	Identifier	result
>1928	Identifier	edge_iterator
>1929	IfStatement	if ( edge_iterator -> result . source < node_iterator -> node_id )
>1930	CompoundStatement	 
>1931	ContinueStatement	 
>1932	ExpressionStatement	 
>1933	UnaryExpression	++ edge_iterator
>1934	Identifier	edge_iterator
>1935	IncDec	++
>1936	ExpressionStatement	 
>1937	AssignmentExpr	edge_iterator -> result . source = SPECIAL_NODEID
>1938	Identifier	SPECIAL_NODEID
>1939	MemberAccess	edge_iterator -> result . source
>1940	Identifier	source
>1941	PtrMemberAccess	edge_iterator -> result
>1942	Identifier	result
>1943	Identifier	edge_iterator
>1944	Condition	 
>1945	RelationalExpression	edge_iterator -> result . source < node_iterator -> node_id
>1946	PtrMemberAccess	node_iterator -> node_id
>1947	Identifier	node_id
>1948	Identifier	node_iterator
>1949	MemberAccess	edge_iterator -> result . source
>1950	Identifier	source
>1951	PtrMemberAccess	edge_iterator -> result
>1952	Identifier	result
>1953	Identifier	edge_iterator
>1954	Condition	 
>1955	AndExpression	edge_iterator != all_edges_list . end ( ) && node_iterator != all_nodes_list . end ( )
>1956	EqualityExpression	node_iterator != all_nodes_list . end ( )
>1957	CallExpression	all_nodes_list . end ( )
>1958	ArgumentList	 
>1959	Callee	all_nodes_list . end
>1960	MemberAccess	all_nodes_list . end
>1961	Identifier	end
>1962	Identifier	all_nodes_list
>1963	Identifier	node_iterator
>1964	EqualityExpression	edge_iterator != all_edges_list . end ( )
>1965	CallExpression	all_edges_list . end ( )
>1966	ArgumentList	 
>1967	Callee	all_edges_list . end
>1968	MemberAccess	all_edges_list . end
>1969	Identifier	end
>1970	Identifier	all_edges_list
>1971	Identifier	edge_iterator
>1972	ExpressionStatement	 
>1973	AssignmentExpr	edge_iterator = all_edges_list . begin ( )
>1974	CallExpression	all_edges_list . begin ( )
>1975	ArgumentList	 
>1976	Callee	all_edges_list . begin
>1977	MemberAccess	all_edges_list . begin
>1978	Identifier	begin
>1979	Identifier	all_edges_list
>1980	Identifier	edge_iterator
>1981	Statement	 
>1982	ExpressionStatement	 
>1983	AssignmentExpr	node_iterator = all_nodes_list . begin ( )
>1984	CallExpression	all_nodes_list . begin ( )
>1985	ArgumentList	 
>1986	Callee	all_nodes_list . begin
>1987	MemberAccess	all_nodes_list . begin
>1988	Identifier	begin
>1989	Identifier	all_nodes_list
>1990	Identifier	node_iterator
>1991	Statement	 
>1992	ExpressionStatement	 
>1993	CallExpression	TIMER_START ( set_start_coords )
>1994	ArgumentList	set_start_coords
>1995	Argument	set_start_coords
>1996	Identifier	set_start_coords
>1997	Callee	TIMER_START
>1998	Identifier	TIMER_START
>1999	ExpressionStatement	 
>2000	ShiftExpression	std 
>2001	ShiftExpression	\"[extractor] Setting start coords      ... \" << std 
>2002	Identifier	std 
>2003	PrimaryExpression	\"[extractor] Setting start coords      ... \"
>2004	Identifier	std 
>2005	ExpressionStatement	 
>2006	ShiftExpression	std 
>2007	ShiftExpression	\"ok, after \" << TIMER_SEC ( sort_edges_by_start ) << \"s\" << std 
>2008	ShiftExpression	TIMER_SEC ( sort_edges_by_start ) << \"s\" << std 
>2009	ShiftExpression	\"s\" << std 
>2010	Identifier	std 
>2011	PrimaryExpression	\"s\"
>2012	CallExpression	TIMER_SEC ( sort_edges_by_start )
>2013	ArgumentList	sort_edges_by_start
>2014	Argument	sort_edges_by_start
>2015	Identifier	sort_edges_by_start
>2016	Callee	TIMER_SEC
>2017	Identifier	TIMER_SEC
>2018	PrimaryExpression	\"ok, after \"
>2019	Identifier	std 
>2020	ExpressionStatement	 
>2021	CallExpression	TIMER_STOP ( sort_edges_by_start )
>2022	ArgumentList	sort_edges_by_start
>2023	Argument	sort_edges_by_start
>2024	Identifier	sort_edges_by_start
>2025	Callee	TIMER_STOP
>2026	Identifier	TIMER_STOP
>2027	ExpressionStatement	 
>2028	CallExpression	stxxl 
>2029	ArgumentList	all_edges_list . begin ( )
>2030	Argument	stxxl_memory
>2031	Identifier	stxxl_memory
>2032	Argument	CmpEdgeByStartID ( )
>2033	CallExpression	CmpEdgeByStartID ( )
>2034	ArgumentList	 
>2035	Callee	CmpEdgeByStartID
>2036	Identifier	CmpEdgeByStartID
>2037	Argument	all_edges_list . end ( )
>2038	CallExpression	all_edges_list . end ( )
>2039	ArgumentList	 
>2040	Callee	all_edges_list . end
>2041	MemberAccess	all_edges_list . end
>2042	Identifier	end
>2043	Identifier	all_edges_list
>2044	Argument	all_edges_list . begin ( )
>2045	CallExpression	all_edges_list . begin ( )
>2046	ArgumentList	 
>2047	Callee	all_edges_list . begin
>2048	MemberAccess	all_edges_list . begin
>2049	Identifier	begin
>2050	Identifier	all_edges_list
>2051	Callee	stxxl 
>2052	Identifier	stxxl 
>2053	ExpressionStatement	 
>2054	CallExpression	TIMER_START ( sort_edges_by_start )
>2055	ArgumentList	sort_edges_by_start
>2056	Argument	sort_edges_by_start
>2057	Identifier	sort_edges_by_start
>2058	Callee	TIMER_START
>2059	Identifier	TIMER_START
>2060	ExpressionStatement	 
>2061	ShiftExpression	std 
>2062	ShiftExpression	\"[extractor] Sorting edges by start    ... \" << std 
>2063	Identifier	std 
>2064	PrimaryExpression	\"[extractor] Sorting edges by start    ... \"
>2065	Identifier	std 
>2163	FunctionDef	ExtractionContainers 
>2164	ParameterList	std 
>2165	Parameter	 
>2166	Identifier	file_out_stream
>2167	ParameterType	std 
>2168	ReturnType	void
>2169	CompoundStatement	 
>2170	ExpressionStatement	 
>2171	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Processed \" << number_of_used_edges << \" edges\"
>2172	ShiftExpression	\"Processed \" << number_of_used_edges << \" edges\"
>2173	ShiftExpression	number_of_used_edges << \" edges\"
>2174	PrimaryExpression	\" edges\"
>2175	Identifier	number_of_used_edges
>2176	PrimaryExpression	\"Processed \"
>2177	CallExpression	SimpleLogger ( ) . Write ( )
>2178	ArgumentList	 
>2179	Callee	SimpleLogger ( ) . Write
>2180	MemberAccess	SimpleLogger ( ) . Write
>2181	Identifier	Write
>2182	CallExpression	SimpleLogger ( )
>2183	ArgumentList	 
>2184	Callee	SimpleLogger
>2185	Identifier	SimpleLogger
>2186	ExpressionStatement	 
>2187	ShiftExpression	std 
>2188	ShiftExpression	\"ok\" << std 
>2189	Identifier	std 
>2190	PrimaryExpression	\"ok\"
>2191	Identifier	std 
>2192	ExpressionStatement	 
>2193	CallExpression	file_out_stream . write ( ( char * ) & number_of_used_edges , sizeof ( unsigned ) )
>2194	ArgumentList	( char * ) & number_of_used_edges
>2195	Argument	sizeof ( unsigned )
>2196	SizeofExpr	sizeof ( unsigned )
>2197	SizeofOperand	unsigned
>2198	Sizeof	sizeof
>2199	Argument	( char * ) & number_of_used_edges
>2200	CastExpression	( char * ) & number_of_used_edges
>2201	UnaryOp	& number_of_used_edges
>2202	Identifier	number_of_used_edges
>2203	UnaryOperator	&
>2204	CastTarget	char *
>2205	Callee	file_out_stream . write
>2206	MemberAccess	file_out_stream . write
>2207	Identifier	write
>2208	Identifier	file_out_stream
>2209	ExpressionStatement	 
>2210	CallExpression	file_out_stream . seekp ( start_position )
>2211	ArgumentList	start_position
>2212	Argument	start_position
>2213	Identifier	start_position
>2214	Callee	file_out_stream . seekp
>2215	MemberAccess	file_out_stream . seekp
>2216	Identifier	seekp
>2217	Identifier	file_out_stream
>2218	ExpressionStatement	 
>2219	ShiftExpression	std 
>2220	ShiftExpression	\"[extractor] setting number of edges   ... \" << std 
>2221	Identifier	std 
>2222	PrimaryExpression	\"[extractor] setting number of edges   ... \"
>2223	Identifier	std 
>2224	ExpressionStatement	 
>2225	ShiftExpression	std 
>2226	ShiftExpression	\"ok, after \" << TIMER_SEC ( write_edges ) << \"s\" << std 
>2227	ShiftExpression	TIMER_SEC ( write_edges ) << \"s\" << std 
>2228	ShiftExpression	\"s\" << std 
>2229	Identifier	std 
>2230	PrimaryExpression	\"s\"
>2231	CallExpression	TIMER_SEC ( write_edges )
>2232	ArgumentList	write_edges
>2233	Argument	write_edges
>2234	Identifier	write_edges
>2235	Callee	TIMER_SEC
>2236	Identifier	TIMER_SEC
>2237	PrimaryExpression	\"ok, after \"
>2238	Identifier	std 
>2239	ExpressionStatement	 
>2240	CallExpression	TIMER_STOP ( write_edges )
>2241	ArgumentList	write_edges
>2242	Argument	write_edges
>2243	Identifier	write_edges
>2244	Callee	TIMER_STOP
>2245	Identifier	TIMER_STOP
>2246	CompoundStatement	 
>2247	ExpressionStatement	 
>2248	IncDecOp	number_of_used_edges ++
>2249	IncDec	++
>2250	Identifier	number_of_used_edges
>2251	ExpressionStatement	 
>2252	CallExpression	file_out_stream . write ( ( char * ) & edge . result , sizeof ( NodeBasedEdge ) )
>2253	ArgumentList	( char * ) & edge . result
>2254	Argument	sizeof ( NodeBasedEdge )
>2255	SizeofExpr	sizeof ( NodeBasedEdge )
>2256	SizeofOperand	NodeBasedEdge
>2257	Sizeof	sizeof
>2258	Argument	( char * ) & edge . result
>2259	CastExpression	( char * ) & edge . result
>2260	UnaryOp	& edge . result
>2261	MemberAccess	edge . result
>2262	Identifier	result
>2263	Identifier	edge
>2264	UnaryOperator	&
>2265	CastTarget	char *
>2266	Callee	file_out_stream . write
>2267	MemberAccess	file_out_stream . write
>2268	Identifier	write
>2269	Identifier	file_out_stream
>2270	IfStatement	if ( edge . result . source == SPECIAL_NODEID || edge . result . target == SPECIAL_NODEID )
>2271	CompoundStatement	 
>2272	ContinueStatement	 
>2273	Condition	 
>2274	OrExpression	edge . result . source == SPECIAL_NODEID || edge . result . target == SPECIAL_NODEID
>2275	EqualityExpression	edge . result . target == SPECIAL_NODEID
>2276	Identifier	SPECIAL_NODEID
>2277	MemberAccess	edge . result . target
>2278	Identifier	target
>2279	MemberAccess	edge . result
>2280	Identifier	result
>2281	Identifier	edge
>2282	EqualityExpression	edge . result . source == SPECIAL_NODEID
>2283	Identifier	SPECIAL_NODEID
>2284	MemberAccess	edge . result . source
>2285	Identifier	source
>2286	MemberAccess	edge . result
>2287	Identifier	result
>2288	Identifier	edge
>2289	Statement	 
>2290	Statement	 
>2291	Label	 
>2292	Identifier	edge
>2293	Statement	 
>2294	Statement	 
>2295	Statement	 
>2296	Statement	 
>2297	Statement	 
>2298	ExpressionStatement	 
>2299	CallExpression	file_out_stream . write ( ( char * ) & number_of_used_edges , sizeof ( unsigned ) )
>2300	ArgumentList	( char * ) & number_of_used_edges
>2301	Argument	sizeof ( unsigned )
>2302	SizeofExpr	sizeof ( unsigned )
>2303	SizeofOperand	unsigned
>2304	Sizeof	sizeof
>2305	Argument	( char * ) & number_of_used_edges
>2306	CastExpression	( char * ) & number_of_used_edges
>2307	UnaryOp	& number_of_used_edges
>2308	Identifier	number_of_used_edges
>2309	UnaryOperator	&
>2310	CastTarget	char *
>2311	Callee	file_out_stream . write
>2312	MemberAccess	file_out_stream . write
>2313	Identifier	write
>2314	Identifier	file_out_stream
>2315	ExpressionStatement	 
>2316	AssignmentExpr	start_position = file_out_stream . tellp ( )
>2317	CallExpression	file_out_stream . tellp ( )
>2318	ArgumentList	 
>2319	Callee	file_out_stream . tellp
>2320	MemberAccess	file_out_stream . tellp
>2321	Identifier	tellp
>2322	Identifier	file_out_stream
>2323	Identifier	start_position
>2324	Statement	 
>2325	IdentifierDeclStatement	 
>2326	IdentifierDecl	number_of_used_edges = 0
>2327	AssignmentExpr	number_of_used_edges = 0
>2328	PrimaryExpression	0
>2329	Identifier	number_of_used_edges
>2330	Identifier	number_of_used_edges
>2331	IdentifierDeclType	unsigned
>2332	ExpressionStatement	 
>2333	CallExpression	TIMER_START ( write_edges )
>2334	ArgumentList	write_edges
>2335	Argument	write_edges
>2336	Identifier	write_edges
>2337	Callee	TIMER_START
>2338	Identifier	TIMER_START
>2339	ExpressionStatement	 
>2340	ShiftExpression	std 
>2341	ShiftExpression	\"[extractor] Writing used egdes       ... \" << std 
>2342	Identifier	std 
>2343	PrimaryExpression	\"[extractor] Writing used egdes       ... \"
>2344	Identifier	std 
>2363	FunctionDef	ExtractionContainers 
>2364	ParameterList	std 
>2365	Parameter	 
>2366	Identifier	file_out_stream
>2367	ParameterType	std 
>2368	ReturnType	void
>2369	CompoundStatement	 
>2370	ExpressionStatement	 
>2371	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Processed \" << number_of_used_nodes << \" nodes\"
>2372	ShiftExpression	\"Processed \" << number_of_used_nodes << \" nodes\"
>2373	ShiftExpression	number_of_used_nodes << \" nodes\"
>2374	PrimaryExpression	\" nodes\"
>2375	Identifier	number_of_used_nodes
>2376	PrimaryExpression	\"Processed \"
>2377	CallExpression	SimpleLogger ( ) . Write ( )
>2378	ArgumentList	 
>2379	Callee	SimpleLogger ( ) . Write
>2380	MemberAccess	SimpleLogger ( ) . Write
>2381	Identifier	Write
>2382	CallExpression	SimpleLogger ( )
>2383	ArgumentList	 
>2384	Callee	SimpleLogger
>2385	Identifier	SimpleLogger
>2386	ExpressionStatement	 
>2387	ShiftExpression	std 
>2388	ShiftExpression	\"ok\" << std 
>2389	Identifier	std 
>2390	PrimaryExpression	\"ok\"
>2391	Identifier	std 
>2392	ExpressionStatement	 
>2393	CallExpression	file_out_stream . seekp ( previous_file_position )
>2394	ArgumentList	previous_file_position
>2395	Argument	previous_file_position
>2396	Identifier	previous_file_position
>2397	Callee	file_out_stream . seekp
>2398	MemberAccess	file_out_stream . seekp
>2399	Identifier	seekp
>2400	Identifier	file_out_stream
>2401	ExpressionStatement	 
>2402	CallExpression	file_out_stream . write ( ( char * ) & number_of_used_nodes , sizeof ( unsigned ) )
>2403	ArgumentList	( char * ) & number_of_used_nodes
>2404	Argument	sizeof ( unsigned )
>2405	SizeofExpr	sizeof ( unsigned )
>2406	SizeofOperand	unsigned
>2407	Sizeof	sizeof
>2408	Argument	( char * ) & number_of_used_nodes
>2409	CastExpression	( char * ) & number_of_used_nodes
>2410	UnaryOp	& number_of_used_nodes
>2411	Identifier	number_of_used_nodes
>2412	UnaryOperator	&
>2413	CastTarget	char *
>2414	Callee	file_out_stream . write
>2415	MemberAccess	file_out_stream . write
>2416	Identifier	write
>2417	Identifier	file_out_stream
>2418	ExpressionStatement	 
>2419	CallExpression	file_out_stream . seekp ( std 
>2420	ArgumentList	std 
>2421	Argument	std 
>2422	AdditiveExpression	std 
>2423	SizeofExpr	sizeof ( FingerPrint )
>2424	SizeofOperand	FingerPrint
>2425	Sizeof	sizeof
>2426	Identifier	std 
>2427	Callee	file_out_stream . seekp
>2428	MemberAccess	file_out_stream . seekp
>2429	Identifier	seekp
>2430	Identifier	file_out_stream
>2431	IdentifierDeclStatement	 
>2432	IdentifierDecl	previous_file_position = file_out_stream . tellp ( )
>2433	AssignmentExpr	previous_file_position = file_out_stream . tellp ( )
>2434	CallExpression	file_out_stream . tellp ( )
>2435	ArgumentList	 
>2436	Callee	file_out_stream . tellp
>2437	MemberAccess	file_out_stream . tellp
>2438	Identifier	tellp
>2439	Identifier	file_out_stream
>2440	Identifier	previous_file_position
>2441	Identifier	previous_file_position
>2442	IdentifierDeclType	std 
>2443	ExpressionStatement	 
>2444	ShiftExpression	std 
>2445	ShiftExpression	\"[extractor] setting number of nodes   ... \" << std 
>2446	Identifier	std 
>2447	PrimaryExpression	\"[extractor] setting number of nodes   ... \"
>2448	Identifier	std 
>2449	ExpressionStatement	 
>2450	ShiftExpression	std 
>2451	ShiftExpression	\"ok, after \" << TIMER_SEC ( write_nodes ) << \"s\" << std 
>2452	ShiftExpression	TIMER_SEC ( write_nodes ) << \"s\" << std 
>2453	ShiftExpression	\"s\" << std 
>2454	Identifier	std 
>2455	PrimaryExpression	\"s\"
>2456	CallExpression	TIMER_SEC ( write_nodes )
>2457	ArgumentList	write_nodes
>2458	Argument	write_nodes
>2459	Identifier	write_nodes
>2460	Callee	TIMER_SEC
>2461	Identifier	TIMER_SEC
>2462	PrimaryExpression	\"ok, after \"
>2463	Identifier	std 
>2464	ExpressionStatement	 
>2465	CallExpression	TIMER_STOP ( write_nodes )
>2466	ArgumentList	write_nodes
>2467	Argument	write_nodes
>2468	Identifier	write_nodes
>2469	Callee	TIMER_STOP
>2470	Identifier	TIMER_STOP
>2471	WhileStatement	while ( node_id_iterator != used_node_id_list . end ( ) && node_iterator != all_nodes_list . end ( ) )
>2472	CompoundStatement	 
>2473	ExpressionStatement	 
>2474	UnaryExpression	++ node_iterator
>2475	Identifier	node_iterator
>2476	IncDec	++
>2477	ExpressionStatement	 
>2478	UnaryExpression	++ node_id_iterator
>2479	Identifier	node_id_iterator
>2480	IncDec	++
>2481	ExpressionStatement	 
>2482	UnaryExpression	++ number_of_used_nodes
>2483	Identifier	number_of_used_nodes
>2484	IncDec	++
>2485	ExpressionStatement	 
>2486	CallExpression	file_out_stream . write ( ( char * ) & ( * node_iterator ) , sizeof ( ExternalMemoryNode ) )
>2487	ArgumentList	( char * ) & ( * node_iterator )
>2488	Argument	sizeof ( ExternalMemoryNode )
>2489	SizeofExpr	sizeof ( ExternalMemoryNode )
>2490	SizeofOperand	ExternalMemoryNode
>2491	Sizeof	sizeof
>2492	Argument	( char * ) & ( * node_iterator )
>2493	CastExpression	( char * ) & ( * node_iterator )
>2494	UnaryOp	& ( * node_iterator )
>2495	UnaryOp	* node_iterator
>2496	Identifier	node_iterator
>2497	UnaryOperator	*
>2498	UnaryOperator	&
>2499	CastTarget	char *
>2500	Callee	file_out_stream . write
>2501	MemberAccess	file_out_stream . write
>2502	Identifier	write
>2503	Identifier	file_out_stream
>2504	ExpressionStatement	 
>2505	CallExpression	BOOST_ASSERT ( * node_id_iterator == node_iterator -> node_id )
>2506	ArgumentList	* node_id_iterator == node_iterator -> node_id
>2507	Argument	* node_id_iterator == node_iterator -> node_id
>2508	EqualityExpression	* node_id_iterator == node_iterator -> node_id
>2509	PtrMemberAccess	node_iterator -> node_id
>2510	Identifier	node_id
>2511	Identifier	node_iterator
>2512	UnaryOp	* node_id_iterator
>2513	Identifier	node_id_iterator
>2514	UnaryOperator	*
>2515	Callee	BOOST_ASSERT
>2516	Identifier	BOOST_ASSERT
>2517	IfStatement	if ( * node_id_iterator > node_iterator -> node_id )
>2518	CompoundStatement	 
>2519	ContinueStatement	 
>2520	ExpressionStatement	 
>2521	UnaryExpression	++ node_iterator
>2522	Identifier	node_iterator
>2523	IncDec	++
>2524	Condition	 
>2525	RelationalExpression	* node_id_iterator > node_iterator -> node_id
>2526	PtrMemberAccess	node_iterator -> node_id
>2527	Identifier	node_id
>2528	Identifier	node_iterator
>2529	UnaryOp	* node_id_iterator
>2530	Identifier	node_id_iterator
>2531	UnaryOperator	*
>2532	IfStatement	if ( * node_id_iterator < node_iterator -> node_id )
>2533	CompoundStatement	 
>2534	ContinueStatement	 
>2535	ExpressionStatement	 
>2536	UnaryExpression	++ node_id_iterator
>2537	Identifier	node_id_iterator
>2538	IncDec	++
>2539	Condition	 
>2540	RelationalExpression	* node_id_iterator < node_iterator -> node_id
>2541	PtrMemberAccess	node_iterator -> node_id
>2542	Identifier	node_id
>2543	Identifier	node_iterator
>2544	UnaryOp	* node_id_iterator
>2545	Identifier	node_id_iterator
>2546	UnaryOperator	*
>2547	Condition	 
>2548	AndExpression	node_id_iterator != used_node_id_list . end ( ) && node_iterator != all_nodes_list . end ( )
>2549	EqualityExpression	node_iterator != all_nodes_list . end ( )
>2550	CallExpression	all_nodes_list . end ( )
>2551	ArgumentList	 
>2552	Callee	all_nodes_list . end
>2553	MemberAccess	all_nodes_list . end
>2554	Identifier	end
>2555	Identifier	all_nodes_list
>2556	Identifier	node_iterator
>2557	EqualityExpression	node_id_iterator != used_node_id_list . end ( )
>2558	CallExpression	used_node_id_list . end ( )
>2559	ArgumentList	 
>2560	Callee	used_node_id_list . end
>2561	MemberAccess	used_node_id_list . end
>2562	Identifier	end
>2563	Identifier	used_node_id_list
>2564	Identifier	node_id_iterator
>2565	ExpressionStatement	 
>2566	AssignmentExpr	node_id_iterator = used_node_id_list . begin ( )
>2567	CallExpression	used_node_id_list . begin ( )
>2568	ArgumentList	 
>2569	Callee	used_node_id_list . begin
>2570	MemberAccess	used_node_id_list . begin
>2571	Identifier	begin
>2572	Identifier	used_node_id_list
>2573	Identifier	node_id_iterator
>2574	Statement	 
>2575	ExpressionStatement	 
>2576	AssignmentExpr	node_iterator = all_nodes_list . begin ( )
>2577	CallExpression	all_nodes_list . begin ( )
>2578	ArgumentList	 
>2579	Callee	all_nodes_list . begin
>2580	MemberAccess	all_nodes_list . begin
>2581	Identifier	begin
>2582	Identifier	all_nodes_list
>2583	Identifier	node_iterator
>2584	Statement	 
>2585	ExpressionStatement	 
>2586	CallExpression	TIMER_START ( write_nodes )
>2587	ArgumentList	write_nodes
>2588	Argument	write_nodes
>2589	Identifier	write_nodes
>2590	Callee	TIMER_START
>2591	Identifier	TIMER_START
>2592	ExpressionStatement	 
>2593	ShiftExpression	std 
>2594	ShiftExpression	\"[extractor] Confirming/Writing used nodes     ... \" << std 
>2595	Identifier	std 
>2596	PrimaryExpression	\"[extractor] Confirming/Writing used nodes     ... \"
>2597	Identifier	std 
>2598	ExpressionStatement	 
>2599	CallExpression	file_out_stream . write ( ( char * ) & number_of_used_nodes , sizeof ( unsigned ) )
>2600	ArgumentList	( char * ) & number_of_used_nodes
>2601	Argument	sizeof ( unsigned )
>2602	SizeofExpr	sizeof ( unsigned )
>2603	SizeofOperand	unsigned
>2604	Sizeof	sizeof
>2605	Argument	( char * ) & number_of_used_nodes
>2606	CastExpression	( char * ) & number_of_used_nodes
>2607	UnaryOp	& number_of_used_nodes
>2608	Identifier	number_of_used_nodes
>2609	UnaryOperator	&
>2610	CastTarget	char *
>2611	Callee	file_out_stream . write
>2612	MemberAccess	file_out_stream . write
>2613	Identifier	write
>2614	Identifier	file_out_stream
>2615	IdentifierDeclStatement	 
>2616	IdentifierDecl	number_of_used_nodes = 0
>2617	AssignmentExpr	number_of_used_nodes = 0
>2618	PrimaryExpression	0
>2619	Identifier	number_of_used_nodes
>2620	Identifier	number_of_used_nodes
>2621	IdentifierDeclType	unsigned
>2645	FunctionDef	ExtractionContainers 
>2646	ParameterList	const std 
>2647	Parameter	 
>2648	Identifier	path
>2649	ParameterType	const std 
>2650	ReturnType	void
>2651	CompoundStatement	 
>2652	ExpressionStatement	 
>2653	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"usable restrictions
>2654	ShiftExpression	\"usable restrictions
>2655	Identifier	written_restriction_count
>2656	PrimaryExpression	\"usable restrictions
>2657	CallExpression	SimpleLogger ( ) . Write ( )
>2658	ArgumentList	 
>2659	Callee	SimpleLogger ( ) . Write
>2660	MemberAccess	SimpleLogger ( ) . Write
>2661	Identifier	Write
>2662	CallExpression	SimpleLogger ( )
>2663	ArgumentList	 
>2664	Callee	SimpleLogger
>2665	Identifier	SimpleLogger
>2666	ExpressionStatement	 
>2667	CallExpression	restrictions_out_stream . close ( )
>2668	ArgumentList	 
>2669	Callee	restrictions_out_stream . close
>2670	MemberAccess	restrictions_out_stream . close
>2671	Identifier	close
>2672	Identifier	restrictions_out_stream
>2673	ExpressionStatement	 
>2674	CallExpression	restrictions_out_stream . write ( ( char * ) & written_restriction_count , sizeof ( unsigned ) )
>2675	ArgumentList	( char * ) & written_restriction_count
>2676	Argument	sizeof ( unsigned )
>2677	SizeofExpr	sizeof ( unsigned )
>2678	SizeofOperand	unsigned
>2679	Sizeof	sizeof
>2680	Argument	( char * ) & written_restriction_count
>2681	CastExpression	( char * ) & written_restriction_count
>2682	UnaryOp	& written_restriction_count
>2683	Identifier	written_restriction_count
>2684	UnaryOperator	&
>2685	CastTarget	char *
>2686	Callee	restrictions_out_stream . write
>2687	MemberAccess	restrictions_out_stream . write
>2688	Identifier	write
>2689	Identifier	restrictions_out_stream
>2690	ExpressionStatement	 
>2691	CallExpression	restrictions_out_stream . seekp ( count_position )
>2692	ArgumentList	count_position
>2693	Argument	count_position
>2694	Identifier	count_position
>2695	Callee	restrictions_out_stream . seekp
>2696	MemberAccess	restrictions_out_stream . seekp
>2697	Identifier	seekp
>2698	Identifier	restrictions_out_stream
>2699	CompoundStatement	 
>2700	IfStatement	if ( SPECIAL_NODEID != restriction_container . restriction . from . node && SPECIAL_NODEID != restriction_container \
>2701	CompoundStatement	 
>2702	ExpressionStatement	 
>2703	UnaryExpression	++ written_restriction_count
>2704	Identifier	written_restriction_count
>2705	IncDec	++
>2706	ExpressionStatement	 
>2707	CallExpression	restrictions_out_stream . write ( ( char * ) & ( restriction_container . restriction ) , sizeof ( TurnRestriction ) )
>2708	ArgumentList	( char * ) & ( restriction_container . restriction )
>2709	Argument	sizeof ( TurnRestriction )
>2710	SizeofExpr	sizeof ( TurnRestriction )
>2711	SizeofOperand	TurnRestriction
>2712	Sizeof	sizeof
>2713	Argument	( char * ) & ( restriction_container . restriction )
>2714	CastExpression	( char * ) & ( restriction_container . restriction )
>2715	UnaryOp	& ( restriction_container . restriction )
>2716	MemberAccess	restriction_container . restriction
>2717	Identifier	restriction
>2718	Identifier	restriction_container
>2719	UnaryOperator	&
>2720	CastTarget	char *
>2721	Callee	restrictions_out_stream . write
>2722	MemberAccess	restrictions_out_stream . write
>2723	Identifier	write
>2724	Identifier	restrictions_out_stream
>2725	Condition	 
>2726	AndExpression	SPECIAL_NODEID != restriction_container . restriction . from . node && SPECIAL_NODEID != restriction_\
>2727	AndExpression	SPECIAL_NODEID != restriction_container . restriction . via . node && SPECIAL_NODEID != restriction_\
>2728	EqualityExpression	SPECIAL_NODEID != restriction_container . restriction . to . node
>2729	MemberAccess	restriction_container . restriction . to . node
>2730	Identifier	node
>2731	MemberAccess	restriction_container . restriction . to
>2732	Identifier	to
>2733	MemberAccess	restriction_container . restriction
>2734	Identifier	restriction
>2735	Identifier	restriction_container
>2736	Identifier	SPECIAL_NODEID
>2737	EqualityExpression	SPECIAL_NODEID != restriction_container . restriction . via . node
>2738	MemberAccess	restriction_container . restriction . via . node
>2739	Identifier	node
>2740	MemberAccess	restriction_container . restriction . via
>2741	Identifier	via
>2742	MemberAccess	restriction_container . restriction
>2743	Identifier	restriction
>2744	Identifier	restriction_container
>2745	Identifier	SPECIAL_NODEID
>2746	EqualityExpression	SPECIAL_NODEID != restriction_container . restriction . from . node
>2747	MemberAccess	restriction_container . restriction . from . node
>2748	Identifier	node
>2749	MemberAccess	restriction_container . restriction . from
>2750	Identifier	from
>2751	MemberAccess	restriction_container . restriction
>2752	Identifier	restriction
>2753	Identifier	restriction_container
>2754	Identifier	SPECIAL_NODEID
>2755	Statement	 
>2756	Statement	 
>2757	Label	 
>2758	Identifier	restriction_container
>2759	Statement	 
>2760	Statement	 
>2761	Statement	 
>2762	Statement	 
>2763	Statement	 
>2764	ExpressionStatement	 
>2765	CallExpression	restrictions_out_stream . write ( ( char * ) & written_restriction_count , sizeof ( unsigned ) )
>2766	ArgumentList	( char * ) & written_restriction_count
>2767	Argument	sizeof ( unsigned )
>2768	SizeofExpr	sizeof ( unsigned )
>2769	SizeofOperand	unsigned
>2770	Sizeof	sizeof
>2771	Argument	( char * ) & written_restriction_count
>2772	CastExpression	( char * ) & written_restriction_count
>2773	UnaryOp	& written_restriction_count
>2774	Identifier	written_restriction_count
>2775	UnaryOperator	&
>2776	CastTarget	char *
>2777	Callee	restrictions_out_stream . write
>2778	MemberAccess	restrictions_out_stream . write
>2779	Identifier	write
>2780	Identifier	restrictions_out_stream
>2781	ExpressionStatement	 
>2782	AssignmentExpr	count_position = restrictions_out_stream . tellp ( )
>2783	CallExpression	restrictions_out_stream . tellp ( )
>2784	ArgumentList	 
>2785	Callee	restrictions_out_stream . tellp
>2786	MemberAccess	restrictions_out_stream . tellp
>2787	Identifier	tellp
>2788	Identifier	restrictions_out_stream
>2789	Identifier	count_position
>2790	Statement	 
>2791	Statement	 
>2792	ExpressionStatement	 
>2793	CallExpression	restrictions_out_stream . write ( ( char * ) & fingerprint , sizeof ( FingerPrint ) )
>2794	ArgumentList	( char * ) & fingerprint
>2795	Argument	sizeof ( FingerPrint )
>2796	SizeofExpr	sizeof ( FingerPrint )
>2797	SizeofOperand	FingerPrint
>2798	Sizeof	sizeof
>2799	Argument	( char * ) & fingerprint
>2800	CastExpression	( char * ) & fingerprint
>2801	UnaryOp	& fingerprint
>2802	Identifier	fingerprint
>2803	UnaryOperator	&
>2804	CastTarget	char *
>2805	Callee	restrictions_out_stream . write
>2806	MemberAccess	restrictions_out_stream . write
>2807	Identifier	write
>2808	Identifier	restrictions_out_stream
>2809	IdentifierDeclStatement	 
>2810	IdentifierDecl	fingerprint = FingerPrint 
>2811	AssignmentExpr	fingerprint = FingerPrint 
>2812	CallExpression	FingerPrint 
>2813	ArgumentList	 
>2814	Callee	FingerPrint 
>2815	Identifier	FingerPrint 
>2816	Identifier	fingerprint
>2817	Identifier	fingerprint
>2818	IdentifierDeclType	const FingerPrint
>2819	ExpressionStatement	 
>2820	CallExpression	restrictions_out_stream . open ( path . c_str ( ) , std 
>2821	ArgumentList	path . c_str ( )
>2822	Argument	std 
>2823	Identifier	std 
>2824	Argument	path . c_str ( )
>2825	CallExpression	path . c_str ( )
>2826	ArgumentList	 
>2827	Callee	path . c_str
>2828	MemberAccess	path . c_str
>2829	Identifier	c_str
>2830	Identifier	path
>2831	Callee	restrictions_out_stream . open
>2832	MemberAccess	restrictions_out_stream . open
>2833	Identifier	open
>2834	Identifier	restrictions_out_stream
>2835	IdentifierDeclStatement	 
>2836	IdentifierDecl	written_restriction_count = 0
>2837	AssignmentExpr	written_restriction_count = 0
>2838	PrimaryExpression	0
>2839	Identifier	written_restriction_count
>2840	Identifier	written_restriction_count
>2841	IdentifierDeclType	unsigned
>2842	IdentifierDeclStatement	 
>2843	IdentifierDecl	restrictions_out_stream
>2844	Identifier	restrictions_out_stream
>2845	IdentifierDeclType	std 
>2872	FunctionDef	ExtractionContainers 
>2873	ParameterList	 
>2874	ReturnType	void
>2875	CompoundStatement	 
>2876	ExpressionStatement	 
>2877	ShiftExpression	std 
>2878	ShiftExpression	\"ok, after \" << TIMER_SEC ( fix_restriction_ends ) << \"s\" << std 
>2879	ShiftExpression	TIMER_SEC ( fix_restriction_ends ) << \"s\" << std 
>2880	ShiftExpression	\"s\" << std 
>2881	Identifier	std 
>2882	PrimaryExpression	\"s\"
>2883	CallExpression	TIMER_SEC ( fix_restriction_ends )
>2884	ArgumentList	fix_restriction_ends
>2885	Argument	fix_restriction_ends
>2886	Identifier	fix_restriction_ends
>2887	Callee	TIMER_SEC
>2888	Identifier	TIMER_SEC
>2889	PrimaryExpression	\"ok, after \"
>2890	Identifier	std 
>2891	ExpressionStatement	 
>2892	CallExpression	TIMER_STOP ( fix_restriction_ends )
>2893	ArgumentList	fix_restriction_ends
>2894	Argument	fix_restriction_ends
>2895	Identifier	fix_restriction_ends
>2896	Callee	TIMER_STOP
>2897	Identifier	TIMER_STOP
>2898	WhileStatement	while ( way_start_and_end_iterator != way_start_end_id_list . cend ( ) && restrictions_iterator != restrictions_\
>2899	CompoundStatement	 
>2900	ExpressionStatement	 
>2901	UnaryExpression	++ restrictions_iterator
>2902	Identifier	restrictions_iterator
>2903	IncDec	++
>2904	IfStatement	if ( way_start_and_end_iterator -> first_segment_source_id == via_node_id )
>2905	ElseStatement	else
>2906	IfStatement	if ( way_start_and_end_iterator -> last_segment_target_id == via_node_id )
>2907	CompoundStatement	 
>2908	ExpressionStatement	 
>2909	AssignmentExpr	restrictions_iterator -> restriction . to . node = to_id_iter -> second
>2910	PtrMemberAccess	to_id_iter -> second
>2911	Identifier	second
>2912	Identifier	to_id_iter
>2913	MemberAccess	restrictions_iterator -> restriction . to . node
>2914	Identifier	node
>2915	MemberAccess	restrictions_iterator -> restriction . to
>2916	Identifier	to
>2917	PtrMemberAccess	restrictions_iterator -> restriction
>2918	Identifier	restriction
>2919	Identifier	restrictions_iterator
>2920	ExpressionStatement	 
>2921	CallExpression	BOOST_ASSERT ( to_id_iter != external_to_internal_node_id_map . end ( ) )
>2922	ArgumentList	to_id_iter != external_to_internal_node_id_map . end ( )
>2923	Argument	to_id_iter != external_to_internal_node_id_map . end ( )
>2924	EqualityExpression	to_id_iter != external_to_internal_node_id_map . end ( )
>2925	CallExpression	external_to_internal_node_id_map . end ( )
>2926	ArgumentList	 
>2927	Callee	external_to_internal_node_id_map . end
>2928	MemberAccess	external_to_internal_node_id_map . end
>2929	Identifier	end
>2930	Identifier	external_to_internal_node_id_map
>2931	Identifier	to_id_iter
>2932	Callee	BOOST_ASSERT
>2933	Identifier	BOOST_ASSERT
>2934	ExpressionStatement	 
>2935	AssignmentExpr	to_id_iter = external_to_internal_node_id_map . find ( way_start_and_end_iterator -> last_segment_source_\
>2936	CallExpression	external_to_internal_node_id_map . find ( way_start_and_end_iterator -> last_segment_source_id )
>2937	ArgumentList	way_start_and_end_iterator -> last_segment_source_id
>2938	Argument	way_start_and_end_iterator -> last_segment_source_id
>2939	PtrMemberAccess	way_start_and_end_iterator -> last_segment_source_id
>2940	Identifier	last_segment_source_id
>2941	Identifier	way_start_and_end_iterator
>2942	Callee	external_to_internal_node_id_map . find
>2943	MemberAccess	external_to_internal_node_id_map . find
>2944	Identifier	find
>2945	Identifier	external_to_internal_node_id_map
>2946	Identifier	to_id_iter
>2947	Statement	 
>2948	Condition	 
>2949	EqualityExpression	way_start_and_end_iterator -> last_segment_target_id == via_node_id
>2950	Identifier	via_node_id
>2951	PtrMemberAccess	way_start_and_end_iterator -> last_segment_target_id
>2952	Identifier	last_segment_target_id
>2953	Identifier	way_start_and_end_iterator
>2954	CompoundStatement	 
>2955	ExpressionStatement	 
>2956	AssignmentExpr	restrictions_iterator -> restriction . to . node = to_id_iter -> second
>2957	PtrMemberAccess	to_id_iter -> second
>2958	Identifier	second
>2959	Identifier	to_id_iter
>2960	MemberAccess	restrictions_iterator -> restriction . to . node
>2961	Identifier	node
>2962	MemberAccess	restrictions_iterator -> restriction . to
>2963	Identifier	to
>2964	PtrMemberAccess	restrictions_iterator -> restriction
>2965	Identifier	restriction
>2966	Identifier	restrictions_iterator
>2967	ExpressionStatement	 
>2968	CallExpression	BOOST_ASSERT ( to_id_iter != external_to_internal_node_id_map . end ( ) )
>2969	ArgumentList	to_id_iter != external_to_internal_node_id_map . end ( )
>2970	Argument	to_id_iter != external_to_internal_node_id_map . end ( )
>2971	EqualityExpression	to_id_iter != external_to_internal_node_id_map . end ( )
>2972	CallExpression	external_to_internal_node_id_map . end ( )
>2973	ArgumentList	 
>2974	Callee	external_to_internal_node_id_map . end
>2975	MemberAccess	external_to_internal_node_id_map . end
>2976	Identifier	end
>2977	Identifier	external_to_internal_node_id_map
>2978	Identifier	to_id_iter
>2979	Callee	BOOST_ASSERT
>2980	Identifier	BOOST_ASSERT
>2981	ExpressionStatement	 
>2982	AssignmentExpr	to_id_iter = external_to_internal_node_id_map . find ( way_start_and_end_iterator -> first_segment_target_\
>2983	CallExpression	external_to_internal_node_id_map . find ( way_start_and_end_iterator -> first_segment_target_id )
>2984	ArgumentList	way_start_and_end_iterator -> first_segment_target_id
>2985	Argument	way_start_and_end_iterator -> first_segment_target_id
>2986	PtrMemberAccess	way_start_and_end_iterator -> first_segment_target_id
>2987	Identifier	first_segment_target_id
>2988	Identifier	way_start_and_end_iterator
>2989	Callee	external_to_internal_node_id_map . find
>2990	MemberAccess	external_to_internal_node_id_map . find
>2991	Identifier	find
>2992	Identifier	external_to_internal_node_id_map
>2993	Identifier	to_id_iter
>2994	Statement	 
>2995	Condition	 
>2996	EqualityExpression	way_start_and_end_iterator -> first_segment_source_id == via_node_id
>2997	Identifier	via_node_id
>2998	PtrMemberAccess	way_start_and_end_iterator -> first_segment_source_id
>2999	Identifier	first_segment_source_id
>3000	Identifier	way_start_and_end_iterator
>3001	ExpressionStatement	 
>3002	AssignmentExpr	restrictions_iterator -> restriction . via . node = via_id_iter -> second
>3003	PtrMemberAccess	via_id_iter -> second
>3004	Identifier	second
>3005	Identifier	via_id_iter
>3006	MemberAccess	restrictions_iterator -> restriction . via . node
>3007	Identifier	node
>3008	MemberAccess	restrictions_iterator -> restriction . via
>3009	Identifier	via
>3010	PtrMemberAccess	restrictions_iterator -> restriction
>3011	Identifier	restriction
>3012	Identifier	restrictions_iterator
>3013	ExpressionStatement	 
>3014	CallExpression	BOOST_ASSERT ( via_id_iter != external_to_internal_node_id_map . end ( ) )
>3015	ArgumentList	via_id_iter != external_to_internal_node_id_map . end ( )
>3016	Argument	via_id_iter != external_to_internal_node_id_map . end ( )
>3017	EqualityExpression	via_id_iter != external_to_internal_node_id_map . end ( )
>3018	CallExpression	external_to_internal_node_id_map . end ( )
>3019	ArgumentList	 
>3020	Callee	external_to_internal_node_id_map . end
>3021	MemberAccess	external_to_internal_node_id_map . end
>3022	Identifier	end
>3023	Identifier	external_to_internal_node_id_map
>3024	Identifier	via_id_iter
>3025	Callee	BOOST_ASSERT
>3026	Identifier	BOOST_ASSERT
>3027	ExpressionStatement	 
>3028	AssignmentExpr	via_id_iter = external_to_internal_node_id_map . find ( via_node_id )
>3029	CallExpression	external_to_internal_node_id_map . find ( via_node_id )
>3030	ArgumentList	via_node_id
>3031	Argument	via_node_id
>3032	Identifier	via_node_id
>3033	Callee	external_to_internal_node_id_map . find
>3034	MemberAccess	external_to_internal_node_id_map . find
>3035	Identifier	find
>3036	Identifier	external_to_internal_node_id_map
>3037	Identifier	via_id_iter
>3038	Statement	 
>3039	IdentifierDeclStatement	 
>3040	IdentifierDecl	via_node_id = restrictions_iterator -> restriction . via . node
>3041	AssignmentExpr	via_node_id = restrictions_iterator -> restriction . via . node
>3042	MemberAccess	restrictions_iterator -> restriction . via . node
>3043	Identifier	node
>3044	MemberAccess	restrictions_iterator -> restriction . via
>3045	Identifier	via
>3046	PtrMemberAccess	restrictions_iterator -> restriction
>3047	Identifier	restriction
>3048	Identifier	restrictions_iterator
>3049	Identifier	via_node_id
>3050	Identifier	via_node_id
>3051	IdentifierDeclType	const NodeID
>3052	ExpressionStatement	 
>3053	CallExpression	BOOST_ASSERT ( way_start_and_end_iterator -> way_id == restrictions_iterator -> restriction . to . way )
>3054	ArgumentList	way_start_and_end_iterator -> way_id == restrictions_iterator -> restriction . to . way
>3055	Argument	way_start_and_end_iterator -> way_id == restrictions_iterator -> restriction . to . way
>3056	EqualityExpression	way_start_and_end_iterator -> way_id == restrictions_iterator -> restriction . to . way
>3057	MemberAccess	restrictions_iterator -> restriction . to . way
>3058	Identifier	way
>3059	MemberAccess	restrictions_iterator -> restriction . to
>3060	Identifier	to
>3061	PtrMemberAccess	restrictions_iterator -> restriction
>3062	Identifier	restriction
>3063	Identifier	restrictions_iterator
>3064	PtrMemberAccess	way_start_and_end_iterator -> way_id
>3065	Identifier	way_id
>3066	Identifier	way_start_and_end_iterator
>3067	Callee	BOOST_ASSERT
>3068	Identifier	BOOST_ASSERT
>3069	IfStatement	if ( way_start_and_end_iterator -> way_id > restrictions_iterator -> restriction . to . way )
>3070	CompoundStatement	 
>3071	ContinueStatement	 
>3072	ExpressionStatement	 
>3073	UnaryExpression	++ restrictions_iterator
>3074	Identifier	restrictions_iterator
>3075	IncDec	++
>3076	ExpressionStatement	 
>3077	AssignmentExpr	restrictions_iterator -> restriction . to . way = SPECIAL_NODEID
>3078	Identifier	SPECIAL_NODEID
>3079	MemberAccess	restrictions_iterator -> restriction . to . way
>3080	Identifier	way
>3081	MemberAccess	restrictions_iterator -> restriction . to
>3082	Identifier	to
>3083	PtrMemberAccess	restrictions_iterator -> restriction
>3084	Identifier	restriction
>3085	Identifier	restrictions_iterator
>3086	ExpressionStatement	 
>3087	ShiftExpression	SimpleLogger ( ) . Write ( LogLevel 
>3088	ShiftExpression	\"Restriction references invalid way
>3089	MemberAccess	restrictions_iterator -> restriction . to . way
>3090	Identifier	way
>3091	MemberAccess	restrictions_iterator -> restriction . to
>3092	Identifier	to
>3093	PtrMemberAccess	restrictions_iterator -> restriction
>3094	Identifier	restriction
>3095	Identifier	restrictions_iterator
>3096	PrimaryExpression	\"Restriction references invalid way
>3097	CallExpression	SimpleLogger ( ) . Write ( LogLevel 
>3098	ArgumentList	LogLevel 
>3099	Argument	LogLevel 
>3100	Identifier	LogLevel 
>3101	Callee	SimpleLogger ( ) . Write
>3102	MemberAccess	SimpleLogger ( ) . Write
>3103	Identifier	Write
>3104	CallExpression	SimpleLogger ( )
>3105	ArgumentList	 
>3106	Callee	SimpleLogger
>3107	Identifier	SimpleLogger
>3108	Condition	 
>3109	RelationalExpression	way_start_and_end_iterator -> way_id > restrictions_iterator -> restriction . to . way
>3110	MemberAccess	restrictions_iterator -> restriction . to . way
>3111	Identifier	way
>3112	MemberAccess	restrictions_iterator -> restriction . to
>3113	Identifier	to
>3114	PtrMemberAccess	restrictions_iterator -> restriction
>3115	Identifier	restriction
>3116	Identifier	restrictions_iterator
>3117	PtrMemberAccess	way_start_and_end_iterator -> way_id
>3118	Identifier	way_id
>3119	Identifier	way_start_and_end_iterator
>3120	IfStatement	if ( restrictions_iterator -> restriction . from . node == SPECIAL_NODEID || restrictions_iterator -> restriction \
>3121	CompoundStatement	 
>3122	ContinueStatement	 
>3123	ExpressionStatement	 
>3124	UnaryExpression	++ restrictions_iterator
>3125	Identifier	restrictions_iterator
>3126	IncDec	++
>3127	Condition	 
>3128	OrExpression	restrictions_iterator -> restriction . from . node == SPECIAL_NODEID || restrictions_iterator -> restriction \
>3129	EqualityExpression	restrictions_iterator -> restriction . via . node == SPECIAL_NODEID
>3130	Identifier	SPECIAL_NODEID
>3131	MemberAccess	restrictions_iterator -> restriction . via . node
>3132	Identifier	node
>3133	MemberAccess	restrictions_iterator -> restriction . via
>3134	Identifier	via
>3135	PtrMemberAccess	restrictions_iterator -> restriction
>3136	Identifier	restriction
>3137	Identifier	restrictions_iterator
>3138	EqualityExpression	restrictions_iterator -> restriction . from . node == SPECIAL_NODEID
>3139	Identifier	SPECIAL_NODEID
>3140	MemberAccess	restrictions_iterator -> restriction . from . node
>3141	Identifier	node
>3142	MemberAccess	restrictions_iterator -> restriction . from
>3143	Identifier	from
>3144	PtrMemberAccess	restrictions_iterator -> restriction
>3145	Identifier	restriction
>3146	Identifier	restrictions_iterator
>3147	IfStatement	if ( way_start_and_end_iterator -> way_id < restrictions_iterator -> restriction . to . way )
>3148	CompoundStatement	 
>3149	ContinueStatement	 
>3150	ExpressionStatement	 
>3151	UnaryExpression	++ way_start_and_end_iterator
>3152	Identifier	way_start_and_end_iterator
>3153	IncDec	++
>3154	Condition	 
>3155	RelationalExpression	way_start_and_end_iterator -> way_id < restrictions_iterator -> restriction . to . way
>3156	MemberAccess	restrictions_iterator -> restriction . to . way
>3157	Identifier	way
>3158	MemberAccess	restrictions_iterator -> restriction . to
>3159	Identifier	to
>3160	PtrMemberAccess	restrictions_iterator -> restriction
>3161	Identifier	restriction
>3162	Identifier	restrictions_iterator
>3163	PtrMemberAccess	way_start_and_end_iterator -> way_id
>3164	Identifier	way_id
>3165	Identifier	way_start_and_end_iterator
>3166	Condition	 
>3167	AndExpression	way_start_and_end_iterator != way_start_end_id_list . cend ( ) && restrictions_iterator != restrictions_\
>3168	EqualityExpression	restrictions_iterator != restrictions_list . end ( )
>3169	CallExpression	restrictions_list . end ( )
>3170	ArgumentList	 
>3171	Callee	restrictions_list . end
>3172	MemberAccess	restrictions_list . end
>3173	Identifier	end
>3174	Identifier	restrictions_list
>3175	Identifier	restrictions_iterator
>3176	EqualityExpression	way_start_and_end_iterator != way_start_end_id_list . cend ( )
>3177	CallExpression	way_start_end_id_list . cend ( )
>3178	ArgumentList	 
>3179	Callee	way_start_end_id_list . cend
>3180	MemberAccess	way_start_end_id_list . cend
>3181	Identifier	cend
>3182	Identifier	way_start_end_id_list
>3183	Identifier	way_start_and_end_iterator
>3184	ExpressionStatement	 
>3185	AssignmentExpr	way_start_and_end_iterator = way_start_end_id_list . cbegin ( )
>3186	CallExpression	way_start_end_id_list . cbegin ( )
>3187	ArgumentList	 
>3188	Callee	way_start_end_id_list . cbegin
>3189	MemberAccess	way_start_end_id_list . cbegin
>3190	Identifier	cbegin
>3191	Identifier	way_start_end_id_list
>3192	Identifier	way_start_and_end_iterator
>3193	ExpressionStatement	 
>3194	AssignmentExpr	restrictions_iterator = restrictions_list . begin ( )
>3195	CallExpression	restrictions_list . begin ( )
>3196	ArgumentList	 
>3197	Callee	restrictions_list . begin
>3198	MemberAccess	restrictions_list . begin
>3199	Identifier	begin
>3200	Identifier	restrictions_list
>3201	Identifier	restrictions_iterator
>3202	ExpressionStatement	 
>3203	CallExpression	TIMER_START ( fix_restriction_ends )
>3204	ArgumentList	fix_restriction_ends
>3205	Argument	fix_restriction_ends
>3206	Identifier	fix_restriction_ends
>3207	Callee	TIMER_START
>3208	Identifier	TIMER_START
>3209	ExpressionStatement	 
>3210	ShiftExpression	std 
>3211	ShiftExpression	\"[extractor] Fixing restriction ends   ... \" << std 
>3212	Identifier	std 
>3213	PrimaryExpression	\"[extractor] Fixing restriction ends   ... \"
>3214	Identifier	std 
>3215	ExpressionStatement	 
>3216	ShiftExpression	std 
>3217	ShiftExpression	\"ok, after \" << TIMER_SEC ( sort_restrictions_to ) << \"s\" << std 
>3218	ShiftExpression	TIMER_SEC ( sort_restrictions_to ) << \"s\" << std 
>3219	ShiftExpression	\"s\" << std 
>3220	Identifier	std 
>3221	PrimaryExpression	\"s\"
>3222	CallExpression	TIMER_SEC ( sort_restrictions_to )
>3223	ArgumentList	sort_restrictions_to
>3224	Argument	sort_restrictions_to
>3225	Identifier	sort_restrictions_to
>3226	Callee	TIMER_SEC
>3227	Identifier	TIMER_SEC
>3228	PrimaryExpression	\"ok, after \"
>3229	Identifier	std 
>3230	ExpressionStatement	 
>3231	CallExpression	TIMER_STOP ( sort_restrictions_to )
>3232	ArgumentList	sort_restrictions_to
>3233	Argument	sort_restrictions_to
>3234	Identifier	sort_restrictions_to
>3235	Callee	TIMER_STOP
>3236	Identifier	TIMER_STOP
>3237	ExpressionStatement	 
>3238	CallExpression	stxxl 
>3239	ArgumentList	restrictions_list . begin ( )
>3240	Argument	stxxl_memory
>3241	Identifier	stxxl_memory
>3242	Argument	CmpRestrictionContainerByTo ( )
>3243	CallExpression	CmpRestrictionContainerByTo ( )
>3244	ArgumentList	 
>3245	Callee	CmpRestrictionContainerByTo
>3246	Identifier	CmpRestrictionContainerByTo
>3247	Argument	restrictions_list . end ( )
>3248	CallExpression	restrictions_list . end ( )
>3249	ArgumentList	 
>3250	Callee	restrictions_list . end
>3251	MemberAccess	restrictions_list . end
>3252	Identifier	end
>3253	Identifier	restrictions_list
>3254	Argument	restrictions_list . begin ( )
>3255	CallExpression	restrictions_list . begin ( )
>3256	ArgumentList	 
>3257	Callee	restrictions_list . begin
>3258	MemberAccess	restrictions_list . begin
>3259	Identifier	begin
>3260	Identifier	restrictions_list
>3261	Callee	stxxl 
>3262	Identifier	stxxl 
>3263	ExpressionStatement	 
>3264	CallExpression	TIMER_START ( sort_restrictions_to )
>3265	ArgumentList	sort_restrictions_to
>3266	Argument	sort_restrictions_to
>3267	Identifier	sort_restrictions_to
>3268	Callee	TIMER_START
>3269	Identifier	TIMER_START
>3270	ExpressionStatement	 
>3271	ShiftExpression	std 
>3272	ShiftExpression	\"[extractor] Sorting restrictions. by to  ... \" << std 
>3273	Identifier	std 
>3274	PrimaryExpression	\"[extractor] Sorting restrictions. by to  ... \"
>3275	Identifier	std 
>3276	ExpressionStatement	 
>3277	ShiftExpression	std 
>3278	ShiftExpression	\"ok, after \" << TIMER_SEC ( fix_restriction_starts ) << \"s\" << std 
>3279	ShiftExpression	TIMER_SEC ( fix_restriction_starts ) << \"s\" << std 
>3280	ShiftExpression	\"s\" << std 
>3281	Identifier	std 
>3282	PrimaryExpression	\"s\"
>3283	CallExpression	TIMER_SEC ( fix_restriction_starts )
>3284	ArgumentList	fix_restriction_starts
>3285	Argument	fix_restriction_starts
>3286	Identifier	fix_restriction_starts
>3287	Callee	TIMER_SEC
>3288	Identifier	TIMER_SEC
>3289	PrimaryExpression	\"ok, after \"
>3290	Identifier	std 
>3291	ExpressionStatement	 
>3292	CallExpression	TIMER_STOP ( fix_restriction_starts )
>3293	ArgumentList	fix_restriction_starts
>3294	Argument	fix_restriction_starts
>3295	Identifier	fix_restriction_starts
>3296	Callee	TIMER_STOP
>3297	Identifier	TIMER_STOP
>3298	WhileStatement	while ( way_start_and_end_iterator != way_start_end_id_list . cend ( ) && restrictions_iterator != restrictions_\
>3299	CompoundStatement	 
>3300	ExpressionStatement	 
>3301	UnaryExpression	++ restrictions_iterator
>3302	Identifier	restrictions_iterator
>3303	IncDec	++
>3304	IfStatement	if ( way_start_and_end_iterator -> first_segment_source_id == via_node_id )
>3305	ElseStatement	else
>3306	IfStatement	if ( way_start_and_end_iterator -> last_segment_target_id == via_node_id )
>3307	CompoundStatement	 
>3308	ExpressionStatement	 
>3309	AssignmentExpr	restrictions_iterator -> restriction . from . node = id_iter -> second
>3310	PtrMemberAccess	id_iter -> second
>3311	Identifier	second
>3312	Identifier	id_iter
>3313	MemberAccess	restrictions_iterator -> restriction . from . node
>3314	Identifier	node
>3315	MemberAccess	restrictions_iterator -> restriction . from
>3316	Identifier	from
>3317	PtrMemberAccess	restrictions_iterator -> restriction
>3318	Identifier	restriction
>3319	Identifier	restrictions_iterator
>3320	ExpressionStatement	 
>3321	CallExpression	BOOST_ASSERT ( id_iter != external_to_internal_node_id_map . end ( ) )
>3322	ArgumentList	id_iter != external_to_internal_node_id_map . end ( )
>3323	Argument	id_iter != external_to_internal_node_id_map . end ( )
>3324	EqualityExpression	id_iter != external_to_internal_node_id_map . end ( )
>3325	CallExpression	external_to_internal_node_id_map . end ( )
>3326	ArgumentList	 
>3327	Callee	external_to_internal_node_id_map . end
>3328	MemberAccess	external_to_internal_node_id_map . end
>3329	Identifier	end
>3330	Identifier	external_to_internal_node_id_map
>3331	Identifier	id_iter
>3332	Callee	BOOST_ASSERT
>3333	Identifier	BOOST_ASSERT
>3334	ExpressionStatement	 
>3335	AssignmentExpr	id_iter = external_to_internal_node_id_map . find ( way_start_and_end_iterator -> last_segment_source_\
>3336	CallExpression	external_to_internal_node_id_map . find ( way_start_and_end_iterator -> last_segment_source_id )
>3337	ArgumentList	way_start_and_end_iterator -> last_segment_source_id
>3338	Argument	way_start_and_end_iterator -> last_segment_source_id
>3339	PtrMemberAccess	way_start_and_end_iterator -> last_segment_source_id
>3340	Identifier	last_segment_source_id
>3341	Identifier	way_start_and_end_iterator
>3342	Callee	external_to_internal_node_id_map . find
>3343	MemberAccess	external_to_internal_node_id_map . find
>3344	Identifier	find
>3345	Identifier	external_to_internal_node_id_map
>3346	Identifier	id_iter
>3347	Statement	 
>3348	Condition	 
>3349	EqualityExpression	way_start_and_end_iterator -> last_segment_target_id == via_node_id
>3350	Identifier	via_node_id
>3351	PtrMemberAccess	way_start_and_end_iterator -> last_segment_target_id
>3352	Identifier	last_segment_target_id
>3353	Identifier	way_start_and_end_iterator
>3354	CompoundStatement	 
>3355	ExpressionStatement	 
>3356	AssignmentExpr	restrictions_iterator -> restriction . from . node = id_iter -> second
>3357	PtrMemberAccess	id_iter -> second
>3358	Identifier	second
>3359	Identifier	id_iter
>3360	MemberAccess	restrictions_iterator -> restriction . from . node
>3361	Identifier	node
>3362	MemberAccess	restrictions_iterator -> restriction . from
>3363	Identifier	from
>3364	PtrMemberAccess	restrictions_iterator -> restriction
>3365	Identifier	restriction
>3366	Identifier	restrictions_iterator
>3367	ExpressionStatement	 
>3368	CallExpression	BOOST_ASSERT ( id_iter != external_to_internal_node_id_map . end ( ) )
>3369	ArgumentList	id_iter != external_to_internal_node_id_map . end ( )
>3370	Argument	id_iter != external_to_internal_node_id_map . end ( )
>3371	EqualityExpression	id_iter != external_to_internal_node_id_map . end ( )
>3372	CallExpression	external_to_internal_node_id_map . end ( )
>3373	ArgumentList	 
>3374	Callee	external_to_internal_node_id_map . end
>3375	MemberAccess	external_to_internal_node_id_map . end
>3376	Identifier	end
>3377	Identifier	external_to_internal_node_id_map
>3378	Identifier	id_iter
>3379	Callee	BOOST_ASSERT
>3380	Identifier	BOOST_ASSERT
>3381	ExpressionStatement	 
>3382	AssignmentExpr	id_iter = external_to_internal_node_id_map . find ( way_start_and_end_iterator -> first_segment_target_\
>3383	CallExpression	external_to_internal_node_id_map . find ( way_start_and_end_iterator -> first_segment_target_id )
>3384	ArgumentList	way_start_and_end_iterator -> first_segment_target_id
>3385	Argument	way_start_and_end_iterator -> first_segment_target_id
>3386	PtrMemberAccess	way_start_and_end_iterator -> first_segment_target_id
>3387	Identifier	first_segment_target_id
>3388	Identifier	way_start_and_end_iterator
>3389	Callee	external_to_internal_node_id_map . find
>3390	MemberAccess	external_to_internal_node_id_map . find
>3391	Identifier	find
>3392	Identifier	external_to_internal_node_id_map
>3393	Identifier	id_iter
>3394	Statement	 
>3395	Condition	 
>3396	EqualityExpression	way_start_and_end_iterator -> first_segment_source_id == via_node_id
>3397	Identifier	via_node_id
>3398	PtrMemberAccess	way_start_and_end_iterator -> first_segment_source_id
>3399	Identifier	first_segment_source_id
>3400	Identifier	way_start_and_end_iterator
>3401	IfStatement	if ( via_id_iter == external_to_internal_node_id_map . end ( ) )
>3402	CompoundStatement	 
>3403	ContinueStatement	 
>3404	ExpressionStatement	 
>3405	UnaryExpression	++ restrictions_iterator
>3406	Identifier	restrictions_iterator
>3407	IncDec	++
>3408	ExpressionStatement	 
>3409	AssignmentExpr	restrictions_iterator -> restriction . via . node = SPECIAL_NODEID
>3410	Identifier	SPECIAL_NODEID
>3411	MemberAccess	restrictions_iterator -> restriction . via . node
>3412	Identifier	node
>3413	MemberAccess	restrictions_iterator -> restriction . via
>3414	Identifier	via
>3415	PtrMemberAccess	restrictions_iterator -> restriction
>3416	Identifier	restriction
>3417	Identifier	restrictions_iterator
>3418	ExpressionStatement	 
>3419	ShiftExpression	SimpleLogger ( ) . Write ( LogLevel 
>3420	ShiftExpression	\"Restriction references invalid node
>3421	MemberAccess	restrictions_iterator -> restriction . via . node
>3422	Identifier	node
>3423	MemberAccess	restrictions_iterator -> restriction . via
>3424	Identifier	via
>3425	PtrMemberAccess	restrictions_iterator -> restriction
>3426	Identifier	restriction
>3427	Identifier	restrictions_iterator
>3428	PrimaryExpression	\"Restriction references invalid node
>3429	CallExpression	SimpleLogger ( ) . Write ( LogLevel 
>3430	ArgumentList	LogLevel 
>3431	Argument	LogLevel 
>3432	Identifier	LogLevel 
>3433	Callee	SimpleLogger ( ) . Write
>3434	MemberAccess	SimpleLogger ( ) . Write
>3435	Identifier	Write
>3436	CallExpression	SimpleLogger ( )
>3437	ArgumentList	 
>3438	Callee	SimpleLogger
>3439	Identifier	SimpleLogger
>3440	Condition	 
>3441	EqualityExpression	via_id_iter == external_to_internal_node_id_map . end ( )
>3442	CallExpression	external_to_internal_node_id_map . end ( )
>3443	ArgumentList	 
>3444	Callee	external_to_internal_node_id_map . end
>3445	MemberAccess	external_to_internal_node_id_map . end
>3446	Identifier	end
>3447	Identifier	external_to_internal_node_id_map
>3448	Identifier	via_id_iter
>3449	ExpressionStatement	 
>3450	AssignmentExpr	via_id_iter = external_to_internal_node_id_map . find ( via_node_id )
>3451	CallExpression	external_to_internal_node_id_map . find ( via_node_id )
>3452	ArgumentList	via_node_id
>3453	Argument	via_node_id
>3454	Identifier	via_node_id
>3455	Callee	external_to_internal_node_id_map . find
>3456	MemberAccess	external_to_internal_node_id_map . find
>3457	Identifier	find
>3458	Identifier	external_to_internal_node_id_map
>3459	Identifier	via_id_iter
>3460	Statement	 
>3461	IdentifierDeclStatement	 
>3462	IdentifierDecl	via_node_id = restrictions_iterator -> restriction . via . node
>3463	AssignmentExpr	via_node_id = restrictions_iterator -> restriction . via . node
>3464	MemberAccess	restrictions_iterator -> restriction . via . node
>3465	Identifier	node
>3466	MemberAccess	restrictions_iterator -> restriction . via
>3467	Identifier	via
>3468	PtrMemberAccess	restrictions_iterator -> restriction
>3469	Identifier	restriction
>3470	Identifier	restrictions_iterator
>3471	Identifier	via_node_id
>3472	Identifier	via_node_id
>3473	IdentifierDeclType	const NodeID
>3474	ExpressionStatement	 
>3475	CallExpression	BOOST_ASSERT ( way_start_and_end_iterator -> way_id == restrictions_iterator -> restriction . from . way )
>3476	ArgumentList	way_start_and_end_iterator -> way_id == restrictions_iterator -> restriction . from . way
>3477	Argument	way_start_and_end_iterator -> way_id == restrictions_iterator -> restriction . from . way
>3478	EqualityExpression	way_start_and_end_iterator -> way_id == restrictions_iterator -> restriction . from . way
>3479	MemberAccess	restrictions_iterator -> restriction . from . way
>3480	Identifier	way
>3481	MemberAccess	restrictions_iterator -> restriction . from
>3482	Identifier	from
>3483	PtrMemberAccess	restrictions_iterator -> restriction
>3484	Identifier	restriction
>3485	Identifier	restrictions_iterator
>3486	PtrMemberAccess	way_start_and_end_iterator -> way_id
>3487	Identifier	way_id
>3488	Identifier	way_start_and_end_iterator
>3489	Callee	BOOST_ASSERT
>3490	Identifier	BOOST_ASSERT
>3491	IfStatement	if ( way_start_and_end_iterator -> way_id > restrictions_iterator -> restriction . from . way )
>3492	CompoundStatement	 
>3493	ContinueStatement	 
>3494	ExpressionStatement	 
>3495	UnaryExpression	++ restrictions_iterator
>3496	Identifier	restrictions_iterator
>3497	IncDec	++
>3498	ExpressionStatement	 
>3499	AssignmentExpr	restrictions_iterator -> restriction . from . node = SPECIAL_NODEID
>3500	Identifier	SPECIAL_NODEID
>3501	MemberAccess	restrictions_iterator -> restriction . from . node
>3502	Identifier	node
>3503	MemberAccess	restrictions_iterator -> restriction . from
>3504	Identifier	from
>3505	PtrMemberAccess	restrictions_iterator -> restriction
>3506	Identifier	restriction
>3507	Identifier	restrictions_iterator
>3508	ExpressionStatement	 
>3509	ShiftExpression	SimpleLogger ( ) . Write ( LogLevel 
>3510	ShiftExpression	\"Restriction references invalid way
>3511	MemberAccess	restrictions_iterator -> restriction . from . way
>3512	Identifier	way
>3513	MemberAccess	restrictions_iterator -> restriction . from
>3514	Identifier	from
>3515	PtrMemberAccess	restrictions_iterator -> restriction
>3516	Identifier	restriction
>3517	Identifier	restrictions_iterator
>3518	PrimaryExpression	\"Restriction references invalid way
>3519	CallExpression	SimpleLogger ( ) . Write ( LogLevel 
>3520	ArgumentList	LogLevel 
>3521	Argument	LogLevel 
>3522	Identifier	LogLevel 
>3523	Callee	SimpleLogger ( ) . Write
>3524	MemberAccess	SimpleLogger ( ) . Write
>3525	Identifier	Write
>3526	CallExpression	SimpleLogger ( )
>3527	ArgumentList	 
>3528	Callee	SimpleLogger
>3529	Identifier	SimpleLogger
>3530	Condition	 
>3531	RelationalExpression	way_start_and_end_iterator -> way_id > restrictions_iterator -> restriction . from . way
>3532	MemberAccess	restrictions_iterator -> restriction . from . way
>3533	Identifier	way
>3534	MemberAccess	restrictions_iterator -> restriction . from
>3535	Identifier	from
>3536	PtrMemberAccess	restrictions_iterator -> restriction
>3537	Identifier	restriction
>3538	Identifier	restrictions_iterator
>3539	PtrMemberAccess	way_start_and_end_iterator -> way_id
>3540	Identifier	way_id
>3541	Identifier	way_start_and_end_iterator
>3542	IfStatement	if ( way_start_and_end_iterator -> way_id < restrictions_iterator -> restriction . from . way )
>3543	CompoundStatement	 
>3544	ContinueStatement	 
>3545	ExpressionStatement	 
>3546	UnaryExpression	++ way_start_and_end_iterator
>3547	Identifier	way_start_and_end_iterator
>3548	IncDec	++
>3549	Condition	 
>3550	RelationalExpression	way_start_and_end_iterator -> way_id < restrictions_iterator -> restriction . from . way
>3551	MemberAccess	restrictions_iterator -> restriction . from . way
>3552	Identifier	way
>3553	MemberAccess	restrictions_iterator -> restriction . from
>3554	Identifier	from
>3555	PtrMemberAccess	restrictions_iterator -> restriction
>3556	Identifier	restriction
>3557	Identifier	restrictions_iterator
>3558	PtrMemberAccess	way_start_and_end_iterator -> way_id
>3559	Identifier	way_id
>3560	Identifier	way_start_and_end_iterator
>3561	Condition	 
>3562	AndExpression	way_start_and_end_iterator != way_start_end_id_list . cend ( ) && restrictions_iterator != restrictions_\
>3563	EqualityExpression	restrictions_iterator != restrictions_list . end ( )
>3564	CallExpression	restrictions_list . end ( )
>3565	ArgumentList	 
>3566	Callee	restrictions_list . end
>3567	MemberAccess	restrictions_list . end
>3568	Identifier	end
>3569	Identifier	restrictions_list
>3570	Identifier	restrictions_iterator
>3571	EqualityExpression	way_start_and_end_iterator != way_start_end_id_list . cend ( )
>3572	CallExpression	way_start_end_id_list . cend ( )
>3573	ArgumentList	 
>3574	Callee	way_start_end_id_list . cend
>3575	MemberAccess	way_start_end_id_list . cend
>3576	Identifier	cend
>3577	Identifier	way_start_end_id_list
>3578	Identifier	way_start_and_end_iterator
>3579	ExpressionStatement	 
>3580	AssignmentExpr	way_start_and_end_iterator = way_start_end_id_list . cbegin ( )
>3581	CallExpression	way_start_end_id_list . cbegin ( )
>3582	ArgumentList	 
>3583	Callee	way_start_end_id_list . cbegin
>3584	MemberAccess	way_start_end_id_list . cbegin
>3585	Identifier	cbegin
>3586	Identifier	way_start_end_id_list
>3587	Identifier	way_start_and_end_iterator
>3588	Statement	 
>3589	ExpressionStatement	 
>3590	AssignmentExpr	restrictions_iterator = restrictions_list . begin ( )
>3591	CallExpression	restrictions_list . begin ( )
>3592	ArgumentList	 
>3593	Callee	restrictions_list . begin
>3594	MemberAccess	restrictions_list . begin
>3595	Identifier	begin
>3596	Identifier	restrictions_list
>3597	Identifier	restrictions_iterator
>3598	Statement	 
>3599	ExpressionStatement	 
>3600	CallExpression	TIMER_START ( fix_restriction_starts )
>3601	ArgumentList	fix_restriction_starts
>3602	Argument	fix_restriction_starts
>3603	Identifier	fix_restriction_starts
>3604	Callee	TIMER_START
>3605	Identifier	TIMER_START
>3606	ExpressionStatement	 
>3607	ShiftExpression	std 
>3608	ShiftExpression	\"[extractor] Fixing restriction starts ... \" << std 
>3609	Identifier	std 
>3610	PrimaryExpression	\"[extractor] Fixing restriction starts ... \"
>3611	Identifier	std 
>3612	ExpressionStatement	 
>3613	ShiftExpression	std 
>3614	ShiftExpression	\"ok, after \" << TIMER_SEC ( sort_restrictions ) << \"s\" << std 
>3615	ShiftExpression	TIMER_SEC ( sort_restrictions ) << \"s\" << std 
>3616	ShiftExpression	\"s\" << std 
>3617	Identifier	std 
>3618	PrimaryExpression	\"s\"
>3619	CallExpression	TIMER_SEC ( sort_restrictions )
>3620	ArgumentList	sort_restrictions
>3621	Argument	sort_restrictions
>3622	Identifier	sort_restrictions
>3623	Callee	TIMER_SEC
>3624	Identifier	TIMER_SEC
>3625	PrimaryExpression	\"ok, after \"
>3626	Identifier	std 
>3627	ExpressionStatement	 
>3628	CallExpression	TIMER_STOP ( sort_restrictions )
>3629	ArgumentList	sort_restrictions
>3630	Argument	sort_restrictions
>3631	Identifier	sort_restrictions
>3632	Callee	TIMER_STOP
>3633	Identifier	TIMER_STOP
>3634	ExpressionStatement	 
>3635	CallExpression	stxxl 
>3636	ArgumentList	restrictions_list . begin ( )
>3637	Argument	stxxl_memory
>3638	Identifier	stxxl_memory
>3639	Argument	CmpRestrictionContainerByFrom ( )
>3640	CallExpression	CmpRestrictionContainerByFrom ( )
>3641	ArgumentList	 
>3642	Callee	CmpRestrictionContainerByFrom
>3643	Identifier	CmpRestrictionContainerByFrom
>3644	Argument	restrictions_list . end ( )
>3645	CallExpression	restrictions_list . end ( )
>3646	ArgumentList	 
>3647	Callee	restrictions_list . end
>3648	MemberAccess	restrictions_list . end
>3649	Identifier	end
>3650	Identifier	restrictions_list
>3651	Argument	restrictions_list . begin ( )
>3652	CallExpression	restrictions_list . begin ( )
>3653	ArgumentList	 
>3654	Callee	restrictions_list . begin
>3655	MemberAccess	restrictions_list . begin
>3656	Identifier	begin
>3657	Identifier	restrictions_list
>3658	Callee	stxxl 
>3659	Identifier	stxxl 
>3660	ExpressionStatement	 
>3661	CallExpression	TIMER_START ( sort_restrictions )
>3662	ArgumentList	sort_restrictions
>3663	Argument	sort_restrictions
>3664	Identifier	sort_restrictions
>3665	Callee	TIMER_START
>3666	Identifier	TIMER_START
>3667	ExpressionStatement	 
>3668	ShiftExpression	std 
>3669	ShiftExpression	\"[extractor] Sorting \" << restrictions_list . size ( ) << \" restriction. by from... \" << std 
>3670	ShiftExpression	restrictions_list . size ( ) << \" restriction. by from... \" << std 
>3671	ShiftExpression	\" restriction. by from... \" << std 
>3672	Identifier	std 
>3673	PrimaryExpression	\" restriction. by from... \"
>3674	CallExpression	restrictions_list . size ( )
>3675	ArgumentList	 
>3676	Callee	restrictions_list . size
>3677	MemberAccess	restrictions_list . size
>3678	Identifier	size
>3679	Identifier	restrictions_list
>3680	PrimaryExpression	\"[extractor] Sorting \"
>3681	Identifier	std 
>3682	ExpressionStatement	 
>3683	ShiftExpression	std 
>3684	ShiftExpression	\"ok, after \" << TIMER_SEC ( sort_ways ) << \"s\" << std 
>3685	ShiftExpression	TIMER_SEC ( sort_ways ) << \"s\" << std 
>3686	ShiftExpression	\"s\" << std 
>3687	Identifier	std 
>3688	PrimaryExpression	\"s\"
>3689	CallExpression	TIMER_SEC ( sort_ways )
>3690	ArgumentList	sort_ways
>3691	Argument	sort_ways
>3692	Identifier	sort_ways
>3693	Callee	TIMER_SEC
>3694	Identifier	TIMER_SEC
>3695	PrimaryExpression	\"ok, after \"
>3696	Identifier	std 
>3697	ExpressionStatement	 
>3698	CallExpression	TIMER_STOP ( sort_ways )
>3699	ArgumentList	sort_ways
>3700	Argument	sort_ways
>3701	Identifier	sort_ways
>3702	Callee	TIMER_STOP
>3703	Identifier	TIMER_STOP
>3704	ExpressionStatement	 
>3705	CallExpression	stxxl 
>3706	ArgumentList	way_start_end_id_list . begin ( )
>3707	Argument	stxxl_memory
>3708	Identifier	stxxl_memory
>3709	Argument	FirstAndLastSegmentOfWayStxxlCompare ( )
>3710	CallExpression	FirstAndLastSegmentOfWayStxxlCompare ( )
>3711	ArgumentList	 
>3712	Callee	FirstAndLastSegmentOfWayStxxlCompare
>3713	Identifier	FirstAndLastSegmentOfWayStxxlCompare
>3714	Argument	way_start_end_id_list . end ( )
>3715	CallExpression	way_start_end_id_list . end ( )
>3716	ArgumentList	 
>3717	Callee	way_start_end_id_list . end
>3718	MemberAccess	way_start_end_id_list . end
>3719	Identifier	end
>3720	Identifier	way_start_end_id_list
>3721	Argument	way_start_end_id_list . begin ( )
>3722	CallExpression	way_start_end_id_list . begin ( )
>3723	ArgumentList	 
>3724	Callee	way_start_end_id_list . begin
>3725	MemberAccess	way_start_end_id_list . begin
>3726	Identifier	begin
>3727	Identifier	way_start_end_id_list
>3728	Callee	stxxl 
>3729	Identifier	stxxl 
>3730	ExpressionStatement	 
>3731	CallExpression	TIMER_START ( sort_ways )
>3732	ArgumentList	sort_ways
>3733	Argument	sort_ways
>3734	Identifier	sort_ways
>3735	Callee	TIMER_START
>3736	Identifier	TIMER_START
>3737	ExpressionStatement	 
>3738	ShiftExpression	std 
>3739	ShiftExpression	\"[extractor] Sorting used ways         ... \" << std 
>3740	Identifier	std 
>3741	PrimaryExpression	\"[extractor] Sorting used ways         ... \"
>3742	Identifier	std 
<3=6,5,4
<6=16,7
<7=8
<8=12,9
<9=10
<10=11
<12=13
<13=15,14
<16=17
<17=19,18
<25=27,26
<27=63,56,49,42,35,28
<28=29
<29=31,30
<31=32
<32=34,33
<35=36
<36=38,37
<38=39
<39=41,40
<42=43
<43=45,44
<45=46
<46=48,47
<49=50
<50=52,51
<52=53
<53=55,54
<56=57
<57=59,58
<59=60
<60=62,61
<63=64
<64=66,65
<66=67
<67=69,68
<79=91,90,80
<80=87,84,81
<81=83,82
<84=86,85
<87=89,88
<91=108,92
<92=107,93
<93=94
<94=95
<95=106,96
<96=105,97
<97=99,98
<99=101,100
<101=102
<102=104,103
<108=109
<109=203,187,177,160,155,148,143,136,129,124,117,110
<110=111
<111=115,112
<112=113
<113=114
<115=116
<117=118
<118=122,119
<119=120
<120=121
<122=123
<124=125
<125=127,126
<127=128
<129=130
<130=132,131
<132=133
<133=135,134
<136=137
<137=141,138
<138=139
<139=140
<141=142
<143=144
<144=146,145
<146=147
<148=149
<149=153,150
<150=151
<151=152
<153=154
<155=156
<156=158,157
<158=159
<160=161
<161=173,162
<162=167,163
<163=164
<164=166,165
<167=168
<168=172,169
<169=171,170
<173=174
<174=176,175
<177=178
<178=186,185,179
<179=184,180
<180=182,181
<182=183
<187=188
<188=199,189
<189=192,190
<190=191
<192=193
<193=195,194
<195=196
<196=198,197
<199=200
<200=202,201
<203=204
<204=206,205
<220=226,225,221
<221=222
<222=224,223
<226=411,404,397,390,386,385,384,383,382,381,380,379,377,376,375,338,337,336,335,328,324,307,306,305,304,303,302,301,300,298,297,296,256,249,242,227
<227=228
<228=241,229
<229=240,230
<230=234,231
<231=233,232
<234=238,235
<235=236
<236=237
<238=239
<242=243
<243=247,244
<244=245
<245=246
<247=248
<249=250
<250=252,251
<252=253
<253=255,254
<256=295,294,293,292,291,290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,275,274,273,257
<257=258
<258=269,259
<259=262,260
<260=261
<262=263
<263=265,264
<265=266
<266=268,267
<269=270
<270=272,271
<298=299
<307=308
<308=320,309
<309=314,310
<310=311
<311=313,312
<314=315
<315=319,316
<316=318,317
<320=321
<321=323,322
<324=325
<325=327,326
<328=329
<329=333,330
<330=331
<331=332
<333=334
<338=374,373,372,371,370,369,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,343,339
<339=340
<340=342,341
<343=344
<344=348,345
<345=346
<346=347
<348=349
<349=351,350
<377=378
<386=387
<387=389,388
<390=391
<391=396,395,392
<392=394,393
<397=398
<398=403,402,399
<399=401,400
<404=405
<405=409,406
<406=407
<407=408
<409=410
<411=412
<412=416,413
<413=415,414
<429=432,431,430
<432=700,693,667,660,645,639,632,631,610,594,587,572,566,559,545,516,509,494,488,481,455,448,433
<433=434
<434=447,435
<435=446,436
<436=440,437
<437=439,438
<440=444,441
<441=442
<442=443
<444=445
<448=449
<449=453,450
<450=451
<451=452
<453=454
<455=456
<456=479,457
<457=472,465,460,458
<458=459
<460=461
<461=463,462
<463=464
<465=466
<466=468,467
<468=469
<469=471,470
<472=473
<473=475,474
<475=476
<476=478,477
<479=480
<481=482
<482=486,483
<483=484
<484=485
<486=487
<488=489
<489=493,490
<490=492,491
<494=495
<495=508,496
<496=507,497
<497=501,498
<498=500,499
<501=505,502
<502=503
<503=504
<505=506
<509=510
<510=514,511
<511=512
<512=513
<514=515
<516=537,528,525,517
<517=518
<518=520,519
<520=524,521
<521=523,522
<525=527,526
<528=529
<529=536,530
<530=532,531
<532=533
<533=535,534
<537=538
<538=539
<539=544,543,540
<540=542,541
<545=546
<546=555,547
<547=548
<548=549
<549=551,550
<551=552
<552=554,553
<555=556
<556=558,557
<559=560
<560=564,561
<561=562
<562=563
<564=565
<566=567
<567=571,568
<568=570,569
<572=573
<573=586,574
<574=585,575
<575=579,576
<576=578,577
<579=583,580
<580=581
<581=582
<583=584
<587=588
<588=592,589
<589=590
<590=591
<592=593
<594=595
<595=606,596
<596=597
<597=598
<598=605,599
<599=601,600
<601=602
<602=604,603
<606=607
<607=609,608
<610=611
<611=630,612
<612=628,613
<613=621,614
<614=615
<615=617,616
<617=618
<618=620,619
<621=622
<622=624,623
<624=625
<625=627,626
<628=629
<632=633
<633=637,634
<634=635
<635=636
<637=638
<639=640
<640=644,641
<641=643,642
<645=646
<646=659,647
<647=658,648
<648=652,649
<649=651,650
<652=656,653
<653=654
<654=655
<656=657
<660=661
<661=665,662
<662=663
<663=664
<665=666
<667=668
<668=691,669
<669=684,677,672,670
<670=671
<672=673
<673=675,674
<675=676
<677=678
<678=680,679
<680=681
<681=683,682
<684=685
<685=687,686
<687=688
<688=690,689
<691=692
<693=694
<694=698,695
<695=696
<696=697
<698=699
<700=701
<701=705,702
<702=704,703
<732=735,734,733
<735=2060,2053,2027,2020,2005,1999,1992,1991,1982,1981,1972,1798,1791,1776,1770,1763,1737,1730,1715,1709,1702,1693,1684,1327,1320,1305,1299,1292,1266,1259,1244,1230,736
<736=1222,1213,737
<737=1200,1183,1176,1163,1150,1149,1148,1147,1146,1145,1144,1143,1142,1141,1140,1135,1134,1133,1132,1131,1130,1129,1128,1127,1126,1125,1120,1119,1118,1117,1116,1115,1114,1113,1112,1111,1110,1105,1104,1103,1102,1101,1100,1099,1098,1097,1096,1095,1090,1016,1015,1014,1013,1012,1011,1010,1009,1008,1007,1006,1005,1004,1003,1002,1001,1000,999,998,997,996,995,738,786,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994
<738=778,774,771,739
<739=760,750,740
<740=741
<741=743,742
<743=745,744
<745=747,746
<747=749,748
<750=751
<751=753,752
<753=755,754
<755=757,756
<757=759,758
<760=763,761
<761=762
<763=764
<764=768,765
<765=767,766
<768=770,769
<771=773,772
<774=775
<775=777,776
<778=779
<779=780
<780=785,784,781
<781=783,782
<786=943,912,787
<787=788
<788=911,910,909,908,907,906,905,904,903,902,901,900,895,894,893,892,891,890,889,888,887,886,885,884,883,878,844,789
<789=842,790
<790=821,811,801,791
<791=792
<792=794,793
<794=796,795
<796=798,797
<798=800,799
<801=802
<802=804,803
<804=806,805
<806=808,807
<808=810,809
<811=812
<812=814,813
<814=816,815
<816=818,817
<818=820,819
<821=822
<822=840,823
<823=832,824
<824=825
<825=827,826
<827=829,828
<829=831,830
<832=833
<833=835,834
<835=837,836
<837=839,838
<840=841
<842=843
<844=876,845
<845=866,856,846
<846=847
<847=849,848
<849=851,850
<851=853,852
<853=855,854
<856=857
<857=859,858
<859=861,860
<861=863,862
<863=865,864
<866=867
<867=869,868
<869=871,870
<871=873,872
<873=875,874
<876=877
<878=879
<879=881,880
<881=882
<895=896
<896=898,897
<898=899
<912=933,923,913
<913=914
<914=916,915
<916=918,917
<918=920,919
<920=922,921
<923=924
<924=926,925
<926=928,927
<928=930,929
<930=932,931
<933=934
<934=936,935
<936=938,937
<938=940,939
<940=942,941
<943=944
<944=946,945
<1016=1070,1017
<1017=1046,1022,1018
<1018=1019
<1019=1021,1020
<1022=1028,1023
<1023=1024
<1024=1025
<1025=1027,1026
<1028=1029
<1029=1039,1030
<1030=1032,1031
<1032=1034,1033
<1034=1036,1035
<1036=1038,1037
<1039=1041,1040
<1041=1043,1042
<1043=1045,1044
<1046=1052,1047
<1047=1048
<1048=1049
<1049=1051,1050
<1052=1053
<1053=1063,1054
<1054=1056,1055
<1056=1058,1057
<1058=1060,1059
<1060=1062,1061
<1063=1065,1064
<1065=1067,1066
<1067=1069,1068
<1070=1071
<1071=1081,1072
<1072=1074,1073
<1074=1076,1075
<1076=1078,1077
<1078=1080,1079
<1081=1083,1082
<1083=1085,1084
<1085=1087,1086
<1087=1089,1088
<1090=1091
<1091=1093,1092
<1093=1094
<1105=1106
<1106=1108,1107
<1108=1109
<1120=1121
<1121=1123,1122
<1123=1124
<1135=1136
<1136=1138,1137
<1138=1139
<1150=1151
<1151=1162,1161,1152
<1152=1160,1153
<1153=1155,1154
<1155=1157,1156
<1157=1159,1158
<1163=1164
<1164=1175,1174,1165
<1165=1173,1166
<1166=1168,1167
<1168=1170,1169
<1170=1172,1171
<1176=1177
<1177=1182,1181,1178
<1178=1180,1179
<1183=1190,1184
<1184=1186,1185
<1186=1187
<1187=1189,1188
<1190=1191
<1191=1193,1192
<1193=1195,1194
<1195=1197,1196
<1197=1199,1198
<1200=1203,1201
<1201=1202
<1203=1204
<1204=1206,1205
<1206=1208,1207
<1208=1210,1209
<1210=1212,1211
<1213=1214
<1214=1221,1215
<1215=1217,1216
<1217=1218
<1218=1220,1219
<1222=1223
<1223=1224
<1224=1229,1228,1225
<1225=1227,1226
<1230=1231
<1231=1242,1232
<1232=1233
<1233=1234
<1234=1236,1235
<1236=1238,1237
<1238=1239
<1239=1241,1240
<1242=1243
<1244=1245
<1245=1258,1246
<1246=1257,1247
<1247=1251,1248
<1248=1250,1249
<1251=1255,1252
<1252=1253
<1253=1254
<1255=1256
<1259=1260
<1260=1264,1261
<1261=1262
<1262=1263
<1264=1265
<1266=1267
<1267=1290,1268
<1268=1283,1276,1271,1269
<1269=1270
<1271=1272
<1272=1274,1273
<1274=1275
<1276=1277
<1277=1279,1278
<1279=1280
<1280=1282,1281
<1283=1284
<1284=1286,1285
<1286=1287
<1287=1289,1288
<1290=1291
<1292=1293
<1293=1297,1294
<1294=1295
<1295=1296
<1297=1298
<1299=1300
<1300=1304,1301
<1301=1303,1302
<1305=1306
<1306=1319,1307
<1307=1318,1308
<1308=1312,1309
<1309=1311,1310
<1312=1316,1313
<1313=1314
<1314=1315
<1316=1317
<1320=1321
<1321=1325,1322
<1322=1323
<1323=1324
<1325=1326
<1327=1666,1328
<1328=1651,1626,1609,1594,1581,1580,1579,1578,1577,1576,1575,1574,1573,1572,1571,1570,1569,1568,1567,1566,1565,1564,1329,1333,1379,1387,1401,1414,1415,1439,1447,1448,1452,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563
<1329=1330
<1330=1332,1331
<1333=1371,1334
<1334=1358,1349,1341,1335
<1335=1336
<1336=1338,1337
<1338=1340,1339
<1341=1342
<1342=1346,1343
<1343=1345,1344
<1346=1348,1347
<1349=1350
<1350=1357,1356,1351
<1351=1355,1352
<1352=1354,1353
<1358=1359
<1359=1369,1360
<1360=1365,1361
<1361=1362
<1362=1364,1363
<1365=1366
<1366=1368,1367
<1369=1370
<1371=1372
<1372=1376,1373
<1373=1375,1374
<1376=1378,1377
<1379=1380
<1380=1384,1381
<1381=1383,1382
<1384=1386,1385
<1387=1388
<1388=1399,1389
<1389=1390
<1390=1391
<1391=1398,1392
<1392=1394,1393
<1394=1395
<1395=1397,1396
<1399=1400
<1401=1402
<1402=1413,1403
<1403=1409,1404
<1404=1405
<1405=1406
<1406=1408,1407
<1409=1410
<1410=1412,1411
<1415=1416
<1416=1436,1417
<1417=1434,1418
<1418=1432,1419
<1419=1420
<1420=1431,1421
<1421=1430,1422
<1422=1428,1423
<1423=1424
<1424=1425
<1425=1427,1426
<1428=1429
<1432=1433
<1434=1435
<1436=1438,1437
<1439=1440
<1440=1444,1441
<1441=1443,1442
<1444=1446,1445
<1448=1449
<1449=1451,1450
<1452=1457,1453
<1453=1454
<1454=1456,1455
<1457=1492,1458
<1458=1490,1488,1482,1481,1479,1469,1468,1466,1459
<1459=1460
<1460=1464,1461
<1461=1462
<1462=1463
<1464=1465
<1466=1467
<1469=1470
<1470=1476,1471
<1471=1473,1472
<1473=1475,1474
<1476=1478,1477
<1479=1480
<1482=1483
<1483=1485,1484
<1485=1487,1486
<1488=1489
<1490=1491
<1492=1493
<1493=1495,1494
<1511=1512
<1512=1540,1539,1513
<1513=1538,1514
<1514=1536,1515
<1515=1530,1524,1520,1516
<1516=1517
<1517=1519,1518
<1520=1521
<1521=1523,1522
<1524=1525
<1525=1527,1526
<1527=1529,1528
<1530=1531
<1531=1533,1532
<1533=1535,1534
<1536=1537
<1581=1582
<1582=1592,1583
<1583=1584
<1584=1585
<1585=1587,1586
<1587=1589,1588
<1589=1591,1590
<1592=1593
<1594=1595
<1595=1607,1596
<1596=1597
<1597=1598
<1598=1602,1599
<1599=1601,1600
<1602=1604,1603
<1604=1606,1605
<1607=1608
<1609=1616,1610
<1610=1612,1611
<1612=1613
<1613=1615,1614
<1616=1617
<1617=1621,1618
<1618=1620,1619
<1621=1623,1622
<1623=1625,1624
<1626=1641,1627
<1627=1633,1629,1628
<1629=1630
<1630=1632,1631
<1633=1634
<1634=1636,1635
<1636=1638,1637
<1638=1640,1639
<1641=1642
<1642=1646,1643
<1643=1645,1644
<1646=1648,1647
<1648=1650,1649
<1651=1658,1652
<1652=1654,1653
<1654=1655
<1655=1657,1656
<1658=1659
<1659=1661,1660
<1661=1663,1662
<1663=1665,1664
<1666=1667
<1667=1676,1668
<1668=1675,1669
<1669=1671,1670
<1671=1672
<1672=1674,1673
<1676=1683,1677
<1677=1679,1678
<1679=1680
<1680=1682,1681
<1684=1685
<1685=1692,1686
<1686=1688,1687
<1688=1689
<1689=1691,1690
<1693=1694
<1694=1701,1695
<1695=1697,1696
<1697=1698
<1698=1700,1699
<1702=1703
<1703=1707,1704
<1704=1705
<1705=1706
<1707=1708
<1709=1710
<1710=1714,1711
<1711=1713,1712
<1715=1716
<1716=1729,1717
<1717=1728,1718
<1718=1722,1719
<1719=1721,1720
<1722=1726,1723
<1723=1724
<1724=1725
<1726=1727
<1730=1731
<1731=1735,1732
<1732=1733
<1733=1734
<1735=1736
<1737=1738
<1738=1761,1739
<1739=1754,1747,1742,1740
<1740=1741
<1742=1743
<1743=1745,1744
<1745=1746
<1747=1748
<1748=1750,1749
<1750=1751
<1751=1753,1752
<1754=1755
<1755=1757,1756
<1757=1758
<1758=1760,1759
<1761=1762
<1763=1764
<1764=1768,1765
<1765=1766
<1766=1767
<1768=1769
<1770=1771
<1771=1775,1772
<1772=1774,1773
<1776=1777
<1777=1790,1778
<1778=1789,1779
<1779=1783,1780
<1780=1782,1781
<1783=1787,1784
<1784=1785
<1785=1786
<1787=1788
<1791=1792
<1792=1796,1793
<1793=1794
<1794=1795
<1796=1797
<1798=1954,1799
<1799=1929,1912,1877,1862,1861,1848,1834,1824,1814,1804,1800
<1800=1801
<1801=1803,1802
<1804=1805
<1805=1809,1806
<1806=1808,1807
<1809=1811,1810
<1811=1813,1812
<1814=1815
<1815=1819,1816
<1816=1818,1817
<1819=1821,1820
<1821=1823,1822
<1824=1825
<1825=1829,1826
<1826=1828,1827
<1829=1831,1830
<1831=1833,1832
<1834=1835
<1835=1846,1836
<1836=1837
<1837=1838
<1838=1845,1839
<1839=1841,1840
<1841=1842
<1842=1844,1843
<1846=1847
<1848=1849
<1849=1860,1850
<1850=1856,1851
<1851=1852
<1852=1853
<1853=1855,1854
<1856=1857
<1857=1859,1858
<1862=1863
<1863=1875,1864
<1864=1865
<1865=1866
<1866=1870,1867
<1867=1869,1868
<1870=1872,1871
<1872=1874,1873
<1875=1876
<1877=1900,1878
<1878=1892,1884,1880,1879
<1880=1881
<1881=1883,1882
<1884=1885
<1885=1887,1886
<1887=1889,1888
<1889=1891,1890
<1892=1893
<1893=1895,1894
<1895=1897,1896
<1897=1899,1898
<1900=1901
<1901=1907,1902
<1902=1904,1903
<1904=1906,1905
<1907=1909,1908
<1909=1911,1910
<1912=1919,1913
<1913=1915,1914
<1915=1916
<1916=1918,1917
<1919=1920
<1920=1924,1921
<1921=1923,1922
<1924=1926,1925
<1926=1928,1927
<1929=1944,1930
<1930=1936,1932,1931
<1932=1933
<1933=1935,1934
<1936=1937
<1937=1939,1938
<1939=1941,1940
<1941=1943,1942
<1944=1945
<1945=1949,1946
<1946=1948,1947
<1949=1951,1950
<1951=1953,1952
<1954=1955
<1955=1964,1956
<1956=1963,1957
<1957=1959,1958
<1959=1960
<1960=1962,1961
<1964=1971,1965
<1965=1967,1966
<1967=1968
<1968=1970,1969
<1972=1973
<1973=1980,1974
<1974=1976,1975
<1976=1977
<1977=1979,1978
<1982=1983
<1983=1990,1984
<1984=1986,1985
<1986=1987
<1987=1989,1988
<1992=1993
<1993=1997,1994
<1994=1995
<1995=1996
<1997=1998
<1999=2000
<2000=2004,2001
<2001=2003,2002
<2005=2006
<2006=2019,2007
<2007=2018,2008
<2008=2012,2009
<2009=2011,2010
<2012=2016,2013
<2013=2014
<2014=2015
<2016=2017
<2020=2021
<2021=2025,2022
<2022=2023
<2023=2024
<2025=2026
<2027=2028
<2028=2051,2029
<2029=2044,2037,2032,2030
<2030=2031
<2032=2033
<2033=2035,2034
<2035=2036
<2037=2038
<2038=2040,2039
<2040=2041
<2041=2043,2042
<2044=2045
<2045=2047,2046
<2047=2048
<2048=2050,2049
<2051=2052
<2053=2054
<2054=2058,2055
<2055=2056
<2056=2057
<2058=2059
<2060=2061
<2061=2065,2062
<2062=2064,2063
<2163=2169,2168,2164
<2164=2165
<2165=2167,2166
<2169=2339,2332,2325,2324,2315,2298,2297,2296,2295,2294,2293,2291,2290,2289,2246,2239,2224,2218,2209,2192,2186,2170
<2170=2171
<2171=2177,2172
<2172=2176,2173
<2173=2175,2174
<2177=2179,2178
<2179=2180
<2180=2182,2181
<2182=2184,2183
<2184=2185
<2186=2187
<2187=2191,2188
<2188=2190,2189
<2192=2193
<2193=2205,2194
<2194=2199,2195
<2195=2196
<2196=2198,2197
<2199=2200
<2200=2204,2201
<2201=2203,2202
<2205=2206
<2206=2208,2207
<2209=2210
<2210=2214,2211
<2211=2212
<2212=2213
<2214=2215
<2215=2217,2216
<2218=2219
<2219=2223,2220
<2220=2222,2221
<2224=2225
<2225=2238,2226
<2226=2237,2227
<2227=2231,2228
<2228=2230,2229
<2231=2235,2232
<2232=2233
<2233=2234
<2235=2236
<2239=2240
<2240=2244,2241
<2241=2242
<2242=2243
<2244=2245
<2246=2270,2251,2247
<2247=2248
<2248=2250,2249
<2251=2252
<2252=2266,2253
<2253=2258,2254
<2254=2255
<2255=2257,2256
<2258=2259
<2259=2265,2260
<2260=2264,2261
<2261=2263,2262
<2266=2267
<2267=2269,2268
<2270=2273,2271
<2271=2272
<2273=2274
<2274=2282,2275
<2275=2277,2276
<2277=2279,2278
<2279=2281,2280
<2282=2284,2283
<2284=2286,2285
<2286=2288,2287
<2291=2292
<2298=2299
<2299=2311,2300
<2300=2305,2301
<2301=2302
<2302=2304,2303
<2305=2306
<2306=2310,2307
<2307=2309,2308
<2311=2312
<2312=2314,2313
<2315=2316
<2316=2323,2317
<2317=2319,2318
<2319=2320
<2320=2322,2321
<2325=2326
<2326=2331,2330,2327
<2327=2329,2328
<2332=2333
<2333=2337,2334
<2334=2335
<2335=2336
<2337=2338
<2339=2340
<2340=2344,2341
<2341=2343,2342
<2363=2369,2368,2364
<2364=2365
<2365=2367,2366
<2369=2615,2598,2592,2585,2584,2575,2574,2565,2471,2464,2449,2443,2431,2418,2401,2392,2386,2370
<2370=2371
<2371=2377,2372
<2372=2376,2373
<2373=2375,2374
<2377=2379,2378
<2379=2380
<2380=2382,2381
<2382=2384,2383
<2384=2385
<2386=2387
<2387=2391,2388
<2388=2390,2389
<2392=2393
<2393=2397,2394
<2394=2395
<2395=2396
<2397=2398
<2398=2400,2399
<2401=2402
<2402=2414,2403
<2403=2408,2404
<2404=2405
<2405=2407,2406
<2408=2409
<2409=2413,2410
<2410=2412,2411
<2414=2415
<2415=2417,2416
<2418=2419
<2419=2427,2420
<2420=2421
<2421=2422
<2422=2426,2423
<2423=2425,2424
<2427=2428
<2428=2430,2429
<2431=2432
<2432=2442,2441,2433
<2433=2440,2434
<2434=2436,2435
<2436=2437
<2437=2439,2438
<2443=2444
<2444=2448,2445
<2445=2447,2446
<2449=2450
<2450=2463,2451
<2451=2462,2452
<2452=2456,2453
<2453=2455,2454
<2456=2460,2457
<2457=2458
<2458=2459
<2460=2461
<2464=2465
<2465=2469,2466
<2466=2467
<2467=2468
<2469=2470
<2471=2547,2472
<2472=2532,2517,2504,2485,2481,2477,2473
<2473=2474
<2474=2476,2475
<2477=2478
<2478=2480,2479
<2481=2482
<2482=2484,2483
<2485=2486
<2486=2500,2487
<2487=2492,2488
<2488=2489
<2489=2491,2490
<2492=2493
<2493=2499,2494
<2494=2498,2495
<2495=2497,2496
<2500=2501
<2501=2503,2502
<2504=2505
<2505=2515,2506
<2506=2507
<2507=2508
<2508=2512,2509
<2509=2511,2510
<2512=2514,2513
<2515=2516
<2517=2524,2518
<2518=2520,2519
<2520=2521
<2521=2523,2522
<2524=2525
<2525=2529,2526
<2526=2528,2527
<2529=2531,2530
<2532=2539,2533
<2533=2535,2534
<2535=2536
<2536=2538,2537
<2539=2540
<2540=2544,2541
<2541=2543,2542
<2544=2546,2545
<2547=2548
<2548=2557,2549
<2549=2556,2550
<2550=2552,2551
<2552=2553
<2553=2555,2554
<2557=2564,2558
<2558=2560,2559
<2560=2561
<2561=2563,2562
<2565=2566
<2566=2573,2567
<2567=2569,2568
<2569=2570
<2570=2572,2571
<2575=2576
<2576=2583,2577
<2577=2579,2578
<2579=2580
<2580=2582,2581
<2585=2586
<2586=2590,2587
<2587=2588
<2588=2589
<2590=2591
<2592=2593
<2593=2597,2594
<2594=2596,2595
<2598=2599
<2599=2611,2600
<2600=2605,2601
<2601=2602
<2602=2604,2603
<2605=2606
<2606=2610,2607
<2607=2609,2608
<2611=2612
<2612=2614,2613
<2615=2616
<2616=2621,2620,2617
<2617=2619,2618
<2645=2651,2650,2646
<2646=2647
<2647=2649,2648
<2651=2842,2835,2819,2809,2792,2791,2790,2781,2764,2763,2762,2761,2760,2759,2757,2756,2755,2699,2690,2673,2666,2652
<2652=2653
<2653=2657,2654
<2654=2656,2655
<2657=2659,2658
<2659=2660
<2660=2662,2661
<2662=2664,2663
<2664=2665
<2666=2667
<2667=2669,2668
<2669=2670
<2670=2672,2671
<2673=2674
<2674=2686,2675
<2675=2680,2676
<2676=2677
<2677=2679,2678
<2680=2681
<2681=2685,2682
<2682=2684,2683
<2686=2687
<2687=2689,2688
<2690=2691
<2691=2695,2692
<2692=2693
<2693=2694
<2695=2696
<2696=2698,2697
<2699=2700
<2700=2725,2701
<2701=2706,2702
<2702=2703
<2703=2705,2704
<2706=2707
<2707=2721,2708
<2708=2713,2709
<2709=2710
<2710=2712,2711
<2713=2714
<2714=2720,2715
<2715=2719,2716
<2716=2718,2717
<2721=2722
<2722=2724,2723
<2725=2726
<2726=2746,2727
<2727=2737,2728
<2728=2736,2729
<2729=2731,2730
<2731=2733,2732
<2733=2735,2734
<2737=2745,2738
<2738=2740,2739
<2740=2742,2741
<2742=2744,2743
<2746=2754,2747
<2747=2749,2748
<2749=2751,2750
<2751=2753,2752
<2757=2758
<2764=2765
<2765=2777,2766
<2766=2771,2767
<2767=2768
<2768=2770,2769
<2771=2772
<2772=2776,2773
<2773=2775,2774
<2777=2778
<2778=2780,2779
<2781=2782
<2782=2789,2783
<2783=2785,2784
<2785=2786
<2786=2788,2787
<2792=2793
<2793=2805,2794
<2794=2799,2795
<2795=2796
<2796=2798,2797
<2799=2800
<2800=2804,2801
<2801=2803,2802
<2805=2806
<2806=2808,2807
<2809=2810
<2810=2818,2817,2811
<2811=2816,2812
<2812=2814,2813
<2814=2815
<2819=2820
<2820=2831,2821
<2821=2824,2822
<2822=2823
<2824=2825
<2825=2827,2826
<2827=2828
<2828=2830,2829
<2831=2832
<2832=2834,2833
<2835=2836
<2836=2841,2840,2837
<2837=2839,2838
<2842=2843
<2843=2845,2844
<2872=2875,2874,2873
<2875=3737,3730,3704,3697,3682,3667,3660,3634,3627,3612,3606,3599,3598,3589,3588,3579,3298,3291,3276,3270,3263,3237,3230,3215,3209,3202,3193,3184,2898,2891,2876
<2876=2877
<2877=2890,2878
<2878=2889,2879
<2879=2883,2880
<2880=2882,2881
<2883=2887,2884
<2884=2885
<2885=2886
<2887=2888
<2891=2892
<2892=2896,2893
<2893=2894
<2894=2895
<2896=2897
<2898=3166,2899
<2899=3147,3120,3069,3052,3039,3038,3027,3013,3001,2904,2900
<2900=2901
<2901=2903,2902
<2904=2995,2954,2905
<2905=2906
<2906=2948,2907
<2907=2947,2934,2920,2908
<2908=2909
<2909=2913,2910
<2910=2912,2911
<2913=2915,2914
<2915=2917,2916
<2917=2919,2918
<2920=2921
<2921=2932,2922
<2922=2923
<2923=2924
<2924=2931,2925
<2925=2927,2926
<2927=2928
<2928=2930,2929
<2932=2933
<2934=2935
<2935=2946,2936
<2936=2942,2937
<2937=2938
<2938=2939
<2939=2941,2940
<2942=2943
<2943=2945,2944
<2948=2949
<2949=2951,2950
<2951=2953,2952
<2954=2994,2981,2967,2955
<2955=2956
<2956=2960,2957
<2957=2959,2958
<2960=2962,2961
<2962=2964,2963
<2964=2966,2965
<2967=2968
<2968=2979,2969
<2969=2970
<2970=2971
<2971=2978,2972
<2972=2974,2973
<2974=2975
<2975=2977,2976
<2979=2980
<2981=2982
<2982=2993,2983
<2983=2989,2984
<2984=2985
<2985=2986
<2986=2988,2987
<2989=2990
<2990=2992,2991
<2995=2996
<2996=2998,2997
<2998=3000,2999
<3001=3002
<3002=3006,3003
<3003=3005,3004
<3006=3008,3007
<3008=3010,3009
<3010=3012,3011
<3013=3014
<3014=3025,3015
<3015=3016
<3016=3017
<3017=3024,3018
<3018=3020,3019
<3020=3021
<3021=3023,3022
<3025=3026
<3027=3028
<3028=3037,3029
<3029=3033,3030
<3030=3031
<3031=3032
<3033=3034
<3034=3036,3035
<3039=3040
<3040=3051,3050,3041
<3041=3049,3042
<3042=3044,3043
<3044=3046,3045
<3046=3048,3047
<3052=3053
<3053=3067,3054
<3054=3055
<3055=3056
<3056=3064,3057
<3057=3059,3058
<3059=3061,3060
<3061=3063,3062
<3064=3066,3065
<3067=3068
<3069=3108,3070
<3070=3086,3076,3072,3071
<3072=3073
<3073=3075,3074
<3076=3077
<3077=3079,3078
<3079=3081,3080
<3081=3083,3082
<3083=3085,3084
<3086=3087
<3087=3097,3088
<3088=3096,3089
<3089=3091,3090
<3091=3093,3092
<3093=3095,3094
<3097=3101,3098
<3098=3099
<3099=3100
<3101=3102
<3102=3104,3103
<3104=3106,3105
<3106=3107
<3108=3109
<3109=3117,3110
<3110=3112,3111
<3112=3114,3113
<3114=3116,3115
<3117=3119,3118
<3120=3127,3121
<3121=3123,3122
<3123=3124
<3124=3126,3125
<3127=3128
<3128=3138,3129
<3129=3131,3130
<3131=3133,3132
<3133=3135,3134
<3135=3137,3136
<3138=3140,3139
<3140=3142,3141
<3142=3144,3143
<3144=3146,3145
<3147=3154,3148
<3148=3150,3149
<3150=3151
<3151=3153,3152
<3154=3155
<3155=3163,3156
<3156=3158,3157
<3158=3160,3159
<3160=3162,3161
<3163=3165,3164
<3166=3167
<3167=3176,3168
<3168=3175,3169
<3169=3171,3170
<3171=3172
<3172=3174,3173
<3176=3183,3177
<3177=3179,3178
<3179=3180
<3180=3182,3181
<3184=3185
<3185=3192,3186
<3186=3188,3187
<3188=3189
<3189=3191,3190
<3193=3194
<3194=3201,3195
<3195=3197,3196
<3197=3198
<3198=3200,3199
<3202=3203
<3203=3207,3204
<3204=3205
<3205=3206
<3207=3208
<3209=3210
<3210=3214,3211
<3211=3213,3212
<3215=3216
<3216=3229,3217
<3217=3228,3218
<3218=3222,3219
<3219=3221,3220
<3222=3226,3223
<3223=3224
<3224=3225
<3226=3227
<3230=3231
<3231=3235,3232
<3232=3233
<3233=3234
<3235=3236
<3237=3238
<3238=3261,3239
<3239=3254,3247,3242,3240
<3240=3241
<3242=3243
<3243=3245,3244
<3245=3246
<3247=3248
<3248=3250,3249
<3250=3251
<3251=3253,3252
<3254=3255
<3255=3257,3256
<3257=3258
<3258=3260,3259
<3261=3262
<3263=3264
<3264=3268,3265
<3265=3266
<3266=3267
<3268=3269
<3270=3271
<3271=3275,3272
<3272=3274,3273
<3276=3277
<3277=3290,3278
<3278=3289,3279
<3279=3283,3280
<3280=3282,3281
<3283=3287,3284
<3284=3285
<3285=3286
<3287=3288
<3291=3292
<3292=3296,3293
<3293=3294
<3294=3295
<3296=3297
<3298=3561,3299
<3299=3542,3491,3474,3461,3460,3449,3401,3304,3300
<3300=3301
<3301=3303,3302
<3304=3395,3354,3305
<3305=3306
<3306=3348,3307
<3307=3347,3334,3320,3308
<3308=3309
<3309=3313,3310
<3310=3312,3311
<3313=3315,3314
<3315=3317,3316
<3317=3319,3318
<3320=3321
<3321=3332,3322
<3322=3323
<3323=3324
<3324=3331,3325
<3325=3327,3326
<3327=3328
<3328=3330,3329
<3332=3333
<3334=3335
<3335=3346,3336
<3336=3342,3337
<3337=3338
<3338=3339
<3339=3341,3340
<3342=3343
<3343=3345,3344
<3348=3349
<3349=3351,3350
<3351=3353,3352
<3354=3394,3381,3367,3355
<3355=3356
<3356=3360,3357
<3357=3359,3358
<3360=3362,3361
<3362=3364,3363
<3364=3366,3365
<3367=3368
<3368=3379,3369
<3369=3370
<3370=3371
<3371=3378,3372
<3372=3374,3373
<3374=3375
<3375=3377,3376
<3379=3380
<3381=3382
<3382=3393,3383
<3383=3389,3384
<3384=3385
<3385=3386
<3386=3388,3387
<3389=3390
<3390=3392,3391
<3395=3396
<3396=3398,3397
<3398=3400,3399
<3401=3440,3402
<3402=3418,3408,3404,3403
<3404=3405
<3405=3407,3406
<3408=3409
<3409=3411,3410
<3411=3413,3412
<3413=3415,3414
<3415=3417,3416
<3418=3419
<3419=3429,3420
<3420=3428,3421
<3421=3423,3422
<3423=3425,3424
<3425=3427,3426
<3429=3433,3430
<3430=3431
<3431=3432
<3433=3434
<3434=3436,3435
<3436=3438,3437
<3438=3439
<3440=3441
<3441=3448,3442
<3442=3444,3443
<3444=3445
<3445=3447,3446
<3449=3450
<3450=3459,3451
<3451=3455,3452
<3452=3453
<3453=3454
<3455=3456
<3456=3458,3457
<3461=3462
<3462=3473,3472,3463
<3463=3471,3464
<3464=3466,3465
<3466=3468,3467
<3468=3470,3469
<3474=3475
<3475=3489,3476
<3476=3477
<3477=3478
<3478=3486,3479
<3479=3481,3480
<3481=3483,3482
<3483=3485,3484
<3486=3488,3487
<3489=3490
<3491=3530,3492
<3492=3508,3498,3494,3493
<3494=3495
<3495=3497,3496
<3498=3499
<3499=3501,3500
<3501=3503,3502
<3503=3505,3504
<3505=3507,3506
<3508=3509
<3509=3519,3510
<3510=3518,3511
<3511=3513,3512
<3513=3515,3514
<3515=3517,3516
<3519=3523,3520
<3520=3521
<3521=3522
<3523=3524
<3524=3526,3525
<3526=3528,3527
<3528=3529
<3530=3531
<3531=3539,3532
<3532=3534,3533
<3534=3536,3535
<3536=3538,3537
<3539=3541,3540
<3542=3549,3543
<3543=3545,3544
<3545=3546
<3546=3548,3547
<3549=3550
<3550=3558,3551
<3551=3553,3552
<3553=3555,3554
<3555=3557,3556
<3558=3560,3559
<3561=3562
<3562=3571,3563
<3563=3570,3564
<3564=3566,3565
<3566=3567
<3567=3569,3568
<3571=3578,3572
<3572=3574,3573
<3574=3575
<3575=3577,3576
<3579=3580
<3580=3587,3581
<3581=3583,3582
<3583=3584
<3584=3586,3585
<3589=3590
<3590=3597,3591
<3591=3593,3592
<3593=3594
<3594=3596,3595
<3599=3600
<3600=3604,3601
<3601=3602
<3602=3603
<3604=3605
<3606=3607
<3607=3611,3608
<3608=3610,3609
<3612=3613
<3613=3626,3614
<3614=3625,3615
<3615=3619,3616
<3616=3618,3617
<3619=3623,3620
<3620=3621
<3621=3622
<3623=3624
<3627=3628
<3628=3632,3629
<3629=3630
<3630=3631
<3632=3633
<3634=3635
<3635=3658,3636
<3636=3651,3644,3639,3637
<3637=3638
<3639=3640
<3640=3642,3641
<3642=3643
<3644=3645
<3645=3647,3646
<3647=3648
<3648=3650,3649
<3651=3652
<3652=3654,3653
<3654=3655
<3655=3657,3656
<3658=3659
<3660=3661
<3661=3665,3662
<3662=3663
<3663=3664
<3665=3666
<3667=3668
<3668=3681,3669
<3669=3680,3670
<3670=3674,3671
<3671=3673,3672
<3674=3676,3675
<3676=3677
<3677=3679,3678
<3682=3683
<3683=3696,3684
<3684=3695,3685
<3685=3689,3686
<3686=3688,3687
<3689=3693,3690
<3690=3691
<3691=3692
<3693=3694
<3697=3698
<3698=3702,3699
<3699=3700
<3700=3701
<3702=3703
<3704=3705
<3705=3728,3706
<3706=3721,3714,3709,3707
<3707=3708
<3709=3710
<3710=3712,3711
<3712=3713
<3714=3715
<3715=3717,3716
<3717=3718
<3718=3720,3719
<3721=3722
<3722=3724,3723
<3724=3725
<3725=3727,3726
<3728=3729
<3730=3731
<3731=3735,3732
<3732=3733
<3733=3734
<3735=3736
<3737=3738
<3738=3742,3739
<3739=3741,3740
