>3	FunctionDef	NyARRotMatrix_ARToolKit 
>4	ParameterList	const NyARPerspectiveProjectionMatrix * i_matrix
>5	Parameter	 
>6	Identifier	i_matrix
>7	ParameterType	const NyARPerspectiveProjectionMatrix *
>8	CompoundStatement	 
>9	ReturnStatement	 
>10	ExpressionStatement	 
>11	AssignmentExpr	this -> __initRot_vec2 = new NyARRotVector ( i_matrix )
>12	Identifier	i_matrix
>13	PtrMemberAccess	this -> __initRot_vec2
>14	Identifier	__initRot_vec2
>15	Identifier	this
>16	ExpressionStatement	 
>17	AssignmentExpr	this -> __initRot_vec1 = new NyARRotVector ( i_matrix )
>18	Identifier	i_matrix
>19	PtrMemberAccess	this -> __initRot_vec1
>20	Identifier	__initRot_vec1
>21	Identifier	this
>30	FunctionDef	NyARRotMatrix_ARToolKit 
>31	ParameterList	 
>32	CompoundStatement	 
>33	ExpressionStatement	 
>34	CallExpression	NyAR_SAFE_DELETE ( this -> __initRot_vec2 )
>35	ArgumentList	this -> __initRot_vec2
>36	Argument	this -> __initRot_vec2
>37	PtrMemberAccess	this -> __initRot_vec2
>38	Identifier	__initRot_vec2
>39	Identifier	this
>40	Callee	NyAR_SAFE_DELETE
>41	Identifier	NyAR_SAFE_DELETE
>42	ExpressionStatement	 
>43	CallExpression	NyAR_SAFE_DELETE ( this -> __initRot_vec1 )
>44	ArgumentList	this -> __initRot_vec1
>45	Argument	this -> __initRot_vec1
>46	PtrMemberAccess	this -> __initRot_vec1
>47	Identifier	__initRot_vec1
>48	Identifier	this
>49	Callee	NyAR_SAFE_DELETE
>50	Identifier	NyAR_SAFE_DELETE
>58	FunctionDef	NyARRotMatrix_ARToolKit 
>59	ParameterList	const NyARTransMatResult & i_prev_result
>60	Parameter	 
>61	Identifier	i_prev_result
>62	ParameterType	const NyARTransMatResult &
>63	ReturnType	void
>64	CompoundStatement	 
>65	ReturnStatement	 
>66	ExpressionStatement	 
>67	AssignmentExpr	this -> m22 = i_prev_result . m22
>68	MemberAccess	i_prev_result . m22
>69	Identifier	m22
>70	Identifier	i_prev_result
>71	PtrMemberAccess	this -> m22
>72	Identifier	m22
>73	Identifier	this
>74	ExpressionStatement	 
>75	AssignmentExpr	this -> m21 = i_prev_result . m21
>76	MemberAccess	i_prev_result . m21
>77	Identifier	m21
>78	Identifier	i_prev_result
>79	PtrMemberAccess	this -> m21
>80	Identifier	m21
>81	Identifier	this
>82	ExpressionStatement	 
>83	AssignmentExpr	this -> m20 = i_prev_result . m20
>84	MemberAccess	i_prev_result . m20
>85	Identifier	m20
>86	Identifier	i_prev_result
>87	PtrMemberAccess	this -> m20
>88	Identifier	m20
>89	Identifier	this
>90	ExpressionStatement	 
>91	AssignmentExpr	this -> m12 = i_prev_result . m12
>92	MemberAccess	i_prev_result . m12
>93	Identifier	m12
>94	Identifier	i_prev_result
>95	PtrMemberAccess	this -> m12
>96	Identifier	m12
>97	Identifier	this
>98	ExpressionStatement	 
>99	AssignmentExpr	this -> m11 = i_prev_result . m11
>100	MemberAccess	i_prev_result . m11
>101	Identifier	m11
>102	Identifier	i_prev_result
>103	PtrMemberAccess	this -> m11
>104	Identifier	m11
>105	Identifier	this
>106	ExpressionStatement	 
>107	AssignmentExpr	this -> m10 = i_prev_result . m10
>108	MemberAccess	i_prev_result . m10
>109	Identifier	m10
>110	Identifier	i_prev_result
>111	PtrMemberAccess	this -> m10
>112	Identifier	m10
>113	Identifier	this
>114	ExpressionStatement	 
>115	AssignmentExpr	this -> m02 = i_prev_result . m02
>116	MemberAccess	i_prev_result . m02
>117	Identifier	m02
>118	Identifier	i_prev_result
>119	PtrMemberAccess	this -> m02
>120	Identifier	m02
>121	Identifier	this
>122	ExpressionStatement	 
>123	AssignmentExpr	this -> m01 = i_prev_result . m01
>124	MemberAccess	i_prev_result . m01
>125	Identifier	m01
>126	Identifier	i_prev_result
>127	PtrMemberAccess	this -> m01
>128	Identifier	m01
>129	Identifier	this
>130	ExpressionStatement	 
>131	AssignmentExpr	this -> m00 = i_prev_result . m00
>132	MemberAccess	i_prev_result . m00
>133	Identifier	m00
>134	Identifier	i_prev_result
>135	PtrMemberAccess	this -> m00
>136	Identifier	m00
>137	Identifier	this
>162	FunctionDef	NyARRotMatrix_ARToolKit 
>163	ParameterList	const TNyARLinear * i_linear [ ] , const TNyARDoublePoint2d * i_sqvertex [ ]
>164	Parameter	 
>165	Identifier	i_sqvertex
>166	ParameterType	const TNyARDoublePoint2d * [ ]
>167	Parameter	 
>168	Identifier	i_linear
>169	ParameterType	const TNyARLinear * [ ]
>170	ReturnType	void
>171	CompoundStatement	 
>172	ReturnStatement	 
>173	ExpressionStatement	 
>174	AssignmentExpr	this -> m22 = w22 / w
>175	MultiplicativeExpression	w22 / w
>176	Identifier	w
>177	Identifier	w22
>178	PtrMemberAccess	this -> m22
>179	Identifier	m22
>180	Identifier	this
>181	ExpressionStatement	 
>182	AssignmentExpr	this -> m12 = w12 / w
>183	MultiplicativeExpression	w12 / w
>184	Identifier	w
>185	Identifier	w12
>186	PtrMemberAccess	this -> m12
>187	Identifier	m12
>188	Identifier	this
>189	ExpressionStatement	 
>190	AssignmentExpr	this -> m02 = w02 / w
>191	MultiplicativeExpression	w02 / w
>192	Identifier	w
>193	Identifier	w02
>194	PtrMemberAccess	this -> m02
>195	Identifier	m02
>196	Identifier	this
>197	IdentifierDeclStatement	 
>198	IdentifierDecl	w = sqrt ( w02 * w02 + w12 * w12 + w22 * w22 )
>199	AssignmentExpr	w = sqrt ( w02 * w02 + w12 * w12 + w22 * w22 )
>200	CallExpression	sqrt ( w02 * w02 + w12 * w12 + w22 * w22 )
>201	ArgumentList	w02 * w02 + w12 * w12 + w22 * w22
>202	Argument	w02 * w02 + w12 * w12 + w22 * w22
>203	AdditiveExpression	w02 * w02 + w12 * w12 + w22 * w22
>204	AdditiveExpression	w12 * w12 + w22 * w22
>205	MultiplicativeExpression	w22 * w22
>206	Identifier	w22
>207	Identifier	w22
>208	MultiplicativeExpression	w12 * w12
>209	Identifier	w12
>210	Identifier	w12
>211	MultiplicativeExpression	w02 * w02
>212	Identifier	w02
>213	Identifier	w02
>214	Callee	sqrt
>215	Identifier	sqrt
>216	Identifier	w
>217	Identifier	w
>218	IdentifierDeclType	const double
>219	IdentifierDeclStatement	 
>220	IdentifierDecl	w22 = vec1 . v1 * vec2 . v2 - vec1 . v2 * vec2 . v1
>221	AssignmentExpr	w22 = vec1 . v1 * vec2 . v2 - vec1 . v2 * vec2 . v1
>222	AdditiveExpression	vec1 . v1 * vec2 . v2 - vec1 . v2 * vec2 . v1
>223	MultiplicativeExpression	vec1 . v2 * vec2 . v1
>224	MemberAccess	vec2 . v1
>225	Identifier	v1
>226	Identifier	vec2
>227	MemberAccess	vec1 . v2
>228	Identifier	v2
>229	Identifier	vec1
>230	MultiplicativeExpression	vec1 . v1 * vec2 . v2
>231	MemberAccess	vec2 . v2
>232	Identifier	v2
>233	Identifier	vec2
>234	MemberAccess	vec1 . v1
>235	Identifier	v1
>236	Identifier	vec1
>237	Identifier	w22
>238	Identifier	w22
>239	IdentifierDeclType	const double
>240	IdentifierDeclStatement	 
>241	IdentifierDecl	w12 = vec1 . v3 * vec2 . v1 - vec1 . v1 * vec2 . v3
>242	AssignmentExpr	w12 = vec1 . v3 * vec2 . v1 - vec1 . v1 * vec2 . v3
>243	AdditiveExpression	vec1 . v3 * vec2 . v1 - vec1 . v1 * vec2 . v3
>244	MultiplicativeExpression	vec1 . v1 * vec2 . v3
>245	MemberAccess	vec2 . v3
>246	Identifier	v3
>247	Identifier	vec2
>248	MemberAccess	vec1 . v1
>249	Identifier	v1
>250	Identifier	vec1
>251	MultiplicativeExpression	vec1 . v3 * vec2 . v1
>252	MemberAccess	vec2 . v1
>253	Identifier	v1
>254	Identifier	vec2
>255	MemberAccess	vec1 . v3
>256	Identifier	v3
>257	Identifier	vec1
>258	Identifier	w12
>259	Identifier	w12
>260	IdentifierDeclType	const double
>261	IdentifierDeclStatement	 
>262	IdentifierDecl	w02 = vec1 . v2 * vec2 . v3 - vec1 . v3 * vec2 . v2
>263	AssignmentExpr	w02 = vec1 . v2 * vec2 . v3 - vec1 . v3 * vec2 . v2
>264	AdditiveExpression	vec1 . v2 * vec2 . v3 - vec1 . v3 * vec2 . v2
>265	MultiplicativeExpression	vec1 . v3 * vec2 . v2
>266	MemberAccess	vec2 . v2
>267	Identifier	v2
>268	Identifier	vec2
>269	MemberAccess	vec1 . v3
>270	Identifier	v3
>271	Identifier	vec1
>272	MultiplicativeExpression	vec1 . v2 * vec2 . v3
>273	MemberAccess	vec2 . v3
>274	Identifier	v3
>275	Identifier	vec2
>276	MemberAccess	vec1 . v2
>277	Identifier	v2
>278	Identifier	vec1
>279	Identifier	w02
>280	Identifier	w02
>281	IdentifierDeclType	const double
>282	ExpressionStatement	 
>283	AssignmentExpr	this -> m21 = vec2 . v3
>284	MemberAccess	vec2 . v3
>285	Identifier	v3
>286	Identifier	vec2
>287	PtrMemberAccess	this -> m21
>288	Identifier	m21
>289	Identifier	this
>290	ExpressionStatement	 
>291	AssignmentExpr	this -> m11 = vec2 . v2
>292	MemberAccess	vec2 . v2
>293	Identifier	v2
>294	Identifier	vec2
>295	PtrMemberAccess	this -> m11
>296	Identifier	m11
>297	Identifier	this
>298	ExpressionStatement	 
>299	AssignmentExpr	this -> m01 = vec2 . v1
>300	MemberAccess	vec2 . v1
>301	Identifier	v1
>302	Identifier	vec2
>303	PtrMemberAccess	this -> m01
>304	Identifier	m01
>305	Identifier	this
>306	ExpressionStatement	 
>307	AssignmentExpr	this -> m20 = vec1 . v3
>308	MemberAccess	vec1 . v3
>309	Identifier	v3
>310	Identifier	vec1
>311	PtrMemberAccess	this -> m20
>312	Identifier	m20
>313	Identifier	this
>314	ExpressionStatement	 
>315	AssignmentExpr	this -> m10 = vec1 . v2
>316	MemberAccess	vec1 . v2
>317	Identifier	v2
>318	Identifier	vec1
>319	PtrMemberAccess	this -> m10
>320	Identifier	m10
>321	Identifier	this
>322	ExpressionStatement	 
>323	AssignmentExpr	this -> m00 = vec1 . v1
>324	MemberAccess	vec1 . v1
>325	Identifier	v1
>326	Identifier	vec1
>327	PtrMemberAccess	this -> m00
>328	Identifier	m00
>329	Identifier	this
>330	ExpressionStatement	 
>331	CallExpression	NyARRotVector 
>332	ArgumentList	vec1
>333	Argument	vec2
>334	Identifier	vec2
>335	Argument	vec1
>336	Identifier	vec1
>337	Callee	NyARRotVector 
>338	Identifier	NyARRotVector 
>339	ExpressionStatement	 
>340	CallExpression	vec2 . checkVectorByVertex ( * i_sqvertex [ 3 ] , * i_sqvertex [ 0 ] )
>341	ArgumentList	* i_sqvertex [ 3 ]
>342	Argument	* i_sqvertex [ 0 ]
>343	UnaryOp	* i_sqvertex [ 0 ]
>344	ArrayIndexing	i_sqvertex [ 0 ]
>345	PrimaryExpression	0
>346	Identifier	i_sqvertex
>347	UnaryOperator	*
>348	Argument	* i_sqvertex [ 3 ]
>349	UnaryOp	* i_sqvertex [ 3 ]
>350	ArrayIndexing	i_sqvertex [ 3 ]
>351	PrimaryExpression	3
>352	Identifier	i_sqvertex
>353	UnaryOperator	*
>354	Callee	vec2 . checkVectorByVertex
>355	MemberAccess	vec2 . checkVectorByVertex
>356	Identifier	checkVectorByVertex
>357	Identifier	vec2
>358	ExpressionStatement	 
>359	CallExpression	vec2 . exteriorProductFromLinear ( * i_linear [ 1 ] , * i_linear [ 3 ] )
>360	ArgumentList	* i_linear [ 1 ]
>361	Argument	* i_linear [ 3 ]
>362	UnaryOp	* i_linear [ 3 ]
>363	ArrayIndexing	i_linear [ 3 ]
>364	PrimaryExpression	3
>365	Identifier	i_linear
>366	UnaryOperator	*
>367	Argument	* i_linear [ 1 ]
>368	UnaryOp	* i_linear [ 1 ]
>369	ArrayIndexing	i_linear [ 1 ]
>370	PrimaryExpression	1
>371	Identifier	i_linear
>372	UnaryOperator	*
>373	Callee	vec2 . exteriorProductFromLinear
>374	MemberAccess	vec2 . exteriorProductFromLinear
>375	Identifier	exteriorProductFromLinear
>376	Identifier	vec2
>377	ExpressionStatement	 
>378	CallExpression	vec1 . checkVectorByVertex ( * i_sqvertex [ 0 ] , * i_sqvertex [ 1 ] )
>379	ArgumentList	* i_sqvertex [ 0 ]
>380	Argument	* i_sqvertex [ 1 ]
>381	UnaryOp	* i_sqvertex [ 1 ]
>382	ArrayIndexing	i_sqvertex [ 1 ]
>383	PrimaryExpression	1
>384	Identifier	i_sqvertex
>385	UnaryOperator	*
>386	Argument	* i_sqvertex [ 0 ]
>387	UnaryOp	* i_sqvertex [ 0 ]
>388	ArrayIndexing	i_sqvertex [ 0 ]
>389	PrimaryExpression	0
>390	Identifier	i_sqvertex
>391	UnaryOperator	*
>392	Callee	vec1 . checkVectorByVertex
>393	MemberAccess	vec1 . checkVectorByVertex
>394	Identifier	checkVectorByVertex
>395	Identifier	vec1
>396	ExpressionStatement	 
>397	CallExpression	vec1 . exteriorProductFromLinear ( * i_linear [ 0 ] , * i_linear [ 2 ] )
>398	ArgumentList	* i_linear [ 0 ]
>399	Argument	* i_linear [ 2 ]
>400	UnaryOp	* i_linear [ 2 ]
>401	ArrayIndexing	i_linear [ 2 ]
>402	PrimaryExpression	2
>403	Identifier	i_linear
>404	UnaryOperator	*
>405	Argument	* i_linear [ 0 ]
>406	UnaryOp	* i_linear [ 0 ]
>407	ArrayIndexing	i_linear [ 0 ]
>408	PrimaryExpression	0
>409	Identifier	i_linear
>410	UnaryOperator	*
>411	Callee	vec1 . exteriorProductFromLinear
>412	MemberAccess	vec1 . exteriorProductFromLinear
>413	Identifier	exteriorProductFromLinear
>414	Identifier	vec1
>415	IdentifierDeclStatement	 
>416	IdentifierDecl	& vec2 = * this -> __initRot_vec2
>417	AssignmentExpr	& vec2 = * this -> __initRot_vec2
>418	UnaryOp	* this -> __initRot_vec2
>419	PtrMemberAccess	this -> __initRot_vec2
>420	Identifier	__initRot_vec2
>421	Identifier	this
>422	UnaryOperator	*
>423	Identifier	vec2
>424	Identifier	vec2
>425	IdentifierDeclType	NyARRotVector &
>426	IdentifierDeclStatement	 
>427	IdentifierDecl	& vec1 = * this -> __initRot_vec1
>428	AssignmentExpr	& vec1 = * this -> __initRot_vec1
>429	UnaryOp	* this -> __initRot_vec1
>430	PtrMemberAccess	this -> __initRot_vec1
>431	Identifier	__initRot_vec1
>432	Identifier	this
>433	UnaryOperator	*
>434	Identifier	vec1
>435	Identifier	vec1
>436	IdentifierDeclType	NyARRotVector &
>482	FunctionDef	NyARRotMatrix_ARToolKit 
>483	ParameterList	TNyARDoublePoint3d & o_angle
>484	Parameter	 
>485	Identifier	o_angle
>486	ParameterType	TNyARDoublePoint3d &
>487	ReturnType	void
>488	CompoundStatement	 
>489	ReturnStatement	 
>490	ExpressionStatement	 
>491	AssignmentExpr	o_angle . z = c
>492	Identifier	c
>493	MemberAccess	o_angle . z
>494	Identifier	z
>495	Identifier	o_angle
>496	ExpressionStatement	 
>497	AssignmentExpr	o_angle . y = b
>498	Identifier	b
>499	MemberAccess	o_angle . y
>500	Identifier	y
>501	Identifier	o_angle
>502	ExpressionStatement	 
>503	AssignmentExpr	o_angle . x = a
>504	Identifier	a
>505	MemberAccess	o_angle . x
>506	Identifier	x
>507	Identifier	o_angle
>508	IfStatement	if ( b >= 0.000001 || b <= - 0.000001 )
>509	ElseStatement	else
>510	CompoundStatement	 
>511	IfStatement	if ( sinc < 0 )
>512	CompoundStatement	 
>513	ExpressionStatement	 
>514	AssignmentExpr	c = - c
>515	UnaryOp	- c
>516	Identifier	c
>517	UnaryOperator	-
>518	Identifier	c
>519	Condition	 
>520	RelationalExpression	sinc < 0
>521	PrimaryExpression	0
>522	Identifier	sinc
>523	ExpressionStatement	 
>524	AssignmentExpr	c = acos ( cosc )
>525	CallExpression	acos ( cosc )
>526	ArgumentList	cosc
>527	Argument	cosc
>528	Identifier	cosc
>529	Callee	acos
>530	Identifier	acos
>531	Identifier	c
>532	IfStatement	if ( sinc < - 1.0 )
>533	CompoundStatement	 
>534	ExpressionStatement	 
>535	AssignmentExpr	cosc = 0.0
>536	PrimaryExpression	0.0
>537	Identifier	cosc
>538	ExpressionStatement	 
>539	AssignmentExpr	sinc = - 1.0
>540	UnaryOp	- 1.0
>541	PrimaryExpression	1.0
>542	UnaryOperator	-
>543	Identifier	sinc
>544	Condition	 
>545	RelationalExpression	sinc < - 1.0
>546	UnaryOp	- 1.0
>547	PrimaryExpression	1.0
>548	UnaryOperator	-
>549	Identifier	sinc
>550	IfStatement	if ( sinc > 1.0 )
>551	CompoundStatement	 
>552	ExpressionStatement	 
>553	AssignmentExpr	cosc = 0.0
>554	PrimaryExpression	0.0
>555	Identifier	cosc
>556	ExpressionStatement	 
>557	AssignmentExpr	sinc = 1.0
>558	PrimaryExpression	1.0
>559	Identifier	sinc
>560	Condition	 
>561	RelationalExpression	sinc > 1.0
>562	PrimaryExpression	1.0
>563	Identifier	sinc
>564	IfStatement	if ( cosc < - 1.0 )
>565	CompoundStatement	 
>566	ExpressionStatement	 
>567	AssignmentExpr	sinc = 0.0
>568	PrimaryExpression	0.0
>569	Identifier	sinc
>570	ExpressionStatement	 
>571	AssignmentExpr	cosc = - 1.0
>572	UnaryOp	- 1.0
>573	PrimaryExpression	1.0
>574	UnaryOperator	-
>575	Identifier	cosc
>576	Condition	 
>577	RelationalExpression	cosc < - 1.0
>578	UnaryOp	- 1.0
>579	PrimaryExpression	1.0
>580	UnaryOperator	-
>581	Identifier	cosc
>582	IfStatement	if ( cosc > 1.0 )
>583	CompoundStatement	 
>584	ExpressionStatement	 
>585	AssignmentExpr	sinc = 0.0
>586	PrimaryExpression	0.0
>587	Identifier	sinc
>588	ExpressionStatement	 
>589	AssignmentExpr	cosc = 1.0
>590	PrimaryExpression	1.0
>591	Identifier	cosc
>592	Condition	 
>593	RelationalExpression	cosc > 1.0
>594	PrimaryExpression	1.0
>595	Identifier	cosc
>596	ExpressionStatement	 
>597	AssignmentExpr	sinc = this -> m01
>598	PtrMemberAccess	this -> m01
>599	Identifier	m01
>600	Identifier	this
>601	Identifier	sinc
>602	ExpressionStatement	 
>603	AssignmentExpr	cosc = this -> m00
>604	PtrMemberAccess	this -> m00
>605	Identifier	m00
>606	Identifier	this
>607	Identifier	cosc
>608	ExpressionStatement	 
>609	AssignmentExpr	sina = sinb = 0.0
>610	AssignmentExpr	sinb = 0.0
>611	PrimaryExpression	0.0
>612	Identifier	sinb
>613	Identifier	sina
>614	ExpressionStatement	 
>615	AssignmentExpr	cosa = cosb = 1.0
>616	AssignmentExpr	cosb = 1.0
>617	PrimaryExpression	1.0
>618	Identifier	cosb
>619	Identifier	cosa
>620	ExpressionStatement	 
>621	AssignmentExpr	a = b = 0.0
>622	AssignmentExpr	b = 0.0
>623	PrimaryExpression	0.0
>624	Identifier	b
>625	Identifier	a
>626	CompoundStatement	 
>627	IfStatement	if ( sinc < 0 )
>628	CompoundStatement	 
>629	ExpressionStatement	 
>630	AssignmentExpr	c = - c
>631	UnaryOp	- c
>632	Identifier	c
>633	UnaryOperator	-
>634	Identifier	c
>635	Condition	 
>636	RelationalExpression	sinc < 0
>637	PrimaryExpression	0
>638	Identifier	sinc
>639	ExpressionStatement	 
>640	AssignmentExpr	c = acos ( cosc )
>641	CallExpression	acos ( cosc )
>642	ArgumentList	cosc
>643	Argument	cosc
>644	Identifier	cosc
>645	Callee	acos
>646	Identifier	acos
>647	Identifier	c
>648	IfStatement	if ( sinc < - 1.0 )
>649	CompoundStatement	 
>650	ExpressionStatement	 
>651	AssignmentExpr	cosc = 0.0
>652	PrimaryExpression	0.0
>653	Identifier	cosc
>654	ExpressionStatement	 
>655	AssignmentExpr	sinc = - 1.0
>656	UnaryOp	- 1.0
>657	PrimaryExpression	1.0
>658	UnaryOperator	-
>659	Identifier	sinc
>660	Condition	 
>661	RelationalExpression	sinc < - 1.0
>662	UnaryOp	- 1.0
>663	PrimaryExpression	1.0
>664	UnaryOperator	-
>665	Identifier	sinc
>666	IfStatement	if ( sinc > 1.0 )
>667	CompoundStatement	 
>668	ExpressionStatement	 
>669	AssignmentExpr	cosc = 0.0
>670	PrimaryExpression	0.0
>671	Identifier	cosc
>672	ExpressionStatement	 
>673	AssignmentExpr	sinc = 1.0
>674	PrimaryExpression	1.0
>675	Identifier	sinc
>676	Condition	 
>677	RelationalExpression	sinc > 1.0
>678	PrimaryExpression	1.0
>679	Identifier	sinc
>680	IfStatement	if ( cosc < - 1.0 )
>681	CompoundStatement	 
>682	ExpressionStatement	 
>683	AssignmentExpr	sinc = 0.0
>684	PrimaryExpression	0.0
>685	Identifier	sinc
>686	ExpressionStatement	 
>687	AssignmentExpr	cosc = - 1.0
>688	UnaryOp	- 1.0
>689	PrimaryExpression	1.0
>690	UnaryOperator	-
>691	Identifier	cosc
>692	Condition	 
>693	RelationalExpression	cosc < - 1.0
>694	UnaryOp	- 1.0
>695	PrimaryExpression	1.0
>696	UnaryOperator	-
>697	Identifier	cosc
>698	IfStatement	if ( cosc > 1.0 )
>699	CompoundStatement	 
>700	ExpressionStatement	 
>701	AssignmentExpr	sinc = 0.0
>702	PrimaryExpression	0.0
>703	Identifier	sinc
>704	ExpressionStatement	 
>705	AssignmentExpr	cosc = 1.0
>706	PrimaryExpression	1.0
>707	Identifier	cosc
>708	Condition	 
>709	RelationalExpression	cosc > 1.0
>710	PrimaryExpression	1.0
>711	Identifier	cosc
>712	ExpressionStatement	 
>713	AssignmentExpr	cosc = - ( rot02 * this -> m20 + rot12 * this -> m21 ) / tmp
>714	MultiplicativeExpression	- ( rot02 * this -> m20 + rot12 * this -> m21 ) / tmp
>715	Identifier	tmp
>716	UnaryOp	- ( rot02 * this -> m20 + rot12 * this -> m21 )
>717	AdditiveExpression	rot02 * this -> m20 + rot12 * this -> m21
>718	MultiplicativeExpression	rot12 * this -> m21
>719	PtrMemberAccess	this -> m21
>720	Identifier	m21
>721	Identifier	this
>722	Identifier	rot12
>723	MultiplicativeExpression	rot02 * this -> m20
>724	PtrMemberAccess	this -> m20
>725	Identifier	m20
>726	Identifier	this
>727	Identifier	rot02
>728	UnaryOperator	-
>729	Identifier	cosc
>730	ExpressionStatement	 
>731	AssignmentExpr	sinc = ( this -> m21 * rot02 - this -> m20 * rot12 ) / tmp
>732	MultiplicativeExpression	( this -> m21 * rot02 - this -> m20 * rot12 ) / tmp
>733	Identifier	tmp
>734	AdditiveExpression	this -> m21 * rot02 - this -> m20 * rot12
>735	MultiplicativeExpression	this -> m20 * rot12
>736	Identifier	rot12
>737	PtrMemberAccess	this -> m20
>738	Identifier	m20
>739	Identifier	this
>740	MultiplicativeExpression	this -> m21 * rot02
>741	Identifier	rot02
>742	PtrMemberAccess	this -> m21
>743	Identifier	m21
>744	Identifier	this
>745	Identifier	sinc
>746	IdentifierDeclStatement	 
>747	IdentifierDecl	tmp = ( rot02 * rot02 + rot12 * rot12 )
>748	AssignmentExpr	tmp = ( rot02 * rot02 + rot12 * rot12 )
>749	AdditiveExpression	rot02 * rot02 + rot12 * rot12
>750	MultiplicativeExpression	rot12 * rot12
>751	Identifier	rot12
>752	Identifier	rot12
>753	MultiplicativeExpression	rot02 * rot02
>754	Identifier	rot02
>755	Identifier	rot02
>756	Identifier	tmp
>757	Identifier	tmp
>758	IdentifierDeclType	const double
>759	IfStatement	if ( sina < 0 )
>760	CompoundStatement	 
>761	ExpressionStatement	 
>762	AssignmentExpr	a = - a
>763	UnaryOp	- a
>764	Identifier	a
>765	UnaryOperator	-
>766	Identifier	a
>767	Condition	 
>768	RelationalExpression	sina < 0
>769	PrimaryExpression	0
>770	Identifier	sina
>771	ExpressionStatement	 
>772	AssignmentExpr	a = acos ( cosa )
>773	CallExpression	acos ( cosa )
>774	ArgumentList	cosa
>775	Argument	cosa
>776	Identifier	cosa
>777	Callee	acos
>778	Identifier	acos
>779	Identifier	a
>780	IfStatement	if ( sina < - 1.0 )
>781	CompoundStatement	 
>782	ExpressionStatement	 
>783	AssignmentExpr	cosa = 0.0
>784	PrimaryExpression	0.0
>785	Identifier	cosa
>786	ExpressionStatement	 
>787	AssignmentExpr	sina = - 1.0
>788	UnaryOp	- 1.0
>789	PrimaryExpression	1.0
>790	UnaryOperator	-
>791	Identifier	sina
>792	Condition	 
>793	RelationalExpression	sina < - 1.0
>794	UnaryOp	- 1.0
>795	PrimaryExpression	1.0
>796	UnaryOperator	-
>797	Identifier	sina
>798	IfStatement	if ( sina > 1.0 )
>799	CompoundStatement	 
>800	ExpressionStatement	 
>801	AssignmentExpr	cosa = 0.0
>802	PrimaryExpression	0.0
>803	Identifier	cosa
>804	ExpressionStatement	 
>805	AssignmentExpr	sina = 1.0
>806	PrimaryExpression	1.0
>807	Identifier	sina
>808	Condition	 
>809	RelationalExpression	sina > 1.0
>810	PrimaryExpression	1.0
>811	Identifier	sina
>812	IfStatement	if ( cosa < - 1.0 )
>813	CompoundStatement	 
>814	ExpressionStatement	 
>815	AssignmentExpr	sina = 0.0
>816	PrimaryExpression	0.0
>817	Identifier	sina
>818	ExpressionStatement	 
>819	AssignmentExpr	cosa = - 1.0
>820	UnaryOp	- 1.0
>821	PrimaryExpression	1.0
>822	UnaryOperator	-
>823	Identifier	cosa
>824	Condition	 
>825	RelationalExpression	cosa < - 1.0
>826	UnaryOp	- 1.0
>827	PrimaryExpression	1.0
>828	UnaryOperator	-
>829	Identifier	cosa
>830	IfStatement	if ( cosa > 1.0 )
>831	CompoundStatement	 
>832	ExpressionStatement	 
>833	AssignmentExpr	sina = 0.0
>834	PrimaryExpression	0.0
>835	Identifier	sina
>836	ExpressionStatement	 
>837	AssignmentExpr	cosa = 1.0
>838	PrimaryExpression	1.0
>839	Identifier	cosa
>840	Condition	 
>841	RelationalExpression	cosa > 1.0
>842	PrimaryExpression	1.0
>843	Identifier	cosa
>844	ExpressionStatement	 
>845	AssignmentExpr	sina = rot12 / sinb
>846	MultiplicativeExpression	rot12 / sinb
>847	Identifier	sinb
>848	Identifier	rot12
>849	Identifier	sina
>850	ExpressionStatement	 
>851	AssignmentExpr	cosa = rot02 / sinb
>852	MultiplicativeExpression	rot02 / sinb
>853	Identifier	sinb
>854	Identifier	rot02
>855	Identifier	cosa
>856	Condition	 
>857	OrExpression	b >= 0.000001 || b <= - 0.000001
>858	RelationalExpression	b <= - 0.000001
>859	UnaryOp	- 0.000001
>860	PrimaryExpression	0.000001
>861	UnaryOperator	-
>862	Identifier	b
>863	RelationalExpression	b >= 0.000001
>864	PrimaryExpression	0.000001
>865	Identifier	b
>866	IdentifierDeclStatement	 
>867	IdentifierDecl	rot12 = this -> m12
>868	AssignmentExpr	rot12 = this -> m12
>869	PtrMemberAccess	this -> m12
>870	Identifier	m12
>871	Identifier	this
>872	Identifier	rot12
>873	Identifier	rot12
>874	IdentifierDeclType	const double
>875	IdentifierDeclStatement	 
>876	IdentifierDecl	rot02 = this -> m02
>877	AssignmentExpr	rot02 = this -> m02
>878	PtrMemberAccess	this -> m02
>879	Identifier	m02
>880	Identifier	this
>881	Identifier	rot02
>882	Identifier	rot02
>883	IdentifierDeclType	const double
>884	ExpressionStatement	 
>885	AssignmentExpr	sinb = sin ( b )
>886	CallExpression	sin ( b )
>887	ArgumentList	b
>888	Argument	b
>889	Identifier	b
>890	Callee	sin
>891	Identifier	sin
>892	Identifier	sinb
>893	ExpressionStatement	 
>894	AssignmentExpr	b = acos ( cosb )
>895	CallExpression	acos ( cosb )
>896	ArgumentList	cosb
>897	Argument	cosb
>898	Identifier	cosb
>899	Callee	acos
>900	Identifier	acos
>901	Identifier	b
>902	IfStatement	if ( this -> m22 > 1.0 )
>903	ElseStatement	else
>904	IfStatement	if ( this -> m22 < - 1.0 )
>905	ElseStatement	else
>906	CompoundStatement	 
>907	ExpressionStatement	 
>908	AssignmentExpr	cosb = this -> m22
>909	PtrMemberAccess	this -> m22
>910	Identifier	m22
>911	Identifier	this
>912	Identifier	cosb
>913	CompoundStatement	 
>914	ExpressionStatement	 
>915	AssignmentExpr	cosb = - 1.0
>916	UnaryOp	- 1.0
>917	PrimaryExpression	1.0
>918	UnaryOperator	-
>919	Identifier	cosb
>920	Condition	 
>921	RelationalExpression	this -> m22 < - 1.0
>922	UnaryOp	- 1.0
>923	PrimaryExpression	1.0
>924	UnaryOperator	-
>925	PtrMemberAccess	this -> m22
>926	Identifier	m22
>927	Identifier	this
>928	CompoundStatement	 
>929	ExpressionStatement	 
>930	AssignmentExpr	cosb = 1.0
>931	PrimaryExpression	1.0
>932	Identifier	cosb
>933	Condition	 
>934	RelationalExpression	this -> m22 > 1.0
>935	PrimaryExpression	1.0
>936	PtrMemberAccess	this -> m22
>937	Identifier	m22
>938	Identifier	this
>939	IdentifierDeclStatement	 
>940	IdentifierDecl	cosc
>941	Identifier	cosc
>942	IdentifierDeclType	double
>943	IdentifierDecl	sinc
>944	Identifier	sinc
>945	IdentifierDeclType	double
>946	IdentifierDecl	cosb
>947	Identifier	cosb
>948	IdentifierDeclType	double
>949	IdentifierDecl	sinb
>950	Identifier	sinb
>951	IdentifierDeclType	double
>952	IdentifierDecl	cosa
>953	Identifier	cosa
>954	IdentifierDeclType	double
>955	IdentifierDecl	sina
>956	Identifier	sina
>957	IdentifierDeclType	double
>958	IdentifierDeclStatement	 
>959	IdentifierDecl	c
>960	Identifier	c
>961	IdentifierDeclType	double
>962	IdentifierDecl	b
>963	Identifier	b
>964	IdentifierDeclType	double
>965	IdentifierDecl	a
>966	Identifier	a
>967	IdentifierDeclType	double
>998	FunctionDef	NyARRotMatrix_ARToolKit 
>999	ParameterList	double i_x , double i_y , double i_z
>1000	Parameter	 
>1001	Identifier	i_z
>1002	ParameterType	double
>1003	Parameter	 
>1004	Identifier	i_y
>1005	ParameterType	double
>1006	Parameter	 
>1007	Identifier	i_x
>1008	ParameterType	double
>1009	ReturnType	void
>1010	CompoundStatement	 
>1011	ReturnStatement	 
>1012	ExpressionStatement	 
>1013	AssignmentExpr	this -> m22 = cosb
>1014	Identifier	cosb
>1015	PtrMemberAccess	this -> m22
>1016	Identifier	m22
>1017	Identifier	this
>1018	ExpressionStatement	 
>1019	AssignmentExpr	this -> m21 = CASB * sinc - SASB * cosc
>1020	AdditiveExpression	CASB * sinc - SASB * cosc
>1021	MultiplicativeExpression	SASB * cosc
>1022	Identifier	cosc
>1023	Identifier	SASB
>1024	MultiplicativeExpression	CASB * sinc
>1025	Identifier	sinc
>1026	Identifier	CASB
>1027	PtrMemberAccess	this -> m21
>1028	Identifier	m21
>1029	Identifier	this
>1030	ExpressionStatement	 
>1031	AssignmentExpr	this -> m20 = - CASB * cosc - SASB * sinc
>1032	AdditiveExpression	- CASB * cosc - SASB * sinc
>1033	MultiplicativeExpression	SASB * sinc
>1034	Identifier	sinc
>1035	Identifier	SASB
>1036	MultiplicativeExpression	- CASB * cosc
>1037	Identifier	cosc
>1038	UnaryOp	- CASB
>1039	Identifier	CASB
>1040	UnaryOperator	-
>1041	PtrMemberAccess	this -> m20
>1042	Identifier	m20
>1043	Identifier	this
>1044	ExpressionStatement	 
>1045	AssignmentExpr	this -> m12 = SASB
>1046	Identifier	SASB
>1047	PtrMemberAccess	this -> m12
>1048	Identifier	m12
>1049	Identifier	this
>1050	ExpressionStatement	 
>1051	AssignmentExpr	this -> m11 = - SACACB * sinc + SACA * sinc + SASA * cosb * cosc + CACA * cosc
>1052	AdditiveExpression	- SACACB * sinc + SACA * sinc + SASA * cosb * cosc + CACA * cosc
>1053	AdditiveExpression	SACA * sinc + SASA * cosb * cosc + CACA * cosc
>1054	AdditiveExpression	SASA * cosb * cosc + CACA * cosc
>1055	MultiplicativeExpression	CACA * cosc
>1056	Identifier	cosc
>1057	Identifier	CACA
>1058	MultiplicativeExpression	SASA * cosb * cosc
>1059	MultiplicativeExpression	cosb * cosc
>1060	Identifier	cosc
>1061	Identifier	cosb
>1062	Identifier	SASA
>1063	MultiplicativeExpression	SACA * sinc
>1064	Identifier	sinc
>1065	Identifier	SACA
>1066	MultiplicativeExpression	- SACACB * sinc
>1067	Identifier	sinc
>1068	UnaryOp	- SACACB
>1069	Identifier	SACACB
>1070	UnaryOperator	-
>1071	PtrMemberAccess	this -> m11
>1072	Identifier	m11
>1073	Identifier	this
>1074	ExpressionStatement	 
>1075	AssignmentExpr	this -> m10 = SACACB * cosc - SACA * cosc + SASA * cosb * sinc + CACA * sinc
>1076	AdditiveExpression	SACACB * cosc - SACA * cosc + SASA * cosb * sinc + CACA * sinc
>1077	AdditiveExpression	SACA * cosc + SASA * cosb * sinc + CACA * sinc
>1078	AdditiveExpression	SASA * cosb * sinc + CACA * sinc
>1079	MultiplicativeExpression	CACA * sinc
>1080	Identifier	sinc
>1081	Identifier	CACA
>1082	MultiplicativeExpression	SASA * cosb * sinc
>1083	MultiplicativeExpression	cosb * sinc
>1084	Identifier	sinc
>1085	Identifier	cosb
>1086	Identifier	SASA
>1087	MultiplicativeExpression	SACA * cosc
>1088	Identifier	cosc
>1089	Identifier	SACA
>1090	MultiplicativeExpression	SACACB * cosc
>1091	Identifier	cosc
>1092	Identifier	SACACB
>1093	PtrMemberAccess	this -> m10
>1094	Identifier	m10
>1095	Identifier	this
>1096	ExpressionStatement	 
>1097	AssignmentExpr	this -> m02 = CASB
>1098	Identifier	CASB
>1099	PtrMemberAccess	this -> m02
>1100	Identifier	m02
>1101	Identifier	this
>1102	ExpressionStatement	 
>1103	AssignmentExpr	this -> m01 = - CACA * cosb * sinc - SASA * sinc + SACACB * cosc - SACA * cosc
>1104	AdditiveExpression	- CACA * cosb * sinc - SASA * sinc + SACACB * cosc - SACA * cosc
>1105	AdditiveExpression	SASA * sinc + SACACB * cosc - SACA * cosc
>1106	AdditiveExpression	SACACB * cosc - SACA * cosc
>1107	MultiplicativeExpression	SACA * cosc
>1108	Identifier	cosc
>1109	Identifier	SACA
>1110	MultiplicativeExpression	SACACB * cosc
>1111	Identifier	cosc
>1112	Identifier	SACACB
>1113	MultiplicativeExpression	SASA * sinc
>1114	Identifier	sinc
>1115	Identifier	SASA
>1116	MultiplicativeExpression	- CACA * cosb * sinc
>1117	MultiplicativeExpression	cosb * sinc
>1118	Identifier	sinc
>1119	Identifier	cosb
>1120	UnaryOp	- CACA
>1121	Identifier	CACA
>1122	UnaryOperator	-
>1123	PtrMemberAccess	this -> m01
>1124	Identifier	m01
>1125	Identifier	this
>1126	ExpressionStatement	 
>1127	AssignmentExpr	this -> m00 = CACA * cosb * cosc + SASA * cosc + SACACB * sinc - SACA * sinc
>1128	AdditiveExpression	CACA * cosb * cosc + SASA * cosc + SACACB * sinc - SACA * sinc
>1129	AdditiveExpression	SASA * cosc + SACACB * sinc - SACA * sinc
>1130	AdditiveExpression	SACACB * sinc - SACA * sinc
>1131	MultiplicativeExpression	SACA * sinc
>1132	Identifier	sinc
>1133	Identifier	SACA
>1134	MultiplicativeExpression	SACACB * sinc
>1135	Identifier	sinc
>1136	Identifier	SACACB
>1137	MultiplicativeExpression	SASA * cosc
>1138	Identifier	cosc
>1139	Identifier	SASA
>1140	MultiplicativeExpression	CACA * cosb * cosc
>1141	MultiplicativeExpression	cosb * cosc
>1142	Identifier	cosc
>1143	Identifier	cosb
>1144	Identifier	CACA
>1145	PtrMemberAccess	this -> m00
>1146	Identifier	m00
>1147	Identifier	this
>1148	IdentifierDeclStatement	 
>1149	IdentifierDecl	SACACB = SACA * cosb
>1150	AssignmentExpr	SACACB = SACA * cosb
>1151	MultiplicativeExpression	SACA * cosb
>1152	Identifier	cosb
>1153	Identifier	SACA
>1154	Identifier	SACACB
>1155	Identifier	SACACB
>1156	IdentifierDeclType	const double
>1157	IdentifierDeclStatement	 
>1158	IdentifierDecl	CASB = cosa * sinb
>1159	AssignmentExpr	CASB = cosa * sinb
>1160	MultiplicativeExpression	cosa * sinb
>1161	Identifier	sinb
>1162	Identifier	cosa
>1163	Identifier	CASB
>1164	Identifier	CASB
>1165	IdentifierDeclType	const double
>1166	IdentifierDeclStatement	 
>1167	IdentifierDecl	SASB = sina * sinb
>1168	AssignmentExpr	SASB = sina * sinb
>1169	MultiplicativeExpression	sina * sinb
>1170	Identifier	sinb
>1171	Identifier	sina
>1172	Identifier	SASB
>1173	Identifier	SASB
>1174	IdentifierDeclType	const double
>1175	IdentifierDeclStatement	 
>1176	IdentifierDecl	SACA = sina * cosa
>1177	AssignmentExpr	SACA = sina * cosa
>1178	MultiplicativeExpression	sina * cosa
>1179	Identifier	cosa
>1180	Identifier	sina
>1181	Identifier	SACA
>1182	Identifier	SACA
>1183	IdentifierDeclType	const double
>1184	IdentifierDeclStatement	 
>1185	IdentifierDecl	SASA = sina * sina
>1186	AssignmentExpr	SASA = sina * sina
>1187	MultiplicativeExpression	sina * sina
>1188	Identifier	sina
>1189	Identifier	sina
>1190	Identifier	SASA
>1191	Identifier	SASA
>1192	IdentifierDeclType	const double
>1193	IdentifierDeclStatement	 
>1194	IdentifierDecl	CACA = cosa * cosa
>1195	AssignmentExpr	CACA = cosa * cosa
>1196	MultiplicativeExpression	cosa * cosa
>1197	Identifier	cosa
>1198	Identifier	cosa
>1199	Identifier	CACA
>1200	Identifier	CACA
>1201	IdentifierDeclType	const double
>1202	IdentifierDeclStatement	 
>1203	IdentifierDecl	cosc = cos ( i_z )
>1204	AssignmentExpr	cosc = cos ( i_z )
>1205	CallExpression	cos ( i_z )
>1206	ArgumentList	i_z
>1207	Argument	i_z
>1208	Identifier	i_z
>1209	Callee	cos
>1210	Identifier	cos
>1211	Identifier	cosc
>1212	Identifier	cosc
>1213	IdentifierDeclType	const double
>1214	IdentifierDeclStatement	 
>1215	IdentifierDecl	sinc = sin ( i_z )
>1216	AssignmentExpr	sinc = sin ( i_z )
>1217	CallExpression	sin ( i_z )
>1218	ArgumentList	i_z
>1219	Argument	i_z
>1220	Identifier	i_z
>1221	Callee	sin
>1222	Identifier	sin
>1223	Identifier	sinc
>1224	Identifier	sinc
>1225	IdentifierDeclType	const double
>1226	IdentifierDeclStatement	 
>1227	IdentifierDecl	cosb = cos ( i_y )
>1228	AssignmentExpr	cosb = cos ( i_y )
>1229	CallExpression	cos ( i_y )
>1230	ArgumentList	i_y
>1231	Argument	i_y
>1232	Identifier	i_y
>1233	Callee	cos
>1234	Identifier	cos
>1235	Identifier	cosb
>1236	Identifier	cosb
>1237	IdentifierDeclType	const double
>1238	IdentifierDeclStatement	 
>1239	IdentifierDecl	sinb = sin ( i_y )
>1240	AssignmentExpr	sinb = sin ( i_y )
>1241	CallExpression	sin ( i_y )
>1242	ArgumentList	i_y
>1243	Argument	i_y
>1244	Identifier	i_y
>1245	Callee	sin
>1246	Identifier	sin
>1247	Identifier	sinb
>1248	Identifier	sinb
>1249	IdentifierDeclType	const double
>1250	IdentifierDeclStatement	 
>1251	IdentifierDecl	cosa = cos ( i_x )
>1252	AssignmentExpr	cosa = cos ( i_x )
>1253	CallExpression	cos ( i_x )
>1254	ArgumentList	i_x
>1255	Argument	i_x
>1256	Identifier	i_x
>1257	Callee	cos
>1258	Identifier	cos
>1259	Identifier	cosa
>1260	Identifier	cosa
>1261	IdentifierDeclType	const double
>1262	IdentifierDeclStatement	 
>1263	IdentifierDecl	sina = sin ( i_x )
>1264	AssignmentExpr	sina = sin ( i_x )
>1265	CallExpression	sin ( i_x )
>1266	ArgumentList	i_x
>1267	Argument	i_x
>1268	Identifier	i_x
>1269	Callee	sin
>1270	Identifier	sin
>1271	Identifier	sina
>1272	Identifier	sina
>1273	IdentifierDeclType	const double
>1305	FunctionDef	NyARRotMatrix_ARToolKit 
>1306	ParameterList	const TNyARDoublePoint3d & i_in_point , TNyARDoublePoint3d & i_out_point
>1307	Parameter	 
>1308	Identifier	i_out_point
>1309	ParameterType	TNyARDoublePoint3d &
>1310	Parameter	 
>1311	Identifier	i_in_point
>1312	ParameterType	const TNyARDoublePoint3d &
>1313	ReturnType	void
>1314	CompoundStatement	 
>1315	ReturnStatement	 
>1316	ExpressionStatement	 
>1317	AssignmentExpr	i_out_point . z = this -> m20 * x + this -> m21 * y + this -> m22 * z
>1318	AdditiveExpression	this -> m20 * x + this -> m21 * y + this -> m22 * z
>1319	AdditiveExpression	this -> m21 * y + this -> m22 * z
>1320	MultiplicativeExpression	this -> m22 * z
>1321	Identifier	z
>1322	PtrMemberAccess	this -> m22
>1323	Identifier	m22
>1324	Identifier	this
>1325	MultiplicativeExpression	this -> m21 * y
>1326	Identifier	y
>1327	PtrMemberAccess	this -> m21
>1328	Identifier	m21
>1329	Identifier	this
>1330	MultiplicativeExpression	this -> m20 * x
>1331	Identifier	x
>1332	PtrMemberAccess	this -> m20
>1333	Identifier	m20
>1334	Identifier	this
>1335	MemberAccess	i_out_point . z
>1336	Identifier	z
>1337	Identifier	i_out_point
>1338	ExpressionStatement	 
>1339	AssignmentExpr	i_out_point . y = this -> m10 * x + this -> m11 * y + this -> m12 * z
>1340	AdditiveExpression	this -> m10 * x + this -> m11 * y + this -> m12 * z
>1341	AdditiveExpression	this -> m11 * y + this -> m12 * z
>1342	MultiplicativeExpression	this -> m12 * z
>1343	Identifier	z
>1344	PtrMemberAccess	this -> m12
>1345	Identifier	m12
>1346	Identifier	this
>1347	MultiplicativeExpression	this -> m11 * y
>1348	Identifier	y
>1349	PtrMemberAccess	this -> m11
>1350	Identifier	m11
>1351	Identifier	this
>1352	MultiplicativeExpression	this -> m10 * x
>1353	Identifier	x
>1354	PtrMemberAccess	this -> m10
>1355	Identifier	m10
>1356	Identifier	this
>1357	MemberAccess	i_out_point . y
>1358	Identifier	y
>1359	Identifier	i_out_point
>1360	ExpressionStatement	 
>1361	AssignmentExpr	i_out_point . x = this -> m00 * x + this -> m01 * y + this -> m02 * z
>1362	AdditiveExpression	this -> m00 * x + this -> m01 * y + this -> m02 * z
>1363	AdditiveExpression	this -> m01 * y + this -> m02 * z
>1364	MultiplicativeExpression	this -> m02 * z
>1365	Identifier	z
>1366	PtrMemberAccess	this -> m02
>1367	Identifier	m02
>1368	Identifier	this
>1369	MultiplicativeExpression	this -> m01 * y
>1370	Identifier	y
>1371	PtrMemberAccess	this -> m01
>1372	Identifier	m01
>1373	Identifier	this
>1374	MultiplicativeExpression	this -> m00 * x
>1375	Identifier	x
>1376	PtrMemberAccess	this -> m00
>1377	Identifier	m00
>1378	Identifier	this
>1379	MemberAccess	i_out_point . x
>1380	Identifier	x
>1381	Identifier	i_out_point
>1382	IdentifierDeclStatement	 
>1383	IdentifierDecl	z = i_in_point . z
>1384	AssignmentExpr	z = i_in_point . z
>1385	MemberAccess	i_in_point . z
>1386	Identifier	z
>1387	Identifier	i_in_point
>1388	Identifier	z
>1389	Identifier	z
>1390	IdentifierDeclType	const double
>1391	IdentifierDeclStatement	 
>1392	IdentifierDecl	y = i_in_point . y
>1393	AssignmentExpr	y = i_in_point . y
>1394	MemberAccess	i_in_point . y
>1395	Identifier	y
>1396	Identifier	i_in_point
>1397	Identifier	y
>1398	Identifier	y
>1399	IdentifierDeclType	const double
>1400	IdentifierDeclStatement	 
>1401	IdentifierDecl	x = i_in_point . x
>1402	AssignmentExpr	x = i_in_point . x
>1403	MemberAccess	i_in_point . x
>1404	Identifier	x
>1405	Identifier	i_in_point
>1406	Identifier	x
>1407	Identifier	x
>1408	IdentifierDeclType	const double
>1434	FunctionDef	NyARRotMatrix_ARToolKit 
>1435	ParameterList	const TNyARDoublePoint3d i_in_point [ ] , TNyARDoublePoint3d i_out_point [ ] , int i_number_of_vertex
>1436	Parameter	 
>1437	Identifier	i_number_of_vertex
>1438	ParameterType	int
>1439	Parameter	 
>1440	Identifier	i_out_point
>1441	ParameterType	TNyARDoublePoint3d [ ]
>1442	Parameter	 
>1443	Identifier	i_in_point
>1444	ParameterType	const TNyARDoublePoint3d [ ]
>1445	ReturnType	void
>1446	CompoundStatement	 
>1447	ReturnStatement	 
>1448	ForStatement	for ( int i = i_number_of_vertex - 1 ; i >= 0 ; i -- )
>1449	CompoundStatement	 
>1450	ExpressionStatement	 
>1451	AssignmentExpr	out_ptr . z = this -> m20 * in_ptr . x + this -> m21 * in_ptr . y + this -> m22 * in_ptr . z
>1452	AdditiveExpression	this -> m20 * in_ptr . x + this -> m21 * in_ptr . y + this -> m22 * in_ptr . z
>1453	AdditiveExpression	this -> m21 * in_ptr . y + this -> m22 * in_ptr . z
>1454	MultiplicativeExpression	this -> m22 * in_ptr . z
>1455	MemberAccess	in_ptr . z
>1456	Identifier	z
>1457	Identifier	in_ptr
>1458	PtrMemberAccess	this -> m22
>1459	Identifier	m22
>1460	Identifier	this
>1461	MultiplicativeExpression	this -> m21 * in_ptr . y
>1462	MemberAccess	in_ptr . y
>1463	Identifier	y
>1464	Identifier	in_ptr
>1465	PtrMemberAccess	this -> m21
>1466	Identifier	m21
>1467	Identifier	this
>1468	MultiplicativeExpression	this -> m20 * in_ptr . x
>1469	MemberAccess	in_ptr . x
>1470	Identifier	x
>1471	Identifier	in_ptr
>1472	PtrMemberAccess	this -> m20
>1473	Identifier	m20
>1474	Identifier	this
>1475	MemberAccess	out_ptr . z
>1476	Identifier	z
>1477	Identifier	out_ptr
>1478	ExpressionStatement	 
>1479	AssignmentExpr	out_ptr . y = this -> m10 * in_ptr . x + this -> m11 * in_ptr . y + this -> m12 * in_ptr . z
>1480	AdditiveExpression	this -> m10 * in_ptr . x + this -> m11 * in_ptr . y + this -> m12 * in_ptr . z
>1481	AdditiveExpression	this -> m11 * in_ptr . y + this -> m12 * in_ptr . z
>1482	MultiplicativeExpression	this -> m12 * in_ptr . z
>1483	MemberAccess	in_ptr . z
>1484	Identifier	z
>1485	Identifier	in_ptr
>1486	PtrMemberAccess	this -> m12
>1487	Identifier	m12
>1488	Identifier	this
>1489	MultiplicativeExpression	this -> m11 * in_ptr . y
>1490	MemberAccess	in_ptr . y
>1491	Identifier	y
>1492	Identifier	in_ptr
>1493	PtrMemberAccess	this -> m11
>1494	Identifier	m11
>1495	Identifier	this
>1496	MultiplicativeExpression	this -> m10 * in_ptr . x
>1497	MemberAccess	in_ptr . x
>1498	Identifier	x
>1499	Identifier	in_ptr
>1500	PtrMemberAccess	this -> m10
>1501	Identifier	m10
>1502	Identifier	this
>1503	MemberAccess	out_ptr . y
>1504	Identifier	y
>1505	Identifier	out_ptr
>1506	ExpressionStatement	 
>1507	AssignmentExpr	out_ptr . x = this -> m00 * in_ptr . x + this -> m01 * in_ptr . y + this -> m02 * in_ptr . z
>1508	AdditiveExpression	this -> m00 * in_ptr . x + this -> m01 * in_ptr . y + this -> m02 * in_ptr . z
>1509	AdditiveExpression	this -> m01 * in_ptr . y + this -> m02 * in_ptr . z
>1510	MultiplicativeExpression	this -> m02 * in_ptr . z
>1511	MemberAccess	in_ptr . z
>1512	Identifier	z
>1513	Identifier	in_ptr
>1514	PtrMemberAccess	this -> m02
>1515	Identifier	m02
>1516	Identifier	this
>1517	MultiplicativeExpression	this -> m01 * in_ptr . y
>1518	MemberAccess	in_ptr . y
>1519	Identifier	y
>1520	Identifier	in_ptr
>1521	PtrMemberAccess	this -> m01
>1522	Identifier	m01
>1523	Identifier	this
>1524	MultiplicativeExpression	this -> m00 * in_ptr . x
>1525	MemberAccess	in_ptr . x
>1526	Identifier	x
>1527	Identifier	in_ptr
>1528	PtrMemberAccess	this -> m00
>1529	Identifier	m00
>1530	Identifier	this
>1531	MemberAccess	out_ptr . x
>1532	Identifier	x
>1533	Identifier	out_ptr
>1534	IdentifierDeclStatement	 
>1535	IdentifierDecl	& in_ptr = i_in_point [ i ]
>1536	AssignmentExpr	& in_ptr = i_in_point [ i ]
>1537	ArrayIndexing	i_in_point [ i ]
>1538	Identifier	i
>1539	Identifier	i_in_point
>1540	Identifier	in_ptr
>1541	Identifier	in_ptr
>1542	IdentifierDeclType	const TNyARDoublePoint3d &
>1543	IdentifierDeclStatement	 
>1544	IdentifierDecl	& out_ptr = i_out_point [ i ]
>1545	AssignmentExpr	& out_ptr = i_out_point [ i ]
>1546	ArrayIndexing	i_out_point [ i ]
>1547	Identifier	i
>1548	Identifier	i_out_point
>1549	Identifier	out_ptr
>1550	Identifier	out_ptr
>1551	IdentifierDeclType	TNyARDoublePoint3d &
>1552	IncDecOp	 
>1553	IncDec	--
>1554	Identifier	i
>1555	Condition	 
>1556	RelationalExpression	i >= 0
>1557	PrimaryExpression	0
>1558	Identifier	i
>1559	ForInit	 
>1560	IdentifierDeclStatement	int i = i_number_of_vertex - 1 ;
>1561	IdentifierDecl	i = i_number_of_vertex - 1
>1562	AssignmentExpr	i = i_number_of_vertex - 1
>1563	AdditiveExpression	i_number_of_vertex - 1
>1564	PrimaryExpression	1
>1565	Identifier	i_number_of_vertex
>1566	Identifier	i
>1567	Identifier	i
>1568	IdentifierDeclType	int
<3=8,4
<4=5
<5=7,6
<8=16,10,9
<10=11
<11=13,12
<13=15,14
<16=17
<17=19,18
<19=21,20
<30=32,31
<32=42,33
<33=34
<34=40,35
<35=36
<36=37
<37=39,38
<40=41
<42=43
<43=49,44
<44=45
<45=46
<46=48,47
<49=50
<58=64,63,59
<59=60
<60=62,61
<64=130,122,114,106,98,90,82,74,66,65
<66=67
<67=71,68
<68=70,69
<71=73,72
<74=75
<75=79,76
<76=78,77
<79=81,80
<82=83
<83=87,84
<84=86,85
<87=89,88
<90=91
<91=95,92
<92=94,93
<95=97,96
<98=99
<99=103,100
<100=102,101
<103=105,104
<106=107
<107=111,108
<108=110,109
<111=113,112
<114=115
<115=119,116
<116=118,117
<119=121,120
<122=123
<123=127,124
<124=126,125
<127=129,128
<130=131
<131=135,132
<132=134,133
<135=137,136
<162=171,170,163
<163=167,164
<164=166,165
<167=169,168
<171=426,415,396,377,358,339,330,322,314,306,298,290,282,261,240,219,197,189,181,173,172
<173=174
<174=178,175
<175=177,176
<178=180,179
<181=182
<182=186,183
<183=185,184
<186=188,187
<189=190
<190=194,191
<191=193,192
<194=196,195
<197=198
<198=218,217,199
<199=216,200
<200=214,201
<201=202
<202=203
<203=211,204
<204=208,205
<205=207,206
<208=210,209
<211=213,212
<214=215
<219=220
<220=239,238,221
<221=237,222
<222=230,223
<223=227,224
<224=226,225
<227=229,228
<230=234,231
<231=233,232
<234=236,235
<240=241
<241=260,259,242
<242=258,243
<243=251,244
<244=248,245
<245=247,246
<248=250,249
<251=255,252
<252=254,253
<255=257,256
<261=262
<262=281,280,263
<263=279,264
<264=272,265
<265=269,266
<266=268,267
<269=271,270
<272=276,273
<273=275,274
<276=278,277
<282=283
<283=287,284
<284=286,285
<287=289,288
<290=291
<291=295,292
<292=294,293
<295=297,296
<298=299
<299=303,300
<300=302,301
<303=305,304
<306=307
<307=311,308
<308=310,309
<311=313,312
<314=315
<315=319,316
<316=318,317
<319=321,320
<322=323
<323=327,324
<324=326,325
<327=329,328
<330=331
<331=337,332
<332=335,333
<333=334
<335=336
<337=338
<339=340
<340=354,341
<341=348,342
<342=343
<343=347,344
<344=346,345
<348=349
<349=353,350
<350=352,351
<354=355
<355=357,356
<358=359
<359=373,360
<360=367,361
<361=362
<362=366,363
<363=365,364
<367=368
<368=372,369
<369=371,370
<373=374
<374=376,375
<377=378
<378=392,379
<379=386,380
<380=381
<381=385,382
<382=384,383
<386=387
<387=391,388
<388=390,389
<392=393
<393=395,394
<396=397
<397=411,398
<398=405,399
<399=400
<400=404,401
<401=403,402
<405=406
<406=410,407
<407=409,408
<411=412
<412=414,413
<415=416
<416=425,424,417
<417=423,418
<418=422,419
<419=421,420
<426=427
<427=436,435,428
<428=434,429
<429=433,430
<430=432,431
<482=488,487,483
<483=484
<484=486,485
<488=958,939,902,893,884,875,866,508,502,496,490,489
<490=491
<491=493,492
<493=495,494
<496=497
<497=499,498
<499=501,500
<502=503
<503=505,504
<505=507,506
<508=856,626,509
<509=510
<510=620,614,608,602,596,582,564,550,532,523,511
<511=519,512
<512=513
<513=514
<514=518,515
<515=517,516
<519=520
<520=522,521
<523=524
<524=531,525
<525=529,526
<526=527
<527=528
<529=530
<532=544,533
<533=538,534
<534=535
<535=537,536
<538=539
<539=543,540
<540=542,541
<544=545
<545=549,546
<546=548,547
<550=560,551
<551=556,552
<552=553
<553=555,554
<556=557
<557=559,558
<560=561
<561=563,562
<564=576,565
<565=570,566
<566=567
<567=569,568
<570=571
<571=575,572
<572=574,573
<576=577
<577=581,578
<578=580,579
<582=592,583
<583=588,584
<584=585
<585=587,586
<588=589
<589=591,590
<592=593
<593=595,594
<596=597
<597=601,598
<598=600,599
<602=603
<603=607,604
<604=606,605
<608=609
<609=613,610
<610=612,611
<614=615
<615=619,616
<616=618,617
<620=621
<621=625,622
<622=624,623
<626=850,844,830,812,798,780,771,759,746,730,712,698,680,666,648,639,627
<627=635,628
<628=629
<629=630
<630=634,631
<631=633,632
<635=636
<636=638,637
<639=640
<640=647,641
<641=645,642
<642=643
<643=644
<645=646
<648=660,649
<649=654,650
<650=651
<651=653,652
<654=655
<655=659,656
<656=658,657
<660=661
<661=665,662
<662=664,663
<666=676,667
<667=672,668
<668=669
<669=671,670
<672=673
<673=675,674
<676=677
<677=679,678
<680=692,681
<681=686,682
<682=683
<683=685,684
<686=687
<687=691,688
<688=690,689
<692=693
<693=697,694
<694=696,695
<698=708,699
<699=704,700
<700=701
<701=703,702
<704=705
<705=707,706
<708=709
<709=711,710
<712=713
<713=729,714
<714=716,715
<716=728,717
<717=723,718
<718=722,719
<719=721,720
<723=727,724
<724=726,725
<730=731
<731=745,732
<732=734,733
<734=740,735
<735=737,736
<737=739,738
<740=742,741
<742=744,743
<746=747
<747=758,757,748
<748=756,749
<749=753,750
<750=752,751
<753=755,754
<759=767,760
<760=761
<761=762
<762=766,763
<763=765,764
<767=768
<768=770,769
<771=772
<772=779,773
<773=777,774
<774=775
<775=776
<777=778
<780=792,781
<781=786,782
<782=783
<783=785,784
<786=787
<787=791,788
<788=790,789
<792=793
<793=797,794
<794=796,795
<798=808,799
<799=804,800
<800=801
<801=803,802
<804=805
<805=807,806
<808=809
<809=811,810
<812=824,813
<813=818,814
<814=815
<815=817,816
<818=819
<819=823,820
<820=822,821
<824=825
<825=829,826
<826=828,827
<830=840,831
<831=836,832
<832=833
<833=835,834
<836=837
<837=839,838
<840=841
<841=843,842
<844=845
<845=849,846
<846=848,847
<850=851
<851=855,852
<852=854,853
<856=857
<857=863,858
<858=862,859
<859=861,860
<863=865,864
<866=867
<867=874,873,868
<868=872,869
<869=871,870
<875=876
<876=883,882,877
<877=881,878
<878=880,879
<884=885
<885=892,886
<886=890,887
<887=888
<888=889
<890=891
<893=894
<894=901,895
<895=899,896
<896=897
<897=898
<899=900
<902=933,928,903
<903=904
<904=920,913,905
<905=906
<906=907
<907=908
<908=912,909
<909=911,910
<913=914
<914=915
<915=919,916
<916=918,917
<920=921
<921=925,922
<922=924,923
<925=927,926
<928=929
<929=930
<930=932,931
<933=934
<934=936,935
<936=938,937
<939=955,952,949,946,943,940
<940=942,941
<943=945,944
<946=948,947
<949=951,950
<952=954,953
<955=957,956
<958=965,962,959
<959=961,960
<962=964,963
<965=967,966
<998=1010,1009,999
<999=1006,1003,1000
<1000=1002,1001
<1003=1005,1004
<1006=1008,1007
<1010=1262,1250,1238,1226,1214,1202,1193,1184,1175,1166,1157,1148,1126,1102,1096,1074,1050,1044,1030,1018,1012,1011
<1012=1013
<1013=1015,1014
<1015=1017,1016
<1018=1019
<1019=1027,1020
<1020=1024,1021
<1021=1023,1022
<1024=1026,1025
<1027=1029,1028
<1030=1031
<1031=1041,1032
<1032=1036,1033
<1033=1035,1034
<1036=1038,1037
<1038=1040,1039
<1041=1043,1042
<1044=1045
<1045=1047,1046
<1047=1049,1048
<1050=1051
<1051=1071,1052
<1052=1066,1053
<1053=1063,1054
<1054=1058,1055
<1055=1057,1056
<1058=1062,1059
<1059=1061,1060
<1063=1065,1064
<1066=1068,1067
<1068=1070,1069
<1071=1073,1072
<1074=1075
<1075=1093,1076
<1076=1090,1077
<1077=1087,1078
<1078=1082,1079
<1079=1081,1080
<1082=1086,1083
<1083=1085,1084
<1087=1089,1088
<1090=1092,1091
<1093=1095,1094
<1096=1097
<1097=1099,1098
<1099=1101,1100
<1102=1103
<1103=1123,1104
<1104=1116,1105
<1105=1113,1106
<1106=1110,1107
<1107=1109,1108
<1110=1112,1111
<1113=1115,1114
<1116=1120,1117
<1117=1119,1118
<1120=1122,1121
<1123=1125,1124
<1126=1127
<1127=1145,1128
<1128=1140,1129
<1129=1137,1130
<1130=1134,1131
<1131=1133,1132
<1134=1136,1135
<1137=1139,1138
<1140=1144,1141
<1141=1143,1142
<1145=1147,1146
<1148=1149
<1149=1156,1155,1150
<1150=1154,1151
<1151=1153,1152
<1157=1158
<1158=1165,1164,1159
<1159=1163,1160
<1160=1162,1161
<1166=1167
<1167=1174,1173,1168
<1168=1172,1169
<1169=1171,1170
<1175=1176
<1176=1183,1182,1177
<1177=1181,1178
<1178=1180,1179
<1184=1185
<1185=1192,1191,1186
<1186=1190,1187
<1187=1189,1188
<1193=1194
<1194=1201,1200,1195
<1195=1199,1196
<1196=1198,1197
<1202=1203
<1203=1213,1212,1204
<1204=1211,1205
<1205=1209,1206
<1206=1207
<1207=1208
<1209=1210
<1214=1215
<1215=1225,1224,1216
<1216=1223,1217
<1217=1221,1218
<1218=1219
<1219=1220
<1221=1222
<1226=1227
<1227=1237,1236,1228
<1228=1235,1229
<1229=1233,1230
<1230=1231
<1231=1232
<1233=1234
<1238=1239
<1239=1249,1248,1240
<1240=1247,1241
<1241=1245,1242
<1242=1243
<1243=1244
<1245=1246
<1250=1251
<1251=1261,1260,1252
<1252=1259,1253
<1253=1257,1254
<1254=1255
<1255=1256
<1257=1258
<1262=1263
<1263=1273,1272,1264
<1264=1271,1265
<1265=1269,1266
<1266=1267
<1267=1268
<1269=1270
<1305=1314,1313,1306
<1306=1310,1307
<1307=1309,1308
<1310=1312,1311
<1314=1400,1391,1382,1360,1338,1316,1315
<1316=1317
<1317=1335,1318
<1318=1330,1319
<1319=1325,1320
<1320=1322,1321
<1322=1324,1323
<1325=1327,1326
<1327=1329,1328
<1330=1332,1331
<1332=1334,1333
<1335=1337,1336
<1338=1339
<1339=1357,1340
<1340=1352,1341
<1341=1347,1342
<1342=1344,1343
<1344=1346,1345
<1347=1349,1348
<1349=1351,1350
<1352=1354,1353
<1354=1356,1355
<1357=1359,1358
<1360=1361
<1361=1379,1362
<1362=1374,1363
<1363=1369,1364
<1364=1366,1365
<1366=1368,1367
<1369=1371,1370
<1371=1373,1372
<1374=1376,1375
<1376=1378,1377
<1379=1381,1380
<1382=1383
<1383=1390,1389,1384
<1384=1388,1385
<1385=1387,1386
<1391=1392
<1392=1399,1398,1393
<1393=1397,1394
<1394=1396,1395
<1400=1401
<1401=1408,1407,1402
<1402=1406,1403
<1403=1405,1404
<1434=1446,1445,1435
<1435=1442,1439,1436
<1436=1438,1437
<1439=1441,1440
<1442=1444,1443
<1446=1448,1447
<1448=1559,1555,1552,1449
<1449=1543,1534,1506,1478,1450
<1450=1451
<1451=1475,1452
<1452=1468,1453
<1453=1461,1454
<1454=1458,1455
<1455=1457,1456
<1458=1460,1459
<1461=1465,1462
<1462=1464,1463
<1465=1467,1466
<1468=1472,1469
<1469=1471,1470
<1472=1474,1473
<1475=1477,1476
<1478=1479
<1479=1503,1480
<1480=1496,1481
<1481=1489,1482
<1482=1486,1483
<1483=1485,1484
<1486=1488,1487
<1489=1493,1490
<1490=1492,1491
<1493=1495,1494
<1496=1500,1497
<1497=1499,1498
<1500=1502,1501
<1503=1505,1504
<1506=1507
<1507=1531,1508
<1508=1524,1509
<1509=1517,1510
<1510=1514,1511
<1511=1513,1512
<1514=1516,1515
<1517=1521,1518
<1518=1520,1519
<1521=1523,1522
<1524=1528,1525
<1525=1527,1526
<1528=1530,1529
<1531=1533,1532
<1534=1535
<1535=1542,1541,1536
<1536=1540,1537
<1537=1539,1538
<1543=1544
<1544=1551,1550,1545
<1545=1549,1546
<1546=1548,1547
<1552=1554,1553
<1555=1556
<1556=1558,1557
<1559=1560
<1560=1561
<1561=1568,1567,1562
<1562=1566,1563
<1563=1565,1564
