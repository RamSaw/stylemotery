>3	FunctionDef	Id3v2TagWriter 
>4	ParameterList	Tag * tag , bool cleanupTag , FrameSource * source , bool cleanupSource
>5	Parameter	 
>6	Identifier	cleanupSource
>7	ParameterType	bool
>8	Parameter	 
>9	Identifier	source
>10	ParameterType	FrameSource *
>11	Parameter	 
>12	Identifier	cleanupTag
>13	ParameterType	bool
>14	Parameter	 
>15	Identifier	tag
>16	ParameterType	Tag *
>17	CompoundStatement	 
>18	IfStatement	if ( mTag != NULL )
>19	CompoundStatement	 
>20	ForStatement	for ( FrameList 
>21	CompoundStatement	 
>22	ExpressionStatement	 
>23	CallExpression	mFrames . push_back ( * i )
>24	ArgumentList	* i
>25	Argument	* i
>26	UnaryOp	* i
>27	Identifier	i
>28	UnaryOperator	*
>29	Callee	mFrames . push_back
>30	MemberAccess	mFrames . push_back
>31	Identifier	push_back
>32	Identifier	mFrames
>33	UnaryExpression	 
>34	Identifier	i
>35	IncDec	++
>36	Condition	 
>37	EqualityExpression	i != mTag -> getFrameHeaders ( ) . end ( )
>38	CallExpression	mTag -> getFrameHeaders ( ) . end ( )
>39	ArgumentList	 
>40	Callee	mTag -> getFrameHeaders ( ) . end
>41	MemberAccess	mTag -> getFrameHeaders ( ) . end
>42	Identifier	end
>43	CallExpression	mTag -> getFrameHeaders ( )
>44	ArgumentList	 
>45	Callee	mTag -> getFrameHeaders
>46	PtrMemberAccess	mTag -> getFrameHeaders
>47	Identifier	getFrameHeaders
>48	Identifier	mTag
>49	Identifier	i
>50	ForInit	 
>51	IdentifierDeclStatement	FrameList 
>52	IdentifierDecl	i = mTag -> getFrameHeaders ( ) . begin ( )
>53	AssignmentExpr	i = mTag -> getFrameHeaders ( ) . begin ( )
>54	CallExpression	mTag -> getFrameHeaders ( ) . begin ( )
>55	ArgumentList	 
>56	Callee	mTag -> getFrameHeaders ( ) . begin
>57	MemberAccess	mTag -> getFrameHeaders ( ) . begin
>58	Identifier	begin
>59	CallExpression	mTag -> getFrameHeaders ( )
>60	ArgumentList	 
>61	Callee	mTag -> getFrameHeaders
>62	PtrMemberAccess	mTag -> getFrameHeaders
>63	Identifier	getFrameHeaders
>64	Identifier	mTag
>65	Identifier	i
>66	Identifier	i
>67	IdentifierDeclType	FrameList 
>68	Condition	 
>69	EqualityExpression	mTag != NULL
>70	Identifier	NULL
>71	Identifier	mTag
>72	ExpressionStatement	 
>73	AssignmentExpr	mTagHeaderWritten = false
>74	Identifier	false
>75	Identifier	mTagHeaderWritten
>76	ExpressionStatement	 
>77	AssignmentExpr	mFrameHeader = NULL
>78	Identifier	NULL
>79	Identifier	mFrameHeader
>80	ExpressionStatement	 
>81	AssignmentExpr	mStripTagHeader = NULL
>82	Identifier	NULL
>83	Identifier	mStripTagHeader
>84	ExpressionStatement	 
>85	AssignmentExpr	mCleanupSource = cleanupSource
>86	Identifier	cleanupSource
>87	Identifier	mCleanupSource
>88	ExpressionStatement	 
>89	AssignmentExpr	mSource = source
>90	Identifier	source
>91	Identifier	mSource
>92	ExpressionStatement	 
>93	AssignmentExpr	mCleanupTag = cleanupTag
>94	Identifier	cleanupTag
>95	Identifier	mCleanupTag
>96	ExpressionStatement	 
>97	AssignmentExpr	mTag = tag
>98	Identifier	tag
>99	Identifier	mTag
>123	FunctionDef	Id3v2TagWriter 
>124	ParameterList	 
>125	CompoundStatement	 
>126	IfStatement	if ( mStripTagHeader != NULL )
>127	CompoundStatement	 
>128	ExpressionStatement	 
>129	Identifier	mStripTagHeader
>130	Statement	 
>131	Condition	 
>132	EqualityExpression	mStripTagHeader != NULL
>133	Identifier	NULL
>134	Identifier	mStripTagHeader
>135	IfStatement	if ( mCleanupSource && mSource != NULL )
>136	CompoundStatement	 
>137	ExpressionStatement	 
>138	Identifier	mSource
>139	Statement	 
>140	Condition	 
>141	AndExpression	mCleanupSource && mSource != NULL
>142	EqualityExpression	mSource != NULL
>143	Identifier	NULL
>144	Identifier	mSource
>145	Identifier	mCleanupSource
>146	IfStatement	if ( mCleanupTag && mTag != NULL )
>147	CompoundStatement	 
>148	ExpressionStatement	 
>149	Identifier	mTag
>150	Statement	 
>151	Condition	 
>152	AndExpression	mCleanupTag && mTag != NULL
>153	EqualityExpression	mTag != NULL
>154	Identifier	NULL
>155	Identifier	mTag
>156	Identifier	mCleanupTag
>166	FunctionDef	Id3v2TagWriter 
>167	ParameterList	ByteBuffer * src , ByteBuffer * dst , bool finish
>168	Parameter	 
>169	Identifier	finish
>170	ParameterType	bool
>171	Parameter	 
>172	Identifier	dst
>173	ParameterType	ByteBuffer *
>174	Parameter	 
>175	Identifier	src
>176	ParameterType	ByteBuffer *
>177	ReturnType	MutationAlgorithm 
>178	CompoundStatement	 
>179	ReturnStatement	 
>180	Identifier	rval
>181	IfStatement	if ( mStripTagHeader == NULL )
>182	ElseStatement	else
>183	CompoundStatement	 
>184	IfStatement	if ( src -> isEmpty ( ) )
>185	ElseStatement	else
>186	CompoundStatement	 
>187	IfStatement	if ( mBytesToStrip == 0 )
>188	CompoundStatement	 
>189	ExpressionStatement	 
>190	AssignmentExpr	rval = MutationAlgorithm 
>191	Identifier	MutationAlgorithm 
>192	Identifier	rval
>193	ExpressionStatement	 
>194	AssignmentExpr	mStripTagHeader = NULL
>195	Identifier	NULL
>196	Identifier	mStripTagHeader
>197	ExpressionStatement	 
>198	Identifier	mStripTagHeader
>199	Statement	 
>200	Condition	 
>201	EqualityExpression	mBytesToStrip == 0
>202	PrimaryExpression	0
>203	Identifier	mBytesToStrip
>204	ExpressionStatement	 
>205	AssignmentExpr	mBytesToStrip -= src -> clear ( mBytesToStrip )
>206	CallExpression	src -> clear ( mBytesToStrip )
>207	ArgumentList	mBytesToStrip
>208	Argument	mBytesToStrip
>209	Identifier	mBytesToStrip
>210	Callee	src -> clear
>211	PtrMemberAccess	src -> clear
>212	Identifier	clear
>213	Identifier	src
>214	Identifier	mBytesToStrip
>215	CompoundStatement	 
>216	ExpressionStatement	 
>217	AssignmentExpr	rval = MutationAlgorithm 
>218	Identifier	MutationAlgorithm 
>219	Identifier	rval
>220	Condition	 
>221	CallExpression	src -> isEmpty ( )
>222	ArgumentList	 
>223	Callee	src -> isEmpty
>224	PtrMemberAccess	src -> isEmpty
>225	Identifier	isEmpty
>226	Identifier	src
>227	CompoundStatement	 
>228	IfStatement	if ( src -> length ( ) < TagHeader 
>229	ElseStatement	else
>230	CompoundStatement	 
>231	IfStatement	if ( header -> convertFromBytes ( src -> data ( ) ) )
>232	ElseStatement	else
>233	CompoundStatement	 
>234	ExpressionStatement	 
>235	AssignmentExpr	rval = MutationAlgorithm 
>236	Identifier	MutationAlgorithm 
>237	Identifier	rval
>238	ExpressionStatement	 
>239	Identifier	header
>240	Statement	 
>241	CompoundStatement	 
>242	ExpressionStatement	 
>243	AssignmentExpr	mBytesToStrip = mStripTagHeader -> getTagSize ( ) + TagHeader 
>244	AdditiveExpression	mStripTagHeader -> getTagSize ( ) + TagHeader 
>245	Identifier	TagHeader 
>246	CallExpression	mStripTagHeader -> getTagSize ( )
>247	ArgumentList	 
>248	Callee	mStripTagHeader -> getTagSize
>249	PtrMemberAccess	mStripTagHeader -> getTagSize
>250	Identifier	getTagSize
>251	Identifier	mStripTagHeader
>252	Identifier	mBytesToStrip
>253	ExpressionStatement	 
>254	AssignmentExpr	mStripTagHeader = header
>255	Identifier	header
>256	Identifier	mStripTagHeader
>257	Condition	 
>258	CallExpression	header -> convertFromBytes ( src -> data ( ) )
>259	ArgumentList	src -> data ( )
>260	Argument	src -> data ( )
>261	CallExpression	src -> data ( )
>262	ArgumentList	 
>263	Callee	src -> data
>264	PtrMemberAccess	src -> data
>265	Identifier	data
>266	Identifier	src
>267	Callee	header -> convertFromBytes
>268	PtrMemberAccess	header -> convertFromBytes
>269	Identifier	convertFromBytes
>270	Identifier	header
>271	IdentifierDeclStatement	 
>272	IdentifierDecl	* header = new TagHeader ( )
>273	AssignmentExpr	* header = new TagHeader ( )
>274	UnaryExpression	new TagHeader ( )
>275	Identifier	header
>276	Identifier	header
>277	IdentifierDeclType	TagHeader *
>278	CompoundStatement	 
>279	IfStatement	if ( ! finish )
>280	ElseStatement	else
>281	CompoundStatement	 
>282	ExpressionStatement	 
>283	AssignmentExpr	rval = MutationAlgorithm 
>284	Identifier	MutationAlgorithm 
>285	Identifier	rval
>286	CompoundStatement	 
>287	ExpressionStatement	 
>288	AssignmentExpr	rval = MutationAlgorithm 
>289	Identifier	MutationAlgorithm 
>290	Identifier	rval
>291	Condition	 
>292	UnaryOp	! finish
>293	Identifier	finish
>294	UnaryOperator	!
>295	Condition	 
>296	RelationalExpression	src -> length ( ) < TagHeader 
>297	Identifier	TagHeader 
>298	CallExpression	src -> length ( )
>299	ArgumentList	 
>300	Callee	src -> length
>301	PtrMemberAccess	src -> length
>302	Identifier	length
>303	Identifier	src
>304	Condition	 
>305	EqualityExpression	mStripTagHeader == NULL
>306	Identifier	NULL
>307	Identifier	mStripTagHeader
>308	IdentifierDeclStatement	 
>309	IdentifierDecl	rval = MutationAlgorithm 
>310	AssignmentExpr	rval = MutationAlgorithm 
>311	Identifier	MutationAlgorithm 
>312	Identifier	MutationAlgorithm 
>313	Identifier	rval
>314	IdentifierDeclType	MutationAlgorithm 
>339	FunctionDef	Id3v2TagWriter 
>340	ParameterList	ByteBuffer * src , ByteBuffer * dst , bool finish
>341	Parameter	 
>342	Identifier	finish
>343	ParameterType	bool
>344	Parameter	 
>345	Identifier	dst
>346	ParameterType	ByteBuffer *
>347	Parameter	 
>348	Identifier	src
>349	ParameterType	ByteBuffer *
>350	ReturnType	MutationAlgorithm 
>351	CompoundStatement	 
>352	ReturnStatement	 
>353	Identifier	rval
>354	IfStatement	if ( ! mTagHeaderWritten )
>355	ElseStatement	else
>356	IfStatement	if ( mFrameHeader == NULL )
>357	ElseStatement	else
>358	CompoundStatement	 
>359	IfStatement	if ( numBytes == 0 )
>360	ElseStatement	else
>361	IfStatement	if ( numBytes == - 1 )
>362	CompoundStatement	 
>363	ExpressionStatement	 
>364	AssignmentExpr	rval = MutationAlgorithm 
>365	Identifier	MutationAlgorithm 
>366	Identifier	rval
>367	Condition	 
>368	EqualityExpression	numBytes == - 1
>369	UnaryOp	- 1
>370	PrimaryExpression	1
>371	UnaryOperator	-
>372	Identifier	numBytes
>373	CompoundStatement	 
>374	ExpressionStatement	 
>375	AssignmentExpr	mFrameHeader = NULL
>376	Identifier	NULL
>377	Identifier	mFrameHeader
>378	Condition	 
>379	EqualityExpression	numBytes == 0
>380	PrimaryExpression	0
>381	Identifier	numBytes
>382	IdentifierDeclStatement	 
>383	IdentifierDecl	numBytes = mSource -> getFrame ( dst , false )
>384	AssignmentExpr	numBytes = mSource -> getFrame ( dst , false )
>385	CallExpression	mSource -> getFrame ( dst , false )
>386	ArgumentList	dst
>387	Argument	false
>388	Identifier	false
>389	Argument	dst
>390	Identifier	dst
>391	Callee	mSource -> getFrame
>392	PtrMemberAccess	mSource -> getFrame
>393	Identifier	getFrame
>394	Identifier	mSource
>395	Identifier	numBytes
>396	Identifier	numBytes
>397	IdentifierDeclType	int
>398	CompoundStatement	 
>399	IfStatement	if ( mFrames . empty ( ) )
>400	ElseStatement	else
>401	CompoundStatement	 
>402	ExpressionStatement	 
>403	CallExpression	mSource -> startFrame ( mFrameHeader )
>404	ArgumentList	mFrameHeader
>405	Argument	mFrameHeader
>406	Identifier	mFrameHeader
>407	Callee	mSource -> startFrame
>408	PtrMemberAccess	mSource -> startFrame
>409	Identifier	startFrame
>410	Identifier	mSource
>411	ExpressionStatement	 
>412	CallExpression	mFrames . pop_front ( )
>413	ArgumentList	 
>414	Callee	mFrames . pop_front
>415	MemberAccess	mFrames . pop_front
>416	Identifier	pop_front
>417	Identifier	mFrames
>418	ExpressionStatement	 
>419	AssignmentExpr	mFrameHeader = mFrames . front ( )
>420	CallExpression	mFrames . front ( )
>421	ArgumentList	 
>422	Callee	mFrames . front
>423	MemberAccess	mFrames . front
>424	Identifier	front
>425	Identifier	mFrames
>426	Identifier	mFrameHeader
>427	CompoundStatement	 
>428	ExpressionStatement	 
>429	AssignmentExpr	rval = MutationAlgorithm 
>430	Identifier	MutationAlgorithm 
>431	Identifier	rval
>432	Condition	 
>433	CallExpression	mFrames . empty ( )
>434	ArgumentList	 
>435	Callee	mFrames . empty
>436	MemberAccess	mFrames . empty
>437	Identifier	empty
>438	Identifier	mFrames
>439	Condition	 
>440	EqualityExpression	mFrameHeader == NULL
>441	Identifier	NULL
>442	Identifier	mFrameHeader
>443	CompoundStatement	 
>444	ExpressionStatement	 
>445	AssignmentExpr	mTagHeaderWritten = true
>446	Identifier	true
>447	Identifier	mTagHeaderWritten
>448	ExpressionStatement	 
>449	CallExpression	dst -> extend ( TagHeader 
>450	ArgumentList	TagHeader 
>451	Argument	TagHeader 
>452	Identifier	TagHeader 
>453	Callee	dst -> extend
>454	PtrMemberAccess	dst -> extend
>455	Identifier	extend
>456	Identifier	dst
>457	ExpressionStatement	 
>458	CallExpression	mTag -> getHeader ( ) -> convertToBytes ( dst -> data ( ) )
>459	ArgumentList	dst -> data ( )
>460	Argument	dst -> data ( )
>461	CallExpression	dst -> data ( )
>462	ArgumentList	 
>463	Callee	dst -> data
>464	PtrMemberAccess	dst -> data
>465	Identifier	data
>466	Identifier	dst
>467	Callee	mTag -> getHeader ( ) -> convertToBytes
>468	PtrMemberAccess	mTag -> getHeader ( ) -> convertToBytes
>469	Identifier	convertToBytes
>470	CallExpression	mTag -> getHeader ( )
>471	ArgumentList	 
>472	Callee	mTag -> getHeader
>473	PtrMemberAccess	mTag -> getHeader
>474	Identifier	getHeader
>475	Identifier	mTag
>476	ExpressionStatement	 
>477	CallExpression	dst -> allocateSpace ( TagHeader 
>478	ArgumentList	TagHeader 
>479	Argument	true
>480	Identifier	true
>481	Argument	TagHeader 
>482	Identifier	TagHeader 
>483	Callee	dst -> allocateSpace
>484	PtrMemberAccess	dst -> allocateSpace
>485	Identifier	allocateSpace
>486	Identifier	dst
>487	Condition	 
>488	UnaryOp	! mTagHeaderWritten
>489	Identifier	mTagHeaderWritten
>490	UnaryOperator	!
>491	IdentifierDeclStatement	 
>492	IdentifierDecl	rval = MutationAlgorithm 
>493	AssignmentExpr	rval = MutationAlgorithm 
>494	Identifier	MutationAlgorithm 
>495	Identifier	MutationAlgorithm 
>496	Identifier	rval
>497	IdentifierDeclType	MutationAlgorithm 
>526	FunctionDef	Id3v2TagWriter 
>527	ParameterList	ByteBuffer * src , ByteBuffer * dst , bool finish
>528	Parameter	 
>529	Identifier	finish
>530	ParameterType	bool
>531	Parameter	 
>532	Identifier	dst
>533	ParameterType	ByteBuffer *
>534	Parameter	 
>535	Identifier	src
>536	ParameterType	ByteBuffer *
>537	ReturnType	MutationAlgorithm 
>538	CompoundStatement	 
>539	ReturnStatement	 
>540	ConditionalExpression	mTag == NULL ? stripTag ( src , dst , finish ) 
>541	CallExpression	addTag ( src , dst , finish )
>542	ArgumentList	src
>543	Argument	finish
>544	Identifier	finish
>545	Argument	dst
>546	Identifier	dst
>547	Argument	src
>548	Identifier	src
>549	Callee	addTag
>550	Identifier	addTag
>551	CallExpression	stripTag ( src , dst , finish )
>552	ArgumentList	src
>553	Argument	finish
>554	Identifier	finish
>555	Argument	dst
>556	Identifier	dst
>557	Argument	src
>558	Identifier	src
>559	Callee	stripTag
>560	Identifier	stripTag
>561	Condition	mTag == NULL
>562	EqualityExpression	mTag == NULL
>563	Identifier	NULL
>564	Identifier	mTag
>575	FunctionDef	Id3v2TagWriter 
>576	ParameterList	 
>577	ReturnType	Tag *
>578	CompoundStatement	 
>579	ReturnStatement	 
>580	Identifier	mTag
>585	FunctionDef	Id3v2TagWriter 
>586	ParameterList	 
>587	ReturnType	FrameSource *
>588	CompoundStatement	 
>589	ReturnStatement	 
>590	Identifier	mSource
<3=17,4
<4=14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=96,92,88,84,80,76,72,18
<18=68,19
<19=20
<20=50,36,33,21
<21=22
<22=23
<23=29,24
<24=25
<25=26
<26=28,27
<29=30
<30=32,31
<33=35,34
<36=37
<37=49,38
<38=40,39
<40=41
<41=43,42
<43=45,44
<45=46
<46=48,47
<50=51
<51=52
<52=67,66,53
<53=65,54
<54=56,55
<56=57
<57=59,58
<59=61,60
<61=62
<62=64,63
<68=69
<69=71,70
<72=73
<73=75,74
<76=77
<77=79,78
<80=81
<81=83,82
<84=85
<85=87,86
<88=89
<89=91,90
<92=93
<93=95,94
<96=97
<97=99,98
<123=125,124
<125=146,135,126
<126=131,127
<127=130,128
<128=129
<131=132
<132=134,133
<135=140,136
<136=139,137
<137=138
<140=141
<141=145,142
<142=144,143
<146=151,147
<147=150,148
<148=149
<151=152
<152=156,153
<153=155,154
<166=178,177,167
<167=174,171,168
<168=170,169
<171=173,172
<174=176,175
<178=308,181,179
<179=180
<181=304,227,182
<182=183
<183=184
<184=220,215,185
<185=186
<186=204,187
<187=200,188
<188=199,197,193,189
<189=190
<190=192,191
<193=194
<194=196,195
<197=198
<200=201
<201=203,202
<204=205
<205=214,206
<206=210,207
<207=208
<208=209
<210=211
<211=213,212
<215=216
<216=217
<217=219,218
<220=221
<221=223,222
<223=224
<224=226,225
<227=228
<228=295,278,229
<229=230
<230=271,231
<231=257,241,232
<232=233
<233=240,238,234
<234=235
<235=237,236
<238=239
<241=253,242
<242=243
<243=252,244
<244=246,245
<246=248,247
<248=249
<249=251,250
<253=254
<254=256,255
<257=258
<258=267,259
<259=260
<260=261
<261=263,262
<263=264
<264=266,265
<267=268
<268=270,269
<271=272
<272=277,276,273
<273=275,274
<278=279
<279=291,286,280
<280=281
<281=282
<282=283
<283=285,284
<286=287
<287=288
<288=290,289
<291=292
<292=294,293
<295=296
<296=298,297
<298=300,299
<300=301
<301=303,302
<304=305
<305=307,306
<308=309
<309=314,313,310
<310=312,311
<339=351,350,340
<340=347,344,341
<341=343,342
<344=346,345
<347=349,348
<351=491,354,352
<352=353
<354=487,443,355
<355=356
<356=439,398,357
<357=358
<358=382,359
<359=378,373,360
<360=361
<361=367,362
<362=363
<363=364
<364=366,365
<367=368
<368=372,369
<369=371,370
<373=374
<374=375
<375=377,376
<378=379
<379=381,380
<382=383
<383=397,396,384
<384=395,385
<385=391,386
<386=389,387
<387=388
<389=390
<391=392
<392=394,393
<398=399
<399=432,427,400
<400=401
<401=418,411,402
<402=403
<403=407,404
<404=405
<405=406
<407=408
<408=410,409
<411=412
<412=414,413
<414=415
<415=417,416
<418=419
<419=426,420
<420=422,421
<422=423
<423=425,424
<427=428
<428=429
<429=431,430
<432=433
<433=435,434
<435=436
<436=438,437
<439=440
<440=442,441
<443=476,457,448,444
<444=445
<445=447,446
<448=449
<449=453,450
<450=451
<451=452
<453=454
<454=456,455
<457=458
<458=467,459
<459=460
<460=461
<461=463,462
<463=464
<464=466,465
<467=468
<468=470,469
<470=472,471
<472=473
<473=475,474
<476=477
<477=483,478
<478=481,479
<479=480
<481=482
<483=484
<484=486,485
<487=488
<488=490,489
<491=492
<492=497,496,493
<493=495,494
<526=538,537,527
<527=534,531,528
<528=530,529
<531=533,532
<534=536,535
<538=539
<539=540
<540=561,551,541
<541=549,542
<542=547,545,543
<543=544
<545=546
<547=548
<549=550
<551=559,552
<552=557,555,553
<553=554
<555=556
<557=558
<559=560
<561=562
<562=564,563
<575=578,577,576
<578=579
<579=580
<585=588,587,586
<588=589
<589=590
