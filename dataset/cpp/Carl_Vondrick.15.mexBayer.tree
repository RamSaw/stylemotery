>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ])
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ]
>5	Parameter	 
>6	Identifier	prhs
>7	ParameterType	const mxArray * [ ]
>8	Parameter	 
>9	Identifier	plhs
>10	ParameterType	mxArray * [ ]
>11	ReturnType	inline void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	CallExpression	XY . applyBayerPattern ( offset )
>15	ArgumentList	offset
>16	Argument	offset
>17	Identifier	offset
>18	Callee	XY . applyBayerPattern
>19	MemberAccess	XY . applyBayerPattern
>20	Identifier	applyBayerPattern
>21	Identifier	XY
>22	ExpressionStatement	 
>23	CallExpression	XY . copy ( X )
>24	ArgumentList	X
>25	Argument	X
>26	Identifier	X
>27	Callee	XY . copy
>28	MemberAccess	XY . copy
>29	Identifier	copy
>30	Identifier	XY
>31	IdentifierDeclStatement	 
>32	IdentifierDecl	XY ( prXY , n * M )
>33	Expression	prXY , n * M
>34	MultiplicativeExpression	n * M
>35	Identifier	M
>36	Identifier	n
>37	Identifier	prXY
>38	Identifier	XY
>39	IdentifierDeclType	Vector < T >
>40	ExpressionStatement	 
>41	CallExpression	mxGetPr ( plhs [ 0 ] )
>42	ArgumentList	plhs [ 0 ]
>43	Argument	plhs [ 0 ]
>44	ArrayIndexing	plhs [ 0 ]
>45	PrimaryExpression	0
>46	Identifier	plhs
>47	Callee	mxGetPr
>48	Identifier	mxGetPr
>49	Statement	 
>50	Statement	 
>51	Statement	 
>52	Statement	 
>53	Statement	 
>54	Statement	 
>55	Statement	 
>56	Statement	 
>57	Statement	 
>58	ExpressionStatement	 
>59	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( n * M , 1 )
>60	RelationalExpression	createMatrix < T > ( n * M , 1 )
>61	RelationalExpression	T > ( n * M , 1 )
>62	Expression	n * M , 1
>63	PrimaryExpression	1
>64	MultiplicativeExpression	n * M
>65	Identifier	M
>66	Identifier	n
>67	Identifier	T
>68	Identifier	createMatrix
>69	ArrayIndexing	plhs [ 0 ]
>70	PrimaryExpression	0
>71	Identifier	plhs
>72	ExpressionStatement	 
>73	CallExpression	mxGetScalar ( prhs [ 1 ] )
>74	ArgumentList	prhs [ 1 ]
>75	Argument	prhs [ 1 ]
>76	ArrayIndexing	prhs [ 1 ]
>77	PrimaryExpression	1
>78	Identifier	prhs
>79	Callee	mxGetScalar
>80	Identifier	mxGetScalar
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	IdentifierDeclStatement	 
>90	IdentifierDecl	X ( prV , n * M )
>91	Expression	prV , n * M
>92	MultiplicativeExpression	n * M
>93	Identifier	M
>94	Identifier	n
>95	Identifier	prV
>96	Identifier	X
>97	IdentifierDeclType	Vector < T >
>98	ExpressionStatement	 
>99	ArrayIndexing	dimsX [ 1 ]
>100	PrimaryExpression	1
>101	Identifier	dimsX
>102	Statement	 
>103	Statement	 
>104	Statement	 
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	Statement	 
>109	ExpressionStatement	 
>110	ArrayIndexing	dimsX [ 0 ]
>111	PrimaryExpression	0
>112	Identifier	dimsX
>113	Statement	 
>114	Statement	 
>115	Statement	 
>116	Statement	 
>117	Statement	 
>118	Statement	 
>119	Statement	 
>120	IdentifierDeclStatement	 
>121	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>122	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>123	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>124	ArgumentList	prhs [ 0 ]
>125	Argument	prhs [ 0 ]
>126	ArrayIndexing	prhs [ 0 ]
>127	PrimaryExpression	0
>128	Identifier	prhs
>129	Callee	mxGetDimensions
>130	Identifier	mxGetDimensions
>131	Identifier	dimsX
>132	Identifier	dimsX
>133	IdentifierDeclType	const mwSize *
>134	ExpressionStatement	 
>135	CallExpression	mxGetPr ( prhs [ 0 ] )
>136	ArgumentList	prhs [ 0 ]
>137	Argument	prhs [ 0 ]
>138	ArrayIndexing	prhs [ 0 ]
>139	PrimaryExpression	0
>140	Identifier	prhs
>141	Callee	mxGetPr
>142	Identifier	mxGetPr
>143	Statement	 
>144	Statement	 
>145	Statement	 
>146	Statement	 
>147	Statement	 
>148	Statement	 
>149	Statement	 
>150	Statement	 
>151	Statement	 
>152	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>153	ExpressionStatement	 
>154	CallExpression	mexErrMsgTxt ( \"argument 1 should not be sparse\" )
>155	ArgumentList	\"argument 1 should not be sparse\"
>156	Argument	\"argument 1 should not be sparse\"
>157	PrimaryExpression	\"argument 1 should not be sparse\"
>158	Callee	mexErrMsgTxt
>159	Identifier	mexErrMsgTxt
>160	Condition	 
>161	CallExpression	mxIsSparse ( prhs [ 0 ] )
>162	ArgumentList	prhs [ 0 ]
>163	Argument	prhs [ 0 ]
>164	ArrayIndexing	prhs [ 0 ]
>165	PrimaryExpression	0
>166	Identifier	prhs
>167	Callee	mxIsSparse
>168	Identifier	mxIsSparse
>169	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>170	ExpressionStatement	 
>171	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>172	ArgumentList	\"type of argument 1 is not consistent\"
>173	Argument	\"type of argument 1 is not consistent\"
>174	PrimaryExpression	\"type of argument 1 is not consistent\"
>175	Callee	mexErrMsgTxt
>176	Identifier	mexErrMsgTxt
>177	Condition	 
>178	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>179	RelationalExpression	T > ( prhs [ 0 ] )
>180	ArrayIndexing	prhs [ 0 ]
>181	PrimaryExpression	0
>182	Identifier	prhs
>183	Identifier	T
>184	UnaryOp	! mexCheckType
>185	Identifier	mexCheckType
>186	UnaryOperator	!
>205	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>206	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>207	Parameter	 
>208	Identifier	prhs
>209	ParameterType	const mxArray * [ ]
>210	Parameter	 
>211	Identifier	nrhs
>212	ParameterType	int
>213	Parameter	 
>214	Identifier	plhs
>215	ParameterType	mxArray * [ ]
>216	Parameter	 
>217	Identifier	nlhs
>218	ParameterType	int
>219	ReturnType	void
>220	CompoundStatement	 
>221	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>222	ElseStatement	else
>223	CompoundStatement	 
>224	ExpressionStatement	 
>225	RelationalExpression	callFunction < float > ( plhs , prhs )
>226	RelationalExpression	float > ( plhs , prhs )
>227	Expression	plhs , prhs
>228	Identifier	prhs
>229	Identifier	plhs
>230	Identifier	float
>231	Identifier	callFunction
>232	CompoundStatement	 
>233	ExpressionStatement	 
>234	RelationalExpression	callFunction < double > ( plhs , prhs )
>235	RelationalExpression	double > ( plhs , prhs )
>236	Expression	plhs , prhs
>237	Identifier	prhs
>238	Identifier	plhs
>239	Identifier	double
>240	Identifier	callFunction
>241	Condition	 
>242	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>243	Identifier	mxDOUBLE_CLASS
>244	CallExpression	mxGetClassID ( prhs [ 0 ] )
>245	ArgumentList	prhs [ 0 ]
>246	Argument	prhs [ 0 ]
>247	ArrayIndexing	prhs [ 0 ]
>248	PrimaryExpression	0
>249	Identifier	prhs
>250	Callee	mxGetClassID
>251	Identifier	mxGetClassID
>252	IfStatement	if ( nlhs != 1 )
>253	ExpressionStatement	 
>254	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>255	ArgumentList	\"Bad number of output arguments\"
>256	Argument	\"Bad number of output arguments\"
>257	PrimaryExpression	\"Bad number of output arguments\"
>258	Callee	mexErrMsgTxt
>259	Identifier	mexErrMsgTxt
>260	Condition	 
>261	EqualityExpression	nlhs != 1
>262	PrimaryExpression	1
>263	Identifier	nlhs
>264	IfStatement	if ( nrhs != 2 )
>265	ExpressionStatement	 
>266	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>267	ArgumentList	\"Bad number of inputs arguments\"
>268	Argument	\"Bad number of inputs arguments\"
>269	PrimaryExpression	\"Bad number of inputs arguments\"
>270	Callee	mexErrMsgTxt
>271	Identifier	mexErrMsgTxt
>272	Condition	 
>273	EqualityExpression	nrhs != 2
>274	PrimaryExpression	2
>275	Identifier	nrhs
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=169,152,151,13,22,31,40,49,50,51,52,53,54,55,56,57,58,72,81,82,83,84,85,86,87,88,89,98,102,103,104,105,106,107,108,109,113,114,115,116,117,118,119,120,134,143,144,145,146,147,148,149,150
<13=14
<14=18,15
<15=16
<16=17
<18=19
<19=21,20
<22=23
<23=27,24
<24=25
<25=26
<27=28
<28=30,29
<31=32
<32=39,38,33
<33=37,34
<34=36,35
<40=41
<41=47,42
<42=43
<43=44
<44=46,45
<47=48
<58=59
<59=69,60
<60=68,61
<61=67,62
<62=64,63
<64=66,65
<69=71,70
<72=73
<73=79,74
<74=75
<75=76
<76=78,77
<79=80
<89=90
<90=97,96,91
<91=95,92
<92=94,93
<98=99
<99=101,100
<109=110
<110=112,111
<120=121
<121=133,132,122
<122=131,123
<123=129,124
<124=125
<125=126
<126=128,127
<129=130
<134=135
<135=141,136
<136=137
<137=138
<138=140,139
<141=142
<152=160,153
<153=154
<154=158,155
<155=156
<156=157
<158=159
<160=161
<161=167,162
<162=163
<163=164
<164=166,165
<167=168
<169=177,170
<170=171
<171=175,172
<172=173
<173=174
<175=176
<177=178
<178=184,179
<179=183,180
<180=182,181
<184=186,185
<205=220,219,206
<206=216,213,210,207
<207=209,208
<210=212,211
<213=215,214
<216=218,217
<220=264,252,221
<221=241,232,222
<222=223
<223=224
<224=225
<225=231,226
<226=230,227
<227=229,228
<232=233
<233=234
<234=240,235
<235=239,236
<236=238,237
<241=242
<242=244,243
<244=250,245
<245=246
<246=247
<247=249,248
<250=251
<252=260,253
<253=254
<254=258,255
<255=256
<256=257
<258=259
<260=261
<261=263,262
<264=272,265
<265=266
<266=270,267
<267=268
<268=269
<270=271
<272=273
<273=275,274
