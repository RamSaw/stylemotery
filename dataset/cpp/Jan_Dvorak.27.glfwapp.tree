>7	FunctionDef	Glfwapp 
>8	ParameterList	const char * title , Settings & settings
>9	Parameter	 
>10	Identifier	settings
>11	ParameterType	Settings &
>12	Parameter	 
>13	Identifier	title
>14	ParameterType	const char *
>15	CompoundStatement	 
>16	IfStatement	if ( m_letterboxed )
>17	ExpressionStatement	 
>18	AssignmentExpr	m_window_h = ( int ) ( w / fixed_ratio )
>19	CastExpression	( int ) ( w / fixed_ratio )
>20	MultiplicativeExpression	w / fixed_ratio
>21	Identifier	fixed_ratio
>22	Identifier	w
>23	CastTarget	int
>24	Identifier	m_window_h
>25	Condition	 
>26	Identifier	m_letterboxed
>27	ExpressionStatement	 
>28	AssignmentExpr	m_window_h = h
>29	Identifier	h
>30	Identifier	m_window_h
>31	ExpressionStatement	 
>32	AssignmentExpr	m_window_w = w
>33	Identifier	w
>34	Identifier	m_window_w
>35	ExpressionStatement	 
>36	CallExpression	glfwSetWindowTitle ( title )
>37	ArgumentList	title
>38	Argument	title
>39	Identifier	title
>40	Callee	glfwSetWindowTitle
>41	Identifier	glfwSetWindowTitle
>42	ExpressionStatement	 
>43	CallExpression	glfwDisable ( GLFW_MOUSE_CURSOR )
>44	ArgumentList	GLFW_MOUSE_CURSOR
>45	Argument	GLFW_MOUSE_CURSOR
>46	Identifier	GLFW_MOUSE_CURSOR
>47	Callee	glfwDisable
>48	Identifier	glfwDisable
>49	ExpressionStatement	 
>50	CallExpression	glfwEnable ( GLFW_KEY_REPEAT )
>51	ArgumentList	GLFW_KEY_REPEAT
>52	Argument	GLFW_KEY_REPEAT
>53	Identifier	GLFW_KEY_REPEAT
>54	Callee	glfwEnable
>55	Identifier	glfwEnable
>56	ExpressionStatement	 
>57	CallExpression	glfwEnable ( GLFW_SYSTEM_KEYS )
>58	ArgumentList	GLFW_SYSTEM_KEYS
>59	Argument	GLFW_SYSTEM_KEYS
>60	Identifier	GLFW_SYSTEM_KEYS
>61	Callee	glfwEnable
>62	Identifier	glfwEnable
>63	ExpressionStatement	 
>64	CallExpression	glfwEnable ( GLFW_STICKY_MOUSE_BUTTONS )
>65	ArgumentList	GLFW_STICKY_MOUSE_BUTTONS
>66	Argument	GLFW_STICKY_MOUSE_BUTTONS
>67	Identifier	GLFW_STICKY_MOUSE_BUTTONS
>68	Callee	glfwEnable
>69	Identifier	glfwEnable
>70	ExpressionStatement	 
>71	CallExpression	glfwEnable ( GLFW_STICKY_KEYS )
>72	ArgumentList	GLFW_STICKY_KEYS
>73	Argument	GLFW_STICKY_KEYS
>74	Identifier	GLFW_STICKY_KEYS
>75	Callee	glfwEnable
>76	Identifier	glfwEnable
>77	ExpressionStatement	 
>78	CallExpression	set_vsync ( )
>79	ArgumentList	 
>80	Callee	set_vsync
>81	Identifier	set_vsync
>82	ExpressionStatement	 
>83	AssignmentExpr	m_vsync = ( settings . m_vsync )
>84	MemberAccess	settings . m_vsync
>85	Identifier	m_vsync
>86	Identifier	settings
>87	Identifier	m_vsync
>88	IfStatement	if ( window_mode == GLFW_WINDOW )
>89	CompoundStatement	 
>90	ExpressionStatement	 
>91	CallExpression	glfwSetWindowPos ( ( int ) ( ( desktop_mode . Width - w ) / 2.0f ) , ( int ) ( ( desktop_mode . Height - h ) / 2.0f ) )
>92	ArgumentList	( int ) ( ( desktop_mode . Width - w ) / 2.0f )
>93	Argument	( int ) ( ( desktop_mode . Height - h ) / 2.0f )
>94	CastExpression	( int ) ( ( desktop_mode . Height - h ) / 2.0f )
>95	MultiplicativeExpression	( desktop_mode . Height - h ) / 2.0f
>96	PrimaryExpression	2.0f
>97	AdditiveExpression	desktop_mode . Height - h
>98	Identifier	h
>99	MemberAccess	desktop_mode . Height
>100	Identifier	Height
>101	Identifier	desktop_mode
>102	CastTarget	int
>103	Argument	( int ) ( ( desktop_mode . Width - w ) / 2.0f )
>104	CastExpression	( int ) ( ( desktop_mode . Width - w ) / 2.0f )
>105	MultiplicativeExpression	( desktop_mode . Width - w ) / 2.0f
>106	PrimaryExpression	2.0f
>107	AdditiveExpression	desktop_mode . Width - w
>108	Identifier	w
>109	MemberAccess	desktop_mode . Width
>110	Identifier	Width
>111	Identifier	desktop_mode
>112	CastTarget	int
>113	Callee	glfwSetWindowPos
>114	Identifier	glfwSetWindowPos
>115	ExpressionStatement	 
>116	CallExpression	glfwGetDesktopMode ( & desktop_mode )
>117	ArgumentList	& desktop_mode
>118	Argument	& desktop_mode
>119	UnaryOp	& desktop_mode
>120	Identifier	desktop_mode
>121	UnaryOperator	&
>122	Callee	glfwGetDesktopMode
>123	Identifier	glfwGetDesktopMode
>124	IdentifierDeclStatement	 
>125	IdentifierDecl	desktop_mode
>126	Identifier	desktop_mode
>127	IdentifierDeclType	GLFWvidmode
>128	Condition	 
>129	EqualityExpression	window_mode == GLFW_WINDOW
>130	Identifier	GLFW_WINDOW
>131	Identifier	window_mode
>132	ExpressionStatement	 
>133	CallExpression	assert ( res == GL_TRUE )
>134	ArgumentList	res == GL_TRUE
>135	Argument	res == GL_TRUE
>136	EqualityExpression	res == GL_TRUE
>137	Identifier	GL_TRUE
>138	Identifier	res
>139	Callee	assert
>140	Identifier	assert
>141	IfStatement	if ( res != GL_TRUE )
>142	CompoundStatement	 
>143	ExpressionStatement	 
>144	AssignmentExpr	settings . m_fsaa = 0
>145	PrimaryExpression	0
>146	MemberAccess	settings . m_fsaa
>147	Identifier	m_fsaa
>148	Identifier	settings
>149	ExpressionStatement	 
>150	AssignmentExpr	res = glfwOpenWindow ( w , h , 8 , 8 , 8 , 8 , 0 , 0 , window_mode )
>151	CallExpression	glfwOpenWindow ( w , h , 8 , 8 , 8 , 8 , 0 , 0 , window_mode )
>152	ArgumentList	w
>153	Argument	window_mode
>154	Identifier	window_mode
>155	Argument	0
>156	PrimaryExpression	0
>157	Argument	0
>158	PrimaryExpression	0
>159	Argument	8
>160	PrimaryExpression	8
>161	Argument	8
>162	PrimaryExpression	8
>163	Argument	8
>164	PrimaryExpression	8
>165	Argument	8
>166	PrimaryExpression	8
>167	Argument	h
>168	Identifier	h
>169	Argument	w
>170	Identifier	w
>171	Callee	glfwOpenWindow
>172	Identifier	glfwOpenWindow
>173	Identifier	res
>174	ExpressionStatement	 
>175	CallExpression	glfwOpenWindowHint ( GLFW_FSAA_SAMPLES , 0 )
>176	ArgumentList	GLFW_FSAA_SAMPLES
>177	Argument	0
>178	PrimaryExpression	0
>179	Argument	GLFW_FSAA_SAMPLES
>180	Identifier	GLFW_FSAA_SAMPLES
>181	Callee	glfwOpenWindowHint
>182	Identifier	glfwOpenWindowHint
>183	Condition	 
>184	EqualityExpression	res != GL_TRUE
>185	Identifier	GL_TRUE
>186	Identifier	res
>187	ExpressionStatement	 
>188	AssignmentExpr	res = glfwOpenWindow ( w , h , 8 , 8 , 8 , 8 , 0 , 0 , window_mode )
>189	CallExpression	glfwOpenWindow ( w , h , 8 , 8 , 8 , 8 , 0 , 0 , window_mode )
>190	ArgumentList	w
>191	Argument	window_mode
>192	Identifier	window_mode
>193	Argument	0
>194	PrimaryExpression	0
>195	Argument	0
>196	PrimaryExpression	0
>197	Argument	8
>198	PrimaryExpression	8
>199	Argument	8
>200	PrimaryExpression	8
>201	Argument	8
>202	PrimaryExpression	8
>203	Argument	8
>204	PrimaryExpression	8
>205	Argument	h
>206	Identifier	h
>207	Argument	w
>208	Identifier	w
>209	Callee	glfwOpenWindow
>210	Identifier	glfwOpenWindow
>211	Identifier	res
>212	ExpressionStatement	 
>213	CallExpression	glfwOpenWindowHint ( GLFW_WINDOW_NO_RESIZE , GL_TRUE )
>214	ArgumentList	GLFW_WINDOW_NO_RESIZE
>215	Argument	GL_TRUE
>216	Identifier	GL_TRUE
>217	Argument	GLFW_WINDOW_NO_RESIZE
>218	Identifier	GLFW_WINDOW_NO_RESIZE
>219	Callee	glfwOpenWindowHint
>220	Identifier	glfwOpenWindowHint
>221	ExpressionStatement	 
>222	CallExpression	glfwOpenWindowHint ( GLFW_FSAA_SAMPLES , settings . m_fsaa )
>223	ArgumentList	GLFW_FSAA_SAMPLES
>224	Argument	settings . m_fsaa
>225	MemberAccess	settings . m_fsaa
>226	Identifier	m_fsaa
>227	Identifier	settings
>228	Argument	GLFW_FSAA_SAMPLES
>229	Identifier	GLFW_FSAA_SAMPLES
>230	Callee	glfwOpenWindowHint
>231	Identifier	glfwOpenWindowHint
>232	IfStatement	if ( win_ratio < fixed_ratio )
>233	ElseStatement	else
>234	IfStatement	if ( win_ratio > fixed_ratio )
>235	ElseStatement	else
>236	CompoundStatement	 
>237	ExpressionStatement	 
>238	AssignmentExpr	m_letterboxed = false
>239	Identifier	false
>240	Identifier	m_letterboxed
>241	ExpressionStatement	 
>242	AssignmentExpr	m_viewport [ 3 ] = h
>243	Identifier	h
>244	ArrayIndexing	m_viewport [ 3 ]
>245	PrimaryExpression	3
>246	Identifier	m_viewport
>247	ExpressionStatement	 
>248	AssignmentExpr	m_viewport [ 2 ] = w
>249	Identifier	w
>250	ArrayIndexing	m_viewport [ 2 ]
>251	PrimaryExpression	2
>252	Identifier	m_viewport
>253	ExpressionStatement	 
>254	AssignmentExpr	m_viewport [ 1 ] = 0
>255	PrimaryExpression	0
>256	ArrayIndexing	m_viewport [ 1 ]
>257	PrimaryExpression	1
>258	Identifier	m_viewport
>259	ExpressionStatement	 
>260	AssignmentExpr	m_viewport [ 0 ] = 0
>261	PrimaryExpression	0
>262	ArrayIndexing	m_viewport [ 0 ]
>263	PrimaryExpression	0
>264	Identifier	m_viewport
>265	CompoundStatement	 
>266	ExpressionStatement	 
>267	AssignmentExpr	m_letterboxed = true
>268	Identifier	true
>269	Identifier	m_letterboxed
>270	ExpressionStatement	 
>271	AssignmentExpr	m_viewport [ 3 ] = h
>272	Identifier	h
>273	ArrayIndexing	m_viewport [ 3 ]
>274	PrimaryExpression	3
>275	Identifier	m_viewport
>276	ExpressionStatement	 
>277	AssignmentExpr	m_viewport [ 2 ] = new_w
>278	Identifier	new_w
>279	ArrayIndexing	m_viewport [ 2 ]
>280	PrimaryExpression	2
>281	Identifier	m_viewport
>282	ExpressionStatement	 
>283	AssignmentExpr	m_viewport [ 1 ] = 0
>284	PrimaryExpression	0
>285	ArrayIndexing	m_viewport [ 1 ]
>286	PrimaryExpression	1
>287	Identifier	m_viewport
>288	ExpressionStatement	 
>289	AssignmentExpr	m_viewport [ 0 ] = shift
>290	Identifier	shift
>291	ArrayIndexing	m_viewport [ 0 ]
>292	PrimaryExpression	0
>293	Identifier	m_viewport
>294	IdentifierDeclStatement	 
>295	IdentifierDecl	shift = ( int ) ( ( w - new_w ) / 2.0f )
>296	AssignmentExpr	shift = ( int ) ( ( w - new_w ) / 2.0f )
>297	CastExpression	( int ) ( ( w - new_w ) / 2.0f )
>298	MultiplicativeExpression	( w - new_w ) / 2.0f
>299	PrimaryExpression	2.0f
>300	AdditiveExpression	w - new_w
>301	Identifier	new_w
>302	Identifier	w
>303	CastTarget	int
>304	Identifier	shift
>305	Identifier	shift
>306	IdentifierDeclType	int
>307	IdentifierDeclStatement	 
>308	IdentifierDecl	new_w = ( int ) ( h * fixed_ratio )
>309	AssignmentExpr	new_w = ( int ) ( h * fixed_ratio )
>310	CastExpression	( int ) ( h * fixed_ratio )
>311	MultiplicativeExpression	h * fixed_ratio
>312	Identifier	fixed_ratio
>313	Identifier	h
>314	CastTarget	int
>315	Identifier	new_w
>316	Identifier	new_w
>317	IdentifierDeclType	int
>318	Condition	 
>319	RelationalExpression	win_ratio > fixed_ratio
>320	Identifier	fixed_ratio
>321	Identifier	win_ratio
>322	CompoundStatement	 
>323	ExpressionStatement	 
>324	AssignmentExpr	m_letterboxed = true
>325	Identifier	true
>326	Identifier	m_letterboxed
>327	ExpressionStatement	 
>328	AssignmentExpr	m_viewport [ 3 ] = new_h
>329	Identifier	new_h
>330	ArrayIndexing	m_viewport [ 3 ]
>331	PrimaryExpression	3
>332	Identifier	m_viewport
>333	ExpressionStatement	 
>334	AssignmentExpr	m_viewport [ 2 ] = w
>335	Identifier	w
>336	ArrayIndexing	m_viewport [ 2 ]
>337	PrimaryExpression	2
>338	Identifier	m_viewport
>339	ExpressionStatement	 
>340	AssignmentExpr	m_viewport [ 1 ] = shift
>341	Identifier	shift
>342	ArrayIndexing	m_viewport [ 1 ]
>343	PrimaryExpression	1
>344	Identifier	m_viewport
>345	ExpressionStatement	 
>346	AssignmentExpr	m_viewport [ 0 ] = 0
>347	PrimaryExpression	0
>348	ArrayIndexing	m_viewport [ 0 ]
>349	PrimaryExpression	0
>350	Identifier	m_viewport
>351	IdentifierDeclStatement	 
>352	IdentifierDecl	shift = ( int ) ( ( h - new_h ) / 2.0f )
>353	AssignmentExpr	shift = ( int ) ( ( h - new_h ) / 2.0f )
>354	CastExpression	( int ) ( ( h - new_h ) / 2.0f )
>355	MultiplicativeExpression	( h - new_h ) / 2.0f
>356	PrimaryExpression	2.0f
>357	AdditiveExpression	h - new_h
>358	Identifier	new_h
>359	Identifier	h
>360	CastTarget	int
>361	Identifier	shift
>362	Identifier	shift
>363	IdentifierDeclType	int
>364	IdentifierDeclStatement	 
>365	IdentifierDecl	new_h = ( int ) ( w / fixed_ratio )
>366	AssignmentExpr	new_h = ( int ) ( w / fixed_ratio )
>367	CastExpression	( int ) ( w / fixed_ratio )
>368	MultiplicativeExpression	w / fixed_ratio
>369	Identifier	fixed_ratio
>370	Identifier	w
>371	CastTarget	int
>372	Identifier	new_h
>373	Identifier	new_h
>374	IdentifierDeclType	int
>375	Condition	 
>376	RelationalExpression	win_ratio < fixed_ratio
>377	Identifier	fixed_ratio
>378	Identifier	win_ratio
>379	IdentifierDeclStatement	 
>380	IdentifierDecl	win_ratio = ( float ) w / ( float ) h
>381	AssignmentExpr	win_ratio = ( float ) w / ( float ) h
>382	MultiplicativeExpression	( float ) w / ( float ) h
>383	CastExpression	( float ) h
>384	Identifier	h
>385	CastTarget	float
>386	CastExpression	( float ) w
>387	Identifier	w
>388	CastTarget	float
>389	Identifier	win_ratio
>390	Identifier	win_ratio
>391	IdentifierDeclType	float
>392	IdentifierDeclStatement	 
>393	IdentifierDecl	window_mode = ( settings . m_fullscreen ? GLFW_FULLSCREEN 
>394	AssignmentExpr	window_mode = ( settings . m_fullscreen ? GLFW_FULLSCREEN 
>395	ConditionalExpression	settings . m_fullscreen ? GLFW_FULLSCREEN 
>396	Identifier	GLFW_WINDOW
>397	Identifier	GLFW_FULLSCREEN
>398	Condition	settings . m_fullscreen
>399	MemberAccess	settings . m_fullscreen
>400	Identifier	m_fullscreen
>401	Identifier	settings
>402	Identifier	window_mode
>403	Identifier	window_mode
>404	IdentifierDeclType	int
>405	IdentifierDeclStatement	 
>406	IdentifierDecl	h = settings . m_res_y
>407	AssignmentExpr	h = settings . m_res_y
>408	MemberAccess	settings . m_res_y
>409	Identifier	m_res_y
>410	Identifier	settings
>411	Identifier	h
>412	Identifier	h
>413	IdentifierDeclType	int
>414	IdentifierDeclStatement	 
>415	IdentifierDecl	w = settings . m_res_x
>416	AssignmentExpr	w = settings . m_res_x
>417	MemberAccess	settings . m_res_x
>418	Identifier	m_res_x
>419	Identifier	settings
>420	Identifier	w
>421	Identifier	w
>422	IdentifierDeclType	int
>423	IdentifierDeclStatement	 
>424	IdentifierDecl	fixed_ratio = 1.6f
>425	AssignmentExpr	fixed_ratio = 1.6f
>426	PrimaryExpression	1.6f
>427	Identifier	fixed_ratio
>428	Identifier	fixed_ratio
>429	IdentifierDeclType	float
>430	ExpressionStatement	 
>431	CallExpression	assert ( res == GL_TRUE )
>432	ArgumentList	res == GL_TRUE
>433	Argument	res == GL_TRUE
>434	EqualityExpression	res == GL_TRUE
>435	Identifier	GL_TRUE
>436	Identifier	res
>437	Callee	assert
>438	Identifier	assert
>439	IdentifierDeclStatement	 
>440	IdentifierDecl	res = glfwInit ( )
>441	AssignmentExpr	res = glfwInit ( )
>442	CallExpression	glfwInit ( )
>443	ArgumentList	 
>444	Callee	glfwInit
>445	Identifier	glfwInit
>446	Identifier	res
>447	Identifier	res
>448	IdentifierDeclType	int
>492	FunctionDef	Glfwapp 
>493	ParameterList	 
>494	ReturnType	void
>495	CompoundStatement	 
>496	IfStatement	if ( m_vsync )
>497	ExpressionStatement	 
>498	CallExpression	glfwSwapInterval ( 1 )
>499	ArgumentList	1
>500	Argument	1
>501	PrimaryExpression	1
>502	Callee	glfwSwapInterval
>503	Identifier	glfwSwapInterval
>504	Condition	 
>505	Identifier	m_vsync
>510	FunctionDef	Glfwapp 
>511	ParameterList	 
>512	ReturnType	void
>513	CompoundStatement	 
>514	ExpressionStatement	 
>515	CallExpression	glfwSwapInterval ( 0 )
>516	ArgumentList	0
>517	Argument	0
>518	PrimaryExpression	0
>519	Callee	glfwSwapInterval
>520	Identifier	glfwSwapInterval
>524	FunctionDef	Glfwapp 
>525	ParameterList	 
>526	CompoundStatement	 
>527	ExpressionStatement	 
>528	CallExpression	glfwTerminate ( )
>529	ArgumentList	 
>530	Callee	glfwTerminate
>531	Identifier	glfwTerminate
>532	ExpressionStatement	 
>533	CallExpression	glfwCloseWindow ( )
>534	ArgumentList	 
>535	Callee	glfwCloseWindow
>536	Identifier	glfwCloseWindow
>540	FunctionDef	Glfwapp 
>541	ParameterList	 
>542	ReturnType	void
>543	CompoundStatement	 
>544	IfStatement	if ( m_letterboxed )
>545	CompoundStatement	 
>546	ExpressionStatement	 
>547	CallExpression	glEnable ( GL_SCISSOR_TEST )
>548	ArgumentList	GL_SCISSOR_TEST
>549	Argument	GL_SCISSOR_TEST
>550	Identifier	GL_SCISSOR_TEST
>551	Callee	glEnable
>552	Identifier	glEnable
>553	ExpressionStatement	 
>554	CallExpression	glScissor ( m_viewport [ 0 ] , m_viewport [ 1 ] , m_viewport [ 2 ] , m_viewport [ 3 ] )
>555	ArgumentList	m_viewport [ 0 ]
>556	Argument	m_viewport [ 3 ]
>557	ArrayIndexing	m_viewport [ 3 ]
>558	PrimaryExpression	3
>559	Identifier	m_viewport
>560	Argument	m_viewport [ 2 ]
>561	ArrayIndexing	m_viewport [ 2 ]
>562	PrimaryExpression	2
>563	Identifier	m_viewport
>564	Argument	m_viewport [ 1 ]
>565	ArrayIndexing	m_viewport [ 1 ]
>566	PrimaryExpression	1
>567	Identifier	m_viewport
>568	Argument	m_viewport [ 0 ]
>569	ArrayIndexing	m_viewport [ 0 ]
>570	PrimaryExpression	0
>571	Identifier	m_viewport
>572	Callee	glScissor
>573	Identifier	glScissor
>574	Condition	 
>575	Identifier	m_letterboxed
>576	ExpressionStatement	 
>577	CallExpression	glViewport ( m_viewport [ 0 ] , m_viewport [ 1 ] , m_viewport [ 2 ] , m_viewport [ 3 ] )
>578	ArgumentList	m_viewport [ 0 ]
>579	Argument	m_viewport [ 3 ]
>580	ArrayIndexing	m_viewport [ 3 ]
>581	PrimaryExpression	3
>582	Identifier	m_viewport
>583	Argument	m_viewport [ 2 ]
>584	ArrayIndexing	m_viewport [ 2 ]
>585	PrimaryExpression	2
>586	Identifier	m_viewport
>587	Argument	m_viewport [ 1 ]
>588	ArrayIndexing	m_viewport [ 1 ]
>589	PrimaryExpression	1
>590	Identifier	m_viewport
>591	Argument	m_viewport [ 0 ]
>592	ArrayIndexing	m_viewport [ 0 ]
>593	PrimaryExpression	0
>594	Identifier	m_viewport
>595	Callee	glViewport
>596	Identifier	glViewport
>597	ExpressionStatement	 
>598	CallExpression	glClear ( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT )
>599	ArgumentList	GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT
>600	Argument	GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT
>601	InclusiveOrExpression	GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT
>602	Identifier	GL_DEPTH_BUFFER_BIT
>603	Identifier	GL_COLOR_BUFFER_BIT
>604	Callee	glClear
>605	Identifier	glClear
>606	ExpressionStatement	 
>607	CallExpression	glClearColor ( 0 , 0 , 0 , 255 )
>608	ArgumentList	0
>609	Argument	255
>610	PrimaryExpression	255
>611	Argument	0
>612	PrimaryExpression	0
>613	Argument	0
>614	PrimaryExpression	0
>615	Argument	0
>616	PrimaryExpression	0
>617	Callee	glClearColor
>618	Identifier	glClearColor
>619	IfStatement	if ( m_letterboxed )
>620	ExpressionStatement	 
>621	CallExpression	glDisable ( GL_SCISSOR_TEST )
>622	ArgumentList	GL_SCISSOR_TEST
>623	Argument	GL_SCISSOR_TEST
>624	Identifier	GL_SCISSOR_TEST
>625	Callee	glDisable
>626	Identifier	glDisable
>627	Condition	 
>628	Identifier	m_letterboxed
>638	FunctionDef	Glfwapp 
>639	ParameterList	 
>640	ReturnType	void
>641	CompoundStatement	 
>642	ExpressionStatement	 
>643	CallExpression	glLoadIdentity ( )
>644	ArgumentList	 
>645	Callee	glLoadIdentity
>646	Identifier	glLoadIdentity
>647	ExpressionStatement	 
>648	CallExpression	glMatrixMode ( GL_MODELVIEW )
>649	ArgumentList	GL_MODELVIEW
>650	Argument	GL_MODELVIEW
>651	Identifier	GL_MODELVIEW
>652	Callee	glMatrixMode
>653	Identifier	glMatrixMode
>654	ExpressionStatement	 
>655	AssignmentExpr	g_max_y = 1.0
>656	PrimaryExpression	1.0
>657	Identifier	g_max_y
>658	ExpressionStatement	 
>659	AssignmentExpr	g_max_x = m_window_w / ( float ) m_window_h
>660	MultiplicativeExpression	m_window_w / ( float ) m_window_h
>661	CastExpression	( float ) m_window_h
>662	Identifier	m_window_h
>663	CastTarget	float
>664	Identifier	m_window_w
>665	Identifier	g_max_x
>666	ExpressionStatement	 
>667	CallExpression	glOrtho ( 0 , ( float ) ( m_window_w / ( float ) m_window_h ) , 1.0 , 0 , - 1 , 1 )
>668	ArgumentList	0
>669	Argument	1
>670	PrimaryExpression	1
>671	Argument	- 1
>672	UnaryOp	- 1
>673	PrimaryExpression	1
>674	UnaryOperator	-
>675	Argument	0
>676	PrimaryExpression	0
>677	Argument	1.0
>678	PrimaryExpression	1.0
>679	Argument	( float ) ( m_window_w / ( float ) m_window_h )
>680	CastExpression	( float ) ( m_window_w / ( float ) m_window_h )
>681	MultiplicativeExpression	m_window_w / ( float ) m_window_h
>682	CastExpression	( float ) m_window_h
>683	Identifier	m_window_h
>684	CastTarget	float
>685	Identifier	m_window_w
>686	CastTarget	float
>687	Argument	0
>688	PrimaryExpression	0
>689	Callee	glOrtho
>690	Identifier	glOrtho
>691	ExpressionStatement	 
>692	CallExpression	glLoadIdentity ( )
>693	ArgumentList	 
>694	Callee	glLoadIdentity
>695	Identifier	glLoadIdentity
>696	ExpressionStatement	 
>697	CallExpression	glMatrixMode ( GL_PROJECTION )
>698	ArgumentList	GL_PROJECTION
>699	Argument	GL_PROJECTION
>700	Identifier	GL_PROJECTION
>701	Callee	glMatrixMode
>702	Identifier	glMatrixMode
>712	FunctionDef	Glfwapp 
>713	ParameterList	 
>714	ReturnType	bool
>715	CompoundStatement	 
>716	ReturnStatement	 
>717	EqualityExpression	glfwGetWindowParam ( GLFW_OPENED ) == GL_TRUE
>718	Identifier	GL_TRUE
>719	CallExpression	glfwGetWindowParam ( GLFW_OPENED )
>720	ArgumentList	GLFW_OPENED
>721	Argument	GLFW_OPENED
>722	Identifier	GLFW_OPENED
>723	Callee	glfwGetWindowParam
>724	Identifier	glfwGetWindowParam
>731	FunctionDef	Glfwapp 
>732	ParameterList	 
>733	ReturnType	bool
>734	CompoundStatement	 
>735	ReturnStatement	 
>736	UnaryOp	! window_opened ( )
>737	CallExpression	window_opened ( )
>738	ArgumentList	 
>739	Callee	window_opened
>740	Identifier	window_opened
>741	UnaryOperator	!
>746	FunctionDef	Glfwapp 
>747	ParameterList	 
>748	ReturnType	void
>749	CompoundStatement	 
>750	ExpressionStatement	 
>751	CallExpression	set_viewport ( )
>752	ArgumentList	 
>753	Callee	set_viewport
>754	Identifier	set_viewport
>755	ExpressionStatement	 
>756	CallExpression	glfwPollEvents ( )
>757	ArgumentList	 
>758	Callee	glfwPollEvents
>759	Identifier	glfwPollEvents
>763	FunctionDef	Glfwapp 
>764	ParameterList	 
>765	ReturnType	void
>766	CompoundStatement	 
>767	ExpressionStatement	 
>768	CallExpression	glfwSwapBuffers ( )
>769	ArgumentList	 
>770	Callee	glfwSwapBuffers
>771	Identifier	glfwSwapBuffers
<7=15,8
<8=12,9
<9=11,10
<12=14,13
<15=439,430,423,414,405,392,379,232,221,212,187,141,132,88,82,77,70,63,56,49,42,35,31,27,16
<16=25,17
<17=18
<18=24,19
<19=23,20
<20=22,21
<25=26
<27=28
<28=30,29
<31=32
<32=34,33
<35=36
<36=40,37
<37=38
<38=39
<40=41
<42=43
<43=47,44
<44=45
<45=46
<47=48
<49=50
<50=54,51
<51=52
<52=53
<54=55
<56=57
<57=61,58
<58=59
<59=60
<61=62
<63=64
<64=68,65
<65=66
<66=67
<68=69
<70=71
<71=75,72
<72=73
<73=74
<75=76
<77=78
<78=80,79
<80=81
<82=83
<83=87,84
<84=86,85
<88=128,89
<89=124,115,90
<90=91
<91=113,92
<92=103,93
<93=94
<94=102,95
<95=97,96
<97=99,98
<99=101,100
<103=104
<104=112,105
<105=107,106
<107=109,108
<109=111,110
<113=114
<115=116
<116=122,117
<117=118
<118=119
<119=121,120
<122=123
<124=125
<125=127,126
<128=129
<129=131,130
<132=133
<133=139,134
<134=135
<135=136
<136=138,137
<139=140
<141=183,142
<142=174,149,143
<143=144
<144=146,145
<146=148,147
<149=150
<150=173,151
<151=171,152
<152=169,167,165,163,161,159,157,155,153
<153=154
<155=156
<157=158
<159=160
<161=162
<163=164
<165=166
<167=168
<169=170
<171=172
<174=175
<175=181,176
<176=179,177
<177=178
<179=180
<181=182
<183=184
<184=186,185
<187=188
<188=211,189
<189=209,190
<190=207,205,203,201,199,197,195,193,191
<191=192
<193=194
<195=196
<197=198
<199=200
<201=202
<203=204
<205=206
<207=208
<209=210
<212=213
<213=219,214
<214=217,215
<215=216
<217=218
<219=220
<221=222
<222=230,223
<223=228,224
<224=225
<225=227,226
<228=229
<230=231
<232=375,322,233
<233=234
<234=318,265,235
<235=236
<236=259,253,247,241,237
<237=238
<238=240,239
<241=242
<242=244,243
<244=246,245
<247=248
<248=250,249
<250=252,251
<253=254
<254=256,255
<256=258,257
<259=260
<260=262,261
<262=264,263
<265=307,294,288,282,276,270,266
<266=267
<267=269,268
<270=271
<271=273,272
<273=275,274
<276=277
<277=279,278
<279=281,280
<282=283
<283=285,284
<285=287,286
<288=289
<289=291,290
<291=293,292
<294=295
<295=306,305,296
<296=304,297
<297=303,298
<298=300,299
<300=302,301
<307=308
<308=317,316,309
<309=315,310
<310=314,311
<311=313,312
<318=319
<319=321,320
<322=364,351,345,339,333,327,323
<323=324
<324=326,325
<327=328
<328=330,329
<330=332,331
<333=334
<334=336,335
<336=338,337
<339=340
<340=342,341
<342=344,343
<345=346
<346=348,347
<348=350,349
<351=352
<352=363,362,353
<353=361,354
<354=360,355
<355=357,356
<357=359,358
<364=365
<365=374,373,366
<366=372,367
<367=371,368
<368=370,369
<375=376
<376=378,377
<379=380
<380=391,390,381
<381=389,382
<382=386,383
<383=385,384
<386=388,387
<392=393
<393=404,403,394
<394=402,395
<395=398,397,396
<398=399
<399=401,400
<405=406
<406=413,412,407
<407=411,408
<408=410,409
<414=415
<415=422,421,416
<416=420,417
<417=419,418
<423=424
<424=429,428,425
<425=427,426
<430=431
<431=437,432
<432=433
<433=434
<434=436,435
<437=438
<439=440
<440=448,447,441
<441=446,442
<442=444,443
<444=445
<492=495,494,493
<495=496
<496=504,497
<497=498
<498=502,499
<499=500
<500=501
<502=503
<504=505
<510=513,512,511
<513=514
<514=515
<515=519,516
<516=517
<517=518
<519=520
<524=526,525
<526=532,527
<527=528
<528=530,529
<530=531
<532=533
<533=535,534
<535=536
<540=543,542,541
<543=619,606,597,576,544
<544=574,545
<545=553,546
<546=547
<547=551,548
<548=549
<549=550
<551=552
<553=554
<554=572,555
<555=568,564,560,556
<556=557
<557=559,558
<560=561
<561=563,562
<564=565
<565=567,566
<568=569
<569=571,570
<572=573
<574=575
<576=577
<577=595,578
<578=591,587,583,579
<579=580
<580=582,581
<583=584
<584=586,585
<587=588
<588=590,589
<591=592
<592=594,593
<595=596
<597=598
<598=604,599
<599=600
<600=601
<601=603,602
<604=605
<606=607
<607=617,608
<608=615,613,611,609
<609=610
<611=612
<613=614
<615=616
<617=618
<619=627,620
<620=621
<621=625,622
<622=623
<623=624
<625=626
<627=628
<638=641,640,639
<641=696,691,666,658,654,647,642
<642=643
<643=645,644
<645=646
<647=648
<648=652,649
<649=650
<650=651
<652=653
<654=655
<655=657,656
<658=659
<659=665,660
<660=664,661
<661=663,662
<666=667
<667=689,668
<668=687,679,677,675,671,669
<669=670
<671=672
<672=674,673
<675=676
<677=678
<679=680
<680=686,681
<681=685,682
<682=684,683
<687=688
<689=690
<691=692
<692=694,693
<694=695
<696=697
<697=701,698
<698=699
<699=700
<701=702
<712=715,714,713
<715=716
<716=717
<717=719,718
<719=723,720
<720=721
<721=722
<723=724
<731=734,733,732
<734=735
<735=736
<736=741,737
<737=739,738
<739=740
<746=749,748,747
<749=755,750
<750=751
<751=753,752
<753=754
<755=756
<756=758,757
<758=759
<763=766,765,764
<766=767
<767=768
<768=770,769
<770=771
