>3	FunctionDef	HSitem 
>4	ParameterList	const string & name , int score , bool builtin
>5	Parameter	 
>6	Identifier	builtin
>7	ParameterType	bool
>8	Parameter	 
>9	Identifier	score
>10	ParameterType	int
>11	Parameter	 
>12	Identifier	name
>13	ParameterType	const string &
>14	CompoundStatement	 
>21	FunctionDef	HSitem 
>22	ParameterList	 
>23	CompoundStatement	 
>27	FunctionDef	HiScore 
>28	ParameterList	const string & fname
>29	Parameter	 
>30	Identifier	fname
>31	ParameterType	const string &
>32	CompoundStatement	 
>33	ExpressionStatement	 
>34	CallExpression	read_from_file ( )
>35	ArgumentList	 
>36	Callee	read_from_file
>37	Identifier	read_from_file
>38	ExpressionStatement	 
>39	CallExpression	add_highscore ( \"iq/RGBA\" , 10000 , true )
>40	ArgumentList	\"iq/RGBA\"
>41	Argument	true
>42	Identifier	true
>43	Argument	10000
>44	PrimaryExpression	10000
>45	Argument	\"iq/RGBA\"
>46	PrimaryExpression	\"iq/RGBA\"
>47	Callee	add_highscore
>48	Identifier	add_highscore
>49	ExpressionStatement	 
>50	CallExpression	add_highscore ( \"SQNY\" , 9000 , true )
>51	ArgumentList	\"SQNY\"
>52	Argument	true
>53	Identifier	true
>54	Argument	9000
>55	PrimaryExpression	9000
>56	Argument	\"SQNY\"
>57	PrimaryExpression	\"SQNY\"
>58	Callee	add_highscore
>59	Identifier	add_highscore
>60	ExpressionStatement	 
>61	CallExpression	add_highscore ( \"rrrola\" , 8000 , true )
>62	ArgumentList	\"rrrola\"
>63	Argument	true
>64	Identifier	true
>65	Argument	8000
>66	PrimaryExpression	8000
>67	Argument	\"rrrola\"
>68	PrimaryExpression	\"rrrola\"
>69	Callee	add_highscore
>70	Identifier	add_highscore
>71	ExpressionStatement	 
>72	CallExpression	add_highscore ( \"Navis\" , 7000 , true )
>73	ArgumentList	\"Navis\"
>74	Argument	true
>75	Identifier	true
>76	Argument	7000
>77	PrimaryExpression	7000
>78	Argument	\"Navis\"
>79	PrimaryExpression	\"Navis\"
>80	Callee	add_highscore
>81	Identifier	add_highscore
>82	ExpressionStatement	 
>83	CallExpression	add_highscore ( \"Tigrou\" , 6000 , true )
>84	ArgumentList	\"Tigrou\"
>85	Argument	true
>86	Identifier	true
>87	Argument	6000
>88	PrimaryExpression	6000
>89	Argument	\"Tigrou\"
>90	PrimaryExpression	\"Tigrou\"
>91	Callee	add_highscore
>92	Identifier	add_highscore
>93	ExpressionStatement	 
>94	CallExpression	add_highscore ( \"BitFellas\" , 5000 , true )
>95	ArgumentList	\"BitFellas\"
>96	Argument	true
>97	Identifier	true
>98	Argument	5000
>99	PrimaryExpression	5000
>100	Argument	\"BitFellas\"
>101	PrimaryExpression	\"BitFellas\"
>102	Callee	add_highscore
>103	Identifier	add_highscore
>104	ExpressionStatement	 
>105	CallExpression	add_highscore ( \"Farbrausch\" , 4000 , true )
>106	ArgumentList	\"Farbrausch\"
>107	Argument	true
>108	Identifier	true
>109	Argument	4000
>110	PrimaryExpression	4000
>111	Argument	\"Farbrausch\"
>112	PrimaryExpression	\"Farbrausch\"
>113	Callee	add_highscore
>114	Identifier	add_highscore
>115	ExpressionStatement	 
>116	CallExpression	add_highscore ( \"mfx\" , 3000 , true )
>117	ArgumentList	\"mfx\"
>118	Argument	true
>119	Identifier	true
>120	Argument	3000
>121	PrimaryExpression	3000
>122	Argument	\"mfx\"
>123	PrimaryExpression	\"mfx\"
>124	Callee	add_highscore
>125	Identifier	add_highscore
>126	ExpressionStatement	 
>127	CallExpression	add_highscore ( \"texel\" , 2000 , true )
>128	ArgumentList	\"texel\"
>129	Argument	true
>130	Identifier	true
>131	Argument	2000
>132	PrimaryExpression	2000
>133	Argument	\"texel\"
>134	PrimaryExpression	\"texel\"
>135	Callee	add_highscore
>136	Identifier	add_highscore
>137	ExpressionStatement	 
>138	CallExpression	add_highscore ( \"sigflup\" , 1000 , true )
>139	ArgumentList	\"sigflup\"
>140	Argument	true
>141	Identifier	true
>142	Argument	1000
>143	PrimaryExpression	1000
>144	Argument	\"sigflup\"
>145	PrimaryExpression	\"sigflup\"
>146	Callee	add_highscore
>147	Identifier	add_highscore
>148	ForStatement	for ( int i = 0 ; i < NUMSCORES ; ++ i )
>149	ExpressionStatement	 
>150	AssignmentExpr	m_scores [ i ] = HSitem ( \"\" , 0 , true )
>151	CallExpression	HSitem ( \"\" , 0 , true )
>152	ArgumentList	\"\"
>153	Argument	true
>154	Identifier	true
>155	Argument	0
>156	PrimaryExpression	0
>157	Argument	\"\"
>158	PrimaryExpression	\"\"
>159	Callee	HSitem
>160	Identifier	HSitem
>161	ArrayIndexing	m_scores [ i ]
>162	Identifier	i
>163	Identifier	m_scores
>164	UnaryExpression	 
>165	Identifier	i
>166	IncDec	++
>167	Condition	 
>168	RelationalExpression	i < NUMSCORES
>169	Identifier	NUMSCORES
>170	Identifier	i
>171	ForInit	 
>172	IdentifierDeclStatement	int i = 0 ;
>173	IdentifierDecl	i = 0
>174	AssignmentExpr	i = 0
>175	PrimaryExpression	0
>176	Identifier	i
>177	Identifier	i
>178	IdentifierDeclType	int
>190	FunctionDef	HiScore 
>191	ParameterList	 
>192	ReturnType	void
>193	CompoundStatement	 
>194	ExpressionStatement	 
>195	CallExpression	font -> finish_drawing ( )
>196	ArgumentList	 
>197	Callee	font -> finish_drawing
>198	PtrMemberAccess	font -> finish_drawing
>199	Identifier	finish_drawing
>200	Identifier	font
>201	ForStatement	for ( int i = 0 ; i < NUMSCORES ; ++ i )
>202	CompoundStatement	 
>203	ExpressionStatement	 
>204	CallExpression	font -> print_text ( score , vec2 ( end - font -> size_of_text ( score , font_size ) , y_pos ) , font_size , false , \
>205	ArgumentList	score
>206	Argument	color
>207	Identifier	color
>208	Argument	false
>209	Identifier	false
>210	Argument	font_size
>211	Identifier	font_size
>212	Argument	vec2 ( end - font -> size_of_text ( score , font_size ) , y_pos )
>213	CallExpression	vec2 ( end - font -> size_of_text ( score , font_size ) , y_pos )
>214	ArgumentList	end - font -> size_of_text ( score , font_size )
>215	Argument	y_pos
>216	Identifier	y_pos
>217	Argument	end - font -> size_of_text ( score , font_size )
>218	AdditiveExpression	end - font -> size_of_text ( score , font_size )
>219	CallExpression	font -> size_of_text ( score , font_size )
>220	ArgumentList	score
>221	Argument	font_size
>222	Identifier	font_size
>223	Argument	score
>224	Identifier	score
>225	Callee	font -> size_of_text
>226	PtrMemberAccess	font -> size_of_text
>227	Identifier	size_of_text
>228	Identifier	font
>229	Identifier	end
>230	Callee	vec2
>231	Identifier	vec2
>232	Argument	score
>233	Identifier	score
>234	Callee	font -> print_text
>235	PtrMemberAccess	font -> print_text
>236	Identifier	print_text
>237	Identifier	font
>238	ExpressionStatement	 
>239	CallExpression	font -> print_text ( line , vec2 ( start , y_pos ) , font_size , false , color )
>240	ArgumentList	line
>241	Argument	color
>242	Identifier	color
>243	Argument	false
>244	Identifier	false
>245	Argument	font_size
>246	Identifier	font_size
>247	Argument	vec2 ( start , y_pos )
>248	CallExpression	vec2 ( start , y_pos )
>249	ArgumentList	start
>250	Argument	y_pos
>251	Identifier	y_pos
>252	Argument	start
>253	Identifier	start
>254	Callee	vec2
>255	Identifier	vec2
>256	Argument	line
>257	Identifier	line
>258	Callee	font -> print_text
>259	PtrMemberAccess	font -> print_text
>260	Identifier	print_text
>261	Identifier	font
>262	IdentifierDeclStatement	 
>263	IdentifierDecl	y_pos = y_start + y_step * i
>264	AssignmentExpr	y_pos = y_start + y_step * i
>265	AdditiveExpression	y_start + y_step * i
>266	MultiplicativeExpression	y_step * i
>267	Identifier	i
>268	Identifier	y_step
>269	Identifier	y_start
>270	Identifier	y_pos
>271	Identifier	y_pos
>272	IdentifierDeclType	float
>273	ExpressionStatement	 
>274	AssignmentExpr	color = vec4 ( 1.0 - i / 9.0 , 1.0 , i / 9.0 , 1.0 )
>275	CallExpression	vec4 ( 1.0 - i / 9.0 , 1.0 , i / 9.0 , 1.0 )
>276	ArgumentList	1.0 - i / 9.0
>277	Argument	1.0
>278	PrimaryExpression	1.0
>279	Argument	i / 9.0
>280	MultiplicativeExpression	i / 9.0
>281	PrimaryExpression	9.0
>282	Identifier	i
>283	Argument	1.0
>284	PrimaryExpression	1.0
>285	Argument	1.0 - i / 9.0
>286	AdditiveExpression	1.0 - i / 9.0
>287	MultiplicativeExpression	i / 9.0
>288	PrimaryExpression	9.0
>289	Identifier	i
>290	PrimaryExpression	1.0
>291	Callee	vec4
>292	Identifier	vec4
>293	Identifier	color
>294	ForStatement	for ( int j = 0 ; j < dots ; ++ j )
>295	ExpressionStatement	 
>296	CallExpression	strcat ( line , \".\" )
>297	ArgumentList	line
>298	Argument	\".\"
>299	PrimaryExpression	\".\"
>300	Argument	line
>301	Identifier	line
>302	Callee	strcat
>303	Identifier	strcat
>304	UnaryExpression	 
>305	Identifier	j
>306	IncDec	++
>307	Condition	 
>308	RelationalExpression	j < dots
>309	Identifier	dots
>310	Identifier	j
>311	ForInit	 
>312	IdentifierDeclStatement	int j = 0 ;
>313	IdentifierDecl	j = 0
>314	AssignmentExpr	j = 0
>315	PrimaryExpression	0
>316	Identifier	j
>317	Identifier	j
>318	IdentifierDeclType	int
>319	IdentifierDeclStatement	 
>320	IdentifierDecl	dots = ( width - textsize ) / dotsize
>321	AssignmentExpr	dots = ( width - textsize ) / dotsize
>322	MultiplicativeExpression	( width - textsize ) / dotsize
>323	Identifier	dotsize
>324	AdditiveExpression	width - textsize
>325	Identifier	textsize
>326	Identifier	width
>327	Identifier	dots
>328	Identifier	dots
>329	IdentifierDeclType	int
>330	IdentifierDeclStatement	 
>331	IdentifierDecl	textsize = font -> size_of_text ( line , font_size ) + font -> size_of_text ( score , font_size )
>332	AssignmentExpr	textsize = font -> size_of_text ( line , font_size ) + font -> size_of_text ( score , font_size )
>333	AdditiveExpression	font -> size_of_text ( line , font_size ) + font -> size_of_text ( score , font_size )
>334	CallExpression	font -> size_of_text ( score , font_size )
>335	ArgumentList	score
>336	Argument	font_size
>337	Identifier	font_size
>338	Argument	score
>339	Identifier	score
>340	Callee	font -> size_of_text
>341	PtrMemberAccess	font -> size_of_text
>342	Identifier	size_of_text
>343	Identifier	font
>344	CallExpression	font -> size_of_text ( line , font_size )
>345	ArgumentList	line
>346	Argument	font_size
>347	Identifier	font_size
>348	Argument	line
>349	Identifier	line
>350	Callee	font -> size_of_text
>351	PtrMemberAccess	font -> size_of_text
>352	Identifier	size_of_text
>353	Identifier	font
>354	Identifier	textsize
>355	Identifier	textsize
>356	IdentifierDeclType	float
>357	ExpressionStatement	 
>358	CallExpression	sprintf ( score , \"%i\" , m_scores [ i ] . m_score )
>359	ArgumentList	score
>360	Argument	m_scores [ i ] . m_score
>361	MemberAccess	m_scores [ i ] . m_score
>362	Identifier	m_score
>363	ArrayIndexing	m_scores [ i ]
>364	Identifier	i
>365	Identifier	m_scores
>366	Argument	\"%i\"
>367	PrimaryExpression	\"%i\"
>368	Argument	score
>369	Identifier	score
>370	Callee	sprintf
>371	Identifier	sprintf
>372	ExpressionStatement	 
>373	CallExpression	strcpy ( line , m_scores [ i ] . m_name . c_str ( ) )
>374	ArgumentList	line
>375	Argument	m_scores [ i ] . m_name . c_str ( )
>376	CallExpression	m_scores [ i ] . m_name . c_str ( )
>377	ArgumentList	 
>378	Callee	m_scores [ i ] . m_name . c_str
>379	MemberAccess	m_scores [ i ] . m_name . c_str
>380	Identifier	c_str
>381	MemberAccess	m_scores [ i ] . m_name
>382	Identifier	m_name
>383	ArrayIndexing	m_scores [ i ]
>384	Identifier	i
>385	Identifier	m_scores
>386	Argument	line
>387	Identifier	line
>388	Callee	strcpy
>389	Identifier	strcpy
>390	IdentifierDeclStatement	 
>391	IdentifierDecl	score [ 64 ]
>392	PrimaryExpression	64
>393	Identifier	score
>394	IdentifierDeclType	char [ 64 ]
>395	IdentifierDeclStatement	 
>396	IdentifierDecl	line [ 256 ]
>397	PrimaryExpression	256
>398	Identifier	line
>399	IdentifierDeclType	char [ 256 ]
>400	UnaryExpression	 
>401	Identifier	i
>402	IncDec	++
>403	Condition	 
>404	RelationalExpression	i < NUMSCORES
>405	Identifier	NUMSCORES
>406	Identifier	i
>407	ForInit	 
>408	IdentifierDeclStatement	int i = 0 ;
>409	IdentifierDecl	i = 0
>410	AssignmentExpr	i = 0
>411	PrimaryExpression	0
>412	Identifier	i
>413	Identifier	i
>414	IdentifierDeclType	int
>415	ExpressionStatement	 
>416	CallExpression	font -> print_text_with_shadow ( \"High scores\" , vec2 ( 0.0 + 0.002 , 0.29 + 0.003 ) , 1.5 , true , vec4 ( 1.0 , \
>417	ArgumentList	\"High scores\"
>418	Argument	vec4 ( 1.0 , 1.0 , 0.0 , 1.0 )
>419	CallExpression	vec4 ( 1.0 , 1.0 , 0.0 , 1.0 )
>420	ArgumentList	1.0
>421	Argument	1.0
>422	PrimaryExpression	1.0
>423	Argument	0.0
>424	PrimaryExpression	0.0
>425	Argument	1.0
>426	PrimaryExpression	1.0
>427	Argument	1.0
>428	PrimaryExpression	1.0
>429	Callee	vec4
>430	Identifier	vec4
>431	Argument	true
>432	Identifier	true
>433	Argument	1.5
>434	PrimaryExpression	1.5
>435	Argument	vec2 ( 0.0 + 0.002 , 0.29 + 0.003 )
>436	CallExpression	vec2 ( 0.0 + 0.002 , 0.29 + 0.003 )
>437	ArgumentList	0.0 + 0.002
>438	Argument	0.29 + 0.003
>439	AdditiveExpression	0.29 + 0.003
>440	PrimaryExpression	0.003
>441	PrimaryExpression	0.29
>442	Argument	0.0 + 0.002
>443	AdditiveExpression	0.0 + 0.002
>444	PrimaryExpression	0.002
>445	PrimaryExpression	0.0
>446	Callee	vec2
>447	Identifier	vec2
>448	Argument	\"High scores\"
>449	PrimaryExpression	\"High scores\"
>450	Callee	font -> print_text_with_shadow
>451	PtrMemberAccess	font -> print_text_with_shadow
>452	Identifier	print_text_with_shadow
>453	Identifier	font
>454	IdentifierDeclStatement	 
>455	IdentifierDecl	color
>456	Identifier	color
>457	IdentifierDeclType	vec4
>458	IdentifierDeclStatement	 
>459	IdentifierDecl	dotsize = font -> size_of_text ( \".\" , font_size )
>460	AssignmentExpr	dotsize = font -> size_of_text ( \".\" , font_size )
>461	CallExpression	font -> size_of_text ( \".\" , font_size )
>462	ArgumentList	\".\"
>463	Argument	font_size
>464	Identifier	font_size
>465	Argument	\".\"
>466	PrimaryExpression	\".\"
>467	Callee	font -> size_of_text
>468	PtrMemberAccess	font -> size_of_text
>469	Identifier	size_of_text
>470	Identifier	font
>471	Identifier	dotsize
>472	Identifier	dotsize
>473	IdentifierDeclType	float
>474	IdentifierDeclStatement	 
>475	IdentifierDecl	font_size = 1.0
>476	AssignmentExpr	font_size = 1.0
>477	PrimaryExpression	1.0
>478	Identifier	font_size
>479	Identifier	font_size
>480	IdentifierDeclType	float
>481	IdentifierDeclStatement	 
>482	IdentifierDecl	y_step = 0.05
>483	AssignmentExpr	y_step = 0.05
>484	PrimaryExpression	0.05
>485	Identifier	y_step
>486	Identifier	y_step
>487	IdentifierDeclType	float
>488	IdentifierDeclStatement	 
>489	IdentifierDecl	y_start = 0.38
>490	AssignmentExpr	y_start = 0.38
>491	PrimaryExpression	0.38
>492	Identifier	y_start
>493	Identifier	y_start
>494	IdentifierDeclType	float
>495	IdentifierDeclStatement	 
>496	IdentifierDecl	end = start + width
>497	AssignmentExpr	end = start + width
>498	AdditiveExpression	start + width
>499	Identifier	width
>500	Identifier	start
>501	Identifier	end
>502	Identifier	end
>503	IdentifierDeclType	float
>504	IdentifierDeclStatement	 
>505	IdentifierDecl	start = ( 1.6 - width ) / 2.0
>506	AssignmentExpr	start = ( 1.6 - width ) / 2.0
>507	MultiplicativeExpression	( 1.6 - width ) / 2.0
>508	PrimaryExpression	2.0
>509	AdditiveExpression	1.6 - width
>510	Identifier	width
>511	PrimaryExpression	1.6
>512	Identifier	start
>513	Identifier	start
>514	IdentifierDeclType	float
>515	IdentifierDeclStatement	 
>516	IdentifierDecl	width = 0.8
>517	AssignmentExpr	width = 0.8
>518	PrimaryExpression	0.8
>519	Identifier	width
>520	Identifier	width
>521	IdentifierDeclType	float
>522	ExpressionStatement	 
>523	CallExpression	font -> setup_drawing ( )
>524	ArgumentList	 
>525	Callee	font -> setup_drawing
>526	PtrMemberAccess	font -> setup_drawing
>527	Identifier	setup_drawing
>528	Identifier	font
>529	IdentifierDeclStatement	 
>530	IdentifierDecl	* font = g_resources . font
>531	AssignmentExpr	* font = g_resources . font
>532	MemberAccess	g_resources . font
>533	Identifier	font
>534	Identifier	g_resources
>535	Identifier	font
>536	Identifier	font
>537	IdentifierDeclType	MFont *
>572	FunctionDef	xor_buffer (unsigned char * buf , int size , unsigned char xorvalue)
>573	ParameterList	unsigned char * buf , int size , unsigned char xorvalue
>574	Parameter	 
>575	Identifier	xorvalue
>576	ParameterType	unsigned char
>577	Parameter	 
>578	Identifier	size
>579	ParameterType	int
>580	Parameter	 
>581	Identifier	buf
>582	ParameterType	unsigned char *
>583	ReturnType	void
>584	CompoundStatement	 
>585	ForStatement	for ( int i = 0 ; i < size ; ++ i )
>586	ExpressionStatement	 
>587	AssignmentExpr	buf [ i ] ^= xorvalue
>588	Identifier	xorvalue
>589	ArrayIndexing	buf [ i ]
>590	Identifier	i
>591	Identifier	buf
>592	UnaryExpression	 
>593	Identifier	i
>594	IncDec	++
>595	Condition	 
>596	RelationalExpression	i < size
>597	Identifier	size
>598	Identifier	i
>599	ForInit	 
>600	IdentifierDeclStatement	int i = 0 ;
>601	IdentifierDecl	i = 0
>602	AssignmentExpr	i = 0
>603	PrimaryExpression	0
>604	Identifier	i
>605	Identifier	i
>606	IdentifierDeclType	int
>616	FunctionDef	calc_crc (unsigned char * buf , int size)
>617	ParameterList	unsigned char * buf , int size
>618	Parameter	 
>619	Identifier	size
>620	ParameterType	int
>621	Parameter	 
>622	Identifier	buf
>623	ParameterType	unsigned char *
>624	ReturnType	int
>625	CompoundStatement	 
>626	ReturnStatement	 
>627	Identifier	crc
>628	ForStatement	for ( int i = 0 ; i < size ; ++ i )
>629	ExpressionStatement	 
>630	AssignmentExpr	crc ^= buf [ i ]
>631	ArrayIndexing	buf [ i ]
>632	Identifier	i
>633	Identifier	buf
>634	Identifier	crc
>635	UnaryExpression	 
>636	Identifier	i
>637	IncDec	++
>638	Condition	 
>639	RelationalExpression	i < size
>640	Identifier	size
>641	Identifier	i
>642	ForInit	 
>643	IdentifierDeclStatement	int i = 0 ;
>644	IdentifierDecl	i = 0
>645	AssignmentExpr	i = 0
>646	PrimaryExpression	0
>647	Identifier	i
>648	Identifier	i
>649	IdentifierDeclType	int
>650	IdentifierDeclStatement	 
>651	IdentifierDecl	crc = 0
>652	AssignmentExpr	crc = 0
>653	PrimaryExpression	0
>654	Identifier	crc
>655	Identifier	crc
>656	IdentifierDeclType	int
>666	FunctionDef	HiScore 
>667	ParameterList	 
>668	ReturnType	void
>669	CompoundStatement	 
>670	ForStatement	for ( int i = 0 ; i < NUMSCORES ; ++ i )
>671	CompoundStatement	 
>672	ExpressionStatement	 
>673	CallExpression	add_highscore ( name , score , false )
>674	ArgumentList	name
>675	Argument	false
>676	Identifier	false
>677	Argument	score
>678	Identifier	score
>679	Argument	name
>680	Identifier	name
>681	Callee	add_highscore
>682	Identifier	add_highscore
>683	IfStatement	if ( crc != stored_crc )
>684	ContinueStatement	 
>685	Condition	 
>686	EqualityExpression	crc != stored_crc
>687	Identifier	stored_crc
>688	Identifier	crc
>689	IdentifierDeclStatement	 
>690	IdentifierDecl	crc = calc_crc ( buffer + pos - 16 , 15 )
>691	AssignmentExpr	crc = calc_crc ( buffer + pos - 16 , 15 )
>692	CallExpression	calc_crc ( buffer + pos - 16 , 15 )
>693	ArgumentList	buffer + pos - 16
>694	Argument	15
>695	PrimaryExpression	15
>696	Argument	buffer + pos - 16
>697	AdditiveExpression	buffer + pos - 16
>698	AdditiveExpression	pos - 16
>699	PrimaryExpression	16
>700	Identifier	pos
>701	Identifier	buffer
>702	Callee	calc_crc
>703	Identifier	calc_crc
>704	Identifier	crc
>705	Identifier	crc
>706	IdentifierDeclType	int
>707	IdentifierDeclStatement	 
>708	IdentifierDecl	stored_crc = buffer [ pos ++ ]
>709	AssignmentExpr	stored_crc = buffer [ pos ++ ]
>710	ArrayIndexing	buffer [ pos ++ ]
>711	IncDecOp	pos ++
>712	IncDec	++
>713	Identifier	pos
>714	Identifier	buffer
>715	Identifier	stored_crc
>716	Identifier	stored_crc
>717	IdentifierDeclType	int
>718	ExpressionStatement	 
>719	AssignmentExpr	score += ( buffer [ pos ++ ] ) << 16
>720	ShiftExpression	( buffer [ pos ++ ] ) << 16
>721	PrimaryExpression	16
>722	ArrayIndexing	buffer [ pos ++ ]
>723	IncDecOp	pos ++
>724	IncDec	++
>725	Identifier	pos
>726	Identifier	buffer
>727	Identifier	score
>728	ExpressionStatement	 
>729	AssignmentExpr	score += ( buffer [ pos ++ ] ) << 8
>730	ShiftExpression	( buffer [ pos ++ ] ) << 8
>731	PrimaryExpression	8
>732	ArrayIndexing	buffer [ pos ++ ]
>733	IncDecOp	pos ++
>734	IncDec	++
>735	Identifier	pos
>736	Identifier	buffer
>737	Identifier	score
>738	ExpressionStatement	 
>739	AssignmentExpr	score += buffer [ pos ++ ]
>740	ArrayIndexing	buffer [ pos ++ ]
>741	IncDecOp	pos ++
>742	IncDec	++
>743	Identifier	pos
>744	Identifier	buffer
>745	Identifier	score
>746	ExpressionStatement	 
>747	AssignmentExpr	pos += 16
>748	PrimaryExpression	16
>749	Identifier	pos
>750	ExpressionStatement	 
>751	CallExpression	memcpy ( name , buffer + pos , 16 )
>752	ArgumentList	name
>753	Argument	16
>754	PrimaryExpression	16
>755	Argument	buffer + pos
>756	AdditiveExpression	buffer + pos
>757	Identifier	pos
>758	Identifier	buffer
>759	Argument	name
>760	Identifier	name
>761	Callee	memcpy
>762	Identifier	memcpy
>763	IdentifierDeclStatement	 
>764	IdentifierDecl	name [ 17 ] = { 0 }
>765	AssignmentExpr	name [ 17 ] = { 0 }
>766	InitializerList	0
>767	PrimaryExpression	0
>768	Identifier	name
>769	PrimaryExpression	17
>770	Identifier	name
>771	IdentifierDeclType	char [ 17 ]
>772	IdentifierDeclStatement	 
>773	IdentifierDecl	score = 0
>774	AssignmentExpr	score = 0
>775	PrimaryExpression	0
>776	Identifier	score
>777	Identifier	score
>778	IdentifierDeclType	int
>779	UnaryExpression	 
>780	Identifier	i
>781	IncDec	++
>782	Condition	 
>783	RelationalExpression	i < NUMSCORES
>784	Identifier	NUMSCORES
>785	Identifier	i
>786	ForInit	 
>787	IdentifierDeclStatement	int i = 0 ;
>788	IdentifierDecl	i = 0
>789	AssignmentExpr	i = 0
>790	PrimaryExpression	0
>791	Identifier	i
>792	Identifier	i
>793	IdentifierDeclType	int
>794	IdentifierDeclStatement	 
>795	IdentifierDecl	pos = 0
>796	AssignmentExpr	pos = 0
>797	PrimaryExpression	0
>798	Identifier	pos
>799	Identifier	pos
>800	IdentifierDeclType	int
>801	ExpressionStatement	 
>802	CallExpression	xor_buffer ( buffer , readbytes , XORVALUE )
>803	ArgumentList	buffer
>804	Argument	XORVALUE
>805	Identifier	XORVALUE
>806	Argument	readbytes
>807	Identifier	readbytes
>808	Argument	buffer
>809	Identifier	buffer
>810	Callee	xor_buffer
>811	Identifier	xor_buffer
>812	ExpressionStatement	 
>813	CallExpression	fclose ( f )
>814	ArgumentList	f
>815	Argument	f
>816	Identifier	f
>817	Callee	fclose
>818	Identifier	fclose
>819	IdentifierDeclStatement	 
>820	IdentifierDecl	readbytes = fread ( buffer , 1 , bsize , f )
>821	AssignmentExpr	readbytes = fread ( buffer , 1 , bsize , f )
>822	CallExpression	fread ( buffer , 1 , bsize , f )
>823	ArgumentList	buffer
>824	Argument	f
>825	Identifier	f
>826	Argument	bsize
>827	Identifier	bsize
>828	Argument	1
>829	PrimaryExpression	1
>830	Argument	buffer
>831	Identifier	buffer
>832	Callee	fread
>833	Identifier	fread
>834	Identifier	readbytes
>835	Identifier	readbytes
>836	IdentifierDeclType	int
>837	ExpressionStatement	 
>838	CallExpression	memset ( buffer , 0 , bsize )
>839	ArgumentList	buffer
>840	Argument	bsize
>841	Identifier	bsize
>842	Argument	0
>843	PrimaryExpression	0
>844	Argument	buffer
>845	Identifier	buffer
>846	Callee	memset
>847	Identifier	memset
>848	IdentifierDeclStatement	 
>849	IdentifierDecl	buffer [ bsize ]
>850	Identifier	bsize
>851	Identifier	buffer
>852	IdentifierDeclType	unsigned char [ bsize ]
>853	IdentifierDeclStatement	 
>854	IdentifierDecl	bsize = ( 16 + 4 ) * NUMSCORES
>855	AssignmentExpr	bsize = ( 16 + 4 ) * NUMSCORES
>856	MultiplicativeExpression	( 16 + 4 ) * NUMSCORES
>857	Identifier	NUMSCORES
>858	AdditiveExpression	16 + 4
>859	PrimaryExpression	4
>860	PrimaryExpression	16
>861	Identifier	bsize
>862	Identifier	bsize
>863	IdentifierDeclType	const int
>864	IfStatement	if ( f == NULL )
>865	ReturnStatement	 
>866	Condition	 
>867	EqualityExpression	f == NULL
>868	Identifier	NULL
>869	Identifier	f
>870	IdentifierDeclStatement	 
>871	IdentifierDecl	* f = fopen ( m_fname . c_str ( ) , \"rb\" )
>872	AssignmentExpr	* f = fopen ( m_fname . c_str ( ) , \"rb\" )
>873	CallExpression	fopen ( m_fname . c_str ( ) , \"rb\" )
>874	ArgumentList	m_fname . c_str ( )
>875	Argument	\"rb\"
>876	PrimaryExpression	\"rb\"
>877	Argument	m_fname . c_str ( )
>878	CallExpression	m_fname . c_str ( )
>879	ArgumentList	 
>880	Callee	m_fname . c_str
>881	MemberAccess	m_fname . c_str
>882	Identifier	c_str
>883	Identifier	m_fname
>884	Callee	fopen
>885	Identifier	fopen
>886	Identifier	f
>887	Identifier	f
>888	IdentifierDeclType	FILE *
>913	FunctionDef	HiScore 
>914	ParameterList	 
>915	ReturnType	void
>916	CompoundStatement	 
>917	ExpressionStatement	 
>918	CallExpression	fclose ( f )
>919	ArgumentList	f
>920	Argument	f
>921	Identifier	f
>922	Callee	fclose
>923	Identifier	fclose
>924	ExpressionStatement	 
>925	CallExpression	fwrite ( buffer , pos , 1 , f )
>926	ArgumentList	buffer
>927	Argument	f
>928	Identifier	f
>929	Argument	1
>930	PrimaryExpression	1
>931	Argument	pos
>932	Identifier	pos
>933	Argument	buffer
>934	Identifier	buffer
>935	Callee	fwrite
>936	Identifier	fwrite
>937	IfStatement	if ( f == NULL )
>938	ReturnStatement	 
>939	Condition	 
>940	EqualityExpression	f == NULL
>941	Identifier	NULL
>942	Identifier	f
>943	IdentifierDeclStatement	 
>944	IdentifierDecl	* f = fopen ( m_fname . c_str ( ) , \"wb\" )
>945	AssignmentExpr	* f = fopen ( m_fname . c_str ( ) , \"wb\" )
>946	CallExpression	fopen ( m_fname . c_str ( ) , \"wb\" )
>947	ArgumentList	m_fname . c_str ( )
>948	Argument	\"wb\"
>949	PrimaryExpression	\"wb\"
>950	Argument	m_fname . c_str ( )
>951	CallExpression	m_fname . c_str ( )
>952	ArgumentList	 
>953	Callee	m_fname . c_str
>954	MemberAccess	m_fname . c_str
>955	Identifier	c_str
>956	Identifier	m_fname
>957	Callee	fopen
>958	Identifier	fopen
>959	Identifier	f
>960	Identifier	f
>961	IdentifierDeclType	FILE *
>962	ExpressionStatement	 
>963	CallExpression	xor_buffer ( buffer , pos , XORVALUE )
>964	ArgumentList	buffer
>965	Argument	XORVALUE
>966	Identifier	XORVALUE
>967	Argument	pos
>968	Identifier	pos
>969	Argument	buffer
>970	Identifier	buffer
>971	Callee	xor_buffer
>972	Identifier	xor_buffer
>973	IfStatement	if ( pos < 1 )
>974	ReturnStatement	 
>975	Condition	 
>976	RelationalExpression	pos < 1
>977	PrimaryExpression	1
>978	Identifier	pos
>979	ForStatement	for ( int i = 0 ; i < NUMSCORES ; ++ i )
>980	CompoundStatement	 
>981	ExpressionStatement	 
>982	AssignmentExpr	buffer [ pos ++ ] = crc
>983	Identifier	crc
>984	ArrayIndexing	buffer [ pos ++ ]
>985	IncDecOp	pos ++
>986	IncDec	++
>987	Identifier	pos
>988	Identifier	buffer
>989	IdentifierDeclStatement	 
>990	IdentifierDecl	crc = calc_crc ( buffer + pos - 15 , 15 )
>991	AssignmentExpr	crc = calc_crc ( buffer + pos - 15 , 15 )
>992	CallExpression	calc_crc ( buffer + pos - 15 , 15 )
>993	ArgumentList	buffer + pos - 15
>994	Argument	15
>995	PrimaryExpression	15
>996	Argument	buffer + pos - 15
>997	AdditiveExpression	buffer + pos - 15
>998	AdditiveExpression	pos - 15
>999	PrimaryExpression	15
>1000	Identifier	pos
>1001	Identifier	buffer
>1002	Callee	calc_crc
>1003	Identifier	calc_crc
>1004	Identifier	crc
>1005	Identifier	crc
>1006	IdentifierDeclType	int
>1007	ExpressionStatement	 
>1008	AssignmentExpr	buffer [ pos ++ ] = ( score >> 16 ) & 0xFF
>1009	BitAndExpression	( score >> 16 ) & 0xFF
>1010	PrimaryExpression	0xFF
>1011	ShiftExpression	score >> 16
>1012	PrimaryExpression	16
>1013	Identifier	score
>1014	ArrayIndexing	buffer [ pos ++ ]
>1015	IncDecOp	pos ++
>1016	IncDec	++
>1017	Identifier	pos
>1018	Identifier	buffer
>1019	ExpressionStatement	 
>1020	AssignmentExpr	buffer [ pos ++ ] = ( score >> 8 ) & 0xFF
>1021	BitAndExpression	( score >> 8 ) & 0xFF
>1022	PrimaryExpression	0xFF
>1023	ShiftExpression	score >> 8
>1024	PrimaryExpression	8
>1025	Identifier	score
>1026	ArrayIndexing	buffer [ pos ++ ]
>1027	IncDecOp	pos ++
>1028	IncDec	++
>1029	Identifier	pos
>1030	Identifier	buffer
>1031	ExpressionStatement	 
>1032	AssignmentExpr	buffer [ pos ++ ] = score & 0xFF
>1033	BitAndExpression	score & 0xFF
>1034	PrimaryExpression	0xFF
>1035	Identifier	score
>1036	ArrayIndexing	buffer [ pos ++ ]
>1037	IncDecOp	pos ++
>1038	IncDec	++
>1039	Identifier	pos
>1040	Identifier	buffer
>1041	ExpressionStatement	 
>1042	AssignmentExpr	pos += 16
>1043	PrimaryExpression	16
>1044	Identifier	pos
>1045	ExpressionStatement	 
>1046	CallExpression	sprintf ( ( char * ) buffer + pos , \"%s\" , m_scores [ i ] . m_name . c_str ( ) )
>1047	ArgumentList	( char * ) buffer + pos
>1048	Argument	m_scores [ i ] . m_name . c_str ( )
>1049	CallExpression	m_scores [ i ] . m_name . c_str ( )
>1050	ArgumentList	 
>1051	Callee	m_scores [ i ] . m_name . c_str
>1052	MemberAccess	m_scores [ i ] . m_name . c_str
>1053	Identifier	c_str
>1054	MemberAccess	m_scores [ i ] . m_name
>1055	Identifier	m_name
>1056	ArrayIndexing	m_scores [ i ]
>1057	Identifier	i
>1058	Identifier	m_scores
>1059	Argument	\"%s\"
>1060	PrimaryExpression	\"%s\"
>1061	Argument	( char * ) buffer + pos
>1062	AdditiveExpression	( char * ) buffer + pos
>1063	Identifier	pos
>1064	CastExpression	( char * ) buffer
>1065	Identifier	buffer
>1066	CastTarget	char *
>1067	Callee	sprintf
>1068	Identifier	sprintf
>1069	IdentifierDeclStatement	 
>1070	IdentifierDecl	score = m_scores [ i ] . m_score
>1071	AssignmentExpr	score = m_scores [ i ] . m_score
>1072	MemberAccess	m_scores [ i ] . m_score
>1073	Identifier	m_score
>1074	ArrayIndexing	m_scores [ i ]
>1075	Identifier	i
>1076	Identifier	m_scores
>1077	Identifier	score
>1078	Identifier	score
>1079	IdentifierDeclType	int
>1080	IfStatement	if ( m_scores [ i ] . m_builtin == true )
>1081	ContinueStatement	 
>1082	Condition	 
>1083	EqualityExpression	m_scores [ i ] . m_builtin == true
>1084	Identifier	true
>1085	MemberAccess	m_scores [ i ] . m_builtin
>1086	Identifier	m_builtin
>1087	ArrayIndexing	m_scores [ i ]
>1088	Identifier	i
>1089	Identifier	m_scores
>1090	UnaryExpression	 
>1091	Identifier	i
>1092	IncDec	++
>1093	Condition	 
>1094	RelationalExpression	i < NUMSCORES
>1095	Identifier	NUMSCORES
>1096	Identifier	i
>1097	ForInit	 
>1098	IdentifierDeclStatement	int i = 0 ;
>1099	IdentifierDecl	i = 0
>1100	AssignmentExpr	i = 0
>1101	PrimaryExpression	0
>1102	Identifier	i
>1103	Identifier	i
>1104	IdentifierDeclType	int
>1105	IdentifierDeclStatement	 
>1106	IdentifierDecl	pos = 0
>1107	AssignmentExpr	pos = 0
>1108	PrimaryExpression	0
>1109	Identifier	pos
>1110	Identifier	pos
>1111	IdentifierDeclType	int
>1112	ExpressionStatement	 
>1113	CallExpression	memset ( buffer , 0 , bsize )
>1114	ArgumentList	buffer
>1115	Argument	bsize
>1116	Identifier	bsize
>1117	Argument	0
>1118	PrimaryExpression	0
>1119	Argument	buffer
>1120	Identifier	buffer
>1121	Callee	memset
>1122	Identifier	memset
>1123	IdentifierDeclStatement	 
>1124	IdentifierDecl	buffer [ bsize ]
>1125	Identifier	bsize
>1126	Identifier	buffer
>1127	IdentifierDeclType	unsigned char [ bsize ]
>1128	IdentifierDeclStatement	 
>1129	IdentifierDecl	bsize = ( 16 + 4 ) * NUMSCORES
>1130	AssignmentExpr	bsize = ( 16 + 4 ) * NUMSCORES
>1131	MultiplicativeExpression	( 16 + 4 ) * NUMSCORES
>1132	Identifier	NUMSCORES
>1133	AdditiveExpression	16 + 4
>1134	PrimaryExpression	4
>1135	PrimaryExpression	16
>1136	Identifier	bsize
>1137	Identifier	bsize
>1138	IdentifierDeclType	const int
>1166	FunctionDef	HiScore 
>1167	ParameterList	int score
>1168	Parameter	 
>1169	Identifier	score
>1170	ParameterType	int
>1171	ReturnType	bool
>1172	CompoundStatement	 
>1173	IfStatement	if ( m_scores [ NUMSCORES - 1 ] . m_score > score )
>1174	ElseStatement	else
>1175	ReturnStatement	 
>1176	Identifier	true
>1177	ReturnStatement	 
>1178	Identifier	false
>1179	Condition	 
>1180	RelationalExpression	m_scores [ NUMSCORES - 1 ] . m_score > score
>1181	Identifier	score
>1182	MemberAccess	m_scores [ NUMSCORES - 1 ] . m_score
>1183	Identifier	m_score
>1184	ArrayIndexing	m_scores [ NUMSCORES - 1 ]
>1185	AdditiveExpression	NUMSCORES - 1
>1186	PrimaryExpression	1
>1187	Identifier	NUMSCORES
>1188	Identifier	m_scores
>1200	FunctionDef	HiScore 
>1201	ParameterList	const string & name , int score , bool builtin
>1202	Parameter	 
>1203	Identifier	builtin
>1204	ParameterType	bool
>1205	Parameter	 
>1206	Identifier	score
>1207	ParameterType	int
>1208	Parameter	 
>1209	Identifier	name
>1210	ParameterType	const string &
>1211	ReturnType	void
>1212	CompoundStatement	 
>1213	ForStatement	for ( int i = 0 ; i < NUMSCORES ; ++ i )
>1214	CompoundStatement	 
>1215	IfStatement	if ( score > m_scores [ i ] . m_score )
>1216	CompoundStatement	 
>1217	BreakStatement	 
>1218	ExpressionStatement	 
>1219	AssignmentExpr	m_scores [ i ] = myscore
>1220	Identifier	myscore
>1221	ArrayIndexing	m_scores [ i ]
>1222	Identifier	i
>1223	Identifier	m_scores
>1224	ForStatement	for ( int j = NUMSCORES - 1 ; j > i ; j -- )
>1225	ExpressionStatement	 
>1226	AssignmentExpr	m_scores [ j ] = m_scores [ j - 1 ]
>1227	ArrayIndexing	m_scores [ j - 1 ]
>1228	AdditiveExpression	j - 1
>1229	PrimaryExpression	1
>1230	Identifier	j
>1231	Identifier	m_scores
>1232	ArrayIndexing	m_scores [ j ]
>1233	Identifier	j
>1234	Identifier	m_scores
>1235	IncDecOp	 
>1236	IncDec	--
>1237	Identifier	j
>1238	Condition	 
>1239	RelationalExpression	j > i
>1240	Identifier	i
>1241	Identifier	j
>1242	ForInit	 
>1243	IdentifierDeclStatement	int j = NUMSCORES - 1 ;
>1244	IdentifierDecl	j = NUMSCORES - 1
>1245	AssignmentExpr	j = NUMSCORES - 1
>1246	AdditiveExpression	NUMSCORES - 1
>1247	PrimaryExpression	1
>1248	Identifier	NUMSCORES
>1249	Identifier	j
>1250	Identifier	j
>1251	IdentifierDeclType	int
>1252	Condition	 
>1253	RelationalExpression	score > m_scores [ i ] . m_score
>1254	MemberAccess	m_scores [ i ] . m_score
>1255	Identifier	m_score
>1256	ArrayIndexing	m_scores [ i ]
>1257	Identifier	i
>1258	Identifier	m_scores
>1259	Identifier	score
>1260	UnaryExpression	 
>1261	Identifier	i
>1262	IncDec	++
>1263	Condition	 
>1264	RelationalExpression	i < NUMSCORES
>1265	Identifier	NUMSCORES
>1266	Identifier	i
>1267	ForInit	 
>1268	IdentifierDeclStatement	int i = 0 ;
>1269	IdentifierDecl	i = 0
>1270	AssignmentExpr	i = 0
>1271	PrimaryExpression	0
>1272	Identifier	i
>1273	Identifier	i
>1274	IdentifierDeclType	int
>1275	IdentifierDeclStatement	 
>1276	IdentifierDecl	myscore ( name , score , builtin )
>1277	Expression	name , score , builtin
>1278	Expression	score , builtin
>1279	Identifier	builtin
>1280	Identifier	score
>1281	Identifier	name
>1282	Identifier	myscore
>1283	IdentifierDeclType	HSitem
>1299	FunctionDef	HiScore 
>1300	ParameterList	 
>1301	ReturnType	string
>1302	CompoundStatement	 
>1303	ReturnStatement	 
>1304	CallExpression	string ( \"\" )
>1305	ArgumentList	\"\"
>1306	Argument	\"\"
>1307	PrimaryExpression	\"\"
>1308	Callee	string
>1309	Identifier	string
>1310	ForStatement	for ( int i = 0 ; i < NUMSCORES ; ++ i )
>1311	CompoundStatement	 
>1312	IfStatement	if ( m_scores [ i ] . m_builtin == false )
>1313	ReturnStatement	 
>1314	MemberAccess	m_scores [ i ] . m_name
>1315	Identifier	m_name
>1316	ArrayIndexing	m_scores [ i ]
>1317	Identifier	i
>1318	Identifier	m_scores
>1319	Condition	 
>1320	EqualityExpression	m_scores [ i ] . m_builtin == false
>1321	Identifier	false
>1322	MemberAccess	m_scores [ i ] . m_builtin
>1323	Identifier	m_builtin
>1324	ArrayIndexing	m_scores [ i ]
>1325	Identifier	i
>1326	Identifier	m_scores
>1327	UnaryExpression	 
>1328	Identifier	i
>1329	IncDec	++
>1330	Condition	 
>1331	RelationalExpression	i < NUMSCORES
>1332	Identifier	NUMSCORES
>1333	Identifier	i
>1334	ForInit	 
>1335	IdentifierDeclStatement	int i = 0 ;
>1336	IdentifierDecl	i = 0
>1337	AssignmentExpr	i = 0
>1338	PrimaryExpression	0
>1339	Identifier	i
>1340	Identifier	i
>1341	IdentifierDeclType	int
<3=14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<21=23,22
<27=32,28
<28=29
<29=31,30
<32=148,137,126,115,104,93,82,71,60,49,38,33
<33=34
<34=36,35
<36=37
<38=39
<39=47,40
<40=45,43,41
<41=42
<43=44
<45=46
<47=48
<49=50
<50=58,51
<51=56,54,52
<52=53
<54=55
<56=57
<58=59
<60=61
<61=69,62
<62=67,65,63
<63=64
<65=66
<67=68
<69=70
<71=72
<72=80,73
<73=78,76,74
<74=75
<76=77
<78=79
<80=81
<82=83
<83=91,84
<84=89,87,85
<85=86
<87=88
<89=90
<91=92
<93=94
<94=102,95
<95=100,98,96
<96=97
<98=99
<100=101
<102=103
<104=105
<105=113,106
<106=111,109,107
<107=108
<109=110
<111=112
<113=114
<115=116
<116=124,117
<117=122,120,118
<118=119
<120=121
<122=123
<124=125
<126=127
<127=135,128
<128=133,131,129
<129=130
<131=132
<133=134
<135=136
<137=138
<138=146,139
<139=144,142,140
<140=141
<142=143
<144=145
<146=147
<148=171,167,164,149
<149=150
<150=161,151
<151=159,152
<152=157,155,153
<153=154
<155=156
<157=158
<159=160
<161=163,162
<164=166,165
<167=168
<168=170,169
<171=172
<172=173
<173=178,177,174
<174=176,175
<190=193,192,191
<193=529,522,515,504,495,488,481,474,458,454,415,201,194
<194=195
<195=197,196
<197=198
<198=200,199
<201=407,403,400,202
<202=395,390,372,357,330,319,294,273,262,238,203
<203=204
<204=234,205
<205=232,212,210,208,206
<206=207
<208=209
<210=211
<212=213
<213=230,214
<214=217,215
<215=216
<217=218
<218=229,219
<219=225,220
<220=223,221
<221=222
<223=224
<225=226
<226=228,227
<230=231
<232=233
<234=235
<235=237,236
<238=239
<239=258,240
<240=256,247,245,243,241
<241=242
<243=244
<245=246
<247=248
<248=254,249
<249=252,250
<250=251
<252=253
<254=255
<256=257
<258=259
<259=261,260
<262=263
<263=272,271,264
<264=270,265
<265=269,266
<266=268,267
<273=274
<274=293,275
<275=291,276
<276=285,283,279,277
<277=278
<279=280
<280=282,281
<283=284
<285=286
<286=290,287
<287=289,288
<291=292
<294=311,307,304,295
<295=296
<296=302,297
<297=300,298
<298=299
<300=301
<302=303
<304=306,305
<307=308
<308=310,309
<311=312
<312=313
<313=318,317,314
<314=316,315
<319=320
<320=329,328,321
<321=327,322
<322=324,323
<324=326,325
<330=331
<331=356,355,332
<332=354,333
<333=344,334
<334=340,335
<335=338,336
<336=337
<338=339
<340=341
<341=343,342
<344=350,345
<345=348,346
<346=347
<348=349
<350=351
<351=353,352
<357=358
<358=370,359
<359=368,366,360
<360=361
<361=363,362
<363=365,364
<366=367
<368=369
<370=371
<372=373
<373=388,374
<374=386,375
<375=376
<376=378,377
<378=379
<379=381,380
<381=383,382
<383=385,384
<386=387
<388=389
<390=391
<391=394,393,392
<395=396
<396=399,398,397
<400=402,401
<403=404
<404=406,405
<407=408
<408=409
<409=414,413,410
<410=412,411
<415=416
<416=450,417
<417=448,435,433,431,418
<418=419
<419=429,420
<420=427,425,423,421
<421=422
<423=424
<425=426
<427=428
<429=430
<431=432
<433=434
<435=436
<436=446,437
<437=442,438
<438=439
<439=441,440
<442=443
<443=445,444
<446=447
<448=449
<450=451
<451=453,452
<454=455
<455=457,456
<458=459
<459=473,472,460
<460=471,461
<461=467,462
<462=465,463
<463=464
<465=466
<467=468
<468=470,469
<474=475
<475=480,479,476
<476=478,477
<481=482
<482=487,486,483
<483=485,484
<488=489
<489=494,493,490
<490=492,491
<495=496
<496=503,502,497
<497=501,498
<498=500,499
<504=505
<505=514,513,506
<506=512,507
<507=509,508
<509=511,510
<515=516
<516=521,520,517
<517=519,518
<522=523
<523=525,524
<525=526
<526=528,527
<529=530
<530=537,536,531
<531=535,532
<532=534,533
<572=584,583,573
<573=580,577,574
<574=576,575
<577=579,578
<580=582,581
<584=585
<585=599,595,592,586
<586=587
<587=589,588
<589=591,590
<592=594,593
<595=596
<596=598,597
<599=600
<600=601
<601=606,605,602
<602=604,603
<616=625,624,617
<617=621,618
<618=620,619
<621=623,622
<625=650,628,626
<626=627
<628=642,638,635,629
<629=630
<630=634,631
<631=633,632
<635=637,636
<638=639
<639=641,640
<642=643
<643=644
<644=649,648,645
<645=647,646
<650=651
<651=656,655,652
<652=654,653
<666=669,668,667
<669=870,864,853,848,837,819,812,801,794,670
<670=786,782,779,671
<671=772,763,750,746,738,728,718,707,689,683,672
<672=673
<673=681,674
<674=679,677,675
<675=676
<677=678
<679=680
<681=682
<683=685,684
<685=686
<686=688,687
<689=690
<690=706,705,691
<691=704,692
<692=702,693
<693=696,694
<694=695
<696=697
<697=701,698
<698=700,699
<702=703
<707=708
<708=717,716,709
<709=715,710
<710=714,711
<711=713,712
<718=719
<719=727,720
<720=722,721
<722=726,723
<723=725,724
<728=729
<729=737,730
<730=732,731
<732=736,733
<733=735,734
<738=739
<739=745,740
<740=744,741
<741=743,742
<746=747
<747=749,748
<750=751
<751=761,752
<752=759,755,753
<753=754
<755=756
<756=758,757
<759=760
<761=762
<763=764
<764=771,770,769,765
<765=768,766
<766=767
<772=773
<773=778,777,774
<774=776,775
<779=781,780
<782=783
<783=785,784
<786=787
<787=788
<788=793,792,789
<789=791,790
<794=795
<795=800,799,796
<796=798,797
<801=802
<802=810,803
<803=808,806,804
<804=805
<806=807
<808=809
<810=811
<812=813
<813=817,814
<814=815
<815=816
<817=818
<819=820
<820=836,835,821
<821=834,822
<822=832,823
<823=830,828,826,824
<824=825
<826=827
<828=829
<830=831
<832=833
<837=838
<838=846,839
<839=844,842,840
<840=841
<842=843
<844=845
<846=847
<848=849
<849=852,851,850
<853=854
<854=863,862,855
<855=861,856
<856=858,857
<858=860,859
<864=866,865
<866=867
<867=869,868
<870=871
<871=888,887,872
<872=886,873
<873=884,874
<874=877,875
<875=876
<877=878
<878=880,879
<880=881
<881=883,882
<884=885
<913=916,915,914
<916=1128,1123,1112,1105,979,973,962,943,937,924,917
<917=918
<918=922,919
<919=920
<920=921
<922=923
<924=925
<925=935,926
<926=933,931,929,927
<927=928
<929=930
<931=932
<933=934
<935=936
<937=939,938
<939=940
<940=942,941
<943=944
<944=961,960,945
<945=959,946
<946=957,947
<947=950,948
<948=949
<950=951
<951=953,952
<953=954
<954=956,955
<957=958
<962=963
<963=971,964
<964=969,967,965
<965=966
<967=968
<969=970
<971=972
<973=975,974
<975=976
<976=978,977
<979=1097,1093,1090,980
<980=1080,1069,1045,1041,1031,1019,1007,989,981
<981=982
<982=984,983
<984=988,985
<985=987,986
<989=990
<990=1006,1005,991
<991=1004,992
<992=1002,993
<993=996,994
<994=995
<996=997
<997=1001,998
<998=1000,999
<1002=1003
<1007=1008
<1008=1014,1009
<1009=1011,1010
<1011=1013,1012
<1014=1018,1015
<1015=1017,1016
<1019=1020
<1020=1026,1021
<1021=1023,1022
<1023=1025,1024
<1026=1030,1027
<1027=1029,1028
<1031=1032
<1032=1036,1033
<1033=1035,1034
<1036=1040,1037
<1037=1039,1038
<1041=1042
<1042=1044,1043
<1045=1046
<1046=1067,1047
<1047=1061,1059,1048
<1048=1049
<1049=1051,1050
<1051=1052
<1052=1054,1053
<1054=1056,1055
<1056=1058,1057
<1059=1060
<1061=1062
<1062=1064,1063
<1064=1066,1065
<1067=1068
<1069=1070
<1070=1079,1078,1071
<1071=1077,1072
<1072=1074,1073
<1074=1076,1075
<1080=1082,1081
<1082=1083
<1083=1085,1084
<1085=1087,1086
<1087=1089,1088
<1090=1092,1091
<1093=1094
<1094=1096,1095
<1097=1098
<1098=1099
<1099=1104,1103,1100
<1100=1102,1101
<1105=1106
<1106=1111,1110,1107
<1107=1109,1108
<1112=1113
<1113=1121,1114
<1114=1119,1117,1115
<1115=1116
<1117=1118
<1119=1120
<1121=1122
<1123=1124
<1124=1127,1126,1125
<1128=1129
<1129=1138,1137,1130
<1130=1136,1131
<1131=1133,1132
<1133=1135,1134
<1166=1172,1171,1167
<1167=1168
<1168=1170,1169
<1172=1173
<1173=1179,1177,1174
<1174=1175
<1175=1176
<1177=1178
<1179=1180
<1180=1182,1181
<1182=1184,1183
<1184=1188,1185
<1185=1187,1186
<1200=1212,1211,1201
<1201=1208,1205,1202
<1202=1204,1203
<1205=1207,1206
<1208=1210,1209
<1212=1275,1213
<1213=1267,1263,1260,1214
<1214=1215
<1215=1252,1216
<1216=1224,1218,1217
<1218=1219
<1219=1221,1220
<1221=1223,1222
<1224=1242,1238,1235,1225
<1225=1226
<1226=1232,1227
<1227=1231,1228
<1228=1230,1229
<1232=1234,1233
<1235=1237,1236
<1238=1239
<1239=1241,1240
<1242=1243
<1243=1244
<1244=1251,1250,1245
<1245=1249,1246
<1246=1248,1247
<1252=1253
<1253=1259,1254
<1254=1256,1255
<1256=1258,1257
<1260=1262,1261
<1263=1264
<1264=1266,1265
<1267=1268
<1268=1269
<1269=1274,1273,1270
<1270=1272,1271
<1275=1276
<1276=1283,1282,1277
<1277=1281,1278
<1278=1280,1279
<1299=1302,1301,1300
<1302=1310,1303
<1303=1304
<1304=1308,1305
<1305=1306
<1306=1307
<1308=1309
<1310=1334,1330,1327,1311
<1311=1312
<1312=1319,1313
<1313=1314
<1314=1316,1315
<1316=1318,1317
<1319=1320
<1320=1322,1321
<1322=1324,1323
<1324=1326,1325
<1327=1329,1328
<1330=1331
<1331=1333,1332
<1334=1335
<1335=1336
<1336=1341,1340,1337
<1337=1339,1338
