>43	FunctionDef	G_CmdChecksum (ticcmd_t * cmd)
>44	ParameterList	ticcmd_t * cmd
>45	Parameter	 
>46	Identifier	cmd
>47	ParameterType	ticcmd_t *
>48	ReturnType	int
>49	CompoundStatement	 
>50	ReturnStatement	 
>51	Identifier	sum
>52	ForStatement	for ( i = 0 ; i < sizeof ( * cmd ) / 4 - 1 ; i ++ )
>53	ExpressionStatement	 
>54	AssignmentExpr	sum += ( ( int * ) cmd ) [ i ]
>55	ArrayIndexing	( ( int * ) cmd ) [ i ]
>56	Identifier	i
>57	CastExpression	( int * ) cmd
>58	Identifier	cmd
>59	CastTarget	int *
>60	Identifier	sum
>61	IncDecOp	 
>62	IncDec	++
>63	Identifier	i
>64	Condition	 
>65	RelationalExpression	i < sizeof ( * cmd ) / 4 - 1
>66	AdditiveExpression	sizeof ( * cmd ) / 4 - 1
>67	PrimaryExpression	1
>68	MultiplicativeExpression	sizeof ( * cmd ) / 4
>69	PrimaryExpression	4
>70	SizeofExpr	sizeof ( * cmd )
>71	UnaryOp	* cmd
>72	Identifier	cmd
>73	UnaryOperator	*
>74	Sizeof	sizeof
>75	Identifier	i
>76	ForInit	 
>77	AssignmentExpr	i = 0
>78	PrimaryExpression	0
>79	Identifier	i
>80	IdentifierDeclStatement	 
>81	IdentifierDecl	sum = 0
>82	AssignmentExpr	sum = 0
>83	PrimaryExpression	0
>84	Identifier	sum
>85	Identifier	sum
>86	IdentifierDeclType	int
>87	IdentifierDeclStatement	 
>88	IdentifierDecl	i
>89	Identifier	i
>90	IdentifierDeclType	int
>99	FunctionDef	G_MouseClamp (int * x , int * y)
>100	ParameterList	int * x , int * y
>101	Parameter	 
>102	Identifier	y
>103	ParameterType	int *
>104	Parameter	 
>105	Identifier	x
>106	ParameterType	int *
>107	ReturnType	void
>108	CompoundStatement	 
>109	IfStatement	if ( * y < 0 )
>110	ElseStatement	else
>111	ExpressionStatement	 
>112	AssignmentExpr	* y = static_cast < int > ( ay )
>113	RelationalExpression	static_cast < int > ( ay )
>114	RelationalExpression	int > ( ay )
>115	Identifier	ay
>116	Identifier	int
>117	Identifier	static_cast
>118	UnaryOp	* y
>119	Identifier	y
>120	UnaryOperator	*
>121	ExpressionStatement	 
>122	AssignmentExpr	* y = static_cast < int > ( - ay )
>123	RelationalExpression	static_cast < int > ( - ay )
>124	RelationalExpression	int > ( - ay )
>125	UnaryOp	- ay
>126	Identifier	ay
>127	UnaryOperator	-
>128	Identifier	int
>129	Identifier	static_cast
>130	UnaryOp	* y
>131	Identifier	y
>132	UnaryOperator	*
>133	Condition	 
>134	RelationalExpression	* y < 0
>135	PrimaryExpression	0
>136	UnaryOp	* y
>137	Identifier	y
>138	UnaryOperator	*
>139	IfStatement	if ( * x < 0 )
>140	ElseStatement	else
>141	ExpressionStatement	 
>142	AssignmentExpr	* x = static_cast < int > ( ax )
>143	RelationalExpression	static_cast < int > ( ax )
>144	RelationalExpression	int > ( ax )
>145	Identifier	ax
>146	Identifier	int
>147	Identifier	static_cast
>148	UnaryOp	* x
>149	Identifier	x
>150	UnaryOperator	*
>151	ExpressionStatement	 
>152	AssignmentExpr	* x = static_cast < int > ( - ax )
>153	RelationalExpression	static_cast < int > ( - ax )
>154	RelationalExpression	int > ( - ax )
>155	UnaryOp	- ax
>156	Identifier	ax
>157	UnaryOperator	-
>158	Identifier	int
>159	Identifier	static_cast
>160	UnaryOp	* x
>161	Identifier	x
>162	UnaryOperator	*
>163	Condition	 
>164	RelationalExpression	* x < 0
>165	PrimaryExpression	0
>166	UnaryOp	* x
>167	Identifier	x
>168	UnaryOperator	*
>169	ExpressionStatement	 
>170	AssignmentExpr	ay = ( ay - 10 ) * ( 0.04676 ) * ( ay - 10 ) * ( ay > 10 )
>171	MultiplicativeExpression	( ay - 10 ) * ( 0.04676 ) * ( ay - 10 ) * ( ay > 10 )
>172	MultiplicativeExpression	( 0.04676 ) * ( ay - 10 ) * ( ay > 10 )
>173	MultiplicativeExpression	( ay - 10 ) * ( ay > 10 )
>174	RelationalExpression	ay > 10
>175	PrimaryExpression	10
>176	Identifier	ay
>177	AdditiveExpression	ay - 10
>178	PrimaryExpression	10
>179	Identifier	ay
>180	PrimaryExpression	0.04676
>181	AdditiveExpression	ay - 10
>182	PrimaryExpression	10
>183	Identifier	ay
>184	Identifier	ay
>185	ExpressionStatement	 
>186	AssignmentExpr	ax = ( ax - 10 ) * ( 0.04676 ) * ( ax - 10 ) * ( ax > 10 )
>187	MultiplicativeExpression	( ax - 10 ) * ( 0.04676 ) * ( ax - 10 ) * ( ax > 10 )
>188	MultiplicativeExpression	( 0.04676 ) * ( ax - 10 ) * ( ax > 10 )
>189	MultiplicativeExpression	( ax - 10 ) * ( ax > 10 )
>190	RelationalExpression	ax > 10
>191	PrimaryExpression	10
>192	Identifier	ax
>193	AdditiveExpression	ax - 10
>194	PrimaryExpression	10
>195	Identifier	ax
>196	PrimaryExpression	0.04676
>197	AdditiveExpression	ax - 10
>198	PrimaryExpression	10
>199	Identifier	ax
>200	Identifier	ax
>201	IdentifierDeclStatement	 
>202	IdentifierDecl	ay = ( float ) fabs ( ( float ) * y )
>203	AssignmentExpr	ay = ( float ) fabs ( ( float ) * y )
>204	CastExpression	( float ) fabs ( ( float ) * y )
>205	CallExpression	fabs ( ( float ) * y )
>206	ArgumentList	( float ) * y
>207	Argument	( float ) * y
>208	CastExpression	( float ) * y
>209	UnaryOp	* y
>210	Identifier	y
>211	UnaryOperator	*
>212	CastTarget	float
>213	Callee	fabs
>214	Identifier	fabs
>215	CastTarget	float
>216	Identifier	ay
>217	Identifier	ay
>218	IdentifierDeclType	float
>219	IdentifierDeclStatement	 
>220	IdentifierDecl	ax = ( float ) fabs ( ( float ) * x )
>221	AssignmentExpr	ax = ( float ) fabs ( ( float ) * x )
>222	CastExpression	( float ) fabs ( ( float ) * x )
>223	CallExpression	fabs ( ( float ) * x )
>224	ArgumentList	( float ) * x
>225	Argument	( float ) * x
>226	CastExpression	( float ) * x
>227	UnaryOp	* x
>228	Identifier	x
>229	UnaryOperator	*
>230	CastTarget	float
>231	Callee	fabs
>232	Identifier	fabs
>233	CastTarget	float
>234	Identifier	ax
>235	Identifier	ax
>236	IdentifierDeclType	float
>249	FunctionDef	IsPlayerRunning (const usercmd_t & command)
>250	ParameterList	const usercmd_t & command
>251	Parameter	 
>252	Identifier	command
>253	ParameterType	const usercmd_t &
>254	ReturnType	bool
>255	CompoundStatement	 
>256	ReturnStatement	 
>257	Identifier	autorun
>258	IfStatement	if ( command . buttons & BUTTON_RUN )
>259	CompoundStatement	 
>260	ReturnStatement	 
>261	UnaryOp	! autorun
>262	Identifier	autorun
>263	UnaryOperator	!
>264	Condition	 
>265	BitAndExpression	command . buttons & BUTTON_RUN
>266	Identifier	BUTTON_RUN
>267	MemberAccess	command . buttons
>268	Identifier	buttons
>269	Identifier	command
>270	IfStatement	if ( user )
>271	CompoundStatement	 
>272	IfStatement	if ( profile && profile -> GetAlwaysRun ( ) )
>273	CompoundStatement	 
>274	ExpressionStatement	 
>275	AssignmentExpr	autorun = true
>276	Identifier	true
>277	Identifier	autorun
>278	Condition	 
>279	AndExpression	profile && profile -> GetAlwaysRun ( )
>280	CallExpression	profile -> GetAlwaysRun ( )
>281	ArgumentList	 
>282	Callee	profile -> GetAlwaysRun
>283	PtrMemberAccess	profile -> GetAlwaysRun
>284	Identifier	GetAlwaysRun
>285	Identifier	profile
>286	Identifier	profile
>287	ExpressionStatement	 
>288	CallExpression	user -> GetProfile ( )
>289	ArgumentList	 
>290	Callee	user -> GetProfile
>291	PtrMemberAccess	user -> GetProfile
>292	Identifier	GetProfile
>293	Identifier	user
>294	Statement	 
>295	Statement	 
>296	Statement	 
>297	Statement	 
>298	Statement	 
>299	Statement	 
>300	Statement	 
>301	Statement	 
>302	Statement	 
>303	Condition	 
>304	Identifier	user
>305	IdentifierDeclStatement	 
>306	IdentifierDecl	autorun = false
>307	AssignmentExpr	autorun = false
>308	Identifier	false
>309	Identifier	false
>310	Identifier	autorun
>311	IdentifierDeclType	bool
>312	IdentifierDeclStatement	 
>313	IdentifierDecl	* user = session -> GetSignInManager ( ) . GetLocalUserByIndex ( DoomLib 
>314	AssignmentExpr	* user = session -> GetSignInManager ( ) . GetLocalUserByIndex ( DoomLib 
>315	CallExpression	session -> GetSignInManager ( ) . GetLocalUserByIndex ( DoomLib 
>316	ArgumentList	DoomLib 
>317	Argument	DoomLib 
>318	CallExpression	DoomLib 
>319	ArgumentList	 
>320	Callee	DoomLib 
>321	Identifier	DoomLib 
>322	Callee	session -> GetSignInManager ( ) . GetLocalUserByIndex
>323	MemberAccess	session -> GetSignInManager ( ) . GetLocalUserByIndex
>324	Identifier	GetLocalUserByIndex
>325	CallExpression	session -> GetSignInManager ( )
>326	ArgumentList	 
>327	Callee	session -> GetSignInManager
>328	PtrMemberAccess	session -> GetSignInManager
>329	Identifier	GetSignInManager
>330	Identifier	session
>331	Identifier	user
>332	Identifier	user
>333	IdentifierDeclType	idLocalUser *
>334	IfStatement	if ( DoomLib 
>335	CompoundStatement	 
>336	ReturnStatement	 
>337	Identifier	false
>338	Condition	 
>339	RelationalExpression	DoomLib 
>340	PrimaryExpression	0
>341	CallExpression	DoomLib 
>342	ArgumentList	 
>343	Callee	DoomLib 
>344	Identifier	DoomLib 
>363	FunctionDef	G_PerformImpulse (const int impulse , ticcmd_t * cmd)
>364	ParameterList	const int impulse , ticcmd_t * cmd
>365	Parameter	 
>366	Identifier	cmd
>367	ParameterType	ticcmd_t *
>368	Parameter	 
>369	Identifier	impulse
>370	ParameterType	const int
>371	ReturnType	void
>372	CompoundStatement	 
>373	IfStatement	if ( impulse == IMPULSE_15 )
>374	ElseStatement	else
>375	IfStatement	if ( impulse == IMPULSE_14 )
>376	CompoundStatement	 
>377	ExpressionStatement	 
>378	AssignmentExpr	cmd -> nextPrevWeapon = 2
>379	PrimaryExpression	2
>380	PtrMemberAccess	cmd -> nextPrevWeapon
>381	Identifier	nextPrevWeapon
>382	Identifier	cmd
>383	ExpressionStatement	 
>384	AssignmentExpr	cmd -> buttons |= BT_CHANGE
>385	Identifier	BT_CHANGE
>386	PtrMemberAccess	cmd -> buttons
>387	Identifier	buttons
>388	Identifier	cmd
>389	Condition	 
>390	EqualityExpression	impulse == IMPULSE_14
>391	Identifier	IMPULSE_14
>392	Identifier	impulse
>393	CompoundStatement	 
>394	ExpressionStatement	 
>395	AssignmentExpr	cmd -> nextPrevWeapon = 1
>396	PrimaryExpression	1
>397	PtrMemberAccess	cmd -> nextPrevWeapon
>398	Identifier	nextPrevWeapon
>399	Identifier	cmd
>400	ExpressionStatement	 
>401	AssignmentExpr	cmd -> buttons |= BT_CHANGE
>402	Identifier	BT_CHANGE
>403	PtrMemberAccess	cmd -> buttons
>404	Identifier	buttons
>405	Identifier	cmd
>406	Condition	 
>407	EqualityExpression	impulse == IMPULSE_15
>408	Identifier	IMPULSE_15
>409	Identifier	impulse
>421	FunctionDef	DegreesToDoomAngleTurn (float degrees)
>422	ParameterList	float degrees
>423	Parameter	 
>424	Identifier	degrees
>425	ParameterType	float
>426	ReturnType	fixed_t
>427	CompoundStatement	 
>428	ReturnStatement	 
>429	Identifier	doomangle
>430	ExpressionStatement	 
>431	CallExpression	max ( )
>432	ArgumentList	 
>433	Callee	max
>434	Identifier	max
>435	Statement	 
>436	Statement	 
>437	Statement	 
>438	Statement	 
>439	Statement	 
>440	Statement	 
>441	Statement	 
>442	Statement	 
>443	Statement	 
>444	Statement	 
>445	Statement	 
>446	Statement	 
>447	Statement	 
>448	Statement	 
>449	IdentifierDeclStatement	 
>450	IdentifierDecl	anglefrac = degrees / 360.0f
>451	AssignmentExpr	anglefrac = degrees / 360.0f
>452	MultiplicativeExpression	degrees / 360.0f
>453	PrimaryExpression	360.0f
>454	Identifier	degrees
>455	Identifier	anglefrac
>456	Identifier	anglefrac
>457	IdentifierDeclType	const float
>464	FunctionDef	G_BuildTiccmd (ticcmd_t * cmd , idUserCmdMgr * userCmdMgr , int newTics)
>465	ParameterList	ticcmd_t * cmd , idUserCmdMgr * userCmdMgr , int newTics
>466	Parameter	 
>467	Identifier	newTics
>468	ParameterType	int
>469	Parameter	 
>470	Identifier	userCmdMgr
>471	ParameterType	idUserCmdMgr *
>472	Parameter	 
>473	Identifier	cmd
>474	ParameterType	ticcmd_t *
>475	ReturnType	void
>476	CompoundStatement	 
>477	ExpressionStatement	 
>478	AssignmentExpr	tspeed = 2
>479	PrimaryExpression	2
>480	Identifier	tspeed
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	ExpressionStatement	 
>491	AssignmentExpr	g -> turnheld = 0
>492	PrimaryExpression	0
>493	PtrMemberAccess	g -> turnheld
>494	Identifier	turnheld
>495	Identifier	g
>496	ExpressionStatement	 
>497	PtrMemberAccess	g -> ticdup
>498	Identifier	ticdup
>499	Identifier	g
>500	Statement	 
>501	Statement	 
>502	Statement	 
>503	Statement	 
>504	Statement	 
>505	Statement	 
>506	Statement	 
>507	Statement	 
>508	Statement	 
>509	Statement	 
>510	Statement	 
>511	Statement	 
>512	Statement	 
>513	Statement	 
>514	Statement	 
>515	Statement	 
>516	Statement	 
>517	Statement	 
>518	Statement	 
>519	Statement	 
>520	Statement	 
>521	Statement	 
>522	Statement	 
>523	Statement	 
>524	Statement	 
>525	Statement	 
>526	Statement	 
>527	Statement	 
>528	Statement	 
>529	Statement	 
>530	Statement	 
>531	Statement	 
>532	Statement	 
>533	Statement	 
>534	Statement	 
>535	Statement	 
>536	Statement	 
>537	ExpressionStatement	 
>538	AssignmentExpr	forward = side = 0
>539	AssignmentExpr	side = 0
>540	PrimaryExpression	0
>541	Identifier	side
>542	Identifier	forward
>543	IfStatement	if ( user )
>544	ElseStatement	else
>545	CompoundStatement	 
>546	ExpressionStatement	 
>547	Statement	 
>548	Statement	 
>549	Statement	 
>550	Statement	 
>551	Statement	 
>552	Statement	 
>553	Statement	 
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>559	Statement	 
>560	CompoundStatement	 
>561	IfStatement	if ( profile && profile -> GetAlwaysRun ( ) )
>562	ElseStatement	else
>563	CompoundStatement	 
>564	ExpressionStatement	 
>565	Statement	 
>566	Statement	 
>567	Statement	 
>568	Statement	 
>569	Statement	 
>570	Statement	 
>571	Statement	 
>572	Statement	 
>573	Statement	 
>574	Statement	 
>575	Statement	 
>576	Statement	 
>577	CompoundStatement	 
>578	ExpressionStatement	 
>579	Statement	 
>580	Statement	 
>581	Statement	 
>582	Statement	 
>583	Statement	 
>584	Statement	 
>585	Statement	 
>586	Statement	 
>587	Statement	 
>588	Statement	 
>589	Statement	 
>590	Statement	 
>591	Statement	 
>592	Condition	 
>593	AndExpression	profile && profile -> GetAlwaysRun ( )
>594	CallExpression	profile -> GetAlwaysRun ( )
>595	ArgumentList	 
>596	Callee	profile -> GetAlwaysRun
>597	PtrMemberAccess	profile -> GetAlwaysRun
>598	Identifier	GetAlwaysRun
>599	Identifier	profile
>600	Identifier	profile
>601	ExpressionStatement	 
>602	CallExpression	user -> GetProfile ( )
>603	ArgumentList	 
>604	Callee	user -> GetProfile
>605	PtrMemberAccess	user -> GetProfile
>606	Identifier	GetProfile
>607	Identifier	user
>608	Statement	 
>609	Statement	 
>610	Statement	 
>611	Statement	 
>612	Statement	 
>613	Statement	 
>614	Statement	 
>615	Statement	 
>616	Statement	 
>617	Condition	 
>618	Identifier	user
>619	IdentifierDeclStatement	 
>620	IdentifierDecl	* user = session -> GetSignInManager ( ) . GetLocalUserByIndex ( DoomLib 
>621	AssignmentExpr	* user = session -> GetSignInManager ( ) . GetLocalUserByIndex ( DoomLib 
>622	CallExpression	session -> GetSignInManager ( ) . GetLocalUserByIndex ( DoomLib 
>623	ArgumentList	DoomLib 
>624	Argument	DoomLib 
>625	CallExpression	DoomLib 
>626	ArgumentList	 
>627	Callee	DoomLib 
>628	Identifier	DoomLib 
>629	Callee	session -> GetSignInManager ( ) . GetLocalUserByIndex
>630	MemberAccess	session -> GetSignInManager ( ) . GetLocalUserByIndex
>631	Identifier	GetLocalUserByIndex
>632	CallExpression	session -> GetSignInManager ( )
>633	ArgumentList	 
>634	Callee	session -> GetSignInManager
>635	PtrMemberAccess	session -> GetSignInManager
>636	Identifier	GetSignInManager
>637	Identifier	session
>638	Identifier	user
>639	Identifier	user
>640	IdentifierDeclType	idLocalUser *
>641	IfStatement	if ( userCmdMgr != NULL )
>642	ElseStatement	else
>643	Statement	 
>644	CompoundStatement	 
>645	ReturnStatement	 
>646	IfStatement	if ( curTech5Command . buttons & BUTTON_WEAP_3 )
>647	CompoundStatement	 
>648	ExpressionStatement	 
>649	AssignmentExpr	cmd -> buttons |= 5 << BT_WEAPONSHIFT
>650	ShiftExpression	5 << BT_WEAPONSHIFT
>651	Identifier	BT_WEAPONSHIFT
>652	PrimaryExpression	5
>653	PtrMemberAccess	cmd -> buttons
>654	Identifier	buttons
>655	Identifier	cmd
>656	ExpressionStatement	 
>657	AssignmentExpr	cmd -> buttons |= BT_CHANGE
>658	Identifier	BT_CHANGE
>659	PtrMemberAccess	cmd -> buttons
>660	Identifier	buttons
>661	Identifier	cmd
>662	Condition	 
>663	BitAndExpression	curTech5Command . buttons & BUTTON_WEAP_3
>664	Identifier	BUTTON_WEAP_3
>665	MemberAccess	curTech5Command . buttons
>666	Identifier	buttons
>667	Identifier	curTech5Command
>668	IfStatement	if ( curTech5Command . buttons & BUTTON_WEAP_2 )
>669	CompoundStatement	 
>670	ExpressionStatement	 
>671	AssignmentExpr	cmd -> buttons |= 4 << BT_WEAPONSHIFT
>672	ShiftExpression	4 << BT_WEAPONSHIFT
>673	Identifier	BT_WEAPONSHIFT
>674	PrimaryExpression	4
>675	PtrMemberAccess	cmd -> buttons
>676	Identifier	buttons
>677	Identifier	cmd
>678	ExpressionStatement	 
>679	AssignmentExpr	cmd -> buttons |= BT_CHANGE
>680	Identifier	BT_CHANGE
>681	PtrMemberAccess	cmd -> buttons
>682	Identifier	buttons
>683	Identifier	cmd
>684	Condition	 
>685	BitAndExpression	curTech5Command . buttons & BUTTON_WEAP_2
>686	Identifier	BUTTON_WEAP_2
>687	MemberAccess	curTech5Command . buttons
>688	Identifier	buttons
>689	Identifier	curTech5Command
>690	IfStatement	if ( curTech5Command . buttons & BUTTON_WEAP_1 )
>691	CompoundStatement	 
>692	ExpressionStatement	 
>693	AssignmentExpr	cmd -> buttons |= 3 << BT_WEAPONSHIFT
>694	ShiftExpression	3 << BT_WEAPONSHIFT
>695	Identifier	BT_WEAPONSHIFT
>696	PrimaryExpression	3
>697	PtrMemberAccess	cmd -> buttons
>698	Identifier	buttons
>699	Identifier	cmd
>700	ExpressionStatement	 
>701	AssignmentExpr	cmd -> buttons |= BT_CHANGE
>702	Identifier	BT_CHANGE
>703	PtrMemberAccess	cmd -> buttons
>704	Identifier	buttons
>705	Identifier	cmd
>706	Condition	 
>707	BitAndExpression	curTech5Command . buttons & BUTTON_WEAP_1
>708	Identifier	BUTTON_WEAP_1
>709	MemberAccess	curTech5Command . buttons
>710	Identifier	buttons
>711	Identifier	curTech5Command
>712	IfStatement	if ( curTech5Command . buttons & BUTTON_WEAP_0 )
>713	CompoundStatement	 
>714	ExpressionStatement	 
>715	AssignmentExpr	cmd -> buttons |= 2 << BT_WEAPONSHIFT
>716	ShiftExpression	2 << BT_WEAPONSHIFT
>717	Identifier	BT_WEAPONSHIFT
>718	PrimaryExpression	2
>719	PtrMemberAccess	cmd -> buttons
>720	Identifier	buttons
>721	Identifier	cmd
>722	ExpressionStatement	 
>723	AssignmentExpr	cmd -> buttons |= BT_CHANGE
>724	Identifier	BT_CHANGE
>725	PtrMemberAccess	cmd -> buttons
>726	Identifier	buttons
>727	Identifier	cmd
>728	Condition	 
>729	BitAndExpression	curTech5Command . buttons & BUTTON_WEAP_0
>730	Identifier	BUTTON_WEAP_0
>731	MemberAccess	curTech5Command . buttons
>732	Identifier	buttons
>733	Identifier	curTech5Command
>734	IfStatement	if ( curTech5Command . buttons & BUTTON_WEAP_PREV )
>735	CompoundStatement	 
>736	ExpressionStatement	 
>737	AssignmentExpr	cmd -> buttons |= 0 << BT_WEAPONSHIFT
>738	ShiftExpression	0 << BT_WEAPONSHIFT
>739	Identifier	BT_WEAPONSHIFT
>740	PrimaryExpression	0
>741	PtrMemberAccess	cmd -> buttons
>742	Identifier	buttons
>743	Identifier	cmd
>744	ExpressionStatement	 
>745	AssignmentExpr	cmd -> buttons |= BT_CHANGE
>746	Identifier	BT_CHANGE
>747	PtrMemberAccess	cmd -> buttons
>748	Identifier	buttons
>749	Identifier	cmd
>750	Condition	 
>751	BitAndExpression	curTech5Command . buttons & BUTTON_WEAP_PREV
>752	Identifier	BUTTON_WEAP_PREV
>753	MemberAccess	curTech5Command . buttons
>754	Identifier	buttons
>755	Identifier	curTech5Command
>756	IfStatement	if ( curTech5Command . buttons & BUTTON_WEAP_NEXT )
>757	CompoundStatement	 
>758	ExpressionStatement	 
>759	AssignmentExpr	cmd -> buttons |= 1 << BT_WEAPONSHIFT
>760	ShiftExpression	1 << BT_WEAPONSHIFT
>761	Identifier	BT_WEAPONSHIFT
>762	PrimaryExpression	1
>763	PtrMemberAccess	cmd -> buttons
>764	Identifier	buttons
>765	Identifier	cmd
>766	ExpressionStatement	 
>767	AssignmentExpr	cmd -> buttons |= BT_CHANGE
>768	Identifier	BT_CHANGE
>769	PtrMemberAccess	cmd -> buttons
>770	Identifier	buttons
>771	Identifier	cmd
>772	Condition	 
>773	BitAndExpression	curTech5Command . buttons & BUTTON_WEAP_NEXT
>774	Identifier	BUTTON_WEAP_NEXT
>775	MemberAccess	curTech5Command . buttons
>776	Identifier	buttons
>777	Identifier	curTech5Command
>778	IfStatement	if ( curTech5Command . buttons & BUTTON_USE || curTech5Command . buttons & BUTTON_JUMP )
>779	CompoundStatement	 
>780	ExpressionStatement	 
>781	AssignmentExpr	cmd -> buttons |= BT_USE
>782	Identifier	BT_USE
>783	PtrMemberAccess	cmd -> buttons
>784	Identifier	buttons
>785	Identifier	cmd
>786	Condition	 
>787	OrExpression	curTech5Command . buttons & BUTTON_USE || curTech5Command . buttons & BUTTON_JUMP
>788	BitAndExpression	curTech5Command . buttons & BUTTON_JUMP
>789	Identifier	BUTTON_JUMP
>790	MemberAccess	curTech5Command . buttons
>791	Identifier	buttons
>792	Identifier	curTech5Command
>793	BitAndExpression	curTech5Command . buttons & BUTTON_USE
>794	Identifier	BUTTON_USE
>795	MemberAccess	curTech5Command . buttons
>796	Identifier	buttons
>797	Identifier	curTech5Command
>798	ForStatement	for ( i = 0 ; i < NUMWEAPONS - 1 ; i ++ )
>799	CompoundStatement	 
>800	IfStatement	if ( usercmdGen -> KeyState ( i + 1 ) )
>801	CompoundStatement	 
>802	BreakStatement	 
>803	ExpressionStatement	 
>804	AssignmentExpr	cmd -> buttons |= ( i - 1 ) << BT_WEAPONSHIFT
>805	ShiftExpression	( i - 1 ) << BT_WEAPONSHIFT
>806	Identifier	BT_WEAPONSHIFT
>807	AdditiveExpression	i - 1
>808	PrimaryExpression	1
>809	Identifier	i
>810	PtrMemberAccess	cmd -> buttons
>811	Identifier	buttons
>812	Identifier	cmd
>813	ExpressionStatement	 
>814	AssignmentExpr	cmd -> buttons |= BT_CHANGE
>815	Identifier	BT_CHANGE
>816	PtrMemberAccess	cmd -> buttons
>817	Identifier	buttons
>818	Identifier	cmd
>819	Condition	 
>820	CallExpression	usercmdGen -> KeyState ( i + 1 )
>821	ArgumentList	i + 1
>822	Argument	i + 1
>823	AdditiveExpression	i + 1
>824	PrimaryExpression	1
>825	Identifier	i
>826	Callee	usercmdGen -> KeyState
>827	PtrMemberAccess	usercmdGen -> KeyState
>828	Identifier	KeyState
>829	Identifier	usercmdGen
>830	IncDecOp	 
>831	IncDec	++
>832	Identifier	i
>833	Condition	 
>834	RelationalExpression	i < NUMWEAPONS - 1
>835	AdditiveExpression	NUMWEAPONS - 1
>836	PrimaryExpression	1
>837	Identifier	NUMWEAPONS
>838	Identifier	i
>839	ForInit	 
>840	AssignmentExpr	i = 0
>841	PrimaryExpression	0
>842	Identifier	i
>843	ExpressionStatement	 
>844	AssignmentExpr	oldImpulseSequence = curTech5Command . impulseSequence
>845	MemberAccess	curTech5Command . impulseSequence
>846	Identifier	impulseSequence
>847	Identifier	curTech5Command
>848	Identifier	oldImpulseSequence
>849	IfStatement	if ( oldImpulseSequence != curTech5Command . impulseSequence )
>850	CompoundStatement	 
>851	ExpressionStatement	 
>852	CallExpression	G_PerformImpulse ( curTech5Command . impulse , cmd )
>853	ArgumentList	curTech5Command . impulse
>854	Argument	cmd
>855	Identifier	cmd
>856	Argument	curTech5Command . impulse
>857	MemberAccess	curTech5Command . impulse
>858	Identifier	impulse
>859	Identifier	curTech5Command
>860	Callee	G_PerformImpulse
>861	Identifier	G_PerformImpulse
>862	Condition	 
>863	EqualityExpression	oldImpulseSequence != curTech5Command . impulseSequence
>864	MemberAccess	curTech5Command . impulseSequence
>865	Identifier	impulseSequence
>866	Identifier	curTech5Command
>867	Identifier	oldImpulseSequence
>868	IdentifierDeclStatement	 
>869	IdentifierDecl	oldImpulseSequence = 0
>870	AssignmentExpr	oldImpulseSequence = 0
>871	PrimaryExpression	0
>872	Identifier	oldImpulseSequence
>873	Identifier	oldImpulseSequence
>874	IdentifierDeclType	int
>875	Statement	 
>876	IfStatement	if ( curTech5Command . buttons & BUTTON_ATTACK2 )
>877	CompoundStatement	 
>878	CompoundStatement	 
>879	ExpressionStatement	 
>880	AssignmentExpr	cmd -> buttons |= BT_ATTACK
>881	Identifier	BT_ATTACK
>882	PtrMemberAccess	cmd -> buttons
>883	Identifier	buttons
>884	Identifier	cmd
>885	Statement	 
>886	Statement	 
>887	Statement	 
>888	Statement	 
>889	Statement	 
>890	Statement	 
>891	Statement	 
>892	Statement	 
>893	Condition	 
>894	BitAndExpression	curTech5Command . buttons & BUTTON_ATTACK2
>895	Identifier	BUTTON_ATTACK2
>896	MemberAccess	curTech5Command . buttons
>897	Identifier	buttons
>898	Identifier	curTech5Command
>899	IfStatement	if ( curTech5Command . buttons & BUTTON_ATTACK )
>900	CompoundStatement	 
>901	ExpressionStatement	 
>902	AssignmentExpr	cmd -> buttons |= BT_ATTACK
>903	Identifier	BT_ATTACK
>904	PtrMemberAccess	cmd -> buttons
>905	Identifier	buttons
>906	Identifier	cmd
>907	Condition	 
>908	BitAndExpression	curTech5Command . buttons & BUTTON_ATTACK
>909	Identifier	BUTTON_ATTACK
>910	MemberAccess	curTech5Command . buttons
>911	Identifier	buttons
>912	Identifier	curTech5Command
>913	ExpressionStatement	 
>914	AssignmentExpr	cmd -> angleturn = DegreesToDoomAngleTurn ( angleDelta . yaw )
>915	CallExpression	DegreesToDoomAngleTurn ( angleDelta . yaw )
>916	ArgumentList	angleDelta . yaw
>917	Argument	angleDelta . yaw
>918	MemberAccess	angleDelta . yaw
>919	Identifier	yaw
>920	Identifier	angleDelta
>921	Callee	DegreesToDoomAngleTurn
>922	Identifier	DegreesToDoomAngleTurn
>923	PtrMemberAccess	cmd -> angleturn
>924	Identifier	angleturn
>925	Identifier	cmd
>926	IfStatement	if ( newTics > 0 )
>927	CompoundStatement	 
>928	ExpressionStatement	 
>929	AssignmentExpr	angleDelta . yaw /= newTics
>930	Identifier	newTics
>931	MemberAccess	angleDelta . yaw
>932	Identifier	yaw
>933	Identifier	angleDelta
>934	Condition	 
>935	RelationalExpression	newTics > 0
>936	PrimaryExpression	0
>937	Identifier	newTics
>938	ExpressionStatement	 
>939	CallExpression	angleDelta . Normalize180 ( )
>940	ArgumentList	 
>941	Callee	angleDelta . Normalize180
>942	MemberAccess	angleDelta . Normalize180
>943	Identifier	Normalize180
>944	Identifier	angleDelta
>945	ExpressionStatement	 
>946	AssignmentExpr	angleDelta . roll = 0.0f
>947	PrimaryExpression	0.0f
>948	MemberAccess	angleDelta . roll
>949	Identifier	roll
>950	Identifier	angleDelta
>951	ExpressionStatement	 
>952	AssignmentExpr	angleDelta . yaw = SHORT2ANGLE ( curTech5Command . angles [ 1 ] ) - SHORT2ANGLE ( prevTech5Command . \
>953	AdditiveExpression	SHORT2ANGLE ( curTech5Command . angles [ 1 ] ) - SHORT2ANGLE ( prevTech5Command . angles [ 1 ] )
>954	CallExpression	SHORT2ANGLE ( prevTech5Command . angles [ 1 ] )
>955	ArgumentList	prevTech5Command . angles [ 1 ]
>956	Argument	prevTech5Command . angles [ 1 ]
>957	ArrayIndexing	prevTech5Command . angles [ 1 ]
>958	PrimaryExpression	1
>959	MemberAccess	prevTech5Command . angles
>960	Identifier	angles
>961	Identifier	prevTech5Command
>962	Callee	SHORT2ANGLE
>963	Identifier	SHORT2ANGLE
>964	CallExpression	SHORT2ANGLE ( curTech5Command . angles [ 1 ] )
>965	ArgumentList	curTech5Command . angles [ 1 ]
>966	Argument	curTech5Command . angles [ 1 ]
>967	ArrayIndexing	curTech5Command . angles [ 1 ]
>968	PrimaryExpression	1
>969	MemberAccess	curTech5Command . angles
>970	Identifier	angles
>971	Identifier	curTech5Command
>972	Callee	SHORT2ANGLE
>973	Identifier	SHORT2ANGLE
>974	MemberAccess	angleDelta . yaw
>975	Identifier	yaw
>976	Identifier	angleDelta
>977	ExpressionStatement	 
>978	AssignmentExpr	angleDelta . pitch = SHORT2ANGLE ( curTech5Command . angles [ 0 ] ) - SHORT2ANGLE ( prevTech5Command \
>979	AdditiveExpression	SHORT2ANGLE ( curTech5Command . angles [ 0 ] ) - SHORT2ANGLE ( prevTech5Command . angles [ 0 ] )
>980	CallExpression	SHORT2ANGLE ( prevTech5Command . angles [ 0 ] )
>981	ArgumentList	prevTech5Command . angles [ 0 ]
>982	Argument	prevTech5Command . angles [ 0 ]
>983	ArrayIndexing	prevTech5Command . angles [ 0 ]
>984	PrimaryExpression	0
>985	MemberAccess	prevTech5Command . angles
>986	Identifier	angles
>987	Identifier	prevTech5Command
>988	Callee	SHORT2ANGLE
>989	Identifier	SHORT2ANGLE
>990	CallExpression	SHORT2ANGLE ( curTech5Command . angles [ 0 ] )
>991	ArgumentList	curTech5Command . angles [ 0 ]
>992	Argument	curTech5Command . angles [ 0 ]
>993	ArrayIndexing	curTech5Command . angles [ 0 ]
>994	PrimaryExpression	0
>995	MemberAccess	curTech5Command . angles
>996	Identifier	angles
>997	Identifier	curTech5Command
>998	Callee	SHORT2ANGLE
>999	Identifier	SHORT2ANGLE
>1000	MemberAccess	angleDelta . pitch
>1001	Identifier	pitch
>1002	Identifier	angleDelta
>1003	IdentifierDeclStatement	 
>1004	IdentifierDecl	angleDelta
>1005	Identifier	angleDelta
>1006	IdentifierDeclType	idAngles
>1007	IfStatement	if ( isRunning )
>1008	ElseStatement	else
>1009	CompoundStatement	 
>1010	ExpressionStatement	 
>1011	AssignmentExpr	cmd -> sidemove = scaledSide * 24.0f
>1012	MultiplicativeExpression	scaledSide * 24.0f
>1013	PrimaryExpression	24.0f
>1014	Identifier	scaledSide
>1015	PtrMemberAccess	cmd -> sidemove
>1016	Identifier	sidemove
>1017	Identifier	cmd
>1018	CompoundStatement	 
>1019	ExpressionStatement	 
>1020	AssignmentExpr	cmd -> sidemove = scaledSide * 40.0f
>1021	MultiplicativeExpression	scaledSide * 40.0f
>1022	PrimaryExpression	40.0f
>1023	Identifier	scaledSide
>1024	PtrMemberAccess	cmd -> sidemove
>1025	Identifier	sidemove
>1026	Identifier	cmd
>1027	Condition	 
>1028	Identifier	isRunning
>1029	IdentifierDeclStatement	 
>1030	IdentifierDecl	scaledSide = curTech5Command . rightmove / 127.0f
>1031	AssignmentExpr	scaledSide = curTech5Command . rightmove / 127.0f
>1032	MultiplicativeExpression	curTech5Command . rightmove / 127.0f
>1033	PrimaryExpression	127.0f
>1034	MemberAccess	curTech5Command . rightmove
>1035	Identifier	rightmove
>1036	Identifier	curTech5Command
>1037	Identifier	scaledSide
>1038	Identifier	scaledSide
>1039	IdentifierDeclType	const float
>1040	IfStatement	if ( isRunning )
>1041	ElseStatement	else
>1042	CompoundStatement	 
>1043	ExpressionStatement	 
>1044	AssignmentExpr	cmd -> forwardmove = scaledForward * 25.0f
>1045	MultiplicativeExpression	scaledForward * 25.0f
>1046	PrimaryExpression	25.0f
>1047	Identifier	scaledForward
>1048	PtrMemberAccess	cmd -> forwardmove
>1049	Identifier	forwardmove
>1050	Identifier	cmd
>1051	CompoundStatement	 
>1052	ExpressionStatement	 
>1053	AssignmentExpr	cmd -> forwardmove = scaledForward * 50.0f
>1054	MultiplicativeExpression	scaledForward * 50.0f
>1055	PrimaryExpression	50.0f
>1056	Identifier	scaledForward
>1057	PtrMemberAccess	cmd -> forwardmove
>1058	Identifier	forwardmove
>1059	Identifier	cmd
>1060	Condition	 
>1061	Identifier	isRunning
>1062	IdentifierDeclStatement	 
>1063	IdentifierDecl	scaledForward = curTech5Command . forwardmove / 127.0f
>1064	AssignmentExpr	scaledForward = curTech5Command . forwardmove / 127.0f
>1065	MultiplicativeExpression	curTech5Command . forwardmove / 127.0f
>1066	PrimaryExpression	127.0f
>1067	MemberAccess	curTech5Command . forwardmove
>1068	Identifier	forwardmove
>1069	Identifier	curTech5Command
>1070	Identifier	scaledForward
>1071	Identifier	scaledForward
>1072	IdentifierDeclType	const float
>1073	IdentifierDeclStatement	 
>1074	IdentifierDecl	isRunning = IsPlayerRunning ( curTech5Command )
>1075	AssignmentExpr	isRunning = IsPlayerRunning ( curTech5Command )
>1076	CallExpression	IsPlayerRunning ( curTech5Command )
>1077	ArgumentList	curTech5Command
>1078	Argument	curTech5Command
>1079	Identifier	curTech5Command
>1080	Callee	IsPlayerRunning
>1081	Identifier	IsPlayerRunning
>1082	Identifier	isRunning
>1083	Identifier	isRunning
>1084	IdentifierDeclType	const bool
>1085	IfStatement	if ( numCommands == 2 )
>1086	CompoundStatement	 
>1087	ExpressionStatement	 
>1088	AssignmentExpr	curTech5Command = * ( tech5commands ) [ 1 ]
>1089	UnaryOp	* ( tech5commands ) [ 1 ]
>1090	ArrayIndexing	( tech5commands ) [ 1 ]
>1091	PrimaryExpression	1
>1092	Identifier	tech5commands
>1093	UnaryOperator	*
>1094	Identifier	curTech5Command
>1095	ExpressionStatement	 
>1096	AssignmentExpr	prevTech5Command = * ( tech5commands ) [ 0 ]
>1097	UnaryOp	* ( tech5commands ) [ 0 ]
>1098	ArrayIndexing	( tech5commands ) [ 0 ]
>1099	PrimaryExpression	0
>1100	Identifier	tech5commands
>1101	UnaryOperator	*
>1102	Identifier	prevTech5Command
>1103	Condition	 
>1104	EqualityExpression	numCommands == 2
>1105	PrimaryExpression	2
>1106	Identifier	numCommands
>1107	IfStatement	if ( numCommands == 1 )
>1108	CompoundStatement	 
>1109	ExpressionStatement	 
>1110	AssignmentExpr	curTech5Command = * ( tech5commands ) [ 0 ]
>1111	UnaryOp	* ( tech5commands ) [ 0 ]
>1112	ArrayIndexing	( tech5commands ) [ 0 ]
>1113	PrimaryExpression	0
>1114	Identifier	tech5commands
>1115	UnaryOperator	*
>1116	Identifier	curTech5Command
>1117	Condition	 
>1118	EqualityExpression	numCommands == 1
>1119	PrimaryExpression	1
>1120	Identifier	numCommands
>1121	IdentifierDeclStatement	 
>1122	IdentifierDecl	curTech5Command
>1123	Identifier	curTech5Command
>1124	IdentifierDeclType	usercmd_t
>1125	IdentifierDeclStatement	 
>1126	IdentifierDecl	prevTech5Command
>1127	Identifier	prevTech5Command
>1128	IdentifierDeclType	usercmd_t
>1129	IdentifierDeclStatement	 
>1130	IdentifierDecl	numCommands = userCmdMgr -> GetPlayerCmds ( lobbyIndex , tech5commands , 2 )
>1131	AssignmentExpr	numCommands = userCmdMgr -> GetPlayerCmds ( lobbyIndex , tech5commands , 2 )
>1132	CallExpression	userCmdMgr -> GetPlayerCmds ( lobbyIndex , tech5commands , 2 )
>1133	ArgumentList	lobbyIndex
>1134	Argument	2
>1135	PrimaryExpression	2
>1136	Argument	tech5commands
>1137	Identifier	tech5commands
>1138	Argument	lobbyIndex
>1139	Identifier	lobbyIndex
>1140	Callee	userCmdMgr -> GetPlayerCmds
>1141	PtrMemberAccess	userCmdMgr -> GetPlayerCmds
>1142	Identifier	GetPlayerCmds
>1143	Identifier	userCmdMgr
>1144	Identifier	numCommands
>1145	Identifier	numCommands
>1146	IdentifierDeclType	const int
>1147	IdentifierDeclStatement	 
>1148	IdentifierDecl	* tech5commands [ 2 ] = { 0 , 0 }
>1149	AssignmentExpr	* tech5commands [ 2 ] = { 0 , 0 }
>1150	InitializerList	0
>1151	PrimaryExpression	0
>1152	PrimaryExpression	0
>1153	Identifier	tech5commands
>1154	PrimaryExpression	2
>1155	Identifier	tech5commands
>1156	IdentifierDeclType	usercmd_t * [ 2 ]
>1157	IfStatement	if ( localUser == NULL )
>1158	CompoundStatement	 
>1159	ReturnStatement	 
>1160	Condition	 
>1161	EqualityExpression	localUser == NULL
>1162	Identifier	NULL
>1163	Identifier	localUser
>1164	ExpressionStatement	 
>1165	AssignmentExpr	localUser = session -> GetGameLobbyBase ( ) . GetLocalUserFromLobbyUser ( lobbyIndex )
>1166	CallExpression	session -> GetGameLobbyBase ( ) . GetLocalUserFromLobbyUser ( lobbyIndex )
>1167	ArgumentList	lobbyIndex
>1168	Argument	lobbyIndex
>1169	Identifier	lobbyIndex
>1170	Callee	session -> GetGameLobbyBase ( ) . GetLocalUserFromLobbyUser
>1171	MemberAccess	session -> GetGameLobbyBase ( ) . GetLocalUserFromLobbyUser
>1172	Identifier	GetLocalUserFromLobbyUser
>1173	CallExpression	session -> GetGameLobbyBase ( )
>1174	ArgumentList	 
>1175	Callee	session -> GetGameLobbyBase
>1176	PtrMemberAccess	session -> GetGameLobbyBase
>1177	Identifier	GetGameLobbyBase
>1178	Identifier	session
>1179	Identifier	localUser
>1180	Statement	 
>1181	Statement	 
>1182	Statement	 
>1183	Statement	 
>1184	IdentifierDeclStatement	 
>1185	IdentifierDecl	lobbyIndex = gameLocal -> GetLobbyIndexFromDoomLibIndex ( playerIndex )
>1186	AssignmentExpr	lobbyIndex = gameLocal -> GetLobbyIndexFromDoomLibIndex ( playerIndex )
>1187	CallExpression	gameLocal -> GetLobbyIndexFromDoomLibIndex ( playerIndex )
>1188	ArgumentList	playerIndex
>1189	Argument	playerIndex
>1190	Identifier	playerIndex
>1191	Callee	gameLocal -> GetLobbyIndexFromDoomLibIndex
>1192	PtrMemberAccess	gameLocal -> GetLobbyIndexFromDoomLibIndex
>1193	Identifier	GetLobbyIndexFromDoomLibIndex
>1194	Identifier	gameLocal
>1195	Identifier	lobbyIndex
>1196	Identifier	lobbyIndex
>1197	IdentifierDeclType	const int
>1198	IfStatement	if ( playerIndex < 0 )
>1199	CompoundStatement	 
>1200	ReturnStatement	 
>1201	Condition	 
>1202	RelationalExpression	playerIndex < 0
>1203	PrimaryExpression	0
>1204	Identifier	playerIndex
>1205	IdentifierDeclStatement	 
>1206	IdentifierDecl	playerIndex = DoomLib 
>1207	AssignmentExpr	playerIndex = DoomLib 
>1208	CallExpression	DoomLib 
>1209	ArgumentList	 
>1210	Callee	DoomLib 
>1211	Identifier	DoomLib 
>1212	Identifier	playerIndex
>1213	Identifier	playerIndex
>1214	IdentifierDeclType	const int
>1215	Condition	 
>1216	EqualityExpression	userCmdMgr != NULL
>1217	Identifier	NULL
>1218	Identifier	userCmdMgr
>1219	ExpressionStatement	 
>1220	Statement	 
>1221	Statement	 
>1222	Statement	 
>1223	Statement	 
>1224	Statement	 
>1225	Statement	 
>1226	Statement	 
>1227	Statement	 
>1228	Statement	 
>1229	Statement	 
>1230	Statement	 
>1231	Statement	 
>1232	Statement	 
>1233	Statement	 
>1234	Statement	 
>1235	Statement	 
>1236	Statement	 
>1237	Statement	 
>1238	Statement	 
>1239	Statement	 
>1240	Statement	 
>1241	Statement	 
>1242	ExpressionStatement	 
>1243	CallExpression	memcpy ( cmd , base , sizeof ( * cmd ) )
>1244	ArgumentList	cmd
>1245	Argument	sizeof ( * cmd )
>1246	SizeofExpr	sizeof ( * cmd )
>1247	UnaryOp	* cmd
>1248	Identifier	cmd
>1249	UnaryOperator	*
>1250	Sizeof	sizeof
>1251	Argument	base
>1252	Identifier	base
>1253	Argument	cmd
>1254	Identifier	cmd
>1255	Callee	memcpy
>1256	Identifier	memcpy
>1257	ExpressionStatement	 
>1258	AssignmentExpr	base = I_BaseTiccmd ( )
>1259	CallExpression	I_BaseTiccmd ( )
>1260	ArgumentList	 
>1261	Callee	I_BaseTiccmd
>1262	Identifier	I_BaseTiccmd
>1263	Identifier	base
>1264	IdentifierDeclStatement	 
>1265	IdentifierDecl	* base
>1266	Identifier	base
>1267	IdentifierDeclType	ticcmd_t *
>1268	IdentifierDeclStatement	 
>1269	IdentifierDecl	side
>1270	Identifier	side
>1271	IdentifierDeclType	int
>1272	IdentifierDeclStatement	 
>1273	IdentifierDecl	forward
>1274	Identifier	forward
>1275	IdentifierDeclType	int
>1276	IdentifierDeclStatement	 
>1277	IdentifierDecl	tspeed
>1278	Identifier	tspeed
>1279	IdentifierDeclType	int
>1280	IdentifierDeclStatement	 
>1281	IdentifierDecl	speed
>1282	Identifier	speed
>1283	IdentifierDeclType	int
>1284	IdentifierDeclStatement	 
>1285	IdentifierDecl	i
>1286	Identifier	i
>1287	IdentifierDeclType	int
>1377	FunctionDef	G_DoLoadLevel ()
>1378	ParameterList	 
>1379	ReturnType	void
>1380	CompoundStatement	 
>1381	Statement	 
>1382	Statement	 
>1383	Statement	 
>1384	Statement	 
>1385	Statement	 
>1386	Statement	 
>1387	Statement	 
>1388	Statement	 
>1389	Statement	 
>1390	ExpressionStatement	 
>1391	AssignmentExpr	g -> skyflatnum = R_FlatNumForName ( SKYFLATNAME )
>1392	CallExpression	R_FlatNumForName ( SKYFLATNAME )
>1393	ArgumentList	SKYFLATNAME
>1394	Argument	SKYFLATNAME
>1395	Identifier	SKYFLATNAME
>1396	Callee	R_FlatNumForName
>1397	Identifier	R_FlatNumForName
>1398	PtrMemberAccess	g -> skyflatnum
>1399	Identifier	skyflatnum
>1400	Identifier	g
>1401	Statement	 
>1402	ExpressionStatement	 
>1403	CallExpression	M_ClearRandom ( )
>1404	ArgumentList	 
>1405	Callee	M_ClearRandom
>1406	Identifier	M_ClearRandom
>1407	IdentifierDeclStatement	 
>1408	IdentifierDecl	i
>1409	Identifier	i
>1410	IdentifierDeclType	int
>1420	FunctionDef	G_Responder (event_t * ev)
>1421	ParameterList	event_t * ev
>1422	Parameter	 
>1423	Identifier	ev
>1424	ParameterType	event_t *
>1425	ReturnType	qboolean
>1426	CompoundStatement	 
>1427	ReturnStatement	 
>1428	Identifier	false
>1429	SwitchStatement	switch ( ev -> type )
>1430	CompoundStatement	 
>1431	BreakStatement	 
>1432	Label	 
>1433	Identifier	default
>1434	ReturnStatement	 
>1435	Identifier	true
>1436	ExpressionStatement	 
>1437	AssignmentExpr	g -> joyymove = ev -> data3
>1438	PtrMemberAccess	ev -> data3
>1439	Identifier	data3
>1440	Identifier	ev
>1441	PtrMemberAccess	g -> joyymove
>1442	Identifier	joyymove
>1443	Identifier	g
>1444	Statement	 
>1445	ExpressionStatement	 
>1446	AssignmentExpr	g -> joyxmove = ev -> data2
>1447	PtrMemberAccess	ev -> data2
>1448	Identifier	data2
>1449	Identifier	ev
>1450	PtrMemberAccess	g -> joyxmove
>1451	Identifier	joyxmove
>1452	Identifier	g
>1453	Statement	 
>1454	ExpressionStatement	 
>1455	AssignmentExpr	g -> joybuttons [ 3 ] = ev -> data1 & 8
>1456	BitAndExpression	ev -> data1 & 8
>1457	PrimaryExpression	8
>1458	PtrMemberAccess	ev -> data1
>1459	Identifier	data1
>1460	Identifier	ev
>1461	ArrayIndexing	g -> joybuttons [ 3 ]
>1462	PrimaryExpression	3
>1463	PtrMemberAccess	g -> joybuttons
>1464	Identifier	joybuttons
>1465	Identifier	g
>1466	Statement	 
>1467	ExpressionStatement	 
>1468	AssignmentExpr	g -> joybuttons [ 2 ] = ev -> data1 & 4
>1469	BitAndExpression	ev -> data1 & 4
>1470	PrimaryExpression	4
>1471	PtrMemberAccess	ev -> data1
>1472	Identifier	data1
>1473	Identifier	ev
>1474	ArrayIndexing	g -> joybuttons [ 2 ]
>1475	PrimaryExpression	2
>1476	PtrMemberAccess	g -> joybuttons
>1477	Identifier	joybuttons
>1478	Identifier	g
>1479	Statement	 
>1480	ExpressionStatement	 
>1481	AssignmentExpr	g -> joybuttons [ 1 ] = ev -> data1 & 2
>1482	BitAndExpression	ev -> data1 & 2
>1483	PrimaryExpression	2
>1484	PtrMemberAccess	ev -> data1
>1485	Identifier	data1
>1486	Identifier	ev
>1487	ArrayIndexing	g -> joybuttons [ 1 ]
>1488	PrimaryExpression	1
>1489	PtrMemberAccess	g -> joybuttons
>1490	Identifier	joybuttons
>1491	Identifier	g
>1492	Statement	 
>1493	ExpressionStatement	 
>1494	AssignmentExpr	g -> joybuttons [ 0 ] = ev -> data1 & 1
>1495	BitAndExpression	ev -> data1 & 1
>1496	PrimaryExpression	1
>1497	PtrMemberAccess	ev -> data1
>1498	Identifier	data1
>1499	Identifier	ev
>1500	ArrayIndexing	g -> joybuttons [ 0 ]
>1501	PrimaryExpression	0
>1502	PtrMemberAccess	g -> joybuttons
>1503	Identifier	joybuttons
>1504	Identifier	g
>1505	Statement	 
>1506	Label	 
>1507	Identifier	ev_joystick
>1508	ReturnStatement	 
>1509	Identifier	true
>1510	ExpressionStatement	 
>1511	PrimaryExpression	10
>1512	Statement	 
>1513	Statement	 
>1514	Statement	 
>1515	Statement	 
>1516	Statement	 
>1517	Statement	 
>1518	Statement	 
>1519	Statement	 
>1520	Statement	 
>1521	Statement	 
>1522	Statement	 
>1523	Statement	 
>1524	Statement	 
>1525	Statement	 
>1526	Statement	 
>1527	Statement	 
>1528	Statement	 
>1529	Statement	 
>1530	ExpressionStatement	 
>1531	PrimaryExpression	10
>1532	Statement	 
>1533	Statement	 
>1534	Statement	 
>1535	Statement	 
>1536	Statement	 
>1537	Statement	 
>1538	Statement	 
>1539	Statement	 
>1540	Statement	 
>1541	Statement	 
>1542	Statement	 
>1543	Statement	 
>1544	Statement	 
>1545	Statement	 
>1546	Statement	 
>1547	Statement	 
>1548	Statement	 
>1549	Statement	 
>1550	ExpressionStatement	 
>1551	AssignmentExpr	g -> mousebuttons [ 2 ] = ev -> data1 & 4
>1552	BitAndExpression	ev -> data1 & 4
>1553	PrimaryExpression	4
>1554	PtrMemberAccess	ev -> data1
>1555	Identifier	data1
>1556	Identifier	ev
>1557	ArrayIndexing	g -> mousebuttons [ 2 ]
>1558	PrimaryExpression	2
>1559	PtrMemberAccess	g -> mousebuttons
>1560	Identifier	mousebuttons
>1561	Identifier	g
>1562	Statement	 
>1563	ExpressionStatement	 
>1564	AssignmentExpr	g -> mousebuttons [ 1 ] = ev -> data1 & 2
>1565	BitAndExpression	ev -> data1 & 2
>1566	PrimaryExpression	2
>1567	PtrMemberAccess	ev -> data1
>1568	Identifier	data1
>1569	Identifier	ev
>1570	ArrayIndexing	g -> mousebuttons [ 1 ]
>1571	PrimaryExpression	1
>1572	PtrMemberAccess	g -> mousebuttons
>1573	Identifier	mousebuttons
>1574	Identifier	g
>1575	Statement	 
>1576	ExpressionStatement	 
>1577	AssignmentExpr	g -> mousebuttons [ 0 ] = ev -> data1 & 1
>1578	BitAndExpression	ev -> data1 & 1
>1579	PrimaryExpression	1
>1580	PtrMemberAccess	ev -> data1
>1581	Identifier	data1
>1582	Identifier	ev
>1583	ArrayIndexing	g -> mousebuttons [ 0 ]
>1584	PrimaryExpression	0
>1585	PtrMemberAccess	g -> mousebuttons
>1586	Identifier	mousebuttons
>1587	Identifier	g
>1588	Statement	 
>1589	Label	 
>1590	Identifier	ev_mouse
>1591	ReturnStatement	 
>1592	Identifier	false
>1593	ExpressionStatement	 
>1594	AssignmentExpr	g -> gamekeydown [ ev -> data1 ] = false
>1595	Identifier	false
>1596	ArrayIndexing	g -> gamekeydown [ ev -> data1 ]
>1597	PtrMemberAccess	ev -> data1
>1598	Identifier	data1
>1599	Identifier	ev
>1600	PtrMemberAccess	g -> gamekeydown
>1601	Identifier	gamekeydown
>1602	Identifier	g
>1603	IfStatement	if ( ev -> data1 < NUMKEYS )
>1604	Statement	 
>1605	Condition	 
>1606	RelationalExpression	ev -> data1 < NUMKEYS
>1607	Identifier	NUMKEYS
>1608	PtrMemberAccess	ev -> data1
>1609	Identifier	data1
>1610	Identifier	ev
>1611	Label	 
>1612	Identifier	ev_keyup
>1613	ReturnStatement	 
>1614	Identifier	true
>1615	ExpressionStatement	 
>1616	AssignmentExpr	g -> gamekeydown [ ev -> data1 ] = true
>1617	Identifier	true
>1618	ArrayIndexing	g -> gamekeydown [ ev -> data1 ]
>1619	PtrMemberAccess	ev -> data1
>1620	Identifier	data1
>1621	Identifier	ev
>1622	PtrMemberAccess	g -> gamekeydown
>1623	Identifier	gamekeydown
>1624	Identifier	g
>1625	IfStatement	if ( ev -> data1 < NUMKEYS )
>1626	Statement	 
>1627	Condition	 
>1628	RelationalExpression	ev -> data1 < NUMKEYS
>1629	Identifier	NUMKEYS
>1630	PtrMemberAccess	ev -> data1
>1631	Identifier	data1
>1632	Identifier	ev
>1633	IfStatement	if ( ev -> data1 == KEY_PAUSE )
>1634	CompoundStatement	 
>1635	ReturnStatement	 
>1636	Identifier	true
>1637	ExpressionStatement	 
>1638	AssignmentExpr	g -> sendpause = true
>1639	Identifier	true
>1640	PtrMemberAccess	g -> sendpause
>1641	Identifier	sendpause
>1642	Identifier	g
>1643	Statement	 
>1644	Condition	 
>1645	EqualityExpression	ev -> data1 == KEY_PAUSE
>1646	Identifier	KEY_PAUSE
>1647	PtrMemberAccess	ev -> data1
>1648	Identifier	data1
>1649	Identifier	ev
>1650	Label	 
>1651	Identifier	ev_keydown
>1652	Condition	 
>1653	PtrMemberAccess	ev -> type
>1654	Identifier	type
>1655	Identifier	ev
>1656	CompoundStatement	 
>1657	IfStatement	if ( F_Responder ( ev ) )
>1658	ReturnStatement	 
>1659	Identifier	true
>1660	Condition	 
>1661	CallExpression	F_Responder ( ev )
>1662	ArgumentList	ev
>1663	Argument	ev
>1664	Identifier	ev
>1665	Callee	F_Responder
>1666	Identifier	F_Responder
>1667	Statement	 
>1668	Statement	 
>1669	Statement	 
>1670	Statement	 
>1671	Statement	 
>1672	Statement	 
>1673	Statement	 
>1674	Statement	 
>1675	Statement	 
>1676	CompoundStatement	 
>1677	IfStatement	if ( AM_Responder ( ev ) )
>1678	ReturnStatement	 
>1679	Identifier	true
>1680	Condition	 
>1681	CallExpression	AM_Responder ( ev )
>1682	ArgumentList	ev
>1683	Argument	ev
>1684	Identifier	ev
>1685	Callee	AM_Responder
>1686	Identifier	AM_Responder
>1687	IfStatement	if ( ST_Responder ( ev ) )
>1688	ReturnStatement	 
>1689	Identifier	true
>1690	Condition	 
>1691	CallExpression	ST_Responder ( ev )
>1692	ArgumentList	ev
>1693	Argument	ev
>1694	Identifier	ev
>1695	Callee	ST_Responder
>1696	Identifier	ST_Responder
>1697	IfStatement	if ( HU_Responder ( ev ) )
>1698	ReturnStatement	 
>1699	Identifier	true
>1700	Condition	 
>1701	CallExpression	HU_Responder ( ev )
>1702	ArgumentList	ev
>1703	Argument	ev
>1704	Identifier	ev
>1705	Callee	HU_Responder
>1706	Identifier	HU_Responder
>1707	CompoundStatement	 
>1708	ReturnStatement	 
>1709	Identifier	true
>1710	ExpressionStatement	 
>1711	CallExpression	G_DeathMatchSpawnPlayer ( 0 )
>1712	ArgumentList	0
>1713	Argument	0
>1714	PrimaryExpression	0
>1715	Callee	G_DeathMatchSpawnPlayer
>1716	Identifier	G_DeathMatchSpawnPlayer
>1717	Statement	 
>1718	Statement	 
>1719	Statement	 
>1720	Statement	 
>1721	Statement	 
>1722	Statement	 
>1723	Statement	 
>1724	Statement	 
>1725	Statement	 
>1726	Statement	 
>1727	Statement	 
>1728	Statement	 
>1729	Statement	 
>1730	Statement	 
>1731	Statement	 
>1732	Statement	 
>1733	Statement	 
>1734	Statement	 
>1735	Statement	 
>1736	Statement	 
>1737	Statement	 
>1738	Statement	 
>1739	Statement	 
>1740	Statement	 
>1741	Statement	 
>1742	Statement	 
>1743	Statement	 
>1744	Statement	 
>1745	Statement	 
>1746	Statement	 
>1747	Statement	 
>1748	Statement	 
>1749	Statement	 
>1750	Statement	 
>1751	Statement	 
>1752	Statement	 
>1753	Statement	 
>1754	Statement	 
>1755	Statement	 
>1756	Statement	 
>1757	Statement	 
>1758	Statement	 
>1759	Statement	 
>1760	Statement	 
>1761	Statement	 
>1762	CompoundStatement	 
>1763	ReturnStatement	 
>1764	Identifier	false
>1765	IfStatement	if ( ev -> type == ev_keydown || ( ev -> type == ev_mouse && ev -> data1 ) || ( ev -> type == ev_joystick && ev \
>1766	CompoundStatement	 
>1767	ReturnStatement	 
>1768	Identifier	true
>1769	ExpressionStatement	 
>1770	CallExpression	M_StartControlPanel ( )
>1771	ArgumentList	 
>1772	Callee	M_StartControlPanel
>1773	Identifier	M_StartControlPanel
>1774	Condition	 
>1775	OrExpression	ev -> type == ev_keydown || ( ev -> type == ev_mouse && ev -> data1 ) || ( ev -> type == ev_joystick && \
>1776	OrExpression	( ev -> type == ev_mouse && ev -> data1 ) || ( ev -> type == ev_joystick && ev -> data1 )
>1777	AndExpression	ev -> type == ev_joystick && ev -> data1
>1778	PtrMemberAccess	ev -> data1
>1779	Identifier	data1
>1780	Identifier	ev
>1781	EqualityExpression	ev -> type == ev_joystick
>1782	Identifier	ev_joystick
>1783	PtrMemberAccess	ev -> type
>1784	Identifier	type
>1785	Identifier	ev
>1786	AndExpression	ev -> type == ev_mouse && ev -> data1
>1787	PtrMemberAccess	ev -> data1
>1788	Identifier	data1
>1789	Identifier	ev
>1790	EqualityExpression	ev -> type == ev_mouse
>1791	Identifier	ev_mouse
>1792	PtrMemberAccess	ev -> type
>1793	Identifier	type
>1794	Identifier	ev
>1795	EqualityExpression	ev -> type == ev_keydown
>1796	Identifier	ev_keydown
>1797	PtrMemberAccess	ev -> type
>1798	Identifier	type
>1799	Identifier	ev
>1800	Statement	 
>1801	Statement	 
>1802	Statement	 
>1803	Statement	 
>1804	Statement	 
>1805	Statement	 
>1806	Statement	 
>1807	Statement	 
>1808	Statement	 
>1809	Statement	 
>1810	Statement	 
>1811	Statement	 
>1812	Statement	 
>1813	Statement	 
>1814	Statement	 
>1815	Statement	 
>1816	Statement	 
>1817	Statement	 
>1818	Statement	 
>1819	Statement	 
>1820	Statement	 
>1821	Statement	 
>1822	Statement	 
>1823	Statement	 
>1824	Statement	 
>1825	Statement	 
>1826	Statement	 
>1827	Statement	 
>1828	Statement	 
>1829	CompoundStatement	 
>1830	ReturnStatement	 
>1831	Identifier	true
>1832	ExpressionStatement	 
>1833	Statement	 
>1834	Statement	 
>1835	Statement	 
>1836	Statement	 
>1837	Statement	 
>1838	Statement	 
>1839	Statement	 
>1840	Statement	 
>1841	Statement	 
>1842	Statement	 
>1843	Statement	 
>1844	Statement	 
>1845	Statement	 
>1846	Statement	 
>1847	Statement	 
>1848	Statement	 
>1849	Statement	 
>1850	Statement	 
>1851	Statement	 
>1852	Statement	 
>1853	Statement	 
>1854	Statement	 
>1855	Statement	 
>1856	Statement	 
>1857	DoStatement	do
>1858	CompoundStatement	 
>1859	ExpressionStatement	g -> displayplayer = 0
>1860	AssignmentExpr	g -> displayplayer = 0
>1861	PrimaryExpression	0
>1862	PtrMemberAccess	g -> displayplayer
>1863	Identifier	displayplayer
>1864	Identifier	g
>1865	Statement	 
>1866	Statement	)
>1867	Statement	MAXPLAYERS
>1868	Statement	==
>1869	Statement	displayplayer
>1870	Statement	->
>1871	Statement	g
>1872	Statement	 
>1873	Statement	(
>1874	Statement	if
>1875	ExpressionStatement	g -> displayplayer ++
>1876	IncDecOp	g -> displayplayer ++
>1877	IncDec	++
>1878	PtrMemberAccess	g -> displayplayer
>1879	Identifier	displayplayer
>1880	Identifier	g
>1881	Statement	 
>1882	Statement	 
>1883	Statement	 
>1884	Statement	 
>1885	Statement	 
>1886	Statement	 
>1887	Statement	 
>1888	Statement	 
>1889	Statement	 
>1890	Statement	 
>1891	Statement	 
>1892	Statement	 
>1893	Statement	 
>1894	Statement	 
>1895	Statement	 
>1896	Statement	 
>1897	Statement	 
>1898	Statement	 
>1899	Statement	 
>1900	Statement	 
>1901	Statement	 
>1902	Statement	 
>1903	Statement	 
>1904	Statement	 
>1905	Statement	 
>1906	Statement	 
>1907	Statement	 
>1908	Statement	 
>1909	Statement	 
>1910	Statement	 
>1911	Statement	 
>1912	Statement	 
>1913	Statement	 
>1914	Statement	 
>1915	Statement	 
>1951	FunctionDef	G_Ticker ()
>1952	ParameterList	 
>1953	ReturnType	void
>1954	CompoundStatement	 
>1955	ExpressionStatement	 
>1956	Identifier	BACKUPTICS
>1957	Statement	 
>1958	Statement	 
>1959	Statement	 
>1960	Statement	 
>1961	Statement	 
>1962	Statement	 
>1963	Statement	 
>1964	Statement	 
>1965	Statement	 
>1966	Statement	 
>1967	Statement	 
>1968	Statement	 
>1969	Statement	 
>1970	Statement	 
>1971	CompoundStatement	 
>1972	CompoundStatement	 
>1973	BreakStatement	 
>1974	Label	 
>1975	Identifier	ga_nothing
>1976	BreakStatement	 
>1977	ExpressionStatement	 
>1978	AssignmentExpr	g -> gameaction = ga_nothing
>1979	Identifier	ga_nothing
>1980	PtrMemberAccess	g -> gameaction
>1981	Identifier	gameaction
>1982	Identifier	g
>1983	Statement	 
>1984	ExpressionStatement	 
>1985	CallExpression	M_ScreenShot ( )
>1986	ArgumentList	 
>1987	Callee	M_ScreenShot
>1988	Identifier	M_ScreenShot
>1989	Label	 
>1990	Identifier	ga_screenshot
>1991	BreakStatement	 
>1992	ExpressionStatement	 
>1993	CallExpression	G_DoWorldDone ( )
>1994	ArgumentList	 
>1995	Callee	G_DoWorldDone
>1996	Identifier	G_DoWorldDone
>1997	Label	 
>1998	Identifier	ga_worlddone
>1999	BreakStatement	 
>2000	ExpressionStatement	 
>2001	CallExpression	F_StartFinale ( )
>2002	ArgumentList	 
>2003	Callee	F_StartFinale
>2004	Identifier	F_StartFinale
>2005	Label	 
>2006	Identifier	ga_victory
>2007	BreakStatement	 
>2008	ExpressionStatement	 
>2009	CallExpression	G_DoCompleted ( )
>2010	ArgumentList	 
>2011	Callee	G_DoCompleted
>2012	Identifier	G_DoCompleted
>2013	Label	 
>2014	Identifier	ga_completed
>2015	BreakStatement	 
>2016	ExpressionStatement	 
>2017	CallExpression	G_DoPlayDemo ( )
>2018	ArgumentList	 
>2019	Callee	G_DoPlayDemo
>2020	Identifier	G_DoPlayDemo
>2021	Label	 
>2022	Identifier	ga_playdemo
>2023	BreakStatement	 
>2024	ExpressionStatement	 
>2025	CallExpression	G_DoSaveGame ( )
>2026	ArgumentList	 
>2027	Callee	G_DoSaveGame
>2028	Identifier	G_DoSaveGame
>2029	Label	 
>2030	Identifier	ga_savegame
>2031	BreakStatement	 
>2032	ExpressionStatement	 
>2033	CallExpression	G_DoLoadGame ( )
>2034	ArgumentList	 
>2035	Callee	G_DoLoadGame
>2036	Identifier	G_DoLoadGame
>2037	Label	 
>2038	Identifier	ga_loadgame
>2039	BreakStatement	 
>2040	ExpressionStatement	 
>2041	CallExpression	G_DoNewGame ( )
>2042	ArgumentList	 
>2043	Callee	G_DoNewGame
>2044	Identifier	G_DoNewGame
>2045	Label	 
>2046	Identifier	ga_newgame
>2047	BreakStatement	 
>2048	ExpressionStatement	 
>2049	CallExpression	G_DoLoadLevel ( )
>2050	ArgumentList	 
>2051	Callee	G_DoLoadLevel
>2052	Identifier	G_DoLoadLevel
>2053	Label	 
>2054	Identifier	ga_loadlevel
>2055	Statement	 
>2056	Statement	 
>2057	Statement	 
>2058	Statement	 
>2059	Statement	 
>2060	Statement	 
>2061	Statement	 
>2062	Statement	 
>2063	Statement	 
>2064	Statement	 
>2065	Statement	 
>2066	Statement	 
>2067	Statement	 
>2068	Statement	 
>2069	Statement	 
>2070	Statement	 
>2071	ExpressionStatement	 
>2072	CallExpression	G_DoReborn ( i )
>2073	ArgumentList	i
>2074	Argument	i
>2075	Identifier	i
>2076	Callee	G_DoReborn
>2077	Identifier	G_DoReborn
>2078	Statement	 
>2079	Statement	 
>2080	Statement	 
>2081	Statement	 
>2082	Statement	 
>2083	Statement	 
>2084	Statement	 
>2085	Statement	 
>2086	Statement	 
>2087	Statement	 
>2088	Statement	 
>2089	Statement	 
>2090	Statement	 
>2091	Statement	 
>2092	Statement	 
>2093	Statement	 
>2094	Statement	 
>2095	Statement	 
>2096	Statement	 
>2097	Statement	 
>2098	Statement	 
>2099	ForStatement	for ( i = 0 ; i < MAXPLAYERS ; i ++ )
>2100	Statement	 
>2101	IncDecOp	 
>2102	IncDec	++
>2103	Identifier	i
>2104	Condition	 
>2105	RelationalExpression	i < MAXPLAYERS
>2106	Identifier	MAXPLAYERS
>2107	Identifier	i
>2108	ForInit	 
>2109	AssignmentExpr	i = 0
>2110	PrimaryExpression	0
>2111	Identifier	i
>2112	IdentifierDeclStatement	 
>2113	IdentifierDecl	* cmd
>2114	Identifier	cmd
>2115	IdentifierDeclType	ticcmd_t *
>2116	IdentifierDeclStatement	 
>2117	IdentifierDecl	buf
>2118	Identifier	buf
>2119	IdentifierDeclType	int
>2120	IdentifierDeclStatement	 
>2121	IdentifierDecl	i
>2122	Identifier	i
>2123	IdentifierDeclType	int
>2136	FunctionDef	G_InitPlayer (int player)
>2137	ParameterList	int player
>2138	Parameter	 
>2139	Identifier	player
>2140	ParameterType	int
>2141	ReturnType	void
>2142	CompoundStatement	 
>2143	ExpressionStatement	 
>2144	CallExpression	G_PlayerReborn ( player )
>2145	ArgumentList	player
>2146	Argument	player
>2147	Identifier	player
>2148	Callee	G_PlayerReborn
>2149	Identifier	G_PlayerReborn
>2150	ExpressionStatement	 
>2151	ArrayIndexing	g -> players [ player ]
>2152	Identifier	player
>2153	PtrMemberAccess	g -> players
>2154	Identifier	players
>2155	Identifier	g
>2156	Statement	 
>2157	Statement	 
>2158	Statement	 
>2159	Statement	 
>2160	IdentifierDeclStatement	 
>2161	IdentifierDecl	* p
>2162	Identifier	p
>2163	IdentifierDeclType	player_t *
>2172	FunctionDef	G_PlayerFinishLevel (int player)
>2173	ParameterList	int player
>2174	Parameter	 
>2175	Identifier	player
>2176	ParameterType	int
>2177	ReturnType	void
>2178	CompoundStatement	 
>2179	ExpressionStatement	 
>2180	AssignmentExpr	p -> bonuscount = 0
>2181	PrimaryExpression	0
>2182	PtrMemberAccess	p -> bonuscount
>2183	Identifier	bonuscount
>2184	Identifier	p
>2185	ExpressionStatement	 
>2186	AssignmentExpr	p -> damagecount = 0
>2187	PrimaryExpression	0
>2188	PtrMemberAccess	p -> damagecount
>2189	Identifier	damagecount
>2190	Identifier	p
>2191	ExpressionStatement	 
>2192	AssignmentExpr	p -> fixedcolormap = 0
>2193	PrimaryExpression	0
>2194	PtrMemberAccess	p -> fixedcolormap
>2195	Identifier	fixedcolormap
>2196	Identifier	p
>2197	ExpressionStatement	 
>2198	AssignmentExpr	p -> extralight = 0
>2199	PrimaryExpression	0
>2200	PtrMemberAccess	p -> extralight
>2201	Identifier	extralight
>2202	Identifier	p
>2203	ExpressionStatement	 
>2204	AssignmentExpr	p -> mo -> flags &= ~MF_SHADOW
>2205	Identifier	~MF_SHADOW
>2206	PtrMemberAccess	p -> mo -> flags
>2207	Identifier	flags
>2208	PtrMemberAccess	p -> mo
>2209	Identifier	mo
>2210	Identifier	p
>2211	ExpressionStatement	 
>2212	CallExpression	memset ( p -> cards , 0 , sizeof ( p -> cards ) )
>2213	ArgumentList	p -> cards
>2214	Argument	sizeof ( p -> cards )
>2215	SizeofExpr	sizeof ( p -> cards )
>2216	PtrMemberAccess	p -> cards
>2217	Identifier	cards
>2218	Identifier	p
>2219	Sizeof	sizeof
>2220	Argument	0
>2221	PrimaryExpression	0
>2222	Argument	p -> cards
>2223	PtrMemberAccess	p -> cards
>2224	Identifier	cards
>2225	Identifier	p
>2226	Callee	memset
>2227	Identifier	memset
>2228	ExpressionStatement	 
>2229	CallExpression	memset ( p -> powers , 0 , sizeof ( p -> powers ) )
>2230	ArgumentList	p -> powers
>2231	Argument	sizeof ( p -> powers )
>2232	SizeofExpr	sizeof ( p -> powers )
>2233	PtrMemberAccess	p -> powers
>2234	Identifier	powers
>2235	Identifier	p
>2236	Sizeof	sizeof
>2237	Argument	0
>2238	PrimaryExpression	0
>2239	Argument	p -> powers
>2240	PtrMemberAccess	p -> powers
>2241	Identifier	powers
>2242	Identifier	p
>2243	Callee	memset
>2244	Identifier	memset
>2245	ExpressionStatement	 
>2246	ArrayIndexing	g -> players [ player ]
>2247	Identifier	player
>2248	PtrMemberAccess	g -> players
>2249	Identifier	players
>2250	Identifier	g
>2251	Statement	 
>2252	Statement	 
>2253	Statement	 
>2254	Statement	 
>2255	IdentifierDeclStatement	 
>2256	IdentifierDecl	* p
>2257	Identifier	p
>2258	IdentifierDeclType	player_t *
>2279	FunctionDef	G_PlayerReborn (int player)
>2280	ParameterList	int player
>2281	Parameter	 
>2282	Identifier	player
>2283	ParameterType	int
>2284	ReturnType	void
>2285	CompoundStatement	 
>2286	ForStatement	for ( i = 0 ; i < NUMAMMO ; i ++ )
>2287	ExpressionStatement	 
>2288	AssignmentExpr	p -> maxammo [ i ] = maxammo [ i ]
>2289	ArrayIndexing	maxammo [ i ]
>2290	Identifier	i
>2291	Identifier	maxammo
>2292	ArrayIndexing	p -> maxammo [ i ]
>2293	Identifier	i
>2294	PtrMemberAccess	p -> maxammo
>2295	Identifier	maxammo
>2296	Identifier	p
>2297	IncDecOp	 
>2298	IncDec	++
>2299	Identifier	i
>2300	Condition	 
>2301	RelationalExpression	i < NUMAMMO
>2302	Identifier	NUMAMMO
>2303	Identifier	i
>2304	ForInit	 
>2305	AssignmentExpr	i = 0
>2306	PrimaryExpression	0
>2307	Identifier	i
>2308	ExpressionStatement	 
>2309	AssignmentExpr	p -> cheats = gameLocal -> cheats
>2310	PtrMemberAccess	gameLocal -> cheats
>2311	Identifier	cheats
>2312	Identifier	gameLocal
>2313	PtrMemberAccess	p -> cheats
>2314	Identifier	cheats
>2315	Identifier	p
>2316	ExpressionStatement	 
>2317	AssignmentExpr	p -> ammo [ am_clip ] = 50
>2318	PrimaryExpression	50
>2319	ArrayIndexing	p -> ammo [ am_clip ]
>2320	Identifier	am_clip
>2321	PtrMemberAccess	p -> ammo
>2322	Identifier	ammo
>2323	Identifier	p
>2324	ExpressionStatement	 
>2325	AssignmentExpr	p -> weaponowned [ wp_pistol ] = true
>2326	Identifier	true
>2327	ArrayIndexing	p -> weaponowned [ wp_pistol ]
>2328	Identifier	wp_pistol
>2329	PtrMemberAccess	p -> weaponowned
>2330	Identifier	weaponowned
>2331	Identifier	p
>2332	ExpressionStatement	 
>2333	AssignmentExpr	p -> weaponowned [ wp_fist ] = true
>2334	Identifier	true
>2335	ArrayIndexing	p -> weaponowned [ wp_fist ]
>2336	Identifier	wp_fist
>2337	PtrMemberAccess	p -> weaponowned
>2338	Identifier	weaponowned
>2339	Identifier	p
>2340	ExpressionStatement	 
>2341	AssignmentExpr	p -> readyweapon = p -> pendingweapon = wp_pistol
>2342	AssignmentExpr	p -> pendingweapon = wp_pistol
>2343	Identifier	wp_pistol
>2344	PtrMemberAccess	p -> pendingweapon
>2345	Identifier	pendingweapon
>2346	Identifier	p
>2347	PtrMemberAccess	p -> readyweapon
>2348	Identifier	readyweapon
>2349	Identifier	p
>2350	ExpressionStatement	 
>2351	AssignmentExpr	p -> health = MAXHEALTH
>2352	Identifier	MAXHEALTH
>2353	PtrMemberAccess	p -> health
>2354	Identifier	health
>2355	Identifier	p
>2356	ExpressionStatement	 
>2357	AssignmentExpr	p -> playerstate = PST_LIVE
>2358	Identifier	PST_LIVE
>2359	PtrMemberAccess	p -> playerstate
>2360	Identifier	playerstate
>2361	Identifier	p
>2362	ExpressionStatement	 
>2363	AssignmentExpr	p -> usedown = p -> attackdown = true
>2364	AssignmentExpr	p -> attackdown = true
>2365	Identifier	true
>2366	PtrMemberAccess	p -> attackdown
>2367	Identifier	attackdown
>2368	Identifier	p
>2369	PtrMemberAccess	p -> usedown
>2370	Identifier	usedown
>2371	Identifier	p
>2372	ExpressionStatement	 
>2373	AssignmentExpr	g -> players [ player ] . secretcount = secretcount
>2374	Identifier	secretcount
>2375	MemberAccess	g -> players [ player ] . secretcount
>2376	Identifier	secretcount
>2377	ArrayIndexing	g -> players [ player ]
>2378	Identifier	player
>2379	PtrMemberAccess	g -> players
>2380	Identifier	players
>2381	Identifier	g
>2382	Statement	 
>2383	ExpressionStatement	 
>2384	AssignmentExpr	g -> players [ player ] . itemcount = itemcount
>2385	Identifier	itemcount
>2386	MemberAccess	g -> players [ player ] . itemcount
>2387	Identifier	itemcount
>2388	ArrayIndexing	g -> players [ player ]
>2389	Identifier	player
>2390	PtrMemberAccess	g -> players
>2391	Identifier	players
>2392	Identifier	g
>2393	Statement	 
>2394	ExpressionStatement	 
>2395	AssignmentExpr	g -> players [ player ] . killcount = killcount
>2396	Identifier	killcount
>2397	MemberAccess	g -> players [ player ] . killcount
>2398	Identifier	killcount
>2399	ArrayIndexing	g -> players [ player ]
>2400	Identifier	player
>2401	PtrMemberAccess	g -> players
>2402	Identifier	players
>2403	Identifier	g
>2404	Statement	 
>2405	ExpressionStatement	 
>2406	Statement	 
>2407	Statement	 
>2408	Statement	 
>2409	Statement	 
>2410	Statement	 
>2411	Statement	 
>2412	Statement	 
>2413	Statement	 
>2414	Statement	 
>2415	Statement	 
>2416	Statement	 
>2417	Statement	 
>2418	Statement	 
>2419	Statement	 
>2420	Statement	 
>2421	Statement	 
>2422	Statement	 
>2423	Statement	 
>2424	Statement	 
>2425	Statement	 
>2426	Statement	 
>2427	Statement	 
>2428	Statement	 
>2429	Statement	 
>2430	Statement	 
>2431	Statement	 
>2432	Statement	 
>2433	CompoundStatement	 
>2434	ExpressionStatement	 
>2435	Statement	 
>2436	Statement	 
>2437	Statement	 
>2438	Statement	 
>2439	Statement	 
>2440	Statement	 
>2441	Statement	 
>2442	Statement	 
>2443	Statement	 
>2444	Statement	 
>2445	Statement	 
>2446	Statement	 
>2447	Statement	 
>2448	Statement	 
>2449	Statement	 
>2450	Statement	 
>2451	Statement	 
>2452	Statement	 
>2453	Statement	 
>2454	Statement	 
>2455	Statement	 
>2456	Statement	 
>2457	Statement	 
>2458	Statement	 
>2459	Statement	 
>2460	Statement	 
>2461	Statement	 
>2462	IfStatement	if ( hasMapPowerup )
>2463	CompoundStatement	 
>2464	ExpressionStatement	 
>2465	AssignmentExpr	g -> players [ player ] . powers [ pw_allmap ] = 1
>2466	PrimaryExpression	1
>2467	ArrayIndexing	g -> players [ player ] . powers [ pw_allmap ]
>2468	Identifier	pw_allmap
>2469	MemberAccess	g -> players [ player ] . powers
>2470	Identifier	powers
>2471	ArrayIndexing	g -> players [ player ]
>2472	Identifier	player
>2473	PtrMemberAccess	g -> players
>2474	Identifier	players
>2475	Identifier	g
>2476	Statement	 
>2477	Condition	 
>2478	Identifier	hasMapPowerup
>2479	Statement	 
>2480	Statement	 
>2481	Statement	 
>2482	Statement	 
>2483	Statement	 
>2484	Statement	 
>2485	Statement	 
>2486	Statement	 
>2487	Statement	 
>2488	Statement	 
>2489	Statement	 
>2490	Statement	 
>2491	Statement	 
>2492	Statement	 
>2493	Statement	 
>2494	Statement	 
>2495	Statement	 
>2496	Statement	 
>2497	Statement	 
>2498	Statement	 
>2499	Statement	 
>2500	Statement	 
>2501	Statement	 
>2502	Statement	 
>2503	Statement	 
>2504	Statement	 
>2505	ExpressionStatement	 
>2506	CallExpression	memset ( p , 0 , sizeof ( * p ) )
>2507	ArgumentList	p
>2508	Argument	sizeof ( * p )
>2509	SizeofExpr	sizeof ( * p )
>2510	UnaryOp	* p
>2511	Identifier	p
>2512	UnaryOperator	*
>2513	Sizeof	sizeof
>2514	Argument	0
>2515	PrimaryExpression	0
>2516	Argument	p
>2517	Identifier	p
>2518	Callee	memset
>2519	Identifier	memset
>2520	ExpressionStatement	 
>2521	ArrayIndexing	g -> players [ player ]
>2522	Identifier	player
>2523	PtrMemberAccess	g -> players
>2524	Identifier	players
>2525	Identifier	g
>2526	Statement	 
>2527	Statement	 
>2528	Statement	 
>2529	Statement	 
>2530	ExpressionStatement	 
>2531	MemberAccess	g -> players [ player ] . secretcount
>2532	Identifier	secretcount
>2533	ArrayIndexing	g -> players [ player ]
>2534	Identifier	player
>2535	PtrMemberAccess	g -> players
>2536	Identifier	players
>2537	Identifier	g
>2538	Statement	 
>2539	Statement	 
>2540	Statement	 
>2541	ExpressionStatement	 
>2542	MemberAccess	g -> players [ player ] . itemcount
>2543	Identifier	itemcount
>2544	ArrayIndexing	g -> players [ player ]
>2545	Identifier	player
>2546	PtrMemberAccess	g -> players
>2547	Identifier	players
>2548	Identifier	g
>2549	Statement	 
>2550	Statement	 
>2551	Statement	 
>2552	ExpressionStatement	 
>2553	MemberAccess	g -> players [ player ] . killcount
>2554	Identifier	killcount
>2555	ArrayIndexing	g -> players [ player ]
>2556	Identifier	player
>2557	PtrMemberAccess	g -> players
>2558	Identifier	players
>2559	Identifier	g
>2560	Statement	 
>2561	Statement	 
>2562	Statement	 
>2563	ExpressionStatement	 
>2564	Statement	 
>2565	Statement	 
>2566	Statement	 
>2567	Statement	 
>2568	Statement	 
>2569	Statement	 
>2570	Statement	 
>2571	Statement	 
>2572	Statement	 
>2573	Statement	 
>2574	Statement	 
>2575	Statement	 
>2576	Statement	 
>2577	Statement	 
>2578	Statement	 
>2579	Statement	 
>2580	Statement	 
>2581	Statement	 
>2582	Statement	 
>2583	ExpressionStatement	 
>2584	Statement	 
>2585	Statement	 
>2586	Statement	 
>2587	Statement	 
>2588	Statement	 
>2589	Statement	 
>2590	Statement	 
>2591	Statement	 
>2592	Statement	 
>2593	Statement	 
>2594	Statement	 
>2595	Statement	 
>2596	Statement	 
>2597	Statement	 
>2598	Statement	 
>2599	Statement	 
>2600	Statement	 
>2601	Statement	 
>2602	Statement	 
>2603	ExpressionStatement	 
>2604	EqualityExpression	g -> players [ player ] . powers [ pw_allmap ] != 0
>2605	PrimaryExpression	0
>2606	ArrayIndexing	g -> players [ player ] . powers [ pw_allmap ]
>2607	Identifier	pw_allmap
>2608	MemberAccess	g -> players [ player ] . powers
>2609	Identifier	powers
>2610	ArrayIndexing	g -> players [ player ]
>2611	Identifier	player
>2612	PtrMemberAccess	g -> players
>2613	Identifier	players
>2614	Identifier	g
>2615	Statement	 
>2616	Statement	 
>2617	Statement	 
>2618	IdentifierDeclStatement	 
>2619	IdentifierDecl	hasMapPowerup = false
>2620	AssignmentExpr	hasMapPowerup = false
>2621	Identifier	false
>2622	Identifier	false
>2623	Identifier	hasMapPowerup
>2624	IdentifierDeclType	bool
>2625	IdentifierDeclStatement	 
>2626	IdentifierDecl	cards [ NUMCARDS ]
>2627	Identifier	NUMCARDS
>2628	Identifier	cards
>2629	IdentifierDeclType	qboolean [ NUMCARDS ]
>2630	IdentifierDeclStatement	 
>2631	IdentifierDecl	secretcount
>2632	Identifier	secretcount
>2633	IdentifierDeclType	int
>2634	IdentifierDeclStatement	 
>2635	IdentifierDecl	itemcount
>2636	Identifier	itemcount
>2637	IdentifierDeclType	int
>2638	IdentifierDeclStatement	 
>2639	IdentifierDecl	killcount
>2640	Identifier	killcount
>2641	IdentifierDeclType	int
>2642	IdentifierDeclStatement	 
>2643	IdentifierDecl	frags [ MAXPLAYERS ]
>2644	Identifier	MAXPLAYERS
>2645	Identifier	frags
>2646	IdentifierDeclType	int [ MAXPLAYERS ]
>2647	IdentifierDeclStatement	 
>2648	IdentifierDecl	i
>2649	Identifier	i
>2650	IdentifierDeclType	int
>2651	IdentifierDeclStatement	 
>2652	IdentifierDecl	* p
>2653	Identifier	p
>2654	IdentifierDeclType	player_t *
>2717	FunctionDef	G_CheckSpot (int playernum , mapthing_t * mthing)
>2718	ParameterList	int playernum , mapthing_t * mthing
>2719	Parameter	 
>2720	Identifier	mthing
>2721	ParameterType	mapthing_t *
>2722	Parameter	 
>2723	Identifier	playernum
>2724	ParameterType	int
>2725	ReturnType	qboolean
>2726	CompoundStatement	 
>2727	ReturnStatement	 
>2728	Identifier	true
>2729	ExpressionStatement	 
>2730	Statement	 
>2731	Statement	 
>2732	Statement	 
>2733	Statement	 
>2734	Statement	 
>2735	Statement	 
>2736	Statement	 
>2737	Statement	 
>2738	Statement	 
>2739	Statement	 
>2740	Statement	 
>2741	Statement	 
>2742	Statement	 
>2743	Statement	 
>2744	Statement	 
>2745	Statement	 
>2746	Statement	 
>2747	Statement	 
>2748	Statement	 
>2749	Statement	 
>2750	Statement	 
>2751	Statement	 
>2752	Statement	 
>2753	Statement	 
>2754	Statement	 
>2755	Statement	 
>2756	Statement	 
>2757	Statement	 
>2758	Statement	 
>2759	Statement	 
>2760	Statement	 
>2761	Statement	 
>2762	Statement	 
>2763	Statement	 
>2764	Statement	 
>2765	Statement	 
>2766	Statement	 
>2767	Statement	 
>2768	Statement	 
>2769	Statement	 
>2770	Statement	 
>2771	Statement	 
>2772	Statement	 
>2773	ExpressionStatement	 
>2774	AssignmentExpr	mo = P_SpawnMobj ( x + 20 * finecosine [ an ] , y + 20 * finesine [ an ] , ss -> sector -> floorheight , \
>2775	CallExpression	P_SpawnMobj ( x + 20 * finecosine [ an ] , y + 20 * finesine [ an ] , ss -> sector -> floorheight , MT_TFOG )
>2776	ArgumentList	x + 20 * finecosine [ an ]
>2777	Argument	MT_TFOG
>2778	Identifier	MT_TFOG
>2779	Argument	ss -> sector -> floorheight
>2780	PtrMemberAccess	ss -> sector -> floorheight
>2781	Identifier	floorheight
>2782	PtrMemberAccess	ss -> sector
>2783	Identifier	sector
>2784	Identifier	ss
>2785	Argument	y + 20 * finesine [ an ]
>2786	AdditiveExpression	y + 20 * finesine [ an ]
>2787	MultiplicativeExpression	20 * finesine [ an ]
>2788	ArrayIndexing	finesine [ an ]
>2789	Identifier	an
>2790	Identifier	finesine
>2791	PrimaryExpression	20
>2792	Identifier	y
>2793	Argument	x + 20 * finecosine [ an ]
>2794	AdditiveExpression	x + 20 * finecosine [ an ]
>2795	MultiplicativeExpression	20 * finecosine [ an ]
>2796	ArrayIndexing	finecosine [ an ]
>2797	Identifier	an
>2798	Identifier	finecosine
>2799	PrimaryExpression	20
>2800	Identifier	x
>2801	Callee	P_SpawnMobj
>2802	Identifier	P_SpawnMobj
>2803	Identifier	mo
>2804	ExpressionStatement	 
>2805	AssignmentExpr	an = ( ANG45 * ( mthing -> angle / 45 ) ) >> ANGLETOFINESHIFT
>2806	ShiftExpression	( ANG45 * ( mthing -> angle / 45 ) ) >> ANGLETOFINESHIFT
>2807	Identifier	ANGLETOFINESHIFT
>2808	MultiplicativeExpression	ANG45 * ( mthing -> angle / 45 )
>2809	MultiplicativeExpression	mthing -> angle / 45
>2810	PrimaryExpression	45
>2811	PtrMemberAccess	mthing -> angle
>2812	Identifier	angle
>2813	Identifier	mthing
>2814	Identifier	ANG45
>2815	Identifier	an
>2816	ExpressionStatement	 
>2817	AssignmentExpr	ss = R_PointInSubsector ( x , y )
>2818	CallExpression	R_PointInSubsector ( x , y )
>2819	ArgumentList	x
>2820	Argument	y
>2821	Identifier	y
>2822	Argument	x
>2823	Identifier	x
>2824	Callee	R_PointInSubsector
>2825	Identifier	R_PointInSubsector
>2826	Identifier	ss
>2827	ExpressionStatement	 
>2828	IncDecOp	g -> bodyqueslot ++
>2829	IncDec	++
>2830	PtrMemberAccess	g -> bodyqueslot
>2831	Identifier	bodyqueslot
>2832	Identifier	g
>2833	Statement	 
>2834	ExpressionStatement	 
>2835	MemberAccess	g -> players [ playernum ] . mo
>2836	Identifier	mo
>2837	ArrayIndexing	g -> players [ playernum ]
>2838	Identifier	playernum
>2839	PtrMemberAccess	g -> players
>2840	Identifier	players
>2841	Identifier	g
>2842	Statement	 
>2843	Statement	 
>2844	Statement	 
>2845	Statement	 
>2846	Statement	 
>2847	Statement	 
>2848	Statement	 
>2849	Statement	 
>2850	Statement	 
>2851	Statement	 
>2852	Statement	 
>2853	Statement	 
>2854	Statement	 
>2855	Statement	 
>2856	ExpressionStatement	 
>2857	Statement	 
>2858	Statement	 
>2859	Statement	 
>2860	Statement	 
>2861	Statement	 
>2862	Statement	 
>2863	Statement	 
>2864	Statement	 
>2865	Statement	 
>2866	Statement	 
>2867	Statement	 
>2868	Statement	 
>2869	Statement	 
>2870	Statement	 
>2871	Statement	 
>2872	Statement	 
>2873	Statement	 
>2874	Statement	 
>2875	Statement	 
>2876	Statement	 
>2877	Statement	 
>2878	Statement	 
>2879	Statement	 
>2880	Statement	 
>2881	ReturnStatement	 
>2882	Identifier	false
>2883	Statement	 
>2884	Statement	 
>2885	Statement	 
>2886	Statement	 
>2887	Statement	 
>2888	Statement	 
>2889	Statement	 
>2890	Statement	 
>2891	Statement	 
>2892	Statement	 
>2893	Statement	 
>2894	Statement	 
>2895	Statement	 
>2896	Statement	 
>2897	Statement	 
>2898	Statement	 
>2899	Statement	 
>2900	Statement	 
>2901	Statement	 
>2902	Statement	 
>2903	ExpressionStatement	 
>2904	AssignmentExpr	y = mthing -> y << FRACBITS
>2905	ShiftExpression	mthing -> y << FRACBITS
>2906	Identifier	FRACBITS
>2907	PtrMemberAccess	mthing -> y
>2908	Identifier	y
>2909	Identifier	mthing
>2910	Identifier	y
>2911	ExpressionStatement	 
>2912	AssignmentExpr	x = mthing -> x << FRACBITS
>2913	ShiftExpression	mthing -> x << FRACBITS
>2914	Identifier	FRACBITS
>2915	PtrMemberAccess	mthing -> x
>2916	Identifier	x
>2917	Identifier	mthing
>2918	Identifier	x
>2919	CompoundStatement	 
>2920	ReturnStatement	 
>2921	Identifier	true
>2922	ReturnStatement	 
>2923	Identifier	false
>2924	Statement	 
>2925	Statement	 
>2926	Statement	 
>2927	Statement	 
>2928	Statement	 
>2929	Statement	 
>2930	Statement	 
>2931	Statement	 
>2932	Statement	 
>2933	Statement	 
>2934	Statement	 
>2935	Statement	 
>2936	Statement	 
>2937	Statement	 
>2938	Statement	 
>2939	Statement	 
>2940	Statement	 
>2941	Statement	 
>2942	Statement	 
>2943	Statement	 
>2944	Statement	 
>2945	Statement	 
>2946	Statement	 
>2947	Statement	 
>2948	Statement	 
>2949	Statement	 
>2950	Statement	 
>2951	Statement	 
>2952	Statement	 
>2953	Statement	 
>2954	Statement	 
>2955	Statement	 
>2956	Statement	 
>2957	Statement	 
>2958	Statement	 
>2959	Statement	 
>2960	Statement	 
>2961	ForStatement	for ( i = 0 ; i < playernum ; i ++ )
>2962	Statement	 
>2963	IncDecOp	 
>2964	IncDec	++
>2965	Identifier	i
>2966	Condition	 
>2967	RelationalExpression	i < playernum
>2968	Identifier	playernum
>2969	Identifier	i
>2970	ForInit	 
>2971	AssignmentExpr	i = 0
>2972	PrimaryExpression	0
>2973	Identifier	i
>2974	Statement	 
>2975	Statement	 
>2976	Statement	 
>2977	Statement	 
>2978	Statement	 
>2979	Statement	 
>2980	Statement	 
>2981	Statement	 
>2982	Statement	 
>2983	Statement	 
>2984	Statement	 
>2985	Statement	 
>2986	Statement	 
>2987	IdentifierDeclStatement	 
>2988	IdentifierDecl	i
>2989	Identifier	i
>2990	IdentifierDeclType	int
>2991	IdentifierDeclStatement	 
>2992	IdentifierDecl	* mo
>2993	Identifier	mo
>2994	IdentifierDeclType	mobj_t *
>2995	IdentifierDeclStatement	 
>2996	IdentifierDecl	an
>2997	Identifier	an
>2998	IdentifierDeclType	unsigned
>2999	IdentifierDeclStatement	 
>3000	IdentifierDecl	* ss
>3001	Identifier	ss
>3002	IdentifierDeclType	subsector_t *
>3003	IdentifierDeclStatement	 
>3004	IdentifierDecl	y
>3005	Identifier	y
>3006	IdentifierDeclType	fixed_t
>3007	IdentifierDeclStatement	 
>3008	IdentifierDecl	x
>3009	Identifier	x
>3010	IdentifierDeclType	fixed_t
>3051	FunctionDef	G_DeathMatchSpawnPlayer (int playernum)
>3052	ParameterList	int playernum
>3053	Parameter	 
>3054	Identifier	playernum
>3055	ParameterType	int
>3056	ReturnType	void
>3057	CompoundStatement	 
>3058	ExpressionStatement	 
>3059	Statement	 
>3060	Statement	 
>3061	Statement	 
>3062	Statement	 
>3063	Statement	 
>3064	Statement	 
>3065	Statement	 
>3066	Statement	 
>3067	Statement	 
>3068	Statement	 
>3069	Statement	 
>3070	ForStatement	for ( j = 0 ; j < 20 ; j ++ )
>3071	CompoundStatement	 
>3072	CompoundStatement	 
>3073	ReturnStatement	 
>3074	ExpressionStatement	 
>3075	Statement	 
>3076	Statement	 
>3077	Statement	 
>3078	Statement	 
>3079	Statement	 
>3080	Statement	 
>3081	Statement	 
>3082	Statement	 
>3083	Statement	 
>3084	Statement	 
>3085	Statement	 
>3086	ExpressionStatement	 
>3087	AssignmentExpr	g -> deathmatchstarts [ i ] . type = playernum + 1
>3088	AdditiveExpression	playernum + 1
>3089	PrimaryExpression	1
>3090	Identifier	playernum
>3091	MemberAccess	g -> deathmatchstarts [ i ] . type
>3092	Identifier	type
>3093	ArrayIndexing	g -> deathmatchstarts [ i ]
>3094	Identifier	i
>3095	PtrMemberAccess	g -> deathmatchstarts
>3096	Identifier	deathmatchstarts
>3097	Identifier	g
>3098	Statement	 
>3099	Statement	 
>3100	Statement	 
>3101	Statement	 
>3102	Statement	 
>3103	Statement	 
>3104	Statement	 
>3105	Statement	 
>3106	Statement	 
>3107	Statement	 
>3108	Statement	 
>3109	Statement	 
>3110	Statement	 
>3111	Statement	 
>3112	Statement	 
>3113	Statement	 
>3114	Statement	 
>3115	ExpressionStatement	 
>3116	AssignmentExpr	i = P_Random ( ) % selections
>3117	MultiplicativeExpression	P_Random ( ) % selections
>3118	Identifier	selections
>3119	CallExpression	P_Random ( )
>3120	ArgumentList	 
>3121	Callee	P_Random
>3122	Identifier	P_Random
>3123	Identifier	i
>3124	IncDecOp	 
>3125	IncDec	++
>3126	Identifier	j
>3127	Condition	 
>3128	RelationalExpression	j < 20
>3129	PrimaryExpression	20
>3130	Identifier	j
>3131	ForInit	 
>3132	AssignmentExpr	j = 0
>3133	PrimaryExpression	0
>3134	Identifier	j
>3135	IfStatement	if ( selections < 4 )
>3136	ExpressionStatement	 
>3137	CallExpression	I_Error ( \"Only %i 
>3138	ArgumentList	\"Only %i 
>3139	Argument	selections
>3140	Identifier	selections
>3141	Argument	\"Only %i 
>3142	PrimaryExpression	\"Only %i 
>3143	Callee	I_Error
>3144	Identifier	I_Error
>3145	Condition	 
>3146	RelationalExpression	selections < 4
>3147	PrimaryExpression	4
>3148	Identifier	selections
>3149	ExpressionStatement	 
>3150	PtrMemberAccess	g -> deathmatchstarts
>3151	Identifier	deathmatchstarts
>3152	Identifier	g
>3153	Statement	 
>3154	Statement	 
>3155	Statement	 
>3156	Statement	 
>3157	Statement	 
>3158	Statement	 
>3159	Statement	 
>3160	Statement	 
>3161	IdentifierDeclStatement	 
>3162	IdentifierDecl	selections
>3163	Identifier	selections
>3164	IdentifierDeclType	int
>3165	IdentifierDeclStatement	 
>3166	IdentifierDecl	j
>3167	Identifier	j
>3168	IdentifierDeclType	int
>3169	IdentifierDecl	i
>3170	Identifier	i
>3171	IdentifierDeclType	int
>3187	FunctionDef	G_DoReborn (int playernum)
>3188	ParameterList	int playernum
>3189	Parameter	 
>3190	Identifier	playernum
>3191	ParameterType	int
>3192	ReturnType	void
>3193	CompoundStatement	 
>3194	CompoundStatement	 
>3195	ExpressionStatement	 
>3196	AssignmentExpr	g -> gameaction = ga_loadlevel
>3197	Identifier	ga_loadlevel
>3198	PtrMemberAccess	g -> gameaction
>3199	Identifier	gameaction
>3200	Identifier	g
>3201	Statement	 
>3202	Statement	 
>3203	Statement	 
>3204	Statement	 
>3205	Statement	 
>3206	Statement	 
>3207	Statement	 
>3208	Statement	 
>3209	Statement	 
>3210	IdentifierDeclStatement	 
>3211	IdentifierDecl	i
>3212	Identifier	i
>3213	IdentifierDeclType	int
>3223	FunctionDef	G_ScreenShot ()
>3224	ParameterList	 
>3225	ReturnType	void
>3226	CompoundStatement	 
>3227	ExpressionStatement	 
>3228	AssignmentExpr	g -> gameaction = ga_screenshot
>3229	Identifier	ga_screenshot
>3230	PtrMemberAccess	g -> gameaction
>3231	Identifier	gameaction
>3232	Identifier	g
>3233	Statement	 
>3243	FunctionDef	G_ExitLevel ()
>3244	ParameterList	 
>3245	ReturnType	void
>3246	CompoundStatement	 
>3247	ExpressionStatement	 
>3248	AssignmentExpr	g -> gameaction = ga_completed
>3249	Identifier	ga_completed
>3250	PtrMemberAccess	g -> gameaction
>3251	Identifier	gameaction
>3252	Identifier	g
>3253	Statement	 
>3254	ExpressionStatement	 
>3255	AssignmentExpr	g -> secretexit = false
>3256	Identifier	false
>3257	PtrMemberAccess	g -> secretexit
>3258	Identifier	secretexit
>3259	Identifier	g
>3260	Statement	 
>3270	FunctionDef	G_SecretExitLevel ()
>3271	ParameterList	 
>3272	ReturnType	void
>3273	CompoundStatement	 
>3274	ExpressionStatement	 
>3275	AssignmentExpr	g -> secretexit = false
>3276	Identifier	false
>3277	PtrMemberAccess	g -> secretexit
>3278	Identifier	secretexit
>3279	Identifier	g
>3280	Statement	 
>3281	Statement	 
>3282	Statement	 
>3283	Statement	 
>3284	Statement	 
>3285	Statement	 
>3286	Statement	 
>3287	Statement	 
>3288	Statement	 
>3289	Statement	 
>3290	Statement	 
>3291	Statement	 
>3292	Statement	 
>3293	Statement	 
>3294	Statement	 
>3295	Statement	 
>3296	Statement	 
>3297	Statement	 
>3298	Statement	 
>3299	Statement	 
>3300	Statement	 
>3308	FunctionDef	G_DoCompleted ()
>3309	ParameterList	 
>3310	ReturnType	void
>3311	CompoundStatement	 
>3312	Statement	 
>3313	Statement	 
>3314	Statement	 
>3315	Statement	 
>3316	Statement	 
>3317	Statement	 
>3318	Statement	 
>3319	Statement	 
>3320	Statement	 
>3321	ExpressionStatement	 
>3322	AdditiveExpression	g -> gamemap - 1
>3323	PrimaryExpression	1
>3324	PtrMemberAccess	g -> gamemap
>3325	Identifier	gamemap
>3326	Identifier	g
>3327	Statement	 
>3328	Statement	 
>3329	Statement	 
>3330	Statement	 
>3331	Statement	 
>3332	Statement	 
>3333	Statement	 
>3334	Statement	 
>3335	ExpressionStatement	 
>3336	AdditiveExpression	g -> gameepisode - 1
>3337	PrimaryExpression	1
>3338	PtrMemberAccess	g -> gameepisode
>3339	Identifier	gameepisode
>3340	Identifier	g
>3341	Statement	 
>3342	Statement	 
>3343	Statement	 
>3344	Statement	 
>3345	Statement	 
>3346	Statement	 
>3347	Statement	 
>3348	Statement	 
>3349	ExpressionStatement	 
>3350	Identifier	didsecret
>3351	Statement	 
>3352	Statement	 
>3353	Statement	 
>3354	Statement	 
>3355	Statement	 
>3356	Statement	 
>3357	Statement	 
>3358	Statement	 
>3359	Statement	 
>3360	Statement	 
>3361	Statement	 
>3362	Statement	 
>3363	Statement	 
>3364	Statement	 
>3365	Statement	 
>3366	Statement	 
>3367	Statement	 
>3368	Statement	 
>3369	CompoundStatement	 
>3370	CompoundStatement	 
>3371	BreakStatement	 
>3372	ExpressionStatement	 
>3373	AssignmentExpr	g -> players [ i ] . didsecret = true
>3374	Identifier	true
>3375	MemberAccess	g -> players [ i ] . didsecret
>3376	Identifier	didsecret
>3377	ArrayIndexing	g -> players [ i ]
>3378	Identifier	i
>3379	PtrMemberAccess	g -> players
>3380	Identifier	players
>3381	Identifier	g
>3382	ForStatement	for ( i = 0 ; i < MAXPLAYERS ; i ++ )
>3383	Statement	 
>3384	IncDecOp	 
>3385	IncDec	++
>3386	Identifier	i
>3387	Condition	 
>3388	RelationalExpression	i < MAXPLAYERS
>3389	Identifier	MAXPLAYERS
>3390	Identifier	i
>3391	ForInit	 
>3392	AssignmentExpr	i = 0
>3393	PrimaryExpression	0
>3394	Identifier	i
>3395	Label	 
>3396	ReturnStatement	 
>3397	ExpressionStatement	 
>3398	AssignmentExpr	g -> gameaction = ga_victory
>3399	Identifier	ga_victory
>3400	PtrMemberAccess	g -> gameaction
>3401	Identifier	gameaction
>3402	Identifier	g
>3403	Statement	 
>3404	Label	 
>3405	Statement	 
>3406	Statement	 
>3407	Statement	 
>3408	Statement	 
>3409	Statement	 
>3410	Statement	 
>3411	Statement	 
>3412	Statement	 
>3413	Statement	 
>3414	Statement	 
>3415	Statement	 
>3416	Statement	 
>3417	Statement	 
>3418	Statement	 
>3419	Statement	 
>3420	Statement	 
>3421	Statement	 
>3422	Statement	 
>3423	Statement	 
>3424	Statement	 
>3425	Statement	 
>3426	Statement	 
>3427	CompoundStatement	 
>3428	ExpressionStatement	 
>3429	CallExpression	G_CheckDemoStatus ( )
>3430	ArgumentList	 
>3431	Callee	G_CheckDemoStatus
>3432	Identifier	G_CheckDemoStatus
>3433	Statement	 
>3434	Statement	 
>3435	Statement	 
>3436	Statement	 
>3437	Statement	 
>3438	Statement	 
>3439	Statement	 
>3440	CompoundStatement	 
>3441	ReturnStatement	 
>3442	ExpressionStatement	 
>3443	CallExpression	G_CheckDemoStatus ( )
>3444	ArgumentList	 
>3445	Callee	G_CheckDemoStatus
>3446	Identifier	G_CheckDemoStatus
>3447	Statement	 
>3448	Statement	 
>3449	Statement	 
>3450	Statement	 
>3451	Statement	 
>3452	Statement	 
>3453	Statement	 
>3454	CompoundStatement	 
>3455	ExpressionStatement	 
>3456	CallExpression	AM_Stop ( )
>3457	ArgumentList	 
>3458	Callee	AM_Stop
>3459	Identifier	AM_Stop
>3460	Statement	 
>3461	Statement	 
>3462	Statement	 
>3463	Statement	 
>3464	Statement	 
>3465	Statement	 
>3466	Statement	 
>3467	ForStatement	for ( i = 0 ; i < MAXPLAYERS ; i ++ )
>3468	CompoundStatement	 
>3469	CompoundStatement	 
>3470	ExpressionStatement	 
>3471	CallExpression	G_PlayerFinishLevel ( i )
>3472	ArgumentList	i
>3473	Argument	i
>3474	Identifier	i
>3475	Callee	G_PlayerFinishLevel
>3476	Identifier	G_PlayerFinishLevel
>3477	Statement	 
>3478	Statement	 
>3479	Statement	 
>3480	Statement	 
>3481	Statement	 
>3482	Statement	 
>3483	Statement	 
>3484	Statement	 
>3485	Statement	 
>3486	Statement	 
>3487	IncDecOp	 
>3488	IncDec	++
>3489	Identifier	i
>3490	Condition	 
>3491	RelationalExpression	i < MAXPLAYERS
>3492	Identifier	MAXPLAYERS
>3493	Identifier	i
>3494	ForInit	 
>3495	AssignmentExpr	i = 0
>3496	PrimaryExpression	0
>3497	Identifier	i
>3498	ExpressionStatement	 
>3499	AssignmentExpr	g -> gameaction = ga_nothing
>3500	Identifier	ga_nothing
>3501	PtrMemberAccess	g -> gameaction
>3502	Identifier	gameaction
>3503	Identifier	g
>3504	Statement	 
>3505	IdentifierDeclStatement	 
>3506	IdentifierDecl	i
>3507	Identifier	i
>3508	IdentifierDeclType	int
>3526	FunctionDef	G_WorldDone ()
>3527	ParameterList	 
>3528	ReturnType	void
>3529	CompoundStatement	 
>3530	Statement	 
>3531	Statement	 
>3532	Statement	 
>3533	Statement	 
>3534	Statement	 
>3535	Statement	 
>3536	Statement	 
>3537	Statement	 
>3538	Statement	 
>3539	ExpressionStatement	 
>3540	AssignmentExpr	didsecret = true
>3541	Identifier	true
>3542	Identifier	didsecret
>3543	Statement	 
>3544	Statement	 
>3545	Statement	 
>3546	Statement	 
>3547	Statement	 
>3548	Statement	 
>3549	Statement	 
>3550	Statement	 
>3551	Statement	 
>3552	Statement	 
>3553	Statement	 
>3554	Statement	 
>3555	Statement	 
>3556	Statement	 
>3557	Statement	 
>3558	Statement	 
>3559	Statement	 
>3560	Statement	 
>3561	ExpressionStatement	 
>3562	AssignmentExpr	g -> gameaction = ga_worlddone
>3563	Identifier	ga_worlddone
>3564	PtrMemberAccess	g -> gameaction
>3565	Identifier	gameaction
>3566	Identifier	g
>3567	Statement	 
>3577	FunctionDef	G_DoWorldDone ()
>3578	ParameterList	 
>3579	ReturnType	void
>3580	CompoundStatement	 
>3581	ExpressionStatement	 
>3582	AssignmentExpr	g -> viewactive = true
>3583	Identifier	true
>3584	PtrMemberAccess	g -> viewactive
>3585	Identifier	viewactive
>3586	Identifier	g
>3587	Statement	 
>3588	ExpressionStatement	 
>3589	AssignmentExpr	g -> gameaction = ga_nothing
>3590	Identifier	ga_nothing
>3591	PtrMemberAccess	g -> gameaction
>3592	Identifier	gameaction
>3593	Identifier	g
>3594	Statement	 
>3595	ExpressionStatement	 
>3596	CallExpression	G_DoLoadLevel ( )
>3597	ArgumentList	 
>3598	Callee	G_DoLoadLevel
>3599	Identifier	G_DoLoadLevel
>3600	ForStatement	for ( int i = 0 ; i < MAXPLAYERS ; i ++ )
>3601	CompoundStatement	 
>3602	CompoundStatement	 
>3603	ExpressionStatement	 
>3604	AssignmentExpr	g -> players [ i ] . attackdown = true
>3605	Identifier	true
>3606	MemberAccess	g -> players [ i ] . attackdown
>3607	Identifier	attackdown
>3608	ArrayIndexing	g -> players [ i ]
>3609	Identifier	i
>3610	PtrMemberAccess	g -> players
>3611	Identifier	players
>3612	Identifier	g
>3613	Statement	 
>3614	Statement	 
>3615	Statement	 
>3616	Statement	 
>3617	Statement	 
>3618	Statement	 
>3619	Statement	 
>3620	Statement	 
>3621	Statement	 
>3622	Statement	 
>3623	Statement	 
>3624	Statement	 
>3625	Statement	 
>3626	Statement	 
>3627	Statement	 
>3628	Statement	 
>3629	Statement	 
>3630	Statement	 
>3631	Statement	 
>3632	Statement	 
>3633	Statement	 
>3634	IncDecOp	 
>3635	IncDec	++
>3636	Identifier	i
>3637	Condition	 
>3638	RelationalExpression	i < MAXPLAYERS
>3639	Identifier	MAXPLAYERS
>3640	Identifier	i
>3641	ForInit	 
>3642	IdentifierDeclStatement	int i = 0 ;
>3643	IdentifierDecl	i = 0
>3644	AssignmentExpr	i = 0
>3645	PrimaryExpression	0
>3646	Identifier	i
>3647	Identifier	i
>3648	IdentifierDeclType	int
>3649	ExpressionStatement	 
>3650	CallExpression	M_ClearRandom ( )
>3651	ArgumentList	 
>3652	Callee	M_ClearRandom
>3653	Identifier	M_ClearRandom
>3654	ExpressionStatement	 
>3655	AdditiveExpression	g -> wminfo . next + 1
>3656	PrimaryExpression	1
>3657	MemberAccess	g -> wminfo . next
>3658	Identifier	next
>3659	PtrMemberAccess	g -> wminfo
>3660	Identifier	wminfo
>3661	Identifier	g
>3662	Statement	 
>3663	Statement	 
>3664	Statement	 
>3665	Statement	 
>3666	Statement	 
>3667	Statement	 
>3668	ExpressionStatement	 
>3669	AssignmentExpr	g -> gamestate = GS_LEVEL
>3670	Identifier	GS_LEVEL
>3671	PtrMemberAccess	g -> gamestate
>3672	Identifier	gamestate
>3673	Identifier	g
>3674	Statement	 
>3696	FunctionDef	G_LoadGame (char * name)
>3697	ParameterList	char * name
>3698	Parameter	 
>3699	Identifier	name
>3700	ParameterType	char *
>3701	ReturnType	void
>3702	CompoundStatement	 
>3703	ExpressionStatement	 
>3704	AssignmentExpr	g -> gameaction = ga_loadgame
>3705	Identifier	ga_loadgame
>3706	PtrMemberAccess	g -> gameaction
>3707	Identifier	gameaction
>3708	Identifier	g
>3709	Statement	 
>3710	ExpressionStatement	 
>3711	Statement	 
>3712	Statement	 
>3713	Statement	 
>3714	Statement	 
>3715	Statement	 
>3716	Statement	 
>3717	Statement	 
>3718	Statement	 
>3719	Statement	 
>3728	FunctionDef	G_DoLoadGame ()
>3729	ParameterList	 
>3730	ReturnType	qboolean
>3731	CompoundStatement	 
>3732	ReturnStatement	 
>3733	Identifier	TRUE
>3734	ExpressionStatement	 
>3735	CallExpression	Z_Free ( g -> savebuffer )
>3736	ArgumentList	g -> savebuffer
>3737	Argument	g -> savebuffer
>3738	PtrMemberAccess	g -> savebuffer
>3739	Identifier	savebuffer
>3740	Identifier	g
>3741	Callee	Z_Free
>3742	Identifier	Z_Free
>3743	ExpressionStatement	 
>3744	AssignmentExpr	loadingGame = false
>3745	Identifier	false
>3746	Identifier	loadingGame
>3747	ExpressionStatement	 
>3748	CallExpression	R_FillBackScreen ( )
>3749	ArgumentList	 
>3750	Callee	R_FillBackScreen
>3751	Identifier	R_FillBackScreen
>3752	ExpressionStatement	 
>3753	CallExpression	R_ExecuteSetViewSize ( )
>3754	ArgumentList	 
>3755	Callee	R_ExecuteSetViewSize
>3756	Identifier	R_ExecuteSetViewSize
>3757	Statement	 
>3758	Statement	 
>3759	Statement	 
>3760	Statement	 
>3761	Statement	 
>3762	Statement	 
>3763	Statement	 
>3764	ExpressionStatement	 
>3765	CallExpression	I_Error ( \"Bad savegame\" )
>3766	ArgumentList	\"Bad savegame\"
>3767	Argument	\"Bad savegame\"
>3768	PrimaryExpression	\"Bad savegame\"
>3769	Callee	I_Error
>3770	Identifier	I_Error
>3771	Statement	 
>3772	Statement	 
>3773	Statement	 
>3774	Statement	 
>3775	Statement	 
>3776	Statement	 
>3777	Statement	 
>3778	Statement	 
>3779	Statement	 
>3780	Statement	 
>3781	ExpressionStatement	 
>3782	CallExpression	P_UnArchiveThinkers ( )
>3783	ArgumentList	 
>3784	Callee	P_UnArchiveThinkers
>3785	Identifier	P_UnArchiveThinkers
>3786	ExpressionStatement	 
>3787	CallExpression	P_UnArchiveWorld ( )
>3788	ArgumentList	 
>3789	Callee	P_UnArchiveWorld
>3790	Identifier	P_UnArchiveWorld
>3791	ExpressionStatement	 
>3792	CallExpression	P_UnArchivePlayers ( )
>3793	ArgumentList	 
>3794	Callee	P_UnArchivePlayers
>3795	Identifier	P_UnArchivePlayers
>3796	ExpressionStatement	 
>3797	AssignmentExpr	g -> leveltime = ( a << 16 ) + ( b << 8 ) + c
>3798	AdditiveExpression	( a << 16 ) + ( b << 8 ) + c
>3799	AdditiveExpression	( b << 8 ) + c
>3800	Identifier	c
>3801	ShiftExpression	b << 8
>3802	PrimaryExpression	8
>3803	Identifier	b
>3804	ShiftExpression	a << 16
>3805	PrimaryExpression	16
>3806	Identifier	a
>3807	PtrMemberAccess	g -> leveltime
>3808	Identifier	leveltime
>3809	Identifier	g
>3810	Statement	 
>3811	ExpressionStatement	 
>3812	IncDecOp	g -> save_p ++
>3813	IncDec	++
>3814	PtrMemberAccess	g -> save_p
>3815	Identifier	save_p
>3816	Identifier	g
>3817	Statement	 
>3818	Statement	 
>3819	Statement	 
>3820	Statement	 
>3821	ExpressionStatement	 
>3822	IncDecOp	g -> save_p ++
>3823	IncDec	++
>3824	PtrMemberAccess	g -> save_p
>3825	Identifier	save_p
>3826	Identifier	g
>3827	Statement	 
>3828	Statement	 
>3829	Statement	 
>3830	Statement	 
>3831	ExpressionStatement	 
>3832	IncDecOp	g -> save_p ++
>3833	IncDec	++
>3834	PtrMemberAccess	g -> save_p
>3835	Identifier	save_p
>3836	Identifier	g
>3837	Statement	 
>3838	Statement	 
>3839	Statement	 
>3840	Statement	 
>3841	ExpressionStatement	 
>3842	Statement	 
>3843	Statement	 
>3844	Statement	 
>3845	Statement	 
>3846	Statement	 
>3847	Statement	 
>3848	Statement	 
>3849	Statement	 
>3850	Statement	 
>3851	Statement	 
>3852	Statement	 
>3853	Statement	 
>3854	Statement	 
>3855	Statement	 
>3856	Statement	 
>3857	Statement	 
>3858	Statement	 
>3859	ExpressionStatement	 
>3860	IncDecOp	g -> save_p ++
>3861	IncDec	++
>3862	PtrMemberAccess	g -> save_p
>3863	Identifier	save_p
>3864	Identifier	g
>3865	Statement	 
>3866	Statement	 
>3867	Statement	 
>3868	Statement	 
>3869	Statement	 
>3870	Statement	 
>3871	Statement	 
>3872	Statement	 
>3873	Statement	 
>3874	ForStatement	for ( i = 0 ; i < MAXPLAYERS ; i ++ )
>3875	Statement	 
>3876	IncDecOp	 
>3877	IncDec	++
>3878	Identifier	i
>3879	Condition	 
>3880	RelationalExpression	i < MAXPLAYERS
>3881	Identifier	MAXPLAYERS
>3882	Identifier	i
>3883	ForInit	 
>3884	AssignmentExpr	i = 0
>3885	PrimaryExpression	0
>3886	Identifier	i
>3887	ExpressionStatement	 
>3888	IncDecOp	g -> save_p ++
>3889	IncDec	++
>3890	PtrMemberAccess	g -> save_p
>3891	Identifier	save_p
>3892	Identifier	g
>3893	Statement	 
>3894	Statement	 
>3895	Statement	 
>3896	Statement	 
>3897	Statement	 
>3898	Statement	 
>3899	Statement	 
>3900	ExpressionStatement	 
>3901	IncDecOp	g -> save_p ++
>3902	IncDec	++
>3903	PtrMemberAccess	g -> save_p
>3904	Identifier	save_p
>3905	Identifier	g
>3906	Statement	 
>3907	Statement	 
>3908	Statement	 
>3909	Statement	 
>3910	Statement	 
>3911	Statement	 
>3912	Statement	 
>3913	ExpressionStatement	 
>3914	IncDecOp	g -> save_p ++
>3915	IncDec	++
>3916	PtrMemberAccess	g -> save_p
>3917	Identifier	save_p
>3918	Identifier	g
>3919	Statement	 
>3920	Statement	 
>3921	Statement	 
>3922	Statement	 
>3923	Statement	 
>3924	Statement	 
>3925	Statement	 
>3926	ExpressionStatement	 
>3927	IncDecOp	g -> save_p ++
>3928	IncDec	++
>3929	PtrMemberAccess	g -> save_p
>3930	Identifier	save_p
>3931	Identifier	g
>3932	Statement	 
>3933	Statement	 
>3934	Statement	 
>3935	Statement	 
>3936	Statement	 
>3937	Statement	 
>3938	Statement	 
>3939	Statement	 
>3940	Statement	 
>3941	Statement	 
>3942	ExpressionStatement	 
>3943	AssignmentExpr	g -> save_p += VERSIONSIZE
>3944	Identifier	VERSIONSIZE
>3945	PtrMemberAccess	g -> save_p
>3946	Identifier	save_p
>3947	Identifier	g
>3948	Statement	 
>3949	CompoundStatement	 
>3950	ReturnStatement	 
>3951	Identifier	FALSE
>3952	ExpressionStatement	 
>3953	AssignmentExpr	waitingForWipe = false
>3954	Identifier	false
>3955	Identifier	waitingForWipe
>3956	ExpressionStatement	 
>3957	AssignmentExpr	loadingGame = false
>3958	Identifier	false
>3959	Identifier	loadingGame
>3960	Statement	 
>3961	Statement	 
>3962	Statement	 
>3963	Statement	 
>3964	Statement	 
>3965	Statement	 
>3966	Statement	 
>3967	Statement	 
>3968	Statement	 
>3969	Statement	 
>3970	Statement	 
>3971	Statement	 
>3972	Statement	 
>3973	Statement	 
>3974	Statement	 
>3975	Statement	 
>3976	ExpressionStatement	 
>3977	CallExpression	sprintf ( vcheck , \"version %i\" , VERSION )
>3978	ArgumentList	vcheck
>3979	Argument	VERSION
>3980	Identifier	VERSION
>3981	Argument	\"version %i\"
>3982	PrimaryExpression	\"version %i\"
>3983	Argument	vcheck
>3984	Identifier	vcheck
>3985	Callee	sprintf
>3986	Identifier	sprintf
>3987	ExpressionStatement	 
>3988	CallExpression	memset ( vcheck , 0 , sizeof ( vcheck ) )
>3989	ArgumentList	vcheck
>3990	Argument	sizeof ( vcheck )
>3991	SizeofExpr	sizeof ( vcheck )
>3992	SizeofOperand	vcheck
>3993	Sizeof	sizeof
>3994	Argument	0
>3995	PrimaryExpression	0
>3996	Argument	vcheck
>3997	Identifier	vcheck
>3998	Callee	memset
>3999	Identifier	memset
>4000	ExpressionStatement	 
>4001	AdditiveExpression	g -> savebuffer + SAVESTRINGSIZE
>4002	Identifier	SAVESTRINGSIZE
>4003	PtrMemberAccess	g -> savebuffer
>4004	Identifier	savebuffer
>4005	Identifier	g
>4006	Statement	 
>4007	Statement	 
>4008	Statement	 
>4009	Statement	 
>4010	Statement	 
>4011	Statement	 
>4012	ExpressionStatement	 
>4013	AssignmentExpr	g -> consoleplayer = 0
>4014	PrimaryExpression	0
>4015	PtrMemberAccess	g -> consoleplayer
>4016	Identifier	consoleplayer
>4017	Identifier	g
>4018	Statement	 
>4019	ExpressionStatement	 
>4020	AssignmentExpr	g -> nomonsters = false
>4021	Identifier	false
>4022	PtrMemberAccess	g -> nomonsters
>4023	Identifier	nomonsters
>4024	Identifier	g
>4025	Statement	 
>4026	ExpressionStatement	 
>4027	AssignmentExpr	g -> fastparm = false
>4028	Identifier	false
>4029	PtrMemberAccess	g -> fastparm
>4030	Identifier	fastparm
>4031	Identifier	g
>4032	Statement	 
>4033	ExpressionStatement	 
>4034	AssignmentExpr	g -> respawnparm = false
>4035	Identifier	false
>4036	PtrMemberAccess	g -> respawnparm
>4037	Identifier	respawnparm
>4038	Identifier	g
>4039	Statement	 
>4040	ExpressionStatement	 
>4041	AssignmentExpr	g -> playeringame [ 3 ] = 0
>4042	PrimaryExpression	0
>4043	ArrayIndexing	g -> playeringame [ 3 ]
>4044	PrimaryExpression	3
>4045	PtrMemberAccess	g -> playeringame
>4046	Identifier	playeringame
>4047	Identifier	g
>4048	Statement	 
>4049	Statement	 
>4050	Statement	 
>4051	Statement	 
>4052	Statement	 
>4053	Statement	 
>4054	Statement	 
>4055	Statement	 
>4056	Statement	 
>4057	Statement	 
>4058	Statement	 
>4059	Statement	 
>4060	Statement	 
>4061	Statement	 
>4062	Statement	 
>4063	Statement	 
>4064	Statement	 
>4065	ExpressionStatement	 
>4066	AssignmentExpr	g -> deathmatch = false
>4067	Identifier	false
>4068	PtrMemberAccess	g -> deathmatch
>4069	Identifier	deathmatch
>4070	Identifier	g
>4071	Statement	 
>4072	ExpressionStatement	 
>4073	AssignmentExpr	g -> netgame = false
>4074	Identifier	false
>4075	PtrMemberAccess	g -> netgame
>4076	Identifier	netgame
>4077	Identifier	g
>4078	Statement	 
>4079	ExpressionStatement	 
>4080	AssignmentExpr	g -> netdemo = false
>4081	Identifier	false
>4082	PtrMemberAccess	g -> netdemo
>4083	Identifier	netdemo
>4084	Identifier	g
>4085	Statement	 
>4086	ExpressionStatement	 
>4087	AssignmentExpr	waitingForWipe = true
>4088	Identifier	true
>4089	Identifier	waitingForWipe
>4090	ExpressionStatement	 
>4091	Statement	 
>4092	Statement	 
>4093	Statement	 
>4094	Statement	 
>4095	Statement	 
>4096	Statement	 
>4097	Statement	 
>4098	Statement	 
>4099	Statement	 
>4100	Statement	 
>4101	Statement	 
>4102	Statement	 
>4103	Statement	 
>4104	ExpressionStatement	 
>4105	AssignmentExpr	g -> gameaction = ga_nothing
>4106	Identifier	ga_nothing
>4107	PtrMemberAccess	g -> gameaction
>4108	Identifier	gameaction
>4109	Identifier	g
>4110	Statement	 
>4111	ExpressionStatement	 
>4112	AssignmentExpr	loadingGame = true
>4113	Identifier	true
>4114	Identifier	loadingGame
>4115	IdentifierDeclStatement	 
>4116	IdentifierDecl	vcheck [ VERSIONSIZE ]
>4117	Identifier	VERSIONSIZE
>4118	Identifier	vcheck
>4119	IdentifierDeclType	char [ VERSIONSIZE ]
>4120	IdentifierDeclStatement	 
>4121	IdentifierDecl	c
>4122	Identifier	c
>4123	IdentifierDeclType	int
>4124	IdentifierDecl	b
>4125	Identifier	b
>4126	IdentifierDeclType	int
>4127	IdentifierDecl	a
>4128	Identifier	a
>4129	IdentifierDeclType	int
>4130	IdentifierDeclStatement	 
>4131	IdentifierDecl	i
>4132	Identifier	i
>4133	IdentifierDeclType	int
>4168	FunctionDef	G_SaveGame (int slot , char * description)
>4169	ParameterList	int slot , char * description
>4170	Parameter	 
>4171	Identifier	description
>4172	ParameterType	char *
>4173	Parameter	 
>4174	Identifier	slot
>4175	ParameterType	int
>4176	ReturnType	void
>4177	CompoundStatement	 
>4178	ExpressionStatement	 
>4179	AssignmentExpr	g -> gameaction = ga_savegame
>4180	Identifier	ga_savegame
>4181	PtrMemberAccess	g -> gameaction
>4182	Identifier	gameaction
>4183	Identifier	g
>4184	Statement	 
>4185	ExpressionStatement	 
>4186	AssignmentExpr	g -> sendsave = true
>4187	Identifier	true
>4188	PtrMemberAccess	g -> sendsave
>4189	Identifier	sendsave
>4190	Identifier	g
>4191	Statement	 
>4192	ExpressionStatement	 
>4193	Statement	 
>4194	Statement	 
>4195	Statement	 
>4196	Statement	 
>4197	Statement	 
>4198	Statement	 
>4199	Statement	 
>4200	Statement	 
>4201	Statement	 
>4202	ExpressionStatement	 
>4203	AssignmentExpr	g -> savegameslot = slot
>4204	Identifier	slot
>4205	PtrMemberAccess	g -> savegameslot
>4206	Identifier	savegameslot
>4207	Identifier	g
>4208	Statement	 
>4221	FunctionDef	G_DoSaveGame ()
>4222	ParameterList	 
>4223	ReturnType	qboolean
>4224	CompoundStatement	 
>4225	ReturnStatement	 
>4226	Identifier	bResult
>4227	ExpressionStatement	 
>4228	CallExpression	R_FillBackScreen ( )
>4229	ArgumentList	 
>4230	Callee	R_FillBackScreen
>4231	Identifier	R_FillBackScreen
>4232	ExpressionStatement	 
>4233	AssignmentExpr	g -> savedescription [ 0 ] = 0
>4234	PrimaryExpression	0
>4235	ArrayIndexing	g -> savedescription [ 0 ]
>4236	PrimaryExpression	0
>4237	PtrMemberAccess	g -> savedescription
>4238	Identifier	savedescription
>4239	Identifier	g
>4240	Statement	 
>4241	ExpressionStatement	 
>4242	AssignmentExpr	g -> gameaction = ga_nothing
>4243	Identifier	ga_nothing
>4244	PtrMemberAccess	g -> gameaction
>4245	Identifier	gameaction
>4246	Identifier	g
>4247	Statement	 
>4248	ExpressionStatement	 
>4249	Statement	 
>4250	Statement	 
>4251	Statement	 
>4252	Statement	 
>4253	Statement	 
>4254	Statement	 
>4255	Statement	 
>4256	Statement	 
>4257	Statement	 
>4258	Statement	 
>4259	Statement	 
>4260	ExpressionStatement	 
>4261	AssignmentExpr	g -> savebufferSize = length
>4262	Identifier	length
>4263	PtrMemberAccess	g -> savebufferSize
>4264	Identifier	savebufferSize
>4265	Identifier	g
>4266	Statement	 
>4267	IfStatement	if ( length > SAVEGAMESIZE )
>4268	ExpressionStatement	 
>4269	CallExpression	I_Error ( \"Savegame buffer overrun\" )
>4270	ArgumentList	\"Savegame buffer overrun\"
>4271	Argument	\"Savegame buffer overrun\"
>4272	PrimaryExpression	\"Savegame buffer overrun\"
>4273	Callee	I_Error
>4274	Identifier	I_Error
>4275	Condition	 
>4276	RelationalExpression	length > SAVEGAMESIZE
>4277	Identifier	SAVEGAMESIZE
>4278	Identifier	length
>4279	ExpressionStatement	 
>4280	PtrMemberAccess	g -> savebuffer
>4281	Identifier	savebuffer
>4282	Identifier	g
>4283	Statement	 
>4284	Statement	 
>4285	Statement	 
>4286	Statement	 
>4287	Statement	 
>4288	Statement	 
>4289	Statement	 
>4290	Statement	 
>4291	ExpressionStatement	 
>4292	AssignmentExpr	g -> save_p ++ = 0x1d
>4293	PrimaryExpression	0x1d
>4294	IncDecOp	g -> save_p ++
>4295	IncDec	++
>4296	PtrMemberAccess	g -> save_p
>4297	Identifier	save_p
>4298	Identifier	g
>4299	Statement	 
>4300	Statement	 
>4301	ExpressionStatement	 
>4302	CallExpression	P_ArchiveThinkers ( )
>4303	ArgumentList	 
>4304	Callee	P_ArchiveThinkers
>4305	Identifier	P_ArchiveThinkers
>4306	ExpressionStatement	 
>4307	CallExpression	P_ArchiveWorld ( )
>4308	ArgumentList	 
>4309	Callee	P_ArchiveWorld
>4310	Identifier	P_ArchiveWorld
>4311	ExpressionStatement	 
>4312	CallExpression	P_ArchivePlayers ( )
>4313	ArgumentList	 
>4314	Callee	P_ArchivePlayers
>4315	Identifier	P_ArchivePlayers
>4316	ExpressionStatement	 
>4317	PtrMemberAccess	g -> leveltime
>4318	Identifier	leveltime
>4319	Identifier	g
>4320	Statement	 
>4321	Statement	 
>4322	Statement	 
>4323	Statement	 
>4324	Statement	 
>4325	Statement	 
>4326	Statement	 
>4327	Statement	 
>4328	ExpressionStatement	 
>4329	ShiftExpression	g -> leveltime >> 8
>4330	PrimaryExpression	8
>4331	PtrMemberAccess	g -> leveltime
>4332	Identifier	leveltime
>4333	Identifier	g
>4334	Statement	 
>4335	Statement	 
>4336	Statement	 
>4337	Statement	 
>4338	Statement	 
>4339	Statement	 
>4340	Statement	 
>4341	Statement	 
>4342	ExpressionStatement	 
>4343	ShiftExpression	g -> leveltime >> 16
>4344	PrimaryExpression	16
>4345	PtrMemberAccess	g -> leveltime
>4346	Identifier	leveltime
>4347	Identifier	g
>4348	Statement	 
>4349	Statement	 
>4350	Statement	 
>4351	Statement	 
>4352	Statement	 
>4353	Statement	 
>4354	Statement	 
>4355	Statement	 
>4356	ForStatement	for ( i = 0 ; i < MAXPLAYERS ; i ++ )
>4357	CompoundStatement	 
>4358	ExpressionStatement	 
>4359	ArrayIndexing	g -> playeringame [ i ]
>4360	Identifier	i
>4361	PtrMemberAccess	g -> playeringame
>4362	Identifier	playeringame
>4363	Identifier	g
>4364	Statement	 
>4365	Statement	 
>4366	Statement	 
>4367	Statement	 
>4368	Statement	 
>4369	Statement	 
>4370	Statement	 
>4371	Statement	 
>4372	IncDecOp	 
>4373	IncDec	++
>4374	Identifier	i
>4375	Condition	 
>4376	RelationalExpression	i < MAXPLAYERS
>4377	Identifier	MAXPLAYERS
>4378	Identifier	i
>4379	ForInit	 
>4380	AssignmentExpr	i = 0
>4381	PrimaryExpression	0
>4382	Identifier	i
>4383	ExpressionStatement	 
>4384	PtrMemberAccess	g -> gamemap
>4385	Identifier	gamemap
>4386	Identifier	g
>4387	Statement	 
>4388	Statement	 
>4389	Statement	 
>4390	Statement	 
>4391	Statement	 
>4392	Statement	 
>4393	Statement	 
>4394	Statement	 
>4395	ExpressionStatement	 
>4396	PtrMemberAccess	g -> gamemission
>4397	Identifier	gamemission
>4398	Identifier	g
>4399	Statement	 
>4400	Statement	 
>4401	Statement	 
>4402	Statement	 
>4403	Statement	 
>4404	Statement	 
>4405	Statement	 
>4406	Statement	 
>4407	ExpressionStatement	 
>4408	PtrMemberAccess	g -> gameepisode
>4409	Identifier	gameepisode
>4410	Identifier	g
>4411	Statement	 
>4412	Statement	 
>4413	Statement	 
>4414	Statement	 
>4415	Statement	 
>4416	Statement	 
>4417	Statement	 
>4418	Statement	 
>4419	ExpressionStatement	 
>4420	PtrMemberAccess	g -> gameskill
>4421	Identifier	gameskill
>4422	Identifier	g
>4423	Statement	 
>4424	Statement	 
>4425	Statement	 
>4426	Statement	 
>4427	Statement	 
>4428	Statement	 
>4429	Statement	 
>4430	Statement	 
>4431	ExpressionStatement	 
>4432	AssignmentExpr	g -> save_p += VERSIONSIZE
>4433	Identifier	VERSIONSIZE
>4434	PtrMemberAccess	g -> save_p
>4435	Identifier	save_p
>4436	Identifier	g
>4437	Statement	 
>4438	ExpressionStatement	 
>4439	Statement	 
>4440	Statement	 
>4441	Statement	 
>4442	Statement	 
>4443	Statement	 
>4444	Statement	 
>4445	Statement	 
>4446	Statement	 
>4447	Statement	 
>4448	Statement	 
>4449	Statement	 
>4450	ExpressionStatement	 
>4451	CallExpression	sprintf ( name2 , \"version %i\" , VERSION )
>4452	ArgumentList	name2
>4453	Argument	VERSION
>4454	Identifier	VERSION
>4455	Argument	\"version %i\"
>4456	PrimaryExpression	\"version %i\"
>4457	Argument	name2
>4458	Identifier	name2
>4459	Callee	sprintf
>4460	Identifier	sprintf
>4461	ExpressionStatement	 
>4462	CallExpression	memset ( name2 , 0 , sizeof ( name2 ) )
>4463	ArgumentList	name2
>4464	Argument	sizeof ( name2 )
>4465	SizeofExpr	sizeof ( name2 )
>4466	SizeofOperand	name2
>4467	Sizeof	sizeof
>4468	Argument	0
>4469	PrimaryExpression	0
>4470	Argument	name2
>4471	Identifier	name2
>4472	Callee	memset
>4473	Identifier	memset
>4474	ExpressionStatement	 
>4475	AssignmentExpr	g -> save_p += SAVESTRINGSIZE
>4476	Identifier	SAVESTRINGSIZE
>4477	PtrMemberAccess	g -> save_p
>4478	Identifier	save_p
>4479	Identifier	g
>4480	Statement	 
>4481	ExpressionStatement	 
>4482	Statement	 
>4483	Statement	 
>4484	Statement	 
>4485	Statement	 
>4486	Statement	 
>4487	Statement	 
>4488	Statement	 
>4489	Statement	 
>4490	Statement	 
>4491	Statement	 
>4492	Statement	 
>4493	ExpressionStatement	 
>4494	ArrayIndexing	g -> screens [ 1 ]
>4495	PrimaryExpression	1
>4496	PtrMemberAccess	g -> screens
>4497	Identifier	screens
>4498	Identifier	g
>4499	Statement	 
>4500	Statement	 
>4501	Statement	 
>4502	Statement	 
>4503	Statement	 
>4504	Statement	 
>4505	Statement	 
>4506	Statement	 
>4507	Statement	 
>4508	Statement	 
>4509	Statement	 
>4510	IfStatement	if ( common -> GetCurrentGame ( ) == DOOM_CLASSIC )
>4511	ElseStatement	else
>4512	CompoundStatement	 
>4513	IfStatement	if ( DoomLib 
>4514	ElseStatement	else
>4515	CompoundStatement	 
>4516	ExpressionStatement	 
>4517	Statement	 
>4518	Statement	 
>4519	Statement	 
>4520	Statement	 
>4521	Statement	 
>4522	Statement	 
>4523	Statement	 
>4524	Statement	 
>4525	Statement	 
>4526	Statement	 
>4527	Statement	 
>4528	Statement	 
>4529	Statement	 
>4530	CompoundStatement	 
>4531	ExpressionStatement	 
>4532	Statement	 
>4533	Statement	 
>4534	Statement	 
>4535	Statement	 
>4536	Statement	 
>4537	Statement	 
>4538	Statement	 
>4539	Statement	 
>4540	Statement	 
>4541	Statement	 
>4542	Statement	 
>4543	Statement	 
>4544	Statement	 
>4545	Condition	 
>4546	EqualityExpression	DoomLib 
>4547	Identifier	doom2
>4548	Identifier	DoomLib 
>4549	CompoundStatement	 
>4550	ExpressionStatement	 
>4551	Statement	 
>4552	Statement	 
>4553	Statement	 
>4554	Statement	 
>4555	Statement	 
>4556	Statement	 
>4557	Statement	 
>4558	Statement	 
>4559	Statement	 
>4560	Statement	 
>4561	Statement	 
>4562	Statement	 
>4563	Statement	 
>4564	Condition	 
>4565	EqualityExpression	common -> GetCurrentGame ( ) == DOOM_CLASSIC
>4566	Identifier	DOOM_CLASSIC
>4567	CallExpression	common -> GetCurrentGame ( )
>4568	ArgumentList	 
>4569	Callee	common -> GetCurrentGame
>4570	PtrMemberAccess	common -> GetCurrentGame
>4571	Identifier	GetCurrentGame
>4572	Identifier	common
>4573	ExpressionStatement	 
>4574	PtrMemberAccess	g -> savedescription
>4575	Identifier	savedescription
>4576	Identifier	g
>4577	Statement	 
>4578	Statement	 
>4579	Statement	 
>4580	CompoundStatement	 
>4581	ReturnStatement	 
>4582	Identifier	false
>4583	Statement	 
>4584	Statement	 
>4585	Statement	 
>4586	Statement	 
>4587	Statement	 
>4588	Statement	 
>4589	Statement	 
>4590	Statement	 
>4591	Statement	 
>4592	IdentifierDeclStatement	 
>4593	IdentifierDecl	bResult = true
>4594	AssignmentExpr	bResult = true
>4595	Identifier	true
>4596	Identifier	true
>4597	Identifier	bResult
>4598	IdentifierDeclType	qboolean
>4599	IdentifierDeclStatement	 
>4600	IdentifierDecl	i
>4601	Identifier	i
>4602	IdentifierDeclType	int
>4603	IdentifierDeclStatement	 
>4604	IdentifierDecl	length
>4605	Identifier	length
>4606	IdentifierDeclType	int
>4607	IdentifierDeclStatement	 
>4608	IdentifierDecl	* description
>4609	Identifier	description
>4610	IdentifierDeclType	char *
>4611	IdentifierDeclStatement	 
>4612	IdentifierDecl	name2 [ VERSIONSIZE ]
>4613	Identifier	VERSIONSIZE
>4614	Identifier	name2
>4615	IdentifierDeclType	char [ VERSIONSIZE ]
>4616	IdentifierDeclStatement	 
>4617	IdentifierDecl	name [ 100 ]
>4618	PrimaryExpression	100
>4619	Identifier	name
>4620	IdentifierDeclType	char [ 100 ]
>4654	FunctionDef	G_DeferedInitNew (skill_t skill , int episode , int map)
>4655	ParameterList	skill_t skill , int episode , int map
>4656	Parameter	 
>4657	Identifier	map
>4658	ParameterType	int
>4659	Parameter	 
>4660	Identifier	episode
>4661	ParameterType	int
>4662	Parameter	 
>4663	Identifier	skill
>4664	ParameterType	skill_t
>4665	ReturnType	void
>4666	CompoundStatement	 
>4667	ExpressionStatement	 
>4668	AssignmentExpr	g -> gameaction = ga_newgame
>4669	Identifier	ga_newgame
>4670	PtrMemberAccess	g -> gameaction
>4671	Identifier	gameaction
>4672	Identifier	g
>4673	Statement	 
>4674	ExpressionStatement	 
>4675	AssignmentExpr	g -> d_map = map
>4676	Identifier	map
>4677	PtrMemberAccess	g -> d_map
>4678	Identifier	d_map
>4679	Identifier	g
>4680	Statement	 
>4681	ExpressionStatement	 
>4682	AssignmentExpr	g -> d_episode = episode
>4683	Identifier	episode
>4684	PtrMemberAccess	g -> d_episode
>4685	Identifier	d_episode
>4686	Identifier	g
>4687	Statement	 
>4688	ExpressionStatement	 
>4689	AssignmentExpr	g -> d_skill = skill
>4690	Identifier	skill
>4691	PtrMemberAccess	g -> d_skill
>4692	Identifier	d_skill
>4693	Identifier	g
>4694	Statement	 
>4708	FunctionDef	G_DoNewGame ()
>4709	ParameterList	 
>4710	ReturnType	void
>4711	CompoundStatement	 
>4712	ExpressionStatement	 
>4713	AssignmentExpr	g -> gameaction = ga_nothing
>4714	Identifier	ga_nothing
>4715	PtrMemberAccess	g -> gameaction
>4716	Identifier	gameaction
>4717	Identifier	g
>4718	Statement	 
>4719	ExpressionStatement	 
>4720	Statement	 
>4721	Statement	 
>4722	Statement	 
>4723	Statement	 
>4724	Statement	 
>4725	Statement	 
>4726	Statement	 
>4727	Statement	 
>4728	Statement	 
>4729	Statement	 
>4730	Statement	 
>4731	Statement	 
>4732	Statement	 
>4733	Statement	 
>4734	Statement	 
>4735	Statement	 
>4736	Statement	 
>4737	ExpressionStatement	 
>4738	AssignmentExpr	g -> consoleplayer = 0
>4739	PrimaryExpression	0
>4740	PtrMemberAccess	g -> consoleplayer
>4741	Identifier	consoleplayer
>4742	Identifier	g
>4743	Statement	 
>4744	ExpressionStatement	 
>4745	AssignmentExpr	g -> nomonsters = false
>4746	Identifier	false
>4747	PtrMemberAccess	g -> nomonsters
>4748	Identifier	nomonsters
>4749	Identifier	g
>4750	Statement	 
>4751	ExpressionStatement	 
>4752	AssignmentExpr	g -> fastparm = false
>4753	Identifier	false
>4754	PtrMemberAccess	g -> fastparm
>4755	Identifier	fastparm
>4756	Identifier	g
>4757	Statement	 
>4758	ExpressionStatement	 
>4759	AssignmentExpr	g -> respawnparm = false
>4760	Identifier	false
>4761	PtrMemberAccess	g -> respawnparm
>4762	Identifier	respawnparm
>4763	Identifier	g
>4764	Statement	 
>4765	ExpressionStatement	 
>4766	AssignmentExpr	g -> playeringame [ 3 ] = 0
>4767	PrimaryExpression	0
>4768	ArrayIndexing	g -> playeringame [ 3 ]
>4769	PrimaryExpression	3
>4770	PtrMemberAccess	g -> playeringame
>4771	Identifier	playeringame
>4772	Identifier	g
>4773	Statement	 
>4774	Statement	 
>4775	Statement	 
>4776	Statement	 
>4777	Statement	 
>4778	Statement	 
>4779	Statement	 
>4780	Statement	 
>4781	Statement	 
>4782	Statement	 
>4783	Statement	 
>4784	Statement	 
>4785	Statement	 
>4786	Statement	 
>4787	Statement	 
>4788	Statement	 
>4789	Statement	 
>4790	ExpressionStatement	 
>4791	AssignmentExpr	g -> deathmatch = false
>4792	Identifier	false
>4793	PtrMemberAccess	g -> deathmatch
>4794	Identifier	deathmatch
>4795	Identifier	g
>4796	Statement	 
>4797	ExpressionStatement	 
>4798	AssignmentExpr	g -> netgame = false
>4799	Identifier	false
>4800	PtrMemberAccess	g -> netgame
>4801	Identifier	netgame
>4802	Identifier	g
>4803	Statement	 
>4804	ExpressionStatement	 
>4805	AssignmentExpr	g -> netdemo = false
>4806	Identifier	false
>4807	PtrMemberAccess	g -> netdemo
>4808	Identifier	netdemo
>4809	Identifier	g
>4810	Statement	 
>4811	ExpressionStatement	 
>4812	AssignmentExpr	g -> demoplayback = false
>4813	Identifier	false
>4814	PtrMemberAccess	g -> demoplayback
>4815	Identifier	demoplayback
>4816	Identifier	g
>4817	Statement	 
>4837	FunctionDef	G_InitNew (skill_t skill , int episode , int map)
>4838	ParameterList	skill_t skill , int episode , int map
>4839	Parameter	 
>4840	Identifier	map
>4841	ParameterType	int
>4842	Parameter	 
>4843	Identifier	episode
>4844	ParameterType	int
>4845	Parameter	 
>4846	Identifier	skill
>4847	ParameterType	skill_t
>4848	ReturnType	void
>4849	CompoundStatement	 
>4850	Statement	 
>4851	Statement	 
>4852	Statement	 
>4853	Statement	 
>4854	Statement	 
>4855	Statement	 
>4856	Statement	 
>4857	Statement	 
>4858	Statement	 
>4859	ExpressionStatement	 
>4860	AssignmentExpr	g -> viewactive = true
>4861	Identifier	true
>4862	PtrMemberAccess	g -> viewactive
>4863	Identifier	viewactive
>4864	Identifier	g
>4865	Statement	 
>4866	ExpressionStatement	 
>4867	AssignmentExpr	g -> gameskill = skill
>4868	Identifier	skill
>4869	PtrMemberAccess	g -> gameskill
>4870	Identifier	gameskill
>4871	Identifier	g
>4872	Statement	 
>4873	ExpressionStatement	 
>4874	AssignmentExpr	g -> gamemap = map
>4875	Identifier	map
>4876	PtrMemberAccess	g -> gamemap
>4877	Identifier	gamemap
>4878	Identifier	g
>4879	Statement	 
>4880	ExpressionStatement	 
>4881	AssignmentExpr	g -> gameepisode = episode
>4882	Identifier	episode
>4883	PtrMemberAccess	g -> gameepisode
>4884	Identifier	gameepisode
>4885	Identifier	g
>4886	Statement	 
>4887	ExpressionStatement	 
>4888	AssignmentExpr	g -> viewactive = true
>4889	Identifier	true
>4890	PtrMemberAccess	g -> viewactive
>4891	Identifier	viewactive
>4892	Identifier	g
>4893	Statement	 
>4894	ExpressionStatement	 
>4895	AssignmentExpr	g -> automapactive = false
>4896	Identifier	false
>4897	PtrMemberAccess	g -> automapactive
>4898	Identifier	automapactive
>4899	Identifier	g
>4900	Statement	 
>4901	ExpressionStatement	 
>4902	AssignmentExpr	g -> advancedemo = false
>4903	Identifier	false
>4904	PtrMemberAccess	g -> advancedemo
>4905	Identifier	advancedemo
>4906	Identifier	g
>4907	Statement	 
>4908	ExpressionStatement	 
>4909	AssignmentExpr	g -> demoplayback = false
>4910	Identifier	false
>4911	PtrMemberAccess	g -> demoplayback
>4912	Identifier	demoplayback
>4913	Identifier	g
>4914	Statement	 
>4915	ExpressionStatement	 
>4916	AssignmentExpr	g -> paused = false
>4917	Identifier	false
>4918	PtrMemberAccess	g -> paused
>4919	Identifier	paused
>4920	Identifier	g
>4921	Statement	 
>4922	ExpressionStatement	 
>4923	AssignmentExpr	g -> usergame = true
>4924	Identifier	true
>4925	PtrMemberAccess	g -> usergame
>4926	Identifier	usergame
>4927	Identifier	g
>4928	Statement	 
>4929	ExpressionStatement	 
>4930	AssignmentExpr	g -> players [ i ] . playerstate = PST_REBORN
>4931	Identifier	PST_REBORN
>4932	MemberAccess	g -> players [ i ] . playerstate
>4933	Identifier	playerstate
>4934	ArrayIndexing	g -> players [ i ]
>4935	Identifier	i
>4936	PtrMemberAccess	g -> players
>4937	Identifier	players
>4938	Identifier	g
>4939	ForStatement	for ( i = 0 ; i < MAXPLAYERS ; i ++ )
>4940	Statement	 
>4941	IncDecOp	 
>4942	IncDec	++
>4943	Identifier	i
>4944	Condition	 
>4945	RelationalExpression	i < MAXPLAYERS
>4946	Identifier	MAXPLAYERS
>4947	Identifier	i
>4948	ForInit	 
>4949	AssignmentExpr	i = 0
>4950	PrimaryExpression	0
>4951	Identifier	i
>4952	ExpressionStatement	 
>4953	AssignmentExpr	g -> respawnmonsters = false
>4954	Identifier	false
>4955	PtrMemberAccess	g -> respawnmonsters
>4956	Identifier	respawnmonsters
>4957	Identifier	g
>4958	ExpressionStatement	 
>4959	AssignmentExpr	g -> respawnmonsters = true
>4960	Identifier	true
>4961	PtrMemberAccess	g -> respawnmonsters
>4962	Identifier	respawnmonsters
>4963	Identifier	g
>4964	Statement	 
>4965	Statement	 
>4966	Statement	 
>4967	Statement	 
>4968	Statement	 
>4969	Statement	 
>4970	Statement	 
>4971	Statement	 
>4972	Statement	 
>4973	Statement	 
>4974	Statement	 
>4975	Statement	 
>4976	IfStatement	if ( map < 1 )
>4977	ElseStatement	else
>4978	Statement	 
>4979	ExpressionStatement	 
>4980	AssignmentExpr	map = 1
>4981	PrimaryExpression	1
>4982	Identifier	map
>4983	Condition	 
>4984	RelationalExpression	map < 1
>4985	PrimaryExpression	1
>4986	Identifier	map
>4987	CompoundStatement	 
>4988	IfStatement	if ( episode > 1 )
>4989	ExpressionStatement	 
>4990	AssignmentExpr	episode = 1
>4991	PrimaryExpression	1
>4992	Identifier	episode
>4993	Condition	 
>4994	RelationalExpression	episode > 1
>4995	PrimaryExpression	1
>4996	Identifier	episode
>4997	Statement	 
>4998	Statement	 
>4999	Statement	 
>5000	Statement	 
>5001	Statement	 
>5002	Statement	 
>5003	Statement	 
>5004	Statement	 
>5005	CompoundStatement	 
>5006	IfStatement	if ( episode > 4 )
>5007	ExpressionStatement	 
>5008	AssignmentExpr	episode = 4
>5009	PrimaryExpression	4
>5010	Identifier	episode
>5011	Condition	 
>5012	RelationalExpression	episode > 4
>5013	PrimaryExpression	4
>5014	Identifier	episode
>5015	Statement	 
>5016	Statement	 
>5017	Statement	 
>5018	Statement	 
>5019	Statement	 
>5020	Statement	 
>5021	Statement	 
>5022	Statement	 
>5023	Statement	 
>5024	IfStatement	if ( episode < 1 )
>5025	ElseStatement	else
>5026	Statement	 
>5027	ExpressionStatement	 
>5028	AssignmentExpr	episode = 1
>5029	PrimaryExpression	1
>5030	Identifier	episode
>5031	Condition	 
>5032	RelationalExpression	episode < 1
>5033	PrimaryExpression	1
>5034	Identifier	episode
>5035	IfStatement	if ( skill > sk_nightmare )
>5036	ElseStatement	else
>5037	CompoundStatement	 
>5038	IfStatement	if ( episode > 3 )
>5039	ExpressionStatement	 
>5040	AssignmentExpr	episode = 3
>5041	PrimaryExpression	3
>5042	Identifier	episode
>5043	Condition	 
>5044	RelationalExpression	episode > 3
>5045	PrimaryExpression	3
>5046	Identifier	episode
>5047	ExpressionStatement	 
>5048	AssignmentExpr	skill = sk_nightmare
>5049	Identifier	sk_nightmare
>5050	Identifier	skill
>5051	Condition	 
>5052	RelationalExpression	skill > sk_nightmare
>5053	Identifier	sk_nightmare
>5054	Identifier	skill
>5055	CompoundStatement	 
>5056	ExpressionStatement	 
>5057	CallExpression	S_ResumeSound ( )
>5058	ArgumentList	 
>5059	Callee	S_ResumeSound
>5060	Identifier	S_ResumeSound
>5061	ExpressionStatement	 
>5062	AssignmentExpr	g -> paused = false
>5063	Identifier	false
>5064	PtrMemberAccess	g -> paused
>5065	Identifier	paused
>5066	Identifier	g
>5067	Statement	 
>5068	Statement	 
>5069	Statement	 
>5070	Statement	 
>5071	Statement	 
>5072	Statement	 
>5073	Statement	 
>5074	Statement	 
>5075	ExpressionStatement	 
>5076	Statement	 
>5077	Statement	 
>5078	Statement	 
>5079	Statement	 
>5080	Statement	 
>5081	Statement	 
>5082	Statement	 
>5083	Statement	 
>5084	Statement	 
>5085	Statement	 
>5086	Statement	 
>5087	Statement	 
>5088	ExpressionStatement	 
>5089	CallExpression	m_inDemoMode . SetBool ( false )
>5090	ArgumentList	false
>5091	Argument	false
>5092	Identifier	false
>5093	Callee	m_inDemoMode . SetBool
>5094	MemberAccess	m_inDemoMode . SetBool
>5095	Identifier	SetBool
>5096	Identifier	m_inDemoMode
>5097	IdentifierDeclStatement	 
>5098	IdentifierDecl	i
>5099	Identifier	i
>5100	IdentifierDeclType	int
>5131	FunctionDef	G_ReadDemoTiccmd (ticcmd_t * cmd)
>5132	ParameterList	ticcmd_t * cmd
>5133	Parameter	 
>5134	Identifier	cmd
>5135	ParameterType	ticcmd_t *
>5136	ReturnType	void
>5137	CompoundStatement	 
>5138	IfStatement	if ( demoDebugOn )
>5139	CompoundStatement	 
>5140	ExpressionStatement	 
>5141	IncDecOp	g -> demo_p ++
>5142	IncDec	++
>5143	PtrMemberAccess	g -> demo_p
>5144	Identifier	demo_p
>5145	Identifier	g
>5146	Statement	 
>5147	Statement	 
>5148	Statement	 
>5149	Statement	 
>5150	Statement	 
>5151	Statement	 
>5152	Statement	 
>5153	Statement	 
>5154	Condition	 
>5155	Identifier	demoDebugOn
>5156	ExpressionStatement	 
>5157	IncDecOp	g -> demo_p ++
>5158	IncDec	++
>5159	PtrMemberAccess	g -> demo_p
>5160	Identifier	demo_p
>5161	Identifier	g
>5162	Statement	 
>5163	Statement	 
>5164	Statement	 
>5165	Statement	 
>5166	Statement	 
>5167	Statement	 
>5168	Statement	 
>5169	Statement	 
>5170	Statement	 
>5171	Statement	 
>5172	IfStatement	if ( demoversion == VERSION )
>5173	ElseStatement	else
>5174	CompoundStatement	 
>5175	ExpressionStatement	 
>5176	PrimaryExpression	8
>5177	Statement	 
>5178	Statement	 
>5179	Statement	 
>5180	Statement	 
>5181	Statement	 
>5182	Statement	 
>5183	Statement	 
>5184	Statement	 
>5185	Statement	 
>5186	Statement	 
>5187	Statement	 
>5188	Statement	 
>5189	Statement	 
>5190	Statement	 
>5191	Statement	 
>5192	Statement	 
>5193	Statement	 
>5194	CompoundStatement	 
>5195	ExpressionStatement	 
>5196	AssignmentExpr	g -> demo_p += 2
>5197	PrimaryExpression	2
>5198	PtrMemberAccess	g -> demo_p
>5199	Identifier	demo_p
>5200	Identifier	g
>5201	Statement	 
>5202	ExpressionStatement	 
>5203	AssignmentExpr	cmd -> angleturn = * temp
>5204	UnaryOp	* temp
>5205	Identifier	temp
>5206	UnaryOperator	*
>5207	PtrMemberAccess	cmd -> angleturn
>5208	Identifier	angleturn
>5209	Identifier	cmd
>5210	ExpressionStatement	 
>5211	Statement	 
>5212	Statement	 
>5213	Statement	 
>5214	Statement	 
>5215	Statement	 
>5216	Statement	 
>5217	Statement	 
>5218	Statement	 
>5219	Statement	 
>5220	Statement	 
>5221	Statement	 
>5222	Statement	 
>5223	Statement	 
>5224	Statement	 
>5225	Condition	 
>5226	EqualityExpression	demoversion == VERSION
>5227	Identifier	VERSION
>5228	Identifier	demoversion
>5229	ExpressionStatement	 
>5230	Statement	 
>5231	Statement	 
>5232	Statement	 
>5233	Statement	 
>5234	Statement	 
>5235	Statement	 
>5236	Statement	 
>5237	Statement	 
>5238	Statement	 
>5239	Statement	 
>5240	Statement	 
>5241	Statement	 
>5242	Statement	 
>5243	Statement	 
>5244	Statement	 
>5245	Statement	 
>5246	ExpressionStatement	 
>5247	Statement	 
>5248	Statement	 
>5249	Statement	 
>5250	Statement	 
>5251	Statement	 
>5252	Statement	 
>5253	Statement	 
>5254	Statement	 
>5255	Statement	 
>5256	Statement	 
>5257	Statement	 
>5258	Statement	 
>5259	Statement	 
>5260	Statement	 
>5261	Statement	 
>5262	Statement	 
>5263	CompoundStatement	 
>5264	ReturnStatement	 
>5265	ExpressionStatement	 
>5266	CallExpression	G_CheckDemoStatus ( )
>5267	ArgumentList	 
>5268	Callee	G_CheckDemoStatus
>5269	Identifier	G_CheckDemoStatus
>5270	Statement	 
>5271	Statement	 
>5272	Statement	 
>5273	Statement	 
>5274	Statement	 
>5275	Statement	 
>5276	Statement	 
>5277	Statement	 
>5278	Statement	 
>5279	Statement	 
>5294	FunctionDef	G_WriteDemoTiccmd (ticcmd_t * cmd)
>5295	ParameterList	ticcmd_t * cmd
>5296	Parameter	 
>5297	Identifier	cmd
>5298	ParameterType	ticcmd_t *
>5299	ReturnType	void
>5300	CompoundStatement	 
>5301	ExpressionStatement	 
>5302	CallExpression	G_ReadDemoTiccmd ( cmd )
>5303	ArgumentList	cmd
>5304	Argument	cmd
>5305	Identifier	cmd
>5306	Callee	G_ReadDemoTiccmd
>5307	Identifier	G_ReadDemoTiccmd
>5308	CompoundStatement	 
>5309	ReturnStatement	 
>5310	ExpressionStatement	 
>5311	CallExpression	G_CheckDemoStatus ( )
>5312	ArgumentList	 
>5313	Callee	G_CheckDemoStatus
>5314	Identifier	G_CheckDemoStatus
>5315	Statement	 
>5316	Statement	 
>5317	Statement	 
>5318	Statement	 
>5319	Statement	 
>5320	Statement	 
>5321	Statement	 
>5322	Statement	 
>5323	Statement	 
>5324	Statement	 
>5325	Statement	 
>5326	Statement	 
>5327	Statement	 
>5328	Statement	 
>5329	Statement	 
>5330	Statement	 
>5331	Statement	 
>5332	Statement	 
>5333	ExpressionStatement	 
>5334	AssignmentExpr	g -> demo_p -= cmdSize
>5335	Identifier	cmdSize
>5336	PtrMemberAccess	g -> demo_p
>5337	Identifier	demo_p
>5338	Identifier	g
>5339	Statement	 
>5340	ExpressionStatement	 
>5341	IncDecOp	cmdSize ++
>5342	IncDec	++
>5343	Identifier	cmdSize
>5344	ExpressionStatement	 
>5345	PtrMemberAccess	g -> prndindex
>5346	Identifier	prndindex
>5347	Identifier	g
>5348	Statement	 
>5349	Statement	 
>5350	Statement	 
>5351	Statement	 
>5352	Statement	 
>5353	Statement	 
>5354	Statement	 
>5355	Statement	 
>5356	IdentifierDeclStatement	 
>5357	IdentifierDecl	cmdSize = 5
>5358	AssignmentExpr	cmdSize = 5
>5359	PrimaryExpression	5
>5360	Identifier	cmdSize
>5361	Identifier	cmdSize
>5362	IdentifierDeclType	int
>5363	ExpressionStatement	 
>5364	AssignmentExpr	g -> demo_p ++ = cmd -> buttons
>5365	PtrMemberAccess	cmd -> buttons
>5366	Identifier	buttons
>5367	Identifier	cmd
>5368	IncDecOp	g -> demo_p ++
>5369	IncDec	++
>5370	PtrMemberAccess	g -> demo_p
>5371	Identifier	demo_p
>5372	Identifier	g
>5373	Statement	 
>5374	Statement	 
>5375	ExpressionStatement	 
>5376	AssignmentExpr	g -> demo_p += 2
>5377	PrimaryExpression	2
>5378	PtrMemberAccess	g -> demo_p
>5379	Identifier	demo_p
>5380	Identifier	g
>5381	Statement	 
>5382	ExpressionStatement	 
>5383	AssignmentExpr	* temp = cmd -> angleturn
>5384	PtrMemberAccess	cmd -> angleturn
>5385	Identifier	angleturn
>5386	Identifier	cmd
>5387	UnaryOp	* temp
>5388	Identifier	temp
>5389	UnaryOperator	*
>5390	ExpressionStatement	 
>5391	Statement	 
>5392	Statement	 
>5393	Statement	 
>5394	Statement	 
>5395	Statement	 
>5396	Statement	 
>5397	Statement	 
>5398	Statement	 
>5399	Statement	 
>5400	Statement	 
>5401	Statement	 
>5402	Statement	 
>5403	Statement	 
>5404	Statement	 
>5405	ExpressionStatement	 
>5406	AssignmentExpr	g -> demo_p ++ = cmd -> sidemove
>5407	PtrMemberAccess	cmd -> sidemove
>5408	Identifier	sidemove
>5409	Identifier	cmd
>5410	IncDecOp	g -> demo_p ++
>5411	IncDec	++
>5412	PtrMemberAccess	g -> demo_p
>5413	Identifier	demo_p
>5414	Identifier	g
>5415	Statement	 
>5416	Statement	 
>5417	ExpressionStatement	 
>5418	AssignmentExpr	g -> demo_p ++ = cmd -> forwardmove
>5419	PtrMemberAccess	cmd -> forwardmove
>5420	Identifier	forwardmove
>5421	Identifier	cmd
>5422	IncDecOp	g -> demo_p ++
>5423	IncDec	++
>5424	PtrMemberAccess	g -> demo_p
>5425	Identifier	demo_p
>5426	Identifier	g
>5427	Statement	 
>5428	Statement	 
>5444	FunctionDef	G_RecordDemo (char * name)
>5445	ParameterList	char * name
>5446	Parameter	 
>5447	Identifier	name
>5448	ParameterType	char *
>5449	ReturnType	void
>5450	CompoundStatement	 
>5451	ExpressionStatement	 
>5452	AssignmentExpr	g -> demorecording = true
>5453	Identifier	true
>5454	PtrMemberAccess	g -> demorecording
>5455	Identifier	demorecording
>5456	Identifier	g
>5457	Statement	 
>5458	ExpressionStatement	 
>5459	AssignmentExpr	demoversion = VERSION
>5460	Identifier	VERSION
>5461	Identifier	demoversion
>5462	ExpressionStatement	 
>5463	AdditiveExpression	g -> demobuffer + MAXDEMOSIZE
>5464	Identifier	MAXDEMOSIZE
>5465	PtrMemberAccess	g -> demobuffer
>5466	Identifier	demobuffer
>5467	Identifier	g
>5468	Statement	 
>5469	Statement	 
>5470	Statement	 
>5471	Statement	 
>5472	Statement	 
>5473	Statement	 
>5474	ExpressionStatement	 
>5475	AssignmentExpr	g -> demobuffer = new byte [ MAXDEMOSIZE ]
>5476	Identifier	MAXDEMOSIZE
>5477	PtrMemberAccess	g -> demobuffer
>5478	Identifier	demobuffer
>5479	Identifier	g
>5480	Statement	 
>5481	ExpressionStatement	 
>5482	Statement	 
>5483	Statement	 
>5484	Statement	 
>5485	Statement	 
>5486	Statement	 
>5487	Statement	 
>5488	Statement	 
>5489	Statement	 
>5490	Statement	 
>5491	ExpressionStatement	 
>5492	Statement	 
>5493	Statement	 
>5494	Statement	 
>5495	Statement	 
>5496	Statement	 
>5497	Statement	 
>5498	Statement	 
>5499	Statement	 
>5500	Statement	 
>5513	FunctionDef	G_BeginRecording ()
>5514	ParameterList	 
>5515	ReturnType	void
>5516	CompoundStatement	 
>5517	ForStatement	for ( i = 0 ; i < MAXPLAYERS ; i ++ )
>5518	CompoundStatement	 
>5519	CompoundStatement	 
>5520	ExpressionStatement	 
>5521	AssignmentExpr	g -> demo_p = ( byte * ) dest
>5522	CastExpression	( byte * ) dest
>5523	Identifier	dest
>5524	CastTarget	byte *
>5525	PtrMemberAccess	g -> demo_p
>5526	Identifier	demo_p
>5527	Identifier	g
>5528	Statement	 
>5529	ForStatement	for ( int j = 0 ; j < NUMAMMO ; j ++ )
>5530	CompoundStatement	 
>5531	ExpressionStatement	 
>5532	ArrayIndexing	g -> players [ i ] . maxammo [ j ]
>5533	Identifier	j
>5534	MemberAccess	g -> players [ i ] . maxammo
>5535	Identifier	maxammo
>5536	ArrayIndexing	g -> players [ i ]
>5537	Identifier	i
>5538	PtrMemberAccess	g -> players
>5539	Identifier	players
>5540	Identifier	g
>5541	Statement	 
>5542	Statement	 
>5543	Statement	 
>5544	Statement	 
>5545	Statement	 
>5546	ExpressionStatement	 
>5547	ArrayIndexing	g -> players [ i ] . ammo [ j ]
>5548	Identifier	j
>5549	MemberAccess	g -> players [ i ] . ammo
>5550	Identifier	ammo
>5551	ArrayIndexing	g -> players [ i ]
>5552	Identifier	i
>5553	PtrMemberAccess	g -> players
>5554	Identifier	players
>5555	Identifier	g
>5556	Statement	 
>5557	Statement	 
>5558	Statement	 
>5559	Statement	 
>5560	Statement	 
>5561	IncDecOp	 
>5562	IncDec	++
>5563	Identifier	j
>5564	Condition	 
>5565	RelationalExpression	j < NUMAMMO
>5566	Identifier	NUMAMMO
>5567	Identifier	j
>5568	ForInit	 
>5569	IdentifierDeclStatement	int j = 0 ;
>5570	IdentifierDecl	j = 0
>5571	AssignmentExpr	j = 0
>5572	PrimaryExpression	0
>5573	Identifier	j
>5574	Identifier	j
>5575	IdentifierDeclType	int
>5576	ForStatement	for ( int j = 0 ; j < NUMWEAPONS ; j ++ )
>5577	CompoundStatement	 
>5578	ExpressionStatement	 
>5579	ArrayIndexing	g -> players [ i ] . weaponowned [ j ]
>5580	Identifier	j
>5581	MemberAccess	g -> players [ i ] . weaponowned
>5582	Identifier	weaponowned
>5583	ArrayIndexing	g -> players [ i ]
>5584	Identifier	i
>5585	PtrMemberAccess	g -> players
>5586	Identifier	players
>5587	Identifier	g
>5588	Statement	 
>5589	Statement	 
>5590	Statement	 
>5591	Statement	 
>5592	Statement	 
>5593	IncDecOp	 
>5594	IncDec	++
>5595	Identifier	j
>5596	Condition	 
>5597	RelationalExpression	j < NUMWEAPONS
>5598	Identifier	NUMWEAPONS
>5599	Identifier	j
>5600	ForInit	 
>5601	IdentifierDeclStatement	int j = 0 ;
>5602	IdentifierDecl	j = 0
>5603	AssignmentExpr	j = 0
>5604	PrimaryExpression	0
>5605	Identifier	j
>5606	Identifier	j
>5607	IdentifierDeclType	int
>5608	ExpressionStatement	 
>5609	MemberAccess	g -> players [ i ] . readyweapon
>5610	Identifier	readyweapon
>5611	ArrayIndexing	g -> players [ i ]
>5612	Identifier	i
>5613	PtrMemberAccess	g -> players
>5614	Identifier	players
>5615	Identifier	g
>5616	Statement	 
>5617	Statement	 
>5618	Statement	 
>5619	Statement	 
>5620	Statement	 
>5621	ExpressionStatement	 
>5622	MemberAccess	g -> players [ i ] . armortype
>5623	Identifier	armortype
>5624	ArrayIndexing	g -> players [ i ]
>5625	Identifier	i
>5626	PtrMemberAccess	g -> players
>5627	Identifier	players
>5628	Identifier	g
>5629	Statement	 
>5630	Statement	 
>5631	Statement	 
>5632	Statement	 
>5633	Statement	 
>5634	ExpressionStatement	 
>5635	MemberAccess	g -> players [ i ] . armorpoints
>5636	Identifier	armorpoints
>5637	ArrayIndexing	g -> players [ i ]
>5638	Identifier	i
>5639	PtrMemberAccess	g -> players
>5640	Identifier	players
>5641	Identifier	g
>5642	Statement	 
>5643	Statement	 
>5644	Statement	 
>5645	Statement	 
>5646	Statement	 
>5647	ExpressionStatement	 
>5648	MemberAccess	g -> players [ i ] . health
>5649	Identifier	health
>5650	ArrayIndexing	g -> players [ i ]
>5651	Identifier	i
>5652	PtrMemberAccess	g -> players
>5653	Identifier	players
>5654	Identifier	g
>5655	Statement	 
>5656	Statement	 
>5657	Statement	 
>5658	Statement	 
>5659	Statement	 
>5660	ExpressionStatement	 
>5661	PtrMemberAccess	g -> demo_p
>5662	Identifier	demo_p
>5663	Identifier	g
>5664	Statement	 
>5665	Statement	 
>5666	Statement	 
>5667	Statement	 
>5668	Statement	 
>5669	Statement	 
>5670	Statement	 
>5671	Statement	 
>5672	Statement	 
>5673	Statement	 
>5674	Statement	 
>5675	Statement	 
>5676	Statement	 
>5677	Statement	 
>5678	Statement	 
>5679	Statement	 
>5680	Statement	 
>5681	Statement	 
>5682	Statement	 
>5683	IncDecOp	 
>5684	IncDec	++
>5685	Identifier	i
>5686	Condition	 
>5687	RelationalExpression	i < MAXPLAYERS
>5688	Identifier	MAXPLAYERS
>5689	Identifier	i
>5690	ForInit	 
>5691	AssignmentExpr	i = 0
>5692	PrimaryExpression	0
>5693	Identifier	i
>5694	ForStatement	for ( i = 0 ; i < MAXPLAYERS ; i ++ )
>5695	CompoundStatement	 
>5696	ExpressionStatement	 
>5697	ArrayIndexing	g -> playeringame [ i ]
>5698	Identifier	i
>5699	PtrMemberAccess	g -> playeringame
>5700	Identifier	playeringame
>5701	Identifier	g
>5702	Statement	 
>5703	Statement	 
>5704	Statement	 
>5705	Statement	 
>5706	Statement	 
>5707	Statement	 
>5708	Statement	 
>5709	Statement	 
>5710	IncDecOp	 
>5711	IncDec	++
>5712	Identifier	i
>5713	Condition	 
>5714	RelationalExpression	i < MAXPLAYERS
>5715	Identifier	MAXPLAYERS
>5716	Identifier	i
>5717	ForInit	 
>5718	AssignmentExpr	i = 0
>5719	PrimaryExpression	0
>5720	Identifier	i
>5721	ExpressionStatement	 
>5722	PtrMemberAccess	g -> consoleplayer
>5723	Identifier	consoleplayer
>5724	Identifier	g
>5725	Statement	 
>5726	Statement	 
>5727	Statement	 
>5728	Statement	 
>5729	Statement	 
>5730	Statement	 
>5731	Statement	 
>5732	Statement	 
>5733	ExpressionStatement	 
>5734	PtrMemberAccess	g -> nomonsters
>5735	Identifier	nomonsters
>5736	Identifier	g
>5737	Statement	 
>5738	Statement	 
>5739	Statement	 
>5740	Statement	 
>5741	Statement	 
>5742	Statement	 
>5743	Statement	 
>5744	Statement	 
>5745	ExpressionStatement	 
>5746	PtrMemberAccess	g -> fastparm
>5747	Identifier	fastparm
>5748	Identifier	g
>5749	Statement	 
>5750	Statement	 
>5751	Statement	 
>5752	Statement	 
>5753	Statement	 
>5754	Statement	 
>5755	Statement	 
>5756	Statement	 
>5757	ExpressionStatement	 
>5758	PtrMemberAccess	g -> respawnparm
>5759	Identifier	respawnparm
>5760	Identifier	g
>5761	Statement	 
>5762	Statement	 
>5763	Statement	 
>5764	Statement	 
>5765	Statement	 
>5766	Statement	 
>5767	Statement	 
>5768	Statement	 
>5769	ExpressionStatement	 
>5770	PtrMemberAccess	g -> deathmatch
>5771	Identifier	deathmatch
>5772	Identifier	g
>5773	Statement	 
>5774	Statement	 
>5775	Statement	 
>5776	Statement	 
>5777	Statement	 
>5778	Statement	 
>5779	Statement	 
>5780	Statement	 
>5781	ExpressionStatement	 
>5782	PtrMemberAccess	g -> gamemap
>5783	Identifier	gamemap
>5784	Identifier	g
>5785	Statement	 
>5786	Statement	 
>5787	Statement	 
>5788	Statement	 
>5789	Statement	 
>5790	Statement	 
>5791	Statement	 
>5792	Statement	 
>5793	ExpressionStatement	 
>5794	PtrMemberAccess	g -> gamemission
>5795	Identifier	gamemission
>5796	Identifier	g
>5797	Statement	 
>5798	Statement	 
>5799	Statement	 
>5800	Statement	 
>5801	Statement	 
>5802	Statement	 
>5803	Statement	 
>5804	Statement	 
>5805	ExpressionStatement	 
>5806	PtrMemberAccess	g -> gameepisode
>5807	Identifier	gameepisode
>5808	Identifier	g
>5809	Statement	 
>5810	Statement	 
>5811	Statement	 
>5812	Statement	 
>5813	Statement	 
>5814	Statement	 
>5815	Statement	 
>5816	Statement	 
>5817	ExpressionStatement	 
>5818	PtrMemberAccess	g -> gameskill
>5819	Identifier	gameskill
>5820	Identifier	g
>5821	Statement	 
>5822	Statement	 
>5823	Statement	 
>5824	Statement	 
>5825	Statement	 
>5826	Statement	 
>5827	Statement	 
>5828	Statement	 
>5829	ExpressionStatement	 
>5830	AssignmentExpr	g -> demo_p ++ = VERSION + 1
>5831	AdditiveExpression	VERSION + 1
>5832	PrimaryExpression	1
>5833	Identifier	VERSION
>5834	IncDecOp	g -> demo_p ++
>5835	IncDec	++
>5836	PtrMemberAccess	g -> demo_p
>5837	Identifier	demo_p
>5838	Identifier	g
>5839	Statement	 
>5840	Statement	 
>5841	ExpressionStatement	 
>5842	AssignmentExpr	demoDebugOn = true
>5843	Identifier	true
>5844	Identifier	demoDebugOn
>5845	ExpressionStatement	 
>5846	PtrMemberAccess	g -> demobuffer
>5847	Identifier	demobuffer
>5848	Identifier	g
>5849	Statement	 
>5850	Statement	 
>5851	Statement	 
>5852	Statement	 
>5853	Statement	 
>5854	Statement	 
>5855	IdentifierDeclStatement	 
>5856	IdentifierDecl	i
>5857	Identifier	i
>5858	IdentifierDeclType	int
>5882	FunctionDef	G_DeferedPlayDemo (char * name)
>5883	ParameterList	char * name
>5884	Parameter	 
>5885	Identifier	name
>5886	ParameterType	char *
>5887	ReturnType	void
>5888	CompoundStatement	 
>5889	ExpressionStatement	 
>5890	AssignmentExpr	g -> gameaction = ga_playdemo
>5891	Identifier	ga_playdemo
>5892	PtrMemberAccess	g -> gameaction
>5893	Identifier	gameaction
>5894	Identifier	g
>5895	Statement	 
>5896	ExpressionStatement	 
>5897	AssignmentExpr	g -> defdemoname = name
>5898	Identifier	name
>5899	PtrMemberAccess	g -> defdemoname
>5900	Identifier	defdemoname
>5901	Identifier	g
>5902	Statement	 
>5912	FunctionDef	G_DoPlayDemo ()
>5913	ParameterList	 
>5914	ReturnType	void
>5915	CompoundStatement	 
>5916	ExpressionStatement	 
>5917	AssignmentExpr	g -> demoplayback = true
>5918	Identifier	true
>5919	PtrMemberAccess	g -> demoplayback
>5920	Identifier	demoplayback
>5921	Identifier	g
>5922	Statement	 
>5923	ExpressionStatement	 
>5924	AssignmentExpr	g -> usergame = false
>5925	Identifier	false
>5926	PtrMemberAccess	g -> usergame
>5927	Identifier	usergame
>5928	Identifier	g
>5929	Statement	 
>5930	IfStatement	if ( demoversion == VERSION )
>5931	CompoundStatement	 
>5932	ForStatement	for ( i = 0 ; i < MAXPLAYERS ; i ++ )
>5933	CompoundStatement	 
>5934	CompoundStatement	 
>5935	ExpressionStatement	 
>5936	Statement	 
>5937	Statement	 
>5938	Statement	 
>5939	Statement	 
>5940	Statement	 
>5941	Statement	 
>5942	Statement	 
>5943	Statement	 
>5944	Statement	 
>5945	Statement	 
>5946	Statement	 
>5947	ExpressionStatement	 
>5948	AssignmentExpr	g -> demo_p = ( byte * ) src
>5949	CastExpression	( byte * ) src
>5950	Identifier	src
>5951	CastTarget	byte *
>5952	PtrMemberAccess	g -> demo_p
>5953	Identifier	demo_p
>5954	Identifier	g
>5955	Statement	 
>5956	ForStatement	for ( int j = 0 ; j < NUMAMMO ; j ++ )
>5957	CompoundStatement	 
>5958	ExpressionStatement	 
>5959	AssignmentExpr	g -> players [ i ] . maxammo [ j ] = * src ++
>5960	UnaryOp	* src ++
>5961	IncDecOp	src ++
>5962	IncDec	++
>5963	Identifier	src
>5964	UnaryOperator	*
>5965	ArrayIndexing	g -> players [ i ] . maxammo [ j ]
>5966	Identifier	j
>5967	MemberAccess	g -> players [ i ] . maxammo
>5968	Identifier	maxammo
>5969	ArrayIndexing	g -> players [ i ]
>5970	Identifier	i
>5971	PtrMemberAccess	g -> players
>5972	Identifier	players
>5973	Identifier	g
>5974	Statement	 
>5975	ExpressionStatement	 
>5976	AssignmentExpr	g -> players [ i ] . ammo [ j ] = * src ++
>5977	UnaryOp	* src ++
>5978	IncDecOp	src ++
>5979	IncDec	++
>5980	Identifier	src
>5981	UnaryOperator	*
>5982	ArrayIndexing	g -> players [ i ] . ammo [ j ]
>5983	Identifier	j
>5984	MemberAccess	g -> players [ i ] . ammo
>5985	Identifier	ammo
>5986	ArrayIndexing	g -> players [ i ]
>5987	Identifier	i
>5988	PtrMemberAccess	g -> players
>5989	Identifier	players
>5990	Identifier	g
>5991	Statement	 
>5992	IncDecOp	 
>5993	IncDec	++
>5994	Identifier	j
>5995	Condition	 
>5996	RelationalExpression	j < NUMAMMO
>5997	Identifier	NUMAMMO
>5998	Identifier	j
>5999	ForInit	 
>6000	IdentifierDeclStatement	int j = 0 ;
>6001	IdentifierDecl	j = 0
>6002	AssignmentExpr	j = 0
>6003	PrimaryExpression	0
>6004	Identifier	j
>6005	Identifier	j
>6006	IdentifierDeclType	int
>6007	ForStatement	for ( int j = 0 ; j < NUMWEAPONS ; j ++ )
>6008	CompoundStatement	 
>6009	ExpressionStatement	 
>6010	AssignmentExpr	g -> players [ i ] . weaponowned [ j ] = * src ++
>6011	UnaryOp	* src ++
>6012	IncDecOp	src ++
>6013	IncDec	++
>6014	Identifier	src
>6015	UnaryOperator	*
>6016	ArrayIndexing	g -> players [ i ] . weaponowned [ j ]
>6017	Identifier	j
>6018	MemberAccess	g -> players [ i ] . weaponowned
>6019	Identifier	weaponowned
>6020	ArrayIndexing	g -> players [ i ]
>6021	Identifier	i
>6022	PtrMemberAccess	g -> players
>6023	Identifier	players
>6024	Identifier	g
>6025	Statement	 
>6026	IncDecOp	 
>6027	IncDec	++
>6028	Identifier	j
>6029	Condition	 
>6030	RelationalExpression	j < NUMWEAPONS
>6031	Identifier	NUMWEAPONS
>6032	Identifier	j
>6033	ForInit	 
>6034	IdentifierDeclStatement	int j = 0 ;
>6035	IdentifierDecl	j = 0
>6036	AssignmentExpr	j = 0
>6037	PrimaryExpression	0
>6038	Identifier	j
>6039	Identifier	j
>6040	IdentifierDeclType	int
>6041	ExpressionStatement	 
>6042	AssignmentExpr	g -> players [ i ] . readyweapon = ( weapontype_t ) * src ++
>6043	CastExpression	( weapontype_t ) * src ++
>6044	UnaryOp	* src ++
>6045	IncDecOp	src ++
>6046	IncDec	++
>6047	Identifier	src
>6048	UnaryOperator	*
>6049	CastTarget	weapontype_t
>6050	MemberAccess	g -> players [ i ] . readyweapon
>6051	Identifier	readyweapon
>6052	ArrayIndexing	g -> players [ i ]
>6053	Identifier	i
>6054	PtrMemberAccess	g -> players
>6055	Identifier	players
>6056	Identifier	g
>6057	Statement	 
>6058	ExpressionStatement	 
>6059	AssignmentExpr	g -> players [ i ] . armortype = * src ++
>6060	UnaryOp	* src ++
>6061	IncDecOp	src ++
>6062	IncDec	++
>6063	Identifier	src
>6064	UnaryOperator	*
>6065	MemberAccess	g -> players [ i ] . armortype
>6066	Identifier	armortype
>6067	ArrayIndexing	g -> players [ i ]
>6068	Identifier	i
>6069	PtrMemberAccess	g -> players
>6070	Identifier	players
>6071	Identifier	g
>6072	Statement	 
>6073	ExpressionStatement	 
>6074	AssignmentExpr	g -> players [ i ] . armorpoints = * src ++
>6075	UnaryOp	* src ++
>6076	IncDecOp	src ++
>6077	IncDec	++
>6078	Identifier	src
>6079	UnaryOperator	*
>6080	MemberAccess	g -> players [ i ] . armorpoints
>6081	Identifier	armorpoints
>6082	ArrayIndexing	g -> players [ i ]
>6083	Identifier	i
>6084	PtrMemberAccess	g -> players
>6085	Identifier	players
>6086	Identifier	g
>6087	Statement	 
>6088	ExpressionStatement	 
>6089	MemberAccess	g -> players [ i ] . health
>6090	Identifier	health
>6091	ArrayIndexing	g -> players [ i ]
>6092	Identifier	i
>6093	PtrMemberAccess	g -> players
>6094	Identifier	players
>6095	Identifier	g
>6096	Statement	 
>6097	Statement	 
>6098	Statement	 
>6099	Statement	 
>6100	Statement	 
>6101	Statement	 
>6102	Statement	 
>6103	Statement	 
>6104	Statement	 
>6105	Statement	 
>6106	Statement	 
>6107	Statement	 
>6108	Statement	 
>6109	ExpressionStatement	 
>6110	AssignmentExpr	g -> players [ i ] . health = * src ++
>6111	UnaryOp	* src ++
>6112	IncDecOp	src ++
>6113	IncDec	++
>6114	Identifier	src
>6115	UnaryOperator	*
>6116	MemberAccess	g -> players [ i ] . health
>6117	Identifier	health
>6118	ArrayIndexing	g -> players [ i ]
>6119	Identifier	i
>6120	PtrMemberAccess	g -> players
>6121	Identifier	players
>6122	Identifier	g
>6123	Statement	 
>6124	ExpressionStatement	 
>6125	PtrMemberAccess	g -> demo_p
>6126	Identifier	demo_p
>6127	Identifier	g
>6128	Statement	 
>6129	Statement	 
>6130	Statement	 
>6131	Statement	 
>6132	Statement	 
>6133	Statement	 
>6134	Statement	 
>6135	Statement	 
>6136	Statement	 
>6137	Statement	 
>6138	Statement	 
>6139	Statement	 
>6140	Statement	 
>6141	Statement	 
>6142	Statement	 
>6143	Statement	 
>6144	Statement	 
>6145	Statement	 
>6146	Statement	 
>6147	IncDecOp	 
>6148	IncDec	++
>6149	Identifier	i
>6150	Condition	 
>6151	RelationalExpression	i < MAXPLAYERS
>6152	Identifier	MAXPLAYERS
>6153	Identifier	i
>6154	ForInit	 
>6155	AssignmentExpr	i = 0
>6156	PrimaryExpression	0
>6157	Identifier	i
>6158	Condition	 
>6159	EqualityExpression	demoversion == VERSION
>6160	Identifier	VERSION
>6161	Identifier	demoversion
>6162	ExpressionStatement	 
>6163	AssignmentExpr	g -> precache = true
>6164	Identifier	true
>6165	PtrMemberAccess	g -> precache
>6166	Identifier	precache
>6167	Identifier	g
>6168	Statement	 
>6169	ExpressionStatement	 
>6170	CallExpression	m_inDemoMode . SetBool ( true )
>6171	ArgumentList	true
>6172	Argument	true
>6173	Identifier	true
>6174	Callee	m_inDemoMode . SetBool
>6175	MemberAccess	m_inDemoMode . SetBool
>6176	Identifier	SetBool
>6177	Identifier	m_inDemoMode
>6178	ExpressionStatement	 
>6179	Statement	 
>6180	Statement	 
>6181	Statement	 
>6182	Statement	 
>6183	Statement	 
>6184	Statement	 
>6185	Statement	 
>6186	Statement	 
>6187	Statement	 
>6188	Statement	 
>6189	Statement	 
>6190	Statement	 
>6191	Statement	 
>6192	Statement	 
>6193	ExpressionStatement	 
>6194	CallExpression	G_InitNew ( skill , episode , map )
>6195	ArgumentList	skill
>6196	Argument	map
>6197	Identifier	map
>6198	Argument	episode
>6199	Identifier	episode
>6200	Argument	skill
>6201	Identifier	skill
>6202	Callee	G_InitNew
>6203	Identifier	G_InitNew
>6204	ExpressionStatement	 
>6205	AssignmentExpr	g -> precache = false
>6206	Identifier	false
>6207	PtrMemberAccess	g -> precache
>6208	Identifier	precache
>6209	Identifier	g
>6210	Statement	 
>6211	CompoundStatement	 
>6212	ExpressionStatement	 
>6213	AssignmentExpr	g -> netdemo = true
>6214	Identifier	true
>6215	PtrMemberAccess	g -> netdemo
>6216	Identifier	netdemo
>6217	Identifier	g
>6218	Statement	 
>6219	ExpressionStatement	 
>6220	AssignmentExpr	g -> netgame = true
>6221	Identifier	true
>6222	PtrMemberAccess	g -> netgame
>6223	Identifier	netgame
>6224	Identifier	g
>6225	Statement	 
>6226	Statement	 
>6227	Statement	 
>6228	Statement	 
>6229	Statement	 
>6230	Statement	 
>6231	Statement	 
>6232	Statement	 
>6233	Statement	 
>6234	Statement	 
>6235	Statement	 
>6236	ExpressionStatement	 
>6237	AssignmentExpr	g -> netdemo = false
>6238	Identifier	false
>6239	PtrMemberAccess	g -> netdemo
>6240	Identifier	netdemo
>6241	Identifier	g
>6242	Statement	 
>6243	ExpressionStatement	 
>6244	AssignmentExpr	g -> netgame = false
>6245	Identifier	false
>6246	PtrMemberAccess	g -> netgame
>6247	Identifier	netgame
>6248	Identifier	g
>6249	Statement	 
>6250	ForStatement	for ( i = 0 ; i < MAXPLAYERS ; i ++ )
>6251	CompoundStatement	 
>6252	ExpressionStatement	 
>6253	IncDecOp	g -> demo_p ++
>6254	IncDec	++
>6255	PtrMemberAccess	g -> demo_p
>6256	Identifier	demo_p
>6257	Identifier	g
>6258	Statement	 
>6259	Statement	 
>6260	Statement	 
>6261	Statement	 
>6262	Statement	 
>6263	Statement	 
>6264	Statement	 
>6265	Statement	 
>6266	Statement	 
>6267	Statement	 
>6268	IncDecOp	 
>6269	IncDec	++
>6270	Identifier	i
>6271	Condition	 
>6272	RelationalExpression	i < MAXPLAYERS
>6273	Identifier	MAXPLAYERS
>6274	Identifier	i
>6275	ForInit	 
>6276	AssignmentExpr	i = 0
>6277	PrimaryExpression	0
>6278	Identifier	i
>6279	ExpressionStatement	 
>6280	IncDecOp	g -> demo_p ++
>6281	IncDec	++
>6282	PtrMemberAccess	g -> demo_p
>6283	Identifier	demo_p
>6284	Identifier	g
>6285	Statement	 
>6286	Statement	 
>6287	Statement	 
>6288	Statement	 
>6289	Statement	 
>6290	Statement	 
>6291	Statement	 
>6292	ExpressionStatement	 
>6293	IncDecOp	g -> demo_p ++
>6294	IncDec	++
>6295	PtrMemberAccess	g -> demo_p
>6296	Identifier	demo_p
>6297	Identifier	g
>6298	Statement	 
>6299	Statement	 
>6300	Statement	 
>6301	Statement	 
>6302	Statement	 
>6303	Statement	 
>6304	Statement	 
>6305	ExpressionStatement	 
>6306	IncDecOp	g -> demo_p ++
>6307	IncDec	++
>6308	PtrMemberAccess	g -> demo_p
>6309	Identifier	demo_p
>6310	Identifier	g
>6311	Statement	 
>6312	Statement	 
>6313	Statement	 
>6314	Statement	 
>6315	Statement	 
>6316	Statement	 
>6317	Statement	 
>6318	ExpressionStatement	 
>6319	IncDecOp	g -> demo_p ++
>6320	IncDec	++
>6321	PtrMemberAccess	g -> demo_p
>6322	Identifier	demo_p
>6323	Identifier	g
>6324	Statement	 
>6325	Statement	 
>6326	Statement	 
>6327	Statement	 
>6328	Statement	 
>6329	Statement	 
>6330	Statement	 
>6331	ExpressionStatement	 
>6332	IncDecOp	g -> demo_p ++
>6333	IncDec	++
>6334	PtrMemberAccess	g -> demo_p
>6335	Identifier	demo_p
>6336	Identifier	g
>6337	Statement	 
>6338	Statement	 
>6339	Statement	 
>6340	Statement	 
>6341	Statement	 
>6342	Statement	 
>6343	Statement	 
>6344	ExpressionStatement	 
>6345	IncDecOp	g -> demo_p ++
>6346	IncDec	++
>6347	PtrMemberAccess	g -> demo_p
>6348	Identifier	demo_p
>6349	Identifier	g
>6350	Statement	 
>6351	Statement	 
>6352	Statement	 
>6353	Statement	 
>6354	IfStatement	if ( demoversion == VERSION )
>6355	ElseStatement	else
>6356	CompoundStatement	 
>6357	ExpressionStatement	 
>6358	AssignmentExpr	mission = 0
>6359	PrimaryExpression	0
>6360	Identifier	mission
>6361	CompoundStatement	 
>6362	ExpressionStatement	 
>6363	IncDecOp	g -> demo_p ++
>6364	IncDec	++
>6365	PtrMemberAccess	g -> demo_p
>6366	Identifier	demo_p
>6367	Identifier	g
>6368	Statement	 
>6369	Statement	 
>6370	Statement	 
>6371	Statement	 
>6372	Condition	 
>6373	EqualityExpression	demoversion == VERSION
>6374	Identifier	VERSION
>6375	Identifier	demoversion
>6376	ExpressionStatement	 
>6377	IncDecOp	g -> demo_p ++
>6378	IncDec	++
>6379	PtrMemberAccess	g -> demo_p
>6380	Identifier	demo_p
>6381	Identifier	g
>6382	Statement	 
>6383	Statement	 
>6384	Statement	 
>6385	Statement	 
>6386	ExpressionStatement	 
>6387	IncDecOp	g -> demo_p ++
>6388	IncDec	++
>6389	PtrMemberAccess	g -> demo_p
>6390	Identifier	demo_p
>6391	Identifier	g
>6392	Statement	 
>6393	Statement	 
>6394	Statement	 
>6395	Statement	 
>6396	Statement	 
>6397	Statement	 
>6398	Statement	 
>6399	ExpressionStatement	 
>6400	IncDecOp	g -> demo_p ++
>6401	IncDec	++
>6402	PtrMemberAccess	g -> demo_p
>6403	Identifier	demo_p
>6404	Identifier	g
>6405	Statement	 
>6406	Statement	 
>6407	Statement	 
>6408	Statement	 
>6409	IfStatement	if ( useOriginalDemo )
>6410	CompoundStatement	 
>6411	ExpressionStatement	 
>6412	Statement	 
>6413	Statement	 
>6414	Statement	 
>6415	Statement	 
>6416	Statement	 
>6417	Statement	 
>6418	Statement	 
>6419	Statement	 
>6420	Statement	 
>6421	ExpressionStatement	 
>6422	AssignmentExpr	g -> demo_p = new byte [ demosize ]
>6423	Identifier	demosize
>6424	PtrMemberAccess	g -> demo_p
>6425	Identifier	demo_p
>6426	Identifier	g
>6427	Statement	 
>6428	Statement	 
>6429	Statement	 
>6430	Statement	 
>6431	Statement	 
>6432	Statement	 
>6433	IdentifierDeclStatement	 
>6434	IdentifierDecl	demosize = W_LumpLength ( demolump )
>6435	AssignmentExpr	demosize = W_LumpLength ( demolump )
>6436	CallExpression	W_LumpLength ( demolump )
>6437	ArgumentList	demolump
>6438	Argument	demolump
>6439	Identifier	demolump
>6440	Callee	W_LumpLength
>6441	Identifier	W_LumpLength
>6442	Identifier	demosize
>6443	Identifier	demosize
>6444	IdentifierDeclType	int
>6445	ExpressionStatement	 
>6446	Statement	 
>6447	Statement	 
>6448	Statement	 
>6449	Statement	 
>6450	Statement	 
>6451	Statement	 
>6452	Statement	 
>6453	Statement	 
>6454	Statement	 
>6455	Statement	 
>6456	Condition	 
>6457	Identifier	useOriginalDemo
>6458	IdentifierDeclStatement	 
>6459	IdentifierDecl	useOriginalDemo = true
>6460	AssignmentExpr	useOriginalDemo = true
>6461	Identifier	true
>6462	Identifier	true
>6463	Identifier	useOriginalDemo
>6464	IdentifierDeclType	bool
>6465	IfStatement	if ( gameLocal -> IsSplitscreen ( ) && DoomLib 
>6466	CompoundStatement	 
>6467	ReturnStatement	 
>6468	Condition	 
>6469	AndExpression	gameLocal -> IsSplitscreen ( ) && DoomLib 
>6470	RelationalExpression	DoomLib 
>6471	PrimaryExpression	0
>6472	CallExpression	DoomLib 
>6473	ArgumentList	 
>6474	Callee	DoomLib 
>6475	Identifier	DoomLib 
>6476	CallExpression	gameLocal -> IsSplitscreen ( )
>6477	ArgumentList	 
>6478	Callee	gameLocal -> IsSplitscreen
>6479	PtrMemberAccess	gameLocal -> IsSplitscreen
>6480	Identifier	IsSplitscreen
>6481	Identifier	gameLocal
>6482	ExpressionStatement	 
>6483	AssignmentExpr	g -> gameaction = ga_nothing
>6484	Identifier	ga_nothing
>6485	PtrMemberAccess	g -> gameaction
>6486	Identifier	gameaction
>6487	Identifier	g
>6488	Statement	 
>6489	IdentifierDeclStatement	 
>6490	IdentifierDecl	mission
>6491	Identifier	mission
>6492	IdentifierDeclType	int
>6493	IdentifierDecl	map
>6494	Identifier	map
>6495	IdentifierDeclType	int
>6496	IdentifierDecl	episode
>6497	Identifier	episode
>6498	IdentifierDeclType	int
>6499	IdentifierDecl	i
>6500	Identifier	i
>6501	IdentifierDeclType	int
>6502	IdentifierDeclStatement	 
>6503	IdentifierDecl	skill
>6504	Identifier	skill
>6505	IdentifierDeclType	skill_t
>6562	FunctionDef	G_TimeDemo (char * name)
>6563	ParameterList	char * name
>6564	Parameter	 
>6565	Identifier	name
>6566	ParameterType	char *
>6567	ReturnType	void
>6568	CompoundStatement	 
>6569	ExpressionStatement	 
>6570	AssignmentExpr	g -> gameaction = ga_playdemo
>6571	Identifier	ga_playdemo
>6572	PtrMemberAccess	g -> gameaction
>6573	Identifier	gameaction
>6574	Identifier	g
>6575	Statement	 
>6576	ExpressionStatement	 
>6577	AssignmentExpr	g -> defdemoname = name
>6578	Identifier	name
>6579	PtrMemberAccess	g -> defdemoname
>6580	Identifier	defdemoname
>6581	Identifier	g
>6582	Statement	 
>6583	ExpressionStatement	 
>6584	AssignmentExpr	g -> singletics = true
>6585	Identifier	true
>6586	PtrMemberAccess	g -> singletics
>6587	Identifier	singletics
>6588	Identifier	g
>6589	Statement	 
>6590	ExpressionStatement	 
>6591	AssignmentExpr	g -> timingdemo = true
>6592	Identifier	true
>6593	PtrMemberAccess	g -> timingdemo
>6594	Identifier	timingdemo
>6595	Identifier	g
>6596	Statement	 
>6597	ExpressionStatement	 
>6598	AssignmentExpr	g -> noblit = M_CheckParm ( \"-noblit\" )
>6599	CallExpression	M_CheckParm ( \"-noblit\" )
>6600	ArgumentList	\"-noblit\"
>6601	Argument	\"-noblit\"
>6602	PrimaryExpression	\"-noblit\"
>6603	Callee	M_CheckParm
>6604	Identifier	M_CheckParm
>6605	PtrMemberAccess	g -> noblit
>6606	Identifier	noblit
>6607	Identifier	g
>6608	Statement	 
>6609	ExpressionStatement	 
>6610	AssignmentExpr	g -> nodrawers = M_CheckParm ( \"-nodraw\" )
>6611	CallExpression	M_CheckParm ( \"-nodraw\" )
>6612	ArgumentList	\"-nodraw\"
>6613	Argument	\"-nodraw\"
>6614	PrimaryExpression	\"-nodraw\"
>6615	Callee	M_CheckParm
>6616	Identifier	M_CheckParm
>6617	PtrMemberAccess	g -> nodrawers
>6618	Identifier	nodrawers
>6619	Identifier	g
>6620	Statement	 
>6636	FunctionDef	G_CheckDemoStatus ()
>6637	ParameterList	 
>6638	ReturnType	qboolean
>6639	CompoundStatement	 
>6640	ReturnStatement	 
>6641	Identifier	false
>6642	CompoundStatement	 
>6643	ReturnStatement	 
>6644	Identifier	true
>6645	ExpressionStatement	 
>6646	CallExpression	D_AdvanceDemo ( )
>6647	ArgumentList	 
>6648	Callee	D_AdvanceDemo
>6649	Identifier	D_AdvanceDemo
>6650	ExpressionStatement	 
>6651	AssignmentExpr	g -> consoleplayer = 0
>6652	PrimaryExpression	0
>6653	PtrMemberAccess	g -> consoleplayer
>6654	Identifier	consoleplayer
>6655	Identifier	g
>6656	Statement	 
>6657	ExpressionStatement	 
>6658	AssignmentExpr	g -> nomonsters = false
>6659	Identifier	false
>6660	PtrMemberAccess	g -> nomonsters
>6661	Identifier	nomonsters
>6662	Identifier	g
>6663	Statement	 
>6664	ExpressionStatement	 
>6665	AssignmentExpr	g -> fastparm = false
>6666	Identifier	false
>6667	PtrMemberAccess	g -> fastparm
>6668	Identifier	fastparm
>6669	Identifier	g
>6670	Statement	 
>6671	ExpressionStatement	 
>6672	AssignmentExpr	g -> respawnparm = false
>6673	Identifier	false
>6674	PtrMemberAccess	g -> respawnparm
>6675	Identifier	respawnparm
>6676	Identifier	g
>6677	Statement	 
>6678	ExpressionStatement	 
>6679	AssignmentExpr	g -> playeringame [ 3 ] = 0
>6680	PrimaryExpression	0
>6681	ArrayIndexing	g -> playeringame [ 3 ]
>6682	PrimaryExpression	3
>6683	PtrMemberAccess	g -> playeringame
>6684	Identifier	playeringame
>6685	Identifier	g
>6686	Statement	 
>6687	Statement	 
>6688	Statement	 
>6689	Statement	 
>6690	Statement	 
>6691	Statement	 
>6692	Statement	 
>6693	Statement	 
>6694	Statement	 
>6695	Statement	 
>6696	Statement	 
>6697	Statement	 
>6698	Statement	 
>6699	Statement	 
>6700	Statement	 
>6701	Statement	 
>6702	Statement	 
>6703	ExpressionStatement	 
>6704	AssignmentExpr	g -> deathmatch = false
>6705	Identifier	false
>6706	PtrMemberAccess	g -> deathmatch
>6707	Identifier	deathmatch
>6708	Identifier	g
>6709	Statement	 
>6710	ExpressionStatement	 
>6711	AssignmentExpr	g -> netgame = false
>6712	Identifier	false
>6713	PtrMemberAccess	g -> netgame
>6714	Identifier	netgame
>6715	Identifier	g
>6716	Statement	 
>6717	ExpressionStatement	 
>6718	AssignmentExpr	g -> netdemo = false
>6719	Identifier	false
>6720	PtrMemberAccess	g -> netdemo
>6721	Identifier	netdemo
>6722	Identifier	g
>6723	Statement	 
>6724	ExpressionStatement	 
>6725	AssignmentExpr	g -> demoplayback = false
>6726	Identifier	false
>6727	PtrMemberAccess	g -> demoplayback
>6728	Identifier	demoplayback
>6729	Identifier	g
>6730	Statement	 
>6731	ExpressionStatement	 
>6732	AssignmentExpr	g -> demoend = NULL
>6733	Identifier	NULL
>6734	PtrMemberAccess	g -> demoend
>6735	Identifier	demoend
>6736	Identifier	g
>6737	Statement	 
>6738	ExpressionStatement	 
>6739	AssignmentExpr	g -> demo_p = NULL
>6740	Identifier	NULL
>6741	PtrMemberAccess	g -> demo_p
>6742	Identifier	demo_p
>6743	Identifier	g
>6744	Statement	 
>6745	ExpressionStatement	 
>6746	AssignmentExpr	g -> demobuffer = NULL
>6747	Identifier	NULL
>6748	PtrMemberAccess	g -> demobuffer
>6749	Identifier	demobuffer
>6750	Identifier	g
>6751	Statement	 
>6752	ExpressionStatement	 
>6753	PtrMemberAccess	g -> demobuffer
>6754	Identifier	demobuffer
>6755	Identifier	g
>6756	Statement	 
>6757	Statement	 
>6758	Statement	 
>6759	Statement	 
>6760	Statement	 
>6761	Statement	 
>6762	Statement	 
>6763	Statement	 
>6764	Statement	 
<43=49,48,44
<44=45
<45=47,46
<49=87,80,52,50
<50=51
<52=76,64,61,53
<53=54
<54=60,55
<55=57,56
<57=59,58
<61=63,62
<64=65
<65=75,66
<66=68,67
<68=70,69
<70=74,71
<71=73,72
<76=77
<77=79,78
<80=81
<81=86,85,82
<82=84,83
<87=88
<88=90,89
<99=108,107,100
<100=104,101
<101=103,102
<104=106,105
<108=219,201,185,169,139,109
<109=133,121,110
<110=111
<111=112
<112=118,113
<113=117,114
<114=116,115
<118=120,119
<121=122
<122=130,123
<123=129,124
<124=128,125
<125=127,126
<130=132,131
<133=134
<134=136,135
<136=138,137
<139=163,151,140
<140=141
<141=142
<142=148,143
<143=147,144
<144=146,145
<148=150,149
<151=152
<152=160,153
<153=159,154
<154=158,155
<155=157,156
<160=162,161
<163=164
<164=166,165
<166=168,167
<169=170
<170=184,171
<171=181,172
<172=180,173
<173=177,174
<174=176,175
<177=179,178
<181=183,182
<185=186
<186=200,187
<187=197,188
<188=196,189
<189=193,190
<190=192,191
<193=195,194
<197=199,198
<201=202
<202=218,217,203
<203=216,204
<204=215,205
<205=213,206
<206=207
<207=208
<208=212,209
<209=211,210
<213=214
<219=220
<220=236,235,221
<221=234,222
<222=233,223
<223=231,224
<224=225
<225=226
<226=230,227
<227=229,228
<231=232
<249=255,254,250
<250=251
<251=253,252
<255=334,312,305,270,258,256
<256=257
<258=264,259
<259=260
<260=261
<261=263,262
<264=265
<265=267,266
<267=269,268
<270=303,271
<271=302,301,300,299,298,297,296,295,294,287,272
<272=278,273
<273=274
<274=275
<275=277,276
<278=279
<279=286,280
<280=282,281
<282=283
<283=285,284
<287=288
<288=290,289
<290=291
<291=293,292
<303=304
<305=306
<306=311,310,307
<307=309,308
<312=313
<313=333,332,314
<314=331,315
<315=322,316
<316=317
<317=318
<318=320,319
<320=321
<322=323
<323=325,324
<325=327,326
<327=328
<328=330,329
<334=338,335
<335=336
<336=337
<338=339
<339=341,340
<341=343,342
<343=344
<363=372,371,364
<364=368,365
<365=367,366
<368=370,369
<372=373
<373=406,393,374
<374=375
<375=389,376
<376=383,377
<377=378
<378=380,379
<380=382,381
<383=384
<384=386,385
<386=388,387
<389=390
<390=392,391
<393=400,394
<394=395
<395=397,396
<397=399,398
<400=401
<401=403,402
<403=405,404
<406=407
<407=409,408
<421=427,426,422
<422=423
<423=425,424
<427=449,448,447,446,445,444,443,442,441,440,439,438,437,436,435,430,428
<428=429
<430=431
<431=433,432
<433=434
<449=450
<450=457,456,451
<451=455,452
<452=454,453
<464=476,475,465
<465=472,469,466
<466=468,467
<469=471,470
<472=474,473
<476=1284,1280,1276,1272,1268,1264,1257,1242,1241,1240,1239,1238,1237,1236,1235,1234,1233,1232,1231,1230,1229,1228,1227,1226,1225,1224,1223,1222,1221,1220,1219,641,619,543,477,481,482,483,484,485,486,487,488,489,490,496,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537
<477=478
<478=480,479
<490=491
<491=493,492
<493=495,494
<496=497
<497=499,498
<537=538
<538=542,539
<539=541,540
<543=617,560,544
<544=545
<545=559,558,557,556,555,554,553,552,551,550,549,548,547,546
<560=616,615,614,613,612,611,610,609,608,601,561
<561=592,577,562
<562=563
<563=576,575,574,573,572,571,570,569,568,567,566,565,564
<577=591,590,589,588,587,586,585,584,583,582,581,580,579,578
<592=593
<593=600,594
<594=596,595
<596=597
<597=599,598
<601=602
<602=604,603
<604=605
<605=607,606
<617=618
<619=620
<620=640,639,621
<621=638,622
<622=629,623
<623=624
<624=625
<625=627,626
<627=628
<629=630
<630=632,631
<632=634,633
<634=635
<635=637,636
<641=1215,644,642
<642=643
<644=1205,1198,1184,1183,1182,1181,1180,1164,1157,1147,1129,1125,1121,1107,1085,1073,1062,1040,1029,1007,1003,977,951,945,938,926,913,899,876,875,868,849,843,798,778,756,734,712,690,668,646,645
<646=662,647
<647=656,648
<648=649
<649=653,650
<650=652,651
<653=655,654
<656=657
<657=659,658
<659=661,660
<662=663
<663=665,664
<665=667,666
<668=684,669
<669=678,670
<670=671
<671=675,672
<672=674,673
<675=677,676
<678=679
<679=681,680
<681=683,682
<684=685
<685=687,686
<687=689,688
<690=706,691
<691=700,692
<692=693
<693=697,694
<694=696,695
<697=699,698
<700=701
<701=703,702
<703=705,704
<706=707
<707=709,708
<709=711,710
<712=728,713
<713=722,714
<714=715
<715=719,716
<716=718,717
<719=721,720
<722=723
<723=725,724
<725=727,726
<728=729
<729=731,730
<731=733,732
<734=750,735
<735=744,736
<736=737
<737=741,738
<738=740,739
<741=743,742
<744=745
<745=747,746
<747=749,748
<750=751
<751=753,752
<753=755,754
<756=772,757
<757=766,758
<758=759
<759=763,760
<760=762,761
<763=765,764
<766=767
<767=769,768
<769=771,770
<772=773
<773=775,774
<775=777,776
<778=786,779
<779=780
<780=781
<781=783,782
<783=785,784
<786=787
<787=793,788
<788=790,789
<790=792,791
<793=795,794
<795=797,796
<798=839,833,830,799
<799=800
<800=819,801
<801=813,803,802
<803=804
<804=810,805
<805=807,806
<807=809,808
<810=812,811
<813=814
<814=816,815
<816=818,817
<819=820
<820=826,821
<821=822
<822=823
<823=825,824
<826=827
<827=829,828
<830=832,831
<833=834
<834=838,835
<835=837,836
<839=840
<840=842,841
<843=844
<844=848,845
<845=847,846
<849=862,850
<850=851
<851=852
<852=860,853
<853=856,854
<854=855
<856=857
<857=859,858
<860=861
<862=863
<863=867,864
<864=866,865
<868=869
<869=874,873,870
<870=872,871
<876=893,877
<877=892,891,890,889,888,887,886,885,878
<878=879
<879=880
<880=882,881
<882=884,883
<893=894
<894=896,895
<896=898,897
<899=907,900
<900=901
<901=902
<902=904,903
<904=906,905
<907=908
<908=910,909
<910=912,911
<913=914
<914=923,915
<915=921,916
<916=917
<917=918
<918=920,919
<921=922
<923=925,924
<926=934,927
<927=928
<928=929
<929=931,930
<931=933,932
<934=935
<935=937,936
<938=939
<939=941,940
<941=942
<942=944,943
<945=946
<946=948,947
<948=950,949
<951=952
<952=974,953
<953=964,954
<954=962,955
<955=956
<956=957
<957=959,958
<959=961,960
<962=963
<964=972,965
<965=966
<966=967
<967=969,968
<969=971,970
<972=973
<974=976,975
<977=978
<978=1000,979
<979=990,980
<980=988,981
<981=982
<982=983
<983=985,984
<985=987,986
<988=989
<990=998,991
<991=992
<992=993
<993=995,994
<995=997,996
<998=999
<1000=1002,1001
<1003=1004
<1004=1006,1005
<1007=1027,1018,1008
<1008=1009
<1009=1010
<1010=1011
<1011=1015,1012
<1012=1014,1013
<1015=1017,1016
<1018=1019
<1019=1020
<1020=1024,1021
<1021=1023,1022
<1024=1026,1025
<1027=1028
<1029=1030
<1030=1039,1038,1031
<1031=1037,1032
<1032=1034,1033
<1034=1036,1035
<1040=1060,1051,1041
<1041=1042
<1042=1043
<1043=1044
<1044=1048,1045
<1045=1047,1046
<1048=1050,1049
<1051=1052
<1052=1053
<1053=1057,1054
<1054=1056,1055
<1057=1059,1058
<1060=1061
<1062=1063
<1063=1072,1071,1064
<1064=1070,1065
<1065=1067,1066
<1067=1069,1068
<1073=1074
<1074=1084,1083,1075
<1075=1082,1076
<1076=1080,1077
<1077=1078
<1078=1079
<1080=1081
<1085=1103,1086
<1086=1095,1087
<1087=1088
<1088=1094,1089
<1089=1093,1090
<1090=1092,1091
<1095=1096
<1096=1102,1097
<1097=1101,1098
<1098=1100,1099
<1103=1104
<1104=1106,1105
<1107=1117,1108
<1108=1109
<1109=1110
<1110=1116,1111
<1111=1115,1112
<1112=1114,1113
<1117=1118
<1118=1120,1119
<1121=1122
<1122=1124,1123
<1125=1126
<1126=1128,1127
<1129=1130
<1130=1146,1145,1131
<1131=1144,1132
<1132=1140,1133
<1133=1138,1136,1134
<1134=1135
<1136=1137
<1138=1139
<1140=1141
<1141=1143,1142
<1147=1148
<1148=1156,1155,1154,1149
<1149=1153,1150
<1150=1152,1151
<1157=1160,1158
<1158=1159
<1160=1161
<1161=1163,1162
<1164=1165
<1165=1179,1166
<1166=1170,1167
<1167=1168
<1168=1169
<1170=1171
<1171=1173,1172
<1173=1175,1174
<1175=1176
<1176=1178,1177
<1184=1185
<1185=1197,1196,1186
<1186=1195,1187
<1187=1191,1188
<1188=1189
<1189=1190
<1191=1192
<1192=1194,1193
<1198=1201,1199
<1199=1200
<1201=1202
<1202=1204,1203
<1205=1206
<1206=1214,1213,1207
<1207=1212,1208
<1208=1210,1209
<1210=1211
<1215=1216
<1216=1218,1217
<1242=1243
<1243=1255,1244
<1244=1253,1251,1245
<1245=1246
<1246=1250,1247
<1247=1249,1248
<1251=1252
<1253=1254
<1255=1256
<1257=1258
<1258=1263,1259
<1259=1261,1260
<1261=1262
<1264=1265
<1265=1267,1266
<1268=1269
<1269=1271,1270
<1272=1273
<1273=1275,1274
<1276=1277
<1277=1279,1278
<1280=1281
<1281=1283,1282
<1284=1285
<1285=1287,1286
<1377=1380,1379,1378
<1380=1407,1402,1401,1390,1389,1388,1387,1386,1385,1384,1383,1382,1381
<1390=1391
<1391=1398,1392
<1392=1396,1393
<1393=1394
<1394=1395
<1396=1397
<1398=1400,1399
<1402=1403
<1403=1405,1404
<1405=1406
<1407=1408
<1408=1410,1409
<1420=1426,1425,1421
<1421=1422
<1422=1424,1423
<1426=1915,1914,1913,1912,1911,1910,1909,1908,1907,1906,1905,1904,1903,1902,1901,1900,1899,1898,1897,1896,1895,1894,1893,1892,1891,1890,1889,1888,1887,1886,1885,1884,1883,1882,1829,1828,1827,1826,1825,1824,1823,1822,1821,1820,1819,1818,1817,1816,1815,1814,1813,1812,1811,1810,1427,1429,1656,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809
<1427=1428
<1429=1652,1430
<1430=1650,1633,1625,1615,1613,1611,1603,1593,1591,1589,1588,1576,1575,1563,1562,1550,1549,1548,1547,1546,1545,1431,1432,1434,1436,1444,1445,1453,1454,1466,1467,1479,1480,1492,1493,1505,1506,1508,1510,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544
<1432=1433
<1434=1435
<1436=1437
<1437=1441,1438
<1438=1440,1439
<1441=1443,1442
<1445=1446
<1446=1450,1447
<1447=1449,1448
<1450=1452,1451
<1454=1455
<1455=1461,1456
<1456=1458,1457
<1458=1460,1459
<1461=1463,1462
<1463=1465,1464
<1467=1468
<1468=1474,1469
<1469=1471,1470
<1471=1473,1472
<1474=1476,1475
<1476=1478,1477
<1480=1481
<1481=1487,1482
<1482=1484,1483
<1484=1486,1485
<1487=1489,1488
<1489=1491,1490
<1493=1494
<1494=1500,1495
<1495=1497,1496
<1497=1499,1498
<1500=1502,1501
<1502=1504,1503
<1506=1507
<1508=1509
<1510=1511
<1530=1531
<1550=1551
<1551=1557,1552
<1552=1554,1553
<1554=1556,1555
<1557=1559,1558
<1559=1561,1560
<1563=1564
<1564=1570,1565
<1565=1567,1566
<1567=1569,1568
<1570=1572,1571
<1572=1574,1573
<1576=1577
<1577=1583,1578
<1578=1580,1579
<1580=1582,1581
<1583=1585,1584
<1585=1587,1586
<1589=1590
<1591=1592
<1593=1594
<1594=1596,1595
<1596=1600,1597
<1597=1599,1598
<1600=1602,1601
<1603=1605,1604
<1605=1606
<1606=1608,1607
<1608=1610,1609
<1611=1612
<1613=1614
<1615=1616
<1616=1618,1617
<1618=1622,1619
<1619=1621,1620
<1622=1624,1623
<1625=1627,1626
<1627=1628
<1628=1630,1629
<1630=1632,1631
<1633=1644,1634
<1634=1643,1637,1635
<1635=1636
<1637=1638
<1638=1640,1639
<1640=1642,1641
<1644=1645
<1645=1647,1646
<1647=1649,1648
<1650=1651
<1652=1653
<1653=1655,1654
<1656=1657
<1657=1660,1658
<1658=1659
<1660=1661
<1661=1665,1662
<1662=1663
<1663=1664
<1665=1666
<1676=1735,1734,1733,1732,1731,1730,1729,1728,1727,1726,1725,1724,1723,1722,1721,1720,1719,1718,1717,1707,1697,1687,1677
<1677=1680,1678
<1678=1679
<1680=1681
<1681=1685,1682
<1682=1683
<1683=1684
<1685=1686
<1687=1690,1688
<1688=1689
<1690=1691
<1691=1695,1692
<1692=1693
<1693=1694
<1695=1696
<1697=1700,1698
<1698=1699
<1700=1701
<1701=1705,1702
<1702=1703
<1703=1704
<1705=1706
<1707=1710,1708
<1708=1709
<1710=1711
<1711=1715,1712
<1712=1713
<1713=1714
<1715=1716
<1762=1765,1763
<1763=1764
<1765=1774,1766
<1766=1769,1767
<1767=1768
<1769=1770
<1770=1772,1771
<1772=1773
<1774=1775
<1775=1795,1776
<1776=1786,1777
<1777=1781,1778
<1778=1780,1779
<1781=1783,1782
<1783=1785,1784
<1786=1790,1787
<1787=1789,1788
<1790=1792,1791
<1792=1794,1793
<1795=1797,1796
<1797=1799,1798
<1829=1857,1856,1855,1854,1853,1852,1851,1850,1849,1848,1847,1846,1845,1844,1843,1842,1841,1840,1839,1838,1837,1836,1835,1834,1833,1832,1830
<1830=1831
<1857=1858
<1858=1881,1875,1874,1873,1872,1871,1870,1869,1868,1867,1866,1865,1859
<1859=1860
<1860=1862,1861
<1862=1864,1863
<1875=1876
<1876=1878,1877
<1878=1880,1879
<1951=1954,1953,1952
<1954=2120,1955,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2112,2116
<1955=1956
<1971=2061,2060,2059,2058,2057,2056,2055,1972
<1972=2053,2048,2047,2045,2040,2039,2037,2032,2031,2029,2024,2023,2021,2016,2015,2013,2008,2007,2005,2000,1999,1997,1992,1991,1989,1984,1983,1977,1976,1974,1973
<1974=1975
<1977=1978
<1978=1980,1979
<1980=1982,1981
<1984=1985
<1985=1987,1986
<1987=1988
<1989=1990
<1992=1993
<1993=1995,1994
<1995=1996
<1997=1998
<2000=2001
<2001=2003,2002
<2003=2004
<2005=2006
<2008=2009
<2009=2011,2010
<2011=2012
<2013=2014
<2016=2017
<2017=2019,2018
<2019=2020
<2021=2022
<2024=2025
<2025=2027,2026
<2027=2028
<2029=2030
<2032=2033
<2033=2035,2034
<2035=2036
<2037=2038
<2040=2041
<2041=2043,2042
<2043=2044
<2045=2046
<2048=2049
<2049=2051,2050
<2051=2052
<2053=2054
<2071=2072
<2072=2076,2073
<2073=2074
<2074=2075
<2076=2077
<2099=2108,2104,2101,2100
<2101=2103,2102
<2104=2105
<2105=2107,2106
<2108=2109
<2109=2111,2110
<2112=2113
<2113=2115,2114
<2116=2117
<2117=2119,2118
<2120=2121
<2121=2123,2122
<2136=2142,2141,2137
<2137=2138
<2138=2140,2139
<2142=2160,2159,2158,2157,2156,2150,2143
<2143=2144
<2144=2148,2145
<2145=2146
<2146=2147
<2148=2149
<2150=2151
<2151=2153,2152
<2153=2155,2154
<2160=2161
<2161=2163,2162
<2172=2178,2177,2173
<2173=2174
<2174=2176,2175
<2178=2255,2254,2253,2252,2251,2245,2228,2211,2203,2197,2191,2185,2179
<2179=2180
<2180=2182,2181
<2182=2184,2183
<2185=2186
<2186=2188,2187
<2188=2190,2189
<2191=2192
<2192=2194,2193
<2194=2196,2195
<2197=2198
<2198=2200,2199
<2200=2202,2201
<2203=2204
<2204=2206,2205
<2206=2208,2207
<2208=2210,2209
<2211=2212
<2212=2226,2213
<2213=2222,2220,2214
<2214=2215
<2215=2219,2216
<2216=2218,2217
<2220=2221
<2222=2223
<2223=2225,2224
<2226=2227
<2228=2229
<2229=2243,2230
<2230=2239,2237,2231
<2231=2232
<2232=2236,2233
<2233=2235,2234
<2237=2238
<2239=2240
<2240=2242,2241
<2243=2244
<2245=2246
<2246=2248,2247
<2248=2250,2249
<2255=2256
<2256=2258,2257
<2279=2285,2284,2280
<2280=2281
<2281=2283,2282
<2285=2651,2647,2642,2638,2634,2630,2625,2618,2617,2616,2615,2603,2602,2601,2600,2599,2598,2597,2596,2595,2594,2593,2592,2591,2590,2589,2588,2587,2586,2585,2584,2583,2582,2581,2580,2579,2578,2577,2576,2575,2574,2573,2572,2571,2570,2569,2568,2567,2566,2565,2564,2563,2562,2561,2560,2552,2551,2550,2549,2541,2540,2539,2538,2530,2529,2528,2527,2526,2520,2505,2504,2503,2502,2501,2500,2499,2498,2497,2496,2495,2494,2493,2492,2491,2490,2489,2488,2487,2486,2485,2286,2308,2316,2324,2332,2340,2350,2356,2362,2372,2382,2383,2393,2394,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2479,2480,2481,2482,2483,2484
<2286=2304,2300,2297,2287
<2287=2288
<2288=2292,2289
<2289=2291,2290
<2292=2294,2293
<2294=2296,2295
<2297=2299,2298
<2300=2301
<2301=2303,2302
<2304=2305
<2305=2307,2306
<2308=2309
<2309=2313,2310
<2310=2312,2311
<2313=2315,2314
<2316=2317
<2317=2319,2318
<2319=2321,2320
<2321=2323,2322
<2324=2325
<2325=2327,2326
<2327=2329,2328
<2329=2331,2330
<2332=2333
<2333=2335,2334
<2335=2337,2336
<2337=2339,2338
<2340=2341
<2341=2347,2342
<2342=2344,2343
<2344=2346,2345
<2347=2349,2348
<2350=2351
<2351=2353,2352
<2353=2355,2354
<2356=2357
<2357=2359,2358
<2359=2361,2360
<2362=2363
<2363=2369,2364
<2364=2366,2365
<2366=2368,2367
<2369=2371,2370
<2372=2373
<2373=2375,2374
<2375=2377,2376
<2377=2379,2378
<2379=2381,2380
<2383=2384
<2384=2386,2385
<2386=2388,2387
<2388=2390,2389
<2390=2392,2391
<2394=2395
<2395=2397,2396
<2397=2399,2398
<2399=2401,2400
<2401=2403,2402
<2433=2462,2461,2460,2459,2458,2457,2456,2455,2454,2453,2452,2451,2450,2449,2448,2447,2446,2445,2444,2443,2442,2441,2440,2439,2438,2437,2436,2435,2434
<2462=2477,2463
<2463=2476,2464
<2464=2465
<2465=2467,2466
<2467=2469,2468
<2469=2471,2470
<2471=2473,2472
<2473=2475,2474
<2477=2478
<2505=2506
<2506=2518,2507
<2507=2516,2514,2508
<2508=2509
<2509=2513,2510
<2510=2512,2511
<2514=2515
<2516=2517
<2518=2519
<2520=2521
<2521=2523,2522
<2523=2525,2524
<2530=2531
<2531=2533,2532
<2533=2535,2534
<2535=2537,2536
<2541=2542
<2542=2544,2543
<2544=2546,2545
<2546=2548,2547
<2552=2553
<2553=2555,2554
<2555=2557,2556
<2557=2559,2558
<2603=2604
<2604=2606,2605
<2606=2608,2607
<2608=2610,2609
<2610=2612,2611
<2612=2614,2613
<2618=2619
<2619=2624,2623,2620
<2620=2622,2621
<2625=2626
<2626=2629,2628,2627
<2630=2631
<2631=2633,2632
<2634=2635
<2635=2637,2636
<2638=2639
<2639=2641,2640
<2642=2643
<2643=2646,2645,2644
<2647=2648
<2648=2650,2649
<2651=2652
<2652=2654,2653
<2717=2726,2725,2718
<2718=2722,2719
<2719=2721,2720
<2722=2724,2723
<2726=3007,3003,2999,2995,2991,2987,2986,2985,2984,2983,2982,2981,2980,2979,2978,2977,2976,2975,2974,2919,2911,2903,2902,2901,2900,2899,2898,2897,2896,2895,2894,2893,2892,2891,2890,2889,2888,2887,2886,2885,2884,2883,2881,2880,2879,2878,2877,2876,2875,2874,2873,2872,2871,2870,2869,2868,2867,2866,2865,2864,2863,2862,2861,2860,2859,2858,2857,2856,2855,2854,2853,2852,2851,2850,2849,2848,2847,2846,2845,2844,2843,2842,2834,2727,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2804,2816,2827,2833
<2727=2728
<2773=2774
<2774=2803,2775
<2775=2801,2776
<2776=2793,2785,2779,2777
<2777=2778
<2779=2780
<2780=2782,2781
<2782=2784,2783
<2785=2786
<2786=2792,2787
<2787=2791,2788
<2788=2790,2789
<2793=2794
<2794=2800,2795
<2795=2799,2796
<2796=2798,2797
<2801=2802
<2804=2805
<2805=2815,2806
<2806=2808,2807
<2808=2814,2809
<2809=2811,2810
<2811=2813,2812
<2816=2817
<2817=2826,2818
<2818=2824,2819
<2819=2822,2820
<2820=2821
<2822=2823
<2824=2825
<2827=2828
<2828=2830,2829
<2830=2832,2831
<2834=2835
<2835=2837,2836
<2837=2839,2838
<2839=2841,2840
<2881=2882
<2903=2904
<2904=2910,2905
<2905=2907,2906
<2907=2909,2908
<2911=2912
<2912=2918,2913
<2913=2915,2914
<2915=2917,2916
<2919=2961,2960,2959,2958,2957,2956,2955,2954,2953,2952,2951,2950,2949,2948,2947,2946,2945,2944,2943,2942,2941,2940,2939,2938,2937,2936,2935,2934,2933,2932,2931,2930,2929,2928,2927,2926,2925,2924,2922,2920
<2920=2921
<2922=2923
<2961=2970,2966,2963,2962
<2963=2965,2964
<2966=2967
<2967=2969,2968
<2970=2971
<2971=2973,2972
<2987=2988
<2988=2990,2989
<2991=2992
<2992=2994,2993
<2995=2996
<2996=2998,2997
<2999=3000
<3000=3002,3001
<3003=3004
<3004=3006,3005
<3007=3008
<3008=3010,3009
<3051=3057,3056,3052
<3052=3053
<3053=3055,3054
<3057=3165,3161,3160,3159,3158,3157,3156,3155,3154,3153,3149,3135,3070,3069,3068,3067,3066,3065,3064,3063,3062,3061,3060,3059,3058
<3070=3131,3127,3124,3071
<3071=3115,3114,3113,3112,3111,3110,3109,3108,3107,3106,3105,3104,3103,3102,3101,3100,3099,3072
<3072=3098,3086,3085,3084,3083,3082,3081,3080,3079,3078,3077,3076,3075,3074,3073
<3086=3087
<3087=3091,3088
<3088=3090,3089
<3091=3093,3092
<3093=3095,3094
<3095=3097,3096
<3115=3116
<3116=3123,3117
<3117=3119,3118
<3119=3121,3120
<3121=3122
<3124=3126,3125
<3127=3128
<3128=3130,3129
<3131=3132
<3132=3134,3133
<3135=3145,3136
<3136=3137
<3137=3143,3138
<3138=3141,3139
<3139=3140
<3141=3142
<3143=3144
<3145=3146
<3146=3148,3147
<3149=3150
<3150=3152,3151
<3161=3162
<3162=3164,3163
<3165=3169,3166
<3166=3168,3167
<3169=3171,3170
<3187=3193,3192,3188
<3188=3189
<3189=3191,3190
<3193=3210,3209,3208,3207,3206,3205,3204,3203,3202,3194
<3194=3201,3195
<3195=3196
<3196=3198,3197
<3198=3200,3199
<3210=3211
<3211=3213,3212
<3223=3226,3225,3224
<3226=3233,3227
<3227=3228
<3228=3230,3229
<3230=3232,3231
<3243=3246,3245,3244
<3246=3260,3254,3253,3247
<3247=3248
<3248=3250,3249
<3250=3252,3251
<3254=3255
<3255=3257,3256
<3257=3259,3258
<3270=3273,3272,3271
<3273=3300,3299,3298,3297,3296,3295,3294,3293,3292,3291,3290,3289,3288,3287,3286,3285,3284,3283,3282,3281,3280,3274
<3274=3275
<3275=3277,3276
<3277=3279,3278
<3308=3311,3310,3309
<3311=3505,3504,3498,3467,3466,3465,3464,3463,3462,3461,3460,3454,3453,3452,3451,3450,3449,3448,3447,3440,3439,3438,3437,3436,3435,3434,3433,3427,3426,3425,3424,3423,3422,3421,3420,3419,3418,3417,3416,3415,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3327,3328,3329,3330,3331,3332,3333,3334,3335,3341,3342,3343,3344,3345,3346,3347,3348,3349,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3412,3413,3414
<3321=3322
<3322=3324,3323
<3324=3326,3325
<3335=3336
<3336=3338,3337
<3338=3340,3339
<3349=3350
<3369=3411,3410,3409,3408,3407,3406,3405,3370
<3370=3404,3403,3397,3396,3395,3382,3372,3371
<3372=3373
<3373=3375,3374
<3375=3377,3376
<3377=3379,3378
<3379=3381,3380
<3382=3391,3387,3384,3383
<3384=3386,3385
<3387=3388
<3388=3390,3389
<3391=3392
<3392=3394,3393
<3397=3398
<3398=3400,3399
<3400=3402,3401
<3427=3428
<3428=3429
<3429=3431,3430
<3431=3432
<3440=3442,3441
<3442=3443
<3443=3445,3444
<3445=3446
<3454=3455
<3455=3456
<3456=3458,3457
<3458=3459
<3467=3494,3490,3487,3468
<3468=3486,3485,3484,3483,3482,3481,3480,3479,3478,3477,3469
<3469=3470
<3470=3471
<3471=3475,3472
<3472=3473
<3473=3474
<3475=3476
<3487=3489,3488
<3490=3491
<3491=3493,3492
<3494=3495
<3495=3497,3496
<3498=3499
<3499=3501,3500
<3501=3503,3502
<3505=3506
<3506=3508,3507
<3526=3529,3528,3527
<3529=3567,3561,3560,3559,3558,3557,3556,3555,3554,3553,3552,3551,3550,3549,3548,3547,3546,3545,3544,3543,3539,3538,3537,3536,3535,3534,3533,3532,3531,3530
<3539=3540
<3540=3542,3541
<3561=3562
<3562=3564,3563
<3564=3566,3565
<3577=3580,3579,3578
<3580=3674,3668,3667,3666,3665,3664,3663,3662,3654,3649,3600,3595,3594,3588,3587,3581
<3581=3582
<3582=3584,3583
<3584=3586,3585
<3588=3589
<3589=3591,3590
<3591=3593,3592
<3595=3596
<3596=3598,3597
<3598=3599
<3600=3641,3637,3634,3601
<3601=3633,3632,3631,3630,3629,3628,3627,3626,3625,3624,3602
<3602=3623,3622,3621,3620,3619,3618,3617,3616,3615,3614,3613,3603
<3603=3604
<3604=3606,3605
<3606=3608,3607
<3608=3610,3609
<3610=3612,3611
<3634=3636,3635
<3637=3638
<3638=3640,3639
<3641=3642
<3642=3643
<3643=3648,3647,3644
<3644=3646,3645
<3649=3650
<3650=3652,3651
<3652=3653
<3654=3655
<3655=3657,3656
<3657=3659,3658
<3659=3661,3660
<3668=3669
<3669=3671,3670
<3671=3673,3672
<3696=3702,3701,3697
<3697=3698
<3698=3700,3699
<3702=3719,3718,3717,3716,3715,3714,3713,3712,3711,3710,3709,3703
<3703=3704
<3704=3706,3705
<3706=3708,3707
<3728=3731,3730,3729
<3731=4130,4120,4115,4111,4110,4104,4103,4102,4101,4100,4099,4098,4097,4096,4095,4094,4093,4092,4091,4090,4086,4085,4079,4078,4072,4071,4065,4064,4063,4062,4061,4060,4059,4058,4057,4056,4055,4054,4053,4052,4051,4050,4049,4048,4040,4039,4033,4032,4026,4025,4019,4018,4012,4011,4010,4009,4008,4007,4006,4000,3987,3976,3975,3974,3973,3972,3971,3970,3969,3968,3967,3966,3965,3964,3963,3962,3961,3960,3949,3948,3942,3941,3940,3939,3938,3937,3936,3935,3934,3933,3932,3926,3925,3924,3923,3922,3921,3920,3919,3913,3912,3911,3910,3909,3908,3907,3906,3900,3899,3898,3897,3896,3895,3894,3893,3887,3874,3873,3872,3871,3870,3869,3868,3867,3866,3865,3859,3858,3857,3856,3855,3854,3853,3852,3851,3850,3849,3848,3732,3734,3743,3747,3752,3757,3758,3759,3760,3761,3762,3763,3764,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780,3781,3786,3791,3796,3810,3811,3817,3818,3819,3820,3821,3827,3828,3829,3830,3831,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847
<3732=3733
<3734=3735
<3735=3741,3736
<3736=3737
<3737=3738
<3738=3740,3739
<3741=3742
<3743=3744
<3744=3746,3745
<3747=3748
<3748=3750,3749
<3750=3751
<3752=3753
<3753=3755,3754
<3755=3756
<3764=3765
<3765=3769,3766
<3766=3767
<3767=3768
<3769=3770
<3781=3782
<3782=3784,3783
<3784=3785
<3786=3787
<3787=3789,3788
<3789=3790
<3791=3792
<3792=3794,3793
<3794=3795
<3796=3797
<3797=3807,3798
<3798=3804,3799
<3799=3801,3800
<3801=3803,3802
<3804=3806,3805
<3807=3809,3808
<3811=3812
<3812=3814,3813
<3814=3816,3815
<3821=3822
<3822=3824,3823
<3824=3826,3825
<3831=3832
<3832=3834,3833
<3834=3836,3835
<3859=3860
<3860=3862,3861
<3862=3864,3863
<3874=3883,3879,3876,3875
<3876=3878,3877
<3879=3880
<3880=3882,3881
<3883=3884
<3884=3886,3885
<3887=3888
<3888=3890,3889
<3890=3892,3891
<3900=3901
<3901=3903,3902
<3903=3905,3904
<3913=3914
<3914=3916,3915
<3916=3918,3917
<3926=3927
<3927=3929,3928
<3929=3931,3930
<3942=3943
<3943=3945,3944
<3945=3947,3946
<3949=3956,3952,3950
<3950=3951
<3952=3953
<3953=3955,3954
<3956=3957
<3957=3959,3958
<3976=3977
<3977=3985,3978
<3978=3983,3981,3979
<3979=3980
<3981=3982
<3983=3984
<3985=3986
<3987=3988
<3988=3998,3989
<3989=3996,3994,3990
<3990=3991
<3991=3993,3992
<3994=3995
<3996=3997
<3998=3999
<4000=4001
<4001=4003,4002
<4003=4005,4004
<4012=4013
<4013=4015,4014
<4015=4017,4016
<4019=4020
<4020=4022,4021
<4022=4024,4023
<4026=4027
<4027=4029,4028
<4029=4031,4030
<4033=4034
<4034=4036,4035
<4036=4038,4037
<4040=4041
<4041=4043,4042
<4043=4045,4044
<4045=4047,4046
<4065=4066
<4066=4068,4067
<4068=4070,4069
<4072=4073
<4073=4075,4074
<4075=4077,4076
<4079=4080
<4080=4082,4081
<4082=4084,4083
<4086=4087
<4087=4089,4088
<4104=4105
<4105=4107,4106
<4107=4109,4108
<4111=4112
<4112=4114,4113
<4115=4116
<4116=4119,4118,4117
<4120=4127,4124,4121
<4121=4123,4122
<4124=4126,4125
<4127=4129,4128
<4130=4131
<4131=4133,4132
<4168=4177,4176,4169
<4169=4173,4170
<4170=4172,4171
<4173=4175,4174
<4177=4208,4202,4201,4200,4199,4198,4197,4196,4195,4194,4193,4192,4191,4185,4184,4178
<4178=4179
<4179=4181,4180
<4181=4183,4182
<4185=4186
<4186=4188,4187
<4188=4190,4189
<4202=4203
<4203=4205,4204
<4205=4207,4206
<4221=4224,4223,4222
<4224=4616,4611,4607,4603,4599,4592,4591,4590,4589,4588,4587,4586,4585,4584,4583,4580,4579,4578,4577,4573,4510,4509,4508,4507,4506,4505,4504,4503,4502,4501,4500,4499,4493,4492,4491,4490,4489,4488,4487,4486,4485,4484,4483,4482,4481,4480,4474,4461,4450,4449,4448,4447,4446,4445,4444,4443,4442,4441,4440,4439,4438,4437,4431,4430,4429,4428,4427,4426,4425,4424,4423,4419,4418,4417,4416,4415,4414,4413,4412,4411,4407,4406,4405,4404,4403,4402,4401,4400,4399,4395,4394,4393,4392,4391,4390,4389,4388,4387,4383,4356,4355,4354,4353,4352,4351,4350,4349,4348,4342,4341,4340,4339,4338,4225,4227,4232,4240,4241,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4266,4267,4279,4283,4284,4285,4286,4287,4288,4289,4290,4291,4299,4300,4301,4306,4311,4316,4320,4321,4322,4323,4324,4325,4326,4327,4328,4334,4335,4336,4337
<4225=4226
<4227=4228
<4228=4230,4229
<4230=4231
<4232=4233
<4233=4235,4234
<4235=4237,4236
<4237=4239,4238
<4241=4242
<4242=4244,4243
<4244=4246,4245
<4260=4261
<4261=4263,4262
<4263=4265,4264
<4267=4275,4268
<4268=4269
<4269=4273,4270
<4270=4271
<4271=4272
<4273=4274
<4275=4276
<4276=4278,4277
<4279=4280
<4280=4282,4281
<4291=4292
<4292=4294,4293
<4294=4296,4295
<4296=4298,4297
<4301=4302
<4302=4304,4303
<4304=4305
<4306=4307
<4307=4309,4308
<4309=4310
<4311=4312
<4312=4314,4313
<4314=4315
<4316=4317
<4317=4319,4318
<4328=4329
<4329=4331,4330
<4331=4333,4332
<4342=4343
<4343=4345,4344
<4345=4347,4346
<4356=4379,4375,4372,4357
<4357=4371,4370,4369,4368,4367,4366,4365,4364,4358
<4358=4359
<4359=4361,4360
<4361=4363,4362
<4372=4374,4373
<4375=4376
<4376=4378,4377
<4379=4380
<4380=4382,4381
<4383=4384
<4384=4386,4385
<4395=4396
<4396=4398,4397
<4407=4408
<4408=4410,4409
<4419=4420
<4420=4422,4421
<4431=4432
<4432=4434,4433
<4434=4436,4435
<4450=4451
<4451=4459,4452
<4452=4457,4455,4453
<4453=4454
<4455=4456
<4457=4458
<4459=4460
<4461=4462
<4462=4472,4463
<4463=4470,4468,4464
<4464=4465
<4465=4467,4466
<4468=4469
<4470=4471
<4472=4473
<4474=4475
<4475=4477,4476
<4477=4479,4478
<4493=4494
<4494=4496,4495
<4496=4498,4497
<4510=4564,4549,4511
<4511=4512
<4512=4513
<4513=4545,4530,4514
<4514=4515
<4515=4529,4528,4527,4526,4525,4524,4523,4522,4521,4520,4519,4518,4517,4516
<4530=4544,4543,4542,4541,4540,4539,4538,4537,4536,4535,4534,4533,4532,4531
<4545=4546
<4546=4548,4547
<4549=4563,4562,4561,4560,4559,4558,4557,4556,4555,4554,4553,4552,4551,4550
<4564=4565
<4565=4567,4566
<4567=4569,4568
<4569=4570
<4570=4572,4571
<4573=4574
<4574=4576,4575
<4580=4581
<4581=4582
<4592=4593
<4593=4598,4597,4594
<4594=4596,4595
<4599=4600
<4600=4602,4601
<4603=4604
<4604=4606,4605
<4607=4608
<4608=4610,4609
<4611=4612
<4612=4615,4614,4613
<4616=4617
<4617=4620,4619,4618
<4654=4666,4665,4655
<4655=4662,4659,4656
<4656=4658,4657
<4659=4661,4660
<4662=4664,4663
<4666=4694,4688,4687,4681,4680,4674,4673,4667
<4667=4668
<4668=4670,4669
<4670=4672,4671
<4674=4675
<4675=4677,4676
<4677=4679,4678
<4681=4682
<4682=4684,4683
<4684=4686,4685
<4688=4689
<4689=4691,4690
<4691=4693,4692
<4708=4711,4710,4709
<4711=4817,4811,4810,4804,4712,4718,4719,4720,4721,4722,4723,4724,4725,4726,4727,4728,4729,4730,4731,4732,4733,4734,4735,4736,4737,4743,4744,4750,4751,4757,4758,4764,4765,4773,4774,4775,4776,4777,4778,4779,4780,4781,4782,4783,4784,4785,4786,4787,4788,4789,4790,4796,4797,4803
<4712=4713
<4713=4715,4714
<4715=4717,4716
<4737=4738
<4738=4740,4739
<4740=4742,4741
<4744=4745
<4745=4747,4746
<4747=4749,4748
<4751=4752
<4752=4754,4753
<4754=4756,4755
<4758=4759
<4759=4761,4760
<4761=4763,4762
<4765=4766
<4766=4768,4767
<4768=4770,4769
<4770=4772,4771
<4790=4791
<4791=4793,4792
<4793=4795,4794
<4797=4798
<4798=4800,4799
<4800=4802,4801
<4804=4805
<4805=4807,4806
<4807=4809,4808
<4811=4812
<4812=4814,4813
<4814=4816,4815
<4837=4849,4848,4838
<4838=4845,4842,4839
<4839=4841,4840
<4842=4844,4843
<4845=4847,4846
<4849=5097,5088,5087,5086,5085,5084,5083,5082,5081,5080,5079,5078,5077,5076,5075,5074,5073,5072,5071,5070,5069,5068,5055,5035,5024,5023,5022,5021,5020,5019,5018,5017,5016,5015,5005,5004,5003,5002,5001,5000,4850,4851,4852,4853,4854,4855,4856,4857,4858,4859,4865,4866,4872,4873,4879,4880,4886,4887,4893,4894,4900,4901,4907,4908,4914,4915,4921,4922,4928,4929,4939,4952,4958,4964,4965,4966,4967,4968,4969,4970,4971,4972,4973,4974,4975,4976,4987,4997,4998,4999
<4859=4860
<4860=4862,4861
<4862=4864,4863
<4866=4867
<4867=4869,4868
<4869=4871,4870
<4873=4874
<4874=4876,4875
<4876=4878,4877
<4880=4881
<4881=4883,4882
<4883=4885,4884
<4887=4888
<4888=4890,4889
<4890=4892,4891
<4894=4895
<4895=4897,4896
<4897=4899,4898
<4901=4902
<4902=4904,4903
<4904=4906,4905
<4908=4909
<4909=4911,4910
<4911=4913,4912
<4915=4916
<4916=4918,4917
<4918=4920,4919
<4922=4923
<4923=4925,4924
<4925=4927,4926
<4929=4930
<4930=4932,4931
<4932=4934,4933
<4934=4936,4935
<4936=4938,4937
<4939=4948,4944,4941,4940
<4941=4943,4942
<4944=4945
<4945=4947,4946
<4948=4949
<4949=4951,4950
<4952=4953
<4953=4955,4954
<4955=4957,4956
<4958=4959
<4959=4961,4960
<4961=4963,4962
<4976=4983,4979,4977
<4977=4978
<4979=4980
<4980=4982,4981
<4983=4984
<4984=4986,4985
<4987=4988
<4988=4993,4989
<4989=4990
<4990=4992,4991
<4993=4994
<4994=4996,4995
<5005=5006
<5006=5011,5007
<5007=5008
<5008=5010,5009
<5011=5012
<5012=5014,5013
<5024=5031,5027,5025
<5025=5026
<5027=5028
<5028=5030,5029
<5031=5032
<5032=5034,5033
<5035=5051,5047,5036
<5036=5037
<5037=5038
<5038=5043,5039
<5039=5040
<5040=5042,5041
<5043=5044
<5044=5046,5045
<5047=5048
<5048=5050,5049
<5051=5052
<5052=5054,5053
<5055=5067,5061,5056
<5056=5057
<5057=5059,5058
<5059=5060
<5061=5062
<5062=5064,5063
<5064=5066,5065
<5088=5089
<5089=5093,5090
<5090=5091
<5091=5092
<5093=5094
<5094=5096,5095
<5097=5098
<5098=5100,5099
<5131=5137,5136,5132
<5132=5133
<5133=5135,5134
<5137=5279,5278,5277,5276,5275,5274,5273,5272,5138,5156,5162,5163,5164,5165,5166,5167,5168,5169,5170,5171,5172,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5242,5243,5244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5270,5271
<5138=5154,5139
<5139=5153,5152,5151,5150,5149,5148,5147,5146,5140
<5140=5141
<5141=5143,5142
<5143=5145,5144
<5154=5155
<5156=5157
<5157=5159,5158
<5159=5161,5160
<5172=5225,5194,5173
<5173=5174
<5174=5193,5192,5191,5190,5189,5188,5187,5186,5185,5184,5183,5182,5181,5180,5179,5178,5177,5175
<5175=5176
<5194=5224,5223,5222,5221,5220,5219,5218,5217,5216,5215,5214,5213,5212,5211,5210,5202,5201,5195
<5195=5196
<5196=5198,5197
<5198=5200,5199
<5202=5203
<5203=5207,5204
<5204=5206,5205
<5207=5209,5208
<5225=5226
<5226=5228,5227
<5263=5265,5264
<5265=5266
<5266=5268,5267
<5268=5269
<5294=5300,5299,5295
<5295=5296
<5296=5298,5297
<5300=5428,5427,5417,5416,5415,5405,5404,5403,5402,5401,5301,5308,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5339,5340,5344,5348,5349,5350,5351,5352,5353,5354,5355,5356,5363,5373,5374,5375,5381,5382,5390,5391,5392,5393,5394,5395,5396,5397,5398,5399,5400
<5301=5302
<5302=5306,5303
<5303=5304
<5304=5305
<5306=5307
<5308=5310,5309
<5310=5311
<5311=5313,5312
<5313=5314
<5333=5334
<5334=5336,5335
<5336=5338,5337
<5340=5341
<5341=5343,5342
<5344=5345
<5345=5347,5346
<5356=5357
<5357=5362,5361,5358
<5358=5360,5359
<5363=5364
<5364=5368,5365
<5365=5367,5366
<5368=5370,5369
<5370=5372,5371
<5375=5376
<5376=5378,5377
<5378=5380,5379
<5382=5383
<5383=5387,5384
<5384=5386,5385
<5387=5389,5388
<5405=5406
<5406=5410,5407
<5407=5409,5408
<5410=5412,5411
<5412=5414,5413
<5417=5418
<5418=5422,5419
<5419=5421,5420
<5422=5424,5423
<5424=5426,5425
<5444=5450,5449,5445
<5445=5446
<5446=5448,5447
<5450=5500,5499,5498,5497,5496,5495,5494,5493,5492,5491,5490,5489,5488,5487,5486,5485,5484,5483,5482,5481,5480,5474,5473,5472,5471,5470,5469,5468,5462,5458,5457,5451
<5451=5452
<5452=5454,5453
<5454=5456,5455
<5458=5459
<5459=5461,5460
<5462=5463
<5463=5465,5464
<5465=5467,5466
<5474=5475
<5475=5477,5476
<5477=5479,5478
<5513=5516,5515,5514
<5516=5855,5854,5853,5852,5851,5850,5849,5845,5841,5840,5839,5829,5828,5827,5826,5825,5824,5823,5822,5821,5817,5816,5815,5814,5813,5812,5811,5810,5809,5805,5804,5803,5802,5801,5800,5799,5798,5797,5793,5792,5791,5790,5789,5788,5787,5517,5694,5721,5725,5726,5727,5728,5729,5730,5731,5732,5733,5737,5738,5739,5740,5741,5742,5743,5744,5745,5749,5750,5751,5752,5753,5754,5755,5756,5757,5761,5762,5763,5764,5765,5766,5767,5768,5769,5773,5774,5775,5776,5777,5778,5779,5780,5781,5785,5786
<5517=5690,5686,5683,5518
<5518=5682,5681,5680,5679,5678,5677,5676,5675,5674,5673,5519
<5519=5672,5671,5670,5669,5668,5667,5666,5665,5664,5660,5659,5658,5657,5656,5655,5647,5646,5645,5644,5643,5642,5634,5633,5632,5631,5630,5629,5621,5620,5619,5618,5617,5616,5608,5576,5529,5528,5520
<5520=5521
<5521=5525,5522
<5522=5524,5523
<5525=5527,5526
<5529=5568,5564,5561,5530
<5530=5560,5559,5558,5557,5556,5546,5545,5544,5543,5542,5541,5531
<5531=5532
<5532=5534,5533
<5534=5536,5535
<5536=5538,5537
<5538=5540,5539
<5546=5547
<5547=5549,5548
<5549=5551,5550
<5551=5553,5552
<5553=5555,5554
<5561=5563,5562
<5564=5565
<5565=5567,5566
<5568=5569
<5569=5570
<5570=5575,5574,5571
<5571=5573,5572
<5576=5600,5596,5593,5577
<5577=5592,5591,5590,5589,5588,5578
<5578=5579
<5579=5581,5580
<5581=5583,5582
<5583=5585,5584
<5585=5587,5586
<5593=5595,5594
<5596=5597
<5597=5599,5598
<5600=5601
<5601=5602
<5602=5607,5606,5603
<5603=5605,5604
<5608=5609
<5609=5611,5610
<5611=5613,5612
<5613=5615,5614
<5621=5622
<5622=5624,5623
<5624=5626,5625
<5626=5628,5627
<5634=5635
<5635=5637,5636
<5637=5639,5638
<5639=5641,5640
<5647=5648
<5648=5650,5649
<5650=5652,5651
<5652=5654,5653
<5660=5661
<5661=5663,5662
<5683=5685,5684
<5686=5687
<5687=5689,5688
<5690=5691
<5691=5693,5692
<5694=5717,5713,5710,5695
<5695=5709,5708,5707,5706,5705,5704,5703,5702,5696
<5696=5697
<5697=5699,5698
<5699=5701,5700
<5710=5712,5711
<5713=5714
<5714=5716,5715
<5717=5718
<5718=5720,5719
<5721=5722
<5722=5724,5723
<5733=5734
<5734=5736,5735
<5745=5746
<5746=5748,5747
<5757=5758
<5758=5760,5759
<5769=5770
<5770=5772,5771
<5781=5782
<5782=5784,5783
<5793=5794
<5794=5796,5795
<5805=5806
<5806=5808,5807
<5817=5818
<5818=5820,5819
<5829=5830
<5830=5834,5831
<5831=5833,5832
<5834=5836,5835
<5836=5838,5837
<5841=5842
<5842=5844,5843
<5845=5846
<5846=5848,5847
<5855=5856
<5856=5858,5857
<5882=5888,5887,5883
<5883=5884
<5884=5886,5885
<5888=5902,5896,5895,5889
<5889=5890
<5890=5892,5891
<5892=5894,5893
<5896=5897
<5897=5899,5898
<5899=5901,5900
<5912=5915,5914,5913
<5915=6502,6489,6488,6482,6465,6458,6409,6408,6407,6406,6405,6399,6398,6397,6396,6395,6394,6393,6392,6386,6385,6384,6383,6382,6376,6354,6353,6352,6351,6350,6344,6343,6342,6341,6340,6339,6338,6337,6331,6330,6329,6328,6327,6326,6325,6324,6318,6317,6316,6315,6314,6313,6312,6311,6305,6304,6303,6302,6301,6300,6299,6298,6292,5916,5922,5923,5929,5930,6162,6168,6169,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6191,6192,6193,6204,6210,6211,6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6242,6243,6249,6250,6279,6285,6286,6287,6288,6289,6290,6291
<5916=5917
<5917=5919,5918
<5919=5921,5920
<5923=5924
<5924=5926,5925
<5926=5928,5927
<5930=6158,5931
<5931=5932
<5932=6154,6150,6147,5933
<5933=6146,6145,6144,6143,6142,6141,6140,6139,6138,6137,5934
<5934=6136,6135,6134,6133,6132,6131,6130,6129,6128,6124,6123,6109,6108,6107,6106,6105,6104,6103,6102,6101,6100,6099,6098,6097,6096,6088,6087,6073,6072,6058,6057,6041,6007,5956,5955,5947,5946,5945,5944,5943,5942,5941,5940,5939,5938,5937,5936,5935
<5947=5948
<5948=5952,5949
<5949=5951,5950
<5952=5954,5953
<5956=5999,5995,5992,5957
<5957=5991,5975,5974,5958
<5958=5959
<5959=5965,5960
<5960=5964,5961
<5961=5963,5962
<5965=5967,5966
<5967=5969,5968
<5969=5971,5970
<5971=5973,5972
<5975=5976
<5976=5982,5977
<5977=5981,5978
<5978=5980,5979
<5982=5984,5983
<5984=5986,5985
<5986=5988,5987
<5988=5990,5989
<5992=5994,5993
<5995=5996
<5996=5998,5997
<5999=6000
<6000=6001
<6001=6006,6005,6002
<6002=6004,6003
<6007=6033,6029,6026,6008
<6008=6025,6009
<6009=6010
<6010=6016,6011
<6011=6015,6012
<6012=6014,6013
<6016=6018,6017
<6018=6020,6019
<6020=6022,6021
<6022=6024,6023
<6026=6028,6027
<6029=6030
<6030=6032,6031
<6033=6034
<6034=6035
<6035=6040,6039,6036
<6036=6038,6037
<6041=6042
<6042=6050,6043
<6043=6049,6044
<6044=6048,6045
<6045=6047,6046
<6050=6052,6051
<6052=6054,6053
<6054=6056,6055
<6058=6059
<6059=6065,6060
<6060=6064,6061
<6061=6063,6062
<6065=6067,6066
<6067=6069,6068
<6069=6071,6070
<6073=6074
<6074=6080,6075
<6075=6079,6076
<6076=6078,6077
<6080=6082,6081
<6082=6084,6083
<6084=6086,6085
<6088=6089
<6089=6091,6090
<6091=6093,6092
<6093=6095,6094
<6109=6110
<6110=6116,6111
<6111=6115,6112
<6112=6114,6113
<6116=6118,6117
<6118=6120,6119
<6120=6122,6121
<6124=6125
<6125=6127,6126
<6147=6149,6148
<6150=6151
<6151=6153,6152
<6154=6155
<6155=6157,6156
<6158=6159
<6159=6161,6160
<6162=6163
<6163=6165,6164
<6165=6167,6166
<6169=6170
<6170=6174,6171
<6171=6172
<6172=6173
<6174=6175
<6175=6177,6176
<6193=6194
<6194=6202,6195
<6195=6200,6198,6196
<6196=6197
<6198=6199
<6200=6201
<6202=6203
<6204=6205
<6205=6207,6206
<6207=6209,6208
<6211=6225,6219,6218,6212
<6212=6213
<6213=6215,6214
<6215=6217,6216
<6219=6220
<6220=6222,6221
<6222=6224,6223
<6236=6237
<6237=6239,6238
<6239=6241,6240
<6243=6244
<6244=6246,6245
<6246=6248,6247
<6250=6275,6271,6268,6251
<6251=6267,6266,6265,6264,6263,6262,6261,6260,6259,6258,6252
<6252=6253
<6253=6255,6254
<6255=6257,6256
<6268=6270,6269
<6271=6272
<6272=6274,6273
<6275=6276
<6276=6278,6277
<6279=6280
<6280=6282,6281
<6282=6284,6283
<6292=6293
<6293=6295,6294
<6295=6297,6296
<6305=6306
<6306=6308,6307
<6308=6310,6309
<6318=6319
<6319=6321,6320
<6321=6323,6322
<6331=6332
<6332=6334,6333
<6334=6336,6335
<6344=6345
<6345=6347,6346
<6347=6349,6348
<6354=6372,6361,6355
<6355=6356
<6356=6357
<6357=6358
<6358=6360,6359
<6361=6371,6370,6369,6368,6362
<6362=6363
<6363=6365,6364
<6365=6367,6366
<6372=6373
<6373=6375,6374
<6376=6377
<6377=6379,6378
<6379=6381,6380
<6386=6387
<6387=6389,6388
<6389=6391,6390
<6399=6400
<6400=6402,6401
<6402=6404,6403
<6409=6456,6410
<6410=6455,6454,6453,6452,6451,6450,6449,6448,6447,6446,6445,6433,6432,6431,6430,6429,6428,6427,6421,6420,6419,6418,6417,6416,6415,6414,6413,6412,6411
<6421=6422
<6422=6424,6423
<6424=6426,6425
<6433=6434
<6434=6444,6443,6435
<6435=6442,6436
<6436=6440,6437
<6437=6438
<6438=6439
<6440=6441
<6456=6457
<6458=6459
<6459=6464,6463,6460
<6460=6462,6461
<6465=6468,6466
<6466=6467
<6468=6469
<6469=6476,6470
<6470=6472,6471
<6472=6474,6473
<6474=6475
<6476=6478,6477
<6478=6479
<6479=6481,6480
<6482=6483
<6483=6485,6484
<6485=6487,6486
<6489=6499,6496,6493,6490
<6490=6492,6491
<6493=6495,6494
<6496=6498,6497
<6499=6501,6500
<6502=6503
<6503=6505,6504
<6562=6568,6567,6563
<6563=6564
<6564=6566,6565
<6568=6620,6609,6608,6597,6596,6590,6589,6583,6582,6576,6575,6569
<6569=6570
<6570=6572,6571
<6572=6574,6573
<6576=6577
<6577=6579,6578
<6579=6581,6580
<6583=6584
<6584=6586,6585
<6586=6588,6587
<6590=6591
<6591=6593,6592
<6593=6595,6594
<6597=6598
<6598=6605,6599
<6599=6603,6600
<6600=6601
<6601=6602
<6603=6604
<6605=6607,6606
<6609=6610
<6610=6617,6611
<6611=6615,6612
<6612=6613
<6613=6614
<6615=6616
<6617=6619,6618
<6636=6639,6638,6637
<6639=6764,6763,6762,6761,6760,6759,6758,6642,6640
<6640=6641
<6642=6757,6756,6752,6751,6745,6744,6738,6737,6731,6730,6724,6723,6717,6716,6710,6709,6703,6702,6701,6700,6699,6698,6697,6696,6695,6694,6693,6692,6691,6690,6689,6688,6687,6686,6678,6677,6671,6670,6664,6663,6657,6656,6650,6645,6643
<6643=6644
<6645=6646
<6646=6648,6647
<6648=6649
<6650=6651
<6651=6653,6652
<6653=6655,6654
<6657=6658
<6658=6660,6659
<6660=6662,6661
<6664=6665
<6665=6667,6666
<6667=6669,6668
<6671=6672
<6672=6674,6673
<6674=6676,6675
<6678=6679
<6679=6681,6680
<6681=6683,6682
<6683=6685,6684
<6703=6704
<6704=6706,6705
<6706=6708,6707
<6710=6711
<6711=6713,6712
<6713=6715,6714
<6717=6718
<6718=6720,6719
<6720=6722,6721
<6724=6725
<6725=6727,6726
<6727=6729,6728
<6731=6732
<6732=6734,6733
<6734=6736,6735
<6738=6739
<6739=6741,6740
<6741=6743,6742
<6745=6746
<6746=6748,6747
<6748=6750,6749
<6752=6753
<6753=6755,6754
