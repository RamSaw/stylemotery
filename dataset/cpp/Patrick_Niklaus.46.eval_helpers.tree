>3	FunctionDef	Conv (const string & str , bool * out , bool tryToCache)
>4	ParameterList	const string & str , bool * out , bool tryToCache
>5	Parameter	 
>6	Identifier	tryToCache
>7	ParameterType	bool
>8	Parameter	 
>9	Identifier	out
>10	ParameterType	bool *
>11	Parameter	 
>12	Identifier	str
>13	ParameterType	const string &
>14	ReturnType	bool
>15	CompoundStatement	 
>16	ReturnStatement	 
>17	Identifier	true
>18	IfStatement	if ( Conv ( str , & i ) && i == 0 )
>19	CompoundStatement	 
>20	ExpressionStatement	 
>21	AssignmentExpr	* out = false
>22	Identifier	false
>23	UnaryOp	* out
>24	Identifier	out
>25	UnaryOperator	*
>26	Condition	 
>27	AndExpression	Conv ( str , & i ) && i == 0
>28	EqualityExpression	i == 0
>29	PrimaryExpression	0
>30	Identifier	i
>31	CallExpression	Conv ( str , & i )
>32	ArgumentList	str
>33	Argument	& i
>34	UnaryOp	& i
>35	Identifier	i
>36	UnaryOperator	&
>37	Argument	str
>38	Identifier	str
>39	Callee	Conv
>40	Identifier	Conv
>41	IdentifierDeclStatement	 
>42	IdentifierDecl	i
>43	Identifier	i
>44	IdentifierDeclType	int
>45	IfStatement	if ( str == \"no\" )
>46	ExpressionStatement	 
>47	AssignmentExpr	* out = false
>48	Identifier	false
>49	UnaryOp	* out
>50	Identifier	out
>51	UnaryOperator	*
>52	Condition	 
>53	EqualityExpression	str == \"no\"
>54	PrimaryExpression	\"no\"
>55	Identifier	str
>56	IfStatement	if ( str == \"false\" )
>57	ExpressionStatement	 
>58	AssignmentExpr	* out = false
>59	Identifier	false
>60	UnaryOp	* out
>61	Identifier	out
>62	UnaryOperator	*
>63	Condition	 
>64	EqualityExpression	str == \"false\"
>65	PrimaryExpression	\"false\"
>66	Identifier	str
>67	IfStatement	if ( str == \"\" )
>68	ExpressionStatement	 
>69	AssignmentExpr	* out = false
>70	Identifier	false
>71	UnaryOp	* out
>72	Identifier	out
>73	UnaryOperator	*
>74	Condition	 
>75	EqualityExpression	str == \"\"
>76	PrimaryExpression	\"\"
>77	Identifier	str
>78	ExpressionStatement	 
>79	AssignmentExpr	* out = true
>80	Identifier	true
>81	UnaryOp	* out
>82	Identifier	out
>83	UnaryOperator	*
>84	ExpressionStatement	 
>85	CallExpression	assert ( out )
>86	ArgumentList	out
>87	Argument	out
>88	Identifier	out
>89	Callee	assert
>90	Identifier	assert
>105	FunctionDef	Conv (const string & str , Color * out , bool tryToCache)
>106	ParameterList	const string & str , Color * out , bool tryToCache
>107	Parameter	 
>108	Identifier	tryToCache
>109	ParameterType	bool
>110	Parameter	 
>111	Identifier	out
>112	ParameterType	Color *
>113	Parameter	 
>114	Identifier	str
>115	ParameterType	const string &
>116	ReturnType	bool
>117	CompoundStatement	 
>118	ReturnStatement	 
>119	AndExpression	begin == end && result
>120	Identifier	result
>121	EqualityExpression	begin == end
>122	Identifier	end
>123	Identifier	begin
>124	IdentifierDeclStatement	 
>125	IdentifierDecl	result = qi 
>126	AssignmentExpr	result = qi 
>127	CallExpression	qi 
>128	ArgumentList	begin
>129	Argument	* out
>130	UnaryOp	* out
>131	Identifier	out
>132	UnaryOperator	*
>133	Argument	chs 
>134	Identifier	chs 
>135	Argument	color_
>136	Identifier	color_
>137	Argument	end
>138	Identifier	end
>139	Argument	begin
>140	Identifier	begin
>141	Callee	qi 
>142	Identifier	qi 
>143	Identifier	result
>144	Identifier	result
>145	IdentifierDeclType	bool
>146	IdentifierDeclStatement	 
>147	IdentifierDecl	end = str . cend ( )
>148	AssignmentExpr	end = str . cend ( )
>149	CallExpression	str . cend ( )
>150	ArgumentList	 
>151	Callee	str . cend
>152	MemberAccess	str . cend
>153	Identifier	cend
>154	Identifier	str
>155	Identifier	end
>156	Identifier	end
>157	IdentifierDeclType	StringIterator
>158	IdentifierDeclStatement	 
>159	IdentifierDecl	begin = str . cbegin ( )
>160	AssignmentExpr	begin = str . cbegin ( )
>161	CallExpression	str . cbegin ( )
>162	ArgumentList	 
>163	Callee	str . cbegin
>164	MemberAccess	str . cbegin
>165	Identifier	cbegin
>166	Identifier	str
>167	Identifier	begin
>168	Identifier	begin
>169	IdentifierDeclType	StringIterator
>170	ExpressionStatement	 
>171	CallExpression	assert ( out )
>172	ArgumentList	out
>173	Argument	out
>174	Identifier	out
>175	Callee	assert
>176	Identifier	assert
>192	FunctionDef	Conv (const string & str , string * out , bool tryToCache)
>193	ParameterList	const string & str , string * out , bool tryToCache
>194	Parameter	 
>195	Identifier	tryToCache
>196	ParameterType	bool
>197	Parameter	 
>198	Identifier	out
>199	ParameterType	string *
>200	Parameter	 
>201	Identifier	str
>202	ParameterType	const string &
>203	ReturnType	bool
>204	CompoundStatement	 
>205	ReturnStatement	 
>206	UnaryOp	! quote
>207	Identifier	quote
>208	UnaryOperator	!
>209	ExpressionStatement	 
>210	CallExpression	boost 
>211	ArgumentList	* out
>212	Argument	* out
>213	UnaryOp	* out
>214	Identifier	out
>215	UnaryOperator	*
>216	Callee	boost 
>217	Identifier	boost 
>218	CompoundStatement	 
>219	IfStatement	if ( c == '\\"' )
>220	ElseStatement	else
>221	CompoundStatement	 
>222	ExpressionStatement	 
>223	CallExpression	out -> push_back ( c )
>224	ArgumentList	c
>225	Argument	c
>226	Identifier	c
>227	Callee	out -> push_back
>228	PtrMemberAccess	out -> push_back
>229	Identifier	push_back
>230	Identifier	out
>231	CompoundStatement	 
>232	ExpressionStatement	 
>233	AssignmentExpr	quote = ! quote
>234	UnaryOp	! quote
>235	Identifier	quote
>236	UnaryOperator	!
>237	Identifier	quote
>238	Condition	 
>239	EqualityExpression	c == '\\"'
>240	PrimaryExpression	'\\"'
>241	Identifier	c
>242	Statement	 
>243	Statement	 
>244	Label	 
>245	Identifier	c
>246	Statement	 
>247	Statement	 
>248	Statement	 
>249	IdentifierDeclStatement	 
>250	IdentifierDecl	quote = false
>251	AssignmentExpr	quote = false
>252	Identifier	false
>253	Identifier	false
>254	Identifier	quote
>255	IdentifierDeclType	bool
>256	ExpressionStatement	 
>257	CallExpression	out -> clear ( )
>258	ArgumentList	 
>259	Callee	out -> clear
>260	PtrMemberAccess	out -> clear
>261	Identifier	clear
>262	Identifier	out
>263	ExpressionStatement	 
>264	CallExpression	assert ( out )
>265	ArgumentList	out
>266	Argument	out
>267	Identifier	out
>268	Callee	assert
>269	Identifier	assert
>280	FunctionDef	Conv (const string & str , MaybeCachedString * out , bool tryToCache)
>281	ParameterList	const string & str , MaybeCachedString * out , bool tryToCache
>282	Parameter	 
>283	Identifier	tryToCache
>284	ParameterType	bool
>285	Parameter	 
>286	Identifier	out
>287	ParameterType	MaybeCachedString *
>288	Parameter	 
>289	Identifier	str
>290	ParameterType	const string &
>291	ReturnType	bool
>292	CompoundStatement	 
>293	ReturnStatement	 
>294	Identifier	result
>295	IfStatement	if ( result )
>296	CompoundStatement	 
>297	IfStatement	if ( tryToCache )
>298	ElseStatement	else
>299	CompoundStatement	 
>300	ExpressionStatement	 
>301	AssignmentExpr	* out = extr
>302	Identifier	extr
>303	UnaryOp	* out
>304	Identifier	out
>305	UnaryOperator	*
>306	CompoundStatement	 
>307	ExpressionStatement	 
>308	AssignmentExpr	* out = CachedString ( extr )
>309	CallExpression	CachedString ( extr )
>310	ArgumentList	extr
>311	Argument	extr
>312	Identifier	extr
>313	Callee	CachedString
>314	Identifier	CachedString
>315	UnaryOp	* out
>316	Identifier	out
>317	UnaryOperator	*
>318	Condition	 
>319	Identifier	tryToCache
>320	Condition	 
>321	Identifier	result
>322	IdentifierDeclStatement	 
>323	IdentifierDecl	result = Conv < string > ( str , & extr )
>324	AssignmentExpr	result = Conv < string > ( str , & extr )
>325	RelationalExpression	Conv < string > ( str , & extr )
>326	RelationalExpression	string > ( str , & extr )
>327	Expression	str , & extr
>328	UnaryOp	& extr
>329	Identifier	extr
>330	UnaryOperator	&
>331	Identifier	str
>332	Identifier	string
>333	Identifier	Conv
>334	Identifier	result
>335	Identifier	result
>336	IdentifierDeclType	bool
>337	IdentifierDeclStatement	 
>338	IdentifierDecl	extr
>339	Identifier	extr
>340	IdentifierDeclType	string
>354	FunctionDef	ToString (const bool & v)
>355	ParameterList	const bool & v
>356	Parameter	 
>357	Identifier	v
>358	ParameterType	const bool &
>359	ReturnType	string
>360	CompoundStatement	 
>361	ReturnStatement	 
>362	ConditionalExpression	v ? \"true\" 
>363	PrimaryExpression	\"false\"
>364	PrimaryExpression	\"true\"
>365	Condition	v
>366	Identifier	v
<3=15,14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<15=84,78,67,56,45,41,18,16
<16=17
<18=26,19
<19=20
<20=21
<21=23,22
<23=25,24
<26=27
<27=31,28
<28=30,29
<31=39,32
<32=37,33
<33=34
<34=36,35
<37=38
<39=40
<41=42
<42=44,43
<45=52,46
<46=47
<47=49,48
<49=51,50
<52=53
<53=55,54
<56=63,57
<57=58
<58=60,59
<60=62,61
<63=64
<64=66,65
<67=74,68
<68=69
<69=71,70
<71=73,72
<74=75
<75=77,76
<78=79
<79=81,80
<81=83,82
<84=85
<85=89,86
<86=87
<87=88
<89=90
<105=117,116,106
<106=113,110,107
<107=109,108
<110=112,111
<113=115,114
<117=170,158,146,124,118
<118=119
<119=121,120
<121=123,122
<124=125
<125=145,144,126
<126=143,127
<127=141,128
<128=139,137,135,133,129
<129=130
<130=132,131
<133=134
<135=136
<137=138
<139=140
<141=142
<146=147
<147=157,156,148
<148=155,149
<149=151,150
<151=152
<152=154,153
<158=159
<159=169,168,160
<160=167,161
<161=163,162
<163=164
<164=166,165
<170=171
<171=175,172
<172=173
<173=174
<175=176
<192=204,203,193
<193=200,197,194
<194=196,195
<197=199,198
<200=202,201
<204=263,256,249,248,247,246,244,243,242,218,209,205
<205=206
<206=208,207
<209=210
<210=216,211
<211=212
<212=213
<213=215,214
<216=217
<218=219
<219=238,231,220
<220=221
<221=222
<222=223
<223=227,224
<224=225
<225=226
<227=228
<228=230,229
<231=232
<232=233
<233=237,234
<234=236,235
<238=239
<239=241,240
<244=245
<249=250
<250=255,254,251
<251=253,252
<256=257
<257=259,258
<259=260
<260=262,261
<263=264
<264=268,265
<265=266
<266=267
<268=269
<280=292,291,281
<281=288,285,282
<282=284,283
<285=287,286
<288=290,289
<292=337,322,295,293
<293=294
<295=320,296
<296=297
<297=318,306,298
<298=299
<299=300
<300=301
<301=303,302
<303=305,304
<306=307
<307=308
<308=315,309
<309=313,310
<310=311
<311=312
<313=314
<315=317,316
<318=319
<320=321
<322=323
<323=336,335,324
<324=334,325
<325=333,326
<326=332,327
<327=331,328
<328=330,329
<337=338
<338=340,339
<354=360,359,355
<355=356
<356=358,357
<360=361
<361=362
<362=365,364,363
<365=366
